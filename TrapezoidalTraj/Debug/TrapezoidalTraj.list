
TrapezoidalTraj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfdc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  0800d178  0800d178  0001d178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da40  0800da40  0002031c  2**0
                  CONTENTS
  4 .ARM          00000008  0800da40  0800da40  0001da40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da48  0800da48  0002031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da48  0800da48  0001da48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da4c  0800da4c  0001da4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000031c  20000000  0800da50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d00  20000320  0800dd6c  00020320  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001020  0800dd6c  00021020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad11  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ee  00000000  00000000  0003b05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0003e650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  0003f998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3a4  00000000  00000000  00040bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d074  00000000  00000000  0005bf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d26  00000000  00000000  00078fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119d0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005584  00000000  00000000  00119d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000320 	.word	0x20000320
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d15c 	.word	0x0800d15c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000324 	.word	0x20000324
 80001d4:	0800d15c 	.word	0x0800d15c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b992 	b.w	80010a8 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f824 	bl	8000dd8 <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fbd3 	bl	8000550 <__aeabi_dmul>
 8000daa:	f000 f97f 	bl	80010ac <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fb54 	bl	800045c <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fbca 	bl	8000550 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa0c 	bl	80001e0 <__aeabi_dsub>
 8000dc8:	f000 f970 	bl	80010ac <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__aeabi_d2uiz>:
 80010ac:	004a      	lsls	r2, r1, #1
 80010ae:	d211      	bcs.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010b4:	d211      	bcs.n	80010da <__aeabi_d2uiz+0x2e>
 80010b6:	d50d      	bpl.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010c0:	d40e      	bmi.n	80010e0 <__aeabi_d2uiz+0x34>
 80010c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010ce:	fa23 f002 	lsr.w	r0, r3, r2
 80010d2:	4770      	bx	lr
 80010d4:	f04f 0000 	mov.w	r0, #0
 80010d8:	4770      	bx	lr
 80010da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80010de:	d102      	bne.n	80010e6 <__aeabi_d2uiz+0x3a>
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0000 	mov.w	r0, #0
 80010ea:	4770      	bx	lr

080010ec <BaseSystem_SetHome>:
int Placeopposite_last[2] = {0, 0};

uint8_t PFlag = 0;

void BaseSystem_SetHome()
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	static enum {idle, sethome} state = idle;

	if (SetHomeFlag)
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <BaseSystem_SetHome+0x74>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d02a      	beq.n	800114e <BaseSystem_SetHome+0x62>
	{
		switch(state)
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <BaseSystem_SetHome+0x78>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <BaseSystem_SetHome+0x1a>
 8001100:	2b01      	cmp	r3, #1
 8001102:	d011      	beq.n	8001128 <BaseSystem_SetHome+0x3c>
				registerFrame[16].U16 = 0b00000000;//bit 2 set home = 0 //y-axis moving status
			}
		break;
		}
	}
}
 8001104:	e026      	b.n	8001154 <BaseSystem_SetHome+0x68>
			registerFrame[1].U16 = 0b00000000; //bit 2 set home = 0 //base system status
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <BaseSystem_SetHome+0x7c>)
 8001108:	2200      	movs	r2, #0
 800110a:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b00000100; //bit 2 set home = 1 //y-axis moving status
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <BaseSystem_SetHome+0x7c>)
 800110e:	2204      	movs	r2, #4
 8001110:	841a      	strh	r2, [r3, #32]
			registerFrame[64].U16 = 0b00000001;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <BaseSystem_SetHome+0x7c>)
 8001114:	2201      	movs	r2, #1
 8001116:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			SetHomeYFlag = 1;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <BaseSystem_SetHome+0x80>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
			state = sethome;
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <BaseSystem_SetHome+0x78>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
		break;
 8001126:	e015      	b.n	8001154 <BaseSystem_SetHome+0x68>
			if((registerFrame[64].U16 == 0b00000000) && (SetHomeYFlag == 0))
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <BaseSystem_SetHome+0x7c>)
 800112a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10f      	bne.n	8001152 <BaseSystem_SetHome+0x66>
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <BaseSystem_SetHome+0x80>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <BaseSystem_SetHome+0x66>
				state = idle;
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <BaseSystem_SetHome+0x78>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
				SetHomeFlag = 0;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <BaseSystem_SetHome+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
				registerFrame[16].U16 = 0b00000000;//bit 2 set home = 0 //y-axis moving status
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <BaseSystem_SetHome+0x7c>)
 8001148:	2200      	movs	r2, #0
 800114a:	841a      	strh	r2, [r3, #32]
		break;
 800114c:	e001      	b.n	8001152 <BaseSystem_SetHome+0x66>
	}
 800114e:	bf00      	nop
 8001150:	e000      	b.n	8001154 <BaseSystem_SetHome+0x68>
		break;
 8001152:	bf00      	nop
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20001006 	.word	0x20001006
 8001164:	20000361 	.word	0x20000361
 8001168:	20000f78 	.word	0x20000f78
 800116c:	20000259 	.word	0x20000259

08001170 <BaseSystem_RunPointMode>:

void BaseSystem_RunPointMode()
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	static enum {idle, RunPointMode} state = idle;

	if (RunPointFlag)
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <BaseSystem_RunPointMode+0xc8>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d058      	beq.n	800122e <BaseSystem_RunPointMode+0xbe>
	{
		switch(state)
 800117c:	4b2f      	ldr	r3, [pc, #188]	; (800123c <BaseSystem_RunPointMode+0xcc>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <BaseSystem_RunPointMode+0x1a>
 8001184:	2b01      	cmp	r3, #1
 8001186:	d00d      	beq.n	80011a4 <BaseSystem_RunPointMode+0x34>
				RunPointFlag = 0;
			}
		break;
		}
	}
}
 8001188:	e054      	b.n	8001234 <BaseSystem_RunPointMode+0xc4>
			registerFrame[1].U16 = 0b00000000; //bit 4 run point mode = 0 //base system status
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 800118c:	2200      	movs	r2, #0
 800118e:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b00100000; //bit 5 go point = 1 //y-axis moving status
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 8001192:	2220      	movs	r2, #32
 8001194:	841a      	strh	r2, [r3, #32]
			state = RunPointMode;
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <BaseSystem_RunPointMode+0xcc>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
			runXFlag = 1;
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <BaseSystem_RunPointMode+0xd4>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
		break;
 80011a2:	e047      	b.n	8001234 <BaseSystem_RunPointMode+0xc4>
			if (runXFlag)
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <BaseSystem_RunPointMode+0xd4>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d02d      	beq.n	8001208 <BaseSystem_RunPointMode+0x98>
				registerFrame[65].U16 = registerFrame[48].U16; //position -1400 to 1400
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 80011ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 80011b4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				registerFrame[66].U16 = 3000; //velocity max 3000
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 80011ba:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011be:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				registerFrame[67].U16 = 1; //acceleration 1 2 3
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
				registerFrame[64].U16 = 2; //Run
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				Pf = ((int16_t)registerFrame[49].U16)/10.0;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 80011d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f94e 	bl	800047c <__aeabi_i2d>
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <BaseSystem_RunPointMode+0xd8>)
 80011e6:	f7ff fadd 	bl	80007a4 <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fc5d 	bl	8000ab0 <__aeabi_d2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <BaseSystem_RunPointMode+0xdc>)
 80011fa:	6013      	str	r3, [r2, #0]
				ControllerFlag = 1;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <BaseSystem_RunPointMode+0xe0>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
				runXFlag = 0;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <BaseSystem_RunPointMode+0xd4>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
			if((ControllerFlag == 0) && (registerFrame[64].U16 == 0))
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <BaseSystem_RunPointMode+0xe0>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d110      	bne.n	8001232 <BaseSystem_RunPointMode+0xc2>
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 8001212:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10b      	bne.n	8001232 <BaseSystem_RunPointMode+0xc2>
				state = idle;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <BaseSystem_RunPointMode+0xcc>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
				registerFrame[16].U16 = 0b00000000; //bit 5 go point = 0 //y-axis moving status
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 8001222:	2200      	movs	r2, #0
 8001224:	841a      	strh	r2, [r3, #32]
				RunPointFlag = 0;
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <BaseSystem_RunPointMode+0xc8>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
		break;
 800122c:	e001      	b.n	8001232 <BaseSystem_RunPointMode+0xc2>
	}
 800122e:	bf00      	nop
 8001230:	e000      	b.n	8001234 <BaseSystem_RunPointMode+0xc4>
		break;
 8001232:	bf00      	nop
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20001008 	.word	0x20001008
 800123c:	20000362 	.word	0x20000362
 8001240:	20000f78 	.word	0x20000f78
 8001244:	2000033c 	.word	0x2000033c
 8001248:	40240000 	.word	0x40240000
 800124c:	200008d8 	.word	0x200008d8
 8001250:	20000910 	.word	0x20000910

08001254 <BaseSystem_SetPickTray>:

void BaseSystem_SetPickTray()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af02      	add	r7, sp, #8
	static enum {Prepare, GetFirstPoint, GetSecondPoint} SetPickTrayState = Prepare;

	if (SetPickTrayFlag)
 800125a:	4b8d      	ldr	r3, [pc, #564]	; (8001490 <BaseSystem_SetPickTray+0x23c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8113 	beq.w	800148a <BaseSystem_SetPickTray+0x236>
	{
		switch(SetPickTrayState)
 8001264:	4b8b      	ldr	r3, [pc, #556]	; (8001494 <BaseSystem_SetPickTray+0x240>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d05b      	beq.n	8001324 <BaseSystem_SetPickTray+0xd0>
 800126c:	2b02      	cmp	r3, #2
 800126e:	f300 80cd 	bgt.w	800140c <BaseSystem_SetPickTray+0x1b8>
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <BaseSystem_SetPickTray+0x28>
 8001276:	2b01      	cmp	r3, #1
 8001278:	d01d      	beq.n	80012b6 <BaseSystem_SetPickTray+0x62>
 800127a:	e0c7      	b.n	800140c <BaseSystem_SetPickTray+0x1b8>
		{
		case Prepare:
			registerFrame[1].U16 = 0b00000;
 800127c:	4b86      	ldr	r3, [pc, #536]	; (8001498 <BaseSystem_SetPickTray+0x244>)
 800127e:	2200      	movs	r2, #0
 8001280:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b000001;
 8001282:	4b85      	ldr	r3, [pc, #532]	; (8001498 <BaseSystem_SetPickTray+0x244>)
 8001284:	2201      	movs	r2, #1
 8001286:	841a      	strh	r2, [r3, #32]
			SetPickTrayState = GetFirstPoint;
 8001288:	4b82      	ldr	r3, [pc, #520]	; (8001494 <BaseSystem_SetPickTray+0x240>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001294:	4881      	ldr	r0, [pc, #516]	; (800149c <BaseSystem_SetPickTray+0x248>)
 8001296:	f005 f9a3 	bl	80065e0 <HAL_GPIO_WritePin>
			eff_write(testMode_cmd);
 800129a:	4881      	ldr	r0, [pc, #516]	; (80014a0 <BaseSystem_SetPickTray+0x24c>)
 800129c:	f000 fedc 	bl	8002058 <eff_write>
			memset(Pickreference, 0, sizeof(Pickreference));
 80012a0:	2208      	movs	r2, #8
 80012a2:	2100      	movs	r1, #0
 80012a4:	487f      	ldr	r0, [pc, #508]	; (80014a4 <BaseSystem_SetPickTray+0x250>)
 80012a6:	f00a fd9b 	bl	800bde0 <memset>
			memset(Pickreference_last, 0, sizeof(Pickreference_last));
 80012aa:	2208      	movs	r2, #8
 80012ac:	2100      	movs	r1, #0
 80012ae:	487e      	ldr	r0, [pc, #504]	; (80014a8 <BaseSystem_SetPickTray+0x254>)
 80012b0:	f00a fd96 	bl	800bde0 <memset>
		break;
 80012b4:	e0aa      	b.n	800140c <BaseSystem_SetPickTray+0x1b8>
		case GetFirstPoint:
			GetJoystickXYaxisValue(&Pickreference[0], &Pickreference[1]);
 80012b6:	497d      	ldr	r1, [pc, #500]	; (80014ac <BaseSystem_SetPickTray+0x258>)
 80012b8:	487a      	ldr	r0, [pc, #488]	; (80014a4 <BaseSystem_SetPickTray+0x250>)
 80012ba:	f002 f8d3 	bl	8003464 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 80012be:	f002 fa0d 	bl	80036dc <JoyStickControlCartesian>

			if ((Pickreference_last[0] != Pickreference[0]) || (Pickreference_last[1] != Pickreference[1]))
 80012c2:	4b79      	ldr	r3, [pc, #484]	; (80014a8 <BaseSystem_SetPickTray+0x254>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ce:	4b75      	ldr	r3, [pc, #468]	; (80014a4 <BaseSystem_SetPickTray+0x250>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	d10e      	bne.n	80012fc <BaseSystem_SetPickTray+0xa8>
 80012de:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <BaseSystem_SetPickTray+0x254>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ea:	4b6e      	ldr	r3, [pc, #440]	; (80014a4 <BaseSystem_SetPickTray+0x250>)
 80012ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80012f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	f000 8085 	beq.w	8001406 <BaseSystem_SetPickTray+0x1b2>
			{
				SetPickTrayState = GetSecondPoint;
 80012fc:	4b65      	ldr	r3, [pc, #404]	; (8001494 <BaseSystem_SetPickTray+0x240>)
 80012fe:	2202      	movs	r2, #2
 8001300:	701a      	strb	r2, [r3, #0]
				memset(Pickopposite, 0, sizeof(Pickopposite));
 8001302:	2208      	movs	r2, #8
 8001304:	2100      	movs	r1, #0
 8001306:	486a      	ldr	r0, [pc, #424]	; (80014b0 <BaseSystem_SetPickTray+0x25c>)
 8001308:	f00a fd6a 	bl	800bde0 <memset>
				memset(Pickopposite_last, 0, sizeof(Pickopposite_last));
 800130c:	2208      	movs	r2, #8
 800130e:	2100      	movs	r1, #0
 8001310:	4868      	ldr	r0, [pc, #416]	; (80014b4 <BaseSystem_SetPickTray+0x260>)
 8001312:	f00a fd65 	bl	800bde0 <memset>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001316:	2201      	movs	r2, #1
 8001318:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800131c:	485f      	ldr	r0, [pc, #380]	; (800149c <BaseSystem_SetPickTray+0x248>)
 800131e:	f005 f95f 	bl	80065e0 <HAL_GPIO_WritePin>
			}
		break;
 8001322:	e070      	b.n	8001406 <BaseSystem_SetPickTray+0x1b2>
		case GetSecondPoint:

			GetJoystickXYaxisValue(&Pickopposite[0], &Pickopposite[1]);
 8001324:	4964      	ldr	r1, [pc, #400]	; (80014b8 <BaseSystem_SetPickTray+0x264>)
 8001326:	4862      	ldr	r0, [pc, #392]	; (80014b0 <BaseSystem_SetPickTray+0x25c>)
 8001328:	f002 f89c 	bl	8003464 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 800132c:	f002 f9d6 	bl	80036dc <JoyStickControlCartesian>

			if ((Pickopposite_last[0] != Pickopposite[0]) || (Pickopposite_last[1] != Pickopposite[1]))
 8001330:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <BaseSystem_SetPickTray+0x260>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133c:	4b5c      	ldr	r3, [pc, #368]	; (80014b0 <BaseSystem_SetPickTray+0x25c>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	eeb4 7a67 	vcmp.f32	s14, s15
 8001346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134a:	d10d      	bne.n	8001368 <BaseSystem_SetPickTray+0x114>
 800134c:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <BaseSystem_SetPickTray+0x260>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001358:	4b55      	ldr	r3, [pc, #340]	; (80014b0 <BaseSystem_SetPickTray+0x25c>)
 800135a:	edd3 7a01 	vldr	s15, [r3, #4]
 800135e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	d050      	beq.n	800140a <BaseSystem_SetPickTray+0x1b6>
			{

				SetPickTrayState = Prepare;
 8001368:	4b4a      	ldr	r3, [pc, #296]	; (8001494 <BaseSystem_SetPickTray+0x240>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
				SetTwoPointsForCalibrate(Pickreference, Pickreference+1, Pickopposite, Pickopposite+1, 0);
 800136e:	494f      	ldr	r1, [pc, #316]	; (80014ac <BaseSystem_SetPickTray+0x258>)
 8001370:	4a51      	ldr	r2, [pc, #324]	; (80014b8 <BaseSystem_SetPickTray+0x264>)
 8001372:	2300      	movs	r3, #0
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	4613      	mov	r3, r2
 8001378:	4a4d      	ldr	r2, [pc, #308]	; (80014b0 <BaseSystem_SetPickTray+0x25c>)
 800137a:	484a      	ldr	r0, [pc, #296]	; (80014a4 <BaseSystem_SetPickTray+0x250>)
 800137c:	f001 fe80 	bl	8003080 <SetTwoPointsForCalibrate>
				registerFrame[32].U16 = (int)(Pickreference[0]*10);
 8001380:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <BaseSystem_SetPickTray+0x250>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800138a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001392:	ee17 3a90 	vmov	r3, s15
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <BaseSystem_SetPickTray+0x244>)
 800139a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				registerFrame[33].U16 = (int)(Pickreference[1]*10);
 800139e:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <BaseSystem_SetPickTray+0x250>)
 80013a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80013a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b0:	ee17 3a90 	vmov	r3, s15
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <BaseSystem_SetPickTray+0x244>)
 80013b8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
				registerFrame[34].U16 = (int)(PickrotationAngleDegree*100);
 80013bc:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <BaseSystem_SetPickTray+0x268>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80014c0 <BaseSystem_SetPickTray+0x26c>
 80013c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ce:	ee17 3a90 	vmov	r3, s15
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <BaseSystem_SetPickTray+0x244>)
 80013d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				registerFrame[16].U16 = 0b000000;
 80013da:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <BaseSystem_SetPickTray+0x244>)
 80013dc:	2200      	movs	r2, #0
 80013de:	841a      	strh	r2, [r3, #32]
				SetPickTrayFlag = 0;
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <BaseSystem_SetPickTray+0x23c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ec:	482b      	ldr	r0, [pc, #172]	; (800149c <BaseSystem_SetPickTray+0x248>)
 80013ee:	f005 f8f7 	bl	80065e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f8:	4828      	ldr	r0, [pc, #160]	; (800149c <BaseSystem_SetPickTray+0x248>)
 80013fa:	f005 f8f1 	bl	80065e0 <HAL_GPIO_WritePin>
				eff_write(exitTest_cmd);
 80013fe:	4831      	ldr	r0, [pc, #196]	; (80014c4 <BaseSystem_SetPickTray+0x270>)
 8001400:	f000 fe2a 	bl	8002058 <eff_write>

			}
		break;
 8001404:	e001      	b.n	800140a <BaseSystem_SetPickTray+0x1b6>
		break;
 8001406:	bf00      	nop
 8001408:	e000      	b.n	800140c <BaseSystem_SetPickTray+0x1b8>
		break;
 800140a:	bf00      	nop
		}
		Pickreference_last[0] = Pickreference[0];
 800140c:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <BaseSystem_SetPickTray+0x250>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001416:	ee17 2a90 	vmov	r2, s15
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <BaseSystem_SetPickTray+0x254>)
 800141c:	601a      	str	r2, [r3, #0]
		Pickreference_last[1] = Pickreference[1];
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <BaseSystem_SetPickTray+0x250>)
 8001420:	edd3 7a01 	vldr	s15, [r3, #4]
 8001424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001428:	ee17 2a90 	vmov	r2, s15
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <BaseSystem_SetPickTray+0x254>)
 800142e:	605a      	str	r2, [r3, #4]
		Pickopposite_last[0] = Pickopposite[0];
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <BaseSystem_SetPickTray+0x25c>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143a:	ee17 2a90 	vmov	r2, s15
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <BaseSystem_SetPickTray+0x260>)
 8001440:	601a      	str	r2, [r3, #0]
		Pickopposite_last[1] = Pickopposite[1];
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <BaseSystem_SetPickTray+0x25c>)
 8001444:	edd3 7a01 	vldr	s15, [r3, #4]
 8001448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800144c:	ee17 2a90 	vmov	r2, s15
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <BaseSystem_SetPickTray+0x260>)
 8001452:	605a      	str	r2, [r3, #4]

		if (SetHomeYFlag == 1)
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <BaseSystem_SetPickTray+0x274>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d116      	bne.n	800148a <BaseSystem_SetPickTray+0x236>
		{
			memset(Pickreference, 0, sizeof(Pickreference));
 800145c:	2208      	movs	r2, #8
 800145e:	2100      	movs	r1, #0
 8001460:	4810      	ldr	r0, [pc, #64]	; (80014a4 <BaseSystem_SetPickTray+0x250>)
 8001462:	f00a fcbd 	bl	800bde0 <memset>
			memset(Pickopposite, 0, sizeof(Pickopposite));
 8001466:	2208      	movs	r2, #8
 8001468:	2100      	movs	r1, #0
 800146a:	4811      	ldr	r0, [pc, #68]	; (80014b0 <BaseSystem_SetPickTray+0x25c>)
 800146c:	f00a fcb8 	bl	800bde0 <memset>
			memset(Pickreference_last, 0, sizeof(Pickreference_last));
 8001470:	2208      	movs	r2, #8
 8001472:	2100      	movs	r1, #0
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <BaseSystem_SetPickTray+0x254>)
 8001476:	f00a fcb3 	bl	800bde0 <memset>
			memset(Pickopposite_last, 0, sizeof(Pickopposite_last));
 800147a:	2208      	movs	r2, #8
 800147c:	2100      	movs	r1, #0
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <BaseSystem_SetPickTray+0x260>)
 8001480:	f00a fcae 	bl	800bde0 <memset>
			SetPickTrayState = GetFirstPoint;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <BaseSystem_SetPickTray+0x240>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20001004 	.word	0x20001004
 8001494:	20000363 	.word	0x20000363
 8001498:	20000f78 	.word	0x20000f78
 800149c:	40020400 	.word	0x40020400
 80014a0:	20000268 	.word	0x20000268
 80014a4:	200009dc 	.word	0x200009dc
 80014a8:	20000340 	.word	0x20000340
 80014ac:	200009e0 	.word	0x200009e0
 80014b0:	200009e4 	.word	0x200009e4
 80014b4:	20000348 	.word	0x20000348
 80014b8:	200009e8 	.word	0x200009e8
 80014bc:	200009f0 	.word	0x200009f0
 80014c0:	42c80000 	.word	0x42c80000
 80014c4:	2000026c 	.word	0x2000026c
 80014c8:	20000259 	.word	0x20000259

080014cc <BaseSystem_SetPlaceTray>:

void BaseSystem_SetPlaceTray()
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af02      	add	r7, sp, #8
	static enum {Prepare, GetFirstPoint, GetSecondPoint} SetPlaceTrayState = Prepare;

	if(SetPlaceTrayFlag)
 80014d2:	4b8d      	ldr	r3, [pc, #564]	; (8001708 <BaseSystem_SetPlaceTray+0x23c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 8113 	beq.w	8001702 <BaseSystem_SetPlaceTray+0x236>
	{
		switch(SetPlaceTrayState)
 80014dc:	4b8b      	ldr	r3, [pc, #556]	; (800170c <BaseSystem_SetPlaceTray+0x240>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d05b      	beq.n	800159c <BaseSystem_SetPlaceTray+0xd0>
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	f300 80cd 	bgt.w	8001684 <BaseSystem_SetPlaceTray+0x1b8>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <BaseSystem_SetPlaceTray+0x28>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d01d      	beq.n	800152e <BaseSystem_SetPlaceTray+0x62>
 80014f2:	e0c7      	b.n	8001684 <BaseSystem_SetPlaceTray+0x1b8>
		{
		case Prepare:
			registerFrame[1].U16 = 0b00000;
 80014f4:	4b86      	ldr	r3, [pc, #536]	; (8001710 <BaseSystem_SetPlaceTray+0x244>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b000010;
 80014fa:	4b85      	ldr	r3, [pc, #532]	; (8001710 <BaseSystem_SetPlaceTray+0x244>)
 80014fc:	2202      	movs	r2, #2
 80014fe:	841a      	strh	r2, [r3, #32]
			SetPlaceTrayState = GetFirstPoint;
 8001500:	4b82      	ldr	r3, [pc, #520]	; (800170c <BaseSystem_SetPlaceTray+0x240>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150c:	4881      	ldr	r0, [pc, #516]	; (8001714 <BaseSystem_SetPlaceTray+0x248>)
 800150e:	f005 f867 	bl	80065e0 <HAL_GPIO_WritePin>
			eff_write(testMode_cmd);
 8001512:	4881      	ldr	r0, [pc, #516]	; (8001718 <BaseSystem_SetPlaceTray+0x24c>)
 8001514:	f000 fda0 	bl	8002058 <eff_write>
			memset(Placereference, 0, sizeof(Placereference));
 8001518:	2208      	movs	r2, #8
 800151a:	2100      	movs	r1, #0
 800151c:	487f      	ldr	r0, [pc, #508]	; (800171c <BaseSystem_SetPlaceTray+0x250>)
 800151e:	f00a fc5f 	bl	800bde0 <memset>
			memset(Placereference_last, 0, sizeof(Placereference_last));
 8001522:	2208      	movs	r2, #8
 8001524:	2100      	movs	r1, #0
 8001526:	487e      	ldr	r0, [pc, #504]	; (8001720 <BaseSystem_SetPlaceTray+0x254>)
 8001528:	f00a fc5a 	bl	800bde0 <memset>
		break;
 800152c:	e0aa      	b.n	8001684 <BaseSystem_SetPlaceTray+0x1b8>
		case GetFirstPoint:
			GetJoystickXYaxisValue(&Placereference[0], &Placereference[1]);
 800152e:	497d      	ldr	r1, [pc, #500]	; (8001724 <BaseSystem_SetPlaceTray+0x258>)
 8001530:	487a      	ldr	r0, [pc, #488]	; (800171c <BaseSystem_SetPlaceTray+0x250>)
 8001532:	f001 ff97 	bl	8003464 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 8001536:	f002 f8d1 	bl	80036dc <JoyStickControlCartesian>

			if ((Placereference_last[0] != Placereference[0]) || (Placereference_last[1] != Placereference[1]))
 800153a:	4b79      	ldr	r3, [pc, #484]	; (8001720 <BaseSystem_SetPlaceTray+0x254>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	ee07 3a90 	vmov	s15, r3
 8001542:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001546:	4b75      	ldr	r3, [pc, #468]	; (800171c <BaseSystem_SetPlaceTray+0x250>)
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	d10e      	bne.n	8001574 <BaseSystem_SetPlaceTray+0xa8>
 8001556:	4b72      	ldr	r3, [pc, #456]	; (8001720 <BaseSystem_SetPlaceTray+0x254>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	ee07 3a90 	vmov	s15, r3
 800155e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001562:	4b6e      	ldr	r3, [pc, #440]	; (800171c <BaseSystem_SetPlaceTray+0x250>)
 8001564:	edd3 7a01 	vldr	s15, [r3, #4]
 8001568:	eeb4 7a67 	vcmp.f32	s14, s15
 800156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001570:	f000 8085 	beq.w	800167e <BaseSystem_SetPlaceTray+0x1b2>
			{
				SetPlaceTrayState = GetSecondPoint;
 8001574:	4b65      	ldr	r3, [pc, #404]	; (800170c <BaseSystem_SetPlaceTray+0x240>)
 8001576:	2202      	movs	r2, #2
 8001578:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001580:	4864      	ldr	r0, [pc, #400]	; (8001714 <BaseSystem_SetPlaceTray+0x248>)
 8001582:	f005 f82d 	bl	80065e0 <HAL_GPIO_WritePin>
				memset(Placeopposite, 0, sizeof(Placeopposite));
 8001586:	2208      	movs	r2, #8
 8001588:	2100      	movs	r1, #0
 800158a:	4867      	ldr	r0, [pc, #412]	; (8001728 <BaseSystem_SetPlaceTray+0x25c>)
 800158c:	f00a fc28 	bl	800bde0 <memset>
				memset(Placeopposite_last, 0, sizeof(Placeopposite_last));
 8001590:	2208      	movs	r2, #8
 8001592:	2100      	movs	r1, #0
 8001594:	4865      	ldr	r0, [pc, #404]	; (800172c <BaseSystem_SetPlaceTray+0x260>)
 8001596:	f00a fc23 	bl	800bde0 <memset>
			}
		break;
 800159a:	e070      	b.n	800167e <BaseSystem_SetPlaceTray+0x1b2>
		case GetSecondPoint:

			GetJoystickXYaxisValue(&Placeopposite[0], &Placeopposite[1]);
 800159c:	4964      	ldr	r1, [pc, #400]	; (8001730 <BaseSystem_SetPlaceTray+0x264>)
 800159e:	4862      	ldr	r0, [pc, #392]	; (8001728 <BaseSystem_SetPlaceTray+0x25c>)
 80015a0:	f001 ff60 	bl	8003464 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 80015a4:	f002 f89a 	bl	80036dc <JoyStickControlCartesian>

			if ((Placeopposite_last[0] != Placeopposite[0]) || (Placeopposite_last[1] != Placeopposite[1]))
 80015a8:	4b60      	ldr	r3, [pc, #384]	; (800172c <BaseSystem_SetPlaceTray+0x260>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b4:	4b5c      	ldr	r3, [pc, #368]	; (8001728 <BaseSystem_SetPlaceTray+0x25c>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	d10d      	bne.n	80015e0 <BaseSystem_SetPlaceTray+0x114>
 80015c4:	4b59      	ldr	r3, [pc, #356]	; (800172c <BaseSystem_SetPlaceTray+0x260>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d0:	4b55      	ldr	r3, [pc, #340]	; (8001728 <BaseSystem_SetPlaceTray+0x25c>)
 80015d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80015d6:	eeb4 7a67 	vcmp.f32	s14, s15
 80015da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015de:	d050      	beq.n	8001682 <BaseSystem_SetPlaceTray+0x1b6>
			{

				SetPlaceTrayState = Prepare;
 80015e0:	4b4a      	ldr	r3, [pc, #296]	; (800170c <BaseSystem_SetPlaceTray+0x240>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
				SetTwoPointsForCalibrate(Placereference, Placereference+1, Placeopposite, Placeopposite+1, 1);
 80015e6:	494f      	ldr	r1, [pc, #316]	; (8001724 <BaseSystem_SetPlaceTray+0x258>)
 80015e8:	4a51      	ldr	r2, [pc, #324]	; (8001730 <BaseSystem_SetPlaceTray+0x264>)
 80015ea:	2301      	movs	r3, #1
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	4613      	mov	r3, r2
 80015f0:	4a4d      	ldr	r2, [pc, #308]	; (8001728 <BaseSystem_SetPlaceTray+0x25c>)
 80015f2:	484a      	ldr	r0, [pc, #296]	; (800171c <BaseSystem_SetPlaceTray+0x250>)
 80015f4:	f001 fd44 	bl	8003080 <SetTwoPointsForCalibrate>
				registerFrame[35].U16 = (int)(Placereference[0]*10);
 80015f8:	4b48      	ldr	r3, [pc, #288]	; (800171c <BaseSystem_SetPlaceTray+0x250>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160a:	ee17 3a90 	vmov	r3, s15
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <BaseSystem_SetPlaceTray+0x244>)
 8001612:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				registerFrame[36].U16 = (int)(Placereference[1]*10);
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <BaseSystem_SetPlaceTray+0x250>)
 8001618:	edd3 7a01 	vldr	s15, [r3, #4]
 800161c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001628:	ee17 3a90 	vmov	r3, s15
 800162c:	b29a      	uxth	r2, r3
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <BaseSystem_SetPlaceTray+0x244>)
 8001630:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				registerFrame[37].U16 = (int)(PlacerotationAngleDegree*100);
 8001634:	4b3f      	ldr	r3, [pc, #252]	; (8001734 <BaseSystem_SetPlaceTray+0x268>)
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001738 <BaseSystem_SetPlaceTray+0x26c>
 800163e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001646:	ee17 3a90 	vmov	r3, s15
 800164a:	b29a      	uxth	r2, r3
 800164c:	4b30      	ldr	r3, [pc, #192]	; (8001710 <BaseSystem_SetPlaceTray+0x244>)
 800164e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				registerFrame[16].U16 = 0b000000;
 8001652:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <BaseSystem_SetPlaceTray+0x244>)
 8001654:	2200      	movs	r2, #0
 8001656:	841a      	strh	r2, [r3, #32]
				SetPlaceTrayFlag = 0;
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <BaseSystem_SetPlaceTray+0x23c>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001664:	482b      	ldr	r0, [pc, #172]	; (8001714 <BaseSystem_SetPlaceTray+0x248>)
 8001666:	f004 ffbb 	bl	80065e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001670:	4828      	ldr	r0, [pc, #160]	; (8001714 <BaseSystem_SetPlaceTray+0x248>)
 8001672:	f004 ffb5 	bl	80065e0 <HAL_GPIO_WritePin>
				eff_write(exitTest_cmd);
 8001676:	4831      	ldr	r0, [pc, #196]	; (800173c <BaseSystem_SetPlaceTray+0x270>)
 8001678:	f000 fcee 	bl	8002058 <eff_write>
			}
		break;
 800167c:	e001      	b.n	8001682 <BaseSystem_SetPlaceTray+0x1b6>
		break;
 800167e:	bf00      	nop
 8001680:	e000      	b.n	8001684 <BaseSystem_SetPlaceTray+0x1b8>
		break;
 8001682:	bf00      	nop
		}
		Placereference_last[0] = Placereference[0];
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <BaseSystem_SetPlaceTray+0x250>)
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800168e:	ee17 2a90 	vmov	r2, s15
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <BaseSystem_SetPlaceTray+0x254>)
 8001694:	601a      	str	r2, [r3, #0]
		Placereference_last[1] = Placereference[1];
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <BaseSystem_SetPlaceTray+0x250>)
 8001698:	edd3 7a01 	vldr	s15, [r3, #4]
 800169c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a0:	ee17 2a90 	vmov	r2, s15
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <BaseSystem_SetPlaceTray+0x254>)
 80016a6:	605a      	str	r2, [r3, #4]
		Placeopposite_last[0] = Placeopposite[0];
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <BaseSystem_SetPlaceTray+0x25c>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b2:	ee17 2a90 	vmov	r2, s15
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <BaseSystem_SetPlaceTray+0x260>)
 80016b8:	601a      	str	r2, [r3, #0]
		Placeopposite_last[1] = Placeopposite[1];
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <BaseSystem_SetPlaceTray+0x25c>)
 80016bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80016c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c4:	ee17 2a90 	vmov	r2, s15
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <BaseSystem_SetPlaceTray+0x260>)
 80016ca:	605a      	str	r2, [r3, #4]

		if (SetHomeYFlag == 1)
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <BaseSystem_SetPlaceTray+0x274>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d116      	bne.n	8001702 <BaseSystem_SetPlaceTray+0x236>
		{
			memset(Placereference, 0, sizeof(Placereference));
 80016d4:	2208      	movs	r2, #8
 80016d6:	2100      	movs	r1, #0
 80016d8:	4810      	ldr	r0, [pc, #64]	; (800171c <BaseSystem_SetPlaceTray+0x250>)
 80016da:	f00a fb81 	bl	800bde0 <memset>
			memset(Placeopposite, 0, sizeof(Placeopposite));
 80016de:	2208      	movs	r2, #8
 80016e0:	2100      	movs	r1, #0
 80016e2:	4811      	ldr	r0, [pc, #68]	; (8001728 <BaseSystem_SetPlaceTray+0x25c>)
 80016e4:	f00a fb7c 	bl	800bde0 <memset>
			memset(Placereference_last, 0, sizeof(Placereference_last));
 80016e8:	2208      	movs	r2, #8
 80016ea:	2100      	movs	r1, #0
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <BaseSystem_SetPlaceTray+0x254>)
 80016ee:	f00a fb77 	bl	800bde0 <memset>
			memset(Placeopposite_last, 0, sizeof(Placeopposite_last));
 80016f2:	2208      	movs	r2, #8
 80016f4:	2100      	movs	r1, #0
 80016f6:	480d      	ldr	r0, [pc, #52]	; (800172c <BaseSystem_SetPlaceTray+0x260>)
 80016f8:	f00a fb72 	bl	800bde0 <memset>
			SetPlaceTrayState = GetFirstPoint;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <BaseSystem_SetPlaceTray+0x240>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20001005 	.word	0x20001005
 800170c:	20000364 	.word	0x20000364
 8001710:	20000f78 	.word	0x20000f78
 8001714:	40020400 	.word	0x40020400
 8001718:	20000268 	.word	0x20000268
 800171c:	20000a3c 	.word	0x20000a3c
 8001720:	20000350 	.word	0x20000350
 8001724:	20000a40 	.word	0x20000a40
 8001728:	20000a44 	.word	0x20000a44
 800172c:	20000358 	.word	0x20000358
 8001730:	20000a48 	.word	0x20000a48
 8001734:	20000a50 	.word	0x20000a50
 8001738:	42c80000 	.word	0x42c80000
 800173c:	2000026c 	.word	0x2000026c
 8001740:	20000259 	.word	0x20000259

08001744 <BaseSystem_RuntrayMode>:

void BaseSystem_RuntrayMode()
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

	static uint8_t i = 0;
	static uint16_t PickDelay = 0;
	static uint16_t PlaceDelay = 0;

	if (RunTrayFlag)
 8001748:	4b94      	ldr	r3, [pc, #592]	; (800199c <BaseSystem_RuntrayMode+0x258>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8117 	beq.w	8001980 <BaseSystem_RuntrayMode+0x23c>
	{
		switch(RunTrayState)
 8001752:	4b93      	ldr	r3, [pc, #588]	; (80019a0 <BaseSystem_RuntrayMode+0x25c>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b04      	cmp	r3, #4
 8001758:	f200 811d 	bhi.w	8001996 <BaseSystem_RuntrayMode+0x252>
 800175c:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <BaseSystem_RuntrayMode+0x20>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	08001779 	.word	0x08001779
 8001768:	080017ad 	.word	0x080017ad
 800176c:	08001847 	.word	0x08001847
 8001770:	08001881 	.word	0x08001881
 8001774:	08001923 	.word	0x08001923
			{
			case HolesCalculate:
				registerFrame[1].U16 = 0b00000;
 8001778:	4b8a      	ldr	r3, [pc, #552]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 800177a:	2200      	movs	r2, #0
 800177c:	805a      	strh	r2, [r3, #2]
				GoalReadyFlag = 0;
 800177e:	4b8a      	ldr	r3, [pc, #552]	; (80019a8 <BaseSystem_RuntrayMode+0x264>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
				HolePositionsCartesian();
 8001784:	f001 fd42 	bl	800320c <HolePositionsCartesian>
				if (GoalReadyFlag)
 8001788:	4b87      	ldr	r3, [pc, #540]	; (80019a8 <BaseSystem_RuntrayMode+0x264>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80f9 	beq.w	8001984 <BaseSystem_RuntrayMode+0x240>
				{
					RunTrayState = GoPick;
 8001792:	4b83      	ldr	r3, [pc, #524]	; (80019a0 <BaseSystem_RuntrayMode+0x25c>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
					eff_write(runMode_cmd);
 8001798:	4884      	ldr	r0, [pc, #528]	; (80019ac <BaseSystem_RuntrayMode+0x268>)
 800179a:	f000 fc5d 	bl	8002058 <eff_write>
					i = 0;
 800179e:	4b84      	ldr	r3, [pc, #528]	; (80019b0 <BaseSystem_RuntrayMode+0x26c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
					runXFlag = 1;
 80017a4:	4b83      	ldr	r3, [pc, #524]	; (80019b4 <BaseSystem_RuntrayMode+0x270>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
				}
			break;
 80017aa:	e0eb      	b.n	8001984 <BaseSystem_RuntrayMode+0x240>
			case GoPick:
				if (runXFlag)
 80017ac:	4b81      	ldr	r3, [pc, #516]	; (80019b4 <BaseSystem_RuntrayMode+0x270>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d033      	beq.n	800181c <BaseSystem_RuntrayMode+0xd8>
				{
					// Run X
					registerFrame[65].U16 = (int)(PickTray9holes[2*i]*10); //position -1400 to 1400
 80017b4:	4b7e      	ldr	r3, [pc, #504]	; (80019b0 <BaseSystem_RuntrayMode+0x26c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4a7f      	ldr	r2, [pc, #508]	; (80019b8 <BaseSystem_RuntrayMode+0x274>)
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d0:	ee17 3a90 	vmov	r3, s15
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 80017d8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
					registerFrame[66].U16 = 3000; //velocity max 3000
 80017dc:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 80017de:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80017e2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
					registerFrame[67].U16 = 1; //acceleration 1 2 3
 80017e6:	4b6f      	ldr	r3, [pc, #444]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					registerFrame[64].U16 = 2; //Run
 80017ee:	4b6d      	ldr	r3, [pc, #436]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 80017f0:	2202      	movs	r2, #2
 80017f2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

					// Run Y
					registerFrame[16].U16 = 0b001000;	// Y-Axis Moving status -> GoPick
 80017f6:	4b6b      	ldr	r3, [pc, #428]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 80017f8:	2208      	movs	r2, #8
 80017fa:	841a      	strh	r2, [r3, #32]
					Pf = PickTray9holes[2*i + 1];
 80017fc:	4b6c      	ldr	r3, [pc, #432]	; (80019b0 <BaseSystem_RuntrayMode+0x26c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	3301      	adds	r3, #1
 8001804:	4a6c      	ldr	r2, [pc, #432]	; (80019b8 <BaseSystem_RuntrayMode+0x274>)
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a6b      	ldr	r2, [pc, #428]	; (80019bc <BaseSystem_RuntrayMode+0x278>)
 800180e:	6013      	str	r3, [r2, #0]
					ControllerFlag = 1;
 8001810:	4b6b      	ldr	r3, [pc, #428]	; (80019c0 <BaseSystem_RuntrayMode+0x27c>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]

					runXFlag = 0;
 8001816:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <BaseSystem_RuntrayMode+0x270>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
				}

				if((ControllerFlag == 0) && (registerFrame[64].U16 == 0))
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <BaseSystem_RuntrayMode+0x27c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	f040 80b1 	bne.w	8001988 <BaseSystem_RuntrayMode+0x244>
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 8001828:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800182c:	2b00      	cmp	r3, #0
 800182e:	f040 80ab 	bne.w	8001988 <BaseSystem_RuntrayMode+0x244>
				{
					RunTrayState = Pick;
 8001832:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <BaseSystem_RuntrayMode+0x25c>)
 8001834:	2202      	movs	r2, #2
 8001836:	701a      	strb	r2, [r3, #0]
					PickDelay = 0;
 8001838:	4b62      	ldr	r3, [pc, #392]	; (80019c4 <BaseSystem_RuntrayMode+0x280>)
 800183a:	2200      	movs	r2, #0
 800183c:	801a      	strh	r2, [r3, #0]
					PFlag = 1;
 800183e:	4b62      	ldr	r3, [pc, #392]	; (80019c8 <BaseSystem_RuntrayMode+0x284>)
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]
				}
			break;
 8001844:	e0a0      	b.n	8001988 <BaseSystem_RuntrayMode+0x244>
			case Pick:
				if (PFlag)
 8001846:	4b60      	ldr	r3, [pc, #384]	; (80019c8 <BaseSystem_RuntrayMode+0x284>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <BaseSystem_RuntrayMode+0x116>
				{
					eff_write(pickup_cmd);
 800184e:	485f      	ldr	r0, [pc, #380]	; (80019cc <BaseSystem_RuntrayMode+0x288>)
 8001850:	f000 fc02 	bl	8002058 <eff_write>
					PFlag = 0;
 8001854:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <BaseSystem_RuntrayMode+0x284>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
				}
				PickDelay++;
 800185a:	4b5a      	ldr	r3, [pc, #360]	; (80019c4 <BaseSystem_RuntrayMode+0x280>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b58      	ldr	r3, [pc, #352]	; (80019c4 <BaseSystem_RuntrayMode+0x280>)
 8001864:	801a      	strh	r2, [r3, #0]

				if (PickDelay >= 1000)
 8001866:	4b57      	ldr	r3, [pc, #348]	; (80019c4 <BaseSystem_RuntrayMode+0x280>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800186e:	f0c0 808d 	bcc.w	800198c <BaseSystem_RuntrayMode+0x248>
				{
					RunTrayState = GoPlace;
 8001872:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <BaseSystem_RuntrayMode+0x25c>)
 8001874:	2203      	movs	r2, #3
 8001876:	701a      	strb	r2, [r3, #0]
					runXFlag = 1;
 8001878:	4b4e      	ldr	r3, [pc, #312]	; (80019b4 <BaseSystem_RuntrayMode+0x270>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
				}
			break;
 800187e:	e085      	b.n	800198c <BaseSystem_RuntrayMode+0x248>
			case GoPlace:
				if (runXFlag)
 8001880:	4b4c      	ldr	r3, [pc, #304]	; (80019b4 <BaseSystem_RuntrayMode+0x270>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d033      	beq.n	80018f0 <BaseSystem_RuntrayMode+0x1ac>
				{
					// Run X
					registerFrame[65].U16 = (int)(PlaceTray9holes[2*i]*10); //position -1400 to 1400
 8001888:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <BaseSystem_RuntrayMode+0x26c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4a50      	ldr	r2, [pc, #320]	; (80019d0 <BaseSystem_RuntrayMode+0x28c>)
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800189c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a4:	ee17 3a90 	vmov	r3, s15
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 80018ac:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
					registerFrame[66].U16 = 3000; //velocity max 3000
 80018b0:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 80018b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80018b6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
					registerFrame[67].U16 = 1; //acceleration 1 2 3
 80018ba:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 80018bc:	2201      	movs	r2, #1
 80018be:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					registerFrame[64].U16 = 2; //Run
 80018c2:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 80018c4:	2202      	movs	r2, #2
 80018c6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

					// Run Y
					registerFrame[16].U16 = 0b010000;	// Y-Axis Moving status -> GoPlace
 80018ca:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 80018cc:	2210      	movs	r2, #16
 80018ce:	841a      	strh	r2, [r3, #32]
					Pf = PlaceTray9holes[2*i + 1];
 80018d0:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <BaseSystem_RuntrayMode+0x26c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	3301      	adds	r3, #1
 80018d8:	4a3d      	ldr	r2, [pc, #244]	; (80019d0 <BaseSystem_RuntrayMode+0x28c>)
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a36      	ldr	r2, [pc, #216]	; (80019bc <BaseSystem_RuntrayMode+0x278>)
 80018e2:	6013      	str	r3, [r2, #0]
					ControllerFlag = 1;
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <BaseSystem_RuntrayMode+0x27c>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]

					runXFlag = 0;
 80018ea:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <BaseSystem_RuntrayMode+0x270>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
				}

				if((ControllerFlag == 0) && (registerFrame[64].U16 == 0))
 80018f0:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <BaseSystem_RuntrayMode+0x27c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d14b      	bne.n	8001990 <BaseSystem_RuntrayMode+0x24c>
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 80018fa:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d146      	bne.n	8001990 <BaseSystem_RuntrayMode+0x24c>
				{
					RunTrayState = Place;
 8001902:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <BaseSystem_RuntrayMode+0x25c>)
 8001904:	2204      	movs	r2, #4
 8001906:	701a      	strb	r2, [r3, #0]
					PlaceDelay = 0;
 8001908:	4b32      	ldr	r3, [pc, #200]	; (80019d4 <BaseSystem_RuntrayMode+0x290>)
 800190a:	2200      	movs	r2, #0
 800190c:	801a      	strh	r2, [r3, #0]
					PFlag = 1;
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <BaseSystem_RuntrayMode+0x284>)
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
					i++;
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <BaseSystem_RuntrayMode+0x26c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <BaseSystem_RuntrayMode+0x26c>)
 800191e:	701a      	strb	r2, [r3, #0]
				}
			break;
 8001920:	e036      	b.n	8001990 <BaseSystem_RuntrayMode+0x24c>
			case Place:
				if (PFlag)
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <BaseSystem_RuntrayMode+0x284>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <BaseSystem_RuntrayMode+0x1f2>
				{
					eff_write(place_cmd);
 800192a:	482b      	ldr	r0, [pc, #172]	; (80019d8 <BaseSystem_RuntrayMode+0x294>)
 800192c:	f000 fb94 	bl	8002058 <eff_write>
					PFlag = 0;
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <BaseSystem_RuntrayMode+0x284>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
				}
				PlaceDelay++;
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <BaseSystem_RuntrayMode+0x290>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <BaseSystem_RuntrayMode+0x290>)
 8001940:	801a      	strh	r2, [r3, #0]

				if (PlaceDelay >= 1000)
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <BaseSystem_RuntrayMode+0x290>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800194a:	d323      	bcc.n	8001994 <BaseSystem_RuntrayMode+0x250>
				{
					RunTrayState = GoPick;
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <BaseSystem_RuntrayMode+0x25c>)
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
					runXFlag = 1;
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <BaseSystem_RuntrayMode+0x270>)
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
					if(i >= 9)
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <BaseSystem_RuntrayMode+0x26c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b08      	cmp	r3, #8
 800195e:	d919      	bls.n	8001994 <BaseSystem_RuntrayMode+0x250>
					{
						RunTrayState = HolesCalculate;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <BaseSystem_RuntrayMode+0x25c>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
						eff_write(exitRun_cmd);
 8001966:	481d      	ldr	r0, [pc, #116]	; (80019dc <BaseSystem_RuntrayMode+0x298>)
 8001968:	f000 fb76 	bl	8002058 <eff_write>
						registerFrame[16].U16 = 0;
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <BaseSystem_RuntrayMode+0x260>)
 800196e:	2200      	movs	r2, #0
 8001970:	841a      	strh	r2, [r3, #32]
						RunTrayFlag = 0;
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <BaseSystem_RuntrayMode+0x258>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
						SetHomeFlag = 1;
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <BaseSystem_RuntrayMode+0x29c>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
					}
				}
			break;
 800197e:	e009      	b.n	8001994 <BaseSystem_RuntrayMode+0x250>
			}
	}
 8001980:	bf00      	nop
 8001982:	e008      	b.n	8001996 <BaseSystem_RuntrayMode+0x252>
			break;
 8001984:	bf00      	nop
 8001986:	e006      	b.n	8001996 <BaseSystem_RuntrayMode+0x252>
			break;
 8001988:	bf00      	nop
 800198a:	e004      	b.n	8001996 <BaseSystem_RuntrayMode+0x252>
			break;
 800198c:	bf00      	nop
 800198e:	e002      	b.n	8001996 <BaseSystem_RuntrayMode+0x252>
			break;
 8001990:	bf00      	nop
 8001992:	e000      	b.n	8001996 <BaseSystem_RuntrayMode+0x252>
			break;
 8001994:	bf00      	nop
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20001007 	.word	0x20001007
 80019a0:	20000365 	.word	0x20000365
 80019a4:	20000f78 	.word	0x20000f78
 80019a8:	20000a9c 	.word	0x20000a9c
 80019ac:	20000270 	.word	0x20000270
 80019b0:	20000366 	.word	0x20000366
 80019b4:	2000033c 	.word	0x2000033c
 80019b8:	200009f4 	.word	0x200009f4
 80019bc:	200008d8 	.word	0x200008d8
 80019c0:	20000910 	.word	0x20000910
 80019c4:	20000368 	.word	0x20000368
 80019c8:	20000360 	.word	0x20000360
 80019cc:	20000278 	.word	0x20000278
 80019d0:	20000a54 	.word	0x20000a54
 80019d4:	2000036a 	.word	0x2000036a
 80019d8:	2000027c 	.word	0x2000027c
 80019dc:	20000274 	.word	0x20000274
 80019e0:	20001006 	.word	0x20001006

080019e4 <BaseSystem_EffAllOff>:

void BaseSystem_EffAllOff(){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	if(EffAllOff_Flag == 1){
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <BaseSystem_EffAllOff+0x1c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <BaseSystem_EffAllOff+0x18>
		eff_write2(AllOff_cmd);
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <BaseSystem_EffAllOff+0x20>)
 80019f2:	f000 fb41 	bl	8002078 <eff_write2>
		EffAllOff_Flag = 0;
 80019f6:	4b02      	ldr	r3, [pc, #8]	; (8001a00 <BaseSystem_EffAllOff+0x1c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
	}
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2000092a 	.word	0x2000092a
 8001a04:	20000280 	.word	0x20000280

08001a08 <BaseSystem_EffLaserOn>:
void BaseSystem_EffLaserOn(){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	if(EffLaserOn_Flag == 1){
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <BaseSystem_EffLaserOn+0x1c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <BaseSystem_EffLaserOn+0x18>
		eff_write(testMode_cmd);
 8001a14:	4804      	ldr	r0, [pc, #16]	; (8001a28 <BaseSystem_EffLaserOn+0x20>)
 8001a16:	f000 fb1f 	bl	8002058 <eff_write>
		EffLaserOn_Flag = 0;
 8001a1a:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <BaseSystem_EffLaserOn+0x1c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
	}
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000092b 	.word	0x2000092b
 8001a28:	20000268 	.word	0x20000268

08001a2c <BaseSystem_EffGripperOn>:
void BaseSystem_EffGripperOn(){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	if(EffGripperOn_Flag == 1){
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <BaseSystem_EffGripperOn+0x1c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <BaseSystem_EffGripperOn+0x18>
		eff_write(runMode_cmd);
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <BaseSystem_EffGripperOn+0x20>)
 8001a3a:	f000 fb0d 	bl	8002058 <eff_write>
		EffGripperOn_Flag = 0;
 8001a3e:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <BaseSystem_EffGripperOn+0x1c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
	}
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000092c 	.word	0x2000092c
 8001a4c:	20000270 	.word	0x20000270

08001a50 <BaseSystem_EffGripperPick>:
void BaseSystem_EffGripperPick(){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	if(EffGripperPick_Flag == 1){
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <BaseSystem_EffGripperPick+0x24>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d108      	bne.n	8001a6e <BaseSystem_EffGripperPick+0x1e>
		eff_write(pickup_cmd);
 8001a5c:	4806      	ldr	r0, [pc, #24]	; (8001a78 <BaseSystem_EffGripperPick+0x28>)
 8001a5e:	f000 fafb 	bl	8002058 <eff_write>
		EffGripperPick_Flag = 0;
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <BaseSystem_EffGripperPick+0x24>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
		registerFrame[2].U16 = 0b0010;
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <BaseSystem_EffGripperPick+0x2c>)
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	809a      	strh	r2, [r3, #4]
	}
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000092d 	.word	0x2000092d
 8001a78:	20000278 	.word	0x20000278
 8001a7c:	20000f78 	.word	0x20000f78

08001a80 <BaseSystem_EffGripperPlace>:
void BaseSystem_EffGripperPlace(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	if(EffGripperPlace_Flag == 1){
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <BaseSystem_EffGripperPlace+0x24>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d108      	bne.n	8001a9e <BaseSystem_EffGripperPlace+0x1e>
		eff_write(place_cmd);
 8001a8c:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <BaseSystem_EffGripperPlace+0x28>)
 8001a8e:	f000 fae3 	bl	8002058 <eff_write>
		EffGripperPlace_Flag = 0;
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <BaseSystem_EffGripperPlace+0x24>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
		registerFrame[2].U16 = 0b0010;
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <BaseSystem_EffGripperPlace+0x2c>)
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	809a      	strh	r2, [r3, #4]
	}
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000092e 	.word	0x2000092e
 8001aa8:	2000027c 	.word	0x2000027c
 8001aac:	20000f78 	.word	0x20000f78

08001ab0 <PositionControlVelocityForm>:
float first_error = 0;
float second_error = 0;
float third_error = 0;

void PositionControlVelocityForm(PID* controller)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	first_error = q_des - QEIData.position;
 8001ab8:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <PositionControlVelocityForm+0xac>)
 8001aba:	ed93 7a00 	vldr	s14, [r3]
 8001abe:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <PositionControlVelocityForm+0xb0>)
 8001ac0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac8:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <PositionControlVelocityForm+0xb4>)
 8001aca:	edc3 7a00 	vstr	s15, [r3]

	float kp_position = controller->Kp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	617b      	str	r3, [r7, #20]
	float ki_position = controller->Ki;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	613b      	str	r3, [r7, #16]
	float kd_position = controller->Kd;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	60fb      	str	r3, [r7, #12]

	PulseWidthModulation += ((kp_position + ki_position + kd_position) * first_error) - ((kp_position + (2 * kd_position)) * second_error) + (kd_position * third_error);
 8001ae0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ae4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <PositionControlVelocityForm+0xb4>)
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b02:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b06:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <PositionControlVelocityForm+0xb8>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <PositionControlVelocityForm+0xbc>)
 8001b1e:	edd3 6a00 	vldr	s13, [r3]
 8001b22:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <PositionControlVelocityForm+0xc0>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <PositionControlVelocityForm+0xc0>)
 8001b3a:	edc3 7a00 	vstr	s15, [r3]

	third_error = second_error;
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <PositionControlVelocityForm+0xb8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <PositionControlVelocityForm+0xbc>)
 8001b44:	6013      	str	r3, [r2, #0]
	second_error = first_error;
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <PositionControlVelocityForm+0xb4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <PositionControlVelocityForm+0xb8>)
 8001b4c:	6013      	str	r3, [r2, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	200008c0 	.word	0x200008c0
 8001b60:	200008f0 	.word	0x200008f0
 8001b64:	2000036c 	.word	0x2000036c
 8001b68:	20000370 	.word	0x20000370
 8001b6c:	20000374 	.word	0x20000374
 8001b70:	2000090c 	.word	0x2000090c

08001b74 <eff_st>:

extern u16u8_t registerFrame[70];
extern uint8_t effstatus;
extern uint16_t effst_mb;

void eff_st(){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	//gripper on	0100	0010
	//pick			0101	0110
	//picked		0111	N/A
	//place			0110	1010

	eff_read();
 8001b78:	f000 fa8e 	bl	8002098 <eff_read>
	effstatus = effstatus & 0b00001111;
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <eff_st+0x70>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <eff_st+0x70>)
 8001b88:	701a      	strb	r2, [r3, #0]
	if     (effstatus == 0b0000)	{effst_mb = 0b0000;}
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <eff_st+0x70>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <eff_st+0x26>
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <eff_st+0x74>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	801a      	strh	r2, [r3, #0]
 8001b98:	e01e      	b.n	8001bd8 <eff_st+0x64>
	else if(effstatus == 0b1000)	{effst_mb = 0b0001;}
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <eff_st+0x70>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d103      	bne.n	8001baa <eff_st+0x36>
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <eff_st+0x74>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	801a      	strh	r2, [r3, #0]
 8001ba8:	e016      	b.n	8001bd8 <eff_st+0x64>
	else if(effstatus == 0b0100)	{effst_mb = 0b0010;}
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <eff_st+0x70>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d103      	bne.n	8001bba <eff_st+0x46>
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <eff_st+0x74>)
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	801a      	strh	r2, [r3, #0]
 8001bb8:	e00e      	b.n	8001bd8 <eff_st+0x64>
	else if(effstatus == 0b0101)	{effst_mb = 0b0110;}
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <eff_st+0x70>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d103      	bne.n	8001bca <eff_st+0x56>
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <eff_st+0x74>)
 8001bc4:	2206      	movs	r2, #6
 8001bc6:	801a      	strh	r2, [r3, #0]
 8001bc8:	e006      	b.n	8001bd8 <eff_st+0x64>
	//else if(effstatus == 0b0111)	{effst_mb = }
	else if(effstatus == 0b0110)	{effst_mb = 0b1010;}
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <eff_st+0x70>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d102      	bne.n	8001bd8 <eff_st+0x64>
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <eff_st+0x74>)
 8001bd4:	220a      	movs	r2, #10
 8001bd6:	801a      	strh	r2, [r3, #0]

	registerFrame[2].U16 = effst_mb;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <eff_st+0x74>)
 8001bda:	881a      	ldrh	r2, [r3, #0]
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <eff_st+0x78>)
 8001bde:	809a      	strh	r2, [r3, #4]
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000924 	.word	0x20000924
 8001be8:	20000934 	.word	0x20000934
 8001bec:	20000f78 	.word	0x20000f78

08001bf0 <micros>:

uint16_t res = 8192;      	  // Resolution [pulse/revolution]
float pulley_dia = 30.558;	  // mm

uint64_t micros(TIM_HandleTypeDef* Timer_tim)
{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(Timer_tim)*0.01 + _micros;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc2c 	bl	800045c <__aeabi_ui2d>
 8001c04:	a313      	add	r3, pc, #76	; (adr r3, 8001c54 <micros+0x64>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	f7fe fca1 	bl	8000550 <__aeabi_dmul>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4614      	mov	r4, r2
 8001c14:	461d      	mov	r5, r3
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <micros+0x60>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe fc60 	bl	80004e4 <__aeabi_ul2d>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe fada 	bl	80001e4 <__adddf3>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7ff f8b0 	bl	8000d9c <__aeabi_d2ulz>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
}
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	f3af 8000 	nop.w
 8001c50:	200008e8 	.word	0x200008e8
 8001c54:	47ae147b 	.word	0x47ae147b
 8001c58:	3f847ae1 	.word	0x3f847ae1
 8001c5c:	00000000 	.word	0x00000000

08001c60 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* Timer_tim)
{
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
	QEIData.timestamp[0] = micros(Timer_tim);
 8001c6a:	6838      	ldr	r0, [r7, #0]
 8001c6c:	f7ff ffc0 	bl	8001bf0 <micros>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4b7a      	ldr	r3, [pc, #488]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c76:	609a      	str	r2, [r3, #8]
	uint32_t lastposition = __HAL_TIM_GET_COUNTER(Encoder_tim);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	613b      	str	r3, [r7, #16]
	QEIData.pos[0] = lastposition;
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c86:	801a      	strh	r2, [r3, #0]
	QEIData.pos[0] = -QEIData.pos[0];
 8001c88:	4b75      	ldr	r3, [pc, #468]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	425b      	negs	r3, r3
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b72      	ldr	r3, [pc, #456]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c98:	801a      	strh	r2, [r3, #0]
//	{
//		QEIData.pos[0] = lastposition - QEI_PERIOD - 1;
//	}

	// position calculation
	QEIData.position = QEIData.pos[0] * PI *  pulley_dia/res;
 8001c9a:	4b71      	ldr	r3, [pc, #452]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca8:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001e64 <QEIEncoderPositionVelocity_Update+0x204>
 8001cac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cb0:	4b6d      	ldr	r3, [pc, #436]	; (8001e68 <QEIEncoderPositionVelocity_Update+0x208>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cba:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <QEIEncoderPositionVelocity_Update+0x20c>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cca:	4b65      	ldr	r3, [pc, #404]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001ccc:	edc3 7a04 	vstr	s15, [r3, #16]

	int32_t diffPosition = QEIData.pos[0] - QEIData.pos[1];
 8001cd0:	4b63      	ldr	r3, [pc, #396]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b61      	ldr	r3, [pc, #388]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001cda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	617b      	str	r3, [r7, #20]
	float diffTime = QEIData.timestamp[0] - QEIData.timestamp[1];
 8001ce2:	4b5f      	ldr	r3, [pc, #380]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf4:	edc7 7a03 	vstr	s15, [r7, #12]

	// unwrap
	if (diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cfe:	dd03      	ble.n	8001d08 <QEIEncoderPositionVelocity_Update+0xa8>
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001d06:	617b      	str	r3, [r7, #20]
	if (diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001d0e:	da03      	bge.n	8001d18 <QEIEncoderPositionVelocity_Update+0xb8>
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d16:	617b      	str	r3, [r7, #20]

	// velocity calculation
	QEIData.velocity = (diffPosition * 1000000.0 * PI * pulley_dia)/(res * diffTime);
 8001d18:	6978      	ldr	r0, [r7, #20]
 8001d1a:	f7fe fbaf 	bl	800047c <__aeabi_i2d>
 8001d1e:	a34c      	add	r3, pc, #304	; (adr r3, 8001e50 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fc14 	bl	8000550 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	a349      	add	r3, pc, #292	; (adr r3, 8001e58 <QEIEncoderPositionVelocity_Update+0x1f8>)
 8001d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d36:	f7fe fc0b 	bl	8000550 <__aeabi_dmul>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4614      	mov	r4, r2
 8001d40:	461d      	mov	r5, r3
 8001d42:	4b49      	ldr	r3, [pc, #292]	; (8001e68 <QEIEncoderPositionVelocity_Update+0x208>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fbaa 	bl	80004a0 <__aeabi_f2d>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4620      	mov	r0, r4
 8001d52:	4629      	mov	r1, r5
 8001d54:	f7fe fbfc 	bl	8000550 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	461d      	mov	r5, r3
 8001d60:	4b42      	ldr	r3, [pc, #264]	; (8001e6c <QEIEncoderPositionVelocity_Update+0x20c>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d74:	ee17 0a90 	vmov	r0, s15
 8001d78:	f7fe fb92 	bl	80004a0 <__aeabi_f2d>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	f7fe fd0e 	bl	80007a4 <__aeabi_ddiv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7fe fe8e 	bl	8000ab0 <__aeabi_d2f>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001d98:	6153      	str	r3, [r2, #20]
	QEIData.vel[0] = QEIData.velocity;
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001d9c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001da4:	ee17 3a90 	vmov	r3, s15
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dac:	809a      	strh	r2, [r3, #4]
	QEIData.accelaration = (QEIData.vel[0] - QEIData.vel[1])/diffTime;
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001db0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001db8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dc6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dd0:	edc3 7a06 	vstr	s15, [r3, #24]

	QEIData.pos[1] = QEIData.pos[0];
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001ddc:	805a      	strh	r2, [r3, #2]
	QEIData.vel[1] = QEIData.vel[0];
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001de0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001de6:	80da      	strh	r2, [r3, #6]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dee:	60d3      	str	r3, [r2, #12]

	registerFrame[17].U16 = (int)(QEIData.position*10);
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001df2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001df6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e02:	ee17 3a90 	vmov	r3, s15
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <QEIEncoderPositionVelocity_Update+0x210>)
 8001e0a:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = (int)(QEIData.velocity*10);
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001e0e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e1e:	ee17 3a90 	vmov	r3, s15
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <QEIEncoderPositionVelocity_Update+0x210>)
 8001e26:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = (int)(QEIData.accelaration*10);
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x200>)
 8001e2a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e2e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e3a:	ee17 3a90 	vmov	r3, s15
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <QEIEncoderPositionVelocity_Update+0x210>)
 8001e42:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8001e44:	bf00      	nop
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4c:	f3af 8000 	nop.w
 8001e50:	00000000 	.word	0x00000000
 8001e54:	412e8480 	.word	0x412e8480
 8001e58:	60000000 	.word	0x60000000
 8001e5c:	400921fb 	.word	0x400921fb
 8001e60:	200008f0 	.word	0x200008f0
 8001e64:	40490fdb 	.word	0x40490fdb
 8001e68:	20000004 	.word	0x20000004
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000f78 	.word	0x20000f78

08001e74 <HAL_GPIO_EXTI_Callback>:
		}
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0){
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e84:	d139      	bne.n	8001efa <HAL_GPIO_EXTI_Callback+0x86>
 8001e86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e8a:	484a      	ldr	r0, [pc, #296]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0x140>)
 8001e8c:	f004 fb90 	bl	80065b0 <HAL_GPIO_ReadPin>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d131      	bne.n	8001efa <HAL_GPIO_EXTI_Callback+0x86>
		emer_pushed = 0;
 8001e96:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0x144>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea2:	4844      	ldr	r0, [pc, #272]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0x140>)
 8001ea4:	f004 fb9c 	bl	80065e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eae:	4841      	ldr	r0, [pc, #260]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0x140>)
 8001eb0:	f004 fb96 	bl	80065e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eba:	483e      	ldr	r0, [pc, #248]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0x140>)
 8001ebc:	f004 fb90 	bl	80065e0 <HAL_GPIO_WritePin>
		effreg_temp = registerFrame[2].U16;
 8001ec0:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <HAL_GPIO_EXTI_Callback+0x148>)
 8001ec2:	889b      	ldrh	r3, [r3, #4]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001ec8:	701a      	strb	r2, [r3, #0]
		effstatus_temp = effstatus[0];
 8001eca:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x150>)
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x154>)
 8001ed0:	701a      	strb	r2, [r3, #0]
		eff_write(emerMode_cmd);
 8001ed2:	483e      	ldr	r0, [pc, #248]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x158>)
 8001ed4:	f000 f8c0 	bl	8002058 <eff_write>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001ed8:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2200      	movs	r2, #0
 8001ede:	635a      	str	r2, [r3, #52]	; 0x34
		ControllerFlagMem = ControllerFlag;
 8001ee0:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x160>)
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_GPIO_EXTI_Callback+0x164>)
 8001ee6:	701a      	strb	r2, [r3, #0]
		ControllerFlag = 0;
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x160>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
		state = Idle;
 8001eee:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <HAL_GPIO_EXTI_Callback+0x168>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
		emerpass = 1;
 8001ef4:	4b3a      	ldr	r3, [pc, #232]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f00:	d153      	bne.n	8001faa <HAL_GPIO_EXTI_Callback+0x136>
 8001f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f06:	482b      	ldr	r0, [pc, #172]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0x140>)
 8001f08:	f004 fb52 	bl	80065b0 <HAL_GPIO_ReadPin>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d14b      	bne.n	8001faa <HAL_GPIO_EXTI_Callback+0x136>
		//eff_write(exitEmer_cmd);
		registerFrame[2].U16 = effreg_temp;
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <HAL_GPIO_EXTI_Callback+0x148>)
 8001f1a:	809a      	strh	r2, [r3, #4]
		effstatus[0] = effstatus_temp;
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x154>)
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x150>)
 8001f22:	701a      	strb	r2, [r3, #0]

		EffRegState = registerFrame[2].U16;
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_GPIO_EXTI_Callback+0x148>)
 8001f26:	889a      	ldrh	r2, [r3, #4]
 8001f28:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001f2a:	801a      	strh	r2, [r3, #0]

		switch(EffRegState){
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	2b0a      	cmp	r3, #10
 8001f32:	d833      	bhi.n	8001f9c <HAL_GPIO_EXTI_Callback+0x128>
 8001f34:	a201      	add	r2, pc, #4	; (adr r2, 8001f3c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3a:	bf00      	nop
 8001f3c:	08001f69 	.word	0x08001f69
 8001f40:	08001f71 	.word	0x08001f71
 8001f44:	08001f79 	.word	0x08001f79
 8001f48:	08001f9d 	.word	0x08001f9d
 8001f4c:	08001f9d 	.word	0x08001f9d
 8001f50:	08001f9d 	.word	0x08001f9d
 8001f54:	08001f81 	.word	0x08001f81
 8001f58:	08001f9d 	.word	0x08001f9d
 8001f5c:	08001f9d 	.word	0x08001f9d
 8001f60:	08001f9d 	.word	0x08001f9d
 8001f64:	08001f8f 	.word	0x08001f8f
		case 0b0000:	//everything off
			eff_write(exitEmer_cmd);
 8001f68:	481f      	ldr	r0, [pc, #124]	; (8001fe8 <HAL_GPIO_EXTI_Callback+0x174>)
 8001f6a:	f000 f875 	bl	8002058 <eff_write>
			break;
 8001f6e:	e015      	b.n	8001f9c <HAL_GPIO_EXTI_Callback+0x128>
		case 0b0001:	//laser on
			eff_write2(exitEmerAndtestMode_cmd);
 8001f70:	481e      	ldr	r0, [pc, #120]	; (8001fec <HAL_GPIO_EXTI_Callback+0x178>)
 8001f72:	f000 f881 	bl	8002078 <eff_write2>
			break;
 8001f76:	e011      	b.n	8001f9c <HAL_GPIO_EXTI_Callback+0x128>
		case 0b0010:	//gripper on
			eff_write2(exitEmerAndrunMode_cmd);
 8001f78:	481d      	ldr	r0, [pc, #116]	; (8001ff0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001f7a:	f000 f87d 	bl	8002078 <eff_write2>
			break;
 8001f7e:	e00d      	b.n	8001f9c <HAL_GPIO_EXTI_Callback+0x128>
		case 0b0110:	//gripper picking
			registerFrame[2].U16 = 0b0010;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_GPIO_EXTI_Callback+0x148>)
 8001f82:	2202      	movs	r2, #2
 8001f84:	809a      	strh	r2, [r3, #4]
			eff_write2(exitEmerAndpickup_cmd);
 8001f86:	481b      	ldr	r0, [pc, #108]	; (8001ff4 <HAL_GPIO_EXTI_Callback+0x180>)
 8001f88:	f000 f876 	bl	8002078 <eff_write2>
			break;
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_EXTI_Callback+0x128>
		case 0b1010:	//gripper placing
			registerFrame[2].U16 = 0b0010;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_GPIO_EXTI_Callback+0x148>)
 8001f90:	2202      	movs	r2, #2
 8001f92:	809a      	strh	r2, [r3, #4]
			eff_write2(exitEmerAndplace_cmd);
 8001f94:	4818      	ldr	r0, [pc, #96]	; (8001ff8 <HAL_GPIO_EXTI_Callback+0x184>)
 8001f96:	f000 f86f 	bl	8002078 <eff_write2>
			break;
 8001f9a:	bf00      	nop
//		BaseSystem_EffLaserOn();
//		BaseSystem_EffGripperOn();
//		BaseSystem_EffGripperPick();
//		BaseSystem_EffGripperPlace();

		ControllerFlag = ControllerFlagMem;
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_GPIO_EXTI_Callback+0x164>)
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x160>)
 8001fa2:	701a      	strb	r2, [r3, #0]
		emer_pushed = 1;
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0x144>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
	}
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	200002a9 	.word	0x200002a9
 8001fbc:	20000f78 	.word	0x20000f78
 8001fc0:	20000926 	.word	0x20000926
 8001fc4:	20000924 	.word	0x20000924
 8001fc8:	20000925 	.word	0x20000925
 8001fcc:	20000260 	.word	0x20000260
 8001fd0:	20000508 	.word	0x20000508
 8001fd4:	20000910 	.word	0x20000910
 8001fd8:	20000378 	.word	0x20000378
 8001fdc:	20000921 	.word	0x20000921
 8001fe0:	20000920 	.word	0x20000920
 8001fe4:	20000928 	.word	0x20000928
 8001fe8:	20000264 	.word	0x20000264
 8001fec:	20000288 	.word	0x20000288
 8001ff0:	20000290 	.word	0x20000290
 8001ff4:	20000298 	.word	0x20000298
 8001ff8:	200002a0 	.word	0x200002a0

08001ffc <check_pe>:

void check_pe()
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	if(emer_pushed == 1)
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <check_pe+0x44>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d118      	bne.n	800203a <check_pe+0x3e>
	{
		pe1_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8002008:	2102      	movs	r1, #2
 800200a:	480e      	ldr	r0, [pc, #56]	; (8002044 <check_pe+0x48>)
 800200c:	f004 fad0 	bl	80065b0 <HAL_GPIO_ReadPin>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <check_pe+0x4c>)
 8002016:	701a      	strb	r2, [r3, #0]
		pe2_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8002018:	2104      	movs	r1, #4
 800201a:	480a      	ldr	r0, [pc, #40]	; (8002044 <check_pe+0x48>)
 800201c:	f004 fac8 	bl	80065b0 <HAL_GPIO_ReadPin>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <check_pe+0x50>)
 8002026:	701a      	strb	r2, [r3, #0]
		pe3_st = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8002028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800202c:	4808      	ldr	r0, [pc, #32]	; (8002050 <check_pe+0x54>)
 800202e:	f004 fabf 	bl	80065b0 <HAL_GPIO_ReadPin>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <check_pe+0x58>)
 8002038:	701a      	strb	r2, [r3, #0]
	}
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200002a9 	.word	0x200002a9
 8002044:	40020400 	.word	0x40020400
 8002048:	20000936 	.word	0x20000936
 800204c:	20000937 	.word	0x20000937
 8002050:	40020000 	.word	0x40020000
 8002054:	20000938 	.word	0x20000938

08002058 <eff_write>:
		}

	}
}

void eff_write(uint8_t* cmd2){
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x15 << 1, cmd2, 4);
 8002060:	2304      	movs	r3, #4
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	212a      	movs	r1, #42	; 0x2a
 8002066:	4803      	ldr	r0, [pc, #12]	; (8002074 <eff_write+0x1c>)
 8002068:	f004 fc30 	bl	80068cc <HAL_I2C_Master_Transmit_IT>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000454 	.word	0x20000454

08002078 <eff_write2>:

void eff_write2(uint8_t* cmd3){
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x15 << 1, cmd3, 8);
 8002080:	2308      	movs	r3, #8
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	212a      	movs	r1, #42	; 0x2a
 8002086:	4803      	ldr	r0, [pc, #12]	; (8002094 <eff_write2+0x1c>)
 8002088:	f004 fc20 	bl	80068cc <HAL_I2C_Master_Transmit_IT>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000454 	.word	0x20000454

08002098 <eff_read>:

void eff_read(){
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, effstatus, 1);
 800209c:	2301      	movs	r3, #1
 800209e:	4a03      	ldr	r2, [pc, #12]	; (80020ac <eff_read+0x14>)
 80020a0:	212a      	movs	r1, #42	; 0x2a
 80020a2:	4803      	ldr	r0, [pc, #12]	; (80020b0 <eff_read+0x18>)
 80020a4:	f004 fcb8 	bl	8006a18 <HAL_I2C_Master_Receive_IT>
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000924 	.word	0x20000924
 80020b0:	20000454 	.word	0x20000454

080020b4 <MotorDrive>:
float Pcenter = 0;
float Ncenter = 0;
float Temp_pos = 0;

void MotorDrive(TIM_HandleTypeDef* PWM_tim)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	if(emer_pushed == 1){
 80020bc:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <MotorDrive+0xf0>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d16a      	bne.n	800219a <MotorDrive+0xe6>
		if (PulseWidthModulation >= 0)
 80020c4:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <MotorDrive+0xf4>)
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d2:	db29      	blt.n	8002128 <MotorDrive+0x74>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020da:	4834      	ldr	r0, [pc, #208]	; (80021ac <MotorDrive+0xf8>)
 80020dc:	f004 fa80 	bl	80065e0 <HAL_GPIO_WritePin>
			N_disallow = 0;
 80020e0:	4b33      	ldr	r3, [pc, #204]	; (80021b0 <MotorDrive+0xfc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation > 8000)
 80020e6:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <MotorDrive+0xf4>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80021b4 <MotorDrive+0x100>
 80020f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f8:	dd02      	ble.n	8002100 <MotorDrive+0x4c>
			{
				PulseWidthModulation = 8000;
 80020fa:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <MotorDrive+0xf4>)
 80020fc:	4a2e      	ldr	r2, [pc, #184]	; (80021b8 <MotorDrive+0x104>)
 80020fe:	601a      	str	r2, [r3, #0]
			}

			if ((pe3_st && (SetHomeYFlag == 0)) || P_disallow)
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <MotorDrive+0x108>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <MotorDrive+0x5c>
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <MotorDrive+0x10c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <MotorDrive+0x64>
 8002110:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <MotorDrive+0x110>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d030      	beq.n	800217a <MotorDrive+0xc6>
			{
				__HAL_TIM_SET_COMPARE(PWM_tim,TIM_CHANNEL_1,0);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	635a      	str	r2, [r3, #52]	; 0x34
				P_disallow = 1;
 8002120:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <MotorDrive+0x110>)
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e028      	b.n	800217a <MotorDrive+0xc6>
			}
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800212e:	481f      	ldr	r0, [pc, #124]	; (80021ac <MotorDrive+0xf8>)
 8002130:	f004 fa56 	bl	80065e0 <HAL_GPIO_WritePin>
			P_disallow = 0;
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <MotorDrive+0x110>)
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation < -8000)
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <MotorDrive+0xf4>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80021c8 <MotorDrive+0x114>
 8002144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214c:	d502      	bpl.n	8002154 <MotorDrive+0xa0>
			{
				PulseWidthModulation = -8000;
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <MotorDrive+0xf4>)
 8002150:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <MotorDrive+0x118>)
 8002152:	601a      	str	r2, [r3, #0]
			}

			if ((pe2_st && (SetHomeYFlag == 0)) || N_disallow)
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <MotorDrive+0x11c>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <MotorDrive+0xb0>
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <MotorDrive+0x10c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <MotorDrive+0xb8>
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <MotorDrive+0xfc>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <MotorDrive+0xc6>
			{
				__HAL_TIM_SET_COMPARE(PWM_tim,TIM_CHANNEL_1,0);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2200      	movs	r2, #0
 8002172:	635a      	str	r2, [r3, #52]	; 0x34
				N_disallow = 1;
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <MotorDrive+0xfc>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
			}
		}

		__HAL_TIM_SET_COMPARE(PWM_tim, TIM_CHANNEL_1, fabs(PulseWidthModulation*5));
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <MotorDrive+0xf4>)
 800217c:	edd3 7a00 	vldr	s15, [r3]
 8002180:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002188:	eef0 7ae7 	vabs.f32	s15, s15
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002194:	ee17 2a90 	vmov	r2, s15
 8002198:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200002a9 	.word	0x200002a9
 80021a8:	2000090c 	.word	0x2000090c
 80021ac:	40020000 	.word	0x40020000
 80021b0:	20000923 	.word	0x20000923
 80021b4:	45fa0000 	.word	0x45fa0000
 80021b8:	45fa0000 	.word	0x45fa0000
 80021bc:	20000938 	.word	0x20000938
 80021c0:	20000259 	.word	0x20000259
 80021c4:	20000922 	.word	0x20000922
 80021c8:	c5fa0000 	.word	0xc5fa0000
 80021cc:	c5fa0000 	.word	0xc5fa0000
 80021d0:	20000937 	.word	0x20000937
 80021d4:	00000000 	.word	0x00000000

080021d8 <SetHome>:

void SetHome(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* PWM_tim)
{
 80021d8:	b5b0      	push	{r4, r5, r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
	static enum {Jog, Overcenter, PCenter, UnderCenter, NCenter, Center,  Recenter, Setcenter} SetHomeState = Jog;

	if (SetHomeYFlag)
 80021e2:	4b8d      	ldr	r3, [pc, #564]	; (8002418 <SetHome+0x240>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 810e 	beq.w	8002408 <SetHome+0x230>
	{
		switch (SetHomeState)
 80021ec:	4b8b      	ldr	r3, [pc, #556]	; (800241c <SetHome+0x244>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b07      	cmp	r3, #7
 80021f2:	f200 8106 	bhi.w	8002402 <SetHome+0x22a>
 80021f6:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <SetHome+0x24>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	0800221d 	.word	0x0800221d
 8002200:	08002279 	.word	0x08002279
 8002204:	0800229d 	.word	0x0800229d
 8002208:	080022d1 	.word	0x080022d1
 800220c:	080022f7 	.word	0x080022f7
 8002210:	08002315 	.word	0x08002315
 8002214:	080023d5 	.word	0x080023d5
 8002218:	080023b3 	.word	0x080023b3
		{
		case Jog:
			Pcenter = 0;
 800221c:	4b80      	ldr	r3, [pc, #512]	; (8002420 <SetHome+0x248>)
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
			Ncenter = 0;
 8002224:	4b7f      	ldr	r3, [pc, #508]	; (8002424 <SetHome+0x24c>)
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
			Temp_pos = 0;
 800222c:	4b7e      	ldr	r3, [pc, #504]	; (8002428 <SetHome+0x250>)
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
			PulseWidthModulation = 3000;
 8002234:	4b7d      	ldr	r3, [pc, #500]	; (800242c <SetHome+0x254>)
 8002236:	4a7e      	ldr	r2, [pc, #504]	; (8002430 <SetHome+0x258>)
 8002238:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800223a:	2201      	movs	r2, #1
 800223c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002240:	487c      	ldr	r0, [pc, #496]	; (8002434 <SetHome+0x25c>)
 8002242:	f004 f9cd 	bl	80065e0 <HAL_GPIO_WritePin>

			if (pe1_st)
 8002246:	4b7c      	ldr	r3, [pc, #496]	; (8002438 <SetHome+0x260>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <SetHome+0x86>
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2200      	movs	r2, #0
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Overcenter;
 8002256:	4b71      	ldr	r3, [pc, #452]	; (800241c <SetHome+0x244>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
			else if (pe3_st)
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
				SetHomeState = Recenter;
			}
			break;
 800225c:	e0cc      	b.n	80023f8 <SetHome+0x220>
			else if (pe3_st)
 800225e:	4b77      	ldr	r3, [pc, #476]	; (800243c <SetHome+0x264>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80c8 	beq.w	80023f8 <SetHome+0x220>
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2200      	movs	r2, #0
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Recenter;
 8002270:	4b6a      	ldr	r3, [pc, #424]	; (800241c <SetHome+0x244>)
 8002272:	2206      	movs	r2, #6
 8002274:	701a      	strb	r2, [r3, #0]
			break;
 8002276:	e0bf      	b.n	80023f8 <SetHome+0x220>
		case Overcenter:
			PulseWidthModulation = 3000;
 8002278:	4b6c      	ldr	r3, [pc, #432]	; (800242c <SetHome+0x254>)
 800227a:	4a6d      	ldr	r2, [pc, #436]	; (8002430 <SetHome+0x258>)
 800227c:	601a      	str	r2, [r3, #0]

			if (QEIData.position >= 30)
 800227e:	4b70      	ldr	r3, [pc, #448]	; (8002440 <SetHome+0x268>)
 8002280:	edd3 7a04 	vldr	s15, [r3, #16]
 8002284:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	da00      	bge.n	8002294 <SetHome+0xbc>
			{
				SetHomeState = PCenter;
			}
			break;
 8002292:	e0b6      	b.n	8002402 <SetHome+0x22a>
				SetHomeState = PCenter;
 8002294:	4b61      	ldr	r3, [pc, #388]	; (800241c <SetHome+0x244>)
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
			break;
 800229a:	e0b2      	b.n	8002402 <SetHome+0x22a>
		case PCenter:
			PulseWidthModulation = -2500;
 800229c:	4b63      	ldr	r3, [pc, #396]	; (800242c <SetHome+0x254>)
 800229e:	4a69      	ldr	r2, [pc, #420]	; (8002444 <SetHome+0x26c>)
 80022a0:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 80022a2:	4b65      	ldr	r3, [pc, #404]	; (8002438 <SetHome+0x260>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80a8 	beq.w	80023fc <SetHome+0x224>
			{
				Pcenter = QEIData.position;
 80022ac:	4b64      	ldr	r3, [pc, #400]	; (8002440 <SetHome+0x268>)
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	4a5b      	ldr	r2, [pc, #364]	; (8002420 <SetHome+0x248>)
 80022b2:	6013      	str	r3, [r2, #0]
				Temp_pos = Pcenter - 30;
 80022b4:	4b5a      	ldr	r3, [pc, #360]	; (8002420 <SetHome+0x248>)
 80022b6:	edd3 7a00 	vldr	s15, [r3]
 80022ba:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80022be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022c2:	4b59      	ldr	r3, [pc, #356]	; (8002428 <SetHome+0x250>)
 80022c4:	edc3 7a00 	vstr	s15, [r3]
				SetHomeState = UnderCenter;
 80022c8:	4b54      	ldr	r3, [pc, #336]	; (800241c <SetHome+0x244>)
 80022ca:	2203      	movs	r2, #3
 80022cc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80022ce:	e095      	b.n	80023fc <SetHome+0x224>
		case UnderCenter:
			PulseWidthModulation = -3000;
 80022d0:	4b56      	ldr	r3, [pc, #344]	; (800242c <SetHome+0x254>)
 80022d2:	4a5d      	ldr	r2, [pc, #372]	; (8002448 <SetHome+0x270>)
 80022d4:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= Temp_pos)
 80022d6:	4b5a      	ldr	r3, [pc, #360]	; (8002440 <SetHome+0x268>)
 80022d8:	ed93 7a04 	vldr	s14, [r3, #16]
 80022dc:	4b52      	ldr	r3, [pc, #328]	; (8002428 <SetHome+0x250>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ea:	d900      	bls.n	80022ee <SetHome+0x116>
			{
				SetHomeState = NCenter;
			}
			break;
 80022ec:	e089      	b.n	8002402 <SetHome+0x22a>
				SetHomeState = NCenter;
 80022ee:	4b4b      	ldr	r3, [pc, #300]	; (800241c <SetHome+0x244>)
 80022f0:	2204      	movs	r2, #4
 80022f2:	701a      	strb	r2, [r3, #0]
			break;
 80022f4:	e085      	b.n	8002402 <SetHome+0x22a>
		case NCenter:
			PulseWidthModulation = 2500;
 80022f6:	4b4d      	ldr	r3, [pc, #308]	; (800242c <SetHome+0x254>)
 80022f8:	4a54      	ldr	r2, [pc, #336]	; (800244c <SetHome+0x274>)
 80022fa:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 80022fc:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <SetHome+0x260>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d07d      	beq.n	8002400 <SetHome+0x228>
			{
				Ncenter = QEIData.position;
 8002304:	4b4e      	ldr	r3, [pc, #312]	; (8002440 <SetHome+0x268>)
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	4a46      	ldr	r2, [pc, #280]	; (8002424 <SetHome+0x24c>)
 800230a:	6013      	str	r3, [r2, #0]
				SetHomeState = Center;
 800230c:	4b43      	ldr	r3, [pc, #268]	; (800241c <SetHome+0x244>)
 800230e:	2205      	movs	r2, #5
 8002310:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002312:	e075      	b.n	8002400 <SetHome+0x228>
		case Center:
			q_des = ((Pcenter - Ncenter)/2.0) + Ncenter;
 8002314:	4b42      	ldr	r3, [pc, #264]	; (8002420 <SetHome+0x248>)
 8002316:	ed93 7a00 	vldr	s14, [r3]
 800231a:	4b42      	ldr	r3, [pc, #264]	; (8002424 <SetHome+0x24c>)
 800231c:	edd3 7a00 	vldr	s15, [r3]
 8002320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002324:	ee17 0a90 	vmov	r0, s15
 8002328:	f7fe f8ba 	bl	80004a0 <__aeabi_f2d>
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002334:	f7fe fa36 	bl	80007a4 <__aeabi_ddiv>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4614      	mov	r4, r2
 800233e:	461d      	mov	r5, r3
 8002340:	4b38      	ldr	r3, [pc, #224]	; (8002424 <SetHome+0x24c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f8ab 	bl	80004a0 <__aeabi_f2d>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4620      	mov	r0, r4
 8002350:	4629      	mov	r1, r5
 8002352:	f7fd ff47 	bl	80001e4 <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f7fe fba7 	bl	8000ab0 <__aeabi_d2f>
 8002362:	4603      	mov	r3, r0
 8002364:	4a3a      	ldr	r2, [pc, #232]	; (8002450 <SetHome+0x278>)
 8002366:	6013      	str	r3, [r2, #0]
			PositionControlVelocityForm(&Controller);
 8002368:	483a      	ldr	r0, [pc, #232]	; (8002454 <SetHome+0x27c>)
 800236a:	f7ff fba1 	bl	8001ab0 <PositionControlVelocityForm>

			if (0.03 > fabs(q_des - QEIData.position))
 800236e:	4b38      	ldr	r3, [pc, #224]	; (8002450 <SetHome+0x278>)
 8002370:	ed93 7a00 	vldr	s14, [r3]
 8002374:	4b32      	ldr	r3, [pc, #200]	; (8002440 <SetHome+0x268>)
 8002376:	edd3 7a04 	vldr	s15, [r3, #16]
 800237a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237e:	eef0 7ae7 	vabs.f32	s15, s15
 8002382:	ee17 0a90 	vmov	r0, s15
 8002386:	f7fe f88b 	bl	80004a0 <__aeabi_f2d>
 800238a:	a321      	add	r3, pc, #132	; (adr r3, 8002410 <SetHome+0x238>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fe fb50 	bl	8000a34 <__aeabi_dcmplt>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d100      	bne.n	800239c <SetHome+0x1c4>
			{
				PulseWidthModulation = 0;
				MotorDrive(PWM_tim);
				SetHomeState = Setcenter;
			}
			break;
 800239a:	e032      	b.n	8002402 <SetHome+0x22a>
				PulseWidthModulation = 0;
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <SetHome+0x254>)
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
				MotorDrive(PWM_tim);
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	f7ff fe85 	bl	80020b4 <MotorDrive>
				SetHomeState = Setcenter;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <SetHome+0x244>)
 80023ac:	2207      	movs	r2, #7
 80023ae:	701a      	strb	r2, [r3, #0]
			break;
 80023b0:	e027      	b.n	8002402 <SetHome+0x22a>
		case Setcenter:
			__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24
			SetHomeYFlag = 0;
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <SetHome+0x240>)
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
			SetHomeState = Jog;
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <SetHome+0x244>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80023c6:	2200      	movs	r2, #0
 80023c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023cc:	4819      	ldr	r0, [pc, #100]	; (8002434 <SetHome+0x25c>)
 80023ce:	f004 f907 	bl	80065e0 <HAL_GPIO_WritePin>

			break;
 80023d2:	e016      	b.n	8002402 <SetHome+0x22a>
		case Recenter:
			PulseWidthModulation = -3000;
 80023d4:	4b15      	ldr	r3, [pc, #84]	; (800242c <SetHome+0x254>)
 80023d6:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <SetHome+0x270>)
 80023d8:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= -320)
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <SetHome+0x268>)
 80023dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80023e0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002458 <SetHome+0x280>
 80023e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ec:	d900      	bls.n	80023f0 <SetHome+0x218>
			{
				SetHomeState = PCenter;
			}
			break;
 80023ee:	e008      	b.n	8002402 <SetHome+0x22a>
				SetHomeState = PCenter;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <SetHome+0x244>)
 80023f2:	2202      	movs	r2, #2
 80023f4:	701a      	strb	r2, [r3, #0]
			break;
 80023f6:	e004      	b.n	8002402 <SetHome+0x22a>
			break;
 80023f8:	bf00      	nop
 80023fa:	e002      	b.n	8002402 <SetHome+0x22a>
			break;
 80023fc:	bf00      	nop
 80023fe:	e000      	b.n	8002402 <SetHome+0x22a>
			break;
 8002400:	bf00      	nop
		}
		MotorDrive(PWM_tim);
 8002402:	6838      	ldr	r0, [r7, #0]
 8002404:	f7ff fe56 	bl	80020b4 <MotorDrive>
	}


}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bdb0      	pop	{r4, r5, r7, pc}
 8002410:	eb851eb8 	.word	0xeb851eb8
 8002414:	3f9eb851 	.word	0x3f9eb851
 8002418:	20000259 	.word	0x20000259
 800241c:	20000388 	.word	0x20000388
 8002420:	2000037c 	.word	0x2000037c
 8002424:	20000380 	.word	0x20000380
 8002428:	20000384 	.word	0x20000384
 800242c:	2000090c 	.word	0x2000090c
 8002430:	453b8000 	.word	0x453b8000
 8002434:	40020400 	.word	0x40020400
 8002438:	20000936 	.word	0x20000936
 800243c:	20000938 	.word	0x20000938
 8002440:	200008f0 	.word	0x200008f0
 8002444:	c51c4000 	.word	0xc51c4000
 8002448:	c53b8000 	.word	0xc53b8000
 800244c:	451c4000 	.word	0x451c4000
 8002450:	200008c0 	.word	0x200008c0
 8002454:	20000914 	.word	0x20000914
 8002458:	c3a00000 	.word	0xc3a00000

0800245c <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <modbus_1t5_Timeout+0x1c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2201      	movs	r2, #1
 800246a:	751a      	strb	r2, [r3, #20]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	2000038c 	.word	0x2000038c

0800247c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <modbus_3t5_Timeout+0x1c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	755a      	strb	r2, [r3, #21]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	2000038c 	.word	0x2000038c

0800249c <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <modbus_UART_Recived+0x60>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2201      	movs	r2, #1
 80024ac:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <modbus_UART_Recived+0x60>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80024b6:	1c59      	adds	r1, r3, #1
 80024b8:	b289      	uxth	r1, r1
 80024ba:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80024be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80024c2:	d210      	bcs.n	80024e6 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <modbus_UART_Recived+0x60>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68d8      	ldr	r0, [r3, #12]
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <modbus_UART_Recived+0x60>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <modbus_UART_Recived+0x60>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80024d6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80024da:	4413      	add	r3, r2
 80024dc:	3302      	adds	r3, #2
 80024de:	2201      	movs	r2, #1
 80024e0:	4619      	mov	r1, r3
 80024e2:	f008 faad 	bl	800aa40 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <modbus_UART_Recived+0x60>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2200      	movs	r2, #0
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24

}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000038c 	.word	0x2000038c

08002500 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800250a:	4a24      	ldr	r2, [pc, #144]	; (800259c <Modbus_init+0x9c>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <Modbus_init+0x9c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8002518:	4b20      	ldr	r3, [pc, #128]	; (800259c <Modbus_init+0x9c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <Modbus_init+0xa0>)
 8002520:	2114      	movs	r1, #20
 8002522:	4618      	mov	r0, r3
 8002524:	f007 fc3e 	bl	8009da4 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <Modbus_init+0x9c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	4a1d      	ldr	r2, [pc, #116]	; (80025a4 <Modbus_init+0xa4>)
 8002530:	210e      	movs	r1, #14
 8002532:	4618      	mov	r0, r3
 8002534:	f007 fc36 	bl	8009da4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8002538:	4b18      	ldr	r3, [pc, #96]	; (800259c <Modbus_init+0x9c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <Modbus_init+0xa8>)
 8002540:	2103      	movs	r1, #3
 8002542:	4618      	mov	r0, r3
 8002544:	f008 f9d4 	bl	800a8f0 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <Modbus_init+0x9c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68d8      	ldr	r0, [r3, #12]
 800254e:	4b13      	ldr	r3, [pc, #76]	; (800259c <Modbus_init+0x9c>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <Modbus_init+0x9c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800255a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800255e:	4413      	add	r3, r2
 8002560:	3302      	adds	r3, #2
 8002562:	2201      	movs	r2, #1
 8002564:	4619      	mov	r1, r3
 8002566:	f008 fa6b 	bl	800aa40 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <Modbus_init+0x9c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10c      	bne.n	8002594 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <Modbus_init+0x9c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	4618      	mov	r0, r3
 8002582:	f006 fd21 	bl	8008fc8 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <Modbus_init+0x9c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f006 fef8 	bl	8009384 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	2000038c 	.word	0x2000038c
 80025a0:	0800245d 	.word	0x0800245d
 80025a4:	0800247d 	.word	0x0800247d
 80025a8:	0800249d 	.word	0x0800249d

080025ac <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80025b8:	23ff      	movs	r3, #255	; 0xff
 80025ba:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80025bc:	23ff      	movs	r3, #255	; 0xff
 80025be:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80025c0:	e013      	b.n	80025ea <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	7bbb      	ldrb	r3, [r7, #14]
 80025cc:	4053      	eors	r3, r2
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80025d2:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <CRC16+0x64>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4413      	add	r3, r2
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	4053      	eors	r3, r2
 80025de:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80025e0:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <CRC16+0x68>)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4413      	add	r3, r2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80025ea:	883b      	ldrh	r3, [r7, #0]
 80025ec:	1e5a      	subs	r2, r3, #1
 80025ee:	803a      	strh	r2, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1e6      	bne.n	80025c2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	b21a      	sxth	r2, r3
 80025fa:	7bbb      	ldrb	r3, [r7, #14]
 80025fc:	b21b      	sxth	r3, r3
 80025fe:	4313      	orrs	r3, r2
 8002600:	b21b      	sxth	r3, r3
 8002602:	b29b      	uxth	r3, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	20000108 	.word	0x20000108
 8002614:	20000008 	.word	0x20000008

08002618 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800261e:	4b81      	ldr	r3, [pc, #516]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	7e1b      	ldrb	r3, [r3, #24]
 8002624:	3b01      	subs	r3, #1
 8002626:	2b03      	cmp	r3, #3
 8002628:	d80a      	bhi.n	8002640 <Modbus_Protocal_Worker+0x28>
 800262a:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <Modbus_Protocal_Worker+0x18>)
 800262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002630:	0800264b 	.word	0x0800264b
 8002634:	080027eb 	.word	0x080027eb
 8002638:	080026d7 	.word	0x080026d7
 800263c:	080026fd 	.word	0x080026fd
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002640:	4b78      	ldr	r3, [pc, #480]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2201      	movs	r2, #1
 8002646:	761a      	strb	r2, [r3, #24]
		break;
 8002648:	e0e8      	b.n	800281c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800264a:	4b76      	ldr	r3, [pc, #472]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8002656:	f000 f9d7 	bl	8002a08 <Modbus_Emission>
 800265a:	e01c      	b.n	8002696 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 800265c:	4b71      	ldr	r3, [pc, #452]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	7d9b      	ldrb	r3, [r3, #22]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d017      	beq.n	8002696 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8002666:	4b6f      	ldr	r3, [pc, #444]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800266e:	4b6d      	ldr	r3, [pc, #436]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8002676:	4b6b      	ldr	r3, [pc, #428]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b68      	ldr	r3, [pc, #416]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2203      	movs	r2, #3
 8002694:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	f040 80b3 	bne.w	800280e <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80026a8:	4b5e      	ldr	r3, [pc, #376]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80026b2:	4b5c      	ldr	r3, [pc, #368]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68d8      	ldr	r0, [r3, #12]
 80026b8:	4b5a      	ldr	r3, [pc, #360]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b59      	ldr	r3, [pc, #356]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80026c4:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80026c8:	4413      	add	r3, r2
 80026ca:	3302      	adds	r3, #2
 80026cc:	2201      	movs	r2, #1
 80026ce:	4619      	mov	r1, r3
 80026d0:	f008 f9b6 	bl	800aa40 <HAL_UART_Receive_IT>
		}
		break;
 80026d4:	e09b      	b.n	800280e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80026d6:	4b53      	ldr	r3, [pc, #332]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	7d1b      	ldrb	r3, [r3, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 8098 	beq.w	8002812 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80026e2:	4b50      	ldr	r3, [pc, #320]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2200      	movs	r2, #0
 80026e8:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80026ea:	4b4e      	ldr	r3, [pc, #312]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	22fe      	movs	r2, #254	; 0xfe
 80026f0:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80026f2:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2204      	movs	r2, #4
 80026f8:	761a      	strb	r2, [r3, #24]
		}
		break;
 80026fa:	e08a      	b.n	8002812 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80026fc:	4b49      	ldr	r3, [pc, #292]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	7d9b      	ldrb	r3, [r3, #22]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d103      	bne.n	800271a <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002712:	4b44      	ldr	r3, [pc, #272]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	22ff      	movs	r2, #255	; 0xff
 8002718:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800271a:	4b42      	ldr	r3, [pc, #264]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002722:	f113 0f02 	cmn.w	r3, #2
 8002726:	d150      	bne.n	80027ca <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002728:	4b3e      	ldr	r3, [pc, #248]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002730:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f203 2272 	addw	r2, r3, #626	; 0x272
 8002738:	4b3a      	ldr	r3, [pc, #232]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002740:	3b02      	subs	r3, #2
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f7ff ff31 	bl	80025ac <CRC16>
 800274a:	4603      	mov	r3, r0
 800274c:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800274e:	793a      	ldrb	r2, [r7, #4]
 8002750:	4b34      	ldr	r3, [pc, #208]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	4b33      	ldr	r3, [pc, #204]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800275c:	3b02      	subs	r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8002764:	429a      	cmp	r2, r3
 8002766:	d10c      	bne.n	8002782 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8002768:	797a      	ldrb	r2, [r7, #5]
 800276a:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 800276c:	6819      	ldr	r1, [r3, #0]
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002776:	3b01      	subs	r3, #1
 8002778:	440b      	add	r3, r1
 800277a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800277e:	429a      	cmp	r2, r3
 8002780:	d004      	beq.n	800278c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002782:	4b28      	ldr	r3, [pc, #160]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	22ff      	movs	r2, #255	; 0xff
 8002788:	75da      	strb	r2, [r3, #23]
				break;
 800278a:	e047      	b.n	800281c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8002794:	4b23      	ldr	r3, [pc, #140]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d113      	bne.n	80027c6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800279e:	4b21      	ldr	r3, [pc, #132]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80027a6:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80027ae:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80027b0:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80027b8:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80027ba:	461a      	mov	r2, r3
 80027bc:	f009 fb02 	bl	800bdc4 <memcpy>

			//execute command
			Modbus_frame_response();
 80027c0:	f000 f90a 	bl	80029d8 <Modbus_frame_response>
 80027c4:	e001      	b.n	80027ca <Modbus_Protocal_Worker+0x1b2>
				break;
 80027c6:	bf00      	nop
					}
		break;


	}
}
 80027c8:	e028      	b.n	800281c <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	7d5b      	ldrb	r3, [r3, #21]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2201      	movs	r2, #1
 80027da:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f008 f9da 	bl	800ab9c <HAL_UART_AbortReceive>
		break;
 80027e8:	e015      	b.n	8002816 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d10f      	bne.n	800281a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <Modbus_Protocal_Worker+0x20c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2201      	movs	r2, #1
 800280a:	761a      	strb	r2, [r3, #24]
		break;
 800280c:	e005      	b.n	800281a <Modbus_Protocal_Worker+0x202>
		break;
 800280e:	bf00      	nop
 8002810:	e004      	b.n	800281c <Modbus_Protocal_Worker+0x204>
		break;
 8002812:	bf00      	nop
 8002814:	e002      	b.n	800281c <Modbus_Protocal_Worker+0x204>
		break;
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <Modbus_Protocal_Worker+0x204>
		break;
 800281a:	bf00      	nop
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	2000038c 	.word	0x2000038c

08002828 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <modbusWrite1Register+0x80>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	7e9b      	ldrb	r3, [r3, #26]
 8002834:	b29b      	uxth	r3, r3
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b29a      	uxth	r2, r3
 800283a:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <modbusWrite1Register+0x80>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	7edb      	ldrb	r3, [r3, #27]
 8002840:	b29b      	uxth	r3, r3
 8002842:	4413      	add	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <modbusWrite1Register+0x80>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	429a      	cmp	r2, r3
 8002850:	d903      	bls.n	800285a <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002852:	2002      	movs	r0, #2
 8002854:	f000 f8a4 	bl	80029a0 <ModbusErrorReply>
			 return;
 8002858:	e023      	b.n	80028a2 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <modbusWrite1Register+0x80>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <modbusWrite1Register+0x80>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	440b      	add	r3, r1
 800286a:	7f12      	ldrb	r2, [r2, #28]
 800286c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <modbusWrite1Register+0x80>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <modbusWrite1Register+0x80>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	440b      	add	r3, r1
 800287e:	7f52      	ldrb	r2, [r2, #29]
 8002880:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <modbusWrite1Register+0x80>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <modbusWrite1Register+0x80>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8002890:	2208      	movs	r2, #8
 8002892:	4619      	mov	r1, r3
 8002894:	f009 fa96 	bl	800bdc4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <modbusWrite1Register+0x80>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2205      	movs	r2, #5
 800289e:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	2000038c 	.word	0x2000038c

080028ac <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80028b2:	4b3a      	ldr	r3, [pc, #232]	; (800299c <modbusRead1Register+0xf0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	7f1b      	ldrb	r3, [r3, #28]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	b29a      	uxth	r2, r3
 80028be:	4b37      	ldr	r3, [pc, #220]	; (800299c <modbusRead1Register+0xf0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	7f5b      	ldrb	r3, [r3, #29]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80028ca:	4b34      	ldr	r3, [pc, #208]	; (800299c <modbusRead1Register+0xf0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	7e9b      	ldrb	r3, [r3, #26]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	4b31      	ldr	r3, [pc, #196]	; (800299c <modbusRead1Register+0xf0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	7edb      	ldrb	r3, [r3, #27]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	4413      	add	r3, r2
 80028e0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <modbusRead1Register+0x42>
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	2b7d      	cmp	r3, #125	; 0x7d
 80028ec:	d903      	bls.n	80028f6 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80028ee:	2003      	movs	r0, #3
 80028f0:	f000 f856 	bl	80029a0 <ModbusErrorReply>
		 return;
 80028f4:	e04e      	b.n	8002994 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80028f6:	88ba      	ldrh	r2, [r7, #4]
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <modbusRead1Register+0xf0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d808      	bhi.n	8002914 <modbusRead1Register+0x68>
 8002902:	88ba      	ldrh	r2, [r7, #4]
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	4413      	add	r3, r2
 8002908:	461a      	mov	r2, r3
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <modbusRead1Register+0xf0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	429a      	cmp	r2, r3
 8002912:	d903      	bls.n	800291c <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002914:	2002      	movs	r0, #2
 8002916:	f000 f843 	bl	80029a0 <ModbusErrorReply>
		 return;
 800291a:	e03b      	b.n	8002994 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800291c:	4b1f      	ldr	r3, [pc, #124]	; (800299c <modbusRead1Register+0xf0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2203      	movs	r2, #3
 8002922:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <modbusRead1Register+0xf0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	0052      	lsls	r2, r2, #1
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002936:	2400      	movs	r4, #0
 8002938:	e020      	b.n	800297c <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800293a:	4b18      	ldr	r3, [pc, #96]	; (800299c <modbusRead1Register+0xf0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	88bb      	ldrh	r3, [r7, #4]
 8002942:	4423      	add	r3, r4
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	18d1      	adds	r1, r2, r3
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <modbusRead1Register+0xf0>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	1c63      	adds	r3, r4, #1
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	7849      	ldrb	r1, [r1, #1]
 8002952:	4413      	add	r3, r2
 8002954:	460a      	mov	r2, r1
 8002956:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <modbusRead1Register+0xf0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	88bb      	ldrh	r3, [r7, #4]
 8002962:	4423      	add	r3, r4
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	18d1      	adds	r1, r2, r3
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <modbusRead1Register+0xf0>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	0063      	lsls	r3, r4, #1
 800296e:	3303      	adds	r3, #3
 8002970:	7809      	ldrb	r1, [r1, #0]
 8002972:	4413      	add	r3, r2
 8002974:	460a      	mov	r2, r1
 8002976:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800297a:	3401      	adds	r4, #1
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	429c      	cmp	r4, r3
 8002980:	dbdb      	blt.n	800293a <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	3301      	adds	r3, #1
 8002986:	b2da      	uxtb	r2, r3
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <modbusRead1Register+0xf0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	0052      	lsls	r2, r2, #1
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bd90      	pop	{r4, r7, pc}
 800299a:	bf00      	nop
 800299c:	2000038c 	.word	0x2000038c

080029a0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <ModbusErrorReply+0x34>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2283      	movs	r2, #131	; 0x83
 80029b0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <ModbusErrorReply+0x34>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	79fa      	ldrb	r2, [r7, #7]
 80029ba:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <ModbusErrorReply+0x34>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	2000038c 	.word	0x2000038c

080029d8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <Modbus_frame_response+0x2c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	7e5b      	ldrb	r3, [r3, #25]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d004      	beq.n	80029f0 <Modbus_frame_response+0x18>
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d105      	bne.n	80029f6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80029ea:	f7ff ff1d 	bl	8002828 <modbusWrite1Register>
		break;
 80029ee:	e006      	b.n	80029fe <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80029f0:	f7ff ff5c 	bl	80028ac <modbusRead1Register>
		break;
 80029f4:	e003      	b.n	80029fe <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80029f6:	2001      	movs	r0, #1
 80029f8:	f7ff ffd2 	bl	80029a0 <ModbusErrorReply>
		break;
 80029fc:	bf00      	nop

	}
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2000038c 	.word	0x2000038c

08002a08 <Modbus_Emission>:

void Modbus_Emission()
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d15e      	bne.n	8002adc <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002a1e:	4b39      	ldr	r3, [pc, #228]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4b38      	ldr	r3, [pc, #224]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	7812      	ldrb	r2, [r2, #0]
 8002a28:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002a2c:	4b35      	ldr	r3, [pc, #212]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8002a34:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002a36:	4b33      	ldr	r3, [pc, #204]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8002a3e:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8002a46:	461a      	mov	r2, r3
 8002a48:	f009 f9bc 	bl	800bdc4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3203      	adds	r2, #3
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002a62:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002a72:	3b02      	subs	r3, #2
 8002a74:	4619      	mov	r1, r3
 8002a76:	4610      	mov	r0, r2
 8002a78:	f7ff fd98 	bl	80025ac <CRC16>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8002a8c:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002a8e:	7939      	ldrb	r1, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	460a      	mov	r2, r1
 8002a94:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002a98:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <Modbus_Emission+0xfc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8002aa4:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002aa6:	7979      	ldrb	r1, [r7, #5]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	460a      	mov	r2, r1
 8002aac:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <Modbus_Emission+0xfc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d10d      	bne.n	8002adc <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002ac0:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <Modbus_Emission+0xfc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <Modbus_Emission+0xfc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <Modbus_Emission+0xfc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002ad2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f007 ffe2 	bl	800aaa0 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <Modbus_Emission+0xfc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002ae4:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <Modbus_Emission+0xfc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <Modbus_Emission+0xfc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <Modbus_Emission+0xfc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2202      	movs	r2, #2
 8002afa:	761a      	strb	r2, [r3, #24]
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	2000038c 	.word	0x2000038c

08002b08 <QuinticTraj_PreCal>:
		}
	}
}

void QuinticTraj_PreCal(int16_t start_pos, int16_t final_pos, Traj* trajectory)
{
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	603a      	str	r2, [r7, #0]
 8002b12:	80fb      	strh	r3, [r7, #6]
 8002b14:	460b      	mov	r3, r1
 8002b16:	80bb      	strh	r3, [r7, #4]
	if (start_pos != final_pos)
 8002b18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d07d      	beq.n	8002c20 <QuinticTraj_PreCal+0x118>
	{
		float s = final_pos - start_pos;
 8002b24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b36:	edc7 7a05 	vstr	s15, [r7, #20]

		trajectory->t_acc = 0;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	605a      	str	r2, [r3, #4]
		float t_total_v = (15.0*fabs(s))/v_max;
 8002b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b46:	eef0 7ae7 	vabs.f32	s15, s15
 8002b4a:	ee17 0a90 	vmov	r0, s15
 8002b4e:	f7fd fca7 	bl	80004a0 <__aeabi_f2d>
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <QuinticTraj_PreCal+0x128>)
 8002b58:	f7fd fcfa 	bl	8000550 <__aeabi_dmul>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4614      	mov	r4, r2
 8002b62:	461d      	mov	r5, r3
 8002b64:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <QuinticTraj_PreCal+0x12c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fc99 	bl	80004a0 <__aeabi_f2d>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4620      	mov	r0, r4
 8002b74:	4629      	mov	r1, r5
 8002b76:	f7fd fe15 	bl	80007a4 <__aeabi_ddiv>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fd ff95 	bl	8000ab0 <__aeabi_d2f>
 8002b86:	4603      	mov	r3, r0
 8002b88:	613b      	str	r3, [r7, #16]
		float t_total_a = 0.5*sqrt((40*sqrt(3)*fabs(s))/(3*a));
 8002b8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b8e:	eef0 7ae7 	vabs.f32	s15, s15
 8002b92:	ee17 0a90 	vmov	r0, s15
 8002b96:	f7fd fc83 	bl	80004a0 <__aeabi_f2d>
 8002b9a:	a323      	add	r3, pc, #140	; (adr r3, 8002c28 <QuinticTraj_PreCal+0x120>)
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	f7fd fcd6 	bl	8000550 <__aeabi_dmul>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4614      	mov	r4, r2
 8002baa:	461d      	mov	r5, r3
 8002bac:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <QuinticTraj_PreCal+0x130>)
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bba:	ee17 0a90 	vmov	r0, s15
 8002bbe:	f7fd fc6f 	bl	80004a0 <__aeabi_f2d>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	4629      	mov	r1, r5
 8002bca:	f7fd fdeb 	bl	80007a4 <__aeabi_ddiv>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	ec43 2b17 	vmov	d7, r2, r3
 8002bd6:	eeb0 0a47 	vmov.f32	s0, s14
 8002bda:	eef0 0a67 	vmov.f32	s1, s15
 8002bde:	f009 f979 	bl	800bed4 <sqrt>
 8002be2:	ec51 0b10 	vmov	r0, r1, d0
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <QuinticTraj_PreCal+0x134>)
 8002bec:	f7fd fcb0 	bl	8000550 <__aeabi_dmul>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f7fd ff5a 	bl	8000ab0 <__aeabi_d2f>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60fb      	str	r3, [r7, #12]

		if(t_total_v > t_total_a)
 8002c00:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c04:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	dd03      	ble.n	8002c1a <QuinticTraj_PreCal+0x112>
		{
			trajectory->t_total = t_total_v;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	601a      	str	r2, [r3, #0]
		else
		{
			trajectory->t_total = t_total_a;
		}
	}
}
 8002c18:	e002      	b.n	8002c20 <QuinticTraj_PreCal+0x118>
			trajectory->t_total = t_total_a;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	601a      	str	r2, [r3, #0]
}
 8002c20:	bf00      	nop
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bdb0      	pop	{r4, r5, r7, pc}
 8002c28:	d1372fea 	.word	0xd1372fea
 8002c2c:	4051520c 	.word	0x4051520c
 8002c30:	402e0000 	.word	0x402e0000
 8002c34:	20000208 	.word	0x20000208
 8002c38:	2000020c 	.word	0x2000020c
 8002c3c:	3fe00000 	.word	0x3fe00000

08002c40 <QuinticTraj_GetState>:

void QuinticTraj_GetState(int16_t start_pos, int16_t final_pos, Traj* trajectory, uint32_t t_us)
{
 8002c40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c44:	b08c      	sub	sp, #48	; 0x30
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60ba      	str	r2, [r7, #8]
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	81fb      	strh	r3, [r7, #14]
 8002c50:	460b      	mov	r3, r1
 8002c52:	81bb      	strh	r3, [r7, #12]
	if (start_pos != final_pos)
 8002c54:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	f000 81da 	beq.w	8003016 <QuinticTraj_GetState+0x3d6>
	{
		float t = t_us/1000000.0;
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fd fbfa 	bl	800045c <__aeabi_ui2d>
 8002c68:	a3f8      	add	r3, pc, #992	; (adr r3, 800304c <QuinticTraj_GetState+0x40c>)
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f7fd fd99 	bl	80007a4 <__aeabi_ddiv>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f7fd ff19 	bl	8000ab0 <__aeabi_d2f>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c

		float t_total = trajectory->t_total;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
		float s = final_pos - start_pos;
 8002c88:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		float C5 = 6*s/pow(t_total,5);
 8002c9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ca2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002caa:	ee17 0a90 	vmov	r0, s15
 8002cae:	f7fd fbf7 	bl	80004a0 <__aeabi_f2d>
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	460d      	mov	r5, r1
 8002cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb8:	f7fd fbf2 	bl	80004a0 <__aeabi_f2d>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	ed9f 1bd7 	vldr	d1, [pc, #860]	; 8003020 <QuinticTraj_GetState+0x3e0>
 8002cc4:	ec43 2b10 	vmov	d0, r2, r3
 8002cc8:	f009 f894 	bl	800bdf4 <pow>
 8002ccc:	ec53 2b10 	vmov	r2, r3, d0
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	f7fd fd66 	bl	80007a4 <__aeabi_ddiv>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7fd fee6 	bl	8000ab0 <__aeabi_d2f>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	623b      	str	r3, [r7, #32]
		float C4 = -15*s/pow(t_total,4);
 8002ce8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cec:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8002cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cf4:	ee17 0a90 	vmov	r0, s15
 8002cf8:	f7fd fbd2 	bl	80004a0 <__aeabi_f2d>
 8002cfc:	4604      	mov	r4, r0
 8002cfe:	460d      	mov	r5, r1
 8002d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d02:	f7fd fbcd 	bl	80004a0 <__aeabi_f2d>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	ed9f 1bc7 	vldr	d1, [pc, #796]	; 8003028 <QuinticTraj_GetState+0x3e8>
 8002d0e:	ec43 2b10 	vmov	d0, r2, r3
 8002d12:	f009 f86f 	bl	800bdf4 <pow>
 8002d16:	ec53 2b10 	vmov	r2, r3, d0
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	f7fd fd41 	bl	80007a4 <__aeabi_ddiv>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd fec1 	bl	8000ab0 <__aeabi_d2f>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	61fb      	str	r3, [r7, #28]
		float C3 = 10*s/pow(t_total,3);
 8002d32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d36:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3e:	ee17 0a90 	vmov	r0, s15
 8002d42:	f7fd fbad 	bl	80004a0 <__aeabi_f2d>
 8002d46:	4604      	mov	r4, r0
 8002d48:	460d      	mov	r5, r1
 8002d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d4c:	f7fd fba8 	bl	80004a0 <__aeabi_f2d>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	ed9f 1bb6 	vldr	d1, [pc, #728]	; 8003030 <QuinticTraj_GetState+0x3f0>
 8002d58:	ec43 2b10 	vmov	d0, r2, r3
 8002d5c:	f009 f84a 	bl	800bdf4 <pow>
 8002d60:	ec53 2b10 	vmov	r2, r3, d0
 8002d64:	4620      	mov	r0, r4
 8002d66:	4629      	mov	r1, r5
 8002d68:	f7fd fd1c 	bl	80007a4 <__aeabi_ddiv>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	f7fd fe9c 	bl	8000ab0 <__aeabi_d2f>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	61bb      	str	r3, [r7, #24]
		float C0 = start_pos;
 8002d7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d88:	edc7 7a05 	vstr	s15, [r7, #20]

		q_des = C5*pow(t,5) + C4*pow(t,4) + C3*pow(t,3) + C0;
 8002d8c:	6a38      	ldr	r0, [r7, #32]
 8002d8e:	f7fd fb87 	bl	80004a0 <__aeabi_f2d>
 8002d92:	4604      	mov	r4, r0
 8002d94:	460d      	mov	r5, r1
 8002d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d98:	f7fd fb82 	bl	80004a0 <__aeabi_f2d>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	ed9f 1b9f 	vldr	d1, [pc, #636]	; 8003020 <QuinticTraj_GetState+0x3e0>
 8002da4:	ec43 2b10 	vmov	d0, r2, r3
 8002da8:	f009 f824 	bl	800bdf4 <pow>
 8002dac:	ec53 2b10 	vmov	r2, r3, d0
 8002db0:	4620      	mov	r0, r4
 8002db2:	4629      	mov	r1, r5
 8002db4:	f7fd fbcc 	bl	8000550 <__aeabi_dmul>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4690      	mov	r8, r2
 8002dbe:	4699      	mov	r9, r3
 8002dc0:	69f8      	ldr	r0, [r7, #28]
 8002dc2:	f7fd fb6d 	bl	80004a0 <__aeabi_f2d>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	460d      	mov	r5, r1
 8002dca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dcc:	f7fd fb68 	bl	80004a0 <__aeabi_f2d>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	ed9f 1b94 	vldr	d1, [pc, #592]	; 8003028 <QuinticTraj_GetState+0x3e8>
 8002dd8:	ec43 2b10 	vmov	d0, r2, r3
 8002ddc:	f009 f80a 	bl	800bdf4 <pow>
 8002de0:	ec53 2b10 	vmov	r2, r3, d0
 8002de4:	4620      	mov	r0, r4
 8002de6:	4629      	mov	r1, r5
 8002de8:	f7fd fbb2 	bl	8000550 <__aeabi_dmul>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4640      	mov	r0, r8
 8002df2:	4649      	mov	r1, r9
 8002df4:	f7fd f9f6 	bl	80001e4 <__adddf3>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4690      	mov	r8, r2
 8002dfe:	4699      	mov	r9, r3
 8002e00:	69b8      	ldr	r0, [r7, #24]
 8002e02:	f7fd fb4d 	bl	80004a0 <__aeabi_f2d>
 8002e06:	4604      	mov	r4, r0
 8002e08:	460d      	mov	r5, r1
 8002e0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e0c:	f7fd fb48 	bl	80004a0 <__aeabi_f2d>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8003030 <QuinticTraj_GetState+0x3f0>
 8002e18:	ec43 2b10 	vmov	d0, r2, r3
 8002e1c:	f008 ffea 	bl	800bdf4 <pow>
 8002e20:	ec53 2b10 	vmov	r2, r3, d0
 8002e24:	4620      	mov	r0, r4
 8002e26:	4629      	mov	r1, r5
 8002e28:	f7fd fb92 	bl	8000550 <__aeabi_dmul>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4640      	mov	r0, r8
 8002e32:	4649      	mov	r1, r9
 8002e34:	f7fd f9d6 	bl	80001e4 <__adddf3>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	6978      	ldr	r0, [r7, #20]
 8002e42:	f7fd fb2d 	bl	80004a0 <__aeabi_f2d>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	f7fd f9c9 	bl	80001e4 <__adddf3>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f7fd fe29 	bl	8000ab0 <__aeabi_d2f>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4a77      	ldr	r2, [pc, #476]	; (8003040 <QuinticTraj_GetState+0x400>)
 8002e62:	6013      	str	r3, [r2, #0]
		qdot_des = 5*C5*pow(t,4) + 4*C4*pow(t,3) + 3*C3*pow(t,2);
 8002e64:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e68:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e70:	ee17 0a90 	vmov	r0, s15
 8002e74:	f7fd fb14 	bl	80004a0 <__aeabi_f2d>
 8002e78:	4604      	mov	r4, r0
 8002e7a:	460d      	mov	r5, r1
 8002e7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e7e:	f7fd fb0f 	bl	80004a0 <__aeabi_f2d>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8003028 <QuinticTraj_GetState+0x3e8>
 8002e8a:	ec43 2b10 	vmov	d0, r2, r3
 8002e8e:	f008 ffb1 	bl	800bdf4 <pow>
 8002e92:	ec53 2b10 	vmov	r2, r3, d0
 8002e96:	4620      	mov	r0, r4
 8002e98:	4629      	mov	r1, r5
 8002e9a:	f7fd fb59 	bl	8000550 <__aeabi_dmul>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4690      	mov	r8, r2
 8002ea4:	4699      	mov	r9, r3
 8002ea6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002eaa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eb2:	ee17 0a90 	vmov	r0, s15
 8002eb6:	f7fd faf3 	bl	80004a0 <__aeabi_f2d>
 8002eba:	4604      	mov	r4, r0
 8002ebc:	460d      	mov	r5, r1
 8002ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ec0:	f7fd faee 	bl	80004a0 <__aeabi_f2d>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8003030 <QuinticTraj_GetState+0x3f0>
 8002ecc:	ec43 2b10 	vmov	d0, r2, r3
 8002ed0:	f008 ff90 	bl	800bdf4 <pow>
 8002ed4:	ec53 2b10 	vmov	r2, r3, d0
 8002ed8:	4620      	mov	r0, r4
 8002eda:	4629      	mov	r1, r5
 8002edc:	f7fd fb38 	bl	8000550 <__aeabi_dmul>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4640      	mov	r0, r8
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	f7fd f97c 	bl	80001e4 <__adddf3>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4690      	mov	r8, r2
 8002ef2:	4699      	mov	r9, r3
 8002ef4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ef8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f00:	ee17 0a90 	vmov	r0, s15
 8002f04:	f7fd facc 	bl	80004a0 <__aeabi_f2d>
 8002f08:	4604      	mov	r4, r0
 8002f0a:	460d      	mov	r5, r1
 8002f0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f0e:	f7fd fac7 	bl	80004a0 <__aeabi_f2d>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8003038 <QuinticTraj_GetState+0x3f8>
 8002f1a:	ec43 2b10 	vmov	d0, r2, r3
 8002f1e:	f008 ff69 	bl	800bdf4 <pow>
 8002f22:	ec53 2b10 	vmov	r2, r3, d0
 8002f26:	4620      	mov	r0, r4
 8002f28:	4629      	mov	r1, r5
 8002f2a:	f7fd fb11 	bl	8000550 <__aeabi_dmul>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4640      	mov	r0, r8
 8002f34:	4649      	mov	r1, r9
 8002f36:	f7fd f955 	bl	80001e4 <__adddf3>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	f7fd fdb5 	bl	8000ab0 <__aeabi_d2f>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4a3e      	ldr	r2, [pc, #248]	; (8003044 <QuinticTraj_GetState+0x404>)
 8002f4a:	6013      	str	r3, [r2, #0]
		qddot_des = 20*C5*pow(t,3) + 12*C4*pow(t,2) + 6*C3*t;
 8002f4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f50:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f58:	ee17 0a90 	vmov	r0, s15
 8002f5c:	f7fd faa0 	bl	80004a0 <__aeabi_f2d>
 8002f60:	4604      	mov	r4, r0
 8002f62:	460d      	mov	r5, r1
 8002f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f66:	f7fd fa9b 	bl	80004a0 <__aeabi_f2d>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8003030 <QuinticTraj_GetState+0x3f0>
 8002f72:	ec43 2b10 	vmov	d0, r2, r3
 8002f76:	f008 ff3d 	bl	800bdf4 <pow>
 8002f7a:	ec53 2b10 	vmov	r2, r3, d0
 8002f7e:	4620      	mov	r0, r4
 8002f80:	4629      	mov	r1, r5
 8002f82:	f7fd fae5 	bl	8000550 <__aeabi_dmul>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4690      	mov	r8, r2
 8002f8c:	4699      	mov	r9, r3
 8002f8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f92:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f9a:	ee17 0a90 	vmov	r0, s15
 8002f9e:	f7fd fa7f 	bl	80004a0 <__aeabi_f2d>
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	460d      	mov	r5, r1
 8002fa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fa8:	f7fd fa7a 	bl	80004a0 <__aeabi_f2d>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003038 <QuinticTraj_GetState+0x3f8>
 8002fb4:	ec43 2b10 	vmov	d0, r2, r3
 8002fb8:	f008 ff1c 	bl	800bdf4 <pow>
 8002fbc:	ec53 2b10 	vmov	r2, r3, d0
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	f7fd fac4 	bl	8000550 <__aeabi_dmul>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4640      	mov	r0, r8
 8002fce:	4649      	mov	r1, r9
 8002fd0:	f7fd f908 	bl	80001e4 <__adddf3>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4614      	mov	r4, r2
 8002fda:	461d      	mov	r5, r3
 8002fdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fe0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002fe4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fe8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff0:	ee17 0a90 	vmov	r0, s15
 8002ff4:	f7fd fa54 	bl	80004a0 <__aeabi_f2d>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	4629      	mov	r1, r5
 8003000:	f7fd f8f0 	bl	80001e4 <__adddf3>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f7fd fd50 	bl	8000ab0 <__aeabi_d2f>
 8003010:	4603      	mov	r3, r0
 8003012:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <QuinticTraj_GetState+0x408>)
 8003014:	6013      	str	r3, [r2, #0]
	}
}
 8003016:	bf00      	nop
 8003018:	3730      	adds	r7, #48	; 0x30
 800301a:	46bd      	mov	sp, r7
 800301c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003020:	00000000 	.word	0x00000000
 8003024:	40140000 	.word	0x40140000
 8003028:	00000000 	.word	0x00000000
 800302c:	40100000 	.word	0x40100000
 8003030:	00000000 	.word	0x00000000
 8003034:	40080000 	.word	0x40080000
 8003038:	00000000 	.word	0x00000000
 800303c:	40000000 	.word	0x40000000
 8003040:	200008c0 	.word	0x200008c0
 8003044:	200008c4 	.word	0x200008c4
 8003048:	200008c8 	.word	0x200008c8
 800304c:	00000000 	.word	0x00000000
 8003050:	412e8480 	.word	0x412e8480

08003054 <swap>:
  30, 40,
  50, 40
};

void swap(float* a, float* b)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
	float temp = *a;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]
	*a = *b;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	601a      	str	r2, [r3, #0]
	*b = temp;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	601a      	str	r2, [r3, #0]
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <SetTwoPointsForCalibrate>:

void SetTwoPointsForCalibrate(float* x0, float* y0, float* x1, float* y1, uint8_t trayNumber) // 0->Pick, 1->Place
{
 8003080:	b5b0      	push	{r4, r5, r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
	if(*y0 > *y1){swap(x0, x1); swap(y0, y1);}
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	ed93 7a00 	vldr	s14, [r3]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800309e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a2:	dd08      	ble.n	80030b6 <SetTwoPointsForCalibrate+0x36>
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f7ff ffd4 	bl	8003054 <swap>
 80030ac:	6839      	ldr	r1, [r7, #0]
 80030ae:	68b8      	ldr	r0, [r7, #8]
 80030b0:	f7ff ffd0 	bl	8003054 <swap>
 80030b4:	e01d      	b.n	80030f2 <SetTwoPointsForCalibrate+0x72>
	else if(*y0 == *y1)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	ed93 7a00 	vldr	s14, [r3]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	eeb4 7a67 	vcmp.f32	s14, s15
 80030c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ca:	d112      	bne.n	80030f2 <SetTwoPointsForCalibrate+0x72>
	{
		if (*x0 > *x1){swap(x0, x1); swap(y0, y1);}
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	ed93 7a00 	vldr	s14, [r3]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e0:	dd07      	ble.n	80030f2 <SetTwoPointsForCalibrate+0x72>
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff ffb5 	bl	8003054 <swap>
 80030ea:	6839      	ldr	r1, [r7, #0]
 80030ec:	68b8      	ldr	r0, [r7, #8]
 80030ee:	f7ff ffb1 	bl	8003054 <swap>
	}

	rotationAngleRadian = atan2(50, 60) - atan2(*y1 - *y0, *x1 - *x0);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	ed93 7a00 	vldr	s14, [r3]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	edd3 7a00 	vldr	s15, [r3]
 80030fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003102:	ee17 0a90 	vmov	r0, s15
 8003106:	f7fd f9cb 	bl	80004a0 <__aeabi_f2d>
 800310a:	4604      	mov	r4, r0
 800310c:	460d      	mov	r5, r1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	ed93 7a00 	vldr	s14, [r3]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311e:	ee17 0a90 	vmov	r0, s15
 8003122:	f7fd f9bd 	bl	80004a0 <__aeabi_f2d>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	ec43 2b11 	vmov	d1, r2, r3
 800312e:	ec45 4b10 	vmov	d0, r4, r5
 8003132:	f008 fe5d 	bl	800bdf0 <atan2>
 8003136:	ec53 2b10 	vmov	r2, r3, d0
 800313a:	a132      	add	r1, pc, #200	; (adr r1, 8003204 <SetTwoPointsForCalibrate+0x184>)
 800313c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003140:	f7fd f84e 	bl	80001e0 <__aeabi_dsub>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	f7fd fcb0 	bl	8000ab0 <__aeabi_d2f>
 8003150:	4603      	mov	r3, r0
 8003152:	4a25      	ldr	r2, [pc, #148]	; (80031e8 <SetTwoPointsForCalibrate+0x168>)
 8003154:	6013      	str	r3, [r2, #0]
	Degrees = rotationAngleRadian * (180 / M_PI);
 8003156:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <SetTwoPointsForCalibrate+0x168>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd f9a0 	bl	80004a0 <__aeabi_f2d>
 8003160:	a31f      	add	r3, pc, #124	; (adr r3, 80031e0 <SetTwoPointsForCalibrate+0x160>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f7fd f9f3 	bl	8000550 <__aeabi_dmul>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	f7fd fc9d 	bl	8000ab0 <__aeabi_d2f>
 8003176:	4603      	mov	r3, r0
 8003178:	4a1c      	ldr	r2, [pc, #112]	; (80031ec <SetTwoPointsForCalibrate+0x16c>)
 800317a:	6013      	str	r3, [r2, #0]

	if (Degrees < 0)
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <SetTwoPointsForCalibrate+0x16c>)
 800317e:	edd3 7a00 	vldr	s15, [r3]
 8003182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318a:	d509      	bpl.n	80031a0 <SetTwoPointsForCalibrate+0x120>
	{
		Degrees = 360 + Degrees;
 800318c:	4b17      	ldr	r3, [pc, #92]	; (80031ec <SetTwoPointsForCalibrate+0x16c>)
 800318e:	edd3 7a00 	vldr	s15, [r3]
 8003192:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80031f0 <SetTwoPointsForCalibrate+0x170>
 8003196:	ee77 7a87 	vadd.f32	s15, s15, s14
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <SetTwoPointsForCalibrate+0x16c>)
 800319c:	edc3 7a00 	vstr	s15, [r3]
	}

	if (trayNumber == 0)
 80031a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d108      	bne.n	80031ba <SetTwoPointsForCalibrate+0x13a>
	{
		PickrotationAngleRadian = rotationAngleRadian;
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <SetTwoPointsForCalibrate+0x168>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <SetTwoPointsForCalibrate+0x174>)
 80031ae:	6013      	str	r3, [r2, #0]
		PickrotationAngleDegree = Degrees;
 80031b0:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <SetTwoPointsForCalibrate+0x16c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <SetTwoPointsForCalibrate+0x178>)
 80031b6:	6013      	str	r3, [r2, #0]
	else if (trayNumber == 1)
	{
		PlacerotationAngleRadian = rotationAngleRadian;
		PlacerotationAngleDegree = Degrees;
	}
}
 80031b8:	e00b      	b.n	80031d2 <SetTwoPointsForCalibrate+0x152>
	else if (trayNumber == 1)
 80031ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d107      	bne.n	80031d2 <SetTwoPointsForCalibrate+0x152>
		PlacerotationAngleRadian = rotationAngleRadian;
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <SetTwoPointsForCalibrate+0x168>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a0d      	ldr	r2, [pc, #52]	; (80031fc <SetTwoPointsForCalibrate+0x17c>)
 80031c8:	6013      	str	r3, [r2, #0]
		PlacerotationAngleDegree = Degrees;
 80031ca:	4b08      	ldr	r3, [pc, #32]	; (80031ec <SetTwoPointsForCalibrate+0x16c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <SetTwoPointsForCalibrate+0x180>)
 80031d0:	6013      	str	r3, [r2, #0]
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bdb0      	pop	{r4, r5, r7, pc}
 80031da:	bf00      	nop
 80031dc:	f3af 8000 	nop.w
 80031e0:	1a63c1f8 	.word	0x1a63c1f8
 80031e4:	404ca5dc 	.word	0x404ca5dc
 80031e8:	20000390 	.word	0x20000390
 80031ec:	20000394 	.word	0x20000394
 80031f0:	43b40000 	.word	0x43b40000
 80031f4:	200009ec 	.word	0x200009ec
 80031f8:	200009f0 	.word	0x200009f0
 80031fc:	20000a4c 	.word	0x20000a4c
 8003200:	20000a50 	.word	0x20000a50
 8003204:	c3f16a8a 	.word	0xc3f16a8a
 8003208:	3fe63b4b 	.word	0x3fe63b4b

0800320c <HolePositionsCartesian>:

void HolePositionsCartesian()
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af00      	add	r7, sp, #0
	if (GoalReadyFlag == 0)
 8003212:	4b8b      	ldr	r3, [pc, #556]	; (8003440 <HolePositionsCartesian+0x234>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 810e 	bne.w	8003438 <HolePositionsCartesian+0x22c>
	{
		float PickrotationMatrix[4] =
		{
			arm_cos_f32(PickrotationAngleRadian),  //0
 800321c:	4b89      	ldr	r3, [pc, #548]	; (8003444 <HolePositionsCartesian+0x238>)
 800321e:	edd3 7a00 	vldr	s15, [r3]
 8003222:	eeb0 0a67 	vmov.f32	s0, s15
 8003226:	f001 fd95 	bl	8004d54 <arm_cos_f32>
 800322a:	eef0 7a40 	vmov.f32	s15, s0
		float PickrotationMatrix[4] =
 800322e:	edc7 7a04 	vstr	s15, [r7, #16]
			arm_sin_f32(PickrotationAngleRadian),  //1
 8003232:	4b84      	ldr	r3, [pc, #528]	; (8003444 <HolePositionsCartesian+0x238>)
 8003234:	edd3 7a00 	vldr	s15, [r3]
 8003238:	eeb0 0a67 	vmov.f32	s0, s15
 800323c:	f001 fe10 	bl	8004e60 <arm_sin_f32>
 8003240:	eef0 7a40 	vmov.f32	s15, s0
		float PickrotationMatrix[4] =
 8003244:	edc7 7a05 	vstr	s15, [r7, #20]
			-arm_sin_f32(PickrotationAngleRadian), //2
 8003248:	4b7e      	ldr	r3, [pc, #504]	; (8003444 <HolePositionsCartesian+0x238>)
 800324a:	edd3 7a00 	vldr	s15, [r3]
 800324e:	eeb0 0a67 	vmov.f32	s0, s15
 8003252:	f001 fe05 	bl	8004e60 <arm_sin_f32>
 8003256:	eef0 7a40 	vmov.f32	s15, s0
 800325a:	eef1 7a67 	vneg.f32	s15, s15
		float PickrotationMatrix[4] =
 800325e:	edc7 7a06 	vstr	s15, [r7, #24]
			arm_cos_f32(PickrotationAngleRadian)   //3
 8003262:	4b78      	ldr	r3, [pc, #480]	; (8003444 <HolePositionsCartesian+0x238>)
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	eeb0 0a67 	vmov.f32	s0, s15
 800326c:	f001 fd72 	bl	8004d54 <arm_cos_f32>
 8003270:	eef0 7a40 	vmov.f32	s15, s0
		float PickrotationMatrix[4] =
 8003274:	edc7 7a07 	vstr	s15, [r7, #28]
		};

		float PlacerotationMatrix[4] =
		{
			arm_cos_f32(PlacerotationAngleRadian),  //0
 8003278:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HolePositionsCartesian+0x23c>)
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	eeb0 0a67 	vmov.f32	s0, s15
 8003282:	f001 fd67 	bl	8004d54 <arm_cos_f32>
 8003286:	eef0 7a40 	vmov.f32	s15, s0
		float PlacerotationMatrix[4] =
 800328a:	edc7 7a00 	vstr	s15, [r7]
			arm_sin_f32(PlacerotationAngleRadian),  //1
 800328e:	4b6e      	ldr	r3, [pc, #440]	; (8003448 <HolePositionsCartesian+0x23c>)
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	eeb0 0a67 	vmov.f32	s0, s15
 8003298:	f001 fde2 	bl	8004e60 <arm_sin_f32>
 800329c:	eef0 7a40 	vmov.f32	s15, s0
		float PlacerotationMatrix[4] =
 80032a0:	edc7 7a01 	vstr	s15, [r7, #4]
			-arm_sin_f32(PlacerotationAngleRadian), //2
 80032a4:	4b68      	ldr	r3, [pc, #416]	; (8003448 <HolePositionsCartesian+0x23c>)
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	eeb0 0a67 	vmov.f32	s0, s15
 80032ae:	f001 fdd7 	bl	8004e60 <arm_sin_f32>
 80032b2:	eef0 7a40 	vmov.f32	s15, s0
 80032b6:	eef1 7a67 	vneg.f32	s15, s15
		float PlacerotationMatrix[4] =
 80032ba:	edc7 7a02 	vstr	s15, [r7, #8]
			arm_cos_f32(PlacerotationAngleRadian)   //3
 80032be:	4b62      	ldr	r3, [pc, #392]	; (8003448 <HolePositionsCartesian+0x23c>)
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	eeb0 0a67 	vmov.f32	s0, s15
 80032c8:	f001 fd44 	bl	8004d54 <arm_cos_f32>
 80032cc:	eef0 7a40 	vmov.f32	s15, s0
		float PlacerotationMatrix[4] =
 80032d0:	edc7 7a03 	vstr	s15, [r7, #12]
		};

		static uint8_t i = 0;

		PickTray9holes[i*2] = (holePositionsRelativetoBottomLeft[i*2] * PickrotationMatrix[0]) + (holePositionsRelativetoBottomLeft[i*2+1] * PickrotationMatrix[1]) + Pickreference[0];
 80032d4:	4b5d      	ldr	r3, [pc, #372]	; (800344c <HolePositionsCartesian+0x240>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4a5d      	ldr	r2, [pc, #372]	; (8003450 <HolePositionsCartesian+0x244>)
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	ed93 7a00 	vldr	s14, [r3]
 80032e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80032e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ec:	4b57      	ldr	r3, [pc, #348]	; (800344c <HolePositionsCartesian+0x240>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	3301      	adds	r3, #1
 80032f4:	4a56      	ldr	r2, [pc, #344]	; (8003450 <HolePositionsCartesian+0x244>)
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	edd3 6a00 	vldr	s13, [r3]
 80032fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330a:	4b52      	ldr	r3, [pc, #328]	; (8003454 <HolePositionsCartesian+0x248>)
 800330c:	edd3 7a00 	vldr	s15, [r3]
 8003310:	4b4e      	ldr	r3, [pc, #312]	; (800344c <HolePositionsCartesian+0x240>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331a:	4a4f      	ldr	r2, [pc, #316]	; (8003458 <HolePositionsCartesian+0x24c>)
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	edc3 7a00 	vstr	s15, [r3]
		PickTray9holes[i*2 + 1] = (holePositionsRelativetoBottomLeft[i*2] * PickrotationMatrix[2]) + (holePositionsRelativetoBottomLeft[i*2+1] * PickrotationMatrix[3]) + Pickreference[1];
 8003324:	4b49      	ldr	r3, [pc, #292]	; (800344c <HolePositionsCartesian+0x240>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4a49      	ldr	r2, [pc, #292]	; (8003450 <HolePositionsCartesian+0x244>)
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	ed93 7a00 	vldr	s14, [r3]
 8003334:	edd7 7a06 	vldr	s15, [r7, #24]
 8003338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800333c:	4b43      	ldr	r3, [pc, #268]	; (800344c <HolePositionsCartesian+0x240>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	3301      	adds	r3, #1
 8003344:	4a42      	ldr	r2, [pc, #264]	; (8003450 <HolePositionsCartesian+0x244>)
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	edd3 6a00 	vldr	s13, [r3]
 800334e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800335a:	4b3e      	ldr	r3, [pc, #248]	; (8003454 <HolePositionsCartesian+0x248>)
 800335c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003360:	4b3a      	ldr	r3, [pc, #232]	; (800344c <HolePositionsCartesian+0x240>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	3301      	adds	r3, #1
 8003368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336c:	4a3a      	ldr	r2, [pc, #232]	; (8003458 <HolePositionsCartesian+0x24c>)
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	edc3 7a00 	vstr	s15, [r3]

		PlaceTray9holes[i*2] = (holePositionsRelativetoBottomLeft[i*2] * PlacerotationMatrix[0]) + (holePositionsRelativetoBottomLeft[i*2+1] * PlacerotationMatrix[1]) + Placereference[0];
 8003376:	4b35      	ldr	r3, [pc, #212]	; (800344c <HolePositionsCartesian+0x240>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4a34      	ldr	r2, [pc, #208]	; (8003450 <HolePositionsCartesian+0x244>)
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	ed93 7a00 	vldr	s14, [r3]
 8003386:	edd7 7a00 	vldr	s15, [r7]
 800338a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800338e:	4b2f      	ldr	r3, [pc, #188]	; (800344c <HolePositionsCartesian+0x240>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	3301      	adds	r3, #1
 8003396:	4a2e      	ldr	r2, [pc, #184]	; (8003450 <HolePositionsCartesian+0x244>)
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	edd3 6a00 	vldr	s13, [r3]
 80033a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ac:	4b2b      	ldr	r3, [pc, #172]	; (800345c <HolePositionsCartesian+0x250>)
 80033ae:	edd3 7a00 	vldr	s15, [r3]
 80033b2:	4b26      	ldr	r3, [pc, #152]	; (800344c <HolePositionsCartesian+0x240>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033bc:	4a28      	ldr	r2, [pc, #160]	; (8003460 <HolePositionsCartesian+0x254>)
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	edc3 7a00 	vstr	s15, [r3]
		PlaceTray9holes[i*2 + 1] = (holePositionsRelativetoBottomLeft[i*2] * PlacerotationMatrix[2]) + (holePositionsRelativetoBottomLeft[i*2+1] * PlacerotationMatrix[3]) + Placereference[1];
 80033c6:	4b21      	ldr	r3, [pc, #132]	; (800344c <HolePositionsCartesian+0x240>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4a20      	ldr	r2, [pc, #128]	; (8003450 <HolePositionsCartesian+0x244>)
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	ed93 7a00 	vldr	s14, [r3]
 80033d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80033da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <HolePositionsCartesian+0x240>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	3301      	adds	r3, #1
 80033e6:	4a1a      	ldr	r2, [pc, #104]	; (8003450 <HolePositionsCartesian+0x244>)
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	edd3 6a00 	vldr	s13, [r3]
 80033f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80033f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033fc:	4b17      	ldr	r3, [pc, #92]	; (800345c <HolePositionsCartesian+0x250>)
 80033fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <HolePositionsCartesian+0x240>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	3301      	adds	r3, #1
 800340a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340e:	4a14      	ldr	r2, [pc, #80]	; (8003460 <HolePositionsCartesian+0x254>)
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	edc3 7a00 	vstr	s15, [r3]

		i++;
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HolePositionsCartesian+0x240>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	3301      	adds	r3, #1
 800341e:	b2da      	uxtb	r2, r3
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HolePositionsCartesian+0x240>)
 8003422:	701a      	strb	r2, [r3, #0]
		if (i == 9)
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HolePositionsCartesian+0x240>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b09      	cmp	r3, #9
 800342a:	d105      	bne.n	8003438 <HolePositionsCartesian+0x22c>
		{
			GoalReadyFlag = 1;
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <HolePositionsCartesian+0x234>)
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
			i = 0;
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HolePositionsCartesian+0x240>)
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003438:	bf00      	nop
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000a9c 	.word	0x20000a9c
 8003444:	200009ec 	.word	0x200009ec
 8003448:	20000a4c 	.word	0x20000a4c
 800344c:	20000398 	.word	0x20000398
 8003450:	20000210 	.word	0x20000210
 8003454:	200009dc 	.word	0x200009dc
 8003458:	200009f4 	.word	0x200009f4
 800345c:	20000a3c 	.word	0x20000a3c
 8003460:	20000a54 	.word	0x20000a54

08003464 <GetJoystickXYaxisValue>:

uint8_t JoyStickSwitch_last = 1;
uint64_t StartTime = 0;

void GetJoystickXYaxisValue(float* ptrx, float* ptry)
{
 8003464:	b5b0      	push	{r4, r5, r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
	JoyStickSwitch = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 800346e:	2110      	movs	r1, #16
 8003470:	4884      	ldr	r0, [pc, #528]	; (8003684 <GetJoystickXYaxisValue+0x220>)
 8003472:	f003 f89d 	bl	80065b0 <HAL_GPIO_ReadPin>
 8003476:	4603      	mov	r3, r0
 8003478:	461a      	mov	r2, r3
 800347a:	4b83      	ldr	r3, [pc, #524]	; (8003688 <GetJoystickXYaxisValue+0x224>)
 800347c:	701a      	strb	r2, [r3, #0]

	static uint8_t i = 0;
	static uint8_t n = 0;
	if(i % 2 == 0)
 800347e:	4b83      	ldr	r3, [pc, #524]	; (800368c <GetJoystickXYaxisValue+0x228>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d12a      	bne.n	80034e2 <GetJoystickXYaxisValue+0x7e>
	{
		IN1[i/2] = adcRawData[i];
 800348c:	4b7f      	ldr	r3, [pc, #508]	; (800368c <GetJoystickXYaxisValue+0x228>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	4b7f      	ldr	r3, [pc, #508]	; (8003690 <GetJoystickXYaxisValue+0x22c>)
 8003494:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8003498:	4b7c      	ldr	r3, [pc, #496]	; (800368c <GetJoystickXYaxisValue+0x228>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	4b7c      	ldr	r3, [pc, #496]	; (8003694 <GetJoystickXYaxisValue+0x230>)
 80034a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		Y_axis += IN1[i/2];
 80034a8:	4b78      	ldr	r3, [pc, #480]	; (800368c <GetJoystickXYaxisValue+0x228>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	085b      	lsrs	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b78      	ldr	r3, [pc, #480]	; (8003694 <GetJoystickXYaxisValue+0x230>)
 80034b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80034b8:	4b77      	ldr	r3, [pc, #476]	; (8003698 <GetJoystickXYaxisValue+0x234>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4413      	add	r3, r2
 80034be:	4a76      	ldr	r2, [pc, #472]	; (8003698 <GetJoystickXYaxisValue+0x234>)
 80034c0:	6013      	str	r3, [r2, #0]
		if(i == 18)
 80034c2:	4b72      	ldr	r3, [pc, #456]	; (800368c <GetJoystickXYaxisValue+0x228>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b12      	cmp	r3, #18
 80034c8:	d146      	bne.n	8003558 <GetJoystickXYaxisValue+0xf4>
		{
			joystickYaxis = Y_axis/10;
 80034ca:	4b73      	ldr	r3, [pc, #460]	; (8003698 <GetJoystickXYaxisValue+0x234>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a73      	ldr	r2, [pc, #460]	; (800369c <GetJoystickXYaxisValue+0x238>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	08db      	lsrs	r3, r3, #3
 80034d6:	4a72      	ldr	r2, [pc, #456]	; (80036a0 <GetJoystickXYaxisValue+0x23c>)
 80034d8:	6013      	str	r3, [r2, #0]
			Y_axis = 0;
 80034da:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <GetJoystickXYaxisValue+0x234>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e03a      	b.n	8003558 <GetJoystickXYaxisValue+0xf4>
		}
	}
	else if(i % 2 == 1)
 80034e2:	4b6a      	ldr	r3, [pc, #424]	; (800368c <GetJoystickXYaxisValue+0x228>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d033      	beq.n	8003558 <GetJoystickXYaxisValue+0xf4>
	{
		IN0[(i-1)/2] = adcRawData[i];
 80034f0:	4b66      	ldr	r3, [pc, #408]	; (800368c <GetJoystickXYaxisValue+0x228>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b66      	ldr	r3, [pc, #408]	; (8003690 <GetJoystickXYaxisValue+0x22c>)
 80034f8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80034fc:	4b63      	ldr	r3, [pc, #396]	; (800368c <GetJoystickXYaxisValue+0x228>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	3b01      	subs	r3, #1
 8003502:	0fda      	lsrs	r2, r3, #31
 8003504:	4413      	add	r3, r2
 8003506:	105b      	asrs	r3, r3, #1
 8003508:	461a      	mov	r2, r3
 800350a:	4b66      	ldr	r3, [pc, #408]	; (80036a4 <GetJoystickXYaxisValue+0x240>)
 800350c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		X_axis += IN0[(i-1)/2];
 8003510:	4b5e      	ldr	r3, [pc, #376]	; (800368c <GetJoystickXYaxisValue+0x228>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	3b01      	subs	r3, #1
 8003516:	0fda      	lsrs	r2, r3, #31
 8003518:	4413      	add	r3, r2
 800351a:	105b      	asrs	r3, r3, #1
 800351c:	461a      	mov	r2, r3
 800351e:	4b61      	ldr	r3, [pc, #388]	; (80036a4 <GetJoystickXYaxisValue+0x240>)
 8003520:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003524:	4b60      	ldr	r3, [pc, #384]	; (80036a8 <GetJoystickXYaxisValue+0x244>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4413      	add	r3, r2
 800352a:	4a5f      	ldr	r2, [pc, #380]	; (80036a8 <GetJoystickXYaxisValue+0x244>)
 800352c:	6013      	str	r3, [r2, #0]
		if(i == 19)
 800352e:	4b57      	ldr	r3, [pc, #348]	; (800368c <GetJoystickXYaxisValue+0x228>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b13      	cmp	r3, #19
 8003534:	d110      	bne.n	8003558 <GetJoystickXYaxisValue+0xf4>
		{
			joystickXaxis = X_axis/10;
 8003536:	4b5c      	ldr	r3, [pc, #368]	; (80036a8 <GetJoystickXYaxisValue+0x244>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a58      	ldr	r2, [pc, #352]	; (800369c <GetJoystickXYaxisValue+0x238>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	08db      	lsrs	r3, r3, #3
 8003542:	4a5a      	ldr	r2, [pc, #360]	; (80036ac <GetJoystickXYaxisValue+0x248>)
 8003544:	6013      	str	r3, [r2, #0]
			X_axis = 0;
 8003546:	4b58      	ldr	r3, [pc, #352]	; (80036a8 <GetJoystickXYaxisValue+0x244>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
			i = 0;
 800354c:	4b4f      	ldr	r3, [pc, #316]	; (800368c <GetJoystickXYaxisValue+0x228>)
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
			JoyStickReadyFlag = 1;
 8003552:	4b57      	ldr	r3, [pc, #348]	; (80036b0 <GetJoystickXYaxisValue+0x24c>)
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
		}
	}
	i = (i+1)%20;
 8003558:	4b4c      	ldr	r3, [pc, #304]	; (800368c <GetJoystickXYaxisValue+0x228>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	4b55      	ldr	r3, [pc, #340]	; (80036b4 <GetJoystickXYaxisValue+0x250>)
 8003560:	fb83 1302 	smull	r1, r3, r3, r2
 8003564:	10d9      	asrs	r1, r3, #3
 8003566:	17d3      	asrs	r3, r2, #31
 8003568:	1ac9      	subs	r1, r1, r3
 800356a:	460b      	mov	r3, r1
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	1ad1      	subs	r1, r2, r3
 8003574:	b2ca      	uxtb	r2, r1
 8003576:	4b45      	ldr	r3, [pc, #276]	; (800368c <GetJoystickXYaxisValue+0x228>)
 8003578:	701a      	strb	r2, [r3, #0]

	if ((JoyStickSwitch == 0) && (SetHomeYFlag == 0) && (joystickYaxis < 2100) && (joystickYaxis > 1700)&& (joystickXaxis < 2100) && (joystickXaxis > 1700))
 800357a:	4b43      	ldr	r3, [pc, #268]	; (8003688 <GetJoystickXYaxisValue+0x224>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d177      	bne.n	8003672 <GetJoystickXYaxisValue+0x20e>
 8003582:	4b4d      	ldr	r3, [pc, #308]	; (80036b8 <GetJoystickXYaxisValue+0x254>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d173      	bne.n	8003672 <GetJoystickXYaxisValue+0x20e>
 800358a:	4b45      	ldr	r3, [pc, #276]	; (80036a0 <GetJoystickXYaxisValue+0x23c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f640 0233 	movw	r2, #2099	; 0x833
 8003592:	4293      	cmp	r3, r2
 8003594:	d86d      	bhi.n	8003672 <GetJoystickXYaxisValue+0x20e>
 8003596:	4b42      	ldr	r3, [pc, #264]	; (80036a0 <GetJoystickXYaxisValue+0x23c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800359e:	4293      	cmp	r3, r2
 80035a0:	d967      	bls.n	8003672 <GetJoystickXYaxisValue+0x20e>
 80035a2:	4b42      	ldr	r3, [pc, #264]	; (80036ac <GetJoystickXYaxisValue+0x248>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f640 0233 	movw	r2, #2099	; 0x833
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d861      	bhi.n	8003672 <GetJoystickXYaxisValue+0x20e>
 80035ae:	4b3f      	ldr	r3, [pc, #252]	; (80036ac <GetJoystickXYaxisValue+0x248>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d95b      	bls.n	8003672 <GetJoystickXYaxisValue+0x20e>
	{
		if (JoyStickSwitch_last == 1 && JoyStickSwitch == 0)
 80035ba:	4b40      	ldr	r3, [pc, #256]	; (80036bc <GetJoystickXYaxisValue+0x258>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d132      	bne.n	8003628 <GetJoystickXYaxisValue+0x1c4>
 80035c2:	4b31      	ldr	r3, [pc, #196]	; (8003688 <GetJoystickXYaxisValue+0x224>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d12e      	bne.n	8003628 <GetJoystickXYaxisValue+0x1c4>
		{
			StartTime = micros(&htim5);
 80035ca:	483d      	ldr	r0, [pc, #244]	; (80036c0 <GetJoystickXYaxisValue+0x25c>)
 80035cc:	f7fe fb10 	bl	8001bf0 <micros>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	493b      	ldr	r1, [pc, #236]	; (80036c4 <GetJoystickXYaxisValue+0x260>)
 80035d6:	e9c1 2300 	strd	r2, r3, [r1]
			// Keep encoder position xy
			n++;
 80035da:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <GetJoystickXYaxisValue+0x264>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	3301      	adds	r3, #1
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <GetJoystickXYaxisValue+0x264>)
 80035e4:	701a      	strb	r2, [r3, #0]
			if (n >= 10)
 80035e6:	4b38      	ldr	r3, [pc, #224]	; (80036c8 <GetJoystickXYaxisValue+0x264>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b09      	cmp	r3, #9
 80035ec:	d941      	bls.n	8003672 <GetJoystickXYaxisValue+0x20e>
			{
				*ptrx = ((int16_t)registerFrame[68].U16)/10.0; //encoderx
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <GetJoystickXYaxisValue+0x268>)
 80035f0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80035f4:	b21b      	sxth	r3, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fc ff40 	bl	800047c <__aeabi_i2d>
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	4b33      	ldr	r3, [pc, #204]	; (80036d0 <GetJoystickXYaxisValue+0x26c>)
 8003602:	f7fd f8cf 	bl	80007a4 <__aeabi_ddiv>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4610      	mov	r0, r2
 800360c:	4619      	mov	r1, r3
 800360e:	f7fd fa4f 	bl	8000ab0 <__aeabi_d2f>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	601a      	str	r2, [r3, #0]
				*ptry = QEIData.position; //encodery25
 8003618:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <GetJoystickXYaxisValue+0x270>)
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	601a      	str	r2, [r3, #0]
				n = 0;
 8003620:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <GetJoystickXYaxisValue+0x264>)
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
			if (n >= 10)
 8003626:	e024      	b.n	8003672 <GetJoystickXYaxisValue+0x20e>
			}
		}
		else if (JoyStickSwitch_last == 0 && JoyStickSwitch == 0)
 8003628:	4b24      	ldr	r3, [pc, #144]	; (80036bc <GetJoystickXYaxisValue+0x258>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d120      	bne.n	8003672 <GetJoystickXYaxisValue+0x20e>
 8003630:	4b15      	ldr	r3, [pc, #84]	; (8003688 <GetJoystickXYaxisValue+0x224>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d11c      	bne.n	8003672 <GetJoystickXYaxisValue+0x20e>
		{
			if ((micros(&htim5) - StartTime) >= 2000000)
 8003638:	4821      	ldr	r0, [pc, #132]	; (80036c0 <GetJoystickXYaxisValue+0x25c>)
 800363a:	f7fe fad9 	bl	8001bf0 <micros>
 800363e:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <GetJoystickXYaxisValue+0x260>)
 8003640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003644:	1a84      	subs	r4, r0, r2
 8003646:	eb61 0503 	sbc.w	r5, r1, r3
 800364a:	4b23      	ldr	r3, [pc, #140]	; (80036d8 <GetJoystickXYaxisValue+0x274>)
 800364c:	429c      	cmp	r4, r3
 800364e:	f175 0300 	sbcs.w	r3, r5, #0
 8003652:	d30e      	bcc.n	8003672 <GetJoystickXYaxisValue+0x20e>
			{
				//set home x-axis
				registerFrame[64].U16 = 1;
 8003654:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <GetJoystickXYaxisValue+0x268>)
 8003656:	2201      	movs	r2, #1
 8003658:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				//set home y-axis
				SetHomeYFlag = 1;
 800365c:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <GetJoystickXYaxisValue+0x254>)
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
				StartTime = micros(&htim5);
 8003662:	4817      	ldr	r0, [pc, #92]	; (80036c0 <GetJoystickXYaxisValue+0x25c>)
 8003664:	f7fe fac4 	bl	8001bf0 <micros>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4915      	ldr	r1, [pc, #84]	; (80036c4 <GetJoystickXYaxisValue+0x260>)
 800366e:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
	}
	JoyStickSwitch_last = JoyStickSwitch;
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <GetJoystickXYaxisValue+0x224>)
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <GetJoystickXYaxisValue+0x258>)
 8003678:	701a      	strb	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bdb0      	pop	{r4, r5, r7, pc}
 8003682:	bf00      	nop
 8003684:	40020000 	.word	0x40020000
 8003688:	200009b4 	.word	0x200009b4
 800368c:	200003a8 	.word	0x200003a8
 8003690:	2000093c 	.word	0x2000093c
 8003694:	2000098c 	.word	0x2000098c
 8003698:	200009bc 	.word	0x200009bc
 800369c:	cccccccd 	.word	0xcccccccd
 80036a0:	200009c4 	.word	0x200009c4
 80036a4:	20000964 	.word	0x20000964
 80036a8:	200009b8 	.word	0x200009b8
 80036ac:	200009c0 	.word	0x200009c0
 80036b0:	200009c8 	.word	0x200009c8
 80036b4:	66666667 	.word	0x66666667
 80036b8:	20000259 	.word	0x20000259
 80036bc:	20000258 	.word	0x20000258
 80036c0:	20000670 	.word	0x20000670
 80036c4:	200003a0 	.word	0x200003a0
 80036c8:	200003a9 	.word	0x200003a9
 80036cc:	20000f78 	.word	0x20000f78
 80036d0:	40240000 	.word	0x40240000
 80036d4:	200008f0 	.word	0x200008f0
 80036d8:	001e8480 	.word	0x001e8480

080036dc <JoyStickControlCartesian>:

void JoyStickControlCartesian()
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	if ((SetHomeYFlag == 0) && JoyStickReadyFlag)
 80036e0:	4b1e      	ldr	r3, [pc, #120]	; (800375c <JoyStickControlCartesian+0x80>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d136      	bne.n	8003756 <JoyStickControlCartesian+0x7a>
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <JoyStickControlCartesian+0x84>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d032      	beq.n	8003756 <JoyStickControlCartesian+0x7a>
	{
		//X-axis
		if(joystickYaxis > 2500) //Right
 80036f0:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <JoyStickControlCartesian+0x88>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d904      	bls.n	8003706 <JoyStickControlCartesian+0x2a>
		{registerFrame[64].U16 = 8;}
 80036fc:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <JoyStickControlCartesian+0x8c>)
 80036fe:	2208      	movs	r2, #8
 8003700:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003704:	e00d      	b.n	8003722 <JoyStickControlCartesian+0x46>

		else if(joystickYaxis < 1400) //Left
 8003706:	4b17      	ldr	r3, [pc, #92]	; (8003764 <JoyStickControlCartesian+0x88>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800370e:	d204      	bcs.n	800371a <JoyStickControlCartesian+0x3e>
		{registerFrame[64].U16 = 4;}
 8003710:	4b15      	ldr	r3, [pc, #84]	; (8003768 <JoyStickControlCartesian+0x8c>)
 8003712:	2204      	movs	r2, #4
 8003714:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003718:	e003      	b.n	8003722 <JoyStickControlCartesian+0x46>

		else{registerFrame[64].U16 = 0;}
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <JoyStickControlCartesian+0x8c>)
 800371c:	2200      	movs	r2, #0
 800371e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		//Y-axis
		if(joystickXaxis < 1400) //Front
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <JoyStickControlCartesian+0x90>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800372a:	d203      	bcs.n	8003734 <JoyStickControlCartesian+0x58>
		{PulseWidthModulation = 3000;}
 800372c:	4b10      	ldr	r3, [pc, #64]	; (8003770 <JoyStickControlCartesian+0x94>)
 800372e:	4a11      	ldr	r2, [pc, #68]	; (8003774 <JoyStickControlCartesian+0x98>)
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e00d      	b.n	8003750 <JoyStickControlCartesian+0x74>

		else if(joystickXaxis > 2500) //Back
 8003734:	4b0d      	ldr	r3, [pc, #52]	; (800376c <JoyStickControlCartesian+0x90>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800373c:	4293      	cmp	r3, r2
 800373e:	d903      	bls.n	8003748 <JoyStickControlCartesian+0x6c>
		{PulseWidthModulation = -3000;}
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <JoyStickControlCartesian+0x94>)
 8003742:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <JoyStickControlCartesian+0x9c>)
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e003      	b.n	8003750 <JoyStickControlCartesian+0x74>

		else{PulseWidthModulation = 0;}
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <JoyStickControlCartesian+0x94>)
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

		MotorDrive(&htim1);
 8003750:	480a      	ldr	r0, [pc, #40]	; (800377c <JoyStickControlCartesian+0xa0>)
 8003752:	f7fe fcaf 	bl	80020b4 <MotorDrive>
	}
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000259 	.word	0x20000259
 8003760:	200009c8 	.word	0x200009c8
 8003764:	200009c4 	.word	0x200009c4
 8003768:	20000f78 	.word	0x20000f78
 800376c:	200009c0 	.word	0x200009c0
 8003770:	2000090c 	.word	0x2000090c
 8003774:	453b8000 	.word	0x453b8000
 8003778:	c53b8000 	.word	0xc53b8000
 800377c:	20000508 	.word	0x20000508

08003780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003780:	b5b0      	push	{r4, r5, r7, lr}
 8003782:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */	HAL_Init();
 8003784:	f001 fbee 	bl	8004f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003788:	f000 f9d4 	bl	8003b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800378c:	f000 fcc0 	bl	8004110 <MX_GPIO_Init>
  MX_DMA_Init();
 8003790:	f000 fc80 	bl	8004094 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003794:	f000 fc52 	bl	800403c <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8003798:	f000 fbb6 	bl	8003f08 <MX_TIM5_Init>
  MX_TIM1_Init();
 800379c:	f000 fac0 	bl	8003d20 <MX_TIM1_Init>
  MX_TIM3_Init();
 80037a0:	f000 fb5e 	bl	8003e60 <MX_TIM3_Init>
  MX_TIM11_Init();
 80037a4:	f000 fbfe 	bl	8003fa4 <MX_TIM11_Init>
  MX_ADC1_Init();
 80037a8:	f000 fa2c 	bl	8003c04 <MX_ADC1_Init>
  MX_I2C1_Init();
 80037ac:	f000 fa8a 	bl	8003cc4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 80037b0:	487d      	ldr	r0, [pc, #500]	; (80039a8 <main+0x228>)
 80037b2:	f005 fc09 	bl	8008fc8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 80037b6:	487d      	ldr	r0, [pc, #500]	; (80039ac <main+0x22c>)
 80037b8:	f005 fbac 	bl	8008f14 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80037bc:	213c      	movs	r1, #60	; 0x3c
 80037be:	487c      	ldr	r0, [pc, #496]	; (80039b0 <main+0x230>)
 80037c0:	f005 fefa 	bl	80095b8 <HAL_TIM_Encoder_Start>

  //eff_write(testMode_cmd);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80037c4:	2100      	movs	r1, #0
 80037c6:	4879      	ldr	r0, [pc, #484]	; (80039ac <main+0x22c>)
 80037c8:	f005 fd2c 	bl	8009224 <HAL_TIM_PWM_Start>

  Controller.Kp = 1100;
 80037cc:	4b79      	ldr	r3, [pc, #484]	; (80039b4 <main+0x234>)
 80037ce:	4a7a      	ldr	r2, [pc, #488]	; (80039b8 <main+0x238>)
 80037d0:	601a      	str	r2, [r3, #0]
  Controller.Ki = 10;
 80037d2:	4b78      	ldr	r3, [pc, #480]	; (80039b4 <main+0x234>)
 80037d4:	4a79      	ldr	r2, [pc, #484]	; (80039bc <main+0x23c>)
 80037d6:	605a      	str	r2, [r3, #4]
  Controller.Kd = 0;
 80037d8:	4b76      	ldr	r3, [pc, #472]	; (80039b4 <main+0x234>)
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	609a      	str	r2, [r3, #8]

  hmodbus.huart = &huart2;
 80037e0:	4b77      	ldr	r3, [pc, #476]	; (80039c0 <main+0x240>)
 80037e2:	4a78      	ldr	r2, [pc, #480]	; (80039c4 <main+0x244>)
 80037e4:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80037e6:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <main+0x240>)
 80037e8:	4a77      	ldr	r2, [pc, #476]	; (80039c8 <main+0x248>)
 80037ea:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80037ec:	4b74      	ldr	r3, [pc, #464]	; (80039c0 <main+0x240>)
 80037ee:	2215      	movs	r2, #21
 80037f0:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =70;
 80037f2:	4b73      	ldr	r3, [pc, #460]	; (80039c0 <main+0x240>)
 80037f4:	2246      	movs	r2, #70	; 0x46
 80037f6:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80037f8:	4974      	ldr	r1, [pc, #464]	; (80039cc <main+0x24c>)
 80037fa:	4871      	ldr	r0, [pc, #452]	; (80039c0 <main+0x240>)
 80037fc:	f7fe fe80 	bl	8002500 <Modbus_init>

  //joy stick--------------------------
  HAL_ADC_Start_DMA(&hadc1, adcRawData, 20);
 8003800:	2214      	movs	r2, #20
 8003802:	4973      	ldr	r1, [pc, #460]	; (80039d0 <main+0x250>)
 8003804:	4873      	ldr	r0, [pc, #460]	; (80039d4 <main+0x254>)
 8003806:	f001 fc63 	bl	80050d0 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint64_t timestamp = 0;
	  if (micros(&htim5) >= timestamp)
 800380a:	4867      	ldr	r0, [pc, #412]	; (80039a8 <main+0x228>)
 800380c:	f7fe f9f0 	bl	8001bf0 <micros>
 8003810:	4b71      	ldr	r3, [pc, #452]	; (80039d8 <main+0x258>)
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	4290      	cmp	r0, r2
 8003818:	eb71 0303 	sbcs.w	r3, r1, r3
 800381c:	d3f5      	bcc.n	800380a <main+0x8a>
	  {
		  timestamp = micros(&htim5) + 2000;
 800381e:	4862      	ldr	r0, [pc, #392]	; (80039a8 <main+0x228>)
 8003820:	f7fe f9e6 	bl	8001bf0 <micros>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	f512 64fa 	adds.w	r4, r2, #2000	; 0x7d0
 800382c:	f143 0500 	adc.w	r5, r3, #0
 8003830:	4b69      	ldr	r3, [pc, #420]	; (80039d8 <main+0x258>)
 8003832:	e9c3 4500 	strd	r4, r5, [r3]

		  SetHome(&htim3, &htim1);
 8003836:	495d      	ldr	r1, [pc, #372]	; (80039ac <main+0x22c>)
 8003838:	485d      	ldr	r0, [pc, #372]	; (80039b0 <main+0x230>)
 800383a:	f7fe fccd 	bl	80021d8 <SetHome>

		  if (EndEffectorSoftResetFlag)
 800383e:	4b67      	ldr	r3, [pc, #412]	; (80039dc <main+0x25c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <main+0xd2>
		  {
			  eff_write(softReset_cmd);
 8003846:	4866      	ldr	r0, [pc, #408]	; (80039e0 <main+0x260>)
 8003848:	f7fe fc06 	bl	8002058 <eff_write>
			  EndEffectorSoftResetFlag = 0;
 800384c:	4b63      	ldr	r3, [pc, #396]	; (80039dc <main+0x25c>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
		  }

		  eff_c = registerFrame[2].U16;
 8003852:	4b5e      	ldr	r3, [pc, #376]	; (80039cc <main+0x24c>)
 8003854:	889a      	ldrh	r2, [r3, #4]
 8003856:	4b63      	ldr	r3, [pc, #396]	; (80039e4 <main+0x264>)
 8003858:	801a      	strh	r2, [r3, #0]
		  if(eff_l != eff_c)
 800385a:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <main+0x268>)
 800385c:	881a      	ldrh	r2, [r3, #0]
 800385e:	4b61      	ldr	r3, [pc, #388]	; (80039e4 <main+0x264>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d002      	beq.n	800386c <main+0xec>
		  {
			  eff_action = 1;
 8003866:	4b61      	ldr	r3, [pc, #388]	; (80039ec <main+0x26c>)
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
		  }

		  switch (registerFrame[1].U16)
 800386c:	4b57      	ldr	r3, [pc, #348]	; (80039cc <main+0x24c>)
 800386e:	885b      	ldrh	r3, [r3, #2]
 8003870:	3b01      	subs	r3, #1
 8003872:	2b0f      	cmp	r3, #15
 8003874:	d836      	bhi.n	80038e4 <main+0x164>
 8003876:	a201      	add	r2, pc, #4	; (adr r2, 800387c <main+0xfc>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	080038bd 	.word	0x080038bd
 8003880:	080038c5 	.word	0x080038c5
 8003884:	080038e5 	.word	0x080038e5
 8003888:	080038cd 	.word	0x080038cd
 800388c:	080038e5 	.word	0x080038e5
 8003890:	080038e5 	.word	0x080038e5
 8003894:	080038e5 	.word	0x080038e5
 8003898:	080038d5 	.word	0x080038d5
 800389c:	080038e5 	.word	0x080038e5
 80038a0:	080038e5 	.word	0x080038e5
 80038a4:	080038e5 	.word	0x080038e5
 80038a8:	080038e5 	.word	0x080038e5
 80038ac:	080038e5 	.word	0x080038e5
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	080038e5 	.word	0x080038e5
 80038b8:	080038dd 	.word	0x080038dd
		  {
		  case 0b00001:
			  SetPickTrayFlag = 1;
 80038bc:	4b4c      	ldr	r3, [pc, #304]	; (80039f0 <main+0x270>)
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]
		  break;
 80038c2:	e00f      	b.n	80038e4 <main+0x164>
		  case 0b00010:
			  SetPlaceTrayFlag = 1;
 80038c4:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <main+0x274>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
		  break;
 80038ca:	e00b      	b.n	80038e4 <main+0x164>
		  case 0b00100:
			  SetHomeFlag = 1;
 80038cc:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <main+0x278>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
		  break;
 80038d2:	e007      	b.n	80038e4 <main+0x164>
		  case 0b01000:
			  RunTrayFlag = 1;
 80038d4:	4b49      	ldr	r3, [pc, #292]	; (80039fc <main+0x27c>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
		  break;
 80038da:	e003      	b.n	80038e4 <main+0x164>
		  case 0b10000:
			  RunPointFlag = 1;
 80038dc:	4b48      	ldr	r3, [pc, #288]	; (8003a00 <main+0x280>)
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
		  break;
 80038e2:	bf00      	nop
		  }

		  EffRegState = registerFrame[2].U16;
 80038e4:	4b39      	ldr	r3, [pc, #228]	; (80039cc <main+0x24c>)
 80038e6:	889a      	ldrh	r2, [r3, #4]
 80038e8:	4b46      	ldr	r3, [pc, #280]	; (8003a04 <main+0x284>)
 80038ea:	801a      	strh	r2, [r3, #0]

		  switch(EffRegState){
 80038ec:	4b45      	ldr	r3, [pc, #276]	; (8003a04 <main+0x284>)
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	2b0a      	cmp	r3, #10
 80038f2:	f200 8094 	bhi.w	8003a1e <main+0x29e>
 80038f6:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <main+0x17c>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003929 	.word	0x08003929
 8003900:	0800393f 	.word	0x0800393f
 8003904:	08003955 	.word	0x08003955
 8003908:	08003a1f 	.word	0x08003a1f
 800390c:	08003a1f 	.word	0x08003a1f
 8003910:	08003a1f 	.word	0x08003a1f
 8003914:	0800396b 	.word	0x0800396b
 8003918:	08003a1f 	.word	0x08003a1f
 800391c:	08003a1f 	.word	0x08003a1f
 8003920:	08003a1f 	.word	0x08003a1f
 8003924:	08003981 	.word	0x08003981
		  case 0b0000:	//everything off
			  if(eff_action == 1){
 8003928:	4b30      	ldr	r3, [pc, #192]	; (80039ec <main+0x26c>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d132      	bne.n	8003996 <main+0x216>
				  EffAllOff_Flag = 1;
 8003930:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <main+0x288>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
				  eff_action = 0;
 8003936:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <main+0x26c>)
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 800393c:	e02b      	b.n	8003996 <main+0x216>
		  case 0b0001:	//laser on
			  if(eff_action == 1){
 800393e:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <main+0x26c>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d129      	bne.n	800399a <main+0x21a>
				  EffLaserOn_Flag = 1;
 8003946:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <main+0x28c>)
 8003948:	2201      	movs	r2, #1
 800394a:	701a      	strb	r2, [r3, #0]
				  eff_action = 0;
 800394c:	4b27      	ldr	r3, [pc, #156]	; (80039ec <main+0x26c>)
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8003952:	e022      	b.n	800399a <main+0x21a>
		  case 0b0010:	//gripper on
			  if(eff_action == 1){
 8003954:	4b25      	ldr	r3, [pc, #148]	; (80039ec <main+0x26c>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d120      	bne.n	800399e <main+0x21e>
				  EffGripperOn_Flag = 1;
 800395c:	4b2c      	ldr	r3, [pc, #176]	; (8003a10 <main+0x290>)
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]
				  eff_action = 0;
 8003962:	4b22      	ldr	r3, [pc, #136]	; (80039ec <main+0x26c>)
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8003968:	e019      	b.n	800399e <main+0x21e>
		  case 0b0110:	//gripper picking
			  if(eff_action == 1){
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <main+0x26c>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d117      	bne.n	80039a2 <main+0x222>
				  EffGripperPick_Flag = 1;
 8003972:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <main+0x294>)
 8003974:	2201      	movs	r2, #1
 8003976:	701a      	strb	r2, [r3, #0]
				  eff_action = 0;
 8003978:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <main+0x26c>)
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 800397e:	e010      	b.n	80039a2 <main+0x222>
		  case 0b1010:	//gripper placing
			  if(eff_action == 1){
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <main+0x26c>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d149      	bne.n	8003a1c <main+0x29c>
				  EffGripperPlace_Flag = 1;
 8003988:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <main+0x298>)
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
				  eff_action = 0;
 800398e:	4b17      	ldr	r3, [pc, #92]	; (80039ec <main+0x26c>)
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8003994:	e042      	b.n	8003a1c <main+0x29c>
			  break;
 8003996:	bf00      	nop
 8003998:	e041      	b.n	8003a1e <main+0x29e>
			  break;
 800399a:	bf00      	nop
 800399c:	e03f      	b.n	8003a1e <main+0x29e>
			  break;
 800399e:	bf00      	nop
 80039a0:	e03d      	b.n	8003a1e <main+0x29e>
			  break;
 80039a2:	bf00      	nop
 80039a4:	e03b      	b.n	8003a1e <main+0x29e>
 80039a6:	bf00      	nop
 80039a8:	20000670 	.word	0x20000670
 80039ac:	20000508 	.word	0x20000508
 80039b0:	200005bc 	.word	0x200005bc
 80039b4:	20000914 	.word	0x20000914
 80039b8:	44898000 	.word	0x44898000
 80039bc:	41200000 	.word	0x41200000
 80039c0:	20000aa0 	.word	0x20000aa0
 80039c4:	200007d8 	.word	0x200007d8
 80039c8:	20000724 	.word	0x20000724
 80039cc:	20000f78 	.word	0x20000f78
 80039d0:	2000093c 	.word	0x2000093c
 80039d4:	200003ac 	.word	0x200003ac
 80039d8:	20001010 	.word	0x20001010
 80039dc:	200002a8 	.word	0x200002a8
 80039e0:	2000025c 	.word	0x2000025c
 80039e4:	20000932 	.word	0x20000932
 80039e8:	20000930 	.word	0x20000930
 80039ec:	2000092f 	.word	0x2000092f
 80039f0:	20001004 	.word	0x20001004
 80039f4:	20001005 	.word	0x20001005
 80039f8:	20001006 	.word	0x20001006
 80039fc:	20001007 	.word	0x20001007
 8003a00:	20001008 	.word	0x20001008
 8003a04:	20000928 	.word	0x20000928
 8003a08:	2000092a 	.word	0x2000092a
 8003a0c:	2000092b 	.word	0x2000092b
 8003a10:	2000092c 	.word	0x2000092c
 8003a14:	2000092d 	.word	0x2000092d
 8003a18:	2000092e 	.word	0x2000092e
			  break;
 8003a1c:	bf00      	nop
		  }


		  if (emer_pushed)
 8003a1e:	4b35      	ldr	r3, [pc, #212]	; (8003af4 <main+0x374>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d031      	beq.n	8003a8a <main+0x30a>
		  {
			  if (!(SetPickTrayFlag || SetPlaceTrayFlag || SetHomeFlag || RunTrayFlag || RunPointFlag || SetHomeYFlag))
 8003a26:	4b34      	ldr	r3, [pc, #208]	; (8003af8 <main+0x378>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d119      	bne.n	8003a62 <main+0x2e2>
 8003a2e:	4b33      	ldr	r3, [pc, #204]	; (8003afc <main+0x37c>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d115      	bne.n	8003a62 <main+0x2e2>
 8003a36:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <main+0x380>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d111      	bne.n	8003a62 <main+0x2e2>
 8003a3e:	4b31      	ldr	r3, [pc, #196]	; (8003b04 <main+0x384>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10d      	bne.n	8003a62 <main+0x2e2>
 8003a46:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <main+0x388>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <main+0x2e2>
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <main+0x38c>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d105      	bne.n	8003a62 <main+0x2e2>
			  {
				  GetJoystickXYaxisValue(&DummyA, &DummyB);
 8003a56:	492e      	ldr	r1, [pc, #184]	; (8003b10 <main+0x390>)
 8003a58:	482e      	ldr	r0, [pc, #184]	; (8003b14 <main+0x394>)
 8003a5a:	f7ff fd03 	bl	8003464 <GetJoystickXYaxisValue>
				  JoyStickControlCartesian();
 8003a5e:	f7ff fe3d 	bl	80036dc <JoyStickControlCartesian>
			  }

			  BaseSystem_SetPickTray();
 8003a62:	f7fd fbf7 	bl	8001254 <BaseSystem_SetPickTray>
			  BaseSystem_SetPlaceTray();
 8003a66:	f7fd fd31 	bl	80014cc <BaseSystem_SetPlaceTray>
			  BaseSystem_SetHome();
 8003a6a:	f7fd fb3f 	bl	80010ec <BaseSystem_SetHome>
			  BaseSystem_RuntrayMode();
 8003a6e:	f7fd fe69 	bl	8001744 <BaseSystem_RuntrayMode>
			  BaseSystem_RunPointMode();
 8003a72:	f7fd fb7d 	bl	8001170 <BaseSystem_RunPointMode>

			  BaseSystem_EffAllOff();
 8003a76:	f7fd ffb5 	bl	80019e4 <BaseSystem_EffAllOff>
			  BaseSystem_EffLaserOn();
 8003a7a:	f7fd ffc5 	bl	8001a08 <BaseSystem_EffLaserOn>
			  BaseSystem_EffGripperOn();
 8003a7e:	f7fd ffd5 	bl	8001a2c <BaseSystem_EffGripperOn>
			  BaseSystem_EffGripperPick();
 8003a82:	f7fd ffe5 	bl	8001a50 <BaseSystem_EffGripperPick>
			  BaseSystem_EffGripperPlace();
 8003a86:	f7fd fffb 	bl	8001a80 <BaseSystem_EffGripperPlace>
		  }


		  static uint8_t j = 0;
		  if (j == 0)
 8003a8a:	4b23      	ldr	r3, [pc, #140]	; (8003b18 <main+0x398>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <main+0x316>
		  {
			  eff_st();
 8003a92:	f7fe f86f 	bl	8001b74 <eff_st>
		  }
		  j = (j + 1) % 250;
 8003a96:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <main+0x398>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	4a1f      	ldr	r2, [pc, #124]	; (8003b1c <main+0x39c>)
 8003a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8003aa2:	1111      	asrs	r1, r2, #4
 8003aa4:	17da      	asrs	r2, r3, #31
 8003aa6:	1a8a      	subs	r2, r1, r2
 8003aa8:	21fa      	movs	r1, #250	; 0xfa
 8003aaa:	fb01 f202 	mul.w	r2, r1, r2
 8003aae:	1a9a      	subs	r2, r3, r2
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <main+0x398>)
 8003ab4:	701a      	strb	r2, [r3, #0]

		  eff_l = eff_c;
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <main+0x3a0>)
 8003ab8:	881a      	ldrh	r2, [r3, #0]
 8003aba:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <main+0x3a4>)
 8003abc:	801a      	strh	r2, [r3, #0]

		  static uint8_t i = 0;
		  if (i == 0)
 8003abe:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <main+0x3a8>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d105      	bne.n	8003ad2 <main+0x352>
		  {
			  registerFrame[0].U16 = 0b0101100101100001; //Ya 22881
 8003ac6:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <main+0x3ac>)
 8003ac8:	f645 1261 	movw	r2, #22881	; 0x5961
 8003acc:	801a      	strh	r2, [r3, #0]
			  Modbus_Protocal_Worker();
 8003ace:	f7fe fda3 	bl	8002618 <Modbus_Protocal_Worker>
		  }
		  i = (i + 1) % 50;
 8003ad2:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <main+0x3a8>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <main+0x3b0>)
 8003ada:	fb82 1203 	smull	r1, r2, r2, r3
 8003ade:	1111      	asrs	r1, r2, #4
 8003ae0:	17da      	asrs	r2, r3, #31
 8003ae2:	1a8a      	subs	r2, r1, r2
 8003ae4:	2132      	movs	r1, #50	; 0x32
 8003ae6:	fb01 f202 	mul.w	r2, r1, r2
 8003aea:	1a9a      	subs	r2, r3, r2
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <main+0x3a8>)
 8003af0:	701a      	strb	r2, [r3, #0]
  {
 8003af2:	e68a      	b.n	800380a <main+0x8a>
 8003af4:	200002a9 	.word	0x200002a9
 8003af8:	20001004 	.word	0x20001004
 8003afc:	20001005 	.word	0x20001005
 8003b00:	20001006 	.word	0x20001006
 8003b04:	20001007 	.word	0x20001007
 8003b08:	20001008 	.word	0x20001008
 8003b0c:	20000259 	.word	0x20000259
 8003b10:	200009d0 	.word	0x200009d0
 8003b14:	200009cc 	.word	0x200009cc
 8003b18:	20001018 	.word	0x20001018
 8003b1c:	10624dd3 	.word	0x10624dd3
 8003b20:	20000932 	.word	0x20000932
 8003b24:	20000930 	.word	0x20000930
 8003b28:	20001019 	.word	0x20001019
 8003b2c:	20000f78 	.word	0x20000f78
 8003b30:	51eb851f 	.word	0x51eb851f

08003b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b094      	sub	sp, #80	; 0x50
 8003b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b3a:	f107 0320 	add.w	r3, r7, #32
 8003b3e:	2230      	movs	r2, #48	; 0x30
 8003b40:	2100      	movs	r1, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f008 f94c 	bl	800bde0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b48:	f107 030c 	add.w	r3, r7, #12
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <SystemClock_Config+0xc8>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	4a26      	ldr	r2, [pc, #152]	; (8003bfc <SystemClock_Config+0xc8>)
 8003b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b66:	6413      	str	r3, [r2, #64]	; 0x40
 8003b68:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <SystemClock_Config+0xc8>)
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b74:	2300      	movs	r3, #0
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <SystemClock_Config+0xcc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <SystemClock_Config+0xcc>)
 8003b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <SystemClock_Config+0xcc>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b90:	2302      	movs	r3, #2
 8003b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b94:	2301      	movs	r3, #1
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b98:	2310      	movs	r3, #16
 8003b9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ba4:	2308      	movs	r3, #8
 8003ba6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003ba8:	2364      	movs	r3, #100	; 0x64
 8003baa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bac:	2302      	movs	r3, #2
 8003bae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bb4:	f107 0320 	add.w	r3, r7, #32
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f004 fcb7 	bl	800852c <HAL_RCC_OscConfig>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003bc4:	f000 fd40 	bl	8004648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bc8:	230f      	movs	r3, #15
 8003bca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003bde:	f107 030c 	add.w	r3, r7, #12
 8003be2:	2103      	movs	r1, #3
 8003be4:	4618      	mov	r0, r3
 8003be6:	f004 ff19 	bl	8008a1c <HAL_RCC_ClockConfig>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003bf0:	f000 fd2a 	bl	8004648 <Error_Handler>
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3750      	adds	r7, #80	; 0x50
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40007000 	.word	0x40007000

08003c04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
//#define break while(1){}
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003c16:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c18:	4a28      	ldr	r2, [pc, #160]	; (8003cbc <MX_ADC1_Init+0xb8>)
 8003c1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c1c:	4b26      	ldr	r3, [pc, #152]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c24:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003c30:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c44:	4b1c      	ldr	r3, [pc, #112]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c46:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <MX_ADC1_Init+0xbc>)
 8003c48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003c50:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c52:	2202      	movs	r2, #2
 8003c54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c5e:	4b16      	ldr	r3, [pc, #88]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c64:	4814      	ldr	r0, [pc, #80]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c66:	f001 f9ef 	bl	8005048 <HAL_ADC_Init>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003c70:	f000 fcea 	bl	8004648 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c80:	463b      	mov	r3, r7
 8003c82:	4619      	mov	r1, r3
 8003c84:	480c      	ldr	r0, [pc, #48]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003c86:	f001 fb31 	bl	80052ec <HAL_ADC_ConfigChannel>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003c90:	f000 fcda 	bl	8004648 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4805      	ldr	r0, [pc, #20]	; (8003cb8 <MX_ADC1_Init+0xb4>)
 8003ca2:	f001 fb23 	bl	80052ec <HAL_ADC_ConfigChannel>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003cac:	f000 fccc 	bl	8004648 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	200003ac 	.word	0x200003ac
 8003cbc:	40012000 	.word	0x40012000
 8003cc0:	0f000001 	.word	0x0f000001

08003cc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003cc8:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <MX_I2C1_Init+0x50>)
 8003cca:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <MX_I2C1_Init+0x54>)
 8003ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003cce:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <MX_I2C1_Init+0x50>)
 8003cd0:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <MX_I2C1_Init+0x58>)
 8003cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <MX_I2C1_Init+0x50>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003cda:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <MX_I2C1_Init+0x50>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <MX_I2C1_Init+0x50>)
 8003ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ce6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <MX_I2C1_Init+0x50>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <MX_I2C1_Init+0x50>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cf4:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <MX_I2C1_Init+0x50>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <MX_I2C1_Init+0x50>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d00:	4804      	ldr	r0, [pc, #16]	; (8003d14 <MX_I2C1_Init+0x50>)
 8003d02:	f002 fc9f 	bl	8006644 <HAL_I2C_Init>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003d0c:	f000 fc9c 	bl	8004648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d10:	bf00      	nop
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000454 	.word	0x20000454
 8003d18:	40005400 	.word	0x40005400
 8003d1c:	000186a0 	.word	0x000186a0

08003d20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b096      	sub	sp, #88	; 0x58
 8003d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	609a      	str	r2, [r3, #8]
 8003d4a:	60da      	str	r2, [r3, #12]
 8003d4c:	611a      	str	r2, [r3, #16]
 8003d4e:	615a      	str	r2, [r3, #20]
 8003d50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	2220      	movs	r2, #32
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f008 f841 	bl	800bde0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d5e:	4b3e      	ldr	r3, [pc, #248]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003d60:	4a3e      	ldr	r2, [pc, #248]	; (8003e5c <MX_TIM1_Init+0x13c>)
 8003d62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d64:	4b3c      	ldr	r3, [pc, #240]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8003d70:	4b39      	ldr	r3, [pc, #228]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003d72:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003d76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d78:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d7e:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d84:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d8a:	4833      	ldr	r0, [pc, #204]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003d8c:	f005 f866 	bl	8008e5c <HAL_TIM_Base_Init>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003d96:	f000 fc57 	bl	8004648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003da0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003da4:	4619      	mov	r1, r3
 8003da6:	482c      	ldr	r0, [pc, #176]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003da8:	f005 feda 	bl	8009b60 <HAL_TIM_ConfigClockSource>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003db2:	f000 fc49 	bl	8004648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003db6:	4828      	ldr	r0, [pc, #160]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003db8:	f005 f9ce 	bl	8009158 <HAL_TIM_PWM_Init>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003dc2:	f000 fc41 	bl	8004648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003dce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4820      	ldr	r0, [pc, #128]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003dd6:	f006 fc53 	bl	800a680 <HAL_TIMEx_MasterConfigSynchronization>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003de0:	f000 fc32 	bl	8004648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003de4:	2360      	movs	r3, #96	; 0x60
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dec:	2300      	movs	r3, #0
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003df0:	2300      	movs	r3, #0
 8003df2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e04:	2200      	movs	r2, #0
 8003e06:	4619      	mov	r1, r3
 8003e08:	4813      	ldr	r0, [pc, #76]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003e0a:	f005 fde7 	bl	80099dc <HAL_TIM_PWM_ConfigChannel>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003e14:	f000 fc18 	bl	8004648 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e36:	1d3b      	adds	r3, r7, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4807      	ldr	r0, [pc, #28]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003e3c:	f006 fc8e 	bl	800a75c <HAL_TIMEx_ConfigBreakDeadTime>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003e46:	f000 fbff 	bl	8004648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e4a:	4803      	ldr	r0, [pc, #12]	; (8003e58 <MX_TIM1_Init+0x138>)
 8003e4c:	f000 fde0 	bl	8004a10 <HAL_TIM_MspPostInit>

}
 8003e50:	bf00      	nop
 8003e52:	3758      	adds	r7, #88	; 0x58
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000508 	.word	0x20000508
 8003e5c:	40010000 	.word	0x40010000

08003e60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08c      	sub	sp, #48	; 0x30
 8003e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e66:	f107 030c 	add.w	r3, r7, #12
 8003e6a:	2224      	movs	r2, #36	; 0x24
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f007 ffb6 	bl	800bde0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e74:	1d3b      	adds	r3, r7, #4
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e7c:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <MX_TIM3_Init+0xa0>)
 8003e7e:	4a21      	ldr	r2, [pc, #132]	; (8003f04 <MX_TIM3_Init+0xa4>)
 8003e80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e82:	4b1f      	ldr	r3, [pc, #124]	; (8003f00 <MX_TIM3_Init+0xa0>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e88:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <MX_TIM3_Init+0xa0>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD - 1;
 8003e8e:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <MX_TIM3_Init+0xa0>)
 8003e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e96:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <MX_TIM3_Init+0xa0>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e9c:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <MX_TIM3_Init+0xa0>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003ec6:	f107 030c 	add.w	r3, r7, #12
 8003eca:	4619      	mov	r1, r3
 8003ecc:	480c      	ldr	r0, [pc, #48]	; (8003f00 <MX_TIM3_Init+0xa0>)
 8003ece:	f005 fabf 	bl	8009450 <HAL_TIM_Encoder_Init>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003ed8:	f000 fbb6 	bl	8004648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003edc:	2300      	movs	r3, #0
 8003ede:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ee4:	1d3b      	adds	r3, r7, #4
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4805      	ldr	r0, [pc, #20]	; (8003f00 <MX_TIM3_Init+0xa0>)
 8003eea:	f006 fbc9 	bl	800a680 <HAL_TIMEx_MasterConfigSynchronization>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003ef4:	f000 fba8 	bl	8004648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ef8:	bf00      	nop
 8003efa:	3730      	adds	r7, #48	; 0x30
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200005bc 	.word	0x200005bc
 8003f04:	40000400 	.word	0x40000400

08003f08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f0e:	f107 0308 	add.w	r3, r7, #8
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	609a      	str	r2, [r3, #8]
 8003f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f1c:	463b      	mov	r3, r7
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003f24:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <MX_TIM5_Init+0x90>)
 8003f26:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <MX_TIM5_Init+0x94>)
 8003f28:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <MX_TIM5_Init+0x90>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <MX_TIM5_Init+0x90>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8003f36:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <MX_TIM5_Init+0x90>)
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <MX_TIM5_Init+0x98>)
 8003f3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f3c:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <MX_TIM5_Init+0x90>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f42:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <MX_TIM5_Init+0x90>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003f48:	4813      	ldr	r0, [pc, #76]	; (8003f98 <MX_TIM5_Init+0x90>)
 8003f4a:	f004 ff87 	bl	8008e5c <HAL_TIM_Base_Init>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8003f54:	f000 fb78 	bl	8004648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003f5e:	f107 0308 	add.w	r3, r7, #8
 8003f62:	4619      	mov	r1, r3
 8003f64:	480c      	ldr	r0, [pc, #48]	; (8003f98 <MX_TIM5_Init+0x90>)
 8003f66:	f005 fdfb 	bl	8009b60 <HAL_TIM_ConfigClockSource>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8003f70:	f000 fb6a 	bl	8004648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f74:	2300      	movs	r3, #0
 8003f76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003f7c:	463b      	mov	r3, r7
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4805      	ldr	r0, [pc, #20]	; (8003f98 <MX_TIM5_Init+0x90>)
 8003f82:	f006 fb7d 	bl	800a680 <HAL_TIMEx_MasterConfigSynchronization>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8003f8c:	f000 fb5c 	bl	8004648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003f90:	bf00      	nop
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000670 	.word	0x20000670
 8003f9c:	40000c00 	.word	0x40000c00
 8003fa0:	0001869f 	.word	0x0001869f

08003fa4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
 8003fb8:	615a      	str	r2, [r3, #20]
 8003fba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <MX_TIM11_Init+0x90>)
 8003fbe:	4a1e      	ldr	r2, [pc, #120]	; (8004038 <MX_TIM11_Init+0x94>)
 8003fc0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003fc2:	4b1c      	ldr	r3, [pc, #112]	; (8004034 <MX_TIM11_Init+0x90>)
 8003fc4:	2263      	movs	r2, #99	; 0x63
 8003fc6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <MX_TIM11_Init+0x90>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <MX_TIM11_Init+0x90>)
 8003fd0:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8003fd4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <MX_TIM11_Init+0x90>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fdc:	4b15      	ldr	r3, [pc, #84]	; (8004034 <MX_TIM11_Init+0x90>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003fe2:	4814      	ldr	r0, [pc, #80]	; (8004034 <MX_TIM11_Init+0x90>)
 8003fe4:	f004 ff3a 	bl	8008e5c <HAL_TIM_Base_Init>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003fee:	f000 fb2b 	bl	8004648 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8003ff2:	4810      	ldr	r0, [pc, #64]	; (8004034 <MX_TIM11_Init+0x90>)
 8003ff4:	f005 f84a 	bl	800908c <HAL_TIM_OC_Init>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003ffe:	f000 fb23 	bl	8004648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004002:	2310      	movs	r3, #16
 8004004:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8004006:	f240 5399 	movw	r3, #1433	; 0x599
 800400a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	2200      	movs	r2, #0
 8004018:	4619      	mov	r1, r3
 800401a:	4806      	ldr	r0, [pc, #24]	; (8004034 <MX_TIM11_Init+0x90>)
 800401c:	f005 fc82 	bl	8009924 <HAL_TIM_OC_ConfigChannel>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8004026:	f000 fb0f 	bl	8004648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800402a:	bf00      	nop
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000724 	.word	0x20000724
 8004038:	40014800 	.word	0x40014800

0800403c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004040:	4b12      	ldr	r3, [pc, #72]	; (800408c <MX_USART2_UART_Init+0x50>)
 8004042:	4a13      	ldr	r2, [pc, #76]	; (8004090 <MX_USART2_UART_Init+0x54>)
 8004044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8004046:	4b11      	ldr	r3, [pc, #68]	; (800408c <MX_USART2_UART_Init+0x50>)
 8004048:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800404c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <MX_USART2_UART_Init+0x50>)
 8004050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004054:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004056:	4b0d      	ldr	r3, [pc, #52]	; (800408c <MX_USART2_UART_Init+0x50>)
 8004058:	2200      	movs	r2, #0
 800405a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <MX_USART2_UART_Init+0x50>)
 800405e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <MX_USART2_UART_Init+0x50>)
 8004066:	220c      	movs	r2, #12
 8004068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <MX_USART2_UART_Init+0x50>)
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <MX_USART2_UART_Init+0x50>)
 8004072:	2200      	movs	r2, #0
 8004074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004076:	4805      	ldr	r0, [pc, #20]	; (800408c <MX_USART2_UART_Init+0x50>)
 8004078:	f006 fbe0 	bl	800a83c <HAL_UART_Init>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8004082:	f000 fae1 	bl	8004648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200007d8 	.word	0x200007d8
 8004090:	40004400 	.word	0x40004400

08004094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	4b1b      	ldr	r3, [pc, #108]	; (800410c <MX_DMA_Init+0x78>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	4a1a      	ldr	r2, [pc, #104]	; (800410c <MX_DMA_Init+0x78>)
 80040a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040a8:	6313      	str	r3, [r2, #48]	; 0x30
 80040aa:	4b18      	ldr	r3, [pc, #96]	; (800410c <MX_DMA_Init+0x78>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <MX_DMA_Init+0x78>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	4a13      	ldr	r2, [pc, #76]	; (800410c <MX_DMA_Init+0x78>)
 80040c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040c4:	6313      	str	r3, [r2, #48]	; 0x30
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <MX_DMA_Init+0x78>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80040d2:	2200      	movs	r2, #0
 80040d4:	2100      	movs	r1, #0
 80040d6:	200b      	movs	r0, #11
 80040d8:	f001 fc93 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80040dc:	200b      	movs	r0, #11
 80040de:	f001 fcac 	bl	8005a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80040e2:	2200      	movs	r2, #0
 80040e4:	2100      	movs	r1, #0
 80040e6:	2011      	movs	r0, #17
 80040e8:	f001 fc8b 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80040ec:	2011      	movs	r0, #17
 80040ee:	f001 fca4 	bl	8005a3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	2038      	movs	r0, #56	; 0x38
 80040f8:	f001 fc83 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80040fc:	2038      	movs	r0, #56	; 0x38
 80040fe:	f001 fc9c 	bl	8005a3a <HAL_NVIC_EnableIRQ>

}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800

08004110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08a      	sub	sp, #40	; 0x28
 8004114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004116:	f107 0314 	add.w	r3, r7, #20
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	605a      	str	r2, [r3, #4]
 8004120:	609a      	str	r2, [r3, #8]
 8004122:	60da      	str	r2, [r3, #12]
 8004124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	4b63      	ldr	r3, [pc, #396]	; (80042b8 <MX_GPIO_Init+0x1a8>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	4a62      	ldr	r2, [pc, #392]	; (80042b8 <MX_GPIO_Init+0x1a8>)
 8004130:	f043 0304 	orr.w	r3, r3, #4
 8004134:	6313      	str	r3, [r2, #48]	; 0x30
 8004136:	4b60      	ldr	r3, [pc, #384]	; (80042b8 <MX_GPIO_Init+0x1a8>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	4b5c      	ldr	r3, [pc, #368]	; (80042b8 <MX_GPIO_Init+0x1a8>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	4a5b      	ldr	r2, [pc, #364]	; (80042b8 <MX_GPIO_Init+0x1a8>)
 800414c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004150:	6313      	str	r3, [r2, #48]	; 0x30
 8004152:	4b59      	ldr	r3, [pc, #356]	; (80042b8 <MX_GPIO_Init+0x1a8>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	4b55      	ldr	r3, [pc, #340]	; (80042b8 <MX_GPIO_Init+0x1a8>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	4a54      	ldr	r2, [pc, #336]	; (80042b8 <MX_GPIO_Init+0x1a8>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	6313      	str	r3, [r2, #48]	; 0x30
 800416e:	4b52      	ldr	r3, [pc, #328]	; (80042b8 <MX_GPIO_Init+0x1a8>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	4b4e      	ldr	r3, [pc, #312]	; (80042b8 <MX_GPIO_Init+0x1a8>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	4a4d      	ldr	r2, [pc, #308]	; (80042b8 <MX_GPIO_Init+0x1a8>)
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	6313      	str	r3, [r2, #48]	; 0x30
 800418a:	4b4b      	ldr	r3, [pc, #300]	; (80042b8 <MX_GPIO_Init+0x1a8>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8004196:	2200      	movs	r2, #0
 8004198:	f44f 6102 	mov.w	r1, #2080	; 0x820
 800419c:	4847      	ldr	r0, [pc, #284]	; (80042bc <MX_GPIO_Init+0x1ac>)
 800419e:	f002 fa1f 	bl	80065e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80041a2:	2200      	movs	r2, #0
 80041a4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80041a8:	4845      	ldr	r0, [pc, #276]	; (80042c0 <MX_GPIO_Init+0x1b0>)
 80041aa:	f002 fa19 	bl	80065e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80041ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80041b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80041be:	f107 0314 	add.w	r3, r7, #20
 80041c2:	4619      	mov	r1, r3
 80041c4:	483f      	ldr	r0, [pc, #252]	; (80042c4 <MX_GPIO_Init+0x1b4>)
 80041c6:	f002 f86f 	bl	80062a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80041ca:	2310      	movs	r3, #16
 80041cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d6:	f107 0314 	add.w	r3, r7, #20
 80041da:	4619      	mov	r1, r3
 80041dc:	4837      	ldr	r0, [pc, #220]	; (80042bc <MX_GPIO_Init+0x1ac>)
 80041de:	f002 f863 	bl	80062a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 80041e2:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80041e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e8:	2301      	movs	r3, #1
 80041ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f0:	2300      	movs	r3, #0
 80041f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	4619      	mov	r1, r3
 80041fa:	4830      	ldr	r0, [pc, #192]	; (80042bc <MX_GPIO_Init+0x1ac>)
 80041fc:	f002 f854 	bl	80062a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8004200:	2306      	movs	r3, #6
 8004202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004204:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800420a:	2301      	movs	r3, #1
 800420c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420e:	f107 0314 	add.w	r3, r7, #20
 8004212:	4619      	mov	r1, r3
 8004214:	482a      	ldr	r0, [pc, #168]	; (80042c0 <MX_GPIO_Init+0x1b0>)
 8004216:	f002 f847 	bl	80062a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800421a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800421e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004220:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8004224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	4619      	mov	r1, r3
 8004230:	4823      	ldr	r0, [pc, #140]	; (80042c0 <MX_GPIO_Init+0x1b0>)
 8004232:	f002 f839 	bl	80062a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004236:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800423a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800423c:	2301      	movs	r3, #1
 800423e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004244:	2300      	movs	r3, #0
 8004246:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004248:	f107 0314 	add.w	r3, r7, #20
 800424c:	4619      	mov	r1, r3
 800424e:	481c      	ldr	r0, [pc, #112]	; (80042c0 <MX_GPIO_Init+0x1b0>)
 8004250:	f002 f82a 	bl	80062a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800425a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800425e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004260:	2301      	movs	r3, #1
 8004262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004264:	f107 0314 	add.w	r3, r7, #20
 8004268:	4619      	mov	r1, r3
 800426a:	4814      	ldr	r0, [pc, #80]	; (80042bc <MX_GPIO_Init+0x1ac>)
 800426c:	f002 f81c 	bl	80062a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004270:	2200      	movs	r2, #0
 8004272:	2100      	movs	r1, #0
 8004274:	2007      	movs	r0, #7
 8004276:	f001 fbc4 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800427a:	2007      	movs	r0, #7
 800427c:	f001 fbdd 	bl	8005a3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004280:	2200      	movs	r2, #0
 8004282:	2100      	movs	r1, #0
 8004284:	2008      	movs	r0, #8
 8004286:	f001 fbbc 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800428a:	2008      	movs	r0, #8
 800428c:	f001 fbd5 	bl	8005a3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004290:	2200      	movs	r2, #0
 8004292:	2100      	movs	r1, #0
 8004294:	2017      	movs	r0, #23
 8004296:	f001 fbb4 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800429a:	2017      	movs	r0, #23
 800429c:	f001 fbcd 	bl	8005a3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80042a0:	2200      	movs	r2, #0
 80042a2:	2100      	movs	r1, #0
 80042a4:	2028      	movs	r0, #40	; 0x28
 80042a6:	f001 fbac 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80042aa:	2028      	movs	r0, #40	; 0x28
 80042ac:	f001 fbc5 	bl	8005a3a <HAL_NVIC_EnableIRQ>

}
 80042b0:	bf00      	nop
 80042b2:	3728      	adds	r7, #40	; 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40020000 	.word	0x40020000
 80042c0:	40020400 	.word	0x40020400
 80042c4:	40020800 	.word	0x40020800

080042c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b5b0      	push	{r4, r5, r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a13      	ldr	r2, [pc, #76]	; (8004320 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d11f      	bne.n	8004318 <HAL_TIM_PeriodElapsedCallback+0x50>
//		}
//		if(writeflag_ls == 9){
//			eff_st();
//			writeflag_ls = 0;
//		}
		_micros += 1000;
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 80042e2:	f143 0500 	adc.w	r5, r3, #0
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80042e8:	e9c3 4500 	strd	r4, r5, [r3]

		QEIEncoderPositionVelocity_Update(&htim3, &htim5);
 80042ec:	490c      	ldr	r1, [pc, #48]	; (8004320 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80042ee:	480e      	ldr	r0, [pc, #56]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80042f0:	f7fd fcb6 	bl	8001c60 <QEIEncoderPositionVelocity_Update>
        check_pe();
 80042f4:	f7fd fe82 	bl	8001ffc <check_pe>
        SetHome(&htim3, &htim1);
 80042f8:	490c      	ldr	r1, [pc, #48]	; (800432c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80042fa:	480b      	ldr	r0, [pc, #44]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80042fc:	f7fd ff6c 	bl	80021d8 <SetHome>
        ControllerState();
 8004300:	f000 f81a 	bl	8004338 <ControllerState>

		if (RunTrayFlag)
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			registerFrame[0].U16 = 0b0101100101100001; //Ya 22881
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800430e:	f645 1261 	movw	r2, #22881	; 0x5961
 8004312:	801a      	strh	r2, [r3, #0]
			Modbus_Protocal_Worker();
 8004314:	f7fe f980 	bl	8002618 <Modbus_Protocal_Worker>
		}
	}
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bdb0      	pop	{r4, r5, r7, pc}
 8004320:	20000670 	.word	0x20000670
 8004324:	200008e8 	.word	0x200008e8
 8004328:	200005bc 	.word	0x200005bc
 800432c:	20000508 	.word	0x20000508
 8004330:	20001007 	.word	0x20001007
 8004334:	20000f78 	.word	0x20000f78

08004338 <ControllerState>:

void ControllerState()
{
 8004338:	b5b0      	push	{r4, r5, r7, lr}
 800433a:	af00      	add	r7, sp, #0
	if (SetHomeYFlag == 0 && ControllerFlag)
 800433c:	4baa      	ldr	r3, [pc, #680]	; (80045e8 <ControllerState+0x2b0>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 8145 	bne.w	80045d0 <ControllerState+0x298>
 8004346:	4ba9      	ldr	r3, [pc, #676]	; (80045ec <ControllerState+0x2b4>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8140 	beq.w	80045d0 <ControllerState+0x298>
	{
		switch(state)
 8004350:	4ba7      	ldr	r3, [pc, #668]	; (80045f0 <ControllerState+0x2b8>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <ControllerState+0x26>
 8004358:	2b01      	cmp	r3, #1
 800435a:	d046      	beq.n	80043ea <ControllerState+0xb2>
 800435c:	e134      	b.n	80045c8 <ControllerState+0x290>
		{
		case Idle:
			PulseWidthModulation = 0;
 800435e:	4ba5      	ldr	r3, [pc, #660]	; (80045f4 <ControllerState+0x2bc>)
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
			MotorDrive(&htim1);
 8004366:	48a4      	ldr	r0, [pc, #656]	; (80045f8 <ControllerState+0x2c0>)
 8004368:	f7fd fea4 	bl	80020b4 <MotorDrive>
			Pi = QEIData.position;
 800436c:	4ba3      	ldr	r3, [pc, #652]	; (80045fc <ControllerState+0x2c4>)
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	4aa3      	ldr	r2, [pc, #652]	; (8004600 <ControllerState+0x2c8>)
 8004372:	6013      	str	r3, [r2, #0]

			if(Pf != Pf_last || emerpass)
 8004374:	4ba3      	ldr	r3, [pc, #652]	; (8004604 <ControllerState+0x2cc>)
 8004376:	ed93 7a00 	vldr	s14, [r3]
 800437a:	4ba3      	ldr	r3, [pc, #652]	; (8004608 <ControllerState+0x2d0>)
 800437c:	edd3 7a00 	vldr	s15, [r3]
 8004380:	eeb4 7a67 	vcmp.f32	s14, s15
 8004384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004388:	d104      	bne.n	8004394 <ControllerState+0x5c>
 800438a:	4ba0      	ldr	r3, [pc, #640]	; (800460c <ControllerState+0x2d4>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8117 	beq.w	80045c2 <ControllerState+0x28a>
			{
				t_traj = 0;
 8004394:	499e      	ldr	r1, [pc, #632]	; (8004610 <ControllerState+0x2d8>)
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	e9c1 2300 	strd	r2, r3, [r1]
				SteadyStateFlag = 0;
 80043a2:	4b9c      	ldr	r3, [pc, #624]	; (8004614 <ControllerState+0x2dc>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
				QuinticTraj_PreCal(Pi, Pf, &traj);
 80043a8:	4b95      	ldr	r3, [pc, #596]	; (8004600 <ControllerState+0x2c8>)
 80043aa:	edd3 7a00 	vldr	s15, [r3]
 80043ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043b2:	ee17 3a90 	vmov	r3, s15
 80043b6:	b21b      	sxth	r3, r3
 80043b8:	4a92      	ldr	r2, [pc, #584]	; (8004604 <ControllerState+0x2cc>)
 80043ba:	edd2 7a00 	vldr	s15, [r2]
 80043be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043c2:	ee17 2a90 	vmov	r2, s15
 80043c6:	b211      	sxth	r1, r2
 80043c8:	4a93      	ldr	r2, [pc, #588]	; (8004618 <ControllerState+0x2e0>)
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe fb9c 	bl	8002b08 <QuinticTraj_PreCal>
				state = Follow;
 80043d0:	4b87      	ldr	r3, [pc, #540]	; (80045f0 <ControllerState+0x2b8>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80043d6:	2201      	movs	r2, #1
 80043d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043dc:	488f      	ldr	r0, [pc, #572]	; (800461c <ControllerState+0x2e4>)
 80043de:	f002 f8ff 	bl	80065e0 <HAL_GPIO_WritePin>
				emerpass = 0;
 80043e2:	4b8a      	ldr	r3, [pc, #552]	; (800460c <ControllerState+0x2d4>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
			}
		break;
 80043e8:	e0eb      	b.n	80045c2 <ControllerState+0x28a>

		case Follow:
			t_traj = t_traj + 1000;
 80043ea:	4b89      	ldr	r3, [pc, #548]	; (8004610 <ControllerState+0x2d8>)
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f512 707a 	adds.w	r0, r2, #1000	; 0x3e8
 80043f4:	f143 0100 	adc.w	r1, r3, #0
 80043f8:	4b85      	ldr	r3, [pc, #532]	; (8004610 <ControllerState+0x2d8>)
 80043fa:	e9c3 0100 	strd	r0, r1, [r3]
			if (t_traj <= traj.t_total * 1000000)
 80043fe:	4b84      	ldr	r3, [pc, #528]	; (8004610 <ControllerState+0x2d8>)
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	f7fc fc6a 	bl	8000ce0 <__aeabi_ul2f>
 800440c:	ee06 0a90 	vmov	s13, r0
 8004410:	4b81      	ldr	r3, [pc, #516]	; (8004618 <ControllerState+0x2e0>)
 8004412:	edd3 7a00 	vldr	s15, [r3]
 8004416:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8004620 <ControllerState+0x2e8>
 800441a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800441e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004426:	d817      	bhi.n	8004458 <ControllerState+0x120>
			{
				QuinticTraj_GetState(Pi, Pf, &traj, t_traj);
 8004428:	4b75      	ldr	r3, [pc, #468]	; (8004600 <ControllerState+0x2c8>)
 800442a:	edd3 7a00 	vldr	s15, [r3]
 800442e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004432:	ee17 3a90 	vmov	r3, s15
 8004436:	b218      	sxth	r0, r3
 8004438:	4b72      	ldr	r3, [pc, #456]	; (8004604 <ControllerState+0x2cc>)
 800443a:	edd3 7a00 	vldr	s15, [r3]
 800443e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004442:	ee17 3a90 	vmov	r3, s15
 8004446:	b219      	sxth	r1, r3
 8004448:	4b71      	ldr	r3, [pc, #452]	; (8004610 <ControllerState+0x2d8>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	4613      	mov	r3, r2
 8004450:	4a71      	ldr	r2, [pc, #452]	; (8004618 <ControllerState+0x2e0>)
 8004452:	f7fe fbf5 	bl	8002c40 <QuinticTraj_GetState>
 8004456:	e003      	b.n	8004460 <ControllerState+0x128>
			}
			else
			{
				q_des = Pf;
 8004458:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <ControllerState+0x2cc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a71      	ldr	r2, [pc, #452]	; (8004624 <ControllerState+0x2ec>)
 800445e:	6013      	str	r3, [r2, #0]
			}

			PositionControlVelocityForm(&Controller);
 8004460:	4871      	ldr	r0, [pc, #452]	; (8004628 <ControllerState+0x2f0>)
 8004462:	f7fd fb25 	bl	8001ab0 <PositionControlVelocityForm>
			MotorDrive(&htim1);
 8004466:	4864      	ldr	r0, [pc, #400]	; (80045f8 <ControllerState+0x2c0>)
 8004468:	f7fd fe24 	bl	80020b4 <MotorDrive>

			if(QEIData.position > max_pos)
 800446c:	4b63      	ldr	r3, [pc, #396]	; (80045fc <ControllerState+0x2c4>)
 800446e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004472:	4b6e      	ldr	r3, [pc, #440]	; (800462c <ControllerState+0x2f4>)
 8004474:	edd3 7a00 	vldr	s15, [r3]
 8004478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800447c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004480:	dd03      	ble.n	800448a <ControllerState+0x152>
			{
				max_pos = QEIData.position;
 8004482:	4b5e      	ldr	r3, [pc, #376]	; (80045fc <ControllerState+0x2c4>)
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	4a69      	ldr	r2, [pc, #420]	; (800462c <ControllerState+0x2f4>)
 8004488:	6013      	str	r3, [r2, #0]
			}

			if (((t_traj > traj.t_total * 1000000) && (0.15 > fabs(q_des - QEIData.position)) && (SteadyStateFlag == 0)) || P_disallow || N_disallow)
 800448a:	4b61      	ldr	r3, [pc, #388]	; (8004610 <ControllerState+0x2d8>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	4610      	mov	r0, r2
 8004492:	4619      	mov	r1, r3
 8004494:	f7fc fc24 	bl	8000ce0 <__aeabi_ul2f>
 8004498:	ee06 0a90 	vmov	s13, r0
 800449c:	4b5e      	ldr	r3, [pc, #376]	; (8004618 <ControllerState+0x2e0>)
 800449e:	edd3 7a00 	vldr	s15, [r3]
 80044a2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004620 <ControllerState+0x2e8>
 80044a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80044ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b2:	dd19      	ble.n	80044e8 <ControllerState+0x1b0>
 80044b4:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <ControllerState+0x2ec>)
 80044b6:	ed93 7a00 	vldr	s14, [r3]
 80044ba:	4b50      	ldr	r3, [pc, #320]	; (80045fc <ControllerState+0x2c4>)
 80044bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80044c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044c4:	eef0 7ae7 	vabs.f32	s15, s15
 80044c8:	ee17 0a90 	vmov	r0, s15
 80044cc:	f7fb ffe8 	bl	80004a0 <__aeabi_f2d>
 80044d0:	a341      	add	r3, pc, #260	; (adr r3, 80045d8 <ControllerState+0x2a0>)
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7fc faad 	bl	8000a34 <__aeabi_dcmplt>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <ControllerState+0x1b0>
 80044e0:	4b4c      	ldr	r3, [pc, #304]	; (8004614 <ControllerState+0x2dc>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d007      	beq.n	80044f8 <ControllerState+0x1c0>
 80044e8:	4b51      	ldr	r3, [pc, #324]	; (8004630 <ControllerState+0x2f8>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <ControllerState+0x1c0>
 80044f0:	4b50      	ldr	r3, [pc, #320]	; (8004634 <ControllerState+0x2fc>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00c      	beq.n	8004512 <ControllerState+0x1da>
			{
				t_total_actual = t_traj + 500000;
 80044f8:	4b45      	ldr	r3, [pc, #276]	; (8004610 <ControllerState+0x2d8>)
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	494e      	ldr	r1, [pc, #312]	; (8004638 <ControllerState+0x300>)
 8004500:	1854      	adds	r4, r2, r1
 8004502:	f143 0500 	adc.w	r5, r3, #0
 8004506:	4b4d      	ldr	r3, [pc, #308]	; (800463c <ControllerState+0x304>)
 8004508:	e9c3 4500 	strd	r4, r5, [r3]
				SteadyStateFlag = 1;
 800450c:	4b41      	ldr	r3, [pc, #260]	; (8004614 <ControllerState+0x2dc>)
 800450e:	2201      	movs	r2, #1
 8004510:	701a      	strb	r2, [r3, #0]
			}

			if (SteadyStateFlag && (t_traj > t_total_actual) && (0.05 > fabs(q_des - QEIData.position)) || (P_disallow) || (N_disallow))
 8004512:	4b40      	ldr	r3, [pc, #256]	; (8004614 <ControllerState+0x2dc>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01f      	beq.n	800455a <ControllerState+0x222>
 800451a:	4b3d      	ldr	r3, [pc, #244]	; (8004610 <ControllerState+0x2d8>)
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	4946      	ldr	r1, [pc, #280]	; (800463c <ControllerState+0x304>)
 8004522:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004526:	4290      	cmp	r0, r2
 8004528:	eb71 0303 	sbcs.w	r3, r1, r3
 800452c:	d215      	bcs.n	800455a <ControllerState+0x222>
 800452e:	4b3d      	ldr	r3, [pc, #244]	; (8004624 <ControllerState+0x2ec>)
 8004530:	ed93 7a00 	vldr	s14, [r3]
 8004534:	4b31      	ldr	r3, [pc, #196]	; (80045fc <ControllerState+0x2c4>)
 8004536:	edd3 7a04 	vldr	s15, [r3, #16]
 800453a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800453e:	eef0 7ae7 	vabs.f32	s15, s15
 8004542:	ee17 0a90 	vmov	r0, s15
 8004546:	f7fb ffab 	bl	80004a0 <__aeabi_f2d>
 800454a:	a325      	add	r3, pc, #148	; (adr r3, 80045e0 <ControllerState+0x2a8>)
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f7fc fa70 	bl	8000a34 <__aeabi_dcmplt>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d107      	bne.n	800456a <ControllerState+0x232>
 800455a:	4b35      	ldr	r3, [pc, #212]	; (8004630 <ControllerState+0x2f8>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <ControllerState+0x232>
 8004562:	4b34      	ldr	r3, [pc, #208]	; (8004634 <ControllerState+0x2fc>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d02d      	beq.n	80045c6 <ControllerState+0x28e>
			{
				PulseWidthModulation = 0;
 800456a:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <ControllerState+0x2bc>)
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
				MotorDrive(&htim1);
 8004572:	4821      	ldr	r0, [pc, #132]	; (80045f8 <ControllerState+0x2c0>)
 8004574:	f7fd fd9e 	bl	80020b4 <MotorDrive>
				state = Idle;
 8004578:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <ControllerState+0x2b8>)
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
				overshoot = max_pos * 100/(Pf - Pi);
 800457e:	4b2b      	ldr	r3, [pc, #172]	; (800462c <ControllerState+0x2f4>)
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004640 <ControllerState+0x308>
 8004588:	ee67 6a87 	vmul.f32	s13, s15, s14
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <ControllerState+0x2cc>)
 800458e:	ed93 7a00 	vldr	s14, [r3]
 8004592:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <ControllerState+0x2c8>)
 8004594:	edd3 7a00 	vldr	s15, [r3]
 8004598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800459c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045a0:	4b28      	ldr	r3, [pc, #160]	; (8004644 <ControllerState+0x30c>)
 80045a2:	edc3 7a00 	vstr	s15, [r3]
				max_pos = 0;
 80045a6:	4b21      	ldr	r3, [pc, #132]	; (800462c <ControllerState+0x2f4>)
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80045ae:	2200      	movs	r2, #0
 80045b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045b4:	4819      	ldr	r0, [pc, #100]	; (800461c <ControllerState+0x2e4>)
 80045b6:	f002 f813 	bl	80065e0 <HAL_GPIO_WritePin>
				ControllerFlag = 0;
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <ControllerState+0x2b4>)
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
			}
		break;
 80045c0:	e001      	b.n	80045c6 <ControllerState+0x28e>
		break;
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <ControllerState+0x290>
		break;
 80045c6:	bf00      	nop
		}
		Pf_last = Pf;
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <ControllerState+0x2cc>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a0e      	ldr	r2, [pc, #56]	; (8004608 <ControllerState+0x2d0>)
 80045ce:	6013      	str	r3, [r2, #0]
	}
}
 80045d0:	bf00      	nop
 80045d2:	bdb0      	pop	{r4, r5, r7, pc}
 80045d4:	f3af 8000 	nop.w
 80045d8:	33333333 	.word	0x33333333
 80045dc:	3fc33333 	.word	0x3fc33333
 80045e0:	9999999a 	.word	0x9999999a
 80045e4:	3fa99999 	.word	0x3fa99999
 80045e8:	20000259 	.word	0x20000259
 80045ec:	20000910 	.word	0x20000910
 80045f0:	20000921 	.word	0x20000921
 80045f4:	2000090c 	.word	0x2000090c
 80045f8:	20000508 	.word	0x20000508
 80045fc:	200008f0 	.word	0x200008f0
 8004600:	200008d4 	.word	0x200008d4
 8004604:	200008d8 	.word	0x200008d8
 8004608:	200008dc 	.word	0x200008dc
 800460c:	20000920 	.word	0x20000920
 8004610:	200008b0 	.word	0x200008b0
 8004614:	200008e0 	.word	0x200008e0
 8004618:	200008cc 	.word	0x200008cc
 800461c:	40020400 	.word	0x40020400
 8004620:	49742400 	.word	0x49742400
 8004624:	200008c0 	.word	0x200008c0
 8004628:	20000914 	.word	0x20000914
 800462c:	200009d4 	.word	0x200009d4
 8004630:	20000922 	.word	0x20000922
 8004634:	20000923 	.word	0x20000923
 8004638:	0007a120 	.word	0x0007a120
 800463c:	200008b8 	.word	0x200008b8
 8004640:	42c80000 	.word	0x42c80000
 8004644:	200009d8 	.word	0x200009d8

08004648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800464c:	b672      	cpsid	i
}
 800464e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004650:	e7fe      	b.n	8004650 <Error_Handler+0x8>
	...

08004654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_MspInit+0x4c>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	4a0f      	ldr	r2, [pc, #60]	; (80046a0 <HAL_MspInit+0x4c>)
 8004664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004668:	6453      	str	r3, [r2, #68]	; 0x44
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <HAL_MspInit+0x4c>)
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <HAL_MspInit+0x4c>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <HAL_MspInit+0x4c>)
 8004680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004684:	6413      	str	r3, [r2, #64]	; 0x40
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <HAL_MspInit+0x4c>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004692:	2007      	movs	r0, #7
 8004694:	f001 f9aa 	bl	80059ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40023800 	.word	0x40023800

080046a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	; 0x28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ac:	f107 0314 	add.w	r3, r7, #20
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2f      	ldr	r2, [pc, #188]	; (8004780 <HAL_ADC_MspInit+0xdc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d157      	bne.n	8004776 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	4b2e      	ldr	r3, [pc, #184]	; (8004784 <HAL_ADC_MspInit+0xe0>)
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	4a2d      	ldr	r2, [pc, #180]	; (8004784 <HAL_ADC_MspInit+0xe0>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6453      	str	r3, [r2, #68]	; 0x44
 80046d6:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_ADC_MspInit+0xe0>)
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	4b27      	ldr	r3, [pc, #156]	; (8004784 <HAL_ADC_MspInit+0xe0>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	4a26      	ldr	r2, [pc, #152]	; (8004784 <HAL_ADC_MspInit+0xe0>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6313      	str	r3, [r2, #48]	; 0x30
 80046f2:	4b24      	ldr	r3, [pc, #144]	; (8004784 <HAL_ADC_MspInit+0xe0>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80046fe:	2303      	movs	r3, #3
 8004700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004702:	2303      	movs	r3, #3
 8004704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470a:	f107 0314 	add.w	r3, r7, #20
 800470e:	4619      	mov	r1, r3
 8004710:	481d      	ldr	r0, [pc, #116]	; (8004788 <HAL_ADC_MspInit+0xe4>)
 8004712:	f001 fdc9 	bl	80062a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004716:	4b1d      	ldr	r3, [pc, #116]	; (800478c <HAL_ADC_MspInit+0xe8>)
 8004718:	4a1d      	ldr	r2, [pc, #116]	; (8004790 <HAL_ADC_MspInit+0xec>)
 800471a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800471c:	4b1b      	ldr	r3, [pc, #108]	; (800478c <HAL_ADC_MspInit+0xe8>)
 800471e:	2200      	movs	r2, #0
 8004720:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004722:	4b1a      	ldr	r3, [pc, #104]	; (800478c <HAL_ADC_MspInit+0xe8>)
 8004724:	2200      	movs	r2, #0
 8004726:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004728:	4b18      	ldr	r3, [pc, #96]	; (800478c <HAL_ADC_MspInit+0xe8>)
 800472a:	2200      	movs	r2, #0
 800472c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800472e:	4b17      	ldr	r3, [pc, #92]	; (800478c <HAL_ADC_MspInit+0xe8>)
 8004730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004734:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <HAL_ADC_MspInit+0xe8>)
 8004738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800473c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800473e:	4b13      	ldr	r3, [pc, #76]	; (800478c <HAL_ADC_MspInit+0xe8>)
 8004740:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004744:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004746:	4b11      	ldr	r3, [pc, #68]	; (800478c <HAL_ADC_MspInit+0xe8>)
 8004748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800474c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <HAL_ADC_MspInit+0xe8>)
 8004750:	2200      	movs	r2, #0
 8004752:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004754:	4b0d      	ldr	r3, [pc, #52]	; (800478c <HAL_ADC_MspInit+0xe8>)
 8004756:	2200      	movs	r2, #0
 8004758:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800475a:	480c      	ldr	r0, [pc, #48]	; (800478c <HAL_ADC_MspInit+0xe8>)
 800475c:	f001 f988 	bl	8005a70 <HAL_DMA_Init>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004766:	f7ff ff6f 	bl	8004648 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a07      	ldr	r2, [pc, #28]	; (800478c <HAL_ADC_MspInit+0xe8>)
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
 8004770:	4a06      	ldr	r2, [pc, #24]	; (800478c <HAL_ADC_MspInit+0xe8>)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004776:	bf00      	nop
 8004778:	3728      	adds	r7, #40	; 0x28
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40012000 	.word	0x40012000
 8004784:	40023800 	.word	0x40023800
 8004788:	40020000 	.word	0x40020000
 800478c:	200003f4 	.word	0x200003f4
 8004790:	40026410 	.word	0x40026410

08004794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08a      	sub	sp, #40	; 0x28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800479c:	f107 0314 	add.w	r3, r7, #20
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a38      	ldr	r2, [pc, #224]	; (8004894 <HAL_I2C_MspInit+0x100>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d16a      	bne.n	800488c <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	4b37      	ldr	r3, [pc, #220]	; (8004898 <HAL_I2C_MspInit+0x104>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	4a36      	ldr	r2, [pc, #216]	; (8004898 <HAL_I2C_MspInit+0x104>)
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	6313      	str	r3, [r2, #48]	; 0x30
 80047c6:	4b34      	ldr	r3, [pc, #208]	; (8004898 <HAL_I2C_MspInit+0x104>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047d2:	23c0      	movs	r3, #192	; 0xc0
 80047d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047d6:	2312      	movs	r3, #18
 80047d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047de:	2303      	movs	r3, #3
 80047e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80047e2:	2304      	movs	r3, #4
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e6:	f107 0314 	add.w	r3, r7, #20
 80047ea:	4619      	mov	r1, r3
 80047ec:	482b      	ldr	r0, [pc, #172]	; (800489c <HAL_I2C_MspInit+0x108>)
 80047ee:	f001 fd5b 	bl	80062a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	4b28      	ldr	r3, [pc, #160]	; (8004898 <HAL_I2C_MspInit+0x104>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	4a27      	ldr	r2, [pc, #156]	; (8004898 <HAL_I2C_MspInit+0x104>)
 80047fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004800:	6413      	str	r3, [r2, #64]	; 0x40
 8004802:	4b25      	ldr	r3, [pc, #148]	; (8004898 <HAL_I2C_MspInit+0x104>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 8004810:	4a24      	ldr	r2, [pc, #144]	; (80048a4 <HAL_I2C_MspInit+0x110>)
 8004812:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004814:	4b22      	ldr	r3, [pc, #136]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 8004816:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800481a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800481c:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 800481e:	2200      	movs	r2, #0
 8004820:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004822:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 8004824:	2200      	movs	r2, #0
 8004826:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004828:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 800482a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800482e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004830:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 8004832:	2200      	movs	r2, #0
 8004834:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004836:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 8004838:	2200      	movs	r2, #0
 800483a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 800483c:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 800483e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004842:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004844:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 8004846:	2200      	movs	r2, #0
 8004848:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800484a:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 800484c:	2200      	movs	r2, #0
 800484e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004850:	4813      	ldr	r0, [pc, #76]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 8004852:	f001 f90d 	bl	8005a70 <HAL_DMA_Init>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800485c:	f7ff fef4 	bl	8004648 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a0f      	ldr	r2, [pc, #60]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 8004864:	639a      	str	r2, [r3, #56]	; 0x38
 8004866:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <HAL_I2C_MspInit+0x10c>)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800486c:	2200      	movs	r2, #0
 800486e:	2100      	movs	r1, #0
 8004870:	201f      	movs	r0, #31
 8004872:	f001 f8c6 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004876:	201f      	movs	r0, #31
 8004878:	f001 f8df 	bl	8005a3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800487c:	2200      	movs	r2, #0
 800487e:	2100      	movs	r1, #0
 8004880:	2020      	movs	r0, #32
 8004882:	f001 f8be 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004886:	2020      	movs	r0, #32
 8004888:	f001 f8d7 	bl	8005a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800488c:	bf00      	nop
 800488e:	3728      	adds	r7, #40	; 0x28
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40005400 	.word	0x40005400
 8004898:	40023800 	.word	0x40023800
 800489c:	40020400 	.word	0x40020400
 80048a0:	200004a8 	.word	0x200004a8
 80048a4:	40026010 	.word	0x40026010

080048a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <HAL_TIM_Base_MspInit+0xb8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d116      	bne.n	80048e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	4b29      	ldr	r3, [pc, #164]	; (8004964 <HAL_TIM_Base_MspInit+0xbc>)
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	4a28      	ldr	r2, [pc, #160]	; (8004964 <HAL_TIM_Base_MspInit+0xbc>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	6453      	str	r3, [r2, #68]	; 0x44
 80048ca:	4b26      	ldr	r3, [pc, #152]	; (8004964 <HAL_TIM_Base_MspInit+0xbc>)
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80048d6:	2200      	movs	r2, #0
 80048d8:	2100      	movs	r1, #0
 80048da:	201a      	movs	r0, #26
 80048dc:	f001 f891 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80048e0:	201a      	movs	r0, #26
 80048e2:	f001 f8aa 	bl	8005a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80048e6:	e036      	b.n	8004956 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1e      	ldr	r2, [pc, #120]	; (8004968 <HAL_TIM_Base_MspInit+0xc0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d116      	bne.n	8004920 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048f2:	2300      	movs	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <HAL_TIM_Base_MspInit+0xbc>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	4a1a      	ldr	r2, [pc, #104]	; (8004964 <HAL_TIM_Base_MspInit+0xbc>)
 80048fc:	f043 0308 	orr.w	r3, r3, #8
 8004900:	6413      	str	r3, [r2, #64]	; 0x40
 8004902:	4b18      	ldr	r3, [pc, #96]	; (8004964 <HAL_TIM_Base_MspInit+0xbc>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800490e:	2200      	movs	r2, #0
 8004910:	2100      	movs	r1, #0
 8004912:	2032      	movs	r0, #50	; 0x32
 8004914:	f001 f875 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004918:	2032      	movs	r0, #50	; 0x32
 800491a:	f001 f88e 	bl	8005a3a <HAL_NVIC_EnableIRQ>
}
 800491e:	e01a      	b.n	8004956 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a11      	ldr	r2, [pc, #68]	; (800496c <HAL_TIM_Base_MspInit+0xc4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d115      	bne.n	8004956 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <HAL_TIM_Base_MspInit+0xbc>)
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	4a0c      	ldr	r2, [pc, #48]	; (8004964 <HAL_TIM_Base_MspInit+0xbc>)
 8004934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004938:	6453      	str	r3, [r2, #68]	; 0x44
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <HAL_TIM_Base_MspInit+0xbc>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004946:	2200      	movs	r2, #0
 8004948:	2100      	movs	r1, #0
 800494a:	201a      	movs	r0, #26
 800494c:	f001 f859 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004950:	201a      	movs	r0, #26
 8004952:	f001 f872 	bl	8005a3a <HAL_NVIC_EnableIRQ>
}
 8004956:	bf00      	nop
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000
 8004964:	40023800 	.word	0x40023800
 8004968:	40000c00 	.word	0x40000c00
 800496c:	40014800 	.word	0x40014800

08004970 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08a      	sub	sp, #40	; 0x28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004978:	f107 0314 	add.w	r3, r7, #20
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	609a      	str	r2, [r3, #8]
 8004984:	60da      	str	r2, [r3, #12]
 8004986:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <HAL_TIM_Encoder_MspInit+0x94>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d133      	bne.n	80049fa <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <HAL_TIM_Encoder_MspInit+0x98>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	4a1b      	ldr	r2, [pc, #108]	; (8004a08 <HAL_TIM_Encoder_MspInit+0x98>)
 800499c:	f043 0302 	orr.w	r3, r3, #2
 80049a0:	6413      	str	r3, [r2, #64]	; 0x40
 80049a2:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_TIM_Encoder_MspInit+0x98>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <HAL_TIM_Encoder_MspInit+0x98>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	4a14      	ldr	r2, [pc, #80]	; (8004a08 <HAL_TIM_Encoder_MspInit+0x98>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6313      	str	r3, [r2, #48]	; 0x30
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_TIM_Encoder_MspInit+0x98>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049ca:	23c0      	movs	r3, #192	; 0xc0
 80049cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ce:	2302      	movs	r3, #2
 80049d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d6:	2300      	movs	r3, #0
 80049d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049da:	2302      	movs	r3, #2
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049de:	f107 0314 	add.w	r3, r7, #20
 80049e2:	4619      	mov	r1, r3
 80049e4:	4809      	ldr	r0, [pc, #36]	; (8004a0c <HAL_TIM_Encoder_MspInit+0x9c>)
 80049e6:	f001 fc5f 	bl	80062a8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80049ea:	2200      	movs	r2, #0
 80049ec:	2100      	movs	r1, #0
 80049ee:	201d      	movs	r0, #29
 80049f0:	f001 f807 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80049f4:	201d      	movs	r0, #29
 80049f6:	f001 f820 	bl	8005a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80049fa:	bf00      	nop
 80049fc:	3728      	adds	r7, #40	; 0x28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	40020000 	.word	0x40020000

08004a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	f107 030c 	add.w	r3, r7, #12
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <HAL_TIM_MspPostInit+0x68>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d11e      	bne.n	8004a70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <HAL_TIM_MspPostInit+0x6c>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	4a10      	ldr	r2, [pc, #64]	; (8004a7c <HAL_TIM_MspPostInit+0x6c>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	6313      	str	r3, [r2, #48]	; 0x30
 8004a42:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <HAL_TIM_MspPostInit+0x6c>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a54:	2302      	movs	r3, #2
 8004a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a60:	2301      	movs	r3, #1
 8004a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a64:	f107 030c 	add.w	r3, r7, #12
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4805      	ldr	r0, [pc, #20]	; (8004a80 <HAL_TIM_MspPostInit+0x70>)
 8004a6c:	f001 fc1c 	bl	80062a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004a70:	bf00      	nop
 8004a72:	3720      	adds	r7, #32
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40020000 	.word	0x40020000

08004a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a8c:	f107 0314 	add.w	r3, r7, #20
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	60da      	str	r2, [r3, #12]
 8004a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a34      	ldr	r2, [pc, #208]	; (8004b74 <HAL_UART_MspInit+0xf0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d161      	bne.n	8004b6a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	4b33      	ldr	r3, [pc, #204]	; (8004b78 <HAL_UART_MspInit+0xf4>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a32      	ldr	r2, [pc, #200]	; (8004b78 <HAL_UART_MspInit+0xf4>)
 8004ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab6:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <HAL_UART_MspInit+0xf4>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <HAL_UART_MspInit+0xf4>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	4a2b      	ldr	r2, [pc, #172]	; (8004b78 <HAL_UART_MspInit+0xf4>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad2:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <HAL_UART_MspInit+0xf4>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004ade:	230c      	movs	r3, #12
 8004ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aea:	2303      	movs	r3, #3
 8004aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004aee:	2307      	movs	r3, #7
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af2:	f107 0314 	add.w	r3, r7, #20
 8004af6:	4619      	mov	r1, r3
 8004af8:	4820      	ldr	r0, [pc, #128]	; (8004b7c <HAL_UART_MspInit+0xf8>)
 8004afa:	f001 fbd5 	bl	80062a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b00:	4a20      	ldr	r2, [pc, #128]	; (8004b84 <HAL_UART_MspInit+0x100>)
 8004b02:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004b04:	4b1e      	ldr	r3, [pc, #120]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b0a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b0e:	2240      	movs	r2, #64	; 0x40
 8004b10:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b12:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b18:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b1e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b20:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b26:	4b16      	ldr	r3, [pc, #88]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004b2c:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b32:	4b13      	ldr	r3, [pc, #76]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b38:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004b3e:	4810      	ldr	r0, [pc, #64]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b40:	f000 ff96 	bl	8005a70 <HAL_DMA_Init>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004b4a:	f7ff fd7d 	bl	8004648 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a0b      	ldr	r2, [pc, #44]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b52:	635a      	str	r2, [r3, #52]	; 0x34
 8004b54:	4a0a      	ldr	r2, [pc, #40]	; (8004b80 <HAL_UART_MspInit+0xfc>)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	2026      	movs	r0, #38	; 0x26
 8004b60:	f000 ff4f 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b64:	2026      	movs	r0, #38	; 0x26
 8004b66:	f000 ff68 	bl	8005a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004b6a:	bf00      	nop
 8004b6c:	3728      	adds	r7, #40	; 0x28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40004400 	.word	0x40004400
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40020000 	.word	0x40020000
 8004b80:	2000084c 	.word	0x2000084c
 8004b84:	400260a0 	.word	0x400260a0

08004b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b8c:	e7fe      	b.n	8004b8c <NMI_Handler+0x4>

08004b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b92:	e7fe      	b.n	8004b92 <HardFault_Handler+0x4>

08004b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b98:	e7fe      	b.n	8004b98 <MemManage_Handler+0x4>

08004b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b9e:	e7fe      	b.n	8004b9e <BusFault_Handler+0x4>

08004ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ba4:	e7fe      	b.n	8004ba4 <UsageFault_Handler+0x4>

08004ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004baa:	bf00      	nop
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bb8:	bf00      	nop
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bc6:	bf00      	nop
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bd4:	f000 fa18 	bl	8005008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bd8:	bf00      	nop
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004be0:	2002      	movs	r0, #2
 8004be2:	f001 fd17 	bl	8006614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004be6:	bf00      	nop
 8004be8:	bd80      	pop	{r7, pc}

08004bea <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004bee:	2004      	movs	r0, #4
 8004bf0:	f001 fd10 	bl	8006614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004bf4:	bf00      	nop
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004bfc:	4802      	ldr	r0, [pc, #8]	; (8004c08 <DMA1_Stream0_IRQHandler+0x10>)
 8004bfe:	f001 f8cf 	bl	8005da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	200004a8 	.word	0x200004a8

08004c0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004c10:	4802      	ldr	r0, [pc, #8]	; (8004c1c <DMA1_Stream6_IRQHandler+0x10>)
 8004c12:	f001 f8c5 	bl	8005da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	2000084c 	.word	0x2000084c

08004c20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004c24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c28:	f001 fcf4 	bl	8006614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004c2c:	bf00      	nop
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c34:	4803      	ldr	r0, [pc, #12]	; (8004c44 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004c36:	f004 fd4d 	bl	80096d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004c3a:	4803      	ldr	r0, [pc, #12]	; (8004c48 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004c3c:	f004 fd4a 	bl	80096d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004c40:	bf00      	nop
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000508 	.word	0x20000508
 8004c48:	20000724 	.word	0x20000724

08004c4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004c50:	4802      	ldr	r0, [pc, #8]	; (8004c5c <TIM3_IRQHandler+0x10>)
 8004c52:	f004 fd3f 	bl	80096d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	200005bc 	.word	0x200005bc

08004c60 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004c64:	4802      	ldr	r0, [pc, #8]	; (8004c70 <I2C1_EV_IRQHandler+0x10>)
 8004c66:	f001 ff85 	bl	8006b74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000454 	.word	0x20000454

08004c74 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004c78:	4802      	ldr	r0, [pc, #8]	; (8004c84 <I2C1_ER_IRQHandler+0x10>)
 8004c7a:	f002 f8ec 	bl	8006e56 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004c7e:	bf00      	nop
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000454 	.word	0x20000454

08004c88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c8c:	4802      	ldr	r0, [pc, #8]	; (8004c98 <USART2_IRQHandler+0x10>)
 8004c8e:	f006 f829 	bl	800ace4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004c92:	bf00      	nop
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	200007d8 	.word	0x200007d8

08004c9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004ca0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004ca4:	f001 fcb6 	bl	8006614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004ca8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004cac:	f001 fcb2 	bl	8006614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004cb8:	4802      	ldr	r0, [pc, #8]	; (8004cc4 <TIM5_IRQHandler+0x10>)
 8004cba:	f004 fd0b 	bl	80096d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004cbe:	bf00      	nop
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000670 	.word	0x20000670

08004cc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ccc:	4802      	ldr	r0, [pc, #8]	; (8004cd8 <DMA2_Stream0_IRQHandler+0x10>)
 8004cce:	f001 f867 	bl	8005da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004cd2:	bf00      	nop
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200003f4 	.word	0x200003f4

08004cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <SystemInit+0x20>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	4a05      	ldr	r2, [pc, #20]	; (8004cfc <SystemInit+0x20>)
 8004ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	e000ed00 	.word	0xe000ed00

08004d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d04:	480d      	ldr	r0, [pc, #52]	; (8004d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004d06:	490e      	ldr	r1, [pc, #56]	; (8004d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004d08:	4a0e      	ldr	r2, [pc, #56]	; (8004d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d0c:	e002      	b.n	8004d14 <LoopCopyDataInit>

08004d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d12:	3304      	adds	r3, #4

08004d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d18:	d3f9      	bcc.n	8004d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d1a:	4a0b      	ldr	r2, [pc, #44]	; (8004d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004d1c:	4c0b      	ldr	r4, [pc, #44]	; (8004d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d20:	e001      	b.n	8004d26 <LoopFillZerobss>

08004d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d24:	3204      	adds	r2, #4

08004d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d28:	d3fb      	bcc.n	8004d22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004d2a:	f7ff ffd7 	bl	8004cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d2e:	f007 f825 	bl	800bd7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d32:	f7fe fd25 	bl	8003780 <main>
  bx  lr    
 8004d36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d40:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 8004d44:	0800da50 	.word	0x0800da50
  ldr r2, =_sbss
 8004d48:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8004d4c:	20001020 	.word	0x20001020

08004d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d50:	e7fe      	b.n	8004d50 <ADC_IRQHandler>
	...

08004d54 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b08b      	sub	sp, #44	; 0x2c
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8004d5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d62:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004e54 <arm_cos_f32+0x100>
 8004d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d6a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8004d6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d72:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8004d76:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d7e:	ee17 3a90 	vmov	r3, s15
 8004d82:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8004d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	d502      	bpl.n	8004d98 <arm_cos_f32+0x44>
  {
    n--;
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004da2:	ed97 7a06 	vldr	s14, [r7, #24]
 8004da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004daa:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8004dae:	edd7 7a06 	vldr	s15, [r7, #24]
 8004db2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004e58 <arm_cos_f32+0x104>
 8004db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dba:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8004dbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8004dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc6:	ee17 3a90 	vmov	r3, s15
 8004dca:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8004dcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd2:	d309      	bcc.n	8004de8 <arm_cos_f32+0x94>
    index = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8004dd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ddc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004e58 <arm_cos_f32+0x104>
 8004de0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004de4:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8004de8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df2:	ed97 7a07 	vldr	s14, [r7, #28]
 8004df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dfa:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8004dfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e00:	4a16      	ldr	r2, [pc, #88]	; (8004e5c <arm_cos_f32+0x108>)
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8004e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <arm_cos_f32+0x108>)
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8004e18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e24:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e2c:	edd7 6a05 	vldr	s13, [r7, #20]
 8004e30:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e3c:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	ee07 3a90 	vmov	s15, r3
}
 8004e46:	eeb0 0a67 	vmov.f32	s0, s15
 8004e4a:	372c      	adds	r7, #44	; 0x2c
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	3e22f983 	.word	0x3e22f983
 8004e58:	44000000 	.word	0x44000000
 8004e5c:	0800d190 	.word	0x0800d190

08004e60 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b08b      	sub	sp, #44	; 0x2c
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8004e6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e6e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8004f58 <arm_sin_f32+0xf8>
 8004e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e76:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8004e7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e82:	ee17 3a90 	vmov	r3, s15
 8004e86:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8004e88:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e94:	d502      	bpl.n	8004e9c <arm_sin_f32+0x3c>
  {
    n--;
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ea6:	ed97 7a06 	vldr	s14, [r7, #24]
 8004eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eae:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8004eb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004eb6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004f5c <arm_sin_f32+0xfc>
 8004eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ebe:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8004ec2:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eca:	ee17 3a90 	vmov	r3, s15
 8004ece:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8004ed0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed6:	d309      	bcc.n	8004eec <arm_sin_f32+0x8c>
    index = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8004edc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ee0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004f5c <arm_sin_f32+0xfc>
 8004ee4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ee8:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8004eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef6:	ed97 7a07 	vldr	s14, [r7, #28]
 8004efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004efe:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8004f02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f04:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <arm_sin_f32+0x100>)
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8004f0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f10:	3301      	adds	r3, #1
 8004f12:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <arm_sin_f32+0x100>)
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8004f1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f20:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f28:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f30:	edd7 6a05 	vldr	s13, [r7, #20]
 8004f34:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f40:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	ee07 3a90 	vmov	s15, r3
}
 8004f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f4e:	372c      	adds	r7, #44	; 0x2c
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	3e22f983 	.word	0x3e22f983
 8004f5c:	44000000 	.word	0x44000000
 8004f60:	0800d190 	.word	0x0800d190

08004f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f68:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <HAL_Init+0x40>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a0d      	ldr	r2, [pc, #52]	; (8004fa4 <HAL_Init+0x40>)
 8004f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <HAL_Init+0x40>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <HAL_Init+0x40>)
 8004f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f80:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <HAL_Init+0x40>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <HAL_Init+0x40>)
 8004f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f8c:	2003      	movs	r0, #3
 8004f8e:	f000 fd2d 	bl	80059ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f92:	2000      	movs	r0, #0
 8004f94:	f000 f808 	bl	8004fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f98:	f7ff fb5c 	bl	8004654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023c00 	.word	0x40023c00

08004fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <HAL_InitTick+0x54>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b12      	ldr	r3, [pc, #72]	; (8005000 <HAL_InitTick+0x58>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fd45 	bl	8005a56 <HAL_SYSTICK_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e00e      	b.n	8004ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b0f      	cmp	r3, #15
 8004fda:	d80a      	bhi.n	8004ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fdc:	2200      	movs	r2, #0
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	f000 fd0d 	bl	8005a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fe8:	4a06      	ldr	r2, [pc, #24]	; (8005004 <HAL_InitTick+0x5c>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	200002ac 	.word	0x200002ac
 8005000:	200002b4 	.word	0x200002b4
 8005004:	200002b0 	.word	0x200002b0

08005008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <HAL_IncTick+0x20>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_IncTick+0x24>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4413      	add	r3, r2
 8005018:	4a04      	ldr	r2, [pc, #16]	; (800502c <HAL_IncTick+0x24>)
 800501a:	6013      	str	r3, [r2, #0]
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	200002b4 	.word	0x200002b4
 800502c:	2000101c 	.word	0x2000101c

08005030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return uwTick;
 8005034:	4b03      	ldr	r3, [pc, #12]	; (8005044 <HAL_GetTick+0x14>)
 8005036:	681b      	ldr	r3, [r3, #0]
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	2000101c 	.word	0x2000101c

08005048 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e033      	b.n	80050c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff fb1c 	bl	80046a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	d118      	bne.n	80050b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800508e:	f023 0302 	bic.w	r3, r3, #2
 8005092:	f043 0202 	orr.w	r2, r3, #2
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fa58 	bl	8005550 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	f043 0201 	orr.w	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40
 80050b6:	e001      	b.n	80050bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_ADC_Start_DMA+0x1e>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e0ce      	b.n	800528c <HAL_ADC_Start_DMA+0x1bc>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d018      	beq.n	8005136 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005114:	4b5f      	ldr	r3, [pc, #380]	; (8005294 <HAL_ADC_Start_DMA+0x1c4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a5f      	ldr	r2, [pc, #380]	; (8005298 <HAL_ADC_Start_DMA+0x1c8>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	0c9a      	lsrs	r2, r3, #18
 8005120:	4613      	mov	r3, r2
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	4413      	add	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005128:	e002      	b.n	8005130 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	3b01      	subs	r3, #1
 800512e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f9      	bne.n	800512a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005144:	d107      	bne.n	8005156 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005154:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	f040 8086 	bne.w	8005272 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800516e:	f023 0301 	bic.w	r3, r3, #1
 8005172:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005190:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a4:	d106      	bne.n	80051b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	f023 0206 	bic.w	r2, r3, #6
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	645a      	str	r2, [r3, #68]	; 0x44
 80051b2:	e002      	b.n	80051ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051c2:	4b36      	ldr	r3, [pc, #216]	; (800529c <HAL_ADC_Start_DMA+0x1cc>)
 80051c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	4a35      	ldr	r2, [pc, #212]	; (80052a0 <HAL_ADC_Start_DMA+0x1d0>)
 80051cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	4a34      	ldr	r2, [pc, #208]	; (80052a4 <HAL_ADC_Start_DMA+0x1d4>)
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	4a33      	ldr	r2, [pc, #204]	; (80052a8 <HAL_ADC_Start_DMA+0x1d8>)
 80051dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80051e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80051f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005206:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	334c      	adds	r3, #76	; 0x4c
 8005212:	4619      	mov	r1, r3
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f000 fcd8 	bl	8005bcc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10f      	bne.n	8005248 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d129      	bne.n	800528a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005244:	609a      	str	r2, [r3, #8]
 8005246:	e020      	b.n	800528a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a17      	ldr	r2, [pc, #92]	; (80052ac <HAL_ADC_Start_DMA+0x1dc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d11b      	bne.n	800528a <HAL_ADC_Start_DMA+0x1ba>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d114      	bne.n	800528a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800526e:	609a      	str	r2, [r3, #8]
 8005270:	e00b      	b.n	800528a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f043 0210 	orr.w	r2, r3, #16
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	f043 0201 	orr.w	r2, r3, #1
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	200002ac 	.word	0x200002ac
 8005298:	431bde83 	.word	0x431bde83
 800529c:	40012300 	.word	0x40012300
 80052a0:	08005749 	.word	0x08005749
 80052a4:	08005803 	.word	0x08005803
 80052a8:	0800581f 	.word	0x0800581f
 80052ac:	40012000 	.word	0x40012000

080052b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x1c>
 8005304:	2302      	movs	r3, #2
 8005306:	e113      	b.n	8005530 <HAL_ADC_ConfigChannel+0x244>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b09      	cmp	r3, #9
 8005316:	d925      	bls.n	8005364 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68d9      	ldr	r1, [r3, #12]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	4613      	mov	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4413      	add	r3, r2
 800532c:	3b1e      	subs	r3, #30
 800532e:	2207      	movs	r2, #7
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	43da      	mvns	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	400a      	ands	r2, r1
 800533c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68d9      	ldr	r1, [r3, #12]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	4618      	mov	r0, r3
 8005350:	4603      	mov	r3, r0
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	4403      	add	r3, r0
 8005356:	3b1e      	subs	r3, #30
 8005358:	409a      	lsls	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	60da      	str	r2, [r3, #12]
 8005362:	e022      	b.n	80053aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6919      	ldr	r1, [r3, #16]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	4613      	mov	r3, r2
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	4413      	add	r3, r2
 8005378:	2207      	movs	r2, #7
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43da      	mvns	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	400a      	ands	r2, r1
 8005386:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6919      	ldr	r1, [r3, #16]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	4618      	mov	r0, r3
 800539a:	4603      	mov	r3, r0
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	4403      	add	r3, r0
 80053a0:	409a      	lsls	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b06      	cmp	r3, #6
 80053b0:	d824      	bhi.n	80053fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	3b05      	subs	r3, #5
 80053c4:	221f      	movs	r2, #31
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	43da      	mvns	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	400a      	ands	r2, r1
 80053d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	4618      	mov	r0, r3
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	3b05      	subs	r3, #5
 80053ee:	fa00 f203 	lsl.w	r2, r0, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	635a      	str	r2, [r3, #52]	; 0x34
 80053fa:	e04c      	b.n	8005496 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b0c      	cmp	r3, #12
 8005402:	d824      	bhi.n	800544e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	3b23      	subs	r3, #35	; 0x23
 8005416:	221f      	movs	r2, #31
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	43da      	mvns	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	400a      	ands	r2, r1
 8005424:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	4618      	mov	r0, r3
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	3b23      	subs	r3, #35	; 0x23
 8005440:	fa00 f203 	lsl.w	r2, r0, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
 800544c:	e023      	b.n	8005496 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	3b41      	subs	r3, #65	; 0x41
 8005460:	221f      	movs	r2, #31
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	43da      	mvns	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	400a      	ands	r2, r1
 800546e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	4618      	mov	r0, r3
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	3b41      	subs	r3, #65	; 0x41
 800548a:	fa00 f203 	lsl.w	r2, r0, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005496:	4b29      	ldr	r3, [pc, #164]	; (800553c <HAL_ADC_ConfigChannel+0x250>)
 8005498:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a28      	ldr	r2, [pc, #160]	; (8005540 <HAL_ADC_ConfigChannel+0x254>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d10f      	bne.n	80054c4 <HAL_ADC_ConfigChannel+0x1d8>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b12      	cmp	r3, #18
 80054aa:	d10b      	bne.n	80054c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1d      	ldr	r2, [pc, #116]	; (8005540 <HAL_ADC_ConfigChannel+0x254>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d12b      	bne.n	8005526 <HAL_ADC_ConfigChannel+0x23a>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1c      	ldr	r2, [pc, #112]	; (8005544 <HAL_ADC_ConfigChannel+0x258>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d003      	beq.n	80054e0 <HAL_ADC_ConfigChannel+0x1f4>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b11      	cmp	r3, #17
 80054de:	d122      	bne.n	8005526 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a11      	ldr	r2, [pc, #68]	; (8005544 <HAL_ADC_ConfigChannel+0x258>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d111      	bne.n	8005526 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <HAL_ADC_ConfigChannel+0x25c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a11      	ldr	r2, [pc, #68]	; (800554c <HAL_ADC_ConfigChannel+0x260>)
 8005508:	fba2 2303 	umull	r2, r3, r2, r3
 800550c:	0c9a      	lsrs	r2, r3, #18
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005518:	e002      	b.n	8005520 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	3b01      	subs	r3, #1
 800551e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f9      	bne.n	800551a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	40012300 	.word	0x40012300
 8005540:	40012000 	.word	0x40012000
 8005544:	10000012 	.word	0x10000012
 8005548:	200002ac 	.word	0x200002ac
 800554c:	431bde83 	.word	0x431bde83

08005550 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005558:	4b79      	ldr	r3, [pc, #484]	; (8005740 <ADC_Init+0x1f0>)
 800555a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	431a      	orrs	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6859      	ldr	r1, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	021a      	lsls	r2, r3, #8
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80055a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6899      	ldr	r1, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	4a58      	ldr	r2, [pc, #352]	; (8005744 <ADC_Init+0x1f4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d022      	beq.n	800562e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6899      	ldr	r1, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6899      	ldr	r1, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	609a      	str	r2, [r3, #8]
 800562c:	e00f      	b.n	800564e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800563c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800564c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0202 	bic.w	r2, r2, #2
 800565c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6899      	ldr	r1, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	7e1b      	ldrb	r3, [r3, #24]
 8005668:	005a      	lsls	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d01b      	beq.n	80056b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800569a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6859      	ldr	r1, [r3, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	3b01      	subs	r3, #1
 80056a8:	035a      	lsls	r2, r3, #13
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	e007      	b.n	80056c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80056d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	3b01      	subs	r3, #1
 80056e0:	051a      	lsls	r2, r3, #20
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6899      	ldr	r1, [r3, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005706:	025a      	lsls	r2, r3, #9
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6899      	ldr	r1, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	029a      	lsls	r2, r3, #10
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40012300 	.word	0x40012300
 8005744:	0f000001 	.word	0x0f000001

08005748 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800575e:	2b00      	cmp	r3, #0
 8005760:	d13c      	bne.n	80057dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d12b      	bne.n	80057d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005780:	2b00      	cmp	r3, #0
 8005782:	d127      	bne.n	80057d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800578e:	2b00      	cmp	r3, #0
 8005790:	d006      	beq.n	80057a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800579c:	2b00      	cmp	r3, #0
 800579e:	d119      	bne.n	80057d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0220 	bic.w	r2, r2, #32
 80057ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d105      	bne.n	80057d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	f043 0201 	orr.w	r2, r3, #1
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff fd6b 	bl	80052b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80057da:	e00e      	b.n	80057fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f7ff fd75 	bl	80052d8 <HAL_ADC_ErrorCallback>
}
 80057ee:	e004      	b.n	80057fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	4798      	blx	r3
}
 80057fa:	bf00      	nop
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7ff fd57 	bl	80052c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2240      	movs	r2, #64	; 0x40
 8005830:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	f043 0204 	orr.w	r2, r3, #4
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff fd4a 	bl	80052d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800585c:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <__NVIC_SetPriorityGrouping+0x44>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005868:	4013      	ands	r3, r2
 800586a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800587c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800587e:	4a04      	ldr	r2, [pc, #16]	; (8005890 <__NVIC_SetPriorityGrouping+0x44>)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	60d3      	str	r3, [r2, #12]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	e000ed00 	.word	0xe000ed00

08005894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005898:	4b04      	ldr	r3, [pc, #16]	; (80058ac <__NVIC_GetPriorityGrouping+0x18>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	0a1b      	lsrs	r3, r3, #8
 800589e:	f003 0307 	and.w	r3, r3, #7
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	e000ed00 	.word	0xe000ed00

080058b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	db0b      	blt.n	80058da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	f003 021f 	and.w	r2, r3, #31
 80058c8:	4907      	ldr	r1, [pc, #28]	; (80058e8 <__NVIC_EnableIRQ+0x38>)
 80058ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	2001      	movs	r0, #1
 80058d2:	fa00 f202 	lsl.w	r2, r0, r2
 80058d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	e000e100 	.word	0xe000e100

080058ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	db0a      	blt.n	8005916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	b2da      	uxtb	r2, r3
 8005904:	490c      	ldr	r1, [pc, #48]	; (8005938 <__NVIC_SetPriority+0x4c>)
 8005906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800590a:	0112      	lsls	r2, r2, #4
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	440b      	add	r3, r1
 8005910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005914:	e00a      	b.n	800592c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4908      	ldr	r1, [pc, #32]	; (800593c <__NVIC_SetPriority+0x50>)
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	3b04      	subs	r3, #4
 8005924:	0112      	lsls	r2, r2, #4
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	440b      	add	r3, r1
 800592a:	761a      	strb	r2, [r3, #24]
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	e000e100 	.word	0xe000e100
 800593c:	e000ed00 	.word	0xe000ed00

08005940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f1c3 0307 	rsb	r3, r3, #7
 800595a:	2b04      	cmp	r3, #4
 800595c:	bf28      	it	cs
 800595e:	2304      	movcs	r3, #4
 8005960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3304      	adds	r3, #4
 8005966:	2b06      	cmp	r3, #6
 8005968:	d902      	bls.n	8005970 <NVIC_EncodePriority+0x30>
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3b03      	subs	r3, #3
 800596e:	e000      	b.n	8005972 <NVIC_EncodePriority+0x32>
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005974:	f04f 32ff 	mov.w	r2, #4294967295
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43da      	mvns	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	401a      	ands	r2, r3
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005988:	f04f 31ff 	mov.w	r1, #4294967295
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	43d9      	mvns	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005998:	4313      	orrs	r3, r2
         );
}
 800599a:	4618      	mov	r0, r3
 800599c:	3724      	adds	r7, #36	; 0x24
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
	...

080059a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059b8:	d301      	bcc.n	80059be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059ba:	2301      	movs	r3, #1
 80059bc:	e00f      	b.n	80059de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059be:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <SysTick_Config+0x40>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059c6:	210f      	movs	r1, #15
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	f7ff ff8e 	bl	80058ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <SysTick_Config+0x40>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059d6:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <SysTick_Config+0x40>)
 80059d8:	2207      	movs	r2, #7
 80059da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	e000e010 	.word	0xe000e010

080059ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff ff29 	bl	800584c <__NVIC_SetPriorityGrouping>
}
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b086      	sub	sp, #24
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	4603      	mov	r3, r0
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	607a      	str	r2, [r7, #4]
 8005a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a14:	f7ff ff3e 	bl	8005894 <__NVIC_GetPriorityGrouping>
 8005a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	6978      	ldr	r0, [r7, #20]
 8005a20:	f7ff ff8e 	bl	8005940 <NVIC_EncodePriority>
 8005a24:	4602      	mov	r2, r0
 8005a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff ff5d 	bl	80058ec <__NVIC_SetPriority>
}
 8005a32:	bf00      	nop
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	4603      	mov	r3, r0
 8005a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff ff31 	bl	80058b0 <__NVIC_EnableIRQ>
}
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff ffa2 	bl	80059a8 <SysTick_Config>
 8005a64:	4603      	mov	r3, r0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a7c:	f7ff fad8 	bl	8005030 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e099      	b.n	8005bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005aac:	e00f      	b.n	8005ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aae:	f7ff fabf 	bl	8005030 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b05      	cmp	r3, #5
 8005aba:	d908      	bls.n	8005ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e078      	b.n	8005bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e8      	bne.n	8005aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4b38      	ldr	r3, [pc, #224]	; (8005bc8 <HAL_DMA_Init+0x158>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d107      	bne.n	8005b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	4313      	orrs	r3, r2
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0307 	bic.w	r3, r3, #7
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d117      	bne.n	8005b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00e      	beq.n	8005b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fb1b 	bl	80061b0 <DMA_CheckFifoParam>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2240      	movs	r2, #64	; 0x40
 8005b84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e016      	b.n	8005bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fad2 	bl	8006144 <DMA_CalcBaseAndBitshift>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba8:	223f      	movs	r2, #63	; 0x3f
 8005baa:	409a      	lsls	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	f010803f 	.word	0xf010803f

08005bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_DMA_Start_IT+0x26>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e040      	b.n	8005c74 <HAL_DMA_Start_IT+0xa8>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d12f      	bne.n	8005c66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fa64 	bl	80060e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c24:	223f      	movs	r2, #63	; 0x3f
 8005c26:	409a      	lsls	r2, r3
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0216 	orr.w	r2, r2, #22
 8005c3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0208 	orr.w	r2, r2, #8
 8005c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	e005      	b.n	8005c72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c6e:	2302      	movs	r3, #2
 8005c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c8a:	f7ff f9d1 	bl	8005030 <HAL_GetTick>
 8005c8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d008      	beq.n	8005cae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2280      	movs	r2, #128	; 0x80
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e052      	b.n	8005d54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0216 	bic.w	r2, r2, #22
 8005cbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ccc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <HAL_DMA_Abort+0x62>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0208 	bic.w	r2, r2, #8
 8005cec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cfe:	e013      	b.n	8005d28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d00:	f7ff f996 	bl	8005030 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d90c      	bls.n	8005d28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2203      	movs	r2, #3
 8005d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e015      	b.n	8005d54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e4      	bne.n	8005d00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3a:	223f      	movs	r2, #63	; 0x3f
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d004      	beq.n	8005d7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2280      	movs	r2, #128	; 0x80
 8005d74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e00c      	b.n	8005d94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2205      	movs	r2, #5
 8005d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005dac:	4b8e      	ldr	r3, [pc, #568]	; (8005fe8 <HAL_DMA_IRQHandler+0x248>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a8e      	ldr	r2, [pc, #568]	; (8005fec <HAL_DMA_IRQHandler+0x24c>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	0a9b      	lsrs	r3, r3, #10
 8005db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dca:	2208      	movs	r2, #8
 8005dcc:	409a      	lsls	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01a      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d013      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0204 	bic.w	r2, r2, #4
 8005df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df8:	2208      	movs	r2, #8
 8005dfa:	409a      	lsls	r2, r3
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e04:	f043 0201 	orr.w	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e10:	2201      	movs	r2, #1
 8005e12:	409a      	lsls	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d012      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2e:	2201      	movs	r2, #1
 8005e30:	409a      	lsls	r2, r3
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	f043 0202 	orr.w	r2, r3, #2
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e46:	2204      	movs	r2, #4
 8005e48:	409a      	lsls	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d012      	beq.n	8005e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00b      	beq.n	8005e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e64:	2204      	movs	r2, #4
 8005e66:	409a      	lsls	r2, r3
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e70:	f043 0204 	orr.w	r2, r3, #4
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7c:	2210      	movs	r2, #16
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d043      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d03c      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9a:	2210      	movs	r2, #16
 8005e9c:	409a      	lsls	r2, r3
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d018      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d108      	bne.n	8005ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d024      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	4798      	blx	r3
 8005ece:	e01f      	b.n	8005f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01b      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	4798      	blx	r3
 8005ee0:	e016      	b.n	8005f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d107      	bne.n	8005f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0208 	bic.w	r2, r2, #8
 8005efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f14:	2220      	movs	r2, #32
 8005f16:	409a      	lsls	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 808f 	beq.w	8006040 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 8087 	beq.w	8006040 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f36:	2220      	movs	r2, #32
 8005f38:	409a      	lsls	r2, r3
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	d136      	bne.n	8005fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0216 	bic.w	r2, r2, #22
 8005f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <HAL_DMA_IRQHandler+0x1da>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0208 	bic.w	r2, r2, #8
 8005f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8e:	223f      	movs	r2, #63	; 0x3f
 8005f90:	409a      	lsls	r2, r3
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d07e      	beq.n	80060ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
        }
        return;
 8005fb6:	e079      	b.n	80060ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01d      	beq.n	8006002 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10d      	bne.n	8005ff0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d031      	beq.n	8006040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	4798      	blx	r3
 8005fe4:	e02c      	b.n	8006040 <HAL_DMA_IRQHandler+0x2a0>
 8005fe6:	bf00      	nop
 8005fe8:	200002ac 	.word	0x200002ac
 8005fec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d023      	beq.n	8006040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
 8006000:	e01e      	b.n	8006040 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10f      	bne.n	8006030 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0210 	bic.w	r2, r2, #16
 800601e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006044:	2b00      	cmp	r3, #0
 8006046:	d032      	beq.n	80060ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d022      	beq.n	800609a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2205      	movs	r2, #5
 8006058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	3301      	adds	r3, #1
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	429a      	cmp	r2, r3
 8006076:	d307      	bcc.n	8006088 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f2      	bne.n	800606c <HAL_DMA_IRQHandler+0x2cc>
 8006086:	e000      	b.n	800608a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006088:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d005      	beq.n	80060ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
 80060aa:	e000      	b.n	80060ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80060ac:	bf00      	nop
    }
  }
}
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060c2:	b2db      	uxtb	r3, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006104:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d108      	bne.n	8006128 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006126:	e007      	b.n	8006138 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	60da      	str	r2, [r3, #12]
}
 8006138:	bf00      	nop
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	3b10      	subs	r3, #16
 8006154:	4a14      	ldr	r2, [pc, #80]	; (80061a8 <DMA_CalcBaseAndBitshift+0x64>)
 8006156:	fba2 2303 	umull	r2, r3, r2, r3
 800615a:	091b      	lsrs	r3, r3, #4
 800615c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800615e:	4a13      	ldr	r2, [pc, #76]	; (80061ac <DMA_CalcBaseAndBitshift+0x68>)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b03      	cmp	r3, #3
 8006170:	d909      	bls.n	8006186 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800617a:	f023 0303 	bic.w	r3, r3, #3
 800617e:	1d1a      	adds	r2, r3, #4
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	659a      	str	r2, [r3, #88]	; 0x58
 8006184:	e007      	b.n	8006196 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800618e:	f023 0303 	bic.w	r3, r3, #3
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	aaaaaaab 	.word	0xaaaaaaab
 80061ac:	0800d994 	.word	0x0800d994

080061b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d11f      	bne.n	800620a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d856      	bhi.n	800627e <DMA_CheckFifoParam+0xce>
 80061d0:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <DMA_CheckFifoParam+0x28>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	080061e9 	.word	0x080061e9
 80061dc:	080061fb 	.word	0x080061fb
 80061e0:	080061e9 	.word	0x080061e9
 80061e4:	0800627f 	.word	0x0800627f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d046      	beq.n	8006282 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061f8:	e043      	b.n	8006282 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006202:	d140      	bne.n	8006286 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006208:	e03d      	b.n	8006286 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006212:	d121      	bne.n	8006258 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b03      	cmp	r3, #3
 8006218:	d837      	bhi.n	800628a <DMA_CheckFifoParam+0xda>
 800621a:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <DMA_CheckFifoParam+0x70>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006231 	.word	0x08006231
 8006224:	08006237 	.word	0x08006237
 8006228:	08006231 	.word	0x08006231
 800622c:	08006249 	.word	0x08006249
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	73fb      	strb	r3, [r7, #15]
      break;
 8006234:	e030      	b.n	8006298 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d025      	beq.n	800628e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006246:	e022      	b.n	800628e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006250:	d11f      	bne.n	8006292 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006256:	e01c      	b.n	8006292 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d903      	bls.n	8006266 <DMA_CheckFifoParam+0xb6>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b03      	cmp	r3, #3
 8006262:	d003      	beq.n	800626c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006264:	e018      	b.n	8006298 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	73fb      	strb	r3, [r7, #15]
      break;
 800626a:	e015      	b.n	8006298 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00e      	beq.n	8006296 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
      break;
 800627c:	e00b      	b.n	8006296 <DMA_CheckFifoParam+0xe6>
      break;
 800627e:	bf00      	nop
 8006280:	e00a      	b.n	8006298 <DMA_CheckFifoParam+0xe8>
      break;
 8006282:	bf00      	nop
 8006284:	e008      	b.n	8006298 <DMA_CheckFifoParam+0xe8>
      break;
 8006286:	bf00      	nop
 8006288:	e006      	b.n	8006298 <DMA_CheckFifoParam+0xe8>
      break;
 800628a:	bf00      	nop
 800628c:	e004      	b.n	8006298 <DMA_CheckFifoParam+0xe8>
      break;
 800628e:	bf00      	nop
 8006290:	e002      	b.n	8006298 <DMA_CheckFifoParam+0xe8>
      break;   
 8006292:	bf00      	nop
 8006294:	e000      	b.n	8006298 <DMA_CheckFifoParam+0xe8>
      break;
 8006296:	bf00      	nop
    }
  } 
  
  return status; 
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop

080062a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b089      	sub	sp, #36	; 0x24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	e159      	b.n	8006578 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062c4:	2201      	movs	r2, #1
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	fa02 f303 	lsl.w	r3, r2, r3
 80062cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4013      	ands	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	429a      	cmp	r2, r3
 80062de:	f040 8148 	bne.w	8006572 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d005      	beq.n	80062fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d130      	bne.n	800635c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	2203      	movs	r2, #3
 8006306:	fa02 f303 	lsl.w	r3, r2, r3
 800630a:	43db      	mvns	r3, r3
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	4013      	ands	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	4313      	orrs	r3, r2
 8006322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006330:	2201      	movs	r2, #1
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	43db      	mvns	r3, r3
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	4013      	ands	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	091b      	lsrs	r3, r3, #4
 8006346:	f003 0201 	and.w	r2, r3, #1
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	4313      	orrs	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	2b03      	cmp	r3, #3
 8006366:	d017      	beq.n	8006398 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	2203      	movs	r2, #3
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	43db      	mvns	r3, r3
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	4013      	ands	r3, r2
 800637e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	4313      	orrs	r3, r2
 8006390:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d123      	bne.n	80063ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	08da      	lsrs	r2, r3, #3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3208      	adds	r2, #8
 80063ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	220f      	movs	r2, #15
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	43db      	mvns	r3, r3
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	4013      	ands	r3, r2
 80063c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	4313      	orrs	r3, r2
 80063dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	08da      	lsrs	r2, r3, #3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3208      	adds	r2, #8
 80063e6:	69b9      	ldr	r1, [r7, #24]
 80063e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	2203      	movs	r2, #3
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	43db      	mvns	r3, r3
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	4013      	ands	r3, r2
 8006402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f003 0203 	and.w	r2, r3, #3
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	4313      	orrs	r3, r2
 8006418:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80a2 	beq.w	8006572 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	4b57      	ldr	r3, [pc, #348]	; (8006590 <HAL_GPIO_Init+0x2e8>)
 8006434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006436:	4a56      	ldr	r2, [pc, #344]	; (8006590 <HAL_GPIO_Init+0x2e8>)
 8006438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800643c:	6453      	str	r3, [r2, #68]	; 0x44
 800643e:	4b54      	ldr	r3, [pc, #336]	; (8006590 <HAL_GPIO_Init+0x2e8>)
 8006440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800644a:	4a52      	ldr	r2, [pc, #328]	; (8006594 <HAL_GPIO_Init+0x2ec>)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	089b      	lsrs	r3, r3, #2
 8006450:	3302      	adds	r3, #2
 8006452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	220f      	movs	r2, #15
 8006462:	fa02 f303 	lsl.w	r3, r2, r3
 8006466:	43db      	mvns	r3, r3
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	4013      	ands	r3, r2
 800646c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a49      	ldr	r2, [pc, #292]	; (8006598 <HAL_GPIO_Init+0x2f0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d019      	beq.n	80064aa <HAL_GPIO_Init+0x202>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a48      	ldr	r2, [pc, #288]	; (800659c <HAL_GPIO_Init+0x2f4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d013      	beq.n	80064a6 <HAL_GPIO_Init+0x1fe>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a47      	ldr	r2, [pc, #284]	; (80065a0 <HAL_GPIO_Init+0x2f8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00d      	beq.n	80064a2 <HAL_GPIO_Init+0x1fa>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a46      	ldr	r2, [pc, #280]	; (80065a4 <HAL_GPIO_Init+0x2fc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d007      	beq.n	800649e <HAL_GPIO_Init+0x1f6>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a45      	ldr	r2, [pc, #276]	; (80065a8 <HAL_GPIO_Init+0x300>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d101      	bne.n	800649a <HAL_GPIO_Init+0x1f2>
 8006496:	2304      	movs	r3, #4
 8006498:	e008      	b.n	80064ac <HAL_GPIO_Init+0x204>
 800649a:	2307      	movs	r3, #7
 800649c:	e006      	b.n	80064ac <HAL_GPIO_Init+0x204>
 800649e:	2303      	movs	r3, #3
 80064a0:	e004      	b.n	80064ac <HAL_GPIO_Init+0x204>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e002      	b.n	80064ac <HAL_GPIO_Init+0x204>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <HAL_GPIO_Init+0x204>
 80064aa:	2300      	movs	r3, #0
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	f002 0203 	and.w	r2, r2, #3
 80064b2:	0092      	lsls	r2, r2, #2
 80064b4:	4093      	lsls	r3, r2
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064bc:	4935      	ldr	r1, [pc, #212]	; (8006594 <HAL_GPIO_Init+0x2ec>)
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	089b      	lsrs	r3, r3, #2
 80064c2:	3302      	adds	r3, #2
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064ca:	4b38      	ldr	r3, [pc, #224]	; (80065ac <HAL_GPIO_Init+0x304>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	43db      	mvns	r3, r3
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	4013      	ands	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064ee:	4a2f      	ldr	r2, [pc, #188]	; (80065ac <HAL_GPIO_Init+0x304>)
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064f4:	4b2d      	ldr	r3, [pc, #180]	; (80065ac <HAL_GPIO_Init+0x304>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	43db      	mvns	r3, r3
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	4013      	ands	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006518:	4a24      	ldr	r2, [pc, #144]	; (80065ac <HAL_GPIO_Init+0x304>)
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800651e:	4b23      	ldr	r3, [pc, #140]	; (80065ac <HAL_GPIO_Init+0x304>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	43db      	mvns	r3, r3
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	4013      	ands	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006542:	4a1a      	ldr	r2, [pc, #104]	; (80065ac <HAL_GPIO_Init+0x304>)
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006548:	4b18      	ldr	r3, [pc, #96]	; (80065ac <HAL_GPIO_Init+0x304>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	43db      	mvns	r3, r3
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	4013      	ands	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800656c:	4a0f      	ldr	r2, [pc, #60]	; (80065ac <HAL_GPIO_Init+0x304>)
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	3301      	adds	r3, #1
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	2b0f      	cmp	r3, #15
 800657c:	f67f aea2 	bls.w	80062c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	3724      	adds	r7, #36	; 0x24
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40023800 	.word	0x40023800
 8006594:	40013800 	.word	0x40013800
 8006598:	40020000 	.word	0x40020000
 800659c:	40020400 	.word	0x40020400
 80065a0:	40020800 	.word	0x40020800
 80065a4:	40020c00 	.word	0x40020c00
 80065a8:	40021000 	.word	0x40021000
 80065ac:	40013c00 	.word	0x40013c00

080065b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	887b      	ldrh	r3, [r7, #2]
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80065c8:	2301      	movs	r3, #1
 80065ca:	73fb      	strb	r3, [r7, #15]
 80065cc:	e001      	b.n	80065d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	807b      	strh	r3, [r7, #2]
 80065ec:	4613      	mov	r3, r2
 80065ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065f0:	787b      	ldrb	r3, [r7, #1]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065f6:	887a      	ldrh	r2, [r7, #2]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065fc:	e003      	b.n	8006606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065fe:	887b      	ldrh	r3, [r7, #2]
 8006600:	041a      	lsls	r2, r3, #16
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	619a      	str	r2, [r3, #24]
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800661e:	4b08      	ldr	r3, [pc, #32]	; (8006640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006620:	695a      	ldr	r2, [r3, #20]
 8006622:	88fb      	ldrh	r3, [r7, #6]
 8006624:	4013      	ands	r3, r2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d006      	beq.n	8006638 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800662a:	4a05      	ldr	r2, [pc, #20]	; (8006640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800662c:	88fb      	ldrh	r3, [r7, #6]
 800662e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	4618      	mov	r0, r3
 8006634:	f7fb fc1e 	bl	8001e74 <HAL_GPIO_EXTI_Callback>
  }
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40013c00 	.word	0x40013c00

08006644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e12b      	b.n	80068ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7fe f892 	bl	8004794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2224      	movs	r2, #36	; 0x24
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0201 	bic.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006696:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066a8:	f002 fbb0 	bl	8008e0c <HAL_RCC_GetPCLK1Freq>
 80066ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	4a81      	ldr	r2, [pc, #516]	; (80068b8 <HAL_I2C_Init+0x274>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d807      	bhi.n	80066c8 <HAL_I2C_Init+0x84>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a80      	ldr	r2, [pc, #512]	; (80068bc <HAL_I2C_Init+0x278>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	bf94      	ite	ls
 80066c0:	2301      	movls	r3, #1
 80066c2:	2300      	movhi	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	e006      	b.n	80066d6 <HAL_I2C_Init+0x92>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4a7d      	ldr	r2, [pc, #500]	; (80068c0 <HAL_I2C_Init+0x27c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	bf94      	ite	ls
 80066d0:	2301      	movls	r3, #1
 80066d2:	2300      	movhi	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e0e7      	b.n	80068ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4a78      	ldr	r2, [pc, #480]	; (80068c4 <HAL_I2C_Init+0x280>)
 80066e2:	fba2 2303 	umull	r2, r3, r2, r3
 80066e6:	0c9b      	lsrs	r3, r3, #18
 80066e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4a6a      	ldr	r2, [pc, #424]	; (80068b8 <HAL_I2C_Init+0x274>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d802      	bhi.n	8006718 <HAL_I2C_Init+0xd4>
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	3301      	adds	r3, #1
 8006716:	e009      	b.n	800672c <HAL_I2C_Init+0xe8>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800671e:	fb02 f303 	mul.w	r3, r2, r3
 8006722:	4a69      	ldr	r2, [pc, #420]	; (80068c8 <HAL_I2C_Init+0x284>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	099b      	lsrs	r3, r3, #6
 800672a:	3301      	adds	r3, #1
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	430b      	orrs	r3, r1
 8006732:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800673e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	495c      	ldr	r1, [pc, #368]	; (80068b8 <HAL_I2C_Init+0x274>)
 8006748:	428b      	cmp	r3, r1
 800674a:	d819      	bhi.n	8006780 <HAL_I2C_Init+0x13c>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	1e59      	subs	r1, r3, #1
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	fbb1 f3f3 	udiv	r3, r1, r3
 800675a:	1c59      	adds	r1, r3, #1
 800675c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006760:	400b      	ands	r3, r1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <HAL_I2C_Init+0x138>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	1e59      	subs	r1, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	fbb1 f3f3 	udiv	r3, r1, r3
 8006774:	3301      	adds	r3, #1
 8006776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800677a:	e051      	b.n	8006820 <HAL_I2C_Init+0x1dc>
 800677c:	2304      	movs	r3, #4
 800677e:	e04f      	b.n	8006820 <HAL_I2C_Init+0x1dc>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d111      	bne.n	80067ac <HAL_I2C_Init+0x168>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	1e58      	subs	r0, r3, #1
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6859      	ldr	r1, [r3, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	440b      	add	r3, r1
 8006796:	fbb0 f3f3 	udiv	r3, r0, r3
 800679a:	3301      	adds	r3, #1
 800679c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bf0c      	ite	eq
 80067a4:	2301      	moveq	r3, #1
 80067a6:	2300      	movne	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	e012      	b.n	80067d2 <HAL_I2C_Init+0x18e>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	1e58      	subs	r0, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6859      	ldr	r1, [r3, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	0099      	lsls	r1, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	fbb0 f3f3 	udiv	r3, r0, r3
 80067c2:	3301      	adds	r3, #1
 80067c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bf0c      	ite	eq
 80067cc:	2301      	moveq	r3, #1
 80067ce:	2300      	movne	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <HAL_I2C_Init+0x196>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e022      	b.n	8006820 <HAL_I2C_Init+0x1dc>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10e      	bne.n	8006800 <HAL_I2C_Init+0x1bc>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	1e58      	subs	r0, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6859      	ldr	r1, [r3, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	440b      	add	r3, r1
 80067f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80067f4:	3301      	adds	r3, #1
 80067f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fe:	e00f      	b.n	8006820 <HAL_I2C_Init+0x1dc>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	1e58      	subs	r0, r3, #1
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6859      	ldr	r1, [r3, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	0099      	lsls	r1, r3, #2
 8006810:	440b      	add	r3, r1
 8006812:	fbb0 f3f3 	udiv	r3, r0, r3
 8006816:	3301      	adds	r3, #1
 8006818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800681c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	6809      	ldr	r1, [r1, #0]
 8006824:	4313      	orrs	r3, r2
 8006826:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69da      	ldr	r2, [r3, #28]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800684e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6911      	ldr	r1, [r2, #16]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	68d2      	ldr	r2, [r2, #12]
 800685a:	4311      	orrs	r1, r2
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6812      	ldr	r2, [r2, #0]
 8006860:	430b      	orrs	r3, r1
 8006862:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	000186a0 	.word	0x000186a0
 80068bc:	001e847f 	.word	0x001e847f
 80068c0:	003d08ff 	.word	0x003d08ff
 80068c4:	431bde83 	.word	0x431bde83
 80068c8:	10624dd3 	.word	0x10624dd3

080068cc <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	607a      	str	r2, [r7, #4]
 80068d6:	461a      	mov	r2, r3
 80068d8:	460b      	mov	r3, r1
 80068da:	817b      	strh	r3, [r7, #10]
 80068dc:	4613      	mov	r3, r2
 80068de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	f040 8085 	bne.w	80069fc <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80068f2:	4b46      	ldr	r3, [pc, #280]	; (8006a0c <HAL_I2C_Master_Transmit_IT+0x140>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	08db      	lsrs	r3, r3, #3
 80068f8:	4a45      	ldr	r2, [pc, #276]	; (8006a10 <HAL_I2C_Master_Transmit_IT+0x144>)
 80068fa:	fba2 2303 	umull	r2, r3, r2, r3
 80068fe:	0a1a      	lsrs	r2, r3, #8
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009a      	lsls	r2, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	3b01      	subs	r3, #1
 8006910:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d116      	bne.n	8006946 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2220      	movs	r2, #32
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	f043 0220 	orr.w	r2, r3, #32
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e05b      	b.n	80069fe <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b02      	cmp	r3, #2
 8006952:	d0db      	beq.n	800690c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HAL_I2C_Master_Transmit_IT+0x96>
 800695e:	2302      	movs	r3, #2
 8006960:	e04d      	b.n	80069fe <HAL_I2C_Master_Transmit_IT+0x132>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b01      	cmp	r3, #1
 8006976:	d007      	beq.n	8006988 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2221      	movs	r2, #33	; 0x21
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2210      	movs	r2, #16
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	893a      	ldrh	r2, [r7, #8]
 80069b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4a13      	ldr	r2, [pc, #76]	; (8006a14 <HAL_I2C_Master_Transmit_IT+0x148>)
 80069c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80069ca:	897a      	ldrh	r2, [r7, #10]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80069e6:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069f6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e000      	b.n	80069fe <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80069fc:	2302      	movs	r3, #2
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	200002ac 	.word	0x200002ac
 8006a10:	14f8b589 	.word	0x14f8b589
 8006a14:	ffff0000 	.word	0xffff0000

08006a18 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	461a      	mov	r2, r3
 8006a24:	460b      	mov	r3, r1
 8006a26:	817b      	strh	r3, [r7, #10]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	f040 808d 	bne.w	8006b58 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a3e:	4b4a      	ldr	r3, [pc, #296]	; (8006b68 <HAL_I2C_Master_Receive_IT+0x150>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	08db      	lsrs	r3, r3, #3
 8006a44:	4a49      	ldr	r2, [pc, #292]	; (8006b6c <HAL_I2C_Master_Receive_IT+0x154>)
 8006a46:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4a:	0a1a      	lsrs	r2, r3, #8
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009a      	lsls	r2, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d116      	bne.n	8006a92 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f043 0220 	orr.w	r2, r3, #32
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e063      	b.n	8006b5a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d0db      	beq.n	8006a58 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d101      	bne.n	8006aae <HAL_I2C_Master_Receive_IT+0x96>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e055      	b.n	8006b5a <HAL_I2C_Master_Receive_IT+0x142>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d007      	beq.n	8006ad4 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2222      	movs	r2, #34	; 0x22
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2210      	movs	r2, #16
 8006af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	893a      	ldrh	r2, [r7, #8]
 8006b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4a17      	ldr	r2, [pc, #92]	; (8006b70 <HAL_I2C_Master_Receive_IT+0x158>)
 8006b14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006b16:	897a      	ldrh	r2, [r7, #10]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006b32:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b42:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b52:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e000      	b.n	8006b5a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006b58:	2302      	movs	r3, #2
  }
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	200002ac 	.word	0x200002ac
 8006b6c:	14f8b589 	.word	0x14f8b589
 8006b70:	ffff0000 	.word	0xffff0000

08006b74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b9c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d003      	beq.n	8006bac <HAL_I2C_EV_IRQHandler+0x38>
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	2b40      	cmp	r3, #64	; 0x40
 8006ba8:	f040 80c1 	bne.w	8006d2e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10d      	bne.n	8006be2 <HAL_I2C_EV_IRQHandler+0x6e>
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006bcc:	d003      	beq.n	8006bd6 <HAL_I2C_EV_IRQHandler+0x62>
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006bd4:	d101      	bne.n	8006bda <HAL_I2C_EV_IRQHandler+0x66>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <HAL_I2C_EV_IRQHandler+0x68>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	f000 8132 	beq.w	8006e46 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00c      	beq.n	8006c06 <HAL_I2C_EV_IRQHandler+0x92>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	0a5b      	lsrs	r3, r3, #9
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d006      	beq.n	8006c06 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 fc7b 	bl	80084f4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fd83 	bl	800770a <I2C_Master_SB>
 8006c04:	e092      	b.n	8006d2c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	08db      	lsrs	r3, r3, #3
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <HAL_I2C_EV_IRQHandler+0xb2>
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	0a5b      	lsrs	r3, r3, #9
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fdf9 	bl	8007816 <I2C_Master_ADD10>
 8006c24:	e082      	b.n	8006d2c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	085b      	lsrs	r3, r3, #1
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <HAL_I2C_EV_IRQHandler+0xd2>
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	0a5b      	lsrs	r3, r3, #9
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fe13 	bl	800786a <I2C_Master_ADDR>
 8006c44:	e072      	b.n	8006d2c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	089b      	lsrs	r3, r3, #2
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d03b      	beq.n	8006cca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c60:	f000 80f3 	beq.w	8006e4a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	09db      	lsrs	r3, r3, #7
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00f      	beq.n	8006c90 <HAL_I2C_EV_IRQHandler+0x11c>
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	0a9b      	lsrs	r3, r3, #10
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d009      	beq.n	8006c90 <HAL_I2C_EV_IRQHandler+0x11c>
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	089b      	lsrs	r3, r3, #2
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d103      	bne.n	8006c90 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f9f3 	bl	8007074 <I2C_MasterTransmit_TXE>
 8006c8e:	e04d      	b.n	8006d2c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	089b      	lsrs	r3, r3, #2
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80d6 	beq.w	8006e4a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	0a5b      	lsrs	r3, r3, #9
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 80cf 	beq.w	8006e4a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	2b21      	cmp	r3, #33	; 0x21
 8006cb0:	d103      	bne.n	8006cba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa7a 	bl	80071ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cb8:	e0c7      	b.n	8006e4a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	2b40      	cmp	r3, #64	; 0x40
 8006cbe:	f040 80c4 	bne.w	8006e4a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fae8 	bl	8007298 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cc8:	e0bf      	b.n	8006e4a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd8:	f000 80b7 	beq.w	8006e4a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	099b      	lsrs	r3, r3, #6
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00f      	beq.n	8006d08 <HAL_I2C_EV_IRQHandler+0x194>
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	0a9b      	lsrs	r3, r3, #10
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d009      	beq.n	8006d08 <HAL_I2C_EV_IRQHandler+0x194>
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	089b      	lsrs	r3, r3, #2
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fb5d 	bl	80073c0 <I2C_MasterReceive_RXNE>
 8006d06:	e011      	b.n	8006d2c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	089b      	lsrs	r3, r3, #2
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 809a 	beq.w	8006e4a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	0a5b      	lsrs	r3, r3, #9
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 8093 	beq.w	8006e4a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fc06 	bl	8007536 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d2a:	e08e      	b.n	8006e4a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006d2c:	e08d      	b.n	8006e4a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	e007      	b.n	8006d50 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d012      	beq.n	8006d82 <HAL_I2C_EV_IRQHandler+0x20e>
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	0a5b      	lsrs	r3, r3, #9
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00c      	beq.n	8006d82 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006d78:	69b9      	ldr	r1, [r7, #24]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 ffc4 	bl	8007d08 <I2C_Slave_ADDR>
 8006d80:	e066      	b.n	8006e50 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	091b      	lsrs	r3, r3, #4
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <HAL_I2C_EV_IRQHandler+0x22e>
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	0a5b      	lsrs	r3, r3, #9
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fffe 	bl	8007d9c <I2C_Slave_STOPF>
 8006da0:	e056      	b.n	8006e50 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b21      	cmp	r3, #33	; 0x21
 8006da6:	d002      	beq.n	8006dae <HAL_I2C_EV_IRQHandler+0x23a>
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	2b29      	cmp	r3, #41	; 0x29
 8006dac:	d125      	bne.n	8006dfa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	09db      	lsrs	r3, r3, #7
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00f      	beq.n	8006dda <HAL_I2C_EV_IRQHandler+0x266>
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	0a9b      	lsrs	r3, r3, #10
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <HAL_I2C_EV_IRQHandler+0x266>
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	089b      	lsrs	r3, r3, #2
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d103      	bne.n	8006dda <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 feda 	bl	8007b8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006dd8:	e039      	b.n	8006e4e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	089b      	lsrs	r3, r3, #2
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d033      	beq.n	8006e4e <HAL_I2C_EV_IRQHandler+0x2da>
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	0a5b      	lsrs	r3, r3, #9
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d02d      	beq.n	8006e4e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 ff07 	bl	8007c06 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006df8:	e029      	b.n	8006e4e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	099b      	lsrs	r3, r3, #6
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00f      	beq.n	8006e26 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	0a9b      	lsrs	r3, r3, #10
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	089b      	lsrs	r3, r3, #2
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d103      	bne.n	8006e26 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 ff12 	bl	8007c48 <I2C_SlaveReceive_RXNE>
 8006e24:	e014      	b.n	8006e50 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	089b      	lsrs	r3, r3, #2
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00e      	beq.n	8006e50 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	0a5b      	lsrs	r3, r3, #9
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 ff40 	bl	8007cc4 <I2C_SlaveReceive_BTF>
 8006e44:	e004      	b.n	8006e50 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006e46:	bf00      	nop
 8006e48:	e002      	b.n	8006e50 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e4a:	bf00      	nop
 8006e4c:	e000      	b.n	8006e50 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e4e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006e50:	3720      	adds	r7, #32
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b08a      	sub	sp, #40	; 0x28
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e78:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	0a1b      	lsrs	r3, r3, #8
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00e      	beq.n	8006ea4 <HAL_I2C_ER_IRQHandler+0x4e>
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	0a1b      	lsrs	r3, r3, #8
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	f043 0301 	orr.w	r3, r3, #1
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ea2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	0a5b      	lsrs	r3, r3, #9
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00e      	beq.n	8006ece <HAL_I2C_ER_IRQHandler+0x78>
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d008      	beq.n	8006ece <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	f043 0302 	orr.w	r3, r3, #2
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006ecc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	0a9b      	lsrs	r3, r3, #10
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d03f      	beq.n	8006f5a <HAL_I2C_ER_IRQHandler+0x104>
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	0a1b      	lsrs	r3, r3, #8
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d039      	beq.n	8006f5a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006ee6:	7efb      	ldrb	r3, [r7, #27]
 8006ee8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006f00:	7ebb      	ldrb	r3, [r7, #26]
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	d112      	bne.n	8006f2c <HAL_I2C_ER_IRQHandler+0xd6>
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10f      	bne.n	8006f2c <HAL_I2C_ER_IRQHandler+0xd6>
 8006f0c:	7cfb      	ldrb	r3, [r7, #19]
 8006f0e:	2b21      	cmp	r3, #33	; 0x21
 8006f10:	d008      	beq.n	8006f24 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006f12:	7cfb      	ldrb	r3, [r7, #19]
 8006f14:	2b29      	cmp	r3, #41	; 0x29
 8006f16:	d005      	beq.n	8006f24 <HAL_I2C_ER_IRQHandler+0xce>
 8006f18:	7cfb      	ldrb	r3, [r7, #19]
 8006f1a:	2b28      	cmp	r3, #40	; 0x28
 8006f1c:	d106      	bne.n	8006f2c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b21      	cmp	r3, #33	; 0x21
 8006f22:	d103      	bne.n	8006f2c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 f869 	bl	8007ffc <I2C_Slave_AF>
 8006f2a:	e016      	b.n	8006f5a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f34:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	f043 0304 	orr.w	r3, r3, #4
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006f3e:	7efb      	ldrb	r3, [r7, #27]
 8006f40:	2b10      	cmp	r3, #16
 8006f42:	d002      	beq.n	8006f4a <HAL_I2C_ER_IRQHandler+0xf4>
 8006f44:	7efb      	ldrb	r3, [r7, #27]
 8006f46:	2b40      	cmp	r3, #64	; 0x40
 8006f48:	d107      	bne.n	8006f5a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f58:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	0adb      	lsrs	r3, r3, #11
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00e      	beq.n	8006f84 <HAL_I2C_ER_IRQHandler+0x12e>
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	0a1b      	lsrs	r3, r3, #8
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d008      	beq.n	8006f84 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	f043 0308 	orr.w	r3, r3, #8
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006f82:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d008      	beq.n	8006f9c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 f8a0 	bl	80080dc <I2C_ITError>
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	3728      	adds	r7, #40	; 0x28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	70fb      	strb	r3, [r7, #3]
 8007000:	4613      	mov	r3, r2
 8007002:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007082:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800708a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d150      	bne.n	800713c <I2C_MasterTransmit_TXE+0xc8>
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	2b21      	cmp	r3, #33	; 0x21
 800709e:	d14d      	bne.n	800713c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b08      	cmp	r3, #8
 80070a4:	d01d      	beq.n	80070e2 <I2C_MasterTransmit_TXE+0x6e>
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d01a      	beq.n	80070e2 <I2C_MasterTransmit_TXE+0x6e>
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070b2:	d016      	beq.n	80070e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2211      	movs	r2, #17
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff ff62 	bl	8006fa4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070e0:	e060      	b.n	80071a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007100:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d107      	bne.n	800712c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff ff7d 	bl	8007024 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800712a:	e03b      	b.n	80071a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff ff35 	bl	8006fa4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800713a:	e033      	b.n	80071a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b21      	cmp	r3, #33	; 0x21
 8007140:	d005      	beq.n	800714e <I2C_MasterTransmit_TXE+0xda>
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	2b40      	cmp	r3, #64	; 0x40
 8007146:	d12d      	bne.n	80071a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	2b22      	cmp	r3, #34	; 0x22
 800714c:	d12a      	bne.n	80071a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007152:	b29b      	uxth	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d108      	bne.n	800716a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007166:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007168:	e01c      	b.n	80071a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b40      	cmp	r3, #64	; 0x40
 8007174:	d103      	bne.n	800717e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f88e 	bl	8007298 <I2C_MemoryTransmit_TXE_BTF>
}
 800717c:	e012      	b.n	80071a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	781a      	ldrb	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b01      	subs	r3, #1
 800719c:	b29a      	uxth	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80071a2:	e7ff      	b.n	80071a4 <I2C_MasterTransmit_TXE+0x130>
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b21      	cmp	r3, #33	; 0x21
 80071c4:	d164      	bne.n	8007290 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d012      	beq.n	80071f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	781a      	ldrb	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	3b01      	subs	r3, #1
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80071f4:	e04c      	b.n	8007290 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d01d      	beq.n	8007238 <I2C_MasterTransmit_BTF+0x8c>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d01a      	beq.n	8007238 <I2C_MasterTransmit_BTF+0x8c>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007208:	d016      	beq.n	8007238 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007218:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2211      	movs	r2, #17
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2220      	movs	r2, #32
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff feb7 	bl	8006fa4 <HAL_I2C_MasterTxCpltCallback>
}
 8007236:	e02b      	b.n	8007290 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007246:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007256:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d107      	bne.n	8007282 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7ff fed2 	bl	8007024 <HAL_I2C_MemTxCpltCallback>
}
 8007280:	e006      	b.n	8007290 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff fe8a 	bl	8006fa4 <HAL_I2C_MasterTxCpltCallback>
}
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d11d      	bne.n	80072ec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d10b      	bne.n	80072d0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c8:	1c9a      	adds	r2, r3, #2
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80072ce:	e073      	b.n	80073b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	121b      	asrs	r3, r3, #8
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80072ea:	e065      	b.n	80073b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d10b      	bne.n	800730c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	651a      	str	r2, [r3, #80]	; 0x50
}
 800730a:	e055      	b.n	80073b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007310:	2b02      	cmp	r3, #2
 8007312:	d151      	bne.n	80073b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	2b22      	cmp	r3, #34	; 0x22
 8007318:	d10d      	bne.n	8007336 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007328:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007334:	e040      	b.n	80073b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29b      	uxth	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d015      	beq.n	800736c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	2b21      	cmp	r3, #33	; 0x21
 8007344:	d112      	bne.n	800736c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	781a      	ldrb	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007360:	b29b      	uxth	r3, r3
 8007362:	3b01      	subs	r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800736a:	e025      	b.n	80073b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d120      	bne.n	80073b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b21      	cmp	r3, #33	; 0x21
 800737a:	d11d      	bne.n	80073b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800738a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800739a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff fe36 	bl	8007024 <HAL_I2C_MemTxCpltCallback>
}
 80073b8:	bf00      	nop
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b22      	cmp	r3, #34	; 0x22
 80073d2:	f040 80ac 	bne.w	800752e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073da:	b29b      	uxth	r3, r3
 80073dc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d921      	bls.n	8007428 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691a      	ldr	r2, [r3, #16]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	b2d2      	uxtb	r2, r2
 80073f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007400:	b29b      	uxth	r3, r3
 8007402:	3b01      	subs	r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800740e:	b29b      	uxth	r3, r3
 8007410:	2b03      	cmp	r3, #3
 8007412:	f040 808c 	bne.w	800752e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007424:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007426:	e082      	b.n	800752e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	2b02      	cmp	r3, #2
 800742e:	d075      	beq.n	800751c <I2C_MasterReceive_RXNE+0x15c>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d002      	beq.n	800743c <I2C_MasterReceive_RXNE+0x7c>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d16f      	bne.n	800751c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 f827 	bl	8008490 <I2C_WaitOnSTOPRequestThroughIT>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d142      	bne.n	80074ce <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007456:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007466:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	691a      	ldr	r2, [r3, #16]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007484:	b29b      	uxth	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	b29a      	uxth	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d10a      	bne.n	80074b8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff fdc1 	bl	8007038 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80074b6:	e03a      	b.n	800752e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2212      	movs	r2, #18
 80074c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff fd76 	bl	8006fb8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80074cc:	e02f      	b.n	800752e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691a      	ldr	r2, [r3, #16]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	b2d2      	uxtb	r2, r2
 80074ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	3b01      	subs	r3, #1
 80074fe:	b29a      	uxth	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2220      	movs	r2, #32
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff fd99 	bl	800704c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800751a:	e008      	b.n	800752e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800752a:	605a      	str	r2, [r3, #4]
}
 800752c:	e7ff      	b.n	800752e <I2C_MasterReceive_RXNE+0x16e>
 800752e:	bf00      	nop
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007542:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007548:	b29b      	uxth	r3, r3
 800754a:	2b04      	cmp	r3, #4
 800754c:	d11b      	bne.n	8007586 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800755c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	691a      	ldr	r2, [r3, #16]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b01      	subs	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007584:	e0bd      	b.n	8007702 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758a:	b29b      	uxth	r3, r3
 800758c:	2b03      	cmp	r3, #3
 800758e:	d129      	bne.n	80075e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800759e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d00a      	beq.n	80075bc <I2C_MasterReceive_BTF+0x86>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d007      	beq.n	80075bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	b2d2      	uxtb	r2, r2
 80075c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d8:	b29b      	uxth	r3, r3
 80075da:	3b01      	subs	r3, #1
 80075dc:	b29a      	uxth	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075e2:	e08e      	b.n	8007702 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d176      	bne.n	80076dc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d002      	beq.n	80075fa <I2C_MasterReceive_BTF+0xc4>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b10      	cmp	r3, #16
 80075f8:	d108      	bne.n	800760c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	e019      	b.n	8007640 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b04      	cmp	r3, #4
 8007610:	d002      	beq.n	8007618 <I2C_MasterReceive_BTF+0xe2>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d108      	bne.n	800762a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	e00a      	b.n	8007640 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b10      	cmp	r3, #16
 800762e:	d007      	beq.n	8007640 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800763e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	691a      	ldr	r2, [r3, #16]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765c:	b29b      	uxth	r3, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800769a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b40      	cmp	r3, #64	; 0x40
 80076ae:	d10a      	bne.n	80076c6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff fcba 	bl	8007038 <HAL_I2C_MemRxCpltCallback>
}
 80076c4:	e01d      	b.n	8007702 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2212      	movs	r2, #18
 80076d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff fc6f 	bl	8006fb8 <HAL_I2C_MasterRxCpltCallback>
}
 80076da:	e012      	b.n	8007702 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691a      	ldr	r2, [r3, #16]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	b2d2      	uxtb	r2, r2
 80076e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	3b01      	subs	r3, #1
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007702:	bf00      	nop
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d117      	bne.n	800774e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007722:	2b00      	cmp	r3, #0
 8007724:	d109      	bne.n	800773a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772a:	b2db      	uxtb	r3, r3
 800772c:	461a      	mov	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007736:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007738:	e067      	b.n	800780a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f043 0301 	orr.w	r3, r3, #1
 8007744:	b2da      	uxtb	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	611a      	str	r2, [r3, #16]
}
 800774c:	e05d      	b.n	800780a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007756:	d133      	bne.n	80077c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b21      	cmp	r3, #33	; 0x21
 8007762:	d109      	bne.n	8007778 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007768:	b2db      	uxtb	r3, r3
 800776a:	461a      	mov	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007774:	611a      	str	r2, [r3, #16]
 8007776:	e008      	b.n	800778a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f043 0301 	orr.w	r3, r3, #1
 8007782:	b2da      	uxtb	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <I2C_Master_SB+0x92>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d108      	bne.n	80077ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d032      	beq.n	800780a <I2C_Master_SB+0x100>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d02d      	beq.n	800780a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077bc:	605a      	str	r2, [r3, #4]
}
 80077be:	e024      	b.n	800780a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10e      	bne.n	80077e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	11db      	asrs	r3, r3, #7
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f003 0306 	and.w	r3, r3, #6
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f063 030f 	orn	r3, r3, #15
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	611a      	str	r2, [r3, #16]
}
 80077e4:	e011      	b.n	800780a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d10d      	bne.n	800780a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	11db      	asrs	r3, r3, #7
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 0306 	and.w	r3, r3, #6
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f063 030e 	orn	r3, r3, #14
 8007802:	b2da      	uxtb	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	611a      	str	r2, [r3, #16]
}
 800780a:	bf00      	nop
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007822:	b2da      	uxtb	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782e:	2b00      	cmp	r3, #0
 8007830:	d004      	beq.n	800783c <I2C_Master_ADD10+0x26>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007838:	2b00      	cmp	r3, #0
 800783a:	d108      	bne.n	800784e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00c      	beq.n	800785e <I2C_Master_ADD10+0x48>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d007      	beq.n	800785e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800785c:	605a      	str	r2, [r3, #4]
  }
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800786a:	b480      	push	{r7}
 800786c:	b091      	sub	sp, #68	; 0x44
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007878:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b22      	cmp	r3, #34	; 0x22
 8007892:	f040 8169 	bne.w	8007b68 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10f      	bne.n	80078be <I2C_Master_ADDR+0x54>
 800789e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d10b      	bne.n	80078be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a6:	2300      	movs	r3, #0
 80078a8:	633b      	str	r3, [r7, #48]	; 0x30
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	633b      	str	r3, [r7, #48]	; 0x30
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	633b      	str	r3, [r7, #48]	; 0x30
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	e160      	b.n	8007b80 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d11d      	bne.n	8007902 <I2C_Master_ADDR+0x98>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80078ce:	d118      	bne.n	8007902 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078d0:	2300      	movs	r3, #0
 80078d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	651a      	str	r2, [r3, #80]	; 0x50
 8007900:	e13e      	b.n	8007b80 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007906:	b29b      	uxth	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	d113      	bne.n	8007934 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800790c:	2300      	movs	r3, #0
 800790e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	e115      	b.n	8007b60 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b01      	cmp	r3, #1
 800793c:	f040 808a 	bne.w	8007a54 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007942:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007946:	d137      	bne.n	80079b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007956:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007966:	d113      	bne.n	8007990 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007976:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007978:	2300      	movs	r3, #0
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	627b      	str	r3, [r7, #36]	; 0x24
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	e0e7      	b.n	8007b60 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007990:	2300      	movs	r3, #0
 8007992:	623b      	str	r3, [r7, #32]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	623b      	str	r3, [r7, #32]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	623b      	str	r3, [r7, #32]
 80079a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	e0d3      	b.n	8007b60 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80079b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ba:	2b08      	cmp	r3, #8
 80079bc:	d02e      	beq.n	8007a1c <I2C_Master_ADDR+0x1b2>
 80079be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c0:	2b20      	cmp	r3, #32
 80079c2:	d02b      	beq.n	8007a1c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80079c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c6:	2b12      	cmp	r3, #18
 80079c8:	d102      	bne.n	80079d0 <I2C_Master_ADDR+0x166>
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d125      	bne.n	8007a1c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80079d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d00e      	beq.n	80079f4 <I2C_Master_ADDR+0x18a>
 80079d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d00b      	beq.n	80079f4 <I2C_Master_ADDR+0x18a>
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	2b10      	cmp	r3, #16
 80079e0:	d008      	beq.n	80079f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	e007      	b.n	8007a04 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a02:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a04:	2300      	movs	r3, #0
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	61fb      	str	r3, [r7, #28]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	61fb      	str	r3, [r7, #28]
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	e0a1      	b.n	8007b60 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	61bb      	str	r3, [r7, #24]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	61bb      	str	r3, [r7, #24]
 8007a40:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	e085      	b.n	8007b60 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d14d      	bne.n	8007afa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d016      	beq.n	8007a92 <I2C_Master_ADDR+0x228>
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d013      	beq.n	8007a92 <I2C_Master_ADDR+0x228>
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	2b10      	cmp	r3, #16
 8007a6e:	d010      	beq.n	8007a92 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a7e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	e007      	b.n	8007aa2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007aa0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab0:	d117      	bne.n	8007ae2 <I2C_Master_ADDR+0x278>
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ab8:	d00b      	beq.n	8007ad2 <I2C_Master_ADDR+0x268>
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d008      	beq.n	8007ad2 <I2C_Master_ADDR+0x268>
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d005      	beq.n	8007ad2 <I2C_Master_ADDR+0x268>
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	2b10      	cmp	r3, #16
 8007aca:	d002      	beq.n	8007ad2 <I2C_Master_ADDR+0x268>
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d107      	bne.n	8007ae2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ae0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	e032      	b.n	8007b60 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b08:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b18:	d117      	bne.n	8007b4a <I2C_Master_ADDR+0x2e0>
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b20:	d00b      	beq.n	8007b3a <I2C_Master_ADDR+0x2d0>
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d008      	beq.n	8007b3a <I2C_Master_ADDR+0x2d0>
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	2b08      	cmp	r3, #8
 8007b2c:	d005      	beq.n	8007b3a <I2C_Master_ADDR+0x2d0>
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	2b10      	cmp	r3, #16
 8007b32:	d002      	beq.n	8007b3a <I2C_Master_ADDR+0x2d0>
 8007b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	d107      	bne.n	8007b4a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	613b      	str	r3, [r7, #16]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	613b      	str	r3, [r7, #16]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	613b      	str	r3, [r7, #16]
 8007b5e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007b66:	e00b      	b.n	8007b80 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
}
 8007b7e:	e7ff      	b.n	8007b80 <I2C_Master_ADDR+0x316>
 8007b80:	bf00      	nop
 8007b82:	3744      	adds	r7, #68	; 0x44
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d02b      	beq.n	8007bfe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	781a      	ldrb	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d114      	bne.n	8007bfe <I2C_SlaveTransmit_TXE+0x72>
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
 8007bd6:	2b29      	cmp	r3, #41	; 0x29
 8007bd8:	d111      	bne.n	8007bfe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2221      	movs	r2, #33	; 0x21
 8007bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2228      	movs	r2, #40	; 0x28
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff f9e7 	bl	8006fcc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d011      	beq.n	8007c3c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	781a      	ldrb	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	3b01      	subs	r3, #1
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d02c      	beq.n	8007cbc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d114      	bne.n	8007cbc <I2C_SlaveReceive_RXNE+0x74>
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	2b2a      	cmp	r3, #42	; 0x2a
 8007c96:	d111      	bne.n	8007cbc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ca6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2222      	movs	r2, #34	; 0x22
 8007cac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2228      	movs	r2, #40	; 0x28
 8007cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff f992 	bl	8006fe0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d012      	beq.n	8007cfc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	691a      	ldr	r2, [r3, #16]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	b2d2      	uxtb	r2, r2
 8007ce2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d22:	2b28      	cmp	r3, #40	; 0x28
 8007d24:	d127      	bne.n	8007d76 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d34:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	089b      	lsrs	r3, r3, #2
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007d42:	2301      	movs	r3, #1
 8007d44:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	09db      	lsrs	r3, r3, #7
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d103      	bne.n	8007d5a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	81bb      	strh	r3, [r7, #12]
 8007d58:	e002      	b.n	8007d60 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007d68:	89ba      	ldrh	r2, [r7, #12]
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff f940 	bl	8006ff4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007d74:	e00e      	b.n	8007d94 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d76:	2300      	movs	r3, #0
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	60bb      	str	r3, [r7, #8]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	60bb      	str	r3, [r7, #8]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007d94:	bf00      	nop
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007daa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007dba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60bb      	str	r3, [r7, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	60bb      	str	r3, [r7, #8]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0201 	orr.w	r2, r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007de8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df8:	d172      	bne.n	8007ee0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	2b22      	cmp	r3, #34	; 0x22
 8007dfe:	d002      	beq.n	8007e06 <I2C_Slave_STOPF+0x6a>
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	2b2a      	cmp	r3, #42	; 0x2a
 8007e04:	d135      	bne.n	8007e72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	f043 0204 	orr.w	r2, r3, #4
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe f938 	bl	80060b4 <HAL_DMA_GetState>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d049      	beq.n	8007ede <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	4a69      	ldr	r2, [pc, #420]	; (8007ff4 <I2C_Slave_STOPF+0x258>)
 8007e50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fd ff80 	bl	8005d5c <HAL_DMA_Abort_IT>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d03d      	beq.n	8007ede <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e70:	e035      	b.n	8007ede <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d005      	beq.n	8007e96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8e:	f043 0204 	orr.w	r2, r3, #4
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ea4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe f902 	bl	80060b4 <HAL_DMA_GetState>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d014      	beq.n	8007ee0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eba:	4a4e      	ldr	r2, [pc, #312]	; (8007ff4 <I2C_Slave_STOPF+0x258>)
 8007ebc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fd ff4a 	bl	8005d5c <HAL_DMA_Abort_IT>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d008      	beq.n	8007ee0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4798      	blx	r3
 8007edc:	e000      	b.n	8007ee0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ede:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d03e      	beq.n	8007f68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d112      	bne.n	8007f1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	691a      	ldr	r2, [r3, #16]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	b2d2      	uxtb	r2, r2
 8007f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f28:	2b40      	cmp	r3, #64	; 0x40
 8007f2a:	d112      	bne.n	8007f52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691a      	ldr	r2, [r3, #16]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	b2d2      	uxtb	r2, r2
 8007f38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	f043 0204 	orr.w	r2, r3, #4
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f8b3 	bl	80080dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007f76:	e039      	b.n	8007fec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f7c:	d109      	bne.n	8007f92 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2228      	movs	r2, #40	; 0x28
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff f827 	bl	8006fe0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b28      	cmp	r3, #40	; 0x28
 8007f9c:	d111      	bne.n	8007fc2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a15      	ldr	r2, [pc, #84]	; (8007ff8 <I2C_Slave_STOPF+0x25c>)
 8007fa2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2220      	movs	r2, #32
 8007fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff f828 	bl	8007010 <HAL_I2C_ListenCpltCallback>
}
 8007fc0:	e014      	b.n	8007fec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc6:	2b22      	cmp	r3, #34	; 0x22
 8007fc8:	d002      	beq.n	8007fd0 <I2C_Slave_STOPF+0x234>
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
 8007fcc:	2b22      	cmp	r3, #34	; 0x22
 8007fce:	d10d      	bne.n	8007fec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7fe fffa 	bl	8006fe0 <HAL_I2C_SlaveRxCpltCallback>
}
 8007fec:	bf00      	nop
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	08008341 	.word	0x08008341
 8007ff8:	ffff0000 	.word	0xffff0000

08007ffc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800800a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b08      	cmp	r3, #8
 8008016:	d002      	beq.n	800801e <I2C_Slave_AF+0x22>
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b20      	cmp	r3, #32
 800801c:	d129      	bne.n	8008072 <I2C_Slave_AF+0x76>
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	2b28      	cmp	r3, #40	; 0x28
 8008022:	d126      	bne.n	8008072 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a2c      	ldr	r2, [pc, #176]	; (80080d8 <I2C_Slave_AF+0xdc>)
 8008028:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008038:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008042:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008052:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2220      	movs	r2, #32
 800805e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7fe ffd0 	bl	8007010 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008070:	e02e      	b.n	80080d0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	2b21      	cmp	r3, #33	; 0x21
 8008076:	d126      	bne.n	80080c6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a17      	ldr	r2, [pc, #92]	; (80080d8 <I2C_Slave_AF+0xdc>)
 800807c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2221      	movs	r2, #33	; 0x21
 8008082:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080bc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fe ff84 	bl	8006fcc <HAL_I2C_SlaveTxCpltCallback>
}
 80080c4:	e004      	b.n	80080d0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080ce:	615a      	str	r2, [r3, #20]
}
 80080d0:	bf00      	nop
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	ffff0000 	.word	0xffff0000

080080dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	2b10      	cmp	r3, #16
 80080f8:	d002      	beq.n	8008100 <I2C_ITError+0x24>
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b40      	cmp	r3, #64	; 0x40
 80080fe:	d10a      	bne.n	8008116 <I2C_ITError+0x3a>
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	2b22      	cmp	r3, #34	; 0x22
 8008104:	d107      	bne.n	8008116 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008114:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008116:	7bfb      	ldrb	r3, [r7, #15]
 8008118:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800811c:	2b28      	cmp	r3, #40	; 0x28
 800811e:	d107      	bne.n	8008130 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2228      	movs	r2, #40	; 0x28
 800812a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800812e:	e015      	b.n	800815c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800813a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800813e:	d00a      	beq.n	8008156 <I2C_ITError+0x7a>
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	2b60      	cmp	r3, #96	; 0x60
 8008144:	d007      	beq.n	8008156 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2220      	movs	r2, #32
 800814a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800816a:	d162      	bne.n	8008232 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800817a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b01      	cmp	r3, #1
 8008188:	d020      	beq.n	80081cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818e:	4a6a      	ldr	r2, [pc, #424]	; (8008338 <I2C_ITError+0x25c>)
 8008190:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008196:	4618      	mov	r0, r3
 8008198:	f7fd fde0 	bl	8005d5c <HAL_DMA_Abort_IT>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 8089 	beq.w	80082b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0201 	bic.w	r2, r2, #1
 80081b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80081c6:	4610      	mov	r0, r2
 80081c8:	4798      	blx	r3
 80081ca:	e074      	b.n	80082b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d0:	4a59      	ldr	r2, [pc, #356]	; (8008338 <I2C_ITError+0x25c>)
 80081d2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fd fdbf 	bl	8005d5c <HAL_DMA_Abort_IT>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d068      	beq.n	80082b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ee:	2b40      	cmp	r3, #64	; 0x40
 80081f0:	d10b      	bne.n	800820a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	691a      	ldr	r2, [r3, #16]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	b2d2      	uxtb	r2, r2
 80081fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	1c5a      	adds	r2, r3, #1
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0201 	bic.w	r2, r2, #1
 8008218:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800822c:	4610      	mov	r0, r2
 800822e:	4798      	blx	r3
 8008230:	e041      	b.n	80082b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b60      	cmp	r3, #96	; 0x60
 800823c:	d125      	bne.n	800828a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008256:	2b40      	cmp	r3, #64	; 0x40
 8008258:	d10b      	bne.n	8008272 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	691a      	ldr	r2, [r3, #16]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008264:	b2d2      	uxtb	r2, r2
 8008266:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0201 	bic.w	r2, r2, #1
 8008280:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fe feec 	bl	8007060 <HAL_I2C_AbortCpltCallback>
 8008288:	e015      	b.n	80082b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008294:	2b40      	cmp	r3, #64	; 0x40
 8008296:	d10b      	bne.n	80082b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691a      	ldr	r2, [r3, #16]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	b2d2      	uxtb	r2, r2
 80082a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7fe fecb 	bl	800704c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10e      	bne.n	80082e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d109      	bne.n	80082e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d104      	bne.n	80082e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d007      	beq.n	80082f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b04      	cmp	r3, #4
 8008306:	d113      	bne.n	8008330 <I2C_ITError+0x254>
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	2b28      	cmp	r3, #40	; 0x28
 800830c:	d110      	bne.n	8008330 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a0a      	ldr	r2, [pc, #40]	; (800833c <I2C_ITError+0x260>)
 8008312:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2220      	movs	r2, #32
 800831e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7fe fe70 	bl	8007010 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008330:	bf00      	nop
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	08008341 	.word	0x08008341
 800833c:	ffff0000 	.word	0xffff0000

08008340 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008350:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008358:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800835a:	4b4b      	ldr	r3, [pc, #300]	; (8008488 <I2C_DMAAbort+0x148>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	08db      	lsrs	r3, r3, #3
 8008360:	4a4a      	ldr	r2, [pc, #296]	; (800848c <I2C_DMAAbort+0x14c>)
 8008362:	fba2 2303 	umull	r2, r3, r2, r3
 8008366:	0a1a      	lsrs	r2, r3, #8
 8008368:	4613      	mov	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	00da      	lsls	r2, r3, #3
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d106      	bne.n	8008388 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	f043 0220 	orr.w	r2, r3, #32
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008386:	e00a      	b.n	800839e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3b01      	subs	r3, #1
 800838c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800839c:	d0ea      	beq.n	8008374 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083aa:	2200      	movs	r2, #0
 80083ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	2200      	movs	r2, #0
 80083bc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2200      	movs	r2, #0
 80083d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e0:	2200      	movs	r2, #0
 80083e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	2200      	movs	r2, #0
 80083f2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0201 	bic.w	r2, r2, #1
 8008402:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b60      	cmp	r3, #96	; 0x60
 800840e:	d10e      	bne.n	800842e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2220      	movs	r2, #32
 8008414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2200      	movs	r2, #0
 8008424:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008426:	6978      	ldr	r0, [r7, #20]
 8008428:	f7fe fe1a 	bl	8007060 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800842c:	e027      	b.n	800847e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800842e:	7cfb      	ldrb	r3, [r7, #19]
 8008430:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008434:	2b28      	cmp	r3, #40	; 0x28
 8008436:	d117      	bne.n	8008468 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0201 	orr.w	r2, r2, #1
 8008446:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008456:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2200      	movs	r2, #0
 800845c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2228      	movs	r2, #40	; 0x28
 8008462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008466:	e007      	b.n	8008478 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2220      	movs	r2, #32
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008478:	6978      	ldr	r0, [r7, #20]
 800847a:	f7fe fde7 	bl	800704c <HAL_I2C_ErrorCallback>
}
 800847e:	bf00      	nop
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	200002ac 	.word	0x200002ac
 800848c:	14f8b589 	.word	0x14f8b589

08008490 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800849c:	4b13      	ldr	r3, [pc, #76]	; (80084ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	08db      	lsrs	r3, r3, #3
 80084a2:	4a13      	ldr	r2, [pc, #76]	; (80084f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80084a4:	fba2 2303 	umull	r2, r3, r2, r3
 80084a8:	0a1a      	lsrs	r2, r3, #8
 80084aa:	4613      	mov	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d107      	bne.n	80084ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	f043 0220 	orr.w	r2, r3, #32
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e008      	b.n	80084e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084dc:	d0e9      	beq.n	80084b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	200002ac 	.word	0x200002ac
 80084f0:	14f8b589 	.word	0x14f8b589

080084f4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008500:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008504:	d103      	bne.n	800850e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800850c:	e007      	b.n	800851e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008516:	d102      	bne.n	800851e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2208      	movs	r2, #8
 800851c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
	...

0800852c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e267      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d075      	beq.n	8008636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800854a:	4b88      	ldr	r3, [pc, #544]	; (800876c <HAL_RCC_OscConfig+0x240>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 030c 	and.w	r3, r3, #12
 8008552:	2b04      	cmp	r3, #4
 8008554:	d00c      	beq.n	8008570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008556:	4b85      	ldr	r3, [pc, #532]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800855e:	2b08      	cmp	r3, #8
 8008560:	d112      	bne.n	8008588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008562:	4b82      	ldr	r3, [pc, #520]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800856a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800856e:	d10b      	bne.n	8008588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008570:	4b7e      	ldr	r3, [pc, #504]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d05b      	beq.n	8008634 <HAL_RCC_OscConfig+0x108>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d157      	bne.n	8008634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e242      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008590:	d106      	bne.n	80085a0 <HAL_RCC_OscConfig+0x74>
 8008592:	4b76      	ldr	r3, [pc, #472]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a75      	ldr	r2, [pc, #468]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	e01d      	b.n	80085dc <HAL_RCC_OscConfig+0xb0>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085a8:	d10c      	bne.n	80085c4 <HAL_RCC_OscConfig+0x98>
 80085aa:	4b70      	ldr	r3, [pc, #448]	; (800876c <HAL_RCC_OscConfig+0x240>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a6f      	ldr	r2, [pc, #444]	; (800876c <HAL_RCC_OscConfig+0x240>)
 80085b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	4b6d      	ldr	r3, [pc, #436]	; (800876c <HAL_RCC_OscConfig+0x240>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a6c      	ldr	r2, [pc, #432]	; (800876c <HAL_RCC_OscConfig+0x240>)
 80085bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	e00b      	b.n	80085dc <HAL_RCC_OscConfig+0xb0>
 80085c4:	4b69      	ldr	r3, [pc, #420]	; (800876c <HAL_RCC_OscConfig+0x240>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a68      	ldr	r2, [pc, #416]	; (800876c <HAL_RCC_OscConfig+0x240>)
 80085ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ce:	6013      	str	r3, [r2, #0]
 80085d0:	4b66      	ldr	r3, [pc, #408]	; (800876c <HAL_RCC_OscConfig+0x240>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a65      	ldr	r2, [pc, #404]	; (800876c <HAL_RCC_OscConfig+0x240>)
 80085d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d013      	beq.n	800860c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085e4:	f7fc fd24 	bl	8005030 <HAL_GetTick>
 80085e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085ea:	e008      	b.n	80085fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085ec:	f7fc fd20 	bl	8005030 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	2b64      	cmp	r3, #100	; 0x64
 80085f8:	d901      	bls.n	80085fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e207      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085fe:	4b5b      	ldr	r3, [pc, #364]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0f0      	beq.n	80085ec <HAL_RCC_OscConfig+0xc0>
 800860a:	e014      	b.n	8008636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800860c:	f7fc fd10 	bl	8005030 <HAL_GetTick>
 8008610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008612:	e008      	b.n	8008626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008614:	f7fc fd0c 	bl	8005030 <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	2b64      	cmp	r3, #100	; 0x64
 8008620:	d901      	bls.n	8008626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e1f3      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008626:	4b51      	ldr	r3, [pc, #324]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1f0      	bne.n	8008614 <HAL_RCC_OscConfig+0xe8>
 8008632:	e000      	b.n	8008636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b00      	cmp	r3, #0
 8008640:	d063      	beq.n	800870a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008642:	4b4a      	ldr	r3, [pc, #296]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 030c 	and.w	r3, r3, #12
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00b      	beq.n	8008666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800864e:	4b47      	ldr	r3, [pc, #284]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008656:	2b08      	cmp	r3, #8
 8008658:	d11c      	bne.n	8008694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800865a:	4b44      	ldr	r3, [pc, #272]	; (800876c <HAL_RCC_OscConfig+0x240>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d116      	bne.n	8008694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008666:	4b41      	ldr	r3, [pc, #260]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d005      	beq.n	800867e <HAL_RCC_OscConfig+0x152>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d001      	beq.n	800867e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e1c7      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800867e:	4b3b      	ldr	r3, [pc, #236]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	00db      	lsls	r3, r3, #3
 800868c:	4937      	ldr	r1, [pc, #220]	; (800876c <HAL_RCC_OscConfig+0x240>)
 800868e:	4313      	orrs	r3, r2
 8008690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008692:	e03a      	b.n	800870a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d020      	beq.n	80086de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800869c:	4b34      	ldr	r3, [pc, #208]	; (8008770 <HAL_RCC_OscConfig+0x244>)
 800869e:	2201      	movs	r2, #1
 80086a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a2:	f7fc fcc5 	bl	8005030 <HAL_GetTick>
 80086a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086a8:	e008      	b.n	80086bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086aa:	f7fc fcc1 	bl	8005030 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d901      	bls.n	80086bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e1a8      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086bc:	4b2b      	ldr	r3, [pc, #172]	; (800876c <HAL_RCC_OscConfig+0x240>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0f0      	beq.n	80086aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086c8:	4b28      	ldr	r3, [pc, #160]	; (800876c <HAL_RCC_OscConfig+0x240>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	00db      	lsls	r3, r3, #3
 80086d6:	4925      	ldr	r1, [pc, #148]	; (800876c <HAL_RCC_OscConfig+0x240>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	600b      	str	r3, [r1, #0]
 80086dc:	e015      	b.n	800870a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086de:	4b24      	ldr	r3, [pc, #144]	; (8008770 <HAL_RCC_OscConfig+0x244>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e4:	f7fc fca4 	bl	8005030 <HAL_GetTick>
 80086e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086ea:	e008      	b.n	80086fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086ec:	f7fc fca0 	bl	8005030 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d901      	bls.n	80086fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e187      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086fe:	4b1b      	ldr	r3, [pc, #108]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0302 	and.w	r3, r3, #2
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f0      	bne.n	80086ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0308 	and.w	r3, r3, #8
 8008712:	2b00      	cmp	r3, #0
 8008714:	d036      	beq.n	8008784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d016      	beq.n	800874c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800871e:	4b15      	ldr	r3, [pc, #84]	; (8008774 <HAL_RCC_OscConfig+0x248>)
 8008720:	2201      	movs	r2, #1
 8008722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008724:	f7fc fc84 	bl	8005030 <HAL_GetTick>
 8008728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800872a:	e008      	b.n	800873e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800872c:	f7fc fc80 	bl	8005030 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d901      	bls.n	800873e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e167      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800873e:	4b0b      	ldr	r3, [pc, #44]	; (800876c <HAL_RCC_OscConfig+0x240>)
 8008740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0f0      	beq.n	800872c <HAL_RCC_OscConfig+0x200>
 800874a:	e01b      	b.n	8008784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800874c:	4b09      	ldr	r3, [pc, #36]	; (8008774 <HAL_RCC_OscConfig+0x248>)
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008752:	f7fc fc6d 	bl	8005030 <HAL_GetTick>
 8008756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008758:	e00e      	b.n	8008778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800875a:	f7fc fc69 	bl	8005030 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b02      	cmp	r3, #2
 8008766:	d907      	bls.n	8008778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e150      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
 800876c:	40023800 	.word	0x40023800
 8008770:	42470000 	.word	0x42470000
 8008774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008778:	4b88      	ldr	r3, [pc, #544]	; (800899c <HAL_RCC_OscConfig+0x470>)
 800877a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1ea      	bne.n	800875a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0304 	and.w	r3, r3, #4
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 8097 	beq.w	80088c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008792:	2300      	movs	r3, #0
 8008794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008796:	4b81      	ldr	r3, [pc, #516]	; (800899c <HAL_RCC_OscConfig+0x470>)
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10f      	bne.n	80087c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087a2:	2300      	movs	r3, #0
 80087a4:	60bb      	str	r3, [r7, #8]
 80087a6:	4b7d      	ldr	r3, [pc, #500]	; (800899c <HAL_RCC_OscConfig+0x470>)
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	4a7c      	ldr	r2, [pc, #496]	; (800899c <HAL_RCC_OscConfig+0x470>)
 80087ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087b0:	6413      	str	r3, [r2, #64]	; 0x40
 80087b2:	4b7a      	ldr	r3, [pc, #488]	; (800899c <HAL_RCC_OscConfig+0x470>)
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ba:	60bb      	str	r3, [r7, #8]
 80087bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087be:	2301      	movs	r3, #1
 80087c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087c2:	4b77      	ldr	r3, [pc, #476]	; (80089a0 <HAL_RCC_OscConfig+0x474>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d118      	bne.n	8008800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087ce:	4b74      	ldr	r3, [pc, #464]	; (80089a0 <HAL_RCC_OscConfig+0x474>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a73      	ldr	r2, [pc, #460]	; (80089a0 <HAL_RCC_OscConfig+0x474>)
 80087d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087da:	f7fc fc29 	bl	8005030 <HAL_GetTick>
 80087de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087e0:	e008      	b.n	80087f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087e2:	f7fc fc25 	bl	8005030 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d901      	bls.n	80087f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e10c      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087f4:	4b6a      	ldr	r3, [pc, #424]	; (80089a0 <HAL_RCC_OscConfig+0x474>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0f0      	beq.n	80087e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d106      	bne.n	8008816 <HAL_RCC_OscConfig+0x2ea>
 8008808:	4b64      	ldr	r3, [pc, #400]	; (800899c <HAL_RCC_OscConfig+0x470>)
 800880a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880c:	4a63      	ldr	r2, [pc, #396]	; (800899c <HAL_RCC_OscConfig+0x470>)
 800880e:	f043 0301 	orr.w	r3, r3, #1
 8008812:	6713      	str	r3, [r2, #112]	; 0x70
 8008814:	e01c      	b.n	8008850 <HAL_RCC_OscConfig+0x324>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	2b05      	cmp	r3, #5
 800881c:	d10c      	bne.n	8008838 <HAL_RCC_OscConfig+0x30c>
 800881e:	4b5f      	ldr	r3, [pc, #380]	; (800899c <HAL_RCC_OscConfig+0x470>)
 8008820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008822:	4a5e      	ldr	r2, [pc, #376]	; (800899c <HAL_RCC_OscConfig+0x470>)
 8008824:	f043 0304 	orr.w	r3, r3, #4
 8008828:	6713      	str	r3, [r2, #112]	; 0x70
 800882a:	4b5c      	ldr	r3, [pc, #368]	; (800899c <HAL_RCC_OscConfig+0x470>)
 800882c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882e:	4a5b      	ldr	r2, [pc, #364]	; (800899c <HAL_RCC_OscConfig+0x470>)
 8008830:	f043 0301 	orr.w	r3, r3, #1
 8008834:	6713      	str	r3, [r2, #112]	; 0x70
 8008836:	e00b      	b.n	8008850 <HAL_RCC_OscConfig+0x324>
 8008838:	4b58      	ldr	r3, [pc, #352]	; (800899c <HAL_RCC_OscConfig+0x470>)
 800883a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883c:	4a57      	ldr	r2, [pc, #348]	; (800899c <HAL_RCC_OscConfig+0x470>)
 800883e:	f023 0301 	bic.w	r3, r3, #1
 8008842:	6713      	str	r3, [r2, #112]	; 0x70
 8008844:	4b55      	ldr	r3, [pc, #340]	; (800899c <HAL_RCC_OscConfig+0x470>)
 8008846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008848:	4a54      	ldr	r2, [pc, #336]	; (800899c <HAL_RCC_OscConfig+0x470>)
 800884a:	f023 0304 	bic.w	r3, r3, #4
 800884e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d015      	beq.n	8008884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008858:	f7fc fbea 	bl	8005030 <HAL_GetTick>
 800885c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800885e:	e00a      	b.n	8008876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008860:	f7fc fbe6 	bl	8005030 <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	f241 3288 	movw	r2, #5000	; 0x1388
 800886e:	4293      	cmp	r3, r2
 8008870:	d901      	bls.n	8008876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e0cb      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008876:	4b49      	ldr	r3, [pc, #292]	; (800899c <HAL_RCC_OscConfig+0x470>)
 8008878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0ee      	beq.n	8008860 <HAL_RCC_OscConfig+0x334>
 8008882:	e014      	b.n	80088ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008884:	f7fc fbd4 	bl	8005030 <HAL_GetTick>
 8008888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800888a:	e00a      	b.n	80088a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800888c:	f7fc fbd0 	bl	8005030 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	f241 3288 	movw	r2, #5000	; 0x1388
 800889a:	4293      	cmp	r3, r2
 800889c:	d901      	bls.n	80088a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e0b5      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088a2:	4b3e      	ldr	r3, [pc, #248]	; (800899c <HAL_RCC_OscConfig+0x470>)
 80088a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1ee      	bne.n	800888c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088ae:	7dfb      	ldrb	r3, [r7, #23]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d105      	bne.n	80088c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088b4:	4b39      	ldr	r3, [pc, #228]	; (800899c <HAL_RCC_OscConfig+0x470>)
 80088b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b8:	4a38      	ldr	r2, [pc, #224]	; (800899c <HAL_RCC_OscConfig+0x470>)
 80088ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 80a1 	beq.w	8008a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80088ca:	4b34      	ldr	r3, [pc, #208]	; (800899c <HAL_RCC_OscConfig+0x470>)
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f003 030c 	and.w	r3, r3, #12
 80088d2:	2b08      	cmp	r3, #8
 80088d4:	d05c      	beq.n	8008990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d141      	bne.n	8008962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088de:	4b31      	ldr	r3, [pc, #196]	; (80089a4 <HAL_RCC_OscConfig+0x478>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088e4:	f7fc fba4 	bl	8005030 <HAL_GetTick>
 80088e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088ea:	e008      	b.n	80088fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088ec:	f7fc fba0 	bl	8005030 <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d901      	bls.n	80088fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e087      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088fe:	4b27      	ldr	r3, [pc, #156]	; (800899c <HAL_RCC_OscConfig+0x470>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1f0      	bne.n	80088ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	69da      	ldr	r2, [r3, #28]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	019b      	lsls	r3, r3, #6
 800891a:	431a      	orrs	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	3b01      	subs	r3, #1
 8008924:	041b      	lsls	r3, r3, #16
 8008926:	431a      	orrs	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892c:	061b      	lsls	r3, r3, #24
 800892e:	491b      	ldr	r1, [pc, #108]	; (800899c <HAL_RCC_OscConfig+0x470>)
 8008930:	4313      	orrs	r3, r2
 8008932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008934:	4b1b      	ldr	r3, [pc, #108]	; (80089a4 <HAL_RCC_OscConfig+0x478>)
 8008936:	2201      	movs	r2, #1
 8008938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800893a:	f7fc fb79 	bl	8005030 <HAL_GetTick>
 800893e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008940:	e008      	b.n	8008954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008942:	f7fc fb75 	bl	8005030 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b02      	cmp	r3, #2
 800894e:	d901      	bls.n	8008954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e05c      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008954:	4b11      	ldr	r3, [pc, #68]	; (800899c <HAL_RCC_OscConfig+0x470>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0f0      	beq.n	8008942 <HAL_RCC_OscConfig+0x416>
 8008960:	e054      	b.n	8008a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008962:	4b10      	ldr	r3, [pc, #64]	; (80089a4 <HAL_RCC_OscConfig+0x478>)
 8008964:	2200      	movs	r2, #0
 8008966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008968:	f7fc fb62 	bl	8005030 <HAL_GetTick>
 800896c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800896e:	e008      	b.n	8008982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008970:	f7fc fb5e 	bl	8005030 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2b02      	cmp	r3, #2
 800897c:	d901      	bls.n	8008982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e045      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008982:	4b06      	ldr	r3, [pc, #24]	; (800899c <HAL_RCC_OscConfig+0x470>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1f0      	bne.n	8008970 <HAL_RCC_OscConfig+0x444>
 800898e:	e03d      	b.n	8008a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d107      	bne.n	80089a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e038      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
 800899c:	40023800 	.word	0x40023800
 80089a0:	40007000 	.word	0x40007000
 80089a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80089a8:	4b1b      	ldr	r3, [pc, #108]	; (8008a18 <HAL_RCC_OscConfig+0x4ec>)
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d028      	beq.n	8008a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d121      	bne.n	8008a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d11a      	bne.n	8008a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80089d8:	4013      	ands	r3, r2
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d111      	bne.n	8008a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ee:	085b      	lsrs	r3, r3, #1
 80089f0:	3b01      	subs	r3, #1
 80089f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d107      	bne.n	8008a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d001      	beq.n	8008a0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e000      	b.n	8008a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	40023800 	.word	0x40023800

08008a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e0cc      	b.n	8008bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a30:	4b68      	ldr	r3, [pc, #416]	; (8008bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0307 	and.w	r3, r3, #7
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d90c      	bls.n	8008a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a3e:	4b65      	ldr	r3, [pc, #404]	; (8008bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	b2d2      	uxtb	r2, r2
 8008a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a46:	4b63      	ldr	r3, [pc, #396]	; (8008bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d001      	beq.n	8008a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e0b8      	b.n	8008bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d020      	beq.n	8008aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d005      	beq.n	8008a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a70:	4b59      	ldr	r3, [pc, #356]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	4a58      	ldr	r2, [pc, #352]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0308 	and.w	r3, r3, #8
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a88:	4b53      	ldr	r3, [pc, #332]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	4a52      	ldr	r2, [pc, #328]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a94:	4b50      	ldr	r3, [pc, #320]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	494d      	ldr	r1, [pc, #308]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d044      	beq.n	8008b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d107      	bne.n	8008aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aba:	4b47      	ldr	r3, [pc, #284]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d119      	bne.n	8008afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e07f      	b.n	8008bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d003      	beq.n	8008ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d107      	bne.n	8008aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ada:	4b3f      	ldr	r3, [pc, #252]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d109      	bne.n	8008afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e06f      	b.n	8008bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008aea:	4b3b      	ldr	r3, [pc, #236]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e067      	b.n	8008bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008afa:	4b37      	ldr	r3, [pc, #220]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f023 0203 	bic.w	r2, r3, #3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	4934      	ldr	r1, [pc, #208]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b0c:	f7fc fa90 	bl	8005030 <HAL_GetTick>
 8008b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b12:	e00a      	b.n	8008b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b14:	f7fc fa8c 	bl	8005030 <HAL_GetTick>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d901      	bls.n	8008b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e04f      	b.n	8008bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b2a:	4b2b      	ldr	r3, [pc, #172]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f003 020c 	and.w	r2, r3, #12
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d1eb      	bne.n	8008b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b3c:	4b25      	ldr	r3, [pc, #148]	; (8008bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0307 	and.w	r3, r3, #7
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d20c      	bcs.n	8008b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b4a:	4b22      	ldr	r3, [pc, #136]	; (8008bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	b2d2      	uxtb	r2, r2
 8008b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b52:	4b20      	ldr	r3, [pc, #128]	; (8008bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	683a      	ldr	r2, [r7, #0]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d001      	beq.n	8008b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e032      	b.n	8008bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0304 	and.w	r3, r3, #4
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d008      	beq.n	8008b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b70:	4b19      	ldr	r3, [pc, #100]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	4916      	ldr	r1, [pc, #88]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0308 	and.w	r3, r3, #8
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d009      	beq.n	8008ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b8e:	4b12      	ldr	r3, [pc, #72]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	00db      	lsls	r3, r3, #3
 8008b9c:	490e      	ldr	r1, [pc, #56]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008ba2:	f000 f821 	bl	8008be8 <HAL_RCC_GetSysClockFreq>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	4b0b      	ldr	r3, [pc, #44]	; (8008bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	091b      	lsrs	r3, r3, #4
 8008bae:	f003 030f 	and.w	r3, r3, #15
 8008bb2:	490a      	ldr	r1, [pc, #40]	; (8008bdc <HAL_RCC_ClockConfig+0x1c0>)
 8008bb4:	5ccb      	ldrb	r3, [r1, r3]
 8008bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bba:	4a09      	ldr	r2, [pc, #36]	; (8008be0 <HAL_RCC_ClockConfig+0x1c4>)
 8008bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008bbe:	4b09      	ldr	r3, [pc, #36]	; (8008be4 <HAL_RCC_ClockConfig+0x1c8>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fc f9f0 	bl	8004fa8 <HAL_InitTick>

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	40023c00 	.word	0x40023c00
 8008bd8:	40023800 	.word	0x40023800
 8008bdc:	0800d178 	.word	0x0800d178
 8008be0:	200002ac 	.word	0x200002ac
 8008be4:	200002b0 	.word	0x200002b0

08008be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bec:	b094      	sub	sp, #80	; 0x50
 8008bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c00:	4b79      	ldr	r3, [pc, #484]	; (8008de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f003 030c 	and.w	r3, r3, #12
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	d00d      	beq.n	8008c28 <HAL_RCC_GetSysClockFreq+0x40>
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	f200 80e1 	bhi.w	8008dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <HAL_RCC_GetSysClockFreq+0x34>
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d003      	beq.n	8008c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8008c1a:	e0db      	b.n	8008dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c1c:	4b73      	ldr	r3, [pc, #460]	; (8008dec <HAL_RCC_GetSysClockFreq+0x204>)
 8008c1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008c20:	e0db      	b.n	8008dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c22:	4b73      	ldr	r3, [pc, #460]	; (8008df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c26:	e0d8      	b.n	8008dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c28:	4b6f      	ldr	r3, [pc, #444]	; (8008de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c32:	4b6d      	ldr	r3, [pc, #436]	; (8008de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d063      	beq.n	8008d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c3e:	4b6a      	ldr	r3, [pc, #424]	; (8008de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	099b      	lsrs	r3, r3, #6
 8008c44:	2200      	movs	r2, #0
 8008c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c50:	633b      	str	r3, [r7, #48]	; 0x30
 8008c52:	2300      	movs	r3, #0
 8008c54:	637b      	str	r3, [r7, #52]	; 0x34
 8008c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	462b      	mov	r3, r5
 8008c5e:	f04f 0000 	mov.w	r0, #0
 8008c62:	f04f 0100 	mov.w	r1, #0
 8008c66:	0159      	lsls	r1, r3, #5
 8008c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c6c:	0150      	lsls	r0, r2, #5
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4621      	mov	r1, r4
 8008c74:	1a51      	subs	r1, r2, r1
 8008c76:	6139      	str	r1, [r7, #16]
 8008c78:	4629      	mov	r1, r5
 8008c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	f04f 0200 	mov.w	r2, #0
 8008c84:	f04f 0300 	mov.w	r3, #0
 8008c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c8c:	4659      	mov	r1, fp
 8008c8e:	018b      	lsls	r3, r1, #6
 8008c90:	4651      	mov	r1, sl
 8008c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c96:	4651      	mov	r1, sl
 8008c98:	018a      	lsls	r2, r1, #6
 8008c9a:	4651      	mov	r1, sl
 8008c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8008ca0:	4659      	mov	r1, fp
 8008ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8008ca6:	f04f 0200 	mov.w	r2, #0
 8008caa:	f04f 0300 	mov.w	r3, #0
 8008cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cba:	4690      	mov	r8, r2
 8008cbc:	4699      	mov	r9, r3
 8008cbe:	4623      	mov	r3, r4
 8008cc0:	eb18 0303 	adds.w	r3, r8, r3
 8008cc4:	60bb      	str	r3, [r7, #8]
 8008cc6:	462b      	mov	r3, r5
 8008cc8:	eb49 0303 	adc.w	r3, r9, r3
 8008ccc:	60fb      	str	r3, [r7, #12]
 8008cce:	f04f 0200 	mov.w	r2, #0
 8008cd2:	f04f 0300 	mov.w	r3, #0
 8008cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008cda:	4629      	mov	r1, r5
 8008cdc:	024b      	lsls	r3, r1, #9
 8008cde:	4621      	mov	r1, r4
 8008ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	024a      	lsls	r2, r1, #9
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4619      	mov	r1, r3
 8008cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cee:	2200      	movs	r2, #0
 8008cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cf8:	f7f8 f838 	bl	8000d6c <__aeabi_uldivmod>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4613      	mov	r3, r2
 8008d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d04:	e058      	b.n	8008db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d06:	4b38      	ldr	r3, [pc, #224]	; (8008de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	099b      	lsrs	r3, r3, #6
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	4618      	mov	r0, r3
 8008d10:	4611      	mov	r1, r2
 8008d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008d16:	623b      	str	r3, [r7, #32]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008d20:	4642      	mov	r2, r8
 8008d22:	464b      	mov	r3, r9
 8008d24:	f04f 0000 	mov.w	r0, #0
 8008d28:	f04f 0100 	mov.w	r1, #0
 8008d2c:	0159      	lsls	r1, r3, #5
 8008d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d32:	0150      	lsls	r0, r2, #5
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	4641      	mov	r1, r8
 8008d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8008d3e:	4649      	mov	r1, r9
 8008d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8008d44:	f04f 0200 	mov.w	r2, #0
 8008d48:	f04f 0300 	mov.w	r3, #0
 8008d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008d58:	ebb2 040a 	subs.w	r4, r2, sl
 8008d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	00eb      	lsls	r3, r5, #3
 8008d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d6e:	00e2      	lsls	r2, r4, #3
 8008d70:	4614      	mov	r4, r2
 8008d72:	461d      	mov	r5, r3
 8008d74:	4643      	mov	r3, r8
 8008d76:	18e3      	adds	r3, r4, r3
 8008d78:	603b      	str	r3, [r7, #0]
 8008d7a:	464b      	mov	r3, r9
 8008d7c:	eb45 0303 	adc.w	r3, r5, r3
 8008d80:	607b      	str	r3, [r7, #4]
 8008d82:	f04f 0200 	mov.w	r2, #0
 8008d86:	f04f 0300 	mov.w	r3, #0
 8008d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d8e:	4629      	mov	r1, r5
 8008d90:	028b      	lsls	r3, r1, #10
 8008d92:	4621      	mov	r1, r4
 8008d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d98:	4621      	mov	r1, r4
 8008d9a:	028a      	lsls	r2, r1, #10
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da2:	2200      	movs	r2, #0
 8008da4:	61bb      	str	r3, [r7, #24]
 8008da6:	61fa      	str	r2, [r7, #28]
 8008da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dac:	f7f7 ffde 	bl	8000d6c <__aeabi_uldivmod>
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4613      	mov	r3, r2
 8008db6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008db8:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	0c1b      	lsrs	r3, r3, #16
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008dd2:	e002      	b.n	8008dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008dd4:	4b05      	ldr	r3, [pc, #20]	; (8008dec <HAL_RCC_GetSysClockFreq+0x204>)
 8008dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3750      	adds	r7, #80	; 0x50
 8008de0:	46bd      	mov	sp, r7
 8008de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008de6:	bf00      	nop
 8008de8:	40023800 	.word	0x40023800
 8008dec:	00f42400 	.word	0x00f42400
 8008df0:	007a1200 	.word	0x007a1200

08008df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008df4:	b480      	push	{r7}
 8008df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008df8:	4b03      	ldr	r3, [pc, #12]	; (8008e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	200002ac 	.word	0x200002ac

08008e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e10:	f7ff fff0 	bl	8008df4 <HAL_RCC_GetHCLKFreq>
 8008e14:	4602      	mov	r2, r0
 8008e16:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	0a9b      	lsrs	r3, r3, #10
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	4903      	ldr	r1, [pc, #12]	; (8008e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e22:	5ccb      	ldrb	r3, [r1, r3]
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	40023800 	.word	0x40023800
 8008e30:	0800d188 	.word	0x0800d188

08008e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e38:	f7ff ffdc 	bl	8008df4 <HAL_RCC_GetHCLKFreq>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	0b5b      	lsrs	r3, r3, #13
 8008e44:	f003 0307 	and.w	r3, r3, #7
 8008e48:	4903      	ldr	r1, [pc, #12]	; (8008e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e4a:	5ccb      	ldrb	r3, [r1, r3]
 8008e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	40023800 	.word	0x40023800
 8008e58:	0800d188 	.word	0x0800d188

08008e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e04c      	b.n	8008f08 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d111      	bne.n	8008e9e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fba4 	bl	800a5d0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d102      	bne.n	8008e96 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a1f      	ldr	r2, [pc, #124]	; (8008f10 <HAL_TIM_Base_Init+0xb4>)
 8008e94:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	3304      	adds	r3, #4
 8008eae:	4619      	mov	r1, r3
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	f001 f8c1 	bl	800a038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	080048a9 	.word	0x080048a9

08008f14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d001      	beq.n	8008f2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e03c      	b.n	8008fa6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a1e      	ldr	r2, [pc, #120]	; (8008fb4 <HAL_TIM_Base_Start+0xa0>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d018      	beq.n	8008f70 <HAL_TIM_Base_Start+0x5c>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f46:	d013      	beq.n	8008f70 <HAL_TIM_Base_Start+0x5c>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a1a      	ldr	r2, [pc, #104]	; (8008fb8 <HAL_TIM_Base_Start+0xa4>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d00e      	beq.n	8008f70 <HAL_TIM_Base_Start+0x5c>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a19      	ldr	r2, [pc, #100]	; (8008fbc <HAL_TIM_Base_Start+0xa8>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d009      	beq.n	8008f70 <HAL_TIM_Base_Start+0x5c>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a17      	ldr	r2, [pc, #92]	; (8008fc0 <HAL_TIM_Base_Start+0xac>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d004      	beq.n	8008f70 <HAL_TIM_Base_Start+0x5c>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a16      	ldr	r2, [pc, #88]	; (8008fc4 <HAL_TIM_Base_Start+0xb0>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d111      	bne.n	8008f94 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b06      	cmp	r3, #6
 8008f80:	d010      	beq.n	8008fa4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f042 0201 	orr.w	r2, r2, #1
 8008f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f92:	e007      	b.n	8008fa4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 0201 	orr.w	r2, r2, #1
 8008fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	40010000 	.word	0x40010000
 8008fb8:	40000400 	.word	0x40000400
 8008fbc:	40000800 	.word	0x40000800
 8008fc0:	40000c00 	.word	0x40000c00
 8008fc4:	40014000 	.word	0x40014000

08008fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d001      	beq.n	8008fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e044      	b.n	800906a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68da      	ldr	r2, [r3, #12]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f042 0201 	orr.w	r2, r2, #1
 8008ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a1e      	ldr	r2, [pc, #120]	; (8009078 <HAL_TIM_Base_Start_IT+0xb0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d018      	beq.n	8009034 <HAL_TIM_Base_Start_IT+0x6c>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800900a:	d013      	beq.n	8009034 <HAL_TIM_Base_Start_IT+0x6c>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a1a      	ldr	r2, [pc, #104]	; (800907c <HAL_TIM_Base_Start_IT+0xb4>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d00e      	beq.n	8009034 <HAL_TIM_Base_Start_IT+0x6c>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a19      	ldr	r2, [pc, #100]	; (8009080 <HAL_TIM_Base_Start_IT+0xb8>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d009      	beq.n	8009034 <HAL_TIM_Base_Start_IT+0x6c>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a17      	ldr	r2, [pc, #92]	; (8009084 <HAL_TIM_Base_Start_IT+0xbc>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d004      	beq.n	8009034 <HAL_TIM_Base_Start_IT+0x6c>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a16      	ldr	r2, [pc, #88]	; (8009088 <HAL_TIM_Base_Start_IT+0xc0>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d111      	bne.n	8009058 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f003 0307 	and.w	r3, r3, #7
 800903e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b06      	cmp	r3, #6
 8009044:	d010      	beq.n	8009068 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f042 0201 	orr.w	r2, r2, #1
 8009054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009056:	e007      	b.n	8009068 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	40010000 	.word	0x40010000
 800907c:	40000400 	.word	0x40000400
 8009080:	40000800 	.word	0x40000800
 8009084:	40000c00 	.word	0x40000c00
 8009088:	40014000 	.word	0x40014000

0800908c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e04c      	b.n	8009138 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d111      	bne.n	80090ce <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 fa8c 	bl	800a5d0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d102      	bne.n	80090c6 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a1f      	ldr	r2, [pc, #124]	; (8009140 <HAL_TIM_OC_Init+0xb4>)
 80090c4:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2202      	movs	r2, #2
 80090d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3304      	adds	r3, #4
 80090de:	4619      	mov	r1, r3
 80090e0:	4610      	mov	r0, r2
 80090e2:	f000 ffa9 	bl	800a038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	08009145 	.word	0x08009145

08009144 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e04c      	b.n	8009204 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d111      	bne.n	800919a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 fa26 	bl	800a5d0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009188:	2b00      	cmp	r3, #0
 800918a:	d102      	bne.n	8009192 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a1f      	ldr	r2, [pc, #124]	; (800920c <HAL_TIM_PWM_Init+0xb4>)
 8009190:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2202      	movs	r2, #2
 800919e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	3304      	adds	r3, #4
 80091aa:	4619      	mov	r1, r3
 80091ac:	4610      	mov	r0, r2
 80091ae:	f000 ff43 	bl	800a038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	08009211 	.word	0x08009211

08009210 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d109      	bne.n	8009248 <HAL_TIM_PWM_Start+0x24>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800923a:	b2db      	uxtb	r3, r3
 800923c:	2b01      	cmp	r3, #1
 800923e:	bf14      	ite	ne
 8009240:	2301      	movne	r3, #1
 8009242:	2300      	moveq	r3, #0
 8009244:	b2db      	uxtb	r3, r3
 8009246:	e022      	b.n	800928e <HAL_TIM_PWM_Start+0x6a>
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b04      	cmp	r3, #4
 800924c:	d109      	bne.n	8009262 <HAL_TIM_PWM_Start+0x3e>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b01      	cmp	r3, #1
 8009258:	bf14      	ite	ne
 800925a:	2301      	movne	r3, #1
 800925c:	2300      	moveq	r3, #0
 800925e:	b2db      	uxtb	r3, r3
 8009260:	e015      	b.n	800928e <HAL_TIM_PWM_Start+0x6a>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b08      	cmp	r3, #8
 8009266:	d109      	bne.n	800927c <HAL_TIM_PWM_Start+0x58>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b01      	cmp	r3, #1
 8009272:	bf14      	ite	ne
 8009274:	2301      	movne	r3, #1
 8009276:	2300      	moveq	r3, #0
 8009278:	b2db      	uxtb	r3, r3
 800927a:	e008      	b.n	800928e <HAL_TIM_PWM_Start+0x6a>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b01      	cmp	r3, #1
 8009286:	bf14      	ite	ne
 8009288:	2301      	movne	r3, #1
 800928a:	2300      	moveq	r3, #0
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e068      	b.n	8009368 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d104      	bne.n	80092a6 <HAL_TIM_PWM_Start+0x82>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2202      	movs	r2, #2
 80092a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092a4:	e013      	b.n	80092ce <HAL_TIM_PWM_Start+0xaa>
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	2b04      	cmp	r3, #4
 80092aa:	d104      	bne.n	80092b6 <HAL_TIM_PWM_Start+0x92>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092b4:	e00b      	b.n	80092ce <HAL_TIM_PWM_Start+0xaa>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b08      	cmp	r3, #8
 80092ba:	d104      	bne.n	80092c6 <HAL_TIM_PWM_Start+0xa2>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2202      	movs	r2, #2
 80092c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092c4:	e003      	b.n	80092ce <HAL_TIM_PWM_Start+0xaa>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2202      	movs	r2, #2
 80092ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2201      	movs	r2, #1
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f001 f954 	bl	800a584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a23      	ldr	r2, [pc, #140]	; (8009370 <HAL_TIM_PWM_Start+0x14c>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d107      	bne.n	80092f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a1d      	ldr	r2, [pc, #116]	; (8009370 <HAL_TIM_PWM_Start+0x14c>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d018      	beq.n	8009332 <HAL_TIM_PWM_Start+0x10e>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009308:	d013      	beq.n	8009332 <HAL_TIM_PWM_Start+0x10e>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a19      	ldr	r2, [pc, #100]	; (8009374 <HAL_TIM_PWM_Start+0x150>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00e      	beq.n	8009332 <HAL_TIM_PWM_Start+0x10e>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a17      	ldr	r2, [pc, #92]	; (8009378 <HAL_TIM_PWM_Start+0x154>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d009      	beq.n	8009332 <HAL_TIM_PWM_Start+0x10e>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a16      	ldr	r2, [pc, #88]	; (800937c <HAL_TIM_PWM_Start+0x158>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d004      	beq.n	8009332 <HAL_TIM_PWM_Start+0x10e>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a14      	ldr	r2, [pc, #80]	; (8009380 <HAL_TIM_PWM_Start+0x15c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d111      	bne.n	8009356 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f003 0307 	and.w	r3, r3, #7
 800933c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b06      	cmp	r3, #6
 8009342:	d010      	beq.n	8009366 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0201 	orr.w	r2, r2, #1
 8009352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009354:	e007      	b.n	8009366 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f042 0201 	orr.w	r2, r2, #1
 8009364:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	40010000 	.word	0x40010000
 8009374:	40000400 	.word	0x40000400
 8009378:	40000800 	.word	0x40000800
 800937c:	40000c00 	.word	0x40000c00
 8009380:	40014000 	.word	0x40014000

08009384 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009394:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800939c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093ac:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d108      	bne.n	80093c6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d105      	bne.n	80093c6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80093ba:	7b7b      	ldrb	r3, [r7, #13]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d102      	bne.n	80093c6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80093c0:	7b3b      	ldrb	r3, [r7, #12]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d001      	beq.n	80093ca <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e03b      	b.n	8009442 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2202      	movs	r2, #2
 80093ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2202      	movs	r2, #2
 80093d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2202      	movs	r2, #2
 80093de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2202      	movs	r2, #2
 80093e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68da      	ldr	r2, [r3, #12]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f042 0202 	orr.w	r2, r2, #2
 80093f8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68da      	ldr	r2, [r3, #12]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f042 0204 	orr.w	r2, r2, #4
 8009408:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2201      	movs	r2, #1
 8009410:	2100      	movs	r1, #0
 8009412:	4618      	mov	r0, r3
 8009414:	f001 f8b6 	bl	800a584 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2201      	movs	r2, #1
 800941e:	2104      	movs	r1, #4
 8009420:	4618      	mov	r0, r3
 8009422:	f001 f8af 	bl	800a584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a08      	ldr	r2, [pc, #32]	; (800944c <HAL_TIM_OnePulse_Start_IT+0xc8>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d107      	bne.n	8009440 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800943e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	40010000 	.word	0x40010000

08009450 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e0a2      	b.n	80095aa <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	d111      	bne.n	8009494 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 f8a9 	bl	800a5d0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009482:	2b00      	cmp	r3, #0
 8009484:	d102      	bne.n	800948c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a4a      	ldr	r2, [pc, #296]	; (80095b4 <HAL_TIM_Encoder_Init+0x164>)
 800948a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	6812      	ldr	r2, [r2, #0]
 80094a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094aa:	f023 0307 	bic.w	r3, r3, #7
 80094ae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3304      	adds	r3, #4
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f000 fdbc 	bl	800a038 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	4313      	orrs	r3, r2
 80094e0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094e8:	f023 0303 	bic.w	r3, r3, #3
 80094ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	689a      	ldr	r2, [r3, #8]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	021b      	lsls	r3, r3, #8
 80094f8:	4313      	orrs	r3, r2
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009506:	f023 030c 	bic.w	r3, r3, #12
 800950a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	68da      	ldr	r2, [r3, #12]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	69db      	ldr	r3, [r3, #28]
 8009520:	021b      	lsls	r3, r3, #8
 8009522:	4313      	orrs	r3, r2
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	4313      	orrs	r3, r2
 8009528:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	011a      	lsls	r2, r3, #4
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	031b      	lsls	r3, r3, #12
 8009536:	4313      	orrs	r3, r2
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	4313      	orrs	r3, r2
 800953c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009544:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800954c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	011b      	lsls	r3, r3, #4
 8009558:	4313      	orrs	r3, r2
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3718      	adds	r7, #24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	08004971 	.word	0x08004971

080095b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80095d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80095e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d110      	bne.n	800960a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d102      	bne.n	80095f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80095ee:	7b7b      	ldrb	r3, [r7, #13]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d001      	beq.n	80095f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e069      	b.n	80096cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2202      	movs	r2, #2
 80095fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2202      	movs	r2, #2
 8009604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009608:	e031      	b.n	800966e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b04      	cmp	r3, #4
 800960e:	d110      	bne.n	8009632 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009610:	7bbb      	ldrb	r3, [r7, #14]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d102      	bne.n	800961c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009616:	7b3b      	ldrb	r3, [r7, #12]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d001      	beq.n	8009620 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e055      	b.n	80096cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2202      	movs	r2, #2
 8009624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009630:	e01d      	b.n	800966e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d108      	bne.n	800964a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d105      	bne.n	800964a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800963e:	7b7b      	ldrb	r3, [r7, #13]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d102      	bne.n	800964a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009644:	7b3b      	ldrb	r3, [r7, #12]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d001      	beq.n	800964e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e03e      	b.n	80096cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2202      	movs	r2, #2
 8009652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2202      	movs	r2, #2
 800965a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2202      	movs	r2, #2
 8009662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2202      	movs	r2, #2
 800966a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d003      	beq.n	800967c <HAL_TIM_Encoder_Start+0xc4>
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	2b04      	cmp	r3, #4
 8009678:	d008      	beq.n	800968c <HAL_TIM_Encoder_Start+0xd4>
 800967a:	e00f      	b.n	800969c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2201      	movs	r2, #1
 8009682:	2100      	movs	r1, #0
 8009684:	4618      	mov	r0, r3
 8009686:	f000 ff7d 	bl	800a584 <TIM_CCxChannelCmd>
      break;
 800968a:	e016      	b.n	80096ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2201      	movs	r2, #1
 8009692:	2104      	movs	r1, #4
 8009694:	4618      	mov	r0, r3
 8009696:	f000 ff75 	bl	800a584 <TIM_CCxChannelCmd>
      break;
 800969a:	e00e      	b.n	80096ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2201      	movs	r2, #1
 80096a2:	2100      	movs	r1, #0
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 ff6d 	bl	800a584 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2201      	movs	r2, #1
 80096b0:	2104      	movs	r1, #4
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 ff66 	bl	800a584 <TIM_CCxChannelCmd>
      break;
 80096b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f042 0201 	orr.w	r2, r2, #1
 80096c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f003 0302 	and.w	r3, r3, #2
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d128      	bne.n	800973c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f003 0302 	and.w	r3, r3, #2
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d121      	bne.n	800973c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f06f 0202 	mvn.w	r2, #2
 8009700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	f003 0303 	and.w	r3, r3, #3
 8009712:	2b00      	cmp	r3, #0
 8009714:	d005      	beq.n	8009722 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	4798      	blx	r3
 8009720:	e009      	b.n	8009736 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f003 0304 	and.w	r3, r3, #4
 8009746:	2b04      	cmp	r3, #4
 8009748:	d128      	bne.n	800979c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b04      	cmp	r3, #4
 8009756:	d121      	bne.n	800979c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f06f 0204 	mvn.w	r2, #4
 8009760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2202      	movs	r2, #2
 8009766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009772:	2b00      	cmp	r3, #0
 8009774:	d005      	beq.n	8009782 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	4798      	blx	r3
 8009780:	e009      	b.n	8009796 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f003 0308 	and.w	r3, r3, #8
 80097a6:	2b08      	cmp	r3, #8
 80097a8:	d128      	bne.n	80097fc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f003 0308 	and.w	r3, r3, #8
 80097b4:	2b08      	cmp	r3, #8
 80097b6:	d121      	bne.n	80097fc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f06f 0208 	mvn.w	r2, #8
 80097c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2204      	movs	r2, #4
 80097c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	f003 0303 	and.w	r3, r3, #3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d005      	beq.n	80097e2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
 80097e0:	e009      	b.n	80097f6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	f003 0310 	and.w	r3, r3, #16
 8009806:	2b10      	cmp	r3, #16
 8009808:	d128      	bne.n	800985c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f003 0310 	and.w	r3, r3, #16
 8009814:	2b10      	cmp	r3, #16
 8009816:	d121      	bne.n	800985c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f06f 0210 	mvn.w	r2, #16
 8009820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2208      	movs	r2, #8
 8009826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009832:	2b00      	cmp	r3, #0
 8009834:	d005      	beq.n	8009842 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	4798      	blx	r3
 8009840:	e009      	b.n	8009856 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	2b01      	cmp	r3, #1
 8009868:	d110      	bne.n	800988c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	2b01      	cmp	r3, #1
 8009876:	d109      	bne.n	800988c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f06f 0201 	mvn.w	r2, #1
 8009880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009896:	2b80      	cmp	r3, #128	; 0x80
 8009898:	d110      	bne.n	80098bc <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a4:	2b80      	cmp	r3, #128	; 0x80
 80098a6:	d109      	bne.n	80098bc <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c6:	2b40      	cmp	r3, #64	; 0x40
 80098c8:	d110      	bne.n	80098ec <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d4:	2b40      	cmp	r3, #64	; 0x40
 80098d6:	d109      	bne.n	80098ec <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b20      	cmp	r3, #32
 80098f8:	d110      	bne.n	800991c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f003 0320 	and.w	r3, r3, #32
 8009904:	2b20      	cmp	r3, #32
 8009906:	d109      	bne.n	800991c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f06f 0220 	mvn.w	r2, #32
 8009910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800993a:	2b01      	cmp	r3, #1
 800993c:	d101      	bne.n	8009942 <HAL_TIM_OC_ConfigChannel+0x1e>
 800993e:	2302      	movs	r3, #2
 8009940:	e048      	b.n	80099d4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b0c      	cmp	r3, #12
 800994e:	d839      	bhi.n	80099c4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009950:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009956:	bf00      	nop
 8009958:	0800998d 	.word	0x0800998d
 800995c:	080099c5 	.word	0x080099c5
 8009960:	080099c5 	.word	0x080099c5
 8009964:	080099c5 	.word	0x080099c5
 8009968:	0800999b 	.word	0x0800999b
 800996c:	080099c5 	.word	0x080099c5
 8009970:	080099c5 	.word	0x080099c5
 8009974:	080099c5 	.word	0x080099c5
 8009978:	080099a9 	.word	0x080099a9
 800997c:	080099c5 	.word	0x080099c5
 8009980:	080099c5 	.word	0x080099c5
 8009984:	080099c5 	.word	0x080099c5
 8009988:	080099b7 	.word	0x080099b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 fbd0 	bl	800a138 <TIM_OC1_SetConfig>
      break;
 8009998:	e017      	b.n	80099ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68b9      	ldr	r1, [r7, #8]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f000 fc2f 	bl	800a204 <TIM_OC2_SetConfig>
      break;
 80099a6:	e010      	b.n	80099ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68b9      	ldr	r1, [r7, #8]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fc94 	bl	800a2dc <TIM_OC3_SetConfig>
      break;
 80099b4:	e009      	b.n	80099ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68b9      	ldr	r1, [r7, #8]
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fcf7 	bl	800a3b0 <TIM_OC4_SetConfig>
      break;
 80099c2:	e002      	b.n	80099ca <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	75fb      	strb	r3, [r7, #23]
      break;
 80099c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d101      	bne.n	80099fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099f6:	2302      	movs	r3, #2
 80099f8:	e0ae      	b.n	8009b58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b0c      	cmp	r3, #12
 8009a06:	f200 809f 	bhi.w	8009b48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009a0a:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a10:	08009a45 	.word	0x08009a45
 8009a14:	08009b49 	.word	0x08009b49
 8009a18:	08009b49 	.word	0x08009b49
 8009a1c:	08009b49 	.word	0x08009b49
 8009a20:	08009a85 	.word	0x08009a85
 8009a24:	08009b49 	.word	0x08009b49
 8009a28:	08009b49 	.word	0x08009b49
 8009a2c:	08009b49 	.word	0x08009b49
 8009a30:	08009ac7 	.word	0x08009ac7
 8009a34:	08009b49 	.word	0x08009b49
 8009a38:	08009b49 	.word	0x08009b49
 8009a3c:	08009b49 	.word	0x08009b49
 8009a40:	08009b07 	.word	0x08009b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 fb74 	bl	800a138 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	699a      	ldr	r2, [r3, #24]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f042 0208 	orr.w	r2, r2, #8
 8009a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699a      	ldr	r2, [r3, #24]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0204 	bic.w	r2, r2, #4
 8009a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6999      	ldr	r1, [r3, #24]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	691a      	ldr	r2, [r3, #16]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	619a      	str	r2, [r3, #24]
      break;
 8009a82:	e064      	b.n	8009b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68b9      	ldr	r1, [r7, #8]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 fbba 	bl	800a204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	699a      	ldr	r2, [r3, #24]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	699a      	ldr	r2, [r3, #24]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6999      	ldr	r1, [r3, #24]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	021a      	lsls	r2, r3, #8
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	619a      	str	r2, [r3, #24]
      break;
 8009ac4:	e043      	b.n	8009b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68b9      	ldr	r1, [r7, #8]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 fc05 	bl	800a2dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69da      	ldr	r2, [r3, #28]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f042 0208 	orr.w	r2, r2, #8
 8009ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	69da      	ldr	r2, [r3, #28]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f022 0204 	bic.w	r2, r2, #4
 8009af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	69d9      	ldr	r1, [r3, #28]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	691a      	ldr	r2, [r3, #16]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	61da      	str	r2, [r3, #28]
      break;
 8009b04:	e023      	b.n	8009b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68b9      	ldr	r1, [r7, #8]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 fc4f 	bl	800a3b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	69da      	ldr	r2, [r3, #28]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	69da      	ldr	r2, [r3, #28]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	69d9      	ldr	r1, [r3, #28]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	021a      	lsls	r2, r3, #8
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	61da      	str	r2, [r3, #28]
      break;
 8009b46:	e002      	b.n	8009b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d101      	bne.n	8009b7c <HAL_TIM_ConfigClockSource+0x1c>
 8009b78:	2302      	movs	r3, #2
 8009b7a:	e0b4      	b.n	8009ce6 <HAL_TIM_ConfigClockSource+0x186>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ba2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bb4:	d03e      	beq.n	8009c34 <HAL_TIM_ConfigClockSource+0xd4>
 8009bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bba:	f200 8087 	bhi.w	8009ccc <HAL_TIM_ConfigClockSource+0x16c>
 8009bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc2:	f000 8086 	beq.w	8009cd2 <HAL_TIM_ConfigClockSource+0x172>
 8009bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bca:	d87f      	bhi.n	8009ccc <HAL_TIM_ConfigClockSource+0x16c>
 8009bcc:	2b70      	cmp	r3, #112	; 0x70
 8009bce:	d01a      	beq.n	8009c06 <HAL_TIM_ConfigClockSource+0xa6>
 8009bd0:	2b70      	cmp	r3, #112	; 0x70
 8009bd2:	d87b      	bhi.n	8009ccc <HAL_TIM_ConfigClockSource+0x16c>
 8009bd4:	2b60      	cmp	r3, #96	; 0x60
 8009bd6:	d050      	beq.n	8009c7a <HAL_TIM_ConfigClockSource+0x11a>
 8009bd8:	2b60      	cmp	r3, #96	; 0x60
 8009bda:	d877      	bhi.n	8009ccc <HAL_TIM_ConfigClockSource+0x16c>
 8009bdc:	2b50      	cmp	r3, #80	; 0x50
 8009bde:	d03c      	beq.n	8009c5a <HAL_TIM_ConfigClockSource+0xfa>
 8009be0:	2b50      	cmp	r3, #80	; 0x50
 8009be2:	d873      	bhi.n	8009ccc <HAL_TIM_ConfigClockSource+0x16c>
 8009be4:	2b40      	cmp	r3, #64	; 0x40
 8009be6:	d058      	beq.n	8009c9a <HAL_TIM_ConfigClockSource+0x13a>
 8009be8:	2b40      	cmp	r3, #64	; 0x40
 8009bea:	d86f      	bhi.n	8009ccc <HAL_TIM_ConfigClockSource+0x16c>
 8009bec:	2b30      	cmp	r3, #48	; 0x30
 8009bee:	d064      	beq.n	8009cba <HAL_TIM_ConfigClockSource+0x15a>
 8009bf0:	2b30      	cmp	r3, #48	; 0x30
 8009bf2:	d86b      	bhi.n	8009ccc <HAL_TIM_ConfigClockSource+0x16c>
 8009bf4:	2b20      	cmp	r3, #32
 8009bf6:	d060      	beq.n	8009cba <HAL_TIM_ConfigClockSource+0x15a>
 8009bf8:	2b20      	cmp	r3, #32
 8009bfa:	d867      	bhi.n	8009ccc <HAL_TIM_ConfigClockSource+0x16c>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d05c      	beq.n	8009cba <HAL_TIM_ConfigClockSource+0x15a>
 8009c00:	2b10      	cmp	r3, #16
 8009c02:	d05a      	beq.n	8009cba <HAL_TIM_ConfigClockSource+0x15a>
 8009c04:	e062      	b.n	8009ccc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6818      	ldr	r0, [r3, #0]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	6899      	ldr	r1, [r3, #8]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	f000 fc95 	bl	800a544 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	609a      	str	r2, [r3, #8]
      break;
 8009c32:	e04f      	b.n	8009cd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6818      	ldr	r0, [r3, #0]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	6899      	ldr	r1, [r3, #8]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f000 fc7e 	bl	800a544 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	689a      	ldr	r2, [r3, #8]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c56:	609a      	str	r2, [r3, #8]
      break;
 8009c58:	e03c      	b.n	8009cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6818      	ldr	r0, [r3, #0]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	6859      	ldr	r1, [r3, #4]
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	461a      	mov	r2, r3
 8009c68:	f000 fbf2 	bl	800a450 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2150      	movs	r1, #80	; 0x50
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fc4b 	bl	800a50e <TIM_ITRx_SetConfig>
      break;
 8009c78:	e02c      	b.n	8009cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	6859      	ldr	r1, [r3, #4]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	461a      	mov	r2, r3
 8009c88:	f000 fc11 	bl	800a4ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2160      	movs	r1, #96	; 0x60
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 fc3b 	bl	800a50e <TIM_ITRx_SetConfig>
      break;
 8009c98:	e01c      	b.n	8009cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6818      	ldr	r0, [r3, #0]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	6859      	ldr	r1, [r3, #4]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f000 fbd2 	bl	800a450 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2140      	movs	r1, #64	; 0x40
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 fc2b 	bl	800a50e <TIM_ITRx_SetConfig>
      break;
 8009cb8:	e00c      	b.n	8009cd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	f000 fc22 	bl	800a50e <TIM_ITRx_SetConfig>
      break;
 8009cca:	e003      	b.n	8009cd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd0:	e000      	b.n	8009cd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d0a:	bf00      	nop
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr

08009d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d16:	b480      	push	{r7}
 8009d18:	b083      	sub	sp, #12
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d1e:	bf00      	nop
 8009d20:	370c      	adds	r7, #12
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b083      	sub	sp, #12
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009d32:	bf00      	nop
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b083      	sub	sp, #12
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d46:	bf00      	nop
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d52:	b480      	push	{r7}
 8009d54:	b083      	sub	sp, #12
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009d5a:	bf00      	nop
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b083      	sub	sp, #12
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d6e:	bf00      	nop
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009d82:	bf00      	nop
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b083      	sub	sp, #12
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009d96:	bf00      	nop
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
	...

08009da4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	460b      	mov	r3, r1
 8009dae:	607a      	str	r2, [r7, #4]
 8009db0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e135      	b.n	800a02c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d101      	bne.n	8009dce <HAL_TIM_RegisterCallback+0x2a>
 8009dca:	2302      	movs	r3, #2
 8009dcc:	e12e      	b.n	800a02c <HAL_TIM_RegisterCallback+0x288>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	f040 80ba 	bne.w	8009f58 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009de4:	7afb      	ldrb	r3, [r7, #11]
 8009de6:	2b1a      	cmp	r3, #26
 8009de8:	f200 80b3 	bhi.w	8009f52 <HAL_TIM_RegisterCallback+0x1ae>
 8009dec:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <HAL_TIM_RegisterCallback+0x50>)
 8009dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df2:	bf00      	nop
 8009df4:	08009e61 	.word	0x08009e61
 8009df8:	08009e69 	.word	0x08009e69
 8009dfc:	08009e71 	.word	0x08009e71
 8009e00:	08009e79 	.word	0x08009e79
 8009e04:	08009e81 	.word	0x08009e81
 8009e08:	08009e89 	.word	0x08009e89
 8009e0c:	08009e91 	.word	0x08009e91
 8009e10:	08009e99 	.word	0x08009e99
 8009e14:	08009ea1 	.word	0x08009ea1
 8009e18:	08009ea9 	.word	0x08009ea9
 8009e1c:	08009eb1 	.word	0x08009eb1
 8009e20:	08009eb9 	.word	0x08009eb9
 8009e24:	08009ec1 	.word	0x08009ec1
 8009e28:	08009ec9 	.word	0x08009ec9
 8009e2c:	08009ed1 	.word	0x08009ed1
 8009e30:	08009edb 	.word	0x08009edb
 8009e34:	08009ee5 	.word	0x08009ee5
 8009e38:	08009eef 	.word	0x08009eef
 8009e3c:	08009ef9 	.word	0x08009ef9
 8009e40:	08009f03 	.word	0x08009f03
 8009e44:	08009f0d 	.word	0x08009f0d
 8009e48:	08009f17 	.word	0x08009f17
 8009e4c:	08009f21 	.word	0x08009f21
 8009e50:	08009f2b 	.word	0x08009f2b
 8009e54:	08009f35 	.word	0x08009f35
 8009e58:	08009f3f 	.word	0x08009f3f
 8009e5c:	08009f49 	.word	0x08009f49
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009e66:	e0dc      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009e6e:	e0d8      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009e76:	e0d4      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009e7e:	e0d0      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009e86:	e0cc      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009e8e:	e0c8      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009e96:	e0c4      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009e9e:	e0c0      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009ea6:	e0bc      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009eae:	e0b8      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009eb6:	e0b4      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009ebe:	e0b0      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009ec6:	e0ac      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009ece:	e0a8      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009ed8:	e0a3      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009ee2:	e09e      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009eec:	e099      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009ef6:	e094      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009f00:	e08f      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009f0a:	e08a      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009f14:	e085      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009f1e:	e080      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009f28:	e07b      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009f32:	e076      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009f3c:	e071      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009f46:	e06c      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009f50:	e067      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	75fb      	strb	r3, [r7, #23]
        break;
 8009f56:	e064      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d15c      	bne.n	800a01e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	2b0d      	cmp	r3, #13
 8009f68:	d856      	bhi.n	800a018 <HAL_TIM_RegisterCallback+0x274>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <HAL_TIM_RegisterCallback+0x1cc>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009fa9 	.word	0x08009fa9
 8009f74:	08009fb1 	.word	0x08009fb1
 8009f78:	08009fb9 	.word	0x08009fb9
 8009f7c:	08009fc1 	.word	0x08009fc1
 8009f80:	08009fc9 	.word	0x08009fc9
 8009f84:	08009fd1 	.word	0x08009fd1
 8009f88:	08009fd9 	.word	0x08009fd9
 8009f8c:	08009fe1 	.word	0x08009fe1
 8009f90:	08009fe9 	.word	0x08009fe9
 8009f94:	08009ff1 	.word	0x08009ff1
 8009f98:	08009ff9 	.word	0x08009ff9
 8009f9c:	0800a001 	.word	0x0800a001
 8009fa0:	0800a009 	.word	0x0800a009
 8009fa4:	0800a011 	.word	0x0800a011
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009fae:	e038      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009fb6:	e034      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009fbe:	e030      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009fc6:	e02c      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009fce:	e028      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009fd6:	e024      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009fde:	e020      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009fe6:	e01c      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009fee:	e018      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009ff6:	e014      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009ffe:	e010      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a006:	e00c      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a00e:	e008      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a016:	e004      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	75fb      	strb	r3, [r7, #23]
        break;
 800a01c:	e001      	b.n	800a022 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	371c      	adds	r7, #28
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a34      	ldr	r2, [pc, #208]	; (800a11c <TIM_Base_SetConfig+0xe4>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d00f      	beq.n	800a070 <TIM_Base_SetConfig+0x38>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a056:	d00b      	beq.n	800a070 <TIM_Base_SetConfig+0x38>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a31      	ldr	r2, [pc, #196]	; (800a120 <TIM_Base_SetConfig+0xe8>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d007      	beq.n	800a070 <TIM_Base_SetConfig+0x38>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a30      	ldr	r2, [pc, #192]	; (800a124 <TIM_Base_SetConfig+0xec>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d003      	beq.n	800a070 <TIM_Base_SetConfig+0x38>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a2f      	ldr	r2, [pc, #188]	; (800a128 <TIM_Base_SetConfig+0xf0>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d108      	bne.n	800a082 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	4313      	orrs	r3, r2
 800a080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a25      	ldr	r2, [pc, #148]	; (800a11c <TIM_Base_SetConfig+0xe4>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d01b      	beq.n	800a0c2 <TIM_Base_SetConfig+0x8a>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a090:	d017      	beq.n	800a0c2 <TIM_Base_SetConfig+0x8a>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a22      	ldr	r2, [pc, #136]	; (800a120 <TIM_Base_SetConfig+0xe8>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d013      	beq.n	800a0c2 <TIM_Base_SetConfig+0x8a>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a21      	ldr	r2, [pc, #132]	; (800a124 <TIM_Base_SetConfig+0xec>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d00f      	beq.n	800a0c2 <TIM_Base_SetConfig+0x8a>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a20      	ldr	r2, [pc, #128]	; (800a128 <TIM_Base_SetConfig+0xf0>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d00b      	beq.n	800a0c2 <TIM_Base_SetConfig+0x8a>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a1f      	ldr	r2, [pc, #124]	; (800a12c <TIM_Base_SetConfig+0xf4>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d007      	beq.n	800a0c2 <TIM_Base_SetConfig+0x8a>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a1e      	ldr	r2, [pc, #120]	; (800a130 <TIM_Base_SetConfig+0xf8>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d003      	beq.n	800a0c2 <TIM_Base_SetConfig+0x8a>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <TIM_Base_SetConfig+0xfc>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d108      	bne.n	800a0d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	689a      	ldr	r2, [r3, #8]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a08      	ldr	r2, [pc, #32]	; (800a11c <TIM_Base_SetConfig+0xe4>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d103      	bne.n	800a108 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	691a      	ldr	r2, [r3, #16]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	615a      	str	r2, [r3, #20]
}
 800a10e:	bf00      	nop
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	40010000 	.word	0x40010000
 800a120:	40000400 	.word	0x40000400
 800a124:	40000800 	.word	0x40000800
 800a128:	40000c00 	.word	0x40000c00
 800a12c:	40014000 	.word	0x40014000
 800a130:	40014400 	.word	0x40014400
 800a134:	40014800 	.word	0x40014800

0800a138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a138:	b480      	push	{r7}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	f023 0201 	bic.w	r2, r3, #1
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 0303 	bic.w	r3, r3, #3
 800a16e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f023 0302 	bic.w	r3, r3, #2
 800a180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	4313      	orrs	r3, r2
 800a18a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a1c      	ldr	r2, [pc, #112]	; (800a200 <TIM_OC1_SetConfig+0xc8>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d10c      	bne.n	800a1ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	f023 0308 	bic.w	r3, r3, #8
 800a19a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f023 0304 	bic.w	r3, r3, #4
 800a1ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a13      	ldr	r2, [pc, #76]	; (800a200 <TIM_OC1_SetConfig+0xc8>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d111      	bne.n	800a1da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	621a      	str	r2, [r3, #32]
}
 800a1f4:	bf00      	nop
 800a1f6:	371c      	adds	r7, #28
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	40010000 	.word	0x40010000

0800a204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	f023 0210 	bic.w	r2, r3, #16
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a23a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	021b      	lsls	r3, r3, #8
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	4313      	orrs	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	f023 0320 	bic.w	r3, r3, #32
 800a24e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	011b      	lsls	r3, r3, #4
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	4313      	orrs	r3, r2
 800a25a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a1e      	ldr	r2, [pc, #120]	; (800a2d8 <TIM_OC2_SetConfig+0xd4>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d10d      	bne.n	800a280 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a26a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	011b      	lsls	r3, r3, #4
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	4313      	orrs	r3, r2
 800a276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a27e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a15      	ldr	r2, [pc, #84]	; (800a2d8 <TIM_OC2_SetConfig+0xd4>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d113      	bne.n	800a2b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a28e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	695b      	ldr	r3, [r3, #20]
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	621a      	str	r2, [r3, #32]
}
 800a2ca:	bf00      	nop
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	40010000 	.word	0x40010000

0800a2dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b087      	sub	sp, #28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	69db      	ldr	r3, [r3, #28]
 800a302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a30a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 0303 	bic.w	r3, r3, #3
 800a312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	021b      	lsls	r3, r3, #8
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	4313      	orrs	r3, r2
 800a330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a1d      	ldr	r2, [pc, #116]	; (800a3ac <TIM_OC3_SetConfig+0xd0>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d10d      	bne.n	800a356 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	021b      	lsls	r3, r3, #8
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a14      	ldr	r2, [pc, #80]	; (800a3ac <TIM_OC3_SetConfig+0xd0>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d113      	bne.n	800a386 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a36c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	011b      	lsls	r3, r3, #4
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	4313      	orrs	r3, r2
 800a378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	011b      	lsls	r3, r3, #4
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	4313      	orrs	r3, r2
 800a384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	621a      	str	r2, [r3, #32]
}
 800a3a0:	bf00      	nop
 800a3a2:	371c      	adds	r7, #28
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	40010000 	.word	0x40010000

0800a3b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	021b      	lsls	r3, r3, #8
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	031b      	lsls	r3, r3, #12
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	4313      	orrs	r3, r2
 800a406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a10      	ldr	r2, [pc, #64]	; (800a44c <TIM_OC4_SetConfig+0x9c>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d109      	bne.n	800a424 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	019b      	lsls	r3, r3, #6
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	4313      	orrs	r3, r2
 800a422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	685a      	ldr	r2, [r3, #4]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	621a      	str	r2, [r3, #32]
}
 800a43e:	bf00      	nop
 800a440:	371c      	adds	r7, #28
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	40010000 	.word	0x40010000

0800a450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6a1b      	ldr	r3, [r3, #32]
 800a466:	f023 0201 	bic.w	r2, r3, #1
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a47a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	011b      	lsls	r3, r3, #4
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	4313      	orrs	r3, r2
 800a484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	f023 030a 	bic.w	r3, r3, #10
 800a48c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	4313      	orrs	r3, r2
 800a494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	697a      	ldr	r2, [r7, #20]
 800a4a0:	621a      	str	r2, [r3, #32]
}
 800a4a2:	bf00      	nop
 800a4a4:	371c      	adds	r7, #28
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b087      	sub	sp, #28
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	60f8      	str	r0, [r7, #12]
 800a4b6:	60b9      	str	r1, [r7, #8]
 800a4b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	f023 0210 	bic.w	r2, r3, #16
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	031b      	lsls	r3, r3, #12
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	011b      	lsls	r3, r3, #4
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	693a      	ldr	r2, [r7, #16]
 800a500:	621a      	str	r2, [r3, #32]
}
 800a502:	bf00      	nop
 800a504:	371c      	adds	r7, #28
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a50e:	b480      	push	{r7}
 800a510:	b085      	sub	sp, #20
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a524:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	f043 0307 	orr.w	r3, r3, #7
 800a530:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	609a      	str	r2, [r3, #8]
}
 800a538:	bf00      	nop
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
 800a550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a55e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	021a      	lsls	r2, r3, #8
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	431a      	orrs	r2, r3
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	4313      	orrs	r3, r2
 800a570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	609a      	str	r2, [r3, #8]
}
 800a578:	bf00      	nop
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	f003 031f 	and.w	r3, r3, #31
 800a596:	2201      	movs	r2, #1
 800a598:	fa02 f303 	lsl.w	r3, r2, r3
 800a59c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6a1a      	ldr	r2, [r3, #32]
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	43db      	mvns	r3, r3
 800a5a6:	401a      	ands	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6a1a      	ldr	r2, [r3, #32]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f003 031f 	and.w	r3, r3, #31
 800a5b6:	6879      	ldr	r1, [r7, #4]
 800a5b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a5bc:	431a      	orrs	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	621a      	str	r2, [r3, #32]
}
 800a5c2:	bf00      	nop
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4a1c      	ldr	r2, [pc, #112]	; (800a64c <TIM_ResetCallback+0x7c>)
 800a5dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4a1b      	ldr	r2, [pc, #108]	; (800a650 <TIM_ResetCallback+0x80>)
 800a5e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4a1a      	ldr	r2, [pc, #104]	; (800a654 <TIM_ResetCallback+0x84>)
 800a5ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a19      	ldr	r2, [pc, #100]	; (800a658 <TIM_ResetCallback+0x88>)
 800a5f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a18      	ldr	r2, [pc, #96]	; (800a65c <TIM_ResetCallback+0x8c>)
 800a5fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a17      	ldr	r2, [pc, #92]	; (800a660 <TIM_ResetCallback+0x90>)
 800a604:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a16      	ldr	r2, [pc, #88]	; (800a664 <TIM_ResetCallback+0x94>)
 800a60c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a15      	ldr	r2, [pc, #84]	; (800a668 <TIM_ResetCallback+0x98>)
 800a614:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a14      	ldr	r2, [pc, #80]	; (800a66c <TIM_ResetCallback+0x9c>)
 800a61c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a13      	ldr	r2, [pc, #76]	; (800a670 <TIM_ResetCallback+0xa0>)
 800a624:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a12      	ldr	r2, [pc, #72]	; (800a674 <TIM_ResetCallback+0xa4>)
 800a62c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a11      	ldr	r2, [pc, #68]	; (800a678 <TIM_ResetCallback+0xa8>)
 800a634:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a10      	ldr	r2, [pc, #64]	; (800a67c <TIM_ResetCallback+0xac>)
 800a63c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	080042c9 	.word	0x080042c9
 800a650:	08009cef 	.word	0x08009cef
 800a654:	08009d67 	.word	0x08009d67
 800a658:	08009d7b 	.word	0x08009d7b
 800a65c:	08009d17 	.word	0x08009d17
 800a660:	08009d2b 	.word	0x08009d2b
 800a664:	08009d03 	.word	0x08009d03
 800a668:	08009d3f 	.word	0x08009d3f
 800a66c:	08009d53 	.word	0x08009d53
 800a670:	08009d8f 	.word	0x08009d8f
 800a674:	0800a801 	.word	0x0800a801
 800a678:	0800a815 	.word	0x0800a815
 800a67c:	0800a829 	.word	0x0800a829

0800a680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a690:	2b01      	cmp	r3, #1
 800a692:	d101      	bne.n	800a698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a694:	2302      	movs	r3, #2
 800a696:	e050      	b.n	800a73a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a1c      	ldr	r2, [pc, #112]	; (800a748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d018      	beq.n	800a70e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6e4:	d013      	beq.n	800a70e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a18      	ldr	r2, [pc, #96]	; (800a74c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d00e      	beq.n	800a70e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a16      	ldr	r2, [pc, #88]	; (800a750 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d009      	beq.n	800a70e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a15      	ldr	r2, [pc, #84]	; (800a754 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d004      	beq.n	800a70e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a13      	ldr	r2, [pc, #76]	; (800a758 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d10c      	bne.n	800a728 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	40010000 	.word	0x40010000
 800a74c:	40000400 	.word	0x40000400
 800a750:	40000800 	.word	0x40000800
 800a754:	40000c00 	.word	0x40000c00
 800a758:	40014000 	.word	0x40014000

0800a75c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a770:	2b01      	cmp	r3, #1
 800a772:	d101      	bne.n	800a778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a774:	2302      	movs	r3, #2
 800a776:	e03d      	b.n	800a7f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	4313      	orrs	r3, r2
 800a79a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e04a      	b.n	800a8e4 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b00      	cmp	r3, #0
 800a858:	d111      	bne.n	800a87e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fd2c 	bl	800b2c0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d102      	bne.n	800a876 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a1e      	ldr	r2, [pc, #120]	; (800a8ec <HAL_UART_Init+0xb0>)
 800a874:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2224      	movs	r2, #36	; 0x24
 800a882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68da      	ldr	r2, [r3, #12]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a894:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fff6 	bl	800b888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	691a      	ldr	r2, [r3, #16]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	695a      	ldr	r2, [r3, #20]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68da      	ldr	r2, [r3, #12]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2220      	movs	r2, #32
 800a8d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2220      	movs	r2, #32
 800a8de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	08004a85 	.word	0x08004a85

0800a8f0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d107      	bne.n	800a918 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90c:	f043 0220 	orr.w	r2, r3, #32
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e08c      	b.n	800aa32 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d101      	bne.n	800a926 <HAL_UART_RegisterCallback+0x36>
 800a922:	2302      	movs	r3, #2
 800a924:	e085      	b.n	800aa32 <HAL_UART_RegisterCallback+0x142>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b20      	cmp	r3, #32
 800a938:	d151      	bne.n	800a9de <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a93a:	7afb      	ldrb	r3, [r7, #11]
 800a93c:	2b0c      	cmp	r3, #12
 800a93e:	d845      	bhi.n	800a9cc <HAL_UART_RegisterCallback+0xdc>
 800a940:	a201      	add	r2, pc, #4	; (adr r2, 800a948 <HAL_UART_RegisterCallback+0x58>)
 800a942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a946:	bf00      	nop
 800a948:	0800a97d 	.word	0x0800a97d
 800a94c:	0800a985 	.word	0x0800a985
 800a950:	0800a98d 	.word	0x0800a98d
 800a954:	0800a995 	.word	0x0800a995
 800a958:	0800a99d 	.word	0x0800a99d
 800a95c:	0800a9a5 	.word	0x0800a9a5
 800a960:	0800a9ad 	.word	0x0800a9ad
 800a964:	0800a9b5 	.word	0x0800a9b5
 800a968:	0800a9cd 	.word	0x0800a9cd
 800a96c:	0800a9cd 	.word	0x0800a9cd
 800a970:	0800a9cd 	.word	0x0800a9cd
 800a974:	0800a9bd 	.word	0x0800a9bd
 800a978:	0800a9c5 	.word	0x0800a9c5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800a982:	e051      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a98a:	e04d      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a992:	e049      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a99a:	e045      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a9a2:	e041      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a9aa:	e03d      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a9b2:	e039      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a9ba:	e035      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a9c2:	e031      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a9ca:	e02d      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d0:	f043 0220 	orr.w	r2, r3, #32
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	75fb      	strb	r3, [r7, #23]
        break;
 800a9dc:	e024      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d116      	bne.n	800aa18 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a9ea:	7afb      	ldrb	r3, [r7, #11]
 800a9ec:	2b0b      	cmp	r3, #11
 800a9ee:	d002      	beq.n	800a9f6 <HAL_UART_RegisterCallback+0x106>
 800a9f0:	2b0c      	cmp	r3, #12
 800a9f2:	d004      	beq.n	800a9fe <HAL_UART_RegisterCallback+0x10e>
 800a9f4:	e007      	b.n	800aa06 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a9fc:	e014      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800aa04:	e010      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0a:	f043 0220 	orr.w	r2, r3, #32
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	75fb      	strb	r3, [r7, #23]
        break;
 800aa16:	e007      	b.n	800aa28 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1c:	f043 0220 	orr.w	r2, r3, #32
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop

0800aa40 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b20      	cmp	r3, #32
 800aa58:	d11d      	bne.n	800aa96 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <HAL_UART_Receive_IT+0x26>
 800aa60:	88fb      	ldrh	r3, [r7, #6]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e016      	b.n	800aa98 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d101      	bne.n	800aa78 <HAL_UART_Receive_IT+0x38>
 800aa74:	2302      	movs	r3, #2
 800aa76:	e00f      	b.n	800aa98 <HAL_UART_Receive_IT+0x58>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aa86:	88fb      	ldrh	r3, [r7, #6]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	68b9      	ldr	r1, [r7, #8]
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f000 fcf7 	bl	800b480 <UART_Start_Receive_IT>
 800aa92:	4603      	mov	r3, r0
 800aa94:	e000      	b.n	800aa98 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800aa96:	2302      	movs	r3, #2
  }
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b08c      	sub	sp, #48	; 0x30
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b20      	cmp	r3, #32
 800aab8:	d165      	bne.n	800ab86 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <HAL_UART_Transmit_DMA+0x26>
 800aac0:	88fb      	ldrh	r3, [r7, #6]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e05e      	b.n	800ab88 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d101      	bne.n	800aad8 <HAL_UART_Transmit_DMA+0x38>
 800aad4:	2302      	movs	r3, #2
 800aad6:	e057      	b.n	800ab88 <HAL_UART_Transmit_DMA+0xe8>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	88fa      	ldrh	r2, [r7, #6]
 800aaea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	88fa      	ldrh	r2, [r7, #6]
 800aaf0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2221      	movs	r2, #33	; 0x21
 800aafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab04:	4a22      	ldr	r2, [pc, #136]	; (800ab90 <HAL_UART_Transmit_DMA+0xf0>)
 800ab06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0c:	4a21      	ldr	r2, [pc, #132]	; (800ab94 <HAL_UART_Transmit_DMA+0xf4>)
 800ab0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab14:	4a20      	ldr	r2, [pc, #128]	; (800ab98 <HAL_UART_Transmit_DMA+0xf8>)
 800ab16:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ab20:	f107 0308 	add.w	r3, r7, #8
 800ab24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2c:	6819      	ldr	r1, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3304      	adds	r3, #4
 800ab34:	461a      	mov	r2, r3
 800ab36:	88fb      	ldrh	r3, [r7, #6]
 800ab38:	f7fb f848 	bl	8005bcc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab44:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3314      	adds	r3, #20
 800ab54:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	e853 3f00 	ldrex	r3, [r3]
 800ab5c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab64:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3314      	adds	r3, #20
 800ab6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab6e:	627a      	str	r2, [r7, #36]	; 0x24
 800ab70:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab72:	6a39      	ldr	r1, [r7, #32]
 800ab74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab76:	e841 2300 	strex	r3, r2, [r1]
 800ab7a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1e5      	bne.n	800ab4e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800ab82:	2300      	movs	r3, #0
 800ab84:	e000      	b.n	800ab88 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800ab86:	2302      	movs	r3, #2
  }
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3730      	adds	r7, #48	; 0x30
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	0800b331 	.word	0x0800b331
 800ab94:	0800b3cd 	.word	0x0800b3cd
 800ab98:	0800b3eb 	.word	0x0800b3eb

0800ab9c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b09a      	sub	sp, #104	; 0x68
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	330c      	adds	r3, #12
 800abaa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abae:	e853 3f00 	ldrex	r3, [r3]
 800abb2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800abb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abba:	667b      	str	r3, [r7, #100]	; 0x64
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	330c      	adds	r3, #12
 800abc2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800abc4:	657a      	str	r2, [r7, #84]	; 0x54
 800abc6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800abca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abcc:	e841 2300 	strex	r3, r2, [r1]
 800abd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800abd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1e5      	bne.n	800aba4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	3314      	adds	r3, #20
 800abde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe2:	e853 3f00 	ldrex	r3, [r3]
 800abe6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800abe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abea:	f023 0301 	bic.w	r3, r3, #1
 800abee:	663b      	str	r3, [r7, #96]	; 0x60
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	3314      	adds	r3, #20
 800abf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abf8:	643a      	str	r2, [r7, #64]	; 0x40
 800abfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac00:	e841 2300 	strex	r3, r2, [r1]
 800ac04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e5      	bne.n	800abd8 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d119      	bne.n	800ac48 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	330c      	adds	r3, #12
 800ac1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1c:	6a3b      	ldr	r3, [r7, #32]
 800ac1e:	e853 3f00 	ldrex	r3, [r3]
 800ac22:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	f023 0310 	bic.w	r3, r3, #16
 800ac2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	330c      	adds	r3, #12
 800ac32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac34:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac3c:	e841 2300 	strex	r3, r2, [r1]
 800ac40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e5      	bne.n	800ac14 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac52:	2b40      	cmp	r3, #64	; 0x40
 800ac54:	d136      	bne.n	800acc4 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3314      	adds	r3, #20
 800ac5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	e853 3f00 	ldrex	r3, [r3]
 800ac64:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3314      	adds	r3, #20
 800ac74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac76:	61ba      	str	r2, [r7, #24]
 800ac78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7a:	6979      	ldr	r1, [r7, #20]
 800ac7c:	69ba      	ldr	r2, [r7, #24]
 800ac7e:	e841 2300 	strex	r3, r2, [r1]
 800ac82:	613b      	str	r3, [r7, #16]
   return(result);
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1e5      	bne.n	800ac56 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d018      	beq.n	800acc4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac96:	2200      	movs	r2, #0
 800ac98:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fa ffec 	bl	8005c7c <HAL_DMA_Abort>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00c      	beq.n	800acc4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fb fa0e 	bl	80060d0 <HAL_DMA_GetError>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b20      	cmp	r3, #32
 800acb8:	d104      	bne.n	800acc4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2210      	movs	r2, #16
 800acbe:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800acc0:	2303      	movs	r3, #3
 800acc2:	e00a      	b.n	800acda <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2220      	movs	r2, #32
 800acce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3768      	adds	r7, #104	; 0x68
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
	...

0800ace4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b0ba      	sub	sp, #232	; 0xe8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	695b      	ldr	r3, [r3, #20]
 800ad06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ad10:	2300      	movs	r3, #0
 800ad12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ad16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad1a:	f003 030f 	and.w	r3, r3, #15
 800ad1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ad22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10f      	bne.n	800ad4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad2e:	f003 0320 	and.w	r3, r3, #32
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d009      	beq.n	800ad4a <HAL_UART_IRQHandler+0x66>
 800ad36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad3a:	f003 0320 	and.w	r3, r3, #32
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fce3 	bl	800b70e <UART_Receive_IT>
      return;
 800ad48:	e25b      	b.n	800b202 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ad4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f000 80e1 	beq.w	800af16 <HAL_UART_IRQHandler+0x232>
 800ad54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad58:	f003 0301 	and.w	r3, r3, #1
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d106      	bne.n	800ad6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f000 80d4 	beq.w	800af16 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00b      	beq.n	800ad92 <HAL_UART_IRQHandler+0xae>
 800ad7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d005      	beq.n	800ad92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8a:	f043 0201 	orr.w	r2, r3, #1
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad96:	f003 0304 	and.w	r3, r3, #4
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00b      	beq.n	800adb6 <HAL_UART_IRQHandler+0xd2>
 800ad9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ada2:	f003 0301 	and.w	r3, r3, #1
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d005      	beq.n	800adb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adae:	f043 0202 	orr.w	r2, r3, #2
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800adb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adba:	f003 0302 	and.w	r3, r3, #2
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00b      	beq.n	800adda <HAL_UART_IRQHandler+0xf6>
 800adc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adc6:	f003 0301 	and.w	r3, r3, #1
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add2:	f043 0204 	orr.w	r2, r3, #4
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800adda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adde:	f003 0308 	and.w	r3, r3, #8
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d011      	beq.n	800ae0a <HAL_UART_IRQHandler+0x126>
 800ade6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adea:	f003 0320 	and.w	r3, r3, #32
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d105      	bne.n	800adfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800adf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adf6:	f003 0301 	and.w	r3, r3, #1
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d005      	beq.n	800ae0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae02:	f043 0208 	orr.w	r2, r3, #8
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f000 81f2 	beq.w	800b1f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae18:	f003 0320 	and.w	r3, r3, #32
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d008      	beq.n	800ae32 <HAL_UART_IRQHandler+0x14e>
 800ae20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae24:	f003 0320 	and.w	r3, r3, #32
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d002      	beq.n	800ae32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fc6e 	bl	800b70e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	695b      	ldr	r3, [r3, #20]
 800ae38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae3c:	2b40      	cmp	r3, #64	; 0x40
 800ae3e:	bf0c      	ite	eq
 800ae40:	2301      	moveq	r3, #1
 800ae42:	2300      	movne	r3, #0
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4e:	f003 0308 	and.w	r3, r3, #8
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d103      	bne.n	800ae5e <HAL_UART_IRQHandler+0x17a>
 800ae56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d051      	beq.n	800af02 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fb74 	bl	800b54c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae6e:	2b40      	cmp	r3, #64	; 0x40
 800ae70:	d142      	bne.n	800aef8 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3314      	adds	r3, #20
 800ae78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae80:	e853 3f00 	ldrex	r3, [r3]
 800ae84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	3314      	adds	r3, #20
 800ae9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aeaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aeae:	e841 2300 	strex	r3, r2, [r1]
 800aeb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aeb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1d9      	bne.n	800ae72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d013      	beq.n	800aeee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeca:	4a7f      	ldr	r2, [pc, #508]	; (800b0c8 <HAL_UART_IRQHandler+0x3e4>)
 800aecc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fa ff42 	bl	8005d5c <HAL_DMA_Abort_IT>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d019      	beq.n	800af12 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aee8:	4610      	mov	r0, r2
 800aeea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeec:	e011      	b.n	800af12 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef6:	e00c      	b.n	800af12 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af00:	e007      	b.n	800af12 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800af10:	e172      	b.n	800b1f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af12:	bf00      	nop
    return;
 800af14:	e170      	b.n	800b1f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	f040 814c 	bne.w	800b1b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800af20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af24:	f003 0310 	and.w	r3, r3, #16
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 8145 	beq.w	800b1b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800af2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af32:	f003 0310 	and.w	r3, r3, #16
 800af36:	2b00      	cmp	r3, #0
 800af38:	f000 813e 	beq.w	800b1b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af3c:	2300      	movs	r3, #0
 800af3e:	60bb      	str	r3, [r7, #8]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	60bb      	str	r3, [r7, #8]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	60bb      	str	r3, [r7, #8]
 800af50:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	695b      	ldr	r3, [r3, #20]
 800af58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5c:	2b40      	cmp	r3, #64	; 0x40
 800af5e:	f040 80b5 	bne.w	800b0cc <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800af72:	2b00      	cmp	r3, #0
 800af74:	f000 8142 	beq.w	800b1fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af80:	429a      	cmp	r2, r3
 800af82:	f080 813b 	bcs.w	800b1fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af92:	69db      	ldr	r3, [r3, #28]
 800af94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af98:	f000 8088 	beq.w	800b0ac <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	330c      	adds	r3, #12
 800afa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800afaa:	e853 3f00 	ldrex	r3, [r3]
 800afae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800afb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	330c      	adds	r3, #12
 800afc4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800afc8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800afcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800afd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800afd8:	e841 2300 	strex	r3, r2, [r1]
 800afdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800afe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1d9      	bne.n	800af9c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3314      	adds	r3, #20
 800afee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aff2:	e853 3f00 	ldrex	r3, [r3]
 800aff6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800affa:	f023 0301 	bic.w	r3, r3, #1
 800affe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3314      	adds	r3, #20
 800b008:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b00c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b010:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b012:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b014:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b018:	e841 2300 	strex	r3, r2, [r1]
 800b01c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b01e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1e1      	bne.n	800afe8 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	3314      	adds	r3, #20
 800b02a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b02e:	e853 3f00 	ldrex	r3, [r3]
 800b032:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b03a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3314      	adds	r3, #20
 800b044:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b048:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b04a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b04e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b050:	e841 2300 	strex	r3, r2, [r1]
 800b054:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1e3      	bne.n	800b024 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2220      	movs	r2, #32
 800b060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	330c      	adds	r3, #12
 800b070:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b074:	e853 3f00 	ldrex	r3, [r3]
 800b078:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b07a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b07c:	f023 0310 	bic.w	r3, r3, #16
 800b080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	330c      	adds	r3, #12
 800b08a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b08e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b090:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b092:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b096:	e841 2300 	strex	r3, r2, [r1]
 800b09a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b09c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1e3      	bne.n	800b06a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fa fde8 	bl	8005c7c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b0b8:	b292      	uxth	r2, r2
 800b0ba:	1a8a      	subs	r2, r1, r2
 800b0bc:	b292      	uxth	r2, r2
 800b0be:	4611      	mov	r1, r2
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b0c4:	e09a      	b.n	800b1fc <HAL_UART_IRQHandler+0x518>
 800b0c6:	bf00      	nop
 800b0c8:	0800b613 	.word	0x0800b613
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f000 808c 	beq.w	800b200 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b0e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 8087 	beq.w	800b200 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	330c      	adds	r3, #12
 800b0f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fc:	e853 3f00 	ldrex	r3, [r3]
 800b100:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b108:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	330c      	adds	r3, #12
 800b112:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b116:	647a      	str	r2, [r7, #68]	; 0x44
 800b118:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b11c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b11e:	e841 2300 	strex	r3, r2, [r1]
 800b122:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1e3      	bne.n	800b0f2 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3314      	adds	r3, #20
 800b130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b134:	e853 3f00 	ldrex	r3, [r3]
 800b138:	623b      	str	r3, [r7, #32]
   return(result);
 800b13a:	6a3b      	ldr	r3, [r7, #32]
 800b13c:	f023 0301 	bic.w	r3, r3, #1
 800b140:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	3314      	adds	r3, #20
 800b14a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b14e:	633a      	str	r2, [r7, #48]	; 0x30
 800b150:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b156:	e841 2300 	strex	r3, r2, [r1]
 800b15a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1e3      	bne.n	800b12a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2220      	movs	r2, #32
 800b166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	330c      	adds	r3, #12
 800b176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	e853 3f00 	ldrex	r3, [r3]
 800b17e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f023 0310 	bic.w	r3, r3, #16
 800b186:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	330c      	adds	r3, #12
 800b190:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b194:	61fa      	str	r2, [r7, #28]
 800b196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b198:	69b9      	ldr	r1, [r7, #24]
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	e841 2300 	strex	r3, r2, [r1]
 800b1a0:	617b      	str	r3, [r7, #20]
   return(result);
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1e3      	bne.n	800b170 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1ac:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b1b6:	e023      	b.n	800b200 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d009      	beq.n	800b1d8 <HAL_UART_IRQHandler+0x4f4>
 800b1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d003      	beq.n	800b1d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fa33 	bl	800b63c <UART_Transmit_IT>
    return;
 800b1d6:	e014      	b.n	800b202 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00e      	beq.n	800b202 <HAL_UART_IRQHandler+0x51e>
 800b1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d008      	beq.n	800b202 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fa73 	bl	800b6dc <UART_EndTransmit_IT>
    return;
 800b1f6:	e004      	b.n	800b202 <HAL_UART_IRQHandler+0x51e>
    return;
 800b1f8:	bf00      	nop
 800b1fa:	e002      	b.n	800b202 <HAL_UART_IRQHandler+0x51e>
      return;
 800b1fc:	bf00      	nop
 800b1fe:	e000      	b.n	800b202 <HAL_UART_IRQHandler+0x51e>
      return;
 800b200:	bf00      	nop
  }
}
 800b202:	37e8      	adds	r7, #232	; 0xe8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a10      	ldr	r2, [pc, #64]	; (800b30c <UART_InitCallbacksToDefault+0x4c>)
 800b2cc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a0f      	ldr	r2, [pc, #60]	; (800b310 <UART_InitCallbacksToDefault+0x50>)
 800b2d2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a0f      	ldr	r2, [pc, #60]	; (800b314 <UART_InitCallbacksToDefault+0x54>)
 800b2d8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a0e      	ldr	r2, [pc, #56]	; (800b318 <UART_InitCallbacksToDefault+0x58>)
 800b2de:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a0e      	ldr	r2, [pc, #56]	; (800b31c <UART_InitCallbacksToDefault+0x5c>)
 800b2e4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a0d      	ldr	r2, [pc, #52]	; (800b320 <UART_InitCallbacksToDefault+0x60>)
 800b2ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a0d      	ldr	r2, [pc, #52]	; (800b324 <UART_InitCallbacksToDefault+0x64>)
 800b2f0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a0c      	ldr	r2, [pc, #48]	; (800b328 <UART_InitCallbacksToDefault+0x68>)
 800b2f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a0c      	ldr	r2, [pc, #48]	; (800b32c <UART_InitCallbacksToDefault+0x6c>)
 800b2fc:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b2fe:	bf00      	nop
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	0800b21d 	.word	0x0800b21d
 800b310:	0800b209 	.word	0x0800b209
 800b314:	0800b245 	.word	0x0800b245
 800b318:	0800b231 	.word	0x0800b231
 800b31c:	0800b259 	.word	0x0800b259
 800b320:	0800b26d 	.word	0x0800b26d
 800b324:	0800b281 	.word	0x0800b281
 800b328:	0800b295 	.word	0x0800b295
 800b32c:	0800b2a9 	.word	0x0800b2a9

0800b330 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b090      	sub	sp, #64	; 0x40
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d137      	bne.n	800b3bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34e:	2200      	movs	r2, #0
 800b350:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	3314      	adds	r3, #20
 800b358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35c:	e853 3f00 	ldrex	r3, [r3]
 800b360:	623b      	str	r3, [r7, #32]
   return(result);
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b368:	63bb      	str	r3, [r7, #56]	; 0x38
 800b36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3314      	adds	r3, #20
 800b370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b372:	633a      	str	r2, [r7, #48]	; 0x30
 800b374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e5      	bne.n	800b352 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	330c      	adds	r3, #12
 800b38c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	e853 3f00 	ldrex	r3, [r3]
 800b394:	60fb      	str	r3, [r7, #12]
   return(result);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b39c:	637b      	str	r3, [r7, #52]	; 0x34
 800b39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	330c      	adds	r3, #12
 800b3a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3a6:	61fa      	str	r2, [r7, #28]
 800b3a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3aa:	69b9      	ldr	r1, [r7, #24]
 800b3ac:	69fa      	ldr	r2, [r7, #28]
 800b3ae:	e841 2300 	strex	r3, r2, [r1]
 800b3b2:	617b      	str	r3, [r7, #20]
   return(result);
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1e5      	bne.n	800b386 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3ba:	e003      	b.n	800b3c4 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800b3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b3c2:	4798      	blx	r3
}
 800b3c4:	bf00      	nop
 800b3c6:	3740      	adds	r7, #64	; 0x40
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3e2:	bf00      	nop
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	695b      	ldr	r3, [r3, #20]
 800b402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b406:	2b80      	cmp	r3, #128	; 0x80
 800b408:	bf0c      	ite	eq
 800b40a:	2301      	moveq	r3, #1
 800b40c:	2300      	movne	r3, #0
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	2b21      	cmp	r3, #33	; 0x21
 800b41c:	d108      	bne.n	800b430 <UART_DMAError+0x46>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d005      	beq.n	800b430 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	2200      	movs	r2, #0
 800b428:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b42a:	68b8      	ldr	r0, [r7, #8]
 800b42c:	f000 f866 	bl	800b4fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	695b      	ldr	r3, [r3, #20]
 800b436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b43a:	2b40      	cmp	r3, #64	; 0x40
 800b43c:	bf0c      	ite	eq
 800b43e:	2301      	moveq	r3, #1
 800b440:	2300      	movne	r3, #0
 800b442:	b2db      	uxtb	r3, r3
 800b444:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	2b22      	cmp	r3, #34	; 0x22
 800b450:	d108      	bne.n	800b464 <UART_DMAError+0x7a>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d005      	beq.n	800b464 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2200      	movs	r2, #0
 800b45c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b45e:	68b8      	ldr	r0, [r7, #8]
 800b460:	f000 f874 	bl	800b54c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b468:	f043 0210 	orr.w	r2, r3, #16
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b474:	68b8      	ldr	r0, [r7, #8]
 800b476:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b478:	bf00      	nop
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	4613      	mov	r3, r2
 800b48c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	88fa      	ldrh	r2, [r7, #6]
 800b498:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	88fa      	ldrh	r2, [r7, #6]
 800b49e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2222      	movs	r2, #34	; 0x22
 800b4aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d007      	beq.n	800b4ce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68da      	ldr	r2, [r3, #12]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	695a      	ldr	r2, [r3, #20]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f042 0201 	orr.w	r2, r2, #1
 800b4dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68da      	ldr	r2, [r3, #12]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f042 0220 	orr.w	r2, r2, #32
 800b4ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3714      	adds	r7, #20
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b089      	sub	sp, #36	; 0x24
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	330c      	adds	r3, #12
 800b50a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	e853 3f00 	ldrex	r3, [r3]
 800b512:	60bb      	str	r3, [r7, #8]
   return(result);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b51a:	61fb      	str	r3, [r7, #28]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	330c      	adds	r3, #12
 800b522:	69fa      	ldr	r2, [r7, #28]
 800b524:	61ba      	str	r2, [r7, #24]
 800b526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b528:	6979      	ldr	r1, [r7, #20]
 800b52a:	69ba      	ldr	r2, [r7, #24]
 800b52c:	e841 2300 	strex	r3, r2, [r1]
 800b530:	613b      	str	r3, [r7, #16]
   return(result);
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1e5      	bne.n	800b504 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2220      	movs	r2, #32
 800b53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b540:	bf00      	nop
 800b542:	3724      	adds	r7, #36	; 0x24
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b095      	sub	sp, #84	; 0x54
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	330c      	adds	r3, #12
 800b55a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55e:	e853 3f00 	ldrex	r3, [r3]
 800b562:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b566:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b56a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	330c      	adds	r3, #12
 800b572:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b574:	643a      	str	r2, [r7, #64]	; 0x40
 800b576:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b578:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b57a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b57c:	e841 2300 	strex	r3, r2, [r1]
 800b580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1e5      	bne.n	800b554 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3314      	adds	r3, #20
 800b58e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b590:	6a3b      	ldr	r3, [r7, #32]
 800b592:	e853 3f00 	ldrex	r3, [r3]
 800b596:	61fb      	str	r3, [r7, #28]
   return(result);
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	f023 0301 	bic.w	r3, r3, #1
 800b59e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3314      	adds	r3, #20
 800b5a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5b0:	e841 2300 	strex	r3, r2, [r1]
 800b5b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1e5      	bne.n	800b588 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d119      	bne.n	800b5f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	330c      	adds	r3, #12
 800b5ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	e853 3f00 	ldrex	r3, [r3]
 800b5d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	f023 0310 	bic.w	r3, r3, #16
 800b5da:	647b      	str	r3, [r7, #68]	; 0x44
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	330c      	adds	r3, #12
 800b5e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5e4:	61ba      	str	r2, [r7, #24]
 800b5e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e8:	6979      	ldr	r1, [r7, #20]
 800b5ea:	69ba      	ldr	r2, [r7, #24]
 800b5ec:	e841 2300 	strex	r3, r2, [r1]
 800b5f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1e5      	bne.n	800b5c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2220      	movs	r2, #32
 800b5fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b606:	bf00      	nop
 800b608:	3754      	adds	r7, #84	; 0x54
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b61e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2200      	movs	r2, #0
 800b62a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b634:	bf00      	nop
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b21      	cmp	r3, #33	; 0x21
 800b64e:	d13e      	bne.n	800b6ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b658:	d114      	bne.n	800b684 <UART_Transmit_IT+0x48>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d110      	bne.n	800b684 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	461a      	mov	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b676:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a1b      	ldr	r3, [r3, #32]
 800b67c:	1c9a      	adds	r2, r3, #2
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	621a      	str	r2, [r3, #32]
 800b682:	e008      	b.n	800b696 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a1b      	ldr	r3, [r3, #32]
 800b688:	1c59      	adds	r1, r3, #1
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	6211      	str	r1, [r2, #32]
 800b68e:	781a      	ldrb	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	3b01      	subs	r3, #1
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10f      	bne.n	800b6ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68da      	ldr	r2, [r3, #12]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b6b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68da      	ldr	r2, [r3, #12]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	e000      	b.n	800b6d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b6ce:	2302      	movs	r3, #2
  }
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3714      	adds	r7, #20
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	68da      	ldr	r2, [r3, #12]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2220      	movs	r2, #32
 800b6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b08c      	sub	sp, #48	; 0x30
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b22      	cmp	r3, #34	; 0x22
 800b720:	f040 80ad 	bne.w	800b87e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b72c:	d117      	bne.n	800b75e <UART_Receive_IT+0x50>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d113      	bne.n	800b75e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b736:	2300      	movs	r3, #0
 800b738:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	b29b      	uxth	r3, r3
 800b748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b750:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b756:	1c9a      	adds	r2, r3, #2
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	629a      	str	r2, [r3, #40]	; 0x28
 800b75c:	e026      	b.n	800b7ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b762:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b764:	2300      	movs	r3, #0
 800b766:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b770:	d007      	beq.n	800b782 <UART_Receive_IT+0x74>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <UART_Receive_IT+0x82>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d106      	bne.n	800b790 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78c:	701a      	strb	r2, [r3, #0]
 800b78e:	e008      	b.n	800b7a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	b2db      	uxtb	r3, r3
 800b798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a6:	1c5a      	adds	r2, r3, #1
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d15c      	bne.n	800b87a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68da      	ldr	r2, [r3, #12]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f022 0220 	bic.w	r2, r2, #32
 800b7ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68da      	ldr	r2, [r3, #12]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b7de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	695a      	ldr	r2, [r3, #20]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f022 0201 	bic.w	r2, r2, #1
 800b7ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d136      	bne.n	800b86e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	330c      	adds	r3, #12
 800b80c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	e853 3f00 	ldrex	r3, [r3]
 800b814:	613b      	str	r3, [r7, #16]
   return(result);
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	f023 0310 	bic.w	r3, r3, #16
 800b81c:	627b      	str	r3, [r7, #36]	; 0x24
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	330c      	adds	r3, #12
 800b824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b826:	623a      	str	r2, [r7, #32]
 800b828:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82a:	69f9      	ldr	r1, [r7, #28]
 800b82c:	6a3a      	ldr	r2, [r7, #32]
 800b82e:	e841 2300 	strex	r3, r2, [r1]
 800b832:	61bb      	str	r3, [r7, #24]
   return(result);
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1e5      	bne.n	800b806 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f003 0310 	and.w	r3, r3, #16
 800b844:	2b10      	cmp	r3, #16
 800b846:	d10a      	bne.n	800b85e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b848:	2300      	movs	r3, #0
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	60fb      	str	r3, [r7, #12]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	60fb      	str	r3, [r7, #12]
 800b85c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b866:	4611      	mov	r1, r2
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	4798      	blx	r3
 800b86c:	e003      	b.n	800b876 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b876:	2300      	movs	r3, #0
 800b878:	e002      	b.n	800b880 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	e000      	b.n	800b880 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b87e:	2302      	movs	r3, #2
  }
}
 800b880:	4618      	mov	r0, r3
 800b882:	3730      	adds	r7, #48	; 0x30
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b88c:	b0c0      	sub	sp, #256	; 0x100
 800b88e:	af00      	add	r7, sp, #0
 800b890:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8a4:	68d9      	ldr	r1, [r3, #12]
 800b8a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	ea40 0301 	orr.w	r3, r0, r1
 800b8b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8b6:	689a      	ldr	r2, [r3, #8]
 800b8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	431a      	orrs	r2, r3
 800b8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	431a      	orrs	r2, r3
 800b8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8cc:	69db      	ldr	r3, [r3, #28]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b8d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b8e0:	f021 010c 	bic.w	r1, r1, #12
 800b8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b8ee:	430b      	orrs	r3, r1
 800b8f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b8f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b8fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b902:	6999      	ldr	r1, [r3, #24]
 800b904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	ea40 0301 	orr.w	r3, r0, r1
 800b90e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	4b8f      	ldr	r3, [pc, #572]	; (800bb54 <UART_SetConfig+0x2cc>)
 800b918:	429a      	cmp	r2, r3
 800b91a:	d005      	beq.n	800b928 <UART_SetConfig+0xa0>
 800b91c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	4b8d      	ldr	r3, [pc, #564]	; (800bb58 <UART_SetConfig+0x2d0>)
 800b924:	429a      	cmp	r2, r3
 800b926:	d104      	bne.n	800b932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b928:	f7fd fa84 	bl	8008e34 <HAL_RCC_GetPCLK2Freq>
 800b92c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b930:	e003      	b.n	800b93a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b932:	f7fd fa6b 	bl	8008e0c <HAL_RCC_GetPCLK1Freq>
 800b936:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b93a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b93e:	69db      	ldr	r3, [r3, #28]
 800b940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b944:	f040 810c 	bne.w	800bb60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b94c:	2200      	movs	r2, #0
 800b94e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b952:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b95a:	4622      	mov	r2, r4
 800b95c:	462b      	mov	r3, r5
 800b95e:	1891      	adds	r1, r2, r2
 800b960:	65b9      	str	r1, [r7, #88]	; 0x58
 800b962:	415b      	adcs	r3, r3
 800b964:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b96a:	4621      	mov	r1, r4
 800b96c:	eb12 0801 	adds.w	r8, r2, r1
 800b970:	4629      	mov	r1, r5
 800b972:	eb43 0901 	adc.w	r9, r3, r1
 800b976:	f04f 0200 	mov.w	r2, #0
 800b97a:	f04f 0300 	mov.w	r3, #0
 800b97e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b98a:	4690      	mov	r8, r2
 800b98c:	4699      	mov	r9, r3
 800b98e:	4623      	mov	r3, r4
 800b990:	eb18 0303 	adds.w	r3, r8, r3
 800b994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b998:	462b      	mov	r3, r5
 800b99a:	eb49 0303 	adc.w	r3, r9, r3
 800b99e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b9a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b9ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b9b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	18db      	adds	r3, r3, r3
 800b9ba:	653b      	str	r3, [r7, #80]	; 0x50
 800b9bc:	4613      	mov	r3, r2
 800b9be:	eb42 0303 	adc.w	r3, r2, r3
 800b9c2:	657b      	str	r3, [r7, #84]	; 0x54
 800b9c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b9c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b9cc:	f7f5 f9ce 	bl	8000d6c <__aeabi_uldivmod>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	4b61      	ldr	r3, [pc, #388]	; (800bb5c <UART_SetConfig+0x2d4>)
 800b9d6:	fba3 2302 	umull	r2, r3, r3, r2
 800b9da:	095b      	lsrs	r3, r3, #5
 800b9dc:	011c      	lsls	r4, r3, #4
 800b9de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b9ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	464b      	mov	r3, r9
 800b9f4:	1891      	adds	r1, r2, r2
 800b9f6:	64b9      	str	r1, [r7, #72]	; 0x48
 800b9f8:	415b      	adcs	r3, r3
 800b9fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ba00:	4641      	mov	r1, r8
 800ba02:	eb12 0a01 	adds.w	sl, r2, r1
 800ba06:	4649      	mov	r1, r9
 800ba08:	eb43 0b01 	adc.w	fp, r3, r1
 800ba0c:	f04f 0200 	mov.w	r2, #0
 800ba10:	f04f 0300 	mov.w	r3, #0
 800ba14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ba18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ba1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba20:	4692      	mov	sl, r2
 800ba22:	469b      	mov	fp, r3
 800ba24:	4643      	mov	r3, r8
 800ba26:	eb1a 0303 	adds.w	r3, sl, r3
 800ba2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba2e:	464b      	mov	r3, r9
 800ba30:	eb4b 0303 	adc.w	r3, fp, r3
 800ba34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ba38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ba48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	18db      	adds	r3, r3, r3
 800ba50:	643b      	str	r3, [r7, #64]	; 0x40
 800ba52:	4613      	mov	r3, r2
 800ba54:	eb42 0303 	adc.w	r3, r2, r3
 800ba58:	647b      	str	r3, [r7, #68]	; 0x44
 800ba5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ba5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ba62:	f7f5 f983 	bl	8000d6c <__aeabi_uldivmod>
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	4611      	mov	r1, r2
 800ba6c:	4b3b      	ldr	r3, [pc, #236]	; (800bb5c <UART_SetConfig+0x2d4>)
 800ba6e:	fba3 2301 	umull	r2, r3, r3, r1
 800ba72:	095b      	lsrs	r3, r3, #5
 800ba74:	2264      	movs	r2, #100	; 0x64
 800ba76:	fb02 f303 	mul.w	r3, r2, r3
 800ba7a:	1acb      	subs	r3, r1, r3
 800ba7c:	00db      	lsls	r3, r3, #3
 800ba7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ba82:	4b36      	ldr	r3, [pc, #216]	; (800bb5c <UART_SetConfig+0x2d4>)
 800ba84:	fba3 2302 	umull	r2, r3, r3, r2
 800ba88:	095b      	lsrs	r3, r3, #5
 800ba8a:	005b      	lsls	r3, r3, #1
 800ba8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba90:	441c      	add	r4, r3
 800ba92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba96:	2200      	movs	r2, #0
 800ba98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800baa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800baa4:	4642      	mov	r2, r8
 800baa6:	464b      	mov	r3, r9
 800baa8:	1891      	adds	r1, r2, r2
 800baaa:	63b9      	str	r1, [r7, #56]	; 0x38
 800baac:	415b      	adcs	r3, r3
 800baae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bab4:	4641      	mov	r1, r8
 800bab6:	1851      	adds	r1, r2, r1
 800bab8:	6339      	str	r1, [r7, #48]	; 0x30
 800baba:	4649      	mov	r1, r9
 800babc:	414b      	adcs	r3, r1
 800babe:	637b      	str	r3, [r7, #52]	; 0x34
 800bac0:	f04f 0200 	mov.w	r2, #0
 800bac4:	f04f 0300 	mov.w	r3, #0
 800bac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bacc:	4659      	mov	r1, fp
 800bace:	00cb      	lsls	r3, r1, #3
 800bad0:	4651      	mov	r1, sl
 800bad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bad6:	4651      	mov	r1, sl
 800bad8:	00ca      	lsls	r2, r1, #3
 800bada:	4610      	mov	r0, r2
 800badc:	4619      	mov	r1, r3
 800bade:	4603      	mov	r3, r0
 800bae0:	4642      	mov	r2, r8
 800bae2:	189b      	adds	r3, r3, r2
 800bae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bae8:	464b      	mov	r3, r9
 800baea:	460a      	mov	r2, r1
 800baec:	eb42 0303 	adc.w	r3, r2, r3
 800baf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800baf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bb00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bb04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bb08:	460b      	mov	r3, r1
 800bb0a:	18db      	adds	r3, r3, r3
 800bb0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb0e:	4613      	mov	r3, r2
 800bb10:	eb42 0303 	adc.w	r3, r2, r3
 800bb14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bb1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bb1e:	f7f5 f925 	bl	8000d6c <__aeabi_uldivmod>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	4b0d      	ldr	r3, [pc, #52]	; (800bb5c <UART_SetConfig+0x2d4>)
 800bb28:	fba3 1302 	umull	r1, r3, r3, r2
 800bb2c:	095b      	lsrs	r3, r3, #5
 800bb2e:	2164      	movs	r1, #100	; 0x64
 800bb30:	fb01 f303 	mul.w	r3, r1, r3
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	00db      	lsls	r3, r3, #3
 800bb38:	3332      	adds	r3, #50	; 0x32
 800bb3a:	4a08      	ldr	r2, [pc, #32]	; (800bb5c <UART_SetConfig+0x2d4>)
 800bb3c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb40:	095b      	lsrs	r3, r3, #5
 800bb42:	f003 0207 	and.w	r2, r3, #7
 800bb46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4422      	add	r2, r4
 800bb4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bb50:	e105      	b.n	800bd5e <UART_SetConfig+0x4d6>
 800bb52:	bf00      	nop
 800bb54:	40011000 	.word	0x40011000
 800bb58:	40011400 	.word	0x40011400
 800bb5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bb60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb64:	2200      	movs	r2, #0
 800bb66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bb6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bb6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bb72:	4642      	mov	r2, r8
 800bb74:	464b      	mov	r3, r9
 800bb76:	1891      	adds	r1, r2, r2
 800bb78:	6239      	str	r1, [r7, #32]
 800bb7a:	415b      	adcs	r3, r3
 800bb7c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb82:	4641      	mov	r1, r8
 800bb84:	1854      	adds	r4, r2, r1
 800bb86:	4649      	mov	r1, r9
 800bb88:	eb43 0501 	adc.w	r5, r3, r1
 800bb8c:	f04f 0200 	mov.w	r2, #0
 800bb90:	f04f 0300 	mov.w	r3, #0
 800bb94:	00eb      	lsls	r3, r5, #3
 800bb96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb9a:	00e2      	lsls	r2, r4, #3
 800bb9c:	4614      	mov	r4, r2
 800bb9e:	461d      	mov	r5, r3
 800bba0:	4643      	mov	r3, r8
 800bba2:	18e3      	adds	r3, r4, r3
 800bba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bba8:	464b      	mov	r3, r9
 800bbaa:	eb45 0303 	adc.w	r3, r5, r3
 800bbae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bbb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bbbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bbc2:	f04f 0200 	mov.w	r2, #0
 800bbc6:	f04f 0300 	mov.w	r3, #0
 800bbca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bbce:	4629      	mov	r1, r5
 800bbd0:	008b      	lsls	r3, r1, #2
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbd8:	4621      	mov	r1, r4
 800bbda:	008a      	lsls	r2, r1, #2
 800bbdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bbe0:	f7f5 f8c4 	bl	8000d6c <__aeabi_uldivmod>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	4b60      	ldr	r3, [pc, #384]	; (800bd6c <UART_SetConfig+0x4e4>)
 800bbea:	fba3 2302 	umull	r2, r3, r3, r2
 800bbee:	095b      	lsrs	r3, r3, #5
 800bbf0:	011c      	lsls	r4, r3, #4
 800bbf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bbfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bc00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bc04:	4642      	mov	r2, r8
 800bc06:	464b      	mov	r3, r9
 800bc08:	1891      	adds	r1, r2, r2
 800bc0a:	61b9      	str	r1, [r7, #24]
 800bc0c:	415b      	adcs	r3, r3
 800bc0e:	61fb      	str	r3, [r7, #28]
 800bc10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bc14:	4641      	mov	r1, r8
 800bc16:	1851      	adds	r1, r2, r1
 800bc18:	6139      	str	r1, [r7, #16]
 800bc1a:	4649      	mov	r1, r9
 800bc1c:	414b      	adcs	r3, r1
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	f04f 0200 	mov.w	r2, #0
 800bc24:	f04f 0300 	mov.w	r3, #0
 800bc28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bc2c:	4659      	mov	r1, fp
 800bc2e:	00cb      	lsls	r3, r1, #3
 800bc30:	4651      	mov	r1, sl
 800bc32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc36:	4651      	mov	r1, sl
 800bc38:	00ca      	lsls	r2, r1, #3
 800bc3a:	4610      	mov	r0, r2
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	4603      	mov	r3, r0
 800bc40:	4642      	mov	r2, r8
 800bc42:	189b      	adds	r3, r3, r2
 800bc44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc48:	464b      	mov	r3, r9
 800bc4a:	460a      	mov	r2, r1
 800bc4c:	eb42 0303 	adc.w	r3, r2, r3
 800bc50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bc60:	f04f 0200 	mov.w	r2, #0
 800bc64:	f04f 0300 	mov.w	r3, #0
 800bc68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bc6c:	4649      	mov	r1, r9
 800bc6e:	008b      	lsls	r3, r1, #2
 800bc70:	4641      	mov	r1, r8
 800bc72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc76:	4641      	mov	r1, r8
 800bc78:	008a      	lsls	r2, r1, #2
 800bc7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bc7e:	f7f5 f875 	bl	8000d6c <__aeabi_uldivmod>
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	4b39      	ldr	r3, [pc, #228]	; (800bd6c <UART_SetConfig+0x4e4>)
 800bc88:	fba3 1302 	umull	r1, r3, r3, r2
 800bc8c:	095b      	lsrs	r3, r3, #5
 800bc8e:	2164      	movs	r1, #100	; 0x64
 800bc90:	fb01 f303 	mul.w	r3, r1, r3
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	011b      	lsls	r3, r3, #4
 800bc98:	3332      	adds	r3, #50	; 0x32
 800bc9a:	4a34      	ldr	r2, [pc, #208]	; (800bd6c <UART_SetConfig+0x4e4>)
 800bc9c:	fba2 2303 	umull	r2, r3, r2, r3
 800bca0:	095b      	lsrs	r3, r3, #5
 800bca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bca6:	441c      	add	r4, r3
 800bca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcac:	2200      	movs	r2, #0
 800bcae:	673b      	str	r3, [r7, #112]	; 0x70
 800bcb0:	677a      	str	r2, [r7, #116]	; 0x74
 800bcb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bcb6:	4642      	mov	r2, r8
 800bcb8:	464b      	mov	r3, r9
 800bcba:	1891      	adds	r1, r2, r2
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	415b      	adcs	r3, r3
 800bcc0:	60fb      	str	r3, [r7, #12]
 800bcc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bcc6:	4641      	mov	r1, r8
 800bcc8:	1851      	adds	r1, r2, r1
 800bcca:	6039      	str	r1, [r7, #0]
 800bccc:	4649      	mov	r1, r9
 800bcce:	414b      	adcs	r3, r1
 800bcd0:	607b      	str	r3, [r7, #4]
 800bcd2:	f04f 0200 	mov.w	r2, #0
 800bcd6:	f04f 0300 	mov.w	r3, #0
 800bcda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bcde:	4659      	mov	r1, fp
 800bce0:	00cb      	lsls	r3, r1, #3
 800bce2:	4651      	mov	r1, sl
 800bce4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bce8:	4651      	mov	r1, sl
 800bcea:	00ca      	lsls	r2, r1, #3
 800bcec:	4610      	mov	r0, r2
 800bcee:	4619      	mov	r1, r3
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	4642      	mov	r2, r8
 800bcf4:	189b      	adds	r3, r3, r2
 800bcf6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcf8:	464b      	mov	r3, r9
 800bcfa:	460a      	mov	r2, r1
 800bcfc:	eb42 0303 	adc.w	r3, r2, r3
 800bd00:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	663b      	str	r3, [r7, #96]	; 0x60
 800bd0c:	667a      	str	r2, [r7, #100]	; 0x64
 800bd0e:	f04f 0200 	mov.w	r2, #0
 800bd12:	f04f 0300 	mov.w	r3, #0
 800bd16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bd1a:	4649      	mov	r1, r9
 800bd1c:	008b      	lsls	r3, r1, #2
 800bd1e:	4641      	mov	r1, r8
 800bd20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd24:	4641      	mov	r1, r8
 800bd26:	008a      	lsls	r2, r1, #2
 800bd28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bd2c:	f7f5 f81e 	bl	8000d6c <__aeabi_uldivmod>
 800bd30:	4602      	mov	r2, r0
 800bd32:	460b      	mov	r3, r1
 800bd34:	4b0d      	ldr	r3, [pc, #52]	; (800bd6c <UART_SetConfig+0x4e4>)
 800bd36:	fba3 1302 	umull	r1, r3, r3, r2
 800bd3a:	095b      	lsrs	r3, r3, #5
 800bd3c:	2164      	movs	r1, #100	; 0x64
 800bd3e:	fb01 f303 	mul.w	r3, r1, r3
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	011b      	lsls	r3, r3, #4
 800bd46:	3332      	adds	r3, #50	; 0x32
 800bd48:	4a08      	ldr	r2, [pc, #32]	; (800bd6c <UART_SetConfig+0x4e4>)
 800bd4a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd4e:	095b      	lsrs	r3, r3, #5
 800bd50:	f003 020f 	and.w	r2, r3, #15
 800bd54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4422      	add	r2, r4
 800bd5c:	609a      	str	r2, [r3, #8]
}
 800bd5e:	bf00      	nop
 800bd60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bd64:	46bd      	mov	sp, r7
 800bd66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd6a:	bf00      	nop
 800bd6c:	51eb851f 	.word	0x51eb851f

0800bd70 <__errno>:
 800bd70:	4b01      	ldr	r3, [pc, #4]	; (800bd78 <__errno+0x8>)
 800bd72:	6818      	ldr	r0, [r3, #0]
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	200002b8 	.word	0x200002b8

0800bd7c <__libc_init_array>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	4d0d      	ldr	r5, [pc, #52]	; (800bdb4 <__libc_init_array+0x38>)
 800bd80:	4c0d      	ldr	r4, [pc, #52]	; (800bdb8 <__libc_init_array+0x3c>)
 800bd82:	1b64      	subs	r4, r4, r5
 800bd84:	10a4      	asrs	r4, r4, #2
 800bd86:	2600      	movs	r6, #0
 800bd88:	42a6      	cmp	r6, r4
 800bd8a:	d109      	bne.n	800bda0 <__libc_init_array+0x24>
 800bd8c:	4d0b      	ldr	r5, [pc, #44]	; (800bdbc <__libc_init_array+0x40>)
 800bd8e:	4c0c      	ldr	r4, [pc, #48]	; (800bdc0 <__libc_init_array+0x44>)
 800bd90:	f001 f9e4 	bl	800d15c <_init>
 800bd94:	1b64      	subs	r4, r4, r5
 800bd96:	10a4      	asrs	r4, r4, #2
 800bd98:	2600      	movs	r6, #0
 800bd9a:	42a6      	cmp	r6, r4
 800bd9c:	d105      	bne.n	800bdaa <__libc_init_array+0x2e>
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}
 800bda0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bda4:	4798      	blx	r3
 800bda6:	3601      	adds	r6, #1
 800bda8:	e7ee      	b.n	800bd88 <__libc_init_array+0xc>
 800bdaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdae:	4798      	blx	r3
 800bdb0:	3601      	adds	r6, #1
 800bdb2:	e7f2      	b.n	800bd9a <__libc_init_array+0x1e>
 800bdb4:	0800da48 	.word	0x0800da48
 800bdb8:	0800da48 	.word	0x0800da48
 800bdbc:	0800da48 	.word	0x0800da48
 800bdc0:	0800da4c 	.word	0x0800da4c

0800bdc4 <memcpy>:
 800bdc4:	440a      	add	r2, r1
 800bdc6:	4291      	cmp	r1, r2
 800bdc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdcc:	d100      	bne.n	800bdd0 <memcpy+0xc>
 800bdce:	4770      	bx	lr
 800bdd0:	b510      	push	{r4, lr}
 800bdd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdda:	4291      	cmp	r1, r2
 800bddc:	d1f9      	bne.n	800bdd2 <memcpy+0xe>
 800bdde:	bd10      	pop	{r4, pc}

0800bde0 <memset>:
 800bde0:	4402      	add	r2, r0
 800bde2:	4603      	mov	r3, r0
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d100      	bne.n	800bdea <memset+0xa>
 800bde8:	4770      	bx	lr
 800bdea:	f803 1b01 	strb.w	r1, [r3], #1
 800bdee:	e7f9      	b.n	800bde4 <memset+0x4>

0800bdf0 <atan2>:
 800bdf0:	f000 b89e 	b.w	800bf30 <__ieee754_atan2>

0800bdf4 <pow>:
 800bdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf6:	ed2d 8b02 	vpush	{d8}
 800bdfa:	eeb0 8a40 	vmov.f32	s16, s0
 800bdfe:	eef0 8a60 	vmov.f32	s17, s1
 800be02:	ec55 4b11 	vmov	r4, r5, d1
 800be06:	f000 f95f 	bl	800c0c8 <__ieee754_pow>
 800be0a:	4622      	mov	r2, r4
 800be0c:	462b      	mov	r3, r5
 800be0e:	4620      	mov	r0, r4
 800be10:	4629      	mov	r1, r5
 800be12:	ec57 6b10 	vmov	r6, r7, d0
 800be16:	f7f4 fe35 	bl	8000a84 <__aeabi_dcmpun>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d13b      	bne.n	800be96 <pow+0xa2>
 800be1e:	ec51 0b18 	vmov	r0, r1, d8
 800be22:	2200      	movs	r2, #0
 800be24:	2300      	movs	r3, #0
 800be26:	f7f4 fdfb 	bl	8000a20 <__aeabi_dcmpeq>
 800be2a:	b1b8      	cbz	r0, 800be5c <pow+0x68>
 800be2c:	2200      	movs	r2, #0
 800be2e:	2300      	movs	r3, #0
 800be30:	4620      	mov	r0, r4
 800be32:	4629      	mov	r1, r5
 800be34:	f7f4 fdf4 	bl	8000a20 <__aeabi_dcmpeq>
 800be38:	2800      	cmp	r0, #0
 800be3a:	d146      	bne.n	800beca <pow+0xd6>
 800be3c:	ec45 4b10 	vmov	d0, r4, r5
 800be40:	f001 f8fb 	bl	800d03a <finite>
 800be44:	b338      	cbz	r0, 800be96 <pow+0xa2>
 800be46:	2200      	movs	r2, #0
 800be48:	2300      	movs	r3, #0
 800be4a:	4620      	mov	r0, r4
 800be4c:	4629      	mov	r1, r5
 800be4e:	f7f4 fdf1 	bl	8000a34 <__aeabi_dcmplt>
 800be52:	b300      	cbz	r0, 800be96 <pow+0xa2>
 800be54:	f7ff ff8c 	bl	800bd70 <__errno>
 800be58:	2322      	movs	r3, #34	; 0x22
 800be5a:	e01b      	b.n	800be94 <pow+0xa0>
 800be5c:	ec47 6b10 	vmov	d0, r6, r7
 800be60:	f001 f8eb 	bl	800d03a <finite>
 800be64:	b9e0      	cbnz	r0, 800bea0 <pow+0xac>
 800be66:	eeb0 0a48 	vmov.f32	s0, s16
 800be6a:	eef0 0a68 	vmov.f32	s1, s17
 800be6e:	f001 f8e4 	bl	800d03a <finite>
 800be72:	b1a8      	cbz	r0, 800bea0 <pow+0xac>
 800be74:	ec45 4b10 	vmov	d0, r4, r5
 800be78:	f001 f8df 	bl	800d03a <finite>
 800be7c:	b180      	cbz	r0, 800bea0 <pow+0xac>
 800be7e:	4632      	mov	r2, r6
 800be80:	463b      	mov	r3, r7
 800be82:	4630      	mov	r0, r6
 800be84:	4639      	mov	r1, r7
 800be86:	f7f4 fdfd 	bl	8000a84 <__aeabi_dcmpun>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d0e2      	beq.n	800be54 <pow+0x60>
 800be8e:	f7ff ff6f 	bl	800bd70 <__errno>
 800be92:	2321      	movs	r3, #33	; 0x21
 800be94:	6003      	str	r3, [r0, #0]
 800be96:	ecbd 8b02 	vpop	{d8}
 800be9a:	ec47 6b10 	vmov	d0, r6, r7
 800be9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bea0:	2200      	movs	r2, #0
 800bea2:	2300      	movs	r3, #0
 800bea4:	4630      	mov	r0, r6
 800bea6:	4639      	mov	r1, r7
 800bea8:	f7f4 fdba 	bl	8000a20 <__aeabi_dcmpeq>
 800beac:	2800      	cmp	r0, #0
 800beae:	d0f2      	beq.n	800be96 <pow+0xa2>
 800beb0:	eeb0 0a48 	vmov.f32	s0, s16
 800beb4:	eef0 0a68 	vmov.f32	s1, s17
 800beb8:	f001 f8bf 	bl	800d03a <finite>
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d0ea      	beq.n	800be96 <pow+0xa2>
 800bec0:	ec45 4b10 	vmov	d0, r4, r5
 800bec4:	f001 f8b9 	bl	800d03a <finite>
 800bec8:	e7c3      	b.n	800be52 <pow+0x5e>
 800beca:	4f01      	ldr	r7, [pc, #4]	; (800bed0 <pow+0xdc>)
 800becc:	2600      	movs	r6, #0
 800bece:	e7e2      	b.n	800be96 <pow+0xa2>
 800bed0:	3ff00000 	.word	0x3ff00000

0800bed4 <sqrt>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	ed2d 8b02 	vpush	{d8}
 800beda:	ec55 4b10 	vmov	r4, r5, d0
 800bede:	f000 fe21 	bl	800cb24 <__ieee754_sqrt>
 800bee2:	4622      	mov	r2, r4
 800bee4:	462b      	mov	r3, r5
 800bee6:	4620      	mov	r0, r4
 800bee8:	4629      	mov	r1, r5
 800beea:	eeb0 8a40 	vmov.f32	s16, s0
 800beee:	eef0 8a60 	vmov.f32	s17, s1
 800bef2:	f7f4 fdc7 	bl	8000a84 <__aeabi_dcmpun>
 800bef6:	b990      	cbnz	r0, 800bf1e <sqrt+0x4a>
 800bef8:	2200      	movs	r2, #0
 800befa:	2300      	movs	r3, #0
 800befc:	4620      	mov	r0, r4
 800befe:	4629      	mov	r1, r5
 800bf00:	f7f4 fd98 	bl	8000a34 <__aeabi_dcmplt>
 800bf04:	b158      	cbz	r0, 800bf1e <sqrt+0x4a>
 800bf06:	f7ff ff33 	bl	800bd70 <__errno>
 800bf0a:	2321      	movs	r3, #33	; 0x21
 800bf0c:	6003      	str	r3, [r0, #0]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2300      	movs	r3, #0
 800bf12:	4610      	mov	r0, r2
 800bf14:	4619      	mov	r1, r3
 800bf16:	f7f4 fc45 	bl	80007a4 <__aeabi_ddiv>
 800bf1a:	ec41 0b18 	vmov	d8, r0, r1
 800bf1e:	eeb0 0a48 	vmov.f32	s0, s16
 800bf22:	eef0 0a68 	vmov.f32	s1, s17
 800bf26:	ecbd 8b02 	vpop	{d8}
 800bf2a:	bd38      	pop	{r3, r4, r5, pc}
 800bf2c:	0000      	movs	r0, r0
	...

0800bf30 <__ieee754_atan2>:
 800bf30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf34:	ec57 6b11 	vmov	r6, r7, d1
 800bf38:	4273      	negs	r3, r6
 800bf3a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c0c0 <__ieee754_atan2+0x190>
 800bf3e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bf42:	4333      	orrs	r3, r6
 800bf44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bf48:	4573      	cmp	r3, lr
 800bf4a:	ec51 0b10 	vmov	r0, r1, d0
 800bf4e:	ee11 8a10 	vmov	r8, s2
 800bf52:	d80a      	bhi.n	800bf6a <__ieee754_atan2+0x3a>
 800bf54:	4244      	negs	r4, r0
 800bf56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf5a:	4304      	orrs	r4, r0
 800bf5c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bf60:	4574      	cmp	r4, lr
 800bf62:	ee10 9a10 	vmov	r9, s0
 800bf66:	468c      	mov	ip, r1
 800bf68:	d907      	bls.n	800bf7a <__ieee754_atan2+0x4a>
 800bf6a:	4632      	mov	r2, r6
 800bf6c:	463b      	mov	r3, r7
 800bf6e:	f7f4 f939 	bl	80001e4 <__adddf3>
 800bf72:	ec41 0b10 	vmov	d0, r0, r1
 800bf76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf7a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bf7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bf82:	4334      	orrs	r4, r6
 800bf84:	d103      	bne.n	800bf8e <__ieee754_atan2+0x5e>
 800bf86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf8a:	f000 bead 	b.w	800cce8 <atan>
 800bf8e:	17bc      	asrs	r4, r7, #30
 800bf90:	f004 0402 	and.w	r4, r4, #2
 800bf94:	ea53 0909 	orrs.w	r9, r3, r9
 800bf98:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bf9c:	d107      	bne.n	800bfae <__ieee754_atan2+0x7e>
 800bf9e:	2c02      	cmp	r4, #2
 800bfa0:	d060      	beq.n	800c064 <__ieee754_atan2+0x134>
 800bfa2:	2c03      	cmp	r4, #3
 800bfa4:	d1e5      	bne.n	800bf72 <__ieee754_atan2+0x42>
 800bfa6:	a142      	add	r1, pc, #264	; (adr r1, 800c0b0 <__ieee754_atan2+0x180>)
 800bfa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfac:	e7e1      	b.n	800bf72 <__ieee754_atan2+0x42>
 800bfae:	ea52 0808 	orrs.w	r8, r2, r8
 800bfb2:	d106      	bne.n	800bfc2 <__ieee754_atan2+0x92>
 800bfb4:	f1bc 0f00 	cmp.w	ip, #0
 800bfb8:	da5f      	bge.n	800c07a <__ieee754_atan2+0x14a>
 800bfba:	a13f      	add	r1, pc, #252	; (adr r1, 800c0b8 <__ieee754_atan2+0x188>)
 800bfbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfc0:	e7d7      	b.n	800bf72 <__ieee754_atan2+0x42>
 800bfc2:	4572      	cmp	r2, lr
 800bfc4:	d10f      	bne.n	800bfe6 <__ieee754_atan2+0xb6>
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	f104 34ff 	add.w	r4, r4, #4294967295
 800bfcc:	d107      	bne.n	800bfde <__ieee754_atan2+0xae>
 800bfce:	2c02      	cmp	r4, #2
 800bfd0:	d84c      	bhi.n	800c06c <__ieee754_atan2+0x13c>
 800bfd2:	4b35      	ldr	r3, [pc, #212]	; (800c0a8 <__ieee754_atan2+0x178>)
 800bfd4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bfd8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bfdc:	e7c9      	b.n	800bf72 <__ieee754_atan2+0x42>
 800bfde:	2c02      	cmp	r4, #2
 800bfe0:	d848      	bhi.n	800c074 <__ieee754_atan2+0x144>
 800bfe2:	4b32      	ldr	r3, [pc, #200]	; (800c0ac <__ieee754_atan2+0x17c>)
 800bfe4:	e7f6      	b.n	800bfd4 <__ieee754_atan2+0xa4>
 800bfe6:	4573      	cmp	r3, lr
 800bfe8:	d0e4      	beq.n	800bfb4 <__ieee754_atan2+0x84>
 800bfea:	1a9b      	subs	r3, r3, r2
 800bfec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bff0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bff4:	da1e      	bge.n	800c034 <__ieee754_atan2+0x104>
 800bff6:	2f00      	cmp	r7, #0
 800bff8:	da01      	bge.n	800bffe <__ieee754_atan2+0xce>
 800bffa:	323c      	adds	r2, #60	; 0x3c
 800bffc:	db1e      	blt.n	800c03c <__ieee754_atan2+0x10c>
 800bffe:	4632      	mov	r2, r6
 800c000:	463b      	mov	r3, r7
 800c002:	f7f4 fbcf 	bl	80007a4 <__aeabi_ddiv>
 800c006:	ec41 0b10 	vmov	d0, r0, r1
 800c00a:	f001 f80d 	bl	800d028 <fabs>
 800c00e:	f000 fe6b 	bl	800cce8 <atan>
 800c012:	ec51 0b10 	vmov	r0, r1, d0
 800c016:	2c01      	cmp	r4, #1
 800c018:	d013      	beq.n	800c042 <__ieee754_atan2+0x112>
 800c01a:	2c02      	cmp	r4, #2
 800c01c:	d015      	beq.n	800c04a <__ieee754_atan2+0x11a>
 800c01e:	2c00      	cmp	r4, #0
 800c020:	d0a7      	beq.n	800bf72 <__ieee754_atan2+0x42>
 800c022:	a319      	add	r3, pc, #100	; (adr r3, 800c088 <__ieee754_atan2+0x158>)
 800c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c028:	f7f4 f8da 	bl	80001e0 <__aeabi_dsub>
 800c02c:	a318      	add	r3, pc, #96	; (adr r3, 800c090 <__ieee754_atan2+0x160>)
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	e014      	b.n	800c05e <__ieee754_atan2+0x12e>
 800c034:	a118      	add	r1, pc, #96	; (adr r1, 800c098 <__ieee754_atan2+0x168>)
 800c036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c03a:	e7ec      	b.n	800c016 <__ieee754_atan2+0xe6>
 800c03c:	2000      	movs	r0, #0
 800c03e:	2100      	movs	r1, #0
 800c040:	e7e9      	b.n	800c016 <__ieee754_atan2+0xe6>
 800c042:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c046:	4619      	mov	r1, r3
 800c048:	e793      	b.n	800bf72 <__ieee754_atan2+0x42>
 800c04a:	a30f      	add	r3, pc, #60	; (adr r3, 800c088 <__ieee754_atan2+0x158>)
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	f7f4 f8c6 	bl	80001e0 <__aeabi_dsub>
 800c054:	4602      	mov	r2, r0
 800c056:	460b      	mov	r3, r1
 800c058:	a10d      	add	r1, pc, #52	; (adr r1, 800c090 <__ieee754_atan2+0x160>)
 800c05a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c05e:	f7f4 f8bf 	bl	80001e0 <__aeabi_dsub>
 800c062:	e786      	b.n	800bf72 <__ieee754_atan2+0x42>
 800c064:	a10a      	add	r1, pc, #40	; (adr r1, 800c090 <__ieee754_atan2+0x160>)
 800c066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c06a:	e782      	b.n	800bf72 <__ieee754_atan2+0x42>
 800c06c:	a10c      	add	r1, pc, #48	; (adr r1, 800c0a0 <__ieee754_atan2+0x170>)
 800c06e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c072:	e77e      	b.n	800bf72 <__ieee754_atan2+0x42>
 800c074:	2000      	movs	r0, #0
 800c076:	2100      	movs	r1, #0
 800c078:	e77b      	b.n	800bf72 <__ieee754_atan2+0x42>
 800c07a:	a107      	add	r1, pc, #28	; (adr r1, 800c098 <__ieee754_atan2+0x168>)
 800c07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c080:	e777      	b.n	800bf72 <__ieee754_atan2+0x42>
 800c082:	bf00      	nop
 800c084:	f3af 8000 	nop.w
 800c088:	33145c07 	.word	0x33145c07
 800c08c:	3ca1a626 	.word	0x3ca1a626
 800c090:	54442d18 	.word	0x54442d18
 800c094:	400921fb 	.word	0x400921fb
 800c098:	54442d18 	.word	0x54442d18
 800c09c:	3ff921fb 	.word	0x3ff921fb
 800c0a0:	54442d18 	.word	0x54442d18
 800c0a4:	3fe921fb 	.word	0x3fe921fb
 800c0a8:	0800d9a0 	.word	0x0800d9a0
 800c0ac:	0800d9b8 	.word	0x0800d9b8
 800c0b0:	54442d18 	.word	0x54442d18
 800c0b4:	c00921fb 	.word	0xc00921fb
 800c0b8:	54442d18 	.word	0x54442d18
 800c0bc:	bff921fb 	.word	0xbff921fb
 800c0c0:	7ff00000 	.word	0x7ff00000
 800c0c4:	00000000 	.word	0x00000000

0800c0c8 <__ieee754_pow>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	ed2d 8b06 	vpush	{d8-d10}
 800c0d0:	b089      	sub	sp, #36	; 0x24
 800c0d2:	ed8d 1b00 	vstr	d1, [sp]
 800c0d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c0da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c0de:	ea58 0102 	orrs.w	r1, r8, r2
 800c0e2:	ec57 6b10 	vmov	r6, r7, d0
 800c0e6:	d115      	bne.n	800c114 <__ieee754_pow+0x4c>
 800c0e8:	19b3      	adds	r3, r6, r6
 800c0ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c0ee:	4152      	adcs	r2, r2
 800c0f0:	4299      	cmp	r1, r3
 800c0f2:	4b89      	ldr	r3, [pc, #548]	; (800c318 <__ieee754_pow+0x250>)
 800c0f4:	4193      	sbcs	r3, r2
 800c0f6:	f080 84d2 	bcs.w	800ca9e <__ieee754_pow+0x9d6>
 800c0fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0fe:	4630      	mov	r0, r6
 800c100:	4639      	mov	r1, r7
 800c102:	f7f4 f86f 	bl	80001e4 <__adddf3>
 800c106:	ec41 0b10 	vmov	d0, r0, r1
 800c10a:	b009      	add	sp, #36	; 0x24
 800c10c:	ecbd 8b06 	vpop	{d8-d10}
 800c110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c114:	4b81      	ldr	r3, [pc, #516]	; (800c31c <__ieee754_pow+0x254>)
 800c116:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c11a:	429c      	cmp	r4, r3
 800c11c:	ee10 aa10 	vmov	sl, s0
 800c120:	463d      	mov	r5, r7
 800c122:	dc06      	bgt.n	800c132 <__ieee754_pow+0x6a>
 800c124:	d101      	bne.n	800c12a <__ieee754_pow+0x62>
 800c126:	2e00      	cmp	r6, #0
 800c128:	d1e7      	bne.n	800c0fa <__ieee754_pow+0x32>
 800c12a:	4598      	cmp	r8, r3
 800c12c:	dc01      	bgt.n	800c132 <__ieee754_pow+0x6a>
 800c12e:	d10f      	bne.n	800c150 <__ieee754_pow+0x88>
 800c130:	b172      	cbz	r2, 800c150 <__ieee754_pow+0x88>
 800c132:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c136:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c13a:	ea55 050a 	orrs.w	r5, r5, sl
 800c13e:	d1dc      	bne.n	800c0fa <__ieee754_pow+0x32>
 800c140:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c144:	18db      	adds	r3, r3, r3
 800c146:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c14a:	4152      	adcs	r2, r2
 800c14c:	429d      	cmp	r5, r3
 800c14e:	e7d0      	b.n	800c0f2 <__ieee754_pow+0x2a>
 800c150:	2d00      	cmp	r5, #0
 800c152:	da3b      	bge.n	800c1cc <__ieee754_pow+0x104>
 800c154:	4b72      	ldr	r3, [pc, #456]	; (800c320 <__ieee754_pow+0x258>)
 800c156:	4598      	cmp	r8, r3
 800c158:	dc51      	bgt.n	800c1fe <__ieee754_pow+0x136>
 800c15a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c15e:	4598      	cmp	r8, r3
 800c160:	f340 84ac 	ble.w	800cabc <__ieee754_pow+0x9f4>
 800c164:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c168:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c16c:	2b14      	cmp	r3, #20
 800c16e:	dd0f      	ble.n	800c190 <__ieee754_pow+0xc8>
 800c170:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c174:	fa22 f103 	lsr.w	r1, r2, r3
 800c178:	fa01 f303 	lsl.w	r3, r1, r3
 800c17c:	4293      	cmp	r3, r2
 800c17e:	f040 849d 	bne.w	800cabc <__ieee754_pow+0x9f4>
 800c182:	f001 0101 	and.w	r1, r1, #1
 800c186:	f1c1 0302 	rsb	r3, r1, #2
 800c18a:	9304      	str	r3, [sp, #16]
 800c18c:	b182      	cbz	r2, 800c1b0 <__ieee754_pow+0xe8>
 800c18e:	e05f      	b.n	800c250 <__ieee754_pow+0x188>
 800c190:	2a00      	cmp	r2, #0
 800c192:	d15b      	bne.n	800c24c <__ieee754_pow+0x184>
 800c194:	f1c3 0314 	rsb	r3, r3, #20
 800c198:	fa48 f103 	asr.w	r1, r8, r3
 800c19c:	fa01 f303 	lsl.w	r3, r1, r3
 800c1a0:	4543      	cmp	r3, r8
 800c1a2:	f040 8488 	bne.w	800cab6 <__ieee754_pow+0x9ee>
 800c1a6:	f001 0101 	and.w	r1, r1, #1
 800c1aa:	f1c1 0302 	rsb	r3, r1, #2
 800c1ae:	9304      	str	r3, [sp, #16]
 800c1b0:	4b5c      	ldr	r3, [pc, #368]	; (800c324 <__ieee754_pow+0x25c>)
 800c1b2:	4598      	cmp	r8, r3
 800c1b4:	d132      	bne.n	800c21c <__ieee754_pow+0x154>
 800c1b6:	f1b9 0f00 	cmp.w	r9, #0
 800c1ba:	f280 8478 	bge.w	800caae <__ieee754_pow+0x9e6>
 800c1be:	4959      	ldr	r1, [pc, #356]	; (800c324 <__ieee754_pow+0x25c>)
 800c1c0:	4632      	mov	r2, r6
 800c1c2:	463b      	mov	r3, r7
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	f7f4 faed 	bl	80007a4 <__aeabi_ddiv>
 800c1ca:	e79c      	b.n	800c106 <__ieee754_pow+0x3e>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	9304      	str	r3, [sp, #16]
 800c1d0:	2a00      	cmp	r2, #0
 800c1d2:	d13d      	bne.n	800c250 <__ieee754_pow+0x188>
 800c1d4:	4b51      	ldr	r3, [pc, #324]	; (800c31c <__ieee754_pow+0x254>)
 800c1d6:	4598      	cmp	r8, r3
 800c1d8:	d1ea      	bne.n	800c1b0 <__ieee754_pow+0xe8>
 800c1da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c1de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c1e2:	ea53 030a 	orrs.w	r3, r3, sl
 800c1e6:	f000 845a 	beq.w	800ca9e <__ieee754_pow+0x9d6>
 800c1ea:	4b4f      	ldr	r3, [pc, #316]	; (800c328 <__ieee754_pow+0x260>)
 800c1ec:	429c      	cmp	r4, r3
 800c1ee:	dd08      	ble.n	800c202 <__ieee754_pow+0x13a>
 800c1f0:	f1b9 0f00 	cmp.w	r9, #0
 800c1f4:	f2c0 8457 	blt.w	800caa6 <__ieee754_pow+0x9de>
 800c1f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1fc:	e783      	b.n	800c106 <__ieee754_pow+0x3e>
 800c1fe:	2302      	movs	r3, #2
 800c200:	e7e5      	b.n	800c1ce <__ieee754_pow+0x106>
 800c202:	f1b9 0f00 	cmp.w	r9, #0
 800c206:	f04f 0000 	mov.w	r0, #0
 800c20a:	f04f 0100 	mov.w	r1, #0
 800c20e:	f6bf af7a 	bge.w	800c106 <__ieee754_pow+0x3e>
 800c212:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c216:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c21a:	e774      	b.n	800c106 <__ieee754_pow+0x3e>
 800c21c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c220:	d106      	bne.n	800c230 <__ieee754_pow+0x168>
 800c222:	4632      	mov	r2, r6
 800c224:	463b      	mov	r3, r7
 800c226:	4630      	mov	r0, r6
 800c228:	4639      	mov	r1, r7
 800c22a:	f7f4 f991 	bl	8000550 <__aeabi_dmul>
 800c22e:	e76a      	b.n	800c106 <__ieee754_pow+0x3e>
 800c230:	4b3e      	ldr	r3, [pc, #248]	; (800c32c <__ieee754_pow+0x264>)
 800c232:	4599      	cmp	r9, r3
 800c234:	d10c      	bne.n	800c250 <__ieee754_pow+0x188>
 800c236:	2d00      	cmp	r5, #0
 800c238:	db0a      	blt.n	800c250 <__ieee754_pow+0x188>
 800c23a:	ec47 6b10 	vmov	d0, r6, r7
 800c23e:	b009      	add	sp, #36	; 0x24
 800c240:	ecbd 8b06 	vpop	{d8-d10}
 800c244:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c248:	f000 bc6c 	b.w	800cb24 <__ieee754_sqrt>
 800c24c:	2300      	movs	r3, #0
 800c24e:	9304      	str	r3, [sp, #16]
 800c250:	ec47 6b10 	vmov	d0, r6, r7
 800c254:	f000 fee8 	bl	800d028 <fabs>
 800c258:	ec51 0b10 	vmov	r0, r1, d0
 800c25c:	f1ba 0f00 	cmp.w	sl, #0
 800c260:	d129      	bne.n	800c2b6 <__ieee754_pow+0x1ee>
 800c262:	b124      	cbz	r4, 800c26e <__ieee754_pow+0x1a6>
 800c264:	4b2f      	ldr	r3, [pc, #188]	; (800c324 <__ieee754_pow+0x25c>)
 800c266:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d123      	bne.n	800c2b6 <__ieee754_pow+0x1ee>
 800c26e:	f1b9 0f00 	cmp.w	r9, #0
 800c272:	da05      	bge.n	800c280 <__ieee754_pow+0x1b8>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	2000      	movs	r0, #0
 800c27a:	492a      	ldr	r1, [pc, #168]	; (800c324 <__ieee754_pow+0x25c>)
 800c27c:	f7f4 fa92 	bl	80007a4 <__aeabi_ddiv>
 800c280:	2d00      	cmp	r5, #0
 800c282:	f6bf af40 	bge.w	800c106 <__ieee754_pow+0x3e>
 800c286:	9b04      	ldr	r3, [sp, #16]
 800c288:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c28c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c290:	4323      	orrs	r3, r4
 800c292:	d108      	bne.n	800c2a6 <__ieee754_pow+0x1de>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4610      	mov	r0, r2
 800c29a:	4619      	mov	r1, r3
 800c29c:	f7f3 ffa0 	bl	80001e0 <__aeabi_dsub>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	e78f      	b.n	800c1c6 <__ieee754_pow+0xfe>
 800c2a6:	9b04      	ldr	r3, [sp, #16]
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	f47f af2c 	bne.w	800c106 <__ieee754_pow+0x3e>
 800c2ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	e727      	b.n	800c106 <__ieee754_pow+0x3e>
 800c2b6:	0feb      	lsrs	r3, r5, #31
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	9306      	str	r3, [sp, #24]
 800c2bc:	9a06      	ldr	r2, [sp, #24]
 800c2be:	9b04      	ldr	r3, [sp, #16]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	d102      	bne.n	800c2ca <__ieee754_pow+0x202>
 800c2c4:	4632      	mov	r2, r6
 800c2c6:	463b      	mov	r3, r7
 800c2c8:	e7e6      	b.n	800c298 <__ieee754_pow+0x1d0>
 800c2ca:	4b19      	ldr	r3, [pc, #100]	; (800c330 <__ieee754_pow+0x268>)
 800c2cc:	4598      	cmp	r8, r3
 800c2ce:	f340 80fb 	ble.w	800c4c8 <__ieee754_pow+0x400>
 800c2d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c2d6:	4598      	cmp	r8, r3
 800c2d8:	4b13      	ldr	r3, [pc, #76]	; (800c328 <__ieee754_pow+0x260>)
 800c2da:	dd0c      	ble.n	800c2f6 <__ieee754_pow+0x22e>
 800c2dc:	429c      	cmp	r4, r3
 800c2de:	dc0f      	bgt.n	800c300 <__ieee754_pow+0x238>
 800c2e0:	f1b9 0f00 	cmp.w	r9, #0
 800c2e4:	da0f      	bge.n	800c306 <__ieee754_pow+0x23e>
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	b009      	add	sp, #36	; 0x24
 800c2ea:	ecbd 8b06 	vpop	{d8-d10}
 800c2ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f2:	f000 bcf0 	b.w	800ccd6 <__math_oflow>
 800c2f6:	429c      	cmp	r4, r3
 800c2f8:	dbf2      	blt.n	800c2e0 <__ieee754_pow+0x218>
 800c2fa:	4b0a      	ldr	r3, [pc, #40]	; (800c324 <__ieee754_pow+0x25c>)
 800c2fc:	429c      	cmp	r4, r3
 800c2fe:	dd19      	ble.n	800c334 <__ieee754_pow+0x26c>
 800c300:	f1b9 0f00 	cmp.w	r9, #0
 800c304:	dcef      	bgt.n	800c2e6 <__ieee754_pow+0x21e>
 800c306:	2000      	movs	r0, #0
 800c308:	b009      	add	sp, #36	; 0x24
 800c30a:	ecbd 8b06 	vpop	{d8-d10}
 800c30e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c312:	f000 bcd7 	b.w	800ccc4 <__math_uflow>
 800c316:	bf00      	nop
 800c318:	fff00000 	.word	0xfff00000
 800c31c:	7ff00000 	.word	0x7ff00000
 800c320:	433fffff 	.word	0x433fffff
 800c324:	3ff00000 	.word	0x3ff00000
 800c328:	3fefffff 	.word	0x3fefffff
 800c32c:	3fe00000 	.word	0x3fe00000
 800c330:	41e00000 	.word	0x41e00000
 800c334:	4b60      	ldr	r3, [pc, #384]	; (800c4b8 <__ieee754_pow+0x3f0>)
 800c336:	2200      	movs	r2, #0
 800c338:	f7f3 ff52 	bl	80001e0 <__aeabi_dsub>
 800c33c:	a354      	add	r3, pc, #336	; (adr r3, 800c490 <__ieee754_pow+0x3c8>)
 800c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c342:	4604      	mov	r4, r0
 800c344:	460d      	mov	r5, r1
 800c346:	f7f4 f903 	bl	8000550 <__aeabi_dmul>
 800c34a:	a353      	add	r3, pc, #332	; (adr r3, 800c498 <__ieee754_pow+0x3d0>)
 800c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c350:	4606      	mov	r6, r0
 800c352:	460f      	mov	r7, r1
 800c354:	4620      	mov	r0, r4
 800c356:	4629      	mov	r1, r5
 800c358:	f7f4 f8fa 	bl	8000550 <__aeabi_dmul>
 800c35c:	4b57      	ldr	r3, [pc, #348]	; (800c4bc <__ieee754_pow+0x3f4>)
 800c35e:	4682      	mov	sl, r0
 800c360:	468b      	mov	fp, r1
 800c362:	2200      	movs	r2, #0
 800c364:	4620      	mov	r0, r4
 800c366:	4629      	mov	r1, r5
 800c368:	f7f4 f8f2 	bl	8000550 <__aeabi_dmul>
 800c36c:	4602      	mov	r2, r0
 800c36e:	460b      	mov	r3, r1
 800c370:	a14b      	add	r1, pc, #300	; (adr r1, 800c4a0 <__ieee754_pow+0x3d8>)
 800c372:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c376:	f7f3 ff33 	bl	80001e0 <__aeabi_dsub>
 800c37a:	4622      	mov	r2, r4
 800c37c:	462b      	mov	r3, r5
 800c37e:	f7f4 f8e7 	bl	8000550 <__aeabi_dmul>
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	2000      	movs	r0, #0
 800c388:	494d      	ldr	r1, [pc, #308]	; (800c4c0 <__ieee754_pow+0x3f8>)
 800c38a:	f7f3 ff29 	bl	80001e0 <__aeabi_dsub>
 800c38e:	4622      	mov	r2, r4
 800c390:	4680      	mov	r8, r0
 800c392:	4689      	mov	r9, r1
 800c394:	462b      	mov	r3, r5
 800c396:	4620      	mov	r0, r4
 800c398:	4629      	mov	r1, r5
 800c39a:	f7f4 f8d9 	bl	8000550 <__aeabi_dmul>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	4640      	mov	r0, r8
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	f7f4 f8d3 	bl	8000550 <__aeabi_dmul>
 800c3aa:	a33f      	add	r3, pc, #252	; (adr r3, 800c4a8 <__ieee754_pow+0x3e0>)
 800c3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b0:	f7f4 f8ce 	bl	8000550 <__aeabi_dmul>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4650      	mov	r0, sl
 800c3ba:	4659      	mov	r1, fp
 800c3bc:	f7f3 ff10 	bl	80001e0 <__aeabi_dsub>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4680      	mov	r8, r0
 800c3c6:	4689      	mov	r9, r1
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	f7f3 ff0a 	bl	80001e4 <__adddf3>
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	4632      	mov	r2, r6
 800c3d4:	463b      	mov	r3, r7
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	460d      	mov	r5, r1
 800c3da:	f7f3 ff01 	bl	80001e0 <__aeabi_dsub>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	4649      	mov	r1, r9
 800c3e6:	f7f3 fefb 	bl	80001e0 <__aeabi_dsub>
 800c3ea:	9b04      	ldr	r3, [sp, #16]
 800c3ec:	9a06      	ldr	r2, [sp, #24]
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	4682      	mov	sl, r0
 800c3f4:	468b      	mov	fp, r1
 800c3f6:	f040 81e7 	bne.w	800c7c8 <__ieee754_pow+0x700>
 800c3fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c4b0 <__ieee754_pow+0x3e8>
 800c3fe:	eeb0 8a47 	vmov.f32	s16, s14
 800c402:	eef0 8a67 	vmov.f32	s17, s15
 800c406:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c40a:	2600      	movs	r6, #0
 800c40c:	4632      	mov	r2, r6
 800c40e:	463b      	mov	r3, r7
 800c410:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c414:	f7f3 fee4 	bl	80001e0 <__aeabi_dsub>
 800c418:	4622      	mov	r2, r4
 800c41a:	462b      	mov	r3, r5
 800c41c:	f7f4 f898 	bl	8000550 <__aeabi_dmul>
 800c420:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c424:	4680      	mov	r8, r0
 800c426:	4689      	mov	r9, r1
 800c428:	4650      	mov	r0, sl
 800c42a:	4659      	mov	r1, fp
 800c42c:	f7f4 f890 	bl	8000550 <__aeabi_dmul>
 800c430:	4602      	mov	r2, r0
 800c432:	460b      	mov	r3, r1
 800c434:	4640      	mov	r0, r8
 800c436:	4649      	mov	r1, r9
 800c438:	f7f3 fed4 	bl	80001e4 <__adddf3>
 800c43c:	4632      	mov	r2, r6
 800c43e:	463b      	mov	r3, r7
 800c440:	4680      	mov	r8, r0
 800c442:	4689      	mov	r9, r1
 800c444:	4620      	mov	r0, r4
 800c446:	4629      	mov	r1, r5
 800c448:	f7f4 f882 	bl	8000550 <__aeabi_dmul>
 800c44c:	460b      	mov	r3, r1
 800c44e:	4604      	mov	r4, r0
 800c450:	460d      	mov	r5, r1
 800c452:	4602      	mov	r2, r0
 800c454:	4649      	mov	r1, r9
 800c456:	4640      	mov	r0, r8
 800c458:	f7f3 fec4 	bl	80001e4 <__adddf3>
 800c45c:	4b19      	ldr	r3, [pc, #100]	; (800c4c4 <__ieee754_pow+0x3fc>)
 800c45e:	4299      	cmp	r1, r3
 800c460:	ec45 4b19 	vmov	d9, r4, r5
 800c464:	4606      	mov	r6, r0
 800c466:	460f      	mov	r7, r1
 800c468:	468b      	mov	fp, r1
 800c46a:	f340 82f1 	ble.w	800ca50 <__ieee754_pow+0x988>
 800c46e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c472:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c476:	4303      	orrs	r3, r0
 800c478:	f000 81e4 	beq.w	800c844 <__ieee754_pow+0x77c>
 800c47c:	ec51 0b18 	vmov	r0, r1, d8
 800c480:	2200      	movs	r2, #0
 800c482:	2300      	movs	r3, #0
 800c484:	f7f4 fad6 	bl	8000a34 <__aeabi_dcmplt>
 800c488:	3800      	subs	r0, #0
 800c48a:	bf18      	it	ne
 800c48c:	2001      	movne	r0, #1
 800c48e:	e72b      	b.n	800c2e8 <__ieee754_pow+0x220>
 800c490:	60000000 	.word	0x60000000
 800c494:	3ff71547 	.word	0x3ff71547
 800c498:	f85ddf44 	.word	0xf85ddf44
 800c49c:	3e54ae0b 	.word	0x3e54ae0b
 800c4a0:	55555555 	.word	0x55555555
 800c4a4:	3fd55555 	.word	0x3fd55555
 800c4a8:	652b82fe 	.word	0x652b82fe
 800c4ac:	3ff71547 	.word	0x3ff71547
 800c4b0:	00000000 	.word	0x00000000
 800c4b4:	bff00000 	.word	0xbff00000
 800c4b8:	3ff00000 	.word	0x3ff00000
 800c4bc:	3fd00000 	.word	0x3fd00000
 800c4c0:	3fe00000 	.word	0x3fe00000
 800c4c4:	408fffff 	.word	0x408fffff
 800c4c8:	4bd5      	ldr	r3, [pc, #852]	; (800c820 <__ieee754_pow+0x758>)
 800c4ca:	402b      	ands	r3, r5
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	b92b      	cbnz	r3, 800c4dc <__ieee754_pow+0x414>
 800c4d0:	4bd4      	ldr	r3, [pc, #848]	; (800c824 <__ieee754_pow+0x75c>)
 800c4d2:	f7f4 f83d 	bl	8000550 <__aeabi_dmul>
 800c4d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c4da:	460c      	mov	r4, r1
 800c4dc:	1523      	asrs	r3, r4, #20
 800c4de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c4e2:	4413      	add	r3, r2
 800c4e4:	9305      	str	r3, [sp, #20]
 800c4e6:	4bd0      	ldr	r3, [pc, #832]	; (800c828 <__ieee754_pow+0x760>)
 800c4e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c4ec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c4f0:	429c      	cmp	r4, r3
 800c4f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c4f6:	dd08      	ble.n	800c50a <__ieee754_pow+0x442>
 800c4f8:	4bcc      	ldr	r3, [pc, #816]	; (800c82c <__ieee754_pow+0x764>)
 800c4fa:	429c      	cmp	r4, r3
 800c4fc:	f340 8162 	ble.w	800c7c4 <__ieee754_pow+0x6fc>
 800c500:	9b05      	ldr	r3, [sp, #20]
 800c502:	3301      	adds	r3, #1
 800c504:	9305      	str	r3, [sp, #20]
 800c506:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c50a:	2400      	movs	r4, #0
 800c50c:	00e3      	lsls	r3, r4, #3
 800c50e:	9307      	str	r3, [sp, #28]
 800c510:	4bc7      	ldr	r3, [pc, #796]	; (800c830 <__ieee754_pow+0x768>)
 800c512:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c516:	ed93 7b00 	vldr	d7, [r3]
 800c51a:	4629      	mov	r1, r5
 800c51c:	ec53 2b17 	vmov	r2, r3, d7
 800c520:	eeb0 9a47 	vmov.f32	s18, s14
 800c524:	eef0 9a67 	vmov.f32	s19, s15
 800c528:	4682      	mov	sl, r0
 800c52a:	f7f3 fe59 	bl	80001e0 <__aeabi_dsub>
 800c52e:	4652      	mov	r2, sl
 800c530:	4606      	mov	r6, r0
 800c532:	460f      	mov	r7, r1
 800c534:	462b      	mov	r3, r5
 800c536:	ec51 0b19 	vmov	r0, r1, d9
 800c53a:	f7f3 fe53 	bl	80001e4 <__adddf3>
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	2000      	movs	r0, #0
 800c544:	49bb      	ldr	r1, [pc, #748]	; (800c834 <__ieee754_pow+0x76c>)
 800c546:	f7f4 f92d 	bl	80007a4 <__aeabi_ddiv>
 800c54a:	ec41 0b1a 	vmov	d10, r0, r1
 800c54e:	4602      	mov	r2, r0
 800c550:	460b      	mov	r3, r1
 800c552:	4630      	mov	r0, r6
 800c554:	4639      	mov	r1, r7
 800c556:	f7f3 fffb 	bl	8000550 <__aeabi_dmul>
 800c55a:	2300      	movs	r3, #0
 800c55c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c560:	9302      	str	r3, [sp, #8]
 800c562:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c566:	46ab      	mov	fp, r5
 800c568:	106d      	asrs	r5, r5, #1
 800c56a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c56e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c572:	ec41 0b18 	vmov	d8, r0, r1
 800c576:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c57a:	2200      	movs	r2, #0
 800c57c:	4640      	mov	r0, r8
 800c57e:	4649      	mov	r1, r9
 800c580:	4614      	mov	r4, r2
 800c582:	461d      	mov	r5, r3
 800c584:	f7f3 ffe4 	bl	8000550 <__aeabi_dmul>
 800c588:	4602      	mov	r2, r0
 800c58a:	460b      	mov	r3, r1
 800c58c:	4630      	mov	r0, r6
 800c58e:	4639      	mov	r1, r7
 800c590:	f7f3 fe26 	bl	80001e0 <__aeabi_dsub>
 800c594:	ec53 2b19 	vmov	r2, r3, d9
 800c598:	4606      	mov	r6, r0
 800c59a:	460f      	mov	r7, r1
 800c59c:	4620      	mov	r0, r4
 800c59e:	4629      	mov	r1, r5
 800c5a0:	f7f3 fe1e 	bl	80001e0 <__aeabi_dsub>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	4650      	mov	r0, sl
 800c5aa:	4659      	mov	r1, fp
 800c5ac:	f7f3 fe18 	bl	80001e0 <__aeabi_dsub>
 800c5b0:	4642      	mov	r2, r8
 800c5b2:	464b      	mov	r3, r9
 800c5b4:	f7f3 ffcc 	bl	8000550 <__aeabi_dmul>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4630      	mov	r0, r6
 800c5be:	4639      	mov	r1, r7
 800c5c0:	f7f3 fe0e 	bl	80001e0 <__aeabi_dsub>
 800c5c4:	ec53 2b1a 	vmov	r2, r3, d10
 800c5c8:	f7f3 ffc2 	bl	8000550 <__aeabi_dmul>
 800c5cc:	ec53 2b18 	vmov	r2, r3, d8
 800c5d0:	ec41 0b19 	vmov	d9, r0, r1
 800c5d4:	ec51 0b18 	vmov	r0, r1, d8
 800c5d8:	f7f3 ffba 	bl	8000550 <__aeabi_dmul>
 800c5dc:	a37c      	add	r3, pc, #496	; (adr r3, 800c7d0 <__ieee754_pow+0x708>)
 800c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	460d      	mov	r5, r1
 800c5e6:	f7f3 ffb3 	bl	8000550 <__aeabi_dmul>
 800c5ea:	a37b      	add	r3, pc, #492	; (adr r3, 800c7d8 <__ieee754_pow+0x710>)
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	f7f3 fdf8 	bl	80001e4 <__adddf3>
 800c5f4:	4622      	mov	r2, r4
 800c5f6:	462b      	mov	r3, r5
 800c5f8:	f7f3 ffaa 	bl	8000550 <__aeabi_dmul>
 800c5fc:	a378      	add	r3, pc, #480	; (adr r3, 800c7e0 <__ieee754_pow+0x718>)
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	f7f3 fdef 	bl	80001e4 <__adddf3>
 800c606:	4622      	mov	r2, r4
 800c608:	462b      	mov	r3, r5
 800c60a:	f7f3 ffa1 	bl	8000550 <__aeabi_dmul>
 800c60e:	a376      	add	r3, pc, #472	; (adr r3, 800c7e8 <__ieee754_pow+0x720>)
 800c610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c614:	f7f3 fde6 	bl	80001e4 <__adddf3>
 800c618:	4622      	mov	r2, r4
 800c61a:	462b      	mov	r3, r5
 800c61c:	f7f3 ff98 	bl	8000550 <__aeabi_dmul>
 800c620:	a373      	add	r3, pc, #460	; (adr r3, 800c7f0 <__ieee754_pow+0x728>)
 800c622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c626:	f7f3 fddd 	bl	80001e4 <__adddf3>
 800c62a:	4622      	mov	r2, r4
 800c62c:	462b      	mov	r3, r5
 800c62e:	f7f3 ff8f 	bl	8000550 <__aeabi_dmul>
 800c632:	a371      	add	r3, pc, #452	; (adr r3, 800c7f8 <__ieee754_pow+0x730>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	f7f3 fdd4 	bl	80001e4 <__adddf3>
 800c63c:	4622      	mov	r2, r4
 800c63e:	4606      	mov	r6, r0
 800c640:	460f      	mov	r7, r1
 800c642:	462b      	mov	r3, r5
 800c644:	4620      	mov	r0, r4
 800c646:	4629      	mov	r1, r5
 800c648:	f7f3 ff82 	bl	8000550 <__aeabi_dmul>
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	4630      	mov	r0, r6
 800c652:	4639      	mov	r1, r7
 800c654:	f7f3 ff7c 	bl	8000550 <__aeabi_dmul>
 800c658:	4642      	mov	r2, r8
 800c65a:	4604      	mov	r4, r0
 800c65c:	460d      	mov	r5, r1
 800c65e:	464b      	mov	r3, r9
 800c660:	ec51 0b18 	vmov	r0, r1, d8
 800c664:	f7f3 fdbe 	bl	80001e4 <__adddf3>
 800c668:	ec53 2b19 	vmov	r2, r3, d9
 800c66c:	f7f3 ff70 	bl	8000550 <__aeabi_dmul>
 800c670:	4622      	mov	r2, r4
 800c672:	462b      	mov	r3, r5
 800c674:	f7f3 fdb6 	bl	80001e4 <__adddf3>
 800c678:	4642      	mov	r2, r8
 800c67a:	4682      	mov	sl, r0
 800c67c:	468b      	mov	fp, r1
 800c67e:	464b      	mov	r3, r9
 800c680:	4640      	mov	r0, r8
 800c682:	4649      	mov	r1, r9
 800c684:	f7f3 ff64 	bl	8000550 <__aeabi_dmul>
 800c688:	4b6b      	ldr	r3, [pc, #428]	; (800c838 <__ieee754_pow+0x770>)
 800c68a:	2200      	movs	r2, #0
 800c68c:	4606      	mov	r6, r0
 800c68e:	460f      	mov	r7, r1
 800c690:	f7f3 fda8 	bl	80001e4 <__adddf3>
 800c694:	4652      	mov	r2, sl
 800c696:	465b      	mov	r3, fp
 800c698:	f7f3 fda4 	bl	80001e4 <__adddf3>
 800c69c:	2000      	movs	r0, #0
 800c69e:	4604      	mov	r4, r0
 800c6a0:	460d      	mov	r5, r1
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	4640      	mov	r0, r8
 800c6a8:	4649      	mov	r1, r9
 800c6aa:	f7f3 ff51 	bl	8000550 <__aeabi_dmul>
 800c6ae:	4b62      	ldr	r3, [pc, #392]	; (800c838 <__ieee754_pow+0x770>)
 800c6b0:	4680      	mov	r8, r0
 800c6b2:	4689      	mov	r9, r1
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	f7f3 fd91 	bl	80001e0 <__aeabi_dsub>
 800c6be:	4632      	mov	r2, r6
 800c6c0:	463b      	mov	r3, r7
 800c6c2:	f7f3 fd8d 	bl	80001e0 <__aeabi_dsub>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	4650      	mov	r0, sl
 800c6cc:	4659      	mov	r1, fp
 800c6ce:	f7f3 fd87 	bl	80001e0 <__aeabi_dsub>
 800c6d2:	ec53 2b18 	vmov	r2, r3, d8
 800c6d6:	f7f3 ff3b 	bl	8000550 <__aeabi_dmul>
 800c6da:	4622      	mov	r2, r4
 800c6dc:	4606      	mov	r6, r0
 800c6de:	460f      	mov	r7, r1
 800c6e0:	462b      	mov	r3, r5
 800c6e2:	ec51 0b19 	vmov	r0, r1, d9
 800c6e6:	f7f3 ff33 	bl	8000550 <__aeabi_dmul>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	4639      	mov	r1, r7
 800c6f2:	f7f3 fd77 	bl	80001e4 <__adddf3>
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	460f      	mov	r7, r1
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4640      	mov	r0, r8
 800c700:	4649      	mov	r1, r9
 800c702:	f7f3 fd6f 	bl	80001e4 <__adddf3>
 800c706:	a33e      	add	r3, pc, #248	; (adr r3, 800c800 <__ieee754_pow+0x738>)
 800c708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70c:	2000      	movs	r0, #0
 800c70e:	4604      	mov	r4, r0
 800c710:	460d      	mov	r5, r1
 800c712:	f7f3 ff1d 	bl	8000550 <__aeabi_dmul>
 800c716:	4642      	mov	r2, r8
 800c718:	ec41 0b18 	vmov	d8, r0, r1
 800c71c:	464b      	mov	r3, r9
 800c71e:	4620      	mov	r0, r4
 800c720:	4629      	mov	r1, r5
 800c722:	f7f3 fd5d 	bl	80001e0 <__aeabi_dsub>
 800c726:	4602      	mov	r2, r0
 800c728:	460b      	mov	r3, r1
 800c72a:	4630      	mov	r0, r6
 800c72c:	4639      	mov	r1, r7
 800c72e:	f7f3 fd57 	bl	80001e0 <__aeabi_dsub>
 800c732:	a335      	add	r3, pc, #212	; (adr r3, 800c808 <__ieee754_pow+0x740>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f7f3 ff0a 	bl	8000550 <__aeabi_dmul>
 800c73c:	a334      	add	r3, pc, #208	; (adr r3, 800c810 <__ieee754_pow+0x748>)
 800c73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c742:	4606      	mov	r6, r0
 800c744:	460f      	mov	r7, r1
 800c746:	4620      	mov	r0, r4
 800c748:	4629      	mov	r1, r5
 800c74a:	f7f3 ff01 	bl	8000550 <__aeabi_dmul>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	4630      	mov	r0, r6
 800c754:	4639      	mov	r1, r7
 800c756:	f7f3 fd45 	bl	80001e4 <__adddf3>
 800c75a:	9a07      	ldr	r2, [sp, #28]
 800c75c:	4b37      	ldr	r3, [pc, #220]	; (800c83c <__ieee754_pow+0x774>)
 800c75e:	4413      	add	r3, r2
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	f7f3 fd3e 	bl	80001e4 <__adddf3>
 800c768:	4682      	mov	sl, r0
 800c76a:	9805      	ldr	r0, [sp, #20]
 800c76c:	468b      	mov	fp, r1
 800c76e:	f7f3 fe85 	bl	800047c <__aeabi_i2d>
 800c772:	9a07      	ldr	r2, [sp, #28]
 800c774:	4b32      	ldr	r3, [pc, #200]	; (800c840 <__ieee754_pow+0x778>)
 800c776:	4413      	add	r3, r2
 800c778:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c77c:	4606      	mov	r6, r0
 800c77e:	460f      	mov	r7, r1
 800c780:	4652      	mov	r2, sl
 800c782:	465b      	mov	r3, fp
 800c784:	ec51 0b18 	vmov	r0, r1, d8
 800c788:	f7f3 fd2c 	bl	80001e4 <__adddf3>
 800c78c:	4642      	mov	r2, r8
 800c78e:	464b      	mov	r3, r9
 800c790:	f7f3 fd28 	bl	80001e4 <__adddf3>
 800c794:	4632      	mov	r2, r6
 800c796:	463b      	mov	r3, r7
 800c798:	f7f3 fd24 	bl	80001e4 <__adddf3>
 800c79c:	2000      	movs	r0, #0
 800c79e:	4632      	mov	r2, r6
 800c7a0:	463b      	mov	r3, r7
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	460d      	mov	r5, r1
 800c7a6:	f7f3 fd1b 	bl	80001e0 <__aeabi_dsub>
 800c7aa:	4642      	mov	r2, r8
 800c7ac:	464b      	mov	r3, r9
 800c7ae:	f7f3 fd17 	bl	80001e0 <__aeabi_dsub>
 800c7b2:	ec53 2b18 	vmov	r2, r3, d8
 800c7b6:	f7f3 fd13 	bl	80001e0 <__aeabi_dsub>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	460b      	mov	r3, r1
 800c7be:	4650      	mov	r0, sl
 800c7c0:	4659      	mov	r1, fp
 800c7c2:	e610      	b.n	800c3e6 <__ieee754_pow+0x31e>
 800c7c4:	2401      	movs	r4, #1
 800c7c6:	e6a1      	b.n	800c50c <__ieee754_pow+0x444>
 800c7c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c818 <__ieee754_pow+0x750>
 800c7cc:	e617      	b.n	800c3fe <__ieee754_pow+0x336>
 800c7ce:	bf00      	nop
 800c7d0:	4a454eef 	.word	0x4a454eef
 800c7d4:	3fca7e28 	.word	0x3fca7e28
 800c7d8:	93c9db65 	.word	0x93c9db65
 800c7dc:	3fcd864a 	.word	0x3fcd864a
 800c7e0:	a91d4101 	.word	0xa91d4101
 800c7e4:	3fd17460 	.word	0x3fd17460
 800c7e8:	518f264d 	.word	0x518f264d
 800c7ec:	3fd55555 	.word	0x3fd55555
 800c7f0:	db6fabff 	.word	0xdb6fabff
 800c7f4:	3fdb6db6 	.word	0x3fdb6db6
 800c7f8:	33333303 	.word	0x33333303
 800c7fc:	3fe33333 	.word	0x3fe33333
 800c800:	e0000000 	.word	0xe0000000
 800c804:	3feec709 	.word	0x3feec709
 800c808:	dc3a03fd 	.word	0xdc3a03fd
 800c80c:	3feec709 	.word	0x3feec709
 800c810:	145b01f5 	.word	0x145b01f5
 800c814:	be3e2fe0 	.word	0xbe3e2fe0
 800c818:	00000000 	.word	0x00000000
 800c81c:	3ff00000 	.word	0x3ff00000
 800c820:	7ff00000 	.word	0x7ff00000
 800c824:	43400000 	.word	0x43400000
 800c828:	0003988e 	.word	0x0003988e
 800c82c:	000bb679 	.word	0x000bb679
 800c830:	0800d9d0 	.word	0x0800d9d0
 800c834:	3ff00000 	.word	0x3ff00000
 800c838:	40080000 	.word	0x40080000
 800c83c:	0800d9f0 	.word	0x0800d9f0
 800c840:	0800d9e0 	.word	0x0800d9e0
 800c844:	a3b5      	add	r3, pc, #724	; (adr r3, 800cb1c <__ieee754_pow+0xa54>)
 800c846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84a:	4640      	mov	r0, r8
 800c84c:	4649      	mov	r1, r9
 800c84e:	f7f3 fcc9 	bl	80001e4 <__adddf3>
 800c852:	4622      	mov	r2, r4
 800c854:	ec41 0b1a 	vmov	d10, r0, r1
 800c858:	462b      	mov	r3, r5
 800c85a:	4630      	mov	r0, r6
 800c85c:	4639      	mov	r1, r7
 800c85e:	f7f3 fcbf 	bl	80001e0 <__aeabi_dsub>
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	ec51 0b1a 	vmov	r0, r1, d10
 800c86a:	f7f4 f901 	bl	8000a70 <__aeabi_dcmpgt>
 800c86e:	2800      	cmp	r0, #0
 800c870:	f47f ae04 	bne.w	800c47c <__ieee754_pow+0x3b4>
 800c874:	4aa4      	ldr	r2, [pc, #656]	; (800cb08 <__ieee754_pow+0xa40>)
 800c876:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c87a:	4293      	cmp	r3, r2
 800c87c:	f340 8108 	ble.w	800ca90 <__ieee754_pow+0x9c8>
 800c880:	151b      	asrs	r3, r3, #20
 800c882:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c886:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c88a:	fa4a f303 	asr.w	r3, sl, r3
 800c88e:	445b      	add	r3, fp
 800c890:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c894:	4e9d      	ldr	r6, [pc, #628]	; (800cb0c <__ieee754_pow+0xa44>)
 800c896:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c89a:	4116      	asrs	r6, r2
 800c89c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	ea23 0106 	bic.w	r1, r3, r6
 800c8a6:	f1c2 0214 	rsb	r2, r2, #20
 800c8aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c8ae:	fa4a fa02 	asr.w	sl, sl, r2
 800c8b2:	f1bb 0f00 	cmp.w	fp, #0
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	4629      	mov	r1, r5
 800c8be:	bfb8      	it	lt
 800c8c0:	f1ca 0a00 	rsblt	sl, sl, #0
 800c8c4:	f7f3 fc8c 	bl	80001e0 <__aeabi_dsub>
 800c8c8:	ec41 0b19 	vmov	d9, r0, r1
 800c8cc:	4642      	mov	r2, r8
 800c8ce:	464b      	mov	r3, r9
 800c8d0:	ec51 0b19 	vmov	r0, r1, d9
 800c8d4:	f7f3 fc86 	bl	80001e4 <__adddf3>
 800c8d8:	a37b      	add	r3, pc, #492	; (adr r3, 800cac8 <__ieee754_pow+0xa00>)
 800c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8de:	2000      	movs	r0, #0
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	460d      	mov	r5, r1
 800c8e4:	f7f3 fe34 	bl	8000550 <__aeabi_dmul>
 800c8e8:	ec53 2b19 	vmov	r2, r3, d9
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	460f      	mov	r7, r1
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	f7f3 fc74 	bl	80001e0 <__aeabi_dsub>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4640      	mov	r0, r8
 800c8fe:	4649      	mov	r1, r9
 800c900:	f7f3 fc6e 	bl	80001e0 <__aeabi_dsub>
 800c904:	a372      	add	r3, pc, #456	; (adr r3, 800cad0 <__ieee754_pow+0xa08>)
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	f7f3 fe21 	bl	8000550 <__aeabi_dmul>
 800c90e:	a372      	add	r3, pc, #456	; (adr r3, 800cad8 <__ieee754_pow+0xa10>)
 800c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c914:	4680      	mov	r8, r0
 800c916:	4689      	mov	r9, r1
 800c918:	4620      	mov	r0, r4
 800c91a:	4629      	mov	r1, r5
 800c91c:	f7f3 fe18 	bl	8000550 <__aeabi_dmul>
 800c920:	4602      	mov	r2, r0
 800c922:	460b      	mov	r3, r1
 800c924:	4640      	mov	r0, r8
 800c926:	4649      	mov	r1, r9
 800c928:	f7f3 fc5c 	bl	80001e4 <__adddf3>
 800c92c:	4604      	mov	r4, r0
 800c92e:	460d      	mov	r5, r1
 800c930:	4602      	mov	r2, r0
 800c932:	460b      	mov	r3, r1
 800c934:	4630      	mov	r0, r6
 800c936:	4639      	mov	r1, r7
 800c938:	f7f3 fc54 	bl	80001e4 <__adddf3>
 800c93c:	4632      	mov	r2, r6
 800c93e:	463b      	mov	r3, r7
 800c940:	4680      	mov	r8, r0
 800c942:	4689      	mov	r9, r1
 800c944:	f7f3 fc4c 	bl	80001e0 <__aeabi_dsub>
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	4620      	mov	r0, r4
 800c94e:	4629      	mov	r1, r5
 800c950:	f7f3 fc46 	bl	80001e0 <__aeabi_dsub>
 800c954:	4642      	mov	r2, r8
 800c956:	4606      	mov	r6, r0
 800c958:	460f      	mov	r7, r1
 800c95a:	464b      	mov	r3, r9
 800c95c:	4640      	mov	r0, r8
 800c95e:	4649      	mov	r1, r9
 800c960:	f7f3 fdf6 	bl	8000550 <__aeabi_dmul>
 800c964:	a35e      	add	r3, pc, #376	; (adr r3, 800cae0 <__ieee754_pow+0xa18>)
 800c966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96a:	4604      	mov	r4, r0
 800c96c:	460d      	mov	r5, r1
 800c96e:	f7f3 fdef 	bl	8000550 <__aeabi_dmul>
 800c972:	a35d      	add	r3, pc, #372	; (adr r3, 800cae8 <__ieee754_pow+0xa20>)
 800c974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c978:	f7f3 fc32 	bl	80001e0 <__aeabi_dsub>
 800c97c:	4622      	mov	r2, r4
 800c97e:	462b      	mov	r3, r5
 800c980:	f7f3 fde6 	bl	8000550 <__aeabi_dmul>
 800c984:	a35a      	add	r3, pc, #360	; (adr r3, 800caf0 <__ieee754_pow+0xa28>)
 800c986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98a:	f7f3 fc2b 	bl	80001e4 <__adddf3>
 800c98e:	4622      	mov	r2, r4
 800c990:	462b      	mov	r3, r5
 800c992:	f7f3 fddd 	bl	8000550 <__aeabi_dmul>
 800c996:	a358      	add	r3, pc, #352	; (adr r3, 800caf8 <__ieee754_pow+0xa30>)
 800c998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99c:	f7f3 fc20 	bl	80001e0 <__aeabi_dsub>
 800c9a0:	4622      	mov	r2, r4
 800c9a2:	462b      	mov	r3, r5
 800c9a4:	f7f3 fdd4 	bl	8000550 <__aeabi_dmul>
 800c9a8:	a355      	add	r3, pc, #340	; (adr r3, 800cb00 <__ieee754_pow+0xa38>)
 800c9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ae:	f7f3 fc19 	bl	80001e4 <__adddf3>
 800c9b2:	4622      	mov	r2, r4
 800c9b4:	462b      	mov	r3, r5
 800c9b6:	f7f3 fdcb 	bl	8000550 <__aeabi_dmul>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	4640      	mov	r0, r8
 800c9c0:	4649      	mov	r1, r9
 800c9c2:	f7f3 fc0d 	bl	80001e0 <__aeabi_dsub>
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	460d      	mov	r5, r1
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	4649      	mov	r1, r9
 800c9d2:	f7f3 fdbd 	bl	8000550 <__aeabi_dmul>
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	ec41 0b19 	vmov	d9, r0, r1
 800c9dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	4629      	mov	r1, r5
 800c9e4:	f7f3 fbfc 	bl	80001e0 <__aeabi_dsub>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	ec51 0b19 	vmov	r0, r1, d9
 800c9f0:	f7f3 fed8 	bl	80007a4 <__aeabi_ddiv>
 800c9f4:	4632      	mov	r2, r6
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	460d      	mov	r5, r1
 800c9fa:	463b      	mov	r3, r7
 800c9fc:	4640      	mov	r0, r8
 800c9fe:	4649      	mov	r1, r9
 800ca00:	f7f3 fda6 	bl	8000550 <__aeabi_dmul>
 800ca04:	4632      	mov	r2, r6
 800ca06:	463b      	mov	r3, r7
 800ca08:	f7f3 fbec 	bl	80001e4 <__adddf3>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	460b      	mov	r3, r1
 800ca10:	4620      	mov	r0, r4
 800ca12:	4629      	mov	r1, r5
 800ca14:	f7f3 fbe4 	bl	80001e0 <__aeabi_dsub>
 800ca18:	4642      	mov	r2, r8
 800ca1a:	464b      	mov	r3, r9
 800ca1c:	f7f3 fbe0 	bl	80001e0 <__aeabi_dsub>
 800ca20:	460b      	mov	r3, r1
 800ca22:	4602      	mov	r2, r0
 800ca24:	493a      	ldr	r1, [pc, #232]	; (800cb10 <__ieee754_pow+0xa48>)
 800ca26:	2000      	movs	r0, #0
 800ca28:	f7f3 fbda 	bl	80001e0 <__aeabi_dsub>
 800ca2c:	ec41 0b10 	vmov	d0, r0, r1
 800ca30:	ee10 3a90 	vmov	r3, s1
 800ca34:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ca38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca3c:	da2b      	bge.n	800ca96 <__ieee754_pow+0x9ce>
 800ca3e:	4650      	mov	r0, sl
 800ca40:	f000 fb06 	bl	800d050 <scalbn>
 800ca44:	ec51 0b10 	vmov	r0, r1, d0
 800ca48:	ec53 2b18 	vmov	r2, r3, d8
 800ca4c:	f7ff bbed 	b.w	800c22a <__ieee754_pow+0x162>
 800ca50:	4b30      	ldr	r3, [pc, #192]	; (800cb14 <__ieee754_pow+0xa4c>)
 800ca52:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ca56:	429e      	cmp	r6, r3
 800ca58:	f77f af0c 	ble.w	800c874 <__ieee754_pow+0x7ac>
 800ca5c:	4b2e      	ldr	r3, [pc, #184]	; (800cb18 <__ieee754_pow+0xa50>)
 800ca5e:	440b      	add	r3, r1
 800ca60:	4303      	orrs	r3, r0
 800ca62:	d009      	beq.n	800ca78 <__ieee754_pow+0x9b0>
 800ca64:	ec51 0b18 	vmov	r0, r1, d8
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	f7f3 ffe2 	bl	8000a34 <__aeabi_dcmplt>
 800ca70:	3800      	subs	r0, #0
 800ca72:	bf18      	it	ne
 800ca74:	2001      	movne	r0, #1
 800ca76:	e447      	b.n	800c308 <__ieee754_pow+0x240>
 800ca78:	4622      	mov	r2, r4
 800ca7a:	462b      	mov	r3, r5
 800ca7c:	f7f3 fbb0 	bl	80001e0 <__aeabi_dsub>
 800ca80:	4642      	mov	r2, r8
 800ca82:	464b      	mov	r3, r9
 800ca84:	f7f3 ffea 	bl	8000a5c <__aeabi_dcmpge>
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	f43f aef3 	beq.w	800c874 <__ieee754_pow+0x7ac>
 800ca8e:	e7e9      	b.n	800ca64 <__ieee754_pow+0x99c>
 800ca90:	f04f 0a00 	mov.w	sl, #0
 800ca94:	e71a      	b.n	800c8cc <__ieee754_pow+0x804>
 800ca96:	ec51 0b10 	vmov	r0, r1, d0
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	e7d4      	b.n	800ca48 <__ieee754_pow+0x980>
 800ca9e:	491c      	ldr	r1, [pc, #112]	; (800cb10 <__ieee754_pow+0xa48>)
 800caa0:	2000      	movs	r0, #0
 800caa2:	f7ff bb30 	b.w	800c106 <__ieee754_pow+0x3e>
 800caa6:	2000      	movs	r0, #0
 800caa8:	2100      	movs	r1, #0
 800caaa:	f7ff bb2c 	b.w	800c106 <__ieee754_pow+0x3e>
 800caae:	4630      	mov	r0, r6
 800cab0:	4639      	mov	r1, r7
 800cab2:	f7ff bb28 	b.w	800c106 <__ieee754_pow+0x3e>
 800cab6:	9204      	str	r2, [sp, #16]
 800cab8:	f7ff bb7a 	b.w	800c1b0 <__ieee754_pow+0xe8>
 800cabc:	2300      	movs	r3, #0
 800cabe:	f7ff bb64 	b.w	800c18a <__ieee754_pow+0xc2>
 800cac2:	bf00      	nop
 800cac4:	f3af 8000 	nop.w
 800cac8:	00000000 	.word	0x00000000
 800cacc:	3fe62e43 	.word	0x3fe62e43
 800cad0:	fefa39ef 	.word	0xfefa39ef
 800cad4:	3fe62e42 	.word	0x3fe62e42
 800cad8:	0ca86c39 	.word	0x0ca86c39
 800cadc:	be205c61 	.word	0xbe205c61
 800cae0:	72bea4d0 	.word	0x72bea4d0
 800cae4:	3e663769 	.word	0x3e663769
 800cae8:	c5d26bf1 	.word	0xc5d26bf1
 800caec:	3ebbbd41 	.word	0x3ebbbd41
 800caf0:	af25de2c 	.word	0xaf25de2c
 800caf4:	3f11566a 	.word	0x3f11566a
 800caf8:	16bebd93 	.word	0x16bebd93
 800cafc:	3f66c16c 	.word	0x3f66c16c
 800cb00:	5555553e 	.word	0x5555553e
 800cb04:	3fc55555 	.word	0x3fc55555
 800cb08:	3fe00000 	.word	0x3fe00000
 800cb0c:	000fffff 	.word	0x000fffff
 800cb10:	3ff00000 	.word	0x3ff00000
 800cb14:	4090cbff 	.word	0x4090cbff
 800cb18:	3f6f3400 	.word	0x3f6f3400
 800cb1c:	652b82fe 	.word	0x652b82fe
 800cb20:	3c971547 	.word	0x3c971547

0800cb24 <__ieee754_sqrt>:
 800cb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb28:	ec55 4b10 	vmov	r4, r5, d0
 800cb2c:	4e55      	ldr	r6, [pc, #340]	; (800cc84 <__ieee754_sqrt+0x160>)
 800cb2e:	43ae      	bics	r6, r5
 800cb30:	ee10 0a10 	vmov	r0, s0
 800cb34:	ee10 3a10 	vmov	r3, s0
 800cb38:	462a      	mov	r2, r5
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	d110      	bne.n	800cb60 <__ieee754_sqrt+0x3c>
 800cb3e:	ee10 2a10 	vmov	r2, s0
 800cb42:	462b      	mov	r3, r5
 800cb44:	f7f3 fd04 	bl	8000550 <__aeabi_dmul>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	460b      	mov	r3, r1
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	4629      	mov	r1, r5
 800cb50:	f7f3 fb48 	bl	80001e4 <__adddf3>
 800cb54:	4604      	mov	r4, r0
 800cb56:	460d      	mov	r5, r1
 800cb58:	ec45 4b10 	vmov	d0, r4, r5
 800cb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb60:	2d00      	cmp	r5, #0
 800cb62:	dc10      	bgt.n	800cb86 <__ieee754_sqrt+0x62>
 800cb64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb68:	4330      	orrs	r0, r6
 800cb6a:	d0f5      	beq.n	800cb58 <__ieee754_sqrt+0x34>
 800cb6c:	b15d      	cbz	r5, 800cb86 <__ieee754_sqrt+0x62>
 800cb6e:	ee10 2a10 	vmov	r2, s0
 800cb72:	462b      	mov	r3, r5
 800cb74:	ee10 0a10 	vmov	r0, s0
 800cb78:	f7f3 fb32 	bl	80001e0 <__aeabi_dsub>
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	460b      	mov	r3, r1
 800cb80:	f7f3 fe10 	bl	80007a4 <__aeabi_ddiv>
 800cb84:	e7e6      	b.n	800cb54 <__ieee754_sqrt+0x30>
 800cb86:	1512      	asrs	r2, r2, #20
 800cb88:	d074      	beq.n	800cc74 <__ieee754_sqrt+0x150>
 800cb8a:	07d4      	lsls	r4, r2, #31
 800cb8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cb90:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cb94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cb98:	bf5e      	ittt	pl
 800cb9a:	0fda      	lsrpl	r2, r3, #31
 800cb9c:	005b      	lslpl	r3, r3, #1
 800cb9e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800cba2:	2400      	movs	r4, #0
 800cba4:	0fda      	lsrs	r2, r3, #31
 800cba6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800cbaa:	107f      	asrs	r7, r7, #1
 800cbac:	005b      	lsls	r3, r3, #1
 800cbae:	2516      	movs	r5, #22
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cbb6:	1886      	adds	r6, r0, r2
 800cbb8:	428e      	cmp	r6, r1
 800cbba:	bfde      	ittt	le
 800cbbc:	1b89      	suble	r1, r1, r6
 800cbbe:	18b0      	addle	r0, r6, r2
 800cbc0:	18a4      	addle	r4, r4, r2
 800cbc2:	0049      	lsls	r1, r1, #1
 800cbc4:	3d01      	subs	r5, #1
 800cbc6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800cbca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cbce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cbd2:	d1f0      	bne.n	800cbb6 <__ieee754_sqrt+0x92>
 800cbd4:	462a      	mov	r2, r5
 800cbd6:	f04f 0e20 	mov.w	lr, #32
 800cbda:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cbde:	4281      	cmp	r1, r0
 800cbe0:	eb06 0c05 	add.w	ip, r6, r5
 800cbe4:	dc02      	bgt.n	800cbec <__ieee754_sqrt+0xc8>
 800cbe6:	d113      	bne.n	800cc10 <__ieee754_sqrt+0xec>
 800cbe8:	459c      	cmp	ip, r3
 800cbea:	d811      	bhi.n	800cc10 <__ieee754_sqrt+0xec>
 800cbec:	f1bc 0f00 	cmp.w	ip, #0
 800cbf0:	eb0c 0506 	add.w	r5, ip, r6
 800cbf4:	da43      	bge.n	800cc7e <__ieee754_sqrt+0x15a>
 800cbf6:	2d00      	cmp	r5, #0
 800cbf8:	db41      	blt.n	800cc7e <__ieee754_sqrt+0x15a>
 800cbfa:	f100 0801 	add.w	r8, r0, #1
 800cbfe:	1a09      	subs	r1, r1, r0
 800cc00:	459c      	cmp	ip, r3
 800cc02:	bf88      	it	hi
 800cc04:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800cc08:	eba3 030c 	sub.w	r3, r3, ip
 800cc0c:	4432      	add	r2, r6
 800cc0e:	4640      	mov	r0, r8
 800cc10:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cc14:	f1be 0e01 	subs.w	lr, lr, #1
 800cc18:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800cc1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cc24:	d1db      	bne.n	800cbde <__ieee754_sqrt+0xba>
 800cc26:	430b      	orrs	r3, r1
 800cc28:	d006      	beq.n	800cc38 <__ieee754_sqrt+0x114>
 800cc2a:	1c50      	adds	r0, r2, #1
 800cc2c:	bf13      	iteet	ne
 800cc2e:	3201      	addne	r2, #1
 800cc30:	3401      	addeq	r4, #1
 800cc32:	4672      	moveq	r2, lr
 800cc34:	f022 0201 	bicne.w	r2, r2, #1
 800cc38:	1063      	asrs	r3, r4, #1
 800cc3a:	0852      	lsrs	r2, r2, #1
 800cc3c:	07e1      	lsls	r1, r4, #31
 800cc3e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cc42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cc46:	bf48      	it	mi
 800cc48:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cc4c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cc50:	4614      	mov	r4, r2
 800cc52:	e781      	b.n	800cb58 <__ieee754_sqrt+0x34>
 800cc54:	0ad9      	lsrs	r1, r3, #11
 800cc56:	3815      	subs	r0, #21
 800cc58:	055b      	lsls	r3, r3, #21
 800cc5a:	2900      	cmp	r1, #0
 800cc5c:	d0fa      	beq.n	800cc54 <__ieee754_sqrt+0x130>
 800cc5e:	02cd      	lsls	r5, r1, #11
 800cc60:	d50a      	bpl.n	800cc78 <__ieee754_sqrt+0x154>
 800cc62:	f1c2 0420 	rsb	r4, r2, #32
 800cc66:	fa23 f404 	lsr.w	r4, r3, r4
 800cc6a:	1e55      	subs	r5, r2, #1
 800cc6c:	4093      	lsls	r3, r2
 800cc6e:	4321      	orrs	r1, r4
 800cc70:	1b42      	subs	r2, r0, r5
 800cc72:	e78a      	b.n	800cb8a <__ieee754_sqrt+0x66>
 800cc74:	4610      	mov	r0, r2
 800cc76:	e7f0      	b.n	800cc5a <__ieee754_sqrt+0x136>
 800cc78:	0049      	lsls	r1, r1, #1
 800cc7a:	3201      	adds	r2, #1
 800cc7c:	e7ef      	b.n	800cc5e <__ieee754_sqrt+0x13a>
 800cc7e:	4680      	mov	r8, r0
 800cc80:	e7bd      	b.n	800cbfe <__ieee754_sqrt+0xda>
 800cc82:	bf00      	nop
 800cc84:	7ff00000 	.word	0x7ff00000

0800cc88 <with_errno>:
 800cc88:	b570      	push	{r4, r5, r6, lr}
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	460d      	mov	r5, r1
 800cc8e:	4616      	mov	r6, r2
 800cc90:	f7ff f86e 	bl	800bd70 <__errno>
 800cc94:	4629      	mov	r1, r5
 800cc96:	6006      	str	r6, [r0, #0]
 800cc98:	4620      	mov	r0, r4
 800cc9a:	bd70      	pop	{r4, r5, r6, pc}

0800cc9c <xflow>:
 800cc9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc9e:	4614      	mov	r4, r2
 800cca0:	461d      	mov	r5, r3
 800cca2:	b108      	cbz	r0, 800cca8 <xflow+0xc>
 800cca4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cca8:	e9cd 2300 	strd	r2, r3, [sp]
 800ccac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	f7f3 fc4c 	bl	8000550 <__aeabi_dmul>
 800ccb8:	2222      	movs	r2, #34	; 0x22
 800ccba:	b003      	add	sp, #12
 800ccbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccc0:	f7ff bfe2 	b.w	800cc88 <with_errno>

0800ccc4 <__math_uflow>:
 800ccc4:	b508      	push	{r3, lr}
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cccc:	f7ff ffe6 	bl	800cc9c <xflow>
 800ccd0:	ec41 0b10 	vmov	d0, r0, r1
 800ccd4:	bd08      	pop	{r3, pc}

0800ccd6 <__math_oflow>:
 800ccd6:	b508      	push	{r3, lr}
 800ccd8:	2200      	movs	r2, #0
 800ccda:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ccde:	f7ff ffdd 	bl	800cc9c <xflow>
 800cce2:	ec41 0b10 	vmov	d0, r0, r1
 800cce6:	bd08      	pop	{r3, pc}

0800cce8 <atan>:
 800cce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccec:	ec55 4b10 	vmov	r4, r5, d0
 800ccf0:	4bc3      	ldr	r3, [pc, #780]	; (800d000 <atan+0x318>)
 800ccf2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ccf6:	429e      	cmp	r6, r3
 800ccf8:	46ab      	mov	fp, r5
 800ccfa:	dd18      	ble.n	800cd2e <atan+0x46>
 800ccfc:	4bc1      	ldr	r3, [pc, #772]	; (800d004 <atan+0x31c>)
 800ccfe:	429e      	cmp	r6, r3
 800cd00:	dc01      	bgt.n	800cd06 <atan+0x1e>
 800cd02:	d109      	bne.n	800cd18 <atan+0x30>
 800cd04:	b144      	cbz	r4, 800cd18 <atan+0x30>
 800cd06:	4622      	mov	r2, r4
 800cd08:	462b      	mov	r3, r5
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	4629      	mov	r1, r5
 800cd0e:	f7f3 fa69 	bl	80001e4 <__adddf3>
 800cd12:	4604      	mov	r4, r0
 800cd14:	460d      	mov	r5, r1
 800cd16:	e006      	b.n	800cd26 <atan+0x3e>
 800cd18:	f1bb 0f00 	cmp.w	fp, #0
 800cd1c:	f300 8131 	bgt.w	800cf82 <atan+0x29a>
 800cd20:	a59b      	add	r5, pc, #620	; (adr r5, 800cf90 <atan+0x2a8>)
 800cd22:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd26:	ec45 4b10 	vmov	d0, r4, r5
 800cd2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2e:	4bb6      	ldr	r3, [pc, #728]	; (800d008 <atan+0x320>)
 800cd30:	429e      	cmp	r6, r3
 800cd32:	dc14      	bgt.n	800cd5e <atan+0x76>
 800cd34:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cd38:	429e      	cmp	r6, r3
 800cd3a:	dc0d      	bgt.n	800cd58 <atan+0x70>
 800cd3c:	a396      	add	r3, pc, #600	; (adr r3, 800cf98 <atan+0x2b0>)
 800cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd42:	ee10 0a10 	vmov	r0, s0
 800cd46:	4629      	mov	r1, r5
 800cd48:	f7f3 fa4c 	bl	80001e4 <__adddf3>
 800cd4c:	4baf      	ldr	r3, [pc, #700]	; (800d00c <atan+0x324>)
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f7f3 fe8e 	bl	8000a70 <__aeabi_dcmpgt>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d1e6      	bne.n	800cd26 <atan+0x3e>
 800cd58:	f04f 3aff 	mov.w	sl, #4294967295
 800cd5c:	e02b      	b.n	800cdb6 <atan+0xce>
 800cd5e:	f000 f963 	bl	800d028 <fabs>
 800cd62:	4bab      	ldr	r3, [pc, #684]	; (800d010 <atan+0x328>)
 800cd64:	429e      	cmp	r6, r3
 800cd66:	ec55 4b10 	vmov	r4, r5, d0
 800cd6a:	f300 80bf 	bgt.w	800ceec <atan+0x204>
 800cd6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cd72:	429e      	cmp	r6, r3
 800cd74:	f300 80a0 	bgt.w	800ceb8 <atan+0x1d0>
 800cd78:	ee10 2a10 	vmov	r2, s0
 800cd7c:	ee10 0a10 	vmov	r0, s0
 800cd80:	462b      	mov	r3, r5
 800cd82:	4629      	mov	r1, r5
 800cd84:	f7f3 fa2e 	bl	80001e4 <__adddf3>
 800cd88:	4ba0      	ldr	r3, [pc, #640]	; (800d00c <atan+0x324>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f7f3 fa28 	bl	80001e0 <__aeabi_dsub>
 800cd90:	2200      	movs	r2, #0
 800cd92:	4606      	mov	r6, r0
 800cd94:	460f      	mov	r7, r1
 800cd96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	f7f3 fa21 	bl	80001e4 <__adddf3>
 800cda2:	4602      	mov	r2, r0
 800cda4:	460b      	mov	r3, r1
 800cda6:	4630      	mov	r0, r6
 800cda8:	4639      	mov	r1, r7
 800cdaa:	f7f3 fcfb 	bl	80007a4 <__aeabi_ddiv>
 800cdae:	f04f 0a00 	mov.w	sl, #0
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	460d      	mov	r5, r1
 800cdb6:	4622      	mov	r2, r4
 800cdb8:	462b      	mov	r3, r5
 800cdba:	4620      	mov	r0, r4
 800cdbc:	4629      	mov	r1, r5
 800cdbe:	f7f3 fbc7 	bl	8000550 <__aeabi_dmul>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4680      	mov	r8, r0
 800cdc8:	4689      	mov	r9, r1
 800cdca:	f7f3 fbc1 	bl	8000550 <__aeabi_dmul>
 800cdce:	a374      	add	r3, pc, #464	; (adr r3, 800cfa0 <atan+0x2b8>)
 800cdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	460f      	mov	r7, r1
 800cdd8:	f7f3 fbba 	bl	8000550 <__aeabi_dmul>
 800cddc:	a372      	add	r3, pc, #456	; (adr r3, 800cfa8 <atan+0x2c0>)
 800cdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde2:	f7f3 f9ff 	bl	80001e4 <__adddf3>
 800cde6:	4632      	mov	r2, r6
 800cde8:	463b      	mov	r3, r7
 800cdea:	f7f3 fbb1 	bl	8000550 <__aeabi_dmul>
 800cdee:	a370      	add	r3, pc, #448	; (adr r3, 800cfb0 <atan+0x2c8>)
 800cdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf4:	f7f3 f9f6 	bl	80001e4 <__adddf3>
 800cdf8:	4632      	mov	r2, r6
 800cdfa:	463b      	mov	r3, r7
 800cdfc:	f7f3 fba8 	bl	8000550 <__aeabi_dmul>
 800ce00:	a36d      	add	r3, pc, #436	; (adr r3, 800cfb8 <atan+0x2d0>)
 800ce02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce06:	f7f3 f9ed 	bl	80001e4 <__adddf3>
 800ce0a:	4632      	mov	r2, r6
 800ce0c:	463b      	mov	r3, r7
 800ce0e:	f7f3 fb9f 	bl	8000550 <__aeabi_dmul>
 800ce12:	a36b      	add	r3, pc, #428	; (adr r3, 800cfc0 <atan+0x2d8>)
 800ce14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce18:	f7f3 f9e4 	bl	80001e4 <__adddf3>
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	463b      	mov	r3, r7
 800ce20:	f7f3 fb96 	bl	8000550 <__aeabi_dmul>
 800ce24:	a368      	add	r3, pc, #416	; (adr r3, 800cfc8 <atan+0x2e0>)
 800ce26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2a:	f7f3 f9db 	bl	80001e4 <__adddf3>
 800ce2e:	4642      	mov	r2, r8
 800ce30:	464b      	mov	r3, r9
 800ce32:	f7f3 fb8d 	bl	8000550 <__aeabi_dmul>
 800ce36:	a366      	add	r3, pc, #408	; (adr r3, 800cfd0 <atan+0x2e8>)
 800ce38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3c:	4680      	mov	r8, r0
 800ce3e:	4689      	mov	r9, r1
 800ce40:	4630      	mov	r0, r6
 800ce42:	4639      	mov	r1, r7
 800ce44:	f7f3 fb84 	bl	8000550 <__aeabi_dmul>
 800ce48:	a363      	add	r3, pc, #396	; (adr r3, 800cfd8 <atan+0x2f0>)
 800ce4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4e:	f7f3 f9c7 	bl	80001e0 <__aeabi_dsub>
 800ce52:	4632      	mov	r2, r6
 800ce54:	463b      	mov	r3, r7
 800ce56:	f7f3 fb7b 	bl	8000550 <__aeabi_dmul>
 800ce5a:	a361      	add	r3, pc, #388	; (adr r3, 800cfe0 <atan+0x2f8>)
 800ce5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce60:	f7f3 f9be 	bl	80001e0 <__aeabi_dsub>
 800ce64:	4632      	mov	r2, r6
 800ce66:	463b      	mov	r3, r7
 800ce68:	f7f3 fb72 	bl	8000550 <__aeabi_dmul>
 800ce6c:	a35e      	add	r3, pc, #376	; (adr r3, 800cfe8 <atan+0x300>)
 800ce6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce72:	f7f3 f9b5 	bl	80001e0 <__aeabi_dsub>
 800ce76:	4632      	mov	r2, r6
 800ce78:	463b      	mov	r3, r7
 800ce7a:	f7f3 fb69 	bl	8000550 <__aeabi_dmul>
 800ce7e:	a35c      	add	r3, pc, #368	; (adr r3, 800cff0 <atan+0x308>)
 800ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce84:	f7f3 f9ac 	bl	80001e0 <__aeabi_dsub>
 800ce88:	4632      	mov	r2, r6
 800ce8a:	463b      	mov	r3, r7
 800ce8c:	f7f3 fb60 	bl	8000550 <__aeabi_dmul>
 800ce90:	4602      	mov	r2, r0
 800ce92:	460b      	mov	r3, r1
 800ce94:	4640      	mov	r0, r8
 800ce96:	4649      	mov	r1, r9
 800ce98:	f7f3 f9a4 	bl	80001e4 <__adddf3>
 800ce9c:	4622      	mov	r2, r4
 800ce9e:	462b      	mov	r3, r5
 800cea0:	f7f3 fb56 	bl	8000550 <__aeabi_dmul>
 800cea4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	d14b      	bne.n	800cf46 <atan+0x25e>
 800ceae:	4620      	mov	r0, r4
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	f7f3 f995 	bl	80001e0 <__aeabi_dsub>
 800ceb6:	e72c      	b.n	800cd12 <atan+0x2a>
 800ceb8:	ee10 0a10 	vmov	r0, s0
 800cebc:	4b53      	ldr	r3, [pc, #332]	; (800d00c <atan+0x324>)
 800cebe:	2200      	movs	r2, #0
 800cec0:	4629      	mov	r1, r5
 800cec2:	f7f3 f98d 	bl	80001e0 <__aeabi_dsub>
 800cec6:	4b51      	ldr	r3, [pc, #324]	; (800d00c <atan+0x324>)
 800cec8:	4606      	mov	r6, r0
 800ceca:	460f      	mov	r7, r1
 800cecc:	2200      	movs	r2, #0
 800cece:	4620      	mov	r0, r4
 800ced0:	4629      	mov	r1, r5
 800ced2:	f7f3 f987 	bl	80001e4 <__adddf3>
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	4630      	mov	r0, r6
 800cedc:	4639      	mov	r1, r7
 800cede:	f7f3 fc61 	bl	80007a4 <__aeabi_ddiv>
 800cee2:	f04f 0a01 	mov.w	sl, #1
 800cee6:	4604      	mov	r4, r0
 800cee8:	460d      	mov	r5, r1
 800ceea:	e764      	b.n	800cdb6 <atan+0xce>
 800ceec:	4b49      	ldr	r3, [pc, #292]	; (800d014 <atan+0x32c>)
 800ceee:	429e      	cmp	r6, r3
 800cef0:	da1d      	bge.n	800cf2e <atan+0x246>
 800cef2:	ee10 0a10 	vmov	r0, s0
 800cef6:	4b48      	ldr	r3, [pc, #288]	; (800d018 <atan+0x330>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	4629      	mov	r1, r5
 800cefc:	f7f3 f970 	bl	80001e0 <__aeabi_dsub>
 800cf00:	4b45      	ldr	r3, [pc, #276]	; (800d018 <atan+0x330>)
 800cf02:	4606      	mov	r6, r0
 800cf04:	460f      	mov	r7, r1
 800cf06:	2200      	movs	r2, #0
 800cf08:	4620      	mov	r0, r4
 800cf0a:	4629      	mov	r1, r5
 800cf0c:	f7f3 fb20 	bl	8000550 <__aeabi_dmul>
 800cf10:	4b3e      	ldr	r3, [pc, #248]	; (800d00c <atan+0x324>)
 800cf12:	2200      	movs	r2, #0
 800cf14:	f7f3 f966 	bl	80001e4 <__adddf3>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	4639      	mov	r1, r7
 800cf20:	f7f3 fc40 	bl	80007a4 <__aeabi_ddiv>
 800cf24:	f04f 0a02 	mov.w	sl, #2
 800cf28:	4604      	mov	r4, r0
 800cf2a:	460d      	mov	r5, r1
 800cf2c:	e743      	b.n	800cdb6 <atan+0xce>
 800cf2e:	462b      	mov	r3, r5
 800cf30:	ee10 2a10 	vmov	r2, s0
 800cf34:	4939      	ldr	r1, [pc, #228]	; (800d01c <atan+0x334>)
 800cf36:	2000      	movs	r0, #0
 800cf38:	f7f3 fc34 	bl	80007a4 <__aeabi_ddiv>
 800cf3c:	f04f 0a03 	mov.w	sl, #3
 800cf40:	4604      	mov	r4, r0
 800cf42:	460d      	mov	r5, r1
 800cf44:	e737      	b.n	800cdb6 <atan+0xce>
 800cf46:	4b36      	ldr	r3, [pc, #216]	; (800d020 <atan+0x338>)
 800cf48:	4e36      	ldr	r6, [pc, #216]	; (800d024 <atan+0x33c>)
 800cf4a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cf4e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cf52:	e9da 2300 	ldrd	r2, r3, [sl]
 800cf56:	f7f3 f943 	bl	80001e0 <__aeabi_dsub>
 800cf5a:	4622      	mov	r2, r4
 800cf5c:	462b      	mov	r3, r5
 800cf5e:	f7f3 f93f 	bl	80001e0 <__aeabi_dsub>
 800cf62:	4602      	mov	r2, r0
 800cf64:	460b      	mov	r3, r1
 800cf66:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cf6a:	f7f3 f939 	bl	80001e0 <__aeabi_dsub>
 800cf6e:	f1bb 0f00 	cmp.w	fp, #0
 800cf72:	4604      	mov	r4, r0
 800cf74:	460d      	mov	r5, r1
 800cf76:	f6bf aed6 	bge.w	800cd26 <atan+0x3e>
 800cf7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf7e:	461d      	mov	r5, r3
 800cf80:	e6d1      	b.n	800cd26 <atan+0x3e>
 800cf82:	a51d      	add	r5, pc, #116	; (adr r5, 800cff8 <atan+0x310>)
 800cf84:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cf88:	e6cd      	b.n	800cd26 <atan+0x3e>
 800cf8a:	bf00      	nop
 800cf8c:	f3af 8000 	nop.w
 800cf90:	54442d18 	.word	0x54442d18
 800cf94:	bff921fb 	.word	0xbff921fb
 800cf98:	8800759c 	.word	0x8800759c
 800cf9c:	7e37e43c 	.word	0x7e37e43c
 800cfa0:	e322da11 	.word	0xe322da11
 800cfa4:	3f90ad3a 	.word	0x3f90ad3a
 800cfa8:	24760deb 	.word	0x24760deb
 800cfac:	3fa97b4b 	.word	0x3fa97b4b
 800cfb0:	a0d03d51 	.word	0xa0d03d51
 800cfb4:	3fb10d66 	.word	0x3fb10d66
 800cfb8:	c54c206e 	.word	0xc54c206e
 800cfbc:	3fb745cd 	.word	0x3fb745cd
 800cfc0:	920083ff 	.word	0x920083ff
 800cfc4:	3fc24924 	.word	0x3fc24924
 800cfc8:	5555550d 	.word	0x5555550d
 800cfcc:	3fd55555 	.word	0x3fd55555
 800cfd0:	2c6a6c2f 	.word	0x2c6a6c2f
 800cfd4:	bfa2b444 	.word	0xbfa2b444
 800cfd8:	52defd9a 	.word	0x52defd9a
 800cfdc:	3fadde2d 	.word	0x3fadde2d
 800cfe0:	af749a6d 	.word	0xaf749a6d
 800cfe4:	3fb3b0f2 	.word	0x3fb3b0f2
 800cfe8:	fe231671 	.word	0xfe231671
 800cfec:	3fbc71c6 	.word	0x3fbc71c6
 800cff0:	9998ebc4 	.word	0x9998ebc4
 800cff4:	3fc99999 	.word	0x3fc99999
 800cff8:	54442d18 	.word	0x54442d18
 800cffc:	3ff921fb 	.word	0x3ff921fb
 800d000:	440fffff 	.word	0x440fffff
 800d004:	7ff00000 	.word	0x7ff00000
 800d008:	3fdbffff 	.word	0x3fdbffff
 800d00c:	3ff00000 	.word	0x3ff00000
 800d010:	3ff2ffff 	.word	0x3ff2ffff
 800d014:	40038000 	.word	0x40038000
 800d018:	3ff80000 	.word	0x3ff80000
 800d01c:	bff00000 	.word	0xbff00000
 800d020:	0800da20 	.word	0x0800da20
 800d024:	0800da00 	.word	0x0800da00

0800d028 <fabs>:
 800d028:	ec51 0b10 	vmov	r0, r1, d0
 800d02c:	ee10 2a10 	vmov	r2, s0
 800d030:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d034:	ec43 2b10 	vmov	d0, r2, r3
 800d038:	4770      	bx	lr

0800d03a <finite>:
 800d03a:	b082      	sub	sp, #8
 800d03c:	ed8d 0b00 	vstr	d0, [sp]
 800d040:	9801      	ldr	r0, [sp, #4]
 800d042:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d046:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d04a:	0fc0      	lsrs	r0, r0, #31
 800d04c:	b002      	add	sp, #8
 800d04e:	4770      	bx	lr

0800d050 <scalbn>:
 800d050:	b570      	push	{r4, r5, r6, lr}
 800d052:	ec55 4b10 	vmov	r4, r5, d0
 800d056:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d05a:	4606      	mov	r6, r0
 800d05c:	462b      	mov	r3, r5
 800d05e:	b99a      	cbnz	r2, 800d088 <scalbn+0x38>
 800d060:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d064:	4323      	orrs	r3, r4
 800d066:	d036      	beq.n	800d0d6 <scalbn+0x86>
 800d068:	4b39      	ldr	r3, [pc, #228]	; (800d150 <scalbn+0x100>)
 800d06a:	4629      	mov	r1, r5
 800d06c:	ee10 0a10 	vmov	r0, s0
 800d070:	2200      	movs	r2, #0
 800d072:	f7f3 fa6d 	bl	8000550 <__aeabi_dmul>
 800d076:	4b37      	ldr	r3, [pc, #220]	; (800d154 <scalbn+0x104>)
 800d078:	429e      	cmp	r6, r3
 800d07a:	4604      	mov	r4, r0
 800d07c:	460d      	mov	r5, r1
 800d07e:	da10      	bge.n	800d0a2 <scalbn+0x52>
 800d080:	a32b      	add	r3, pc, #172	; (adr r3, 800d130 <scalbn+0xe0>)
 800d082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d086:	e03a      	b.n	800d0fe <scalbn+0xae>
 800d088:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d08c:	428a      	cmp	r2, r1
 800d08e:	d10c      	bne.n	800d0aa <scalbn+0x5a>
 800d090:	ee10 2a10 	vmov	r2, s0
 800d094:	4620      	mov	r0, r4
 800d096:	4629      	mov	r1, r5
 800d098:	f7f3 f8a4 	bl	80001e4 <__adddf3>
 800d09c:	4604      	mov	r4, r0
 800d09e:	460d      	mov	r5, r1
 800d0a0:	e019      	b.n	800d0d6 <scalbn+0x86>
 800d0a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	3a36      	subs	r2, #54	; 0x36
 800d0aa:	4432      	add	r2, r6
 800d0ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d0b0:	428a      	cmp	r2, r1
 800d0b2:	dd08      	ble.n	800d0c6 <scalbn+0x76>
 800d0b4:	2d00      	cmp	r5, #0
 800d0b6:	a120      	add	r1, pc, #128	; (adr r1, 800d138 <scalbn+0xe8>)
 800d0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0bc:	da1c      	bge.n	800d0f8 <scalbn+0xa8>
 800d0be:	a120      	add	r1, pc, #128	; (adr r1, 800d140 <scalbn+0xf0>)
 800d0c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0c4:	e018      	b.n	800d0f8 <scalbn+0xa8>
 800d0c6:	2a00      	cmp	r2, #0
 800d0c8:	dd08      	ble.n	800d0dc <scalbn+0x8c>
 800d0ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d0d6:	ec45 4b10 	vmov	d0, r4, r5
 800d0da:	bd70      	pop	{r4, r5, r6, pc}
 800d0dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d0e0:	da19      	bge.n	800d116 <scalbn+0xc6>
 800d0e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d0e6:	429e      	cmp	r6, r3
 800d0e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d0ec:	dd0a      	ble.n	800d104 <scalbn+0xb4>
 800d0ee:	a112      	add	r1, pc, #72	; (adr r1, 800d138 <scalbn+0xe8>)
 800d0f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1e2      	bne.n	800d0be <scalbn+0x6e>
 800d0f8:	a30f      	add	r3, pc, #60	; (adr r3, 800d138 <scalbn+0xe8>)
 800d0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fe:	f7f3 fa27 	bl	8000550 <__aeabi_dmul>
 800d102:	e7cb      	b.n	800d09c <scalbn+0x4c>
 800d104:	a10a      	add	r1, pc, #40	; (adr r1, 800d130 <scalbn+0xe0>)
 800d106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d0b8      	beq.n	800d080 <scalbn+0x30>
 800d10e:	a10e      	add	r1, pc, #56	; (adr r1, 800d148 <scalbn+0xf8>)
 800d110:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d114:	e7b4      	b.n	800d080 <scalbn+0x30>
 800d116:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d11a:	3236      	adds	r2, #54	; 0x36
 800d11c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d120:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d124:	4620      	mov	r0, r4
 800d126:	4b0c      	ldr	r3, [pc, #48]	; (800d158 <scalbn+0x108>)
 800d128:	2200      	movs	r2, #0
 800d12a:	e7e8      	b.n	800d0fe <scalbn+0xae>
 800d12c:	f3af 8000 	nop.w
 800d130:	c2f8f359 	.word	0xc2f8f359
 800d134:	01a56e1f 	.word	0x01a56e1f
 800d138:	8800759c 	.word	0x8800759c
 800d13c:	7e37e43c 	.word	0x7e37e43c
 800d140:	8800759c 	.word	0x8800759c
 800d144:	fe37e43c 	.word	0xfe37e43c
 800d148:	c2f8f359 	.word	0xc2f8f359
 800d14c:	81a56e1f 	.word	0x81a56e1f
 800d150:	43500000 	.word	0x43500000
 800d154:	ffff3cb0 	.word	0xffff3cb0
 800d158:	3c900000 	.word	0x3c900000

0800d15c <_init>:
 800d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15e:	bf00      	nop
 800d160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d162:	bc08      	pop	{r3}
 800d164:	469e      	mov	lr, r3
 800d166:	4770      	bx	lr

0800d168 <_fini>:
 800d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d16a:	bf00      	nop
 800d16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d16e:	bc08      	pop	{r3}
 800d170:	469e      	mov	lr, r3
 800d172:	4770      	bx	lr
