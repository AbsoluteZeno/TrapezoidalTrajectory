
TrapezoidalTraj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca3c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800cbd8  0800cbd8  0001cbd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc98  0800cc98  000202ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc98  0800cc98  0001cc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cca0  0800cca0  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cca0  0800cca0  0001cca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cca4  0800cca4  0001cca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800cca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd0  200002b0  0800cf54  000202b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000f80  0800cf54  00020f80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019022  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c3  00000000  00000000  000392fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003d878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acaa  00000000  00000000  0003ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4ec  00000000  00000000  000596e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fb5a  00000000  00000000  00074bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00114728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f8  00000000  00000000  00114778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002b0 	.word	0x200002b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800cbbc 	.word	0x0800cbbc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002b4 	.word	0x200002b4
 80001d4:	0800cbbc 	.word	0x0800cbbc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b992 	b.w	80010a8 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f824 	bl	8000dd8 <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fbd3 	bl	8000550 <__aeabi_dmul>
 8000daa:	f000 f97f 	bl	80010ac <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fb54 	bl	800045c <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fbca 	bl	8000550 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa0c 	bl	80001e0 <__aeabi_dsub>
 8000dc8:	f000 f970 	bl	80010ac <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__aeabi_d2uiz>:
 80010ac:	004a      	lsls	r2, r1, #1
 80010ae:	d211      	bcs.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010b4:	d211      	bcs.n	80010da <__aeabi_d2uiz+0x2e>
 80010b6:	d50d      	bpl.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010c0:	d40e      	bmi.n	80010e0 <__aeabi_d2uiz+0x34>
 80010c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010ce:	fa23 f002 	lsr.w	r0, r3, r2
 80010d2:	4770      	bx	lr
 80010d4:	f04f 0000 	mov.w	r0, #0
 80010d8:	4770      	bx	lr
 80010da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80010de:	d102      	bne.n	80010e6 <__aeabi_d2uiz+0x3a>
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0000 	mov.w	r0, #0
 80010ea:	4770      	bx	lr

080010ec <BaseSystem_SetHome>:
extern uint8_t place_cmd[];

extern void ControllerState();

void BaseSystem_SetHome()
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	static enum {idle, sethome} state = idle;

	if (SetHomeFlag)
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <BaseSystem_SetHome+0x6c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d026      	beq.n	8001146 <BaseSystem_SetHome+0x5a>
	{
		switch(state)
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <BaseSystem_SetHome+0x70>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <BaseSystem_SetHome+0x1a>
 8001100:	2b01      	cmp	r3, #1
 8001102:	d00a      	beq.n	800111a <BaseSystem_SetHome+0x2e>
				SetHomeFlag = 0;
			}
		break;
		}
	}
}
 8001104:	e022      	b.n	800114c <BaseSystem_SetHome+0x60>
			registerFrame[1].U16 = 0b00000000; //bit 2 set home = 0 //base system status
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <BaseSystem_SetHome+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b00000100; //bit 2 set home = 1 //y-axis moving status
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <BaseSystem_SetHome+0x74>)
 800110e:	2204      	movs	r2, #4
 8001110:	841a      	strh	r2, [r3, #32]
			state = sethome;
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <BaseSystem_SetHome+0x70>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
		break;
 8001118:	e018      	b.n	800114c <BaseSystem_SetHome+0x60>
			registerFrame[65].U16 = 0b00000001;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <BaseSystem_SetHome+0x74>)
 800111c:	2201      	movs	r2, #1
 800111e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			SetHomeYFlag = 1;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <BaseSystem_SetHome+0x78>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
			registerFrame[16].U16 = 0b00000000;//bit 2 set home = 0 //y-axis moving status
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <BaseSystem_SetHome+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	841a      	strh	r2, [r3, #32]
			if(registerFrame[64].U16 == 0b00000000)
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <BaseSystem_SetHome+0x74>)
 8001130:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001134:	2b00      	cmp	r3, #0
 8001136:	d108      	bne.n	800114a <BaseSystem_SetHome+0x5e>
				state = idle;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <BaseSystem_SetHome+0x70>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
				SetHomeFlag = 0;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <BaseSystem_SetHome+0x6c>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
		break;
 8001144:	e001      	b.n	800114a <BaseSystem_SetHome+0x5e>
	}
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <BaseSystem_SetHome+0x60>
		break;
 800114a:	bf00      	nop
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000f76 	.word	0x20000f76
 800115c:	200002cc 	.word	0x200002cc
 8001160:	20000ee8 	.word	0x20000ee8
 8001164:	20000211 	.word	0x20000211

08001168 <BaseSystem_RunPointMode>:

void BaseSystem_RunPointMode()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	static enum {idle, RunPointMode} state = idle;

	if (RunPointFlag)
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <BaseSystem_RunPointMode+0xa8>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d048      	beq.n	8001206 <BaseSystem_RunPointMode+0x9e>
	{
		switch(state)
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <BaseSystem_RunPointMode+0xac>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <BaseSystem_RunPointMode+0x1a>
 800117c:	2b01      	cmp	r3, #1
 800117e:	d00a      	beq.n	8001196 <BaseSystem_RunPointMode+0x2e>
				RunPointFlag = 0;
			}
		break;
		}
	}
}
 8001180:	e044      	b.n	800120c <BaseSystem_RunPointMode+0xa4>
			registerFrame[1].U16 = 0b00000000; //bit 4 run point mode = 0 //base system status
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <BaseSystem_RunPointMode+0xb0>)
 8001184:	2200      	movs	r2, #0
 8001186:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b00100000; //bit 5 go point = 1 //y-axis moving status
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <BaseSystem_RunPointMode+0xb0>)
 800118a:	2220      	movs	r2, #32
 800118c:	841a      	strh	r2, [r3, #32]
			state = RunPointMode;
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <BaseSystem_RunPointMode+0xac>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
		break;
 8001194:	e03a      	b.n	800120c <BaseSystem_RunPointMode+0xa4>
			registerFrame[65].U16 = registerFrame[48].U16; //position -1400 to 1400
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <BaseSystem_RunPointMode+0xb0>)
 8001198:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <BaseSystem_RunPointMode+0xb0>)
 800119e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			registerFrame[66].U16 = 2500; //velocity max 3000
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <BaseSystem_RunPointMode+0xb0>)
 80011a4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80011a8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
			registerFrame[67].U16 = 1; //acceleration 1 2 3
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <BaseSystem_RunPointMode+0xb0>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			Pf = registerFrame[49].U16/10.0;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <BaseSystem_RunPointMode+0xb0>)
 80011b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f95e 	bl	800047c <__aeabi_i2d>
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <BaseSystem_RunPointMode+0xb4>)
 80011c6:	f7ff faed 	bl	80007a4 <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fc6d 	bl	8000ab0 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a11      	ldr	r2, [pc, #68]	; (8001220 <BaseSystem_RunPointMode+0xb8>)
 80011da:	6013      	str	r3, [r2, #0]
			ControllerState();
 80011dc:	f002 ff30 	bl	8004040 <ControllerState>
			if(ControllerFinishedFollowFlag && (registerFrame[64].U16 == 0))
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <BaseSystem_RunPointMode+0xbc>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d010      	beq.n	800120a <BaseSystem_RunPointMode+0xa2>
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <BaseSystem_RunPointMode+0xb0>)
 80011ea:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10b      	bne.n	800120a <BaseSystem_RunPointMode+0xa2>
				state = idle;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <BaseSystem_RunPointMode+0xac>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
				registerFrame[16].U16 = 0b00000000; //bit 5 go point = 0 //y-axis moving status
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <BaseSystem_RunPointMode+0xb0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	841a      	strh	r2, [r3, #32]
				RunPointFlag = 0;
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <BaseSystem_RunPointMode+0xa8>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
		break;
 8001204:	e001      	b.n	800120a <BaseSystem_RunPointMode+0xa2>
	}
 8001206:	bf00      	nop
 8001208:	e000      	b.n	800120c <BaseSystem_RunPointMode+0xa4>
		break;
 800120a:	bf00      	nop
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000f78 	.word	0x20000f78
 8001214:	200002cd 	.word	0x200002cd
 8001218:	20000ee8 	.word	0x20000ee8
 800121c:	40240000 	.word	0x40240000
 8001220:	20000870 	.word	0x20000870
 8001224:	200008a8 	.word	0x200008a8

08001228 <BaseSystem_SetPickTray>:

void BaseSystem_SetPickTray()
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	static enum {Prepare, GetFirstPoint, GetSecondPoint} SetPickTrayState = Prepare;

	static int Pickreference_last[2] = {0, 0};
	static int Pickopposite_last[2] = {0, 0};

	if (SetPickTrayFlag)
 800122c:	4b83      	ldr	r3, [pc, #524]	; (800143c <BaseSystem_SetPickTray+0x214>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 8100 	beq.w	8001436 <BaseSystem_SetPickTray+0x20e>
	{
		switch(SetPickTrayState)
 8001236:	4b82      	ldr	r3, [pc, #520]	; (8001440 <BaseSystem_SetPickTray+0x218>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d040      	beq.n	80012c0 <BaseSystem_SetPickTray+0x98>
 800123e:	2b02      	cmp	r3, #2
 8001240:	f300 80ba 	bgt.w	80013b8 <BaseSystem_SetPickTray+0x190>
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <BaseSystem_SetPickTray+0x26>
 8001248:	2b01      	cmp	r3, #1
 800124a:	d013      	beq.n	8001274 <BaseSystem_SetPickTray+0x4c>
 800124c:	e0b4      	b.n	80013b8 <BaseSystem_SetPickTray+0x190>
		{
		case Prepare:
			registerFrame[1].U16 = 0b00000;
 800124e:	4b7d      	ldr	r3, [pc, #500]	; (8001444 <BaseSystem_SetPickTray+0x21c>)
 8001250:	2200      	movs	r2, #0
 8001252:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b000001;
 8001254:	4b7b      	ldr	r3, [pc, #492]	; (8001444 <BaseSystem_SetPickTray+0x21c>)
 8001256:	2201      	movs	r2, #1
 8001258:	841a      	strh	r2, [r3, #32]
			SetPickTrayState = GetFirstPoint;
 800125a:	4b79      	ldr	r3, [pc, #484]	; (8001440 <BaseSystem_SetPickTray+0x218>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001266:	4878      	ldr	r0, [pc, #480]	; (8001448 <BaseSystem_SetPickTray+0x220>)
 8001268:	f004 feea 	bl	8006040 <HAL_GPIO_WritePin>
			eff_write(testMode_cmd);
 800126c:	4877      	ldr	r0, [pc, #476]	; (800144c <BaseSystem_SetPickTray+0x224>)
 800126e:	f000 fda1 	bl	8001db4 <eff_write>
		break;
 8001272:	e0a1      	b.n	80013b8 <BaseSystem_SetPickTray+0x190>
		case GetFirstPoint:
			GetJoystickXYaxisValue(&Pickreference[0], &Pickreference[1]);
 8001274:	4976      	ldr	r1, [pc, #472]	; (8001450 <BaseSystem_SetPickTray+0x228>)
 8001276:	4877      	ldr	r0, [pc, #476]	; (8001454 <BaseSystem_SetPickTray+0x22c>)
 8001278:	f002 f83a 	bl	80032f0 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 800127c:	f002 f95c 	bl	8003538 <JoyStickControlCartesian>

			if ((Pickreference_last[0] != Pickreference[0]) || (Pickreference_last[1] != Pickreference[1]))
 8001280:	4b75      	ldr	r3, [pc, #468]	; (8001458 <BaseSystem_SetPickTray+0x230>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128c:	4b71      	ldr	r3, [pc, #452]	; (8001454 <BaseSystem_SetPickTray+0x22c>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	eeb4 7a67 	vcmp.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d10d      	bne.n	80012b8 <BaseSystem_SetPickTray+0x90>
 800129c:	4b6e      	ldr	r3, [pc, #440]	; (8001458 <BaseSystem_SetPickTray+0x230>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a8:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <BaseSystem_SetPickTray+0x22c>)
 80012aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ae:	eeb4 7a67 	vcmp.f32	s14, s15
 80012b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b6:	d07c      	beq.n	80013b2 <BaseSystem_SetPickTray+0x18a>
			{
				SetPickTrayState = GetSecondPoint;
 80012b8:	4b61      	ldr	r3, [pc, #388]	; (8001440 <BaseSystem_SetPickTray+0x218>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	701a      	strb	r2, [r3, #0]
			}
		break;
 80012be:	e078      	b.n	80013b2 <BaseSystem_SetPickTray+0x18a>
		case GetSecondPoint:

			GetJoystickXYaxisValue(&Pickopposite[0], &Pickopposite[1]);
 80012c0:	4966      	ldr	r1, [pc, #408]	; (800145c <BaseSystem_SetPickTray+0x234>)
 80012c2:	4867      	ldr	r0, [pc, #412]	; (8001460 <BaseSystem_SetPickTray+0x238>)
 80012c4:	f002 f814 	bl	80032f0 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 80012c8:	f002 f936 	bl	8003538 <JoyStickControlCartesian>

			if ((Pickopposite_last[0] != Pickopposite[0]) || (Pickopposite_last[1] != Pickopposite[1]))
 80012cc:	4b65      	ldr	r3, [pc, #404]	; (8001464 <BaseSystem_SetPickTray+0x23c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d8:	4b61      	ldr	r3, [pc, #388]	; (8001460 <BaseSystem_SetPickTray+0x238>)
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	eeb4 7a67 	vcmp.f32	s14, s15
 80012e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e6:	d10d      	bne.n	8001304 <BaseSystem_SetPickTray+0xdc>
 80012e8:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <BaseSystem_SetPickTray+0x23c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	4b5a      	ldr	r3, [pc, #360]	; (8001460 <BaseSystem_SetPickTray+0x238>)
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	eeb4 7a67 	vcmp.f32	s14, s15
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	d058      	beq.n	80013b6 <BaseSystem_SetPickTray+0x18e>
			{

				SetPickTrayState = Prepare;
 8001304:	4b4e      	ldr	r3, [pc, #312]	; (8001440 <BaseSystem_SetPickTray+0x218>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
				SetTwoPointsForCalibrate(Pickreference[0], Pickreference[1], Pickopposite[0], Pickopposite[1], 0);
 800130a:	4b52      	ldr	r3, [pc, #328]	; (8001454 <BaseSystem_SetPickTray+0x22c>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	4b50      	ldr	r3, [pc, #320]	; (8001454 <BaseSystem_SetPickTray+0x22c>)
 8001312:	ed93 7a01 	vldr	s14, [r3, #4]
 8001316:	4b52      	ldr	r3, [pc, #328]	; (8001460 <BaseSystem_SetPickTray+0x238>)
 8001318:	edd3 6a00 	vldr	s13, [r3]
 800131c:	4b50      	ldr	r3, [pc, #320]	; (8001460 <BaseSystem_SetPickTray+0x238>)
 800131e:	ed93 6a01 	vldr	s12, [r3, #4]
 8001322:	2000      	movs	r0, #0
 8001324:	eef0 1a46 	vmov.f32	s3, s12
 8001328:	eeb0 1a66 	vmov.f32	s2, s13
 800132c:	eef0 0a47 	vmov.f32	s1, s14
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	f001 fed4 	bl	80030e0 <SetTwoPointsForCalibrate>
				registerFrame[32].U16 = (int)(Pickreference[0]*10);
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <BaseSystem_SetPickTray+0x22c>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134a:	ee17 3a90 	vmov	r3, s15
 800134e:	b29a      	uxth	r2, r3
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <BaseSystem_SetPickTray+0x21c>)
 8001352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				registerFrame[33].U16 = (int)(Pickreference[1]*10);
 8001356:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <BaseSystem_SetPickTray+0x22c>)
 8001358:	edd3 7a01 	vldr	s15, [r3, #4]
 800135c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001368:	ee17 3a90 	vmov	r3, s15
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b35      	ldr	r3, [pc, #212]	; (8001444 <BaseSystem_SetPickTray+0x21c>)
 8001370:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
				registerFrame[34].U16 = (int)(PickrotationAngleRadian*100);
 8001374:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <BaseSystem_SetPickTray+0x240>)
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800146c <BaseSystem_SetPickTray+0x244>
 800137e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001386:	ee17 3a90 	vmov	r3, s15
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <BaseSystem_SetPickTray+0x21c>)
 800138e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				registerFrame[16].U16 = 0b000000;
 8001392:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <BaseSystem_SetPickTray+0x21c>)
 8001394:	2200      	movs	r2, #0
 8001396:	841a      	strh	r2, [r3, #32]
				SetPickTrayFlag = 0;
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <BaseSystem_SetPickTray+0x214>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a4:	4828      	ldr	r0, [pc, #160]	; (8001448 <BaseSystem_SetPickTray+0x220>)
 80013a6:	f004 fe4b 	bl	8006040 <HAL_GPIO_WritePin>
				eff_write(exitTest_cmd);
 80013aa:	4831      	ldr	r0, [pc, #196]	; (8001470 <BaseSystem_SetPickTray+0x248>)
 80013ac:	f000 fd02 	bl	8001db4 <eff_write>

			}
		break;
 80013b0:	e001      	b.n	80013b6 <BaseSystem_SetPickTray+0x18e>
		break;
 80013b2:	bf00      	nop
 80013b4:	e000      	b.n	80013b8 <BaseSystem_SetPickTray+0x190>
		break;
 80013b6:	bf00      	nop
		}
		Pickreference_last[0] = Pickreference[0];
 80013b8:	4b26      	ldr	r3, [pc, #152]	; (8001454 <BaseSystem_SetPickTray+0x22c>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c2:	ee17 2a90 	vmov	r2, s15
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <BaseSystem_SetPickTray+0x230>)
 80013c8:	601a      	str	r2, [r3, #0]
		Pickreference_last[1] = Pickreference[1];
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <BaseSystem_SetPickTray+0x22c>)
 80013cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80013d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d4:	ee17 2a90 	vmov	r2, s15
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <BaseSystem_SetPickTray+0x230>)
 80013da:	605a      	str	r2, [r3, #4]
		Pickopposite_last[0] = Pickopposite[0];
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <BaseSystem_SetPickTray+0x238>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e6:	ee17 2a90 	vmov	r2, s15
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <BaseSystem_SetPickTray+0x23c>)
 80013ec:	601a      	str	r2, [r3, #0]
		Pickopposite_last[1] = Pickopposite[1];
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <BaseSystem_SetPickTray+0x238>)
 80013f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f8:	ee17 2a90 	vmov	r2, s15
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <BaseSystem_SetPickTray+0x23c>)
 80013fe:	605a      	str	r2, [r3, #4]

		if (SetHomeYFlag == 1)
 8001400:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <BaseSystem_SetPickTray+0x24c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d116      	bne.n	8001436 <BaseSystem_SetPickTray+0x20e>
		{
			memset(Pickreference, 0, sizeof(Pickreference));
 8001408:	2208      	movs	r2, #8
 800140a:	2100      	movs	r1, #0
 800140c:	4811      	ldr	r0, [pc, #68]	; (8001454 <BaseSystem_SetPickTray+0x22c>)
 800140e:	f00a fa17 	bl	800b840 <memset>
			memset(Pickopposite, 0, sizeof(Pickopposite));
 8001412:	2208      	movs	r2, #8
 8001414:	2100      	movs	r1, #0
 8001416:	4812      	ldr	r0, [pc, #72]	; (8001460 <BaseSystem_SetPickTray+0x238>)
 8001418:	f00a fa12 	bl	800b840 <memset>
			memset(Pickreference_last, 0, sizeof(Pickreference_last));
 800141c:	2208      	movs	r2, #8
 800141e:	2100      	movs	r1, #0
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <BaseSystem_SetPickTray+0x230>)
 8001422:	f00a fa0d 	bl	800b840 <memset>
			memset(Pickopposite_last, 0, sizeof(Pickopposite_last));
 8001426:	2208      	movs	r2, #8
 8001428:	2100      	movs	r1, #0
 800142a:	480e      	ldr	r0, [pc, #56]	; (8001464 <BaseSystem_SetPickTray+0x23c>)
 800142c:	f00a fa08 	bl	800b840 <memset>
			SetPickTrayState = GetFirstPoint;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <BaseSystem_SetPickTray+0x218>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000f74 	.word	0x20000f74
 8001440:	200002ce 	.word	0x200002ce
 8001444:	20000ee8 	.word	0x20000ee8
 8001448:	40020400 	.word	0x40020400
 800144c:	20000220 	.word	0x20000220
 8001450:	20000950 	.word	0x20000950
 8001454:	2000094c 	.word	0x2000094c
 8001458:	200002d0 	.word	0x200002d0
 800145c:	20000958 	.word	0x20000958
 8001460:	20000954 	.word	0x20000954
 8001464:	200002d8 	.word	0x200002d8
 8001468:	2000095c 	.word	0x2000095c
 800146c:	42c80000 	.word	0x42c80000
 8001470:	20000224 	.word	0x20000224
 8001474:	20000211 	.word	0x20000211

08001478 <BaseSystem_SetPlaceTray>:

void BaseSystem_SetPlaceTray()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	static enum {Prepare, GetFirstPoint, GetSecondPoint} SetPlaceTrayState = Prepare;

	static int Placereference_last[2] = {0, 0};
	static int Placeopposite_last[2] = {0, 0};

	if(SetPlaceTrayFlag)
 800147c:	4b83      	ldr	r3, [pc, #524]	; (800168c <BaseSystem_SetPlaceTray+0x214>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 8100 	beq.w	8001686 <BaseSystem_SetPlaceTray+0x20e>
	{
		switch(SetPlaceTrayState)
 8001486:	4b82      	ldr	r3, [pc, #520]	; (8001690 <BaseSystem_SetPlaceTray+0x218>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d040      	beq.n	8001510 <BaseSystem_SetPlaceTray+0x98>
 800148e:	2b02      	cmp	r3, #2
 8001490:	f300 80ba 	bgt.w	8001608 <BaseSystem_SetPlaceTray+0x190>
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <BaseSystem_SetPlaceTray+0x26>
 8001498:	2b01      	cmp	r3, #1
 800149a:	d013      	beq.n	80014c4 <BaseSystem_SetPlaceTray+0x4c>
 800149c:	e0b4      	b.n	8001608 <BaseSystem_SetPlaceTray+0x190>
		{
		case Prepare:
			registerFrame[1].U16 = 0b00000;
 800149e:	4b7d      	ldr	r3, [pc, #500]	; (8001694 <BaseSystem_SetPlaceTray+0x21c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b000010;
 80014a4:	4b7b      	ldr	r3, [pc, #492]	; (8001694 <BaseSystem_SetPlaceTray+0x21c>)
 80014a6:	2202      	movs	r2, #2
 80014a8:	841a      	strh	r2, [r3, #32]
			SetPlaceTrayState = GetFirstPoint;
 80014aa:	4b79      	ldr	r3, [pc, #484]	; (8001690 <BaseSystem_SetPlaceTray+0x218>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b6:	4878      	ldr	r0, [pc, #480]	; (8001698 <BaseSystem_SetPlaceTray+0x220>)
 80014b8:	f004 fdc2 	bl	8006040 <HAL_GPIO_WritePin>
			eff_write(testMode_cmd);
 80014bc:	4877      	ldr	r0, [pc, #476]	; (800169c <BaseSystem_SetPlaceTray+0x224>)
 80014be:	f000 fc79 	bl	8001db4 <eff_write>
		break;
 80014c2:	e0a1      	b.n	8001608 <BaseSystem_SetPlaceTray+0x190>
		case GetFirstPoint:
			GetJoystickXYaxisValue(&Placereference[0], &Placereference[1]);
 80014c4:	4976      	ldr	r1, [pc, #472]	; (80016a0 <BaseSystem_SetPlaceTray+0x228>)
 80014c6:	4877      	ldr	r0, [pc, #476]	; (80016a4 <BaseSystem_SetPlaceTray+0x22c>)
 80014c8:	f001 ff12 	bl	80032f0 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 80014cc:	f002 f834 	bl	8003538 <JoyStickControlCartesian>

			if ((Placereference_last[0] != Placereference[0]) || (Placereference_last[1] != Placereference[1]))
 80014d0:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <BaseSystem_SetPlaceTray+0x230>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014dc:	4b71      	ldr	r3, [pc, #452]	; (80016a4 <BaseSystem_SetPlaceTray+0x22c>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	eeb4 7a67 	vcmp.f32	s14, s15
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	d10d      	bne.n	8001508 <BaseSystem_SetPlaceTray+0x90>
 80014ec:	4b6e      	ldr	r3, [pc, #440]	; (80016a8 <BaseSystem_SetPlaceTray+0x230>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f8:	4b6a      	ldr	r3, [pc, #424]	; (80016a4 <BaseSystem_SetPlaceTray+0x22c>)
 80014fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80014fe:	eeb4 7a67 	vcmp.f32	s14, s15
 8001502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001506:	d07c      	beq.n	8001602 <BaseSystem_SetPlaceTray+0x18a>
			{
				SetPlaceTrayState = GetSecondPoint;
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <BaseSystem_SetPlaceTray+0x218>)
 800150a:	2202      	movs	r2, #2
 800150c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800150e:	e078      	b.n	8001602 <BaseSystem_SetPlaceTray+0x18a>
		case GetSecondPoint:

			GetJoystickXYaxisValue(&Placeopposite[0], &Placeopposite[1]);
 8001510:	4966      	ldr	r1, [pc, #408]	; (80016ac <BaseSystem_SetPlaceTray+0x234>)
 8001512:	4867      	ldr	r0, [pc, #412]	; (80016b0 <BaseSystem_SetPlaceTray+0x238>)
 8001514:	f001 feec 	bl	80032f0 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 8001518:	f002 f80e 	bl	8003538 <JoyStickControlCartesian>

			if ((Placeopposite_last[0] != Placeopposite[0]) || (Placeopposite_last[1] != Placeopposite[1]))
 800151c:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <BaseSystem_SetPlaceTray+0x23c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	ee07 3a90 	vmov	s15, r3
 8001524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001528:	4b61      	ldr	r3, [pc, #388]	; (80016b0 <BaseSystem_SetPlaceTray+0x238>)
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001536:	d10d      	bne.n	8001554 <BaseSystem_SetPlaceTray+0xdc>
 8001538:	4b5e      	ldr	r3, [pc, #376]	; (80016b4 <BaseSystem_SetPlaceTray+0x23c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001544:	4b5a      	ldr	r3, [pc, #360]	; (80016b0 <BaseSystem_SetPlaceTray+0x238>)
 8001546:	edd3 7a01 	vldr	s15, [r3, #4]
 800154a:	eeb4 7a67 	vcmp.f32	s14, s15
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	d058      	beq.n	8001606 <BaseSystem_SetPlaceTray+0x18e>
			{

				SetPlaceTrayState = Prepare;
 8001554:	4b4e      	ldr	r3, [pc, #312]	; (8001690 <BaseSystem_SetPlaceTray+0x218>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
				SetTwoPointsForCalibrate(Placereference[0], Placereference[1], Placeopposite[0], Placeopposite[1], 1);
 800155a:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <BaseSystem_SetPlaceTray+0x22c>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <BaseSystem_SetPlaceTray+0x22c>)
 8001562:	ed93 7a01 	vldr	s14, [r3, #4]
 8001566:	4b52      	ldr	r3, [pc, #328]	; (80016b0 <BaseSystem_SetPlaceTray+0x238>)
 8001568:	edd3 6a00 	vldr	s13, [r3]
 800156c:	4b50      	ldr	r3, [pc, #320]	; (80016b0 <BaseSystem_SetPlaceTray+0x238>)
 800156e:	ed93 6a01 	vldr	s12, [r3, #4]
 8001572:	2001      	movs	r0, #1
 8001574:	eef0 1a46 	vmov.f32	s3, s12
 8001578:	eeb0 1a66 	vmov.f32	s2, s13
 800157c:	eef0 0a47 	vmov.f32	s1, s14
 8001580:	eeb0 0a67 	vmov.f32	s0, s15
 8001584:	f001 fdac 	bl	80030e0 <SetTwoPointsForCalibrate>
				registerFrame[35].U16 = (int)(Placereference[0]*10);
 8001588:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <BaseSystem_SetPlaceTray+0x22c>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800159a:	ee17 3a90 	vmov	r3, s15
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <BaseSystem_SetPlaceTray+0x21c>)
 80015a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				registerFrame[36].U16 = (int)(Placereference[1]*10);
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <BaseSystem_SetPlaceTray+0x22c>)
 80015a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b8:	ee17 3a90 	vmov	r3, s15
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b35      	ldr	r3, [pc, #212]	; (8001694 <BaseSystem_SetPlaceTray+0x21c>)
 80015c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				registerFrame[37].U16 = (int)(PlacerotationAngleRadian*100);
 80015c4:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <BaseSystem_SetPlaceTray+0x240>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80016bc <BaseSystem_SetPlaceTray+0x244>
 80015ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d6:	ee17 3a90 	vmov	r3, s15
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <BaseSystem_SetPlaceTray+0x21c>)
 80015de:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				registerFrame[16].U16 = 0b000000;
 80015e2:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <BaseSystem_SetPlaceTray+0x21c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	841a      	strh	r2, [r3, #32]
				SetPlaceTrayFlag = 0;
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <BaseSystem_SetPlaceTray+0x214>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f4:	4828      	ldr	r0, [pc, #160]	; (8001698 <BaseSystem_SetPlaceTray+0x220>)
 80015f6:	f004 fd23 	bl	8006040 <HAL_GPIO_WritePin>
				eff_write(exitTest_cmd);
 80015fa:	4831      	ldr	r0, [pc, #196]	; (80016c0 <BaseSystem_SetPlaceTray+0x248>)
 80015fc:	f000 fbda 	bl	8001db4 <eff_write>
			}
		break;
 8001600:	e001      	b.n	8001606 <BaseSystem_SetPlaceTray+0x18e>
		break;
 8001602:	bf00      	nop
 8001604:	e000      	b.n	8001608 <BaseSystem_SetPlaceTray+0x190>
		break;
 8001606:	bf00      	nop
		}
		Placereference_last[0] = Placereference[0];
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <BaseSystem_SetPlaceTray+0x22c>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001612:	ee17 2a90 	vmov	r2, s15
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <BaseSystem_SetPlaceTray+0x230>)
 8001618:	601a      	str	r2, [r3, #0]
		Placereference_last[1] = Placereference[1];
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <BaseSystem_SetPlaceTray+0x22c>)
 800161c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001624:	ee17 2a90 	vmov	r2, s15
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <BaseSystem_SetPlaceTray+0x230>)
 800162a:	605a      	str	r2, [r3, #4]
		Placeopposite_last[0] = Placeopposite[0];
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <BaseSystem_SetPlaceTray+0x238>)
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001636:	ee17 2a90 	vmov	r2, s15
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <BaseSystem_SetPlaceTray+0x23c>)
 800163c:	601a      	str	r2, [r3, #0]
		Placeopposite_last[1] = Placeopposite[1];
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <BaseSystem_SetPlaceTray+0x238>)
 8001640:	edd3 7a01 	vldr	s15, [r3, #4]
 8001644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001648:	ee17 2a90 	vmov	r2, s15
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <BaseSystem_SetPlaceTray+0x23c>)
 800164e:	605a      	str	r2, [r3, #4]

		if (SetHomeYFlag == 1)
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <BaseSystem_SetPlaceTray+0x24c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d116      	bne.n	8001686 <BaseSystem_SetPlaceTray+0x20e>
		{
			memset(Placereference, 0, sizeof(Placereference));
 8001658:	2208      	movs	r2, #8
 800165a:	2100      	movs	r1, #0
 800165c:	4811      	ldr	r0, [pc, #68]	; (80016a4 <BaseSystem_SetPlaceTray+0x22c>)
 800165e:	f00a f8ef 	bl	800b840 <memset>
			memset(Placeopposite, 0, sizeof(Placeopposite));
 8001662:	2208      	movs	r2, #8
 8001664:	2100      	movs	r1, #0
 8001666:	4812      	ldr	r0, [pc, #72]	; (80016b0 <BaseSystem_SetPlaceTray+0x238>)
 8001668:	f00a f8ea 	bl	800b840 <memset>
			memset(Placereference_last, 0, sizeof(Placereference_last));
 800166c:	2208      	movs	r2, #8
 800166e:	2100      	movs	r1, #0
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <BaseSystem_SetPlaceTray+0x230>)
 8001672:	f00a f8e5 	bl	800b840 <memset>
			memset(Placeopposite_last, 0, sizeof(Placeopposite_last));
 8001676:	2208      	movs	r2, #8
 8001678:	2100      	movs	r1, #0
 800167a:	480e      	ldr	r0, [pc, #56]	; (80016b4 <BaseSystem_SetPlaceTray+0x23c>)
 800167c:	f00a f8e0 	bl	800b840 <memset>
			SetPlaceTrayState = GetFirstPoint;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <BaseSystem_SetPlaceTray+0x218>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000f75 	.word	0x20000f75
 8001690:	200002e0 	.word	0x200002e0
 8001694:	20000ee8 	.word	0x20000ee8
 8001698:	40020400 	.word	0x40020400
 800169c:	20000220 	.word	0x20000220
 80016a0:	200009b0 	.word	0x200009b0
 80016a4:	200009ac 	.word	0x200009ac
 80016a8:	200002e4 	.word	0x200002e4
 80016ac:	200009b8 	.word	0x200009b8
 80016b0:	200009b4 	.word	0x200009b4
 80016b4:	200002ec 	.word	0x200002ec
 80016b8:	200009bc 	.word	0x200009bc
 80016bc:	42c80000 	.word	0x42c80000
 80016c0:	20000224 	.word	0x20000224
 80016c4:	20000211 	.word	0x20000211

080016c8 <BaseSystem_RuntrayMode>:

void BaseSystem_RuntrayMode()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

	static uint8_t i = 0;
	static uint16_t PickDelay = 0;
	static uint16_t PlaceDelay = 0;

	if (RunTrayFlag)
 80016cc:	4b74      	ldr	r3, [pc, #464]	; (80018a0 <BaseSystem_RuntrayMode+0x1d8>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80d8 	beq.w	8001886 <BaseSystem_RuntrayMode+0x1be>
	{
		switch(RunTrayState)
 80016d6:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <BaseSystem_RuntrayMode+0x1dc>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b04      	cmp	r3, #4
 80016dc:	f200 80de 	bhi.w	800189c <BaseSystem_RuntrayMode+0x1d4>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <BaseSystem_RuntrayMode+0x20>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	080016fd 	.word	0x080016fd
 80016ec:	08001727 	.word	0x08001727
 80016f0:	080017a1 	.word	0x080017a1
 80016f4:	080017c5 	.word	0x080017c5
 80016f8:	08001849 	.word	0x08001849
			{
			case HolesCalculate:
				registerFrame[1].U16 = 0b00000;
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <BaseSystem_RuntrayMode+0x1e0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	805a      	strh	r2, [r3, #2]
				GoalReadyFlag = 1;
 8001702:	4b6a      	ldr	r3, [pc, #424]	; (80018ac <BaseSystem_RuntrayMode+0x1e4>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
//				GoalReadyFlag = 0;
//				HolePositionsCartesian(Pickreference, PickrotationAngleRadian, PickTray9holes);
//				HolePositionsCartesian(Placereference, PlacerotationAngleRadian, PlaceTray9holes);
				if (GoalReadyFlag)
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <BaseSystem_RuntrayMode+0x1e4>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80bc 	beq.w	800188a <BaseSystem_RuntrayMode+0x1c2>
				{
					RunTrayState = GoPick;
 8001712:	4b64      	ldr	r3, [pc, #400]	; (80018a4 <BaseSystem_RuntrayMode+0x1dc>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
					eff_write(runMode_cmd);
 8001718:	4865      	ldr	r0, [pc, #404]	; (80018b0 <BaseSystem_RuntrayMode+0x1e8>)
 800171a:	f000 fb4b 	bl	8001db4 <eff_write>
					i = 0;
 800171e:	4b65      	ldr	r3, [pc, #404]	; (80018b4 <BaseSystem_RuntrayMode+0x1ec>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
				}
			break;
 8001724:	e0b1      	b.n	800188a <BaseSystem_RuntrayMode+0x1c2>
			case GoPick:
				// Run X-Axis to Pick Tray
				registerFrame[65].U16 = (int)(PickTray9holes[2*i]*10); //position -1400 to 1400
 8001726:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <BaseSystem_RuntrayMode+0x1ec>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4a62      	ldr	r2, [pc, #392]	; (80018b8 <BaseSystem_RuntrayMode+0x1f0>)
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	edd3 7a00 	vldr	s15, [r3]
 8001736:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800173a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001742:	ee17 3a90 	vmov	r3, s15
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b57      	ldr	r3, [pc, #348]	; (80018a8 <BaseSystem_RuntrayMode+0x1e0>)
 800174a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				registerFrame[66].U16 = 3000; //velocity max 3000
 800174e:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <BaseSystem_RuntrayMode+0x1e0>)
 8001750:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001754:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				registerFrame[67].U16 = 1; //acceleration 1 2 3
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <BaseSystem_RuntrayMode+0x1e0>)
 800175a:	2201      	movs	r2, #1
 800175c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

				// Run Y-Axis to Pick Tray
				registerFrame[16].U16 = 0b001000;	// Y-Axis Moving status -> GoPick
 8001760:	4b51      	ldr	r3, [pc, #324]	; (80018a8 <BaseSystem_RuntrayMode+0x1e0>)
 8001762:	2208      	movs	r2, #8
 8001764:	841a      	strh	r2, [r3, #32]
				Pf = PickTray9holes[2*i + 1];
 8001766:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <BaseSystem_RuntrayMode+0x1ec>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	3301      	adds	r3, #1
 800176e:	4a52      	ldr	r2, [pc, #328]	; (80018b8 <BaseSystem_RuntrayMode+0x1f0>)
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a51      	ldr	r2, [pc, #324]	; (80018bc <BaseSystem_RuntrayMode+0x1f4>)
 8001778:	6013      	str	r3, [r2, #0]
				ControllerState();
 800177a:	f002 fc61 	bl	8004040 <ControllerState>

				if(ControllerFinishedFollowFlag && (registerFrame[64].U16 == 0))
 800177e:	4b50      	ldr	r3, [pc, #320]	; (80018c0 <BaseSystem_RuntrayMode+0x1f8>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8083 	beq.w	800188e <BaseSystem_RuntrayMode+0x1c6>
 8001788:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <BaseSystem_RuntrayMode+0x1e0>)
 800178a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800178e:	2b00      	cmp	r3, #0
 8001790:	d17d      	bne.n	800188e <BaseSystem_RuntrayMode+0x1c6>
				{
					RunTrayState = Pick;
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <BaseSystem_RuntrayMode+0x1dc>)
 8001794:	2202      	movs	r2, #2
 8001796:	701a      	strb	r2, [r3, #0]
					PickDelay = 0;
 8001798:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <BaseSystem_RuntrayMode+0x1fc>)
 800179a:	2200      	movs	r2, #0
 800179c:	801a      	strh	r2, [r3, #0]
				}
			break;
 800179e:	e076      	b.n	800188e <BaseSystem_RuntrayMode+0x1c6>
			case Pick:
				eff_write(pickup_cmd);
 80017a0:	4849      	ldr	r0, [pc, #292]	; (80018c8 <BaseSystem_RuntrayMode+0x200>)
 80017a2:	f000 fb07 	bl	8001db4 <eff_write>
				PickDelay++;
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <BaseSystem_RuntrayMode+0x1fc>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <BaseSystem_RuntrayMode+0x1fc>)
 80017b0:	801a      	strh	r2, [r3, #0]

				if (PickDelay >= 2000)
 80017b2:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <BaseSystem_RuntrayMode+0x1fc>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017ba:	d36a      	bcc.n	8001892 <BaseSystem_RuntrayMode+0x1ca>
				{
					RunTrayState = GoPlace;
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <BaseSystem_RuntrayMode+0x1dc>)
 80017be:	2203      	movs	r2, #3
 80017c0:	701a      	strb	r2, [r3, #0]
				}
			break;
 80017c2:	e066      	b.n	8001892 <BaseSystem_RuntrayMode+0x1ca>
			case GoPlace:
				// Run X-Axis to Pick Tray
				registerFrame[65].U16 = (int)(PlaceTray9holes[2*i]*10); //position -1400 to 1400
 80017c4:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <BaseSystem_RuntrayMode+0x1ec>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4a40      	ldr	r2, [pc, #256]	; (80018cc <BaseSystem_RuntrayMode+0x204>)
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e0:	ee17 3a90 	vmov	r3, s15
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <BaseSystem_RuntrayMode+0x1e0>)
 80017e8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				registerFrame[66].U16 = 3000; //velocity max 3000
 80017ec:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <BaseSystem_RuntrayMode+0x1e0>)
 80017ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80017f2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				registerFrame[67].U16 = 1; //acceleration 1 2 3
 80017f6:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <BaseSystem_RuntrayMode+0x1e0>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

				// Run Y-Axis to Pick Tray
				registerFrame[16].U16 = 0b010000;	// Y-Axis Moving status -> GoPlace
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <BaseSystem_RuntrayMode+0x1e0>)
 8001800:	2210      	movs	r2, #16
 8001802:	841a      	strh	r2, [r3, #32]
				Pf = PlaceTray9holes[2*i + 1];
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <BaseSystem_RuntrayMode+0x1ec>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	3301      	adds	r3, #1
 800180c:	4a2f      	ldr	r2, [pc, #188]	; (80018cc <BaseSystem_RuntrayMode+0x204>)
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a29      	ldr	r2, [pc, #164]	; (80018bc <BaseSystem_RuntrayMode+0x1f4>)
 8001816:	6013      	str	r3, [r2, #0]
				ControllerState();
 8001818:	f002 fc12 	bl	8004040 <ControllerState>

				if(ControllerFinishedFollowFlag && (registerFrame[64].U16 == 0))
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <BaseSystem_RuntrayMode+0x1f8>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d038      	beq.n	8001896 <BaseSystem_RuntrayMode+0x1ce>
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <BaseSystem_RuntrayMode+0x1e0>)
 8001826:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800182a:	2b00      	cmp	r3, #0
 800182c:	d133      	bne.n	8001896 <BaseSystem_RuntrayMode+0x1ce>
				{
					RunTrayState = Place;
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <BaseSystem_RuntrayMode+0x1dc>)
 8001830:	2204      	movs	r2, #4
 8001832:	701a      	strb	r2, [r3, #0]
					PlaceDelay = 0;
 8001834:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <BaseSystem_RuntrayMode+0x208>)
 8001836:	2200      	movs	r2, #0
 8001838:	801a      	strh	r2, [r3, #0]
					i++;
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <BaseSystem_RuntrayMode+0x1ec>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <BaseSystem_RuntrayMode+0x1ec>)
 8001844:	701a      	strb	r2, [r3, #0]
				}
			break;
 8001846:	e026      	b.n	8001896 <BaseSystem_RuntrayMode+0x1ce>
			case Place:
				eff_write(place_cmd);
 8001848:	4822      	ldr	r0, [pc, #136]	; (80018d4 <BaseSystem_RuntrayMode+0x20c>)
 800184a:	f000 fab3 	bl	8001db4 <eff_write>
				PlaceDelay++;
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <BaseSystem_RuntrayMode+0x208>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <BaseSystem_RuntrayMode+0x208>)
 8001858:	801a      	strh	r2, [r3, #0]

				if (PlaceDelay >= 2000)
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <BaseSystem_RuntrayMode+0x208>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001862:	d31a      	bcc.n	800189a <BaseSystem_RuntrayMode+0x1d2>
				{
					RunTrayState = GoPick;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <BaseSystem_RuntrayMode+0x1dc>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
					if(i >= 9)
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <BaseSystem_RuntrayMode+0x1ec>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b08      	cmp	r3, #8
 8001870:	d913      	bls.n	800189a <BaseSystem_RuntrayMode+0x1d2>
					{
						RunTrayState = HolesCalculate;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <BaseSystem_RuntrayMode+0x1dc>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
						eff_write(exitRun_cmd);
 8001878:	4817      	ldr	r0, [pc, #92]	; (80018d8 <BaseSystem_RuntrayMode+0x210>)
 800187a:	f000 fa9b 	bl	8001db4 <eff_write>
						RunTrayFlag = 0;
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <BaseSystem_RuntrayMode+0x1d8>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
					}
				}
			break;
 8001884:	e009      	b.n	800189a <BaseSystem_RuntrayMode+0x1d2>
			}
	}
 8001886:	bf00      	nop
 8001888:	e008      	b.n	800189c <BaseSystem_RuntrayMode+0x1d4>
			break;
 800188a:	bf00      	nop
 800188c:	e006      	b.n	800189c <BaseSystem_RuntrayMode+0x1d4>
			break;
 800188e:	bf00      	nop
 8001890:	e004      	b.n	800189c <BaseSystem_RuntrayMode+0x1d4>
			break;
 8001892:	bf00      	nop
 8001894:	e002      	b.n	800189c <BaseSystem_RuntrayMode+0x1d4>
			break;
 8001896:	bf00      	nop
 8001898:	e000      	b.n	800189c <BaseSystem_RuntrayMode+0x1d4>
			break;
 800189a:	bf00      	nop
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000f77 	.word	0x20000f77
 80018a4:	200002f4 	.word	0x200002f4
 80018a8:	20000ee8 	.word	0x20000ee8
 80018ac:	20000a0c 	.word	0x20000a0c
 80018b0:	20000228 	.word	0x20000228
 80018b4:	200002f5 	.word	0x200002f5
 80018b8:	20000964 	.word	0x20000964
 80018bc:	20000870 	.word	0x20000870
 80018c0:	200008a8 	.word	0x200008a8
 80018c4:	200002f6 	.word	0x200002f6
 80018c8:	20000230 	.word	0x20000230
 80018cc:	200009c4 	.word	0x200009c4
 80018d0:	200002f8 	.word	0x200002f8
 80018d4:	20000234 	.word	0x20000234
 80018d8:	2000022c 	.word	0x2000022c

080018dc <PositionControlVelocityForm>:
float first_error = 0;
float second_error = 0;
float third_error = 0;

void PositionControlVelocityForm(PID* controller)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	first_error = q_des - QEIData.position;
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <PositionControlVelocityForm+0xac>)
 80018e6:	ed93 7a00 	vldr	s14, [r3]
 80018ea:	4b28      	ldr	r3, [pc, #160]	; (800198c <PositionControlVelocityForm+0xb0>)
 80018ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <PositionControlVelocityForm+0xb4>)
 80018f6:	edc3 7a00 	vstr	s15, [r3]

	float kp_position = controller->Kp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	617b      	str	r3, [r7, #20]
	float ki_position = controller->Ki;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
	float kd_position = controller->Kd;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	60fb      	str	r3, [r7, #12]

	PulseWidthModulation += ((kp_position + ki_position + kd_position) * first_error) - ((kp_position + (2 * kd_position)) * second_error) + (kd_position * third_error);
 800190c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001910:	edd7 7a04 	vldr	s15, [r7, #16]
 8001914:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001918:	edd7 7a03 	vldr	s15, [r7, #12]
 800191c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <PositionControlVelocityForm+0xb4>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	ee27 7a27 	vmul.f32	s14, s14, s15
 800192a:	edd7 7a03 	vldr	s15, [r7, #12]
 800192e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001932:	edd7 7a05 	vldr	s15, [r7, #20]
 8001936:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <PositionControlVelocityForm+0xb8>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001944:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <PositionControlVelocityForm+0xbc>)
 800194a:	edd3 6a00 	vldr	s13, [r3]
 800194e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001952:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <PositionControlVelocityForm+0xc0>)
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <PositionControlVelocityForm+0xc0>)
 8001966:	edc3 7a00 	vstr	s15, [r3]

	third_error = second_error;
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <PositionControlVelocityForm+0xb8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <PositionControlVelocityForm+0xbc>)
 8001970:	6013      	str	r3, [r2, #0]
	second_error = first_error;
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <PositionControlVelocityForm+0xb4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <PositionControlVelocityForm+0xb8>)
 8001978:	6013      	str	r3, [r2, #0]
}
 800197a:	bf00      	nop
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000858 	.word	0x20000858
 800198c:	20000888 	.word	0x20000888
 8001990:	200002fc 	.word	0x200002fc
 8001994:	20000300 	.word	0x20000300
 8001998:	20000304 	.word	0x20000304
 800199c:	200008a4 	.word	0x200008a4

080019a0 <eff_st>:
#include "Effstatus.h"
#include "main.h"

extern u16u8_t registerFrame[70];

void eff_st(){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
	//if placing  (bit10==10) => bit3 = 1
	//if picking  (bit10==01) => bit2 = 1
	//if runMode  (bit2==1)   => bit1 = 1
	//if testMode (bit3==1)   => bit0 = 1

	uint8_t effstatus = eff_read();
 80019a6:	f000 fa15 	bl	8001dd4 <eff_read>
 80019aa:	4603      	mov	r3, r0
 80019ac:	717b      	strb	r3, [r7, #5]
	uint16_t effst_mb = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	80fb      	strh	r3, [r7, #6]
	//check placing
	if((effstatus & 0b00000011) == 0b00000010){effst_mb = effst_mb | 0b0000000000001000;}
 80019b2:	797b      	ldrb	r3, [r7, #5]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d104      	bne.n	80019c6 <eff_st+0x26>
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	f043 0308 	orr.w	r3, r3, #8
 80019c2:	80fb      	strh	r3, [r7, #6]
 80019c4:	e003      	b.n	80019ce <eff_st+0x2e>
	else									  {effst_mb = effst_mb & 0b1111111111110111;}
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	f023 0308 	bic.w	r3, r3, #8
 80019cc:	80fb      	strh	r3, [r7, #6]
	//check picking
	if((effstatus & 0b00000011) == 0b00000001){effst_mb = effst_mb | 0b0000000000000100;}
 80019ce:	797b      	ldrb	r3, [r7, #5]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d104      	bne.n	80019e2 <eff_st+0x42>
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	80fb      	strh	r3, [r7, #6]
 80019e0:	e003      	b.n	80019ea <eff_st+0x4a>
	else									  {effst_mb = effst_mb & 0b1111111111111011;}
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	80fb      	strh	r3, [r7, #6]
	//check runmode
	if((effstatus & 0b00000100) == 0b00000100){effst_mb = effst_mb | 0b0000000000000010;}
 80019ea:	797b      	ldrb	r3, [r7, #5]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <eff_st+0x5c>
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	80fb      	strh	r3, [r7, #6]
	if((effstatus & 0b00000100) == 0b00000000){effst_mb = effst_mb | 0b1111111111111101;}
 80019fc:	797b      	ldrb	r3, [r7, #5]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d103      	bne.n	8001a0e <eff_st+0x6e>
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	f063 0302 	orn	r3, r3, #2
 8001a0c:	80fb      	strh	r3, [r7, #6]
	//check testmode
	if((effstatus & 0b00001000) == 0b00001000){effst_mb = effst_mb | 0b0000000000000001;}
 8001a0e:	797b      	ldrb	r3, [r7, #5]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <eff_st+0x80>
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	80fb      	strh	r3, [r7, #6]
	if((effstatus & 0b00001000) == 0b00000000){effst_mb = effst_mb | 0b1111111111111110;}
 8001a20:	797b      	ldrb	r3, [r7, #5]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d103      	bne.n	8001a32 <eff_st+0x92>
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	f063 0301 	orn	r3, r3, #1
 8001a30:	80fb      	strh	r3, [r7, #6]

	registerFrame[2].U16 = effst_mb; //Ya 22881
 8001a32:	4a03      	ldr	r2, [pc, #12]	; (8001a40 <eff_st+0xa0>)
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	8093      	strh	r3, [r2, #4]
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000ee8 	.word	0x20000ee8
 8001a44:	00000000 	.word	0x00000000

08001a48 <micros>:

uint16_t res = 8192;      	  // Resolution [pulse/revolution]
float pulley_dia = 30.558;	  // mm

uint64_t micros(TIM_HandleTypeDef* Timer_tim)
{
 8001a48:	b5b0      	push	{r4, r5, r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(Timer_tim)*0.01 + _micros;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd00 	bl	800045c <__aeabi_ui2d>
 8001a5c:	a313      	add	r3, pc, #76	; (adr r3, 8001aac <micros+0x64>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fd75 	bl	8000550 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4614      	mov	r4, r2
 8001a6c:	461d      	mov	r5, r3
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <micros+0x60>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7fe fd34 	bl	80004e4 <__aeabi_ul2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4620      	mov	r0, r4
 8001a82:	4629      	mov	r1, r5
 8001a84:	f7fe fbae 	bl	80001e4 <__adddf3>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f7ff f984 	bl	8000d9c <__aeabi_d2ulz>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
}
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	20000880 	.word	0x20000880
 8001aac:	47ae147b 	.word	0x47ae147b
 8001ab0:	3f847ae1 	.word	0x3f847ae1
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* Timer_tim)
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
	QEIData.timestamp[0] = micros(Timer_tim);
 8001ac2:	6838      	ldr	r0, [r7, #0]
 8001ac4:	f7ff ffc0 	bl	8001a48 <micros>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4b76      	ldr	r3, [pc, #472]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001ace:	609a      	str	r2, [r3, #8]
	uint32_t lastposition = __HAL_TIM_GET_COUNTER(Encoder_tim);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	613b      	str	r3, [r7, #16]
	QEIData.pos[0] = lastposition;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	b21a      	sxth	r2, r3
 8001adc:	4b72      	ldr	r3, [pc, #456]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001ade:	801a      	strh	r2, [r3, #0]
//	{
//		QEIData.pos[0] = lastposition - QEI_PERIOD - 1;
//	}

	// position calculation
	QEIData.position = QEIData.pos[0] * PI *  pulley_dia/res;
 8001ae0:	4b71      	ldr	r3, [pc, #452]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aee:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001cac <QEIEncoderPositionVelocity_Update+0x1f4>
 8001af2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001af6:	4b6e      	ldr	r3, [pc, #440]	; (8001cb0 <QEIEncoderPositionVelocity_Update+0x1f8>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b00:	4b6c      	ldr	r3, [pc, #432]	; (8001cb4 <QEIEncoderPositionVelocity_Update+0x1fc>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b10:	4b65      	ldr	r3, [pc, #404]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001b12:	edc3 7a04 	vstr	s15, [r3, #16]

	int32_t diffPosition = QEIData.pos[0] - QEIData.pos[1];
 8001b16:	4b64      	ldr	r3, [pc, #400]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b62      	ldr	r3, [pc, #392]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001b20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	617b      	str	r3, [r7, #20]
	float diffTime = QEIData.timestamp[0] - QEIData.timestamp[1];
 8001b28:	4b5f      	ldr	r3, [pc, #380]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3a:	edc7 7a03 	vstr	s15, [r7, #12]

	// unwrap
	if (diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b44:	dd03      	ble.n	8001b4e <QEIEncoderPositionVelocity_Update+0x96>
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001b4c:	617b      	str	r3, [r7, #20]
	if (diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001b54:	da03      	bge.n	8001b5e <QEIEncoderPositionVelocity_Update+0xa6>
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001b5c:	617b      	str	r3, [r7, #20]

	// velocity calculation
	QEIData.velocity = (diffPosition * 1000000.0 * PI * pulley_dia)/(res * diffTime);
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7fe fc8c 	bl	800047c <__aeabi_i2d>
 8001b64:	a34c      	add	r3, pc, #304	; (adr r3, 8001c98 <QEIEncoderPositionVelocity_Update+0x1e0>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fcf1 	bl	8000550 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	a34a      	add	r3, pc, #296	; (adr r3, 8001ca0 <QEIEncoderPositionVelocity_Update+0x1e8>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	f7fe fce8 	bl	8000550 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4614      	mov	r4, r2
 8001b86:	461d      	mov	r5, r3
 8001b88:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <QEIEncoderPositionVelocity_Update+0x1f8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fc87 	bl	80004a0 <__aeabi_f2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4620      	mov	r0, r4
 8001b98:	4629      	mov	r1, r5
 8001b9a:	f7fe fcd9 	bl	8000550 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4614      	mov	r4, r2
 8001ba4:	461d      	mov	r5, r3
 8001ba6:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <QEIEncoderPositionVelocity_Update+0x1fc>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bba:	ee17 0a90 	vmov	r0, s15
 8001bbe:	f7fe fc6f 	bl	80004a0 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f7fe fdeb 	bl	80007a4 <__aeabi_ddiv>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe ff6b 	bl	8000ab0 <__aeabi_d2f>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a32      	ldr	r2, [pc, #200]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001bde:	6153      	str	r3, [r2, #20]
	QEIData.vel[0] = QEIData.velocity;
 8001be0:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001be2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bea:	ee17 3a90 	vmov	r3, s15
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001bf2:	809a      	strh	r2, [r3, #4]
	QEIData.accelaration = (QEIData.vel[0] - QEIData.vel[1])/diffTime;
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001bf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001bfe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001c16:	edc3 7a06 	vstr	s15, [r3, #24]

	QEIData.pos[1] = QEIData.pos[0];
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001c1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001c22:	805a      	strh	r2, [r3, #2]
	QEIData.vel[1] = QEIData.vel[0];
 8001c24:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001c26:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001c2c:	80da      	strh	r2, [r3, #6]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001c34:	60d3      	str	r3, [r2, #12]

	registerFrame[17].U16 = (int)(QEIData.position*10);
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001c38:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c50:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = (int)(QEIData.velocity*10);
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001c54:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c64:	ee17 3a90 	vmov	r3, s15
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c6c:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = (int)(QEIData.accelaration*10);
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001c70:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c74:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c80:	ee17 3a90 	vmov	r3, s15
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c88:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bdb0      	pop	{r4, r5, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	f3af 8000 	nop.w
 8001c98:	00000000 	.word	0x00000000
 8001c9c:	412e8480 	.word	0x412e8480
 8001ca0:	60000000 	.word	0x60000000
 8001ca4:	400921fb 	.word	0x400921fb
 8001ca8:	20000888 	.word	0x20000888
 8001cac:	40490fdb 	.word	0x40490fdb
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000ee8 	.word	0x20000ee8

08001cbc <HAL_GPIO_EXTI_Callback>:
		}
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0){
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ccc:	d123      	bne.n	8001d16 <HAL_GPIO_EXTI_Callback+0x5a>
 8001cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd2:	481c      	ldr	r0, [pc, #112]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x88>)
 8001cd4:	f004 f99c 	bl	8006010 <HAL_GPIO_ReadPin>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d11b      	bne.n	8001d16 <HAL_GPIO_EXTI_Callback+0x5a>
		emer_pushed = 0;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cea:	4816      	ldr	r0, [pc, #88]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x88>)
 8001cec:	f004 f9a8 	bl	8006040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf6:	4813      	ldr	r0, [pc, #76]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x88>)
 8001cf8:	f004 f9a2 	bl	8006040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d02:	4810      	ldr	r0, [pc, #64]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x88>)
 8001d04:	f004 f99c 	bl	8006040 <HAL_GPIO_WritePin>
		eff_write(emerMode_cmd);
 8001d08:	4810      	ldr	r0, [pc, #64]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x90>)
 8001d0a:	f000 f853 	bl	8001db4 <eff_write>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x94>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2200      	movs	r2, #0
 8001d14:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1c:	d10d      	bne.n	8001d3a <HAL_GPIO_EXTI_Callback+0x7e>
 8001d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d22:	4808      	ldr	r0, [pc, #32]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x88>)
 8001d24:	f004 f974 	bl	8006010 <HAL_GPIO_ReadPin>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d105      	bne.n	8001d3a <HAL_GPIO_EXTI_Callback+0x7e>
		eff_write(exitEmer_cmd);
 8001d2e:	4809      	ldr	r0, [pc, #36]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x98>)
 8001d30:	f000 f840 	bl	8001db4 <eff_write>
		emer_pushed = 1;
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
	}
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40020400 	.word	0x40020400
 8001d48:	20000239 	.word	0x20000239
 8001d4c:	20000218 	.word	0x20000218
 8001d50:	200004a0 	.word	0x200004a0
 8001d54:	2000021c 	.word	0x2000021c

08001d58 <check_pe>:

void check_pe()
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	if(emer_pushed == 1)
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <check_pe+0x44>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d118      	bne.n	8001d96 <check_pe+0x3e>
	{
		pe1_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8001d64:	2102      	movs	r1, #2
 8001d66:	480e      	ldr	r0, [pc, #56]	; (8001da0 <check_pe+0x48>)
 8001d68:	f004 f952 	bl	8006010 <HAL_GPIO_ReadPin>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <check_pe+0x4c>)
 8001d72:	701a      	strb	r2, [r3, #0]
		pe2_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8001d74:	2104      	movs	r1, #4
 8001d76:	480a      	ldr	r0, [pc, #40]	; (8001da0 <check_pe+0x48>)
 8001d78:	f004 f94a 	bl	8006010 <HAL_GPIO_ReadPin>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <check_pe+0x50>)
 8001d82:	701a      	strb	r2, [r3, #0]
		pe3_st = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001d84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d88:	4808      	ldr	r0, [pc, #32]	; (8001dac <check_pe+0x54>)
 8001d8a:	f004 f941 	bl	8006010 <HAL_GPIO_ReadPin>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <check_pe+0x58>)
 8001d94:	701a      	strb	r2, [r3, #0]
	}
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000239 	.word	0x20000239
 8001da0:	40020400 	.word	0x40020400
 8001da4:	200008bd 	.word	0x200008bd
 8001da8:	200008be 	.word	0x200008be
 8001dac:	40020000 	.word	0x40020000
 8001db0:	200008bf 	.word	0x200008bf

08001db4 <eff_write>:
		}

	}
}

void eff_write(uint8_t* cmd2){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x15 << 1, cmd2, 4);
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	212a      	movs	r1, #42	; 0x2a
 8001dc2:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <eff_write+0x1c>)
 8001dc4:	f004 fab2 	bl	800632c <HAL_I2C_Master_Transmit_IT>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200003ec 	.word	0x200003ec

08001dd4 <eff_read>:

uint8_t eff_read(){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, effstatus, 1);
 8001dd8:	2301      	movs	r3, #1
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <eff_read+0x18>)
 8001ddc:	212a      	movs	r1, #42	; 0x2a
 8001dde:	4804      	ldr	r0, [pc, #16]	; (8001df0 <eff_read+0x1c>)
 8001de0:	f004 fb4a 	bl	8006478 <HAL_I2C_Master_Receive_IT>
}
 8001de4:	bf00      	nop
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200008bc 	.word	0x200008bc
 8001df0:	200003ec 	.word	0x200003ec

08001df4 <MotorDrive>:
float Pcenter = 0;
float Ncenter = 0;
float Temp_pos = 0;

void MotorDrive(TIM_HandleTypeDef* PWM_tim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	if(emer_pushed == 1){
 8001dfc:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <MotorDrive+0xf0>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d16a      	bne.n	8001eda <MotorDrive+0xe6>
		if (PulseWidthModulation >= 0)
 8001e04:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <MotorDrive+0xf4>)
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e12:	db29      	blt.n	8001e68 <MotorDrive+0x74>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e14:	2201      	movs	r2, #1
 8001e16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e1a:	4834      	ldr	r0, [pc, #208]	; (8001eec <MotorDrive+0xf8>)
 8001e1c:	f004 f910 	bl	8006040 <HAL_GPIO_WritePin>
			N_disallow = 0;
 8001e20:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <MotorDrive+0xfc>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation > 8000)
 8001e26:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <MotorDrive+0xf4>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001ef4 <MotorDrive+0x100>
 8001e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	dd02      	ble.n	8001e40 <MotorDrive+0x4c>
			{
				PulseWidthModulation = 8000;
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <MotorDrive+0xf4>)
 8001e3c:	4a2e      	ldr	r2, [pc, #184]	; (8001ef8 <MotorDrive+0x104>)
 8001e3e:	601a      	str	r2, [r3, #0]
			}

			if ((pe2_st && (SetHomeYFlag == 0)) || P_disallow)
 8001e40:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <MotorDrive+0x108>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <MotorDrive+0x5c>
 8001e48:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <MotorDrive+0x10c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <MotorDrive+0x64>
 8001e50:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <MotorDrive+0x110>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d030      	beq.n	8001eba <MotorDrive+0xc6>
			{
				__HAL_TIM_SET_COMPARE(PWM_tim,TIM_CHANNEL_1,0);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34
				P_disallow = 1;
 8001e60:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <MotorDrive+0x110>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	e028      	b.n	8001eba <MotorDrive+0xc6>
			}
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e6e:	481f      	ldr	r0, [pc, #124]	; (8001eec <MotorDrive+0xf8>)
 8001e70:	f004 f8e6 	bl	8006040 <HAL_GPIO_WritePin>
			P_disallow = 0;
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <MotorDrive+0x110>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation < -8000)
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <MotorDrive+0xf4>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001f08 <MotorDrive+0x114>
 8001e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	d502      	bpl.n	8001e94 <MotorDrive+0xa0>
			{
				PulseWidthModulation = -8000;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MotorDrive+0xf4>)
 8001e90:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <MotorDrive+0x118>)
 8001e92:	601a      	str	r2, [r3, #0]
			}

			if ((pe3_st && (SetHomeYFlag == 0)) || N_disallow)
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <MotorDrive+0x11c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <MotorDrive+0xb0>
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <MotorDrive+0x10c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <MotorDrive+0xb8>
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <MotorDrive+0xfc>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <MotorDrive+0xc6>
			{
				__HAL_TIM_SET_COMPARE(PWM_tim,TIM_CHANNEL_1,0);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	635a      	str	r2, [r3, #52]	; 0x34
				N_disallow = 1;
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MotorDrive+0xfc>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
			}
		}

		__HAL_TIM_SET_COMPARE(PWM_tim, TIM_CHANNEL_1, fabs(PulseWidthModulation*5));
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MotorDrive+0xf4>)
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec8:	eef0 7ae7 	vabs.f32	s15, s15
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed4:	ee17 2a90 	vmov	r2, s15
 8001ed8:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000239 	.word	0x20000239
 8001ee8:	200008a4 	.word	0x200008a4
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	200008b9 	.word	0x200008b9
 8001ef4:	45fa0000 	.word	0x45fa0000
 8001ef8:	45fa0000 	.word	0x45fa0000
 8001efc:	200008be 	.word	0x200008be
 8001f00:	20000211 	.word	0x20000211
 8001f04:	200008b8 	.word	0x200008b8
 8001f08:	c5fa0000 	.word	0xc5fa0000
 8001f0c:	c5fa0000 	.word	0xc5fa0000
 8001f10:	200008bf 	.word	0x200008bf
 8001f14:	00000000 	.word	0x00000000

08001f18 <SetHome>:

void SetHome(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* PWM_tim)
{
 8001f18:	b5b0      	push	{r4, r5, r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
	static enum {Jog, Overcenter, PCenter, UnderCenter, NCenter, Center,  Recenter, Setcenter} SetHomeState = Jog;

	if (SetHomeYFlag)
 8001f22:	4b8d      	ldr	r3, [pc, #564]	; (8002158 <SetHome+0x240>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 810e 	beq.w	8002148 <SetHome+0x230>
	{
		switch (SetHomeState)
 8001f2c:	4b8b      	ldr	r3, [pc, #556]	; (800215c <SetHome+0x244>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b07      	cmp	r3, #7
 8001f32:	f200 8106 	bhi.w	8002142 <SetHome+0x22a>
 8001f36:	a201      	add	r2, pc, #4	; (adr r2, 8001f3c <SetHome+0x24>)
 8001f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3c:	08001f5d 	.word	0x08001f5d
 8001f40:	08001fb9 	.word	0x08001fb9
 8001f44:	08001fdd 	.word	0x08001fdd
 8001f48:	08002011 	.word	0x08002011
 8001f4c:	08002037 	.word	0x08002037
 8001f50:	08002055 	.word	0x08002055
 8001f54:	08002115 	.word	0x08002115
 8001f58:	080020f3 	.word	0x080020f3
		{
		case Jog:
			Pcenter = 0;
 8001f5c:	4b80      	ldr	r3, [pc, #512]	; (8002160 <SetHome+0x248>)
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
			Ncenter = 0;
 8001f64:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <SetHome+0x24c>)
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
			Temp_pos = 0;
 8001f6c:	4b7e      	ldr	r3, [pc, #504]	; (8002168 <SetHome+0x250>)
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
			PulseWidthModulation = 3000;
 8001f74:	4b7d      	ldr	r3, [pc, #500]	; (800216c <SetHome+0x254>)
 8001f76:	4a7e      	ldr	r2, [pc, #504]	; (8002170 <SetHome+0x258>)
 8001f78:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f80:	487c      	ldr	r0, [pc, #496]	; (8002174 <SetHome+0x25c>)
 8001f82:	f004 f85d 	bl	8006040 <HAL_GPIO_WritePin>

			if (pe1_st)
 8001f86:	4b7c      	ldr	r3, [pc, #496]	; (8002178 <SetHome+0x260>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <SetHome+0x86>
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2200      	movs	r2, #0
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Overcenter;
 8001f96:	4b71      	ldr	r3, [pc, #452]	; (800215c <SetHome+0x244>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
			else if (pe2_st)
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
				SetHomeState = Recenter;
			}
			break;
 8001f9c:	e0cc      	b.n	8002138 <SetHome+0x220>
			else if (pe2_st)
 8001f9e:	4b77      	ldr	r3, [pc, #476]	; (800217c <SetHome+0x264>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80c8 	beq.w	8002138 <SetHome+0x220>
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2200      	movs	r2, #0
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Recenter;
 8001fb0:	4b6a      	ldr	r3, [pc, #424]	; (800215c <SetHome+0x244>)
 8001fb2:	2206      	movs	r2, #6
 8001fb4:	701a      	strb	r2, [r3, #0]
			break;
 8001fb6:	e0bf      	b.n	8002138 <SetHome+0x220>
		case Overcenter:
			PulseWidthModulation = 3000;
 8001fb8:	4b6c      	ldr	r3, [pc, #432]	; (800216c <SetHome+0x254>)
 8001fba:	4a6d      	ldr	r2, [pc, #436]	; (8002170 <SetHome+0x258>)
 8001fbc:	601a      	str	r2, [r3, #0]

			if (QEIData.position >= 30)
 8001fbe:	4b70      	ldr	r3, [pc, #448]	; (8002180 <SetHome+0x268>)
 8001fc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fc4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd0:	da00      	bge.n	8001fd4 <SetHome+0xbc>
			{
				SetHomeState = PCenter;
			}
			break;
 8001fd2:	e0b6      	b.n	8002142 <SetHome+0x22a>
				SetHomeState = PCenter;
 8001fd4:	4b61      	ldr	r3, [pc, #388]	; (800215c <SetHome+0x244>)
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	701a      	strb	r2, [r3, #0]
			break;
 8001fda:	e0b2      	b.n	8002142 <SetHome+0x22a>
		case PCenter:
			PulseWidthModulation = -2500;
 8001fdc:	4b63      	ldr	r3, [pc, #396]	; (800216c <SetHome+0x254>)
 8001fde:	4a69      	ldr	r2, [pc, #420]	; (8002184 <SetHome+0x26c>)
 8001fe0:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 8001fe2:	4b65      	ldr	r3, [pc, #404]	; (8002178 <SetHome+0x260>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80a8 	beq.w	800213c <SetHome+0x224>
			{
				Pcenter = QEIData.position;
 8001fec:	4b64      	ldr	r3, [pc, #400]	; (8002180 <SetHome+0x268>)
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	4a5b      	ldr	r2, [pc, #364]	; (8002160 <SetHome+0x248>)
 8001ff2:	6013      	str	r3, [r2, #0]
				Temp_pos = Pcenter - 30;
 8001ff4:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <SetHome+0x248>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001ffe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002002:	4b59      	ldr	r3, [pc, #356]	; (8002168 <SetHome+0x250>)
 8002004:	edc3 7a00 	vstr	s15, [r3]
				SetHomeState = UnderCenter;
 8002008:	4b54      	ldr	r3, [pc, #336]	; (800215c <SetHome+0x244>)
 800200a:	2203      	movs	r2, #3
 800200c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800200e:	e095      	b.n	800213c <SetHome+0x224>
		case UnderCenter:
			PulseWidthModulation = -3000;
 8002010:	4b56      	ldr	r3, [pc, #344]	; (800216c <SetHome+0x254>)
 8002012:	4a5d      	ldr	r2, [pc, #372]	; (8002188 <SetHome+0x270>)
 8002014:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= Temp_pos)
 8002016:	4b5a      	ldr	r3, [pc, #360]	; (8002180 <SetHome+0x268>)
 8002018:	ed93 7a04 	vldr	s14, [r3, #16]
 800201c:	4b52      	ldr	r3, [pc, #328]	; (8002168 <SetHome+0x250>)
 800201e:	edd3 7a00 	vldr	s15, [r3]
 8002022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202a:	d900      	bls.n	800202e <SetHome+0x116>
			{
				SetHomeState = NCenter;
			}
			break;
 800202c:	e089      	b.n	8002142 <SetHome+0x22a>
				SetHomeState = NCenter;
 800202e:	4b4b      	ldr	r3, [pc, #300]	; (800215c <SetHome+0x244>)
 8002030:	2204      	movs	r2, #4
 8002032:	701a      	strb	r2, [r3, #0]
			break;
 8002034:	e085      	b.n	8002142 <SetHome+0x22a>
		case NCenter:
			PulseWidthModulation = 2500;
 8002036:	4b4d      	ldr	r3, [pc, #308]	; (800216c <SetHome+0x254>)
 8002038:	4a54      	ldr	r2, [pc, #336]	; (800218c <SetHome+0x274>)
 800203a:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 800203c:	4b4e      	ldr	r3, [pc, #312]	; (8002178 <SetHome+0x260>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d07d      	beq.n	8002140 <SetHome+0x228>
			{
				Ncenter = QEIData.position;
 8002044:	4b4e      	ldr	r3, [pc, #312]	; (8002180 <SetHome+0x268>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a46      	ldr	r2, [pc, #280]	; (8002164 <SetHome+0x24c>)
 800204a:	6013      	str	r3, [r2, #0]
				SetHomeState = Center;
 800204c:	4b43      	ldr	r3, [pc, #268]	; (800215c <SetHome+0x244>)
 800204e:	2205      	movs	r2, #5
 8002050:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002052:	e075      	b.n	8002140 <SetHome+0x228>
		case Center:
			q_des = ((Pcenter - Ncenter)/2.0) + Ncenter;
 8002054:	4b42      	ldr	r3, [pc, #264]	; (8002160 <SetHome+0x248>)
 8002056:	ed93 7a00 	vldr	s14, [r3]
 800205a:	4b42      	ldr	r3, [pc, #264]	; (8002164 <SetHome+0x24c>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002064:	ee17 0a90 	vmov	r0, s15
 8002068:	f7fe fa1a 	bl	80004a0 <__aeabi_f2d>
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002074:	f7fe fb96 	bl	80007a4 <__aeabi_ddiv>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	4b38      	ldr	r3, [pc, #224]	; (8002164 <SetHome+0x24c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fa0b 	bl	80004a0 <__aeabi_f2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4620      	mov	r0, r4
 8002090:	4629      	mov	r1, r5
 8002092:	f7fe f8a7 	bl	80001e4 <__adddf3>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f7fe fd07 	bl	8000ab0 <__aeabi_d2f>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4a3a      	ldr	r2, [pc, #232]	; (8002190 <SetHome+0x278>)
 80020a6:	6013      	str	r3, [r2, #0]
			PositionControlVelocityForm(&Controller);
 80020a8:	483a      	ldr	r0, [pc, #232]	; (8002194 <SetHome+0x27c>)
 80020aa:	f7ff fc17 	bl	80018dc <PositionControlVelocityForm>

			if (0.03 > fabs(q_des - QEIData.position))
 80020ae:	4b38      	ldr	r3, [pc, #224]	; (8002190 <SetHome+0x278>)
 80020b0:	ed93 7a00 	vldr	s14, [r3]
 80020b4:	4b32      	ldr	r3, [pc, #200]	; (8002180 <SetHome+0x268>)
 80020b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80020ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020be:	eef0 7ae7 	vabs.f32	s15, s15
 80020c2:	ee17 0a90 	vmov	r0, s15
 80020c6:	f7fe f9eb 	bl	80004a0 <__aeabi_f2d>
 80020ca:	a321      	add	r3, pc, #132	; (adr r3, 8002150 <SetHome+0x238>)
 80020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d0:	f7fe fcb0 	bl	8000a34 <__aeabi_dcmplt>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d100      	bne.n	80020dc <SetHome+0x1c4>
			{
				PulseWidthModulation = 0;
				MotorDrive(PWM_tim);
				SetHomeState = Setcenter;
			}
			break;
 80020da:	e032      	b.n	8002142 <SetHome+0x22a>
				PulseWidthModulation = 0;
 80020dc:	4b23      	ldr	r3, [pc, #140]	; (800216c <SetHome+0x254>)
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
				MotorDrive(PWM_tim);
 80020e4:	6838      	ldr	r0, [r7, #0]
 80020e6:	f7ff fe85 	bl	8001df4 <MotorDrive>
				SetHomeState = Setcenter;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <SetHome+0x244>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	701a      	strb	r2, [r3, #0]
			break;
 80020f0:	e027      	b.n	8002142 <SetHome+0x22a>
		case Setcenter:
			__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24
			SetHomeYFlag = 0;
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <SetHome+0x240>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
			SetHomeState = Jog;
 8002100:	4b16      	ldr	r3, [pc, #88]	; (800215c <SetHome+0x244>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800210c:	4819      	ldr	r0, [pc, #100]	; (8002174 <SetHome+0x25c>)
 800210e:	f003 ff97 	bl	8006040 <HAL_GPIO_WritePin>

			break;
 8002112:	e016      	b.n	8002142 <SetHome+0x22a>
		case Recenter:
			PulseWidthModulation = -3000;
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <SetHome+0x254>)
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <SetHome+0x270>)
 8002118:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= -320)
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <SetHome+0x268>)
 800211c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002120:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002198 <SetHome+0x280>
 8002124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212c:	d900      	bls.n	8002130 <SetHome+0x218>
			{
				SetHomeState = PCenter;
			}
			break;
 800212e:	e008      	b.n	8002142 <SetHome+0x22a>
				SetHomeState = PCenter;
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <SetHome+0x244>)
 8002132:	2202      	movs	r2, #2
 8002134:	701a      	strb	r2, [r3, #0]
			break;
 8002136:	e004      	b.n	8002142 <SetHome+0x22a>
			break;
 8002138:	bf00      	nop
 800213a:	e002      	b.n	8002142 <SetHome+0x22a>
			break;
 800213c:	bf00      	nop
 800213e:	e000      	b.n	8002142 <SetHome+0x22a>
			break;
 8002140:	bf00      	nop
		}
		MotorDrive(PWM_tim);
 8002142:	6838      	ldr	r0, [r7, #0]
 8002144:	f7ff fe56 	bl	8001df4 <MotorDrive>
	}


}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bdb0      	pop	{r4, r5, r7, pc}
 8002150:	eb851eb8 	.word	0xeb851eb8
 8002154:	3f9eb851 	.word	0x3f9eb851
 8002158:	20000211 	.word	0x20000211
 800215c:	20000314 	.word	0x20000314
 8002160:	20000308 	.word	0x20000308
 8002164:	2000030c 	.word	0x2000030c
 8002168:	20000310 	.word	0x20000310
 800216c:	200008a4 	.word	0x200008a4
 8002170:	453b8000 	.word	0x453b8000
 8002174:	40020400 	.word	0x40020400
 8002178:	200008bd 	.word	0x200008bd
 800217c:	200008be 	.word	0x200008be
 8002180:	20000888 	.word	0x20000888
 8002184:	c51c4000 	.word	0xc51c4000
 8002188:	c53b8000 	.word	0xc53b8000
 800218c:	451c4000 	.word	0x451c4000
 8002190:	20000858 	.word	0x20000858
 8002194:	200008ac 	.word	0x200008ac
 8002198:	c3a00000 	.word	0xc3a00000

0800219c <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <modbus_1t5_Timeout+0x1c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2201      	movs	r2, #1
 80021aa:	751a      	strb	r2, [r3, #20]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	20000318 	.word	0x20000318

080021bc <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <modbus_3t5_Timeout+0x1c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	755a      	strb	r2, [r3, #21]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	20000318 	.word	0x20000318

080021dc <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <modbus_UART_Recived+0x60>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2201      	movs	r2, #1
 80021ec:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <modbus_UART_Recived+0x60>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80021f6:	1c59      	adds	r1, r3, #1
 80021f8:	b289      	uxth	r1, r1
 80021fa:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80021fe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002202:	d210      	bcs.n	8002226 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <modbus_UART_Recived+0x60>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68d8      	ldr	r0, [r3, #12]
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <modbus_UART_Recived+0x60>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <modbus_UART_Recived+0x60>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002216:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800221a:	4413      	add	r3, r2
 800221c:	3302      	adds	r3, #2
 800221e:	2201      	movs	r2, #1
 8002220:	4619      	mov	r1, r3
 8002222:	f008 f93d 	bl	800a4a0 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <modbus_UART_Recived+0x60>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2200      	movs	r2, #0
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000318 	.word	0x20000318

08002240 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800224a:	4a24      	ldr	r2, [pc, #144]	; (80022dc <Modbus_init+0x9c>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8002250:	4b22      	ldr	r3, [pc, #136]	; (80022dc <Modbus_init+0x9c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <Modbus_init+0x9c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <Modbus_init+0xa0>)
 8002260:	2114      	movs	r1, #20
 8002262:	4618      	mov	r0, r3
 8002264:	f007 face 	bl	8009804 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <Modbus_init+0x9c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <Modbus_init+0xa4>)
 8002270:	210e      	movs	r1, #14
 8002272:	4618      	mov	r0, r3
 8002274:	f007 fac6 	bl	8009804 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <Modbus_init+0x9c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <Modbus_init+0xa8>)
 8002280:	2103      	movs	r1, #3
 8002282:	4618      	mov	r0, r3
 8002284:	f008 f864 	bl	800a350 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <Modbus_init+0x9c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68d8      	ldr	r0, [r3, #12]
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <Modbus_init+0x9c>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <Modbus_init+0x9c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800229a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800229e:	4413      	add	r3, r2
 80022a0:	3302      	adds	r3, #2
 80022a2:	2201      	movs	r2, #1
 80022a4:	4619      	mov	r1, r3
 80022a6:	f008 f8fb 	bl	800a4a0 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <Modbus_init+0x9c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d10c      	bne.n	80022d4 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <Modbus_init+0x9c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f006 fbb1 	bl	8008a28 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <Modbus_init+0x9c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f006 fd88 	bl	8008de4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000318 	.word	0x20000318
 80022e0:	0800219d 	.word	0x0800219d
 80022e4:	080021bd 	.word	0x080021bd
 80022e8:	080021dd 	.word	0x080021dd

080022ec <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80022f8:	23ff      	movs	r3, #255	; 0xff
 80022fa:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80022fc:	23ff      	movs	r3, #255	; 0xff
 80022fe:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8002300:	e013      	b.n	800232a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	781a      	ldrb	r2, [r3, #0]
 800230a:	7bbb      	ldrb	r3, [r7, #14]
 800230c:	4053      	eors	r3, r2
 800230e:	b2db      	uxtb	r3, r3
 8002310:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8002312:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <CRC16+0x64>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4413      	add	r3, r2
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	4053      	eors	r3, r2
 800231e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8002320:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <CRC16+0x68>)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800232a:	883b      	ldrh	r3, [r7, #0]
 800232c:	1e5a      	subs	r2, r3, #1
 800232e:	803a      	strh	r2, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e6      	bne.n	8002302 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	b21a      	sxth	r2, r3
 800233a:	7bbb      	ldrb	r3, [r7, #14]
 800233c:	b21b      	sxth	r3, r3
 800233e:	4313      	orrs	r3, r2
 8002340:	b21b      	sxth	r3, r3
 8002342:	b29b      	uxth	r3, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	20000108 	.word	0x20000108
 8002354:	20000008 	.word	0x20000008

08002358 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800235e:	4b81      	ldr	r3, [pc, #516]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	7e1b      	ldrb	r3, [r3, #24]
 8002364:	3b01      	subs	r3, #1
 8002366:	2b03      	cmp	r3, #3
 8002368:	d80a      	bhi.n	8002380 <Modbus_Protocal_Worker+0x28>
 800236a:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <Modbus_Protocal_Worker+0x18>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	0800238b 	.word	0x0800238b
 8002374:	0800252b 	.word	0x0800252b
 8002378:	08002417 	.word	0x08002417
 800237c:	0800243d 	.word	0x0800243d
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002380:	4b78      	ldr	r3, [pc, #480]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	761a      	strb	r2, [r3, #24]
		break;
 8002388:	e0e8      	b.n	800255c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800238a:	4b76      	ldr	r3, [pc, #472]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8002396:	f000 f9d7 	bl	8002748 <Modbus_Emission>
 800239a:	e01c      	b.n	80023d6 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 800239c:	4b71      	ldr	r3, [pc, #452]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	7d9b      	ldrb	r3, [r3, #22]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d017      	beq.n	80023d6 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80023a6:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2200      	movs	r2, #0
 80023ac:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80023ae:	4b6d      	ldr	r3, [pc, #436]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2200      	movs	r2, #0
 80023b4:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80023b6:	4b6b      	ldr	r3, [pc, #428]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b68      	ldr	r3, [pc, #416]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80023ce:	4b65      	ldr	r3, [pc, #404]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2203      	movs	r2, #3
 80023d4:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80023d6:	4b63      	ldr	r3, [pc, #396]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	f040 80b3 	bne.w	800254e <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80023e8:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80023f2:	4b5c      	ldr	r3, [pc, #368]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68d8      	ldr	r0, [r3, #12]
 80023f8:	4b5a      	ldr	r3, [pc, #360]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b59      	ldr	r3, [pc, #356]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002404:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8002408:	4413      	add	r3, r2
 800240a:	3302      	adds	r3, #2
 800240c:	2201      	movs	r2, #1
 800240e:	4619      	mov	r1, r3
 8002410:	f008 f846 	bl	800a4a0 <HAL_UART_Receive_IT>
		}
		break;
 8002414:	e09b      	b.n	800254e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8002416:	4b53      	ldr	r3, [pc, #332]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	7d1b      	ldrb	r3, [r3, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8098 	beq.w	8002552 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8002422:	4b50      	ldr	r3, [pc, #320]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2200      	movs	r2, #0
 8002428:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800242a:	4b4e      	ldr	r3, [pc, #312]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	22fe      	movs	r2, #254	; 0xfe
 8002430:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002432:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2204      	movs	r2, #4
 8002438:	761a      	strb	r2, [r3, #24]
		}
		break;
 800243a:	e08a      	b.n	8002552 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 800243c:	4b49      	ldr	r3, [pc, #292]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	7d9b      	ldrb	r3, [r3, #22]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002452:	4b44      	ldr	r3, [pc, #272]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	22ff      	movs	r2, #255	; 0xff
 8002458:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800245a:	4b42      	ldr	r3, [pc, #264]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002462:	f113 0f02 	cmn.w	r3, #2
 8002466:	d150      	bne.n	800250a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002468:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2200      	movs	r2, #0
 800246e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002470:	4b3c      	ldr	r3, [pc, #240]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f203 2272 	addw	r2, r3, #626	; 0x272
 8002478:	4b3a      	ldr	r3, [pc, #232]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002480:	3b02      	subs	r3, #2
 8002482:	4619      	mov	r1, r3
 8002484:	4610      	mov	r0, r2
 8002486:	f7ff ff31 	bl	80022ec <CRC16>
 800248a:	4603      	mov	r3, r0
 800248c:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800248e:	793a      	ldrb	r2, [r7, #4]
 8002490:	4b34      	ldr	r3, [pc, #208]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 8002492:	6819      	ldr	r1, [r3, #0]
 8002494:	4b33      	ldr	r3, [pc, #204]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800249c:	3b02      	subs	r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d10c      	bne.n	80024c2 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80024a8:	797a      	ldrb	r2, [r7, #5]
 80024aa:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80024b6:	3b01      	subs	r3, #1
 80024b8:	440b      	add	r3, r1
 80024ba:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d004      	beq.n	80024cc <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80024c2:	4b28      	ldr	r3, [pc, #160]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	22ff      	movs	r2, #255	; 0xff
 80024c8:	75da      	strb	r2, [r3, #23]
				break;
 80024ca:	e047      	b.n	800255c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80024d4:	4b23      	ldr	r3, [pc, #140]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d113      	bne.n	8002506 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80024ee:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80024f0:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80024f8:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80024fa:	461a      	mov	r2, r3
 80024fc:	f009 f992 	bl	800b824 <memcpy>

			//execute command
			Modbus_frame_response();
 8002500:	f000 f90a 	bl	8002718 <Modbus_frame_response>
 8002504:	e001      	b.n	800250a <Modbus_Protocal_Worker+0x1b2>
				break;
 8002506:	bf00      	nop
					}
		break;


	}
}
 8002508:	e028      	b.n	800255c <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	7d5b      	ldrb	r3, [r3, #21]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	4618      	mov	r0, r3
 8002524:	f008 f86a 	bl	800a5fc <HAL_UART_AbortReceive>
		break;
 8002528:	e015      	b.n	8002556 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b20      	cmp	r3, #32
 8002538:	d10f      	bne.n	800255a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <Modbus_Protocal_Worker+0x20c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2201      	movs	r2, #1
 800254a:	761a      	strb	r2, [r3, #24]
		break;
 800254c:	e005      	b.n	800255a <Modbus_Protocal_Worker+0x202>
		break;
 800254e:	bf00      	nop
 8002550:	e004      	b.n	800255c <Modbus_Protocal_Worker+0x204>
		break;
 8002552:	bf00      	nop
 8002554:	e002      	b.n	800255c <Modbus_Protocal_Worker+0x204>
		break;
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <Modbus_Protocal_Worker+0x204>
		break;
 800255a:	bf00      	nop
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000318 	.word	0x20000318

08002568 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <modbusWrite1Register+0x80>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	7e9b      	ldrb	r3, [r3, #26]
 8002574:	b29b      	uxth	r3, r3
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <modbusWrite1Register+0x80>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	7edb      	ldrb	r3, [r3, #27]
 8002580:	b29b      	uxth	r3, r3
 8002582:	4413      	add	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002586:	88fa      	ldrh	r2, [r7, #6]
 8002588:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <modbusWrite1Register+0x80>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	429a      	cmp	r2, r3
 8002590:	d903      	bls.n	800259a <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002592:	2002      	movs	r0, #2
 8002594:	f000 f8a4 	bl	80026e0 <ModbusErrorReply>
			 return;
 8002598:	e023      	b.n	80025e2 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <modbusWrite1Register+0x80>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <modbusWrite1Register+0x80>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	440b      	add	r3, r1
 80025aa:	7f12      	ldrb	r2, [r2, #28]
 80025ac:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <modbusWrite1Register+0x80>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <modbusWrite1Register+0x80>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	440b      	add	r3, r1
 80025be:	7f52      	ldrb	r2, [r2, #29]
 80025c0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <modbusWrite1Register+0x80>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <modbusWrite1Register+0x80>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80025d0:	2208      	movs	r2, #8
 80025d2:	4619      	mov	r1, r3
 80025d4:	f009 f926 	bl	800b824 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <modbusWrite1Register+0x80>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2205      	movs	r2, #5
 80025de:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000318 	.word	0x20000318

080025ec <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80025f2:	4b3a      	ldr	r3, [pc, #232]	; (80026dc <modbusRead1Register+0xf0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	7f1b      	ldrb	r3, [r3, #28]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	4b37      	ldr	r3, [pc, #220]	; (80026dc <modbusRead1Register+0xf0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	7f5b      	ldrb	r3, [r3, #29]
 8002604:	b29b      	uxth	r3, r3
 8002606:	4413      	add	r3, r2
 8002608:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <modbusRead1Register+0xf0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	7e9b      	ldrb	r3, [r3, #26]
 8002610:	b29b      	uxth	r3, r3
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	b29a      	uxth	r2, r3
 8002616:	4b31      	ldr	r3, [pc, #196]	; (80026dc <modbusRead1Register+0xf0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	7edb      	ldrb	r3, [r3, #27]
 800261c:	b29b      	uxth	r3, r3
 800261e:	4413      	add	r3, r2
 8002620:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <modbusRead1Register+0x42>
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	2b7d      	cmp	r3, #125	; 0x7d
 800262c:	d903      	bls.n	8002636 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800262e:	2003      	movs	r0, #3
 8002630:	f000 f856 	bl	80026e0 <ModbusErrorReply>
		 return;
 8002634:	e04e      	b.n	80026d4 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002636:	88ba      	ldrh	r2, [r7, #4]
 8002638:	4b28      	ldr	r3, [pc, #160]	; (80026dc <modbusRead1Register+0xf0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	429a      	cmp	r2, r3
 8002640:	d808      	bhi.n	8002654 <modbusRead1Register+0x68>
 8002642:	88ba      	ldrh	r2, [r7, #4]
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	4413      	add	r3, r2
 8002648:	461a      	mov	r2, r3
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <modbusRead1Register+0xf0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	429a      	cmp	r2, r3
 8002652:	d903      	bls.n	800265c <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002654:	2002      	movs	r0, #2
 8002656:	f000 f843 	bl	80026e0 <ModbusErrorReply>
		 return;
 800265a:	e03b      	b.n	80026d4 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800265c:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <modbusRead1Register+0xf0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2203      	movs	r2, #3
 8002662:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <modbusRead1Register+0xf0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0052      	lsls	r2, r2, #1
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002676:	2400      	movs	r4, #0
 8002678:	e020      	b.n	80026bc <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <modbusRead1Register+0xf0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	88bb      	ldrh	r3, [r7, #4]
 8002682:	4423      	add	r3, r4
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	18d1      	adds	r1, r2, r3
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <modbusRead1Register+0xf0>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	1c63      	adds	r3, r4, #1
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	7849      	ldrb	r1, [r1, #1]
 8002692:	4413      	add	r3, r2
 8002694:	460a      	mov	r2, r1
 8002696:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <modbusRead1Register+0xf0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	88bb      	ldrh	r3, [r7, #4]
 80026a2:	4423      	add	r3, r4
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	18d1      	adds	r1, r2, r3
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <modbusRead1Register+0xf0>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	0063      	lsls	r3, r4, #1
 80026ae:	3303      	adds	r3, #3
 80026b0:	7809      	ldrb	r1, [r1, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	460a      	mov	r2, r1
 80026b6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80026ba:	3401      	adds	r4, #1
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	429c      	cmp	r4, r3
 80026c0:	dbdb      	blt.n	800267a <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	3301      	adds	r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <modbusRead1Register+0xf0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0052      	lsls	r2, r2, #1
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000318 	.word	0x20000318

080026e0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <ModbusErrorReply+0x34>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2283      	movs	r2, #131	; 0x83
 80026f0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <ModbusErrorReply+0x34>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	79fa      	ldrb	r2, [r7, #7]
 80026fa:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <ModbusErrorReply+0x34>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	20000318 	.word	0x20000318

08002718 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <Modbus_frame_response+0x2c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	7e5b      	ldrb	r3, [r3, #25]
 8002722:	2b03      	cmp	r3, #3
 8002724:	d004      	beq.n	8002730 <Modbus_frame_response+0x18>
 8002726:	2b06      	cmp	r3, #6
 8002728:	d105      	bne.n	8002736 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800272a:	f7ff ff1d 	bl	8002568 <modbusWrite1Register>
		break;
 800272e:	e006      	b.n	800273e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002730:	f7ff ff5c 	bl	80025ec <modbusRead1Register>
		break;
 8002734:	e003      	b.n	800273e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002736:	2001      	movs	r0, #1
 8002738:	f7ff ffd2 	bl	80026e0 <ModbusErrorReply>
		break;
 800273c:	bf00      	nop

	}
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000318 	.word	0x20000318

08002748 <Modbus_Emission>:

void Modbus_Emission()
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800274e:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <Modbus_Emission+0xfc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b20      	cmp	r3, #32
 800275c:	d15e      	bne.n	800281c <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800275e:	4b39      	ldr	r3, [pc, #228]	; (8002844 <Modbus_Emission+0xfc>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <Modbus_Emission+0xfc>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800276c:	4b35      	ldr	r3, [pc, #212]	; (8002844 <Modbus_Emission+0xfc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8002774:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002776:	4b33      	ldr	r3, [pc, #204]	; (8002844 <Modbus_Emission+0xfc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 800277e:	4b31      	ldr	r3, [pc, #196]	; (8002844 <Modbus_Emission+0xfc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8002786:	461a      	mov	r2, r3
 8002788:	f009 f84c 	bl	800b824 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800278c:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <Modbus_Emission+0xfc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8002794:	b29a      	uxth	r2, r3
 8002796:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <Modbus_Emission+0xfc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3203      	adds	r2, #3
 800279c:	b292      	uxth	r2, r2
 800279e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80027a2:	4b28      	ldr	r3, [pc, #160]	; (8002844 <Modbus_Emission+0xfc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80027aa:	4b26      	ldr	r3, [pc, #152]	; (8002844 <Modbus_Emission+0xfc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80027b2:	3b02      	subs	r3, #2
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f7ff fd98 	bl	80022ec <CRC16>
 80027bc:	4603      	mov	r3, r0
 80027be:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <Modbus_Emission+0xfc>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <Modbus_Emission+0xfc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80027cc:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80027ce:	7939      	ldrb	r1, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	460a      	mov	r2, r1
 80027d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <Modbus_Emission+0xfc>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <Modbus_Emission+0xfc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80027e4:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80027e6:	7979      	ldrb	r1, [r7, #5]
 80027e8:	4413      	add	r3, r2
 80027ea:	460a      	mov	r2, r1
 80027ec:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <Modbus_Emission+0xfc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d10d      	bne.n	800281c <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <Modbus_Emission+0xfc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <Modbus_Emission+0xfc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <Modbus_Emission+0xfc>)
 8002810:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002812:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8002816:	461a      	mov	r2, r3
 8002818:	f007 fe72 	bl	800a500 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <Modbus_Emission+0xfc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <Modbus_Emission+0xfc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2200      	movs	r2, #0
 800282a:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <Modbus_Emission+0xfc>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2200      	movs	r2, #0
 8002832:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <Modbus_Emission+0xfc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2202      	movs	r2, #2
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000318 	.word	0x20000318

08002848 <TrapezoidalTraj_PreCal>:

float v_max = 1000.0;	  	  // mm/s
float a = 1200.0;		  	  // mm/s^

void TrapezoidalTraj_PreCal(int16_t start_pos, int16_t final_pos, Traj* trajectory)
{
 8002848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	603a      	str	r2, [r7, #0]
 8002854:	80fb      	strh	r3, [r7, #6]
 8002856:	460b      	mov	r3, r1
 8002858:	80bb      	strh	r3, [r7, #4]
	if (start_pos != final_pos)
 800285a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800285e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d05e      	beq.n	8002924 <TrapezoidalTraj_PreCal+0xdc>
	{
		float s = final_pos - start_pos;
 8002866:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800286a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	ee07 3a90 	vmov	s15, r3
 8002874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002878:	edc7 7a03 	vstr	s15, [r7, #12]

		trajectory->t_acc = v_max/a;
 800287c:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <TrapezoidalTraj_PreCal+0xf0>)
 800287e:	edd3 6a00 	vldr	s13, [r3]
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <TrapezoidalTraj_PreCal+0xf4>)
 8002884:	ed93 7a00 	vldr	s14, [r3]
 8002888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	edc3 7a01 	vstr	s15, [r3, #4]
		trajectory->t_total = (pow(v_max,2)+a*fabs(s))/(a*v_max);
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <TrapezoidalTraj_PreCal+0xf0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe02 	bl	80004a0 <__aeabi_f2d>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8002930 <TrapezoidalTraj_PreCal+0xe8>
 80028a4:	ec43 2b10 	vmov	d0, r2, r3
 80028a8:	f008 ffd4 	bl	800b854 <pow>
 80028ac:	ec59 8b10 	vmov	r8, r9, d0
 80028b0:	4b22      	ldr	r3, [pc, #136]	; (800293c <TrapezoidalTraj_PreCal+0xf4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fd fdf3 	bl	80004a0 <__aeabi_f2d>
 80028ba:	4604      	mov	r4, r0
 80028bc:	460d      	mov	r5, r1
 80028be:	edd7 7a03 	vldr	s15, [r7, #12]
 80028c2:	eef0 7ae7 	vabs.f32	s15, s15
 80028c6:	ee17 0a90 	vmov	r0, s15
 80028ca:	f7fd fde9 	bl	80004a0 <__aeabi_f2d>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4620      	mov	r0, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7fd fe3b 	bl	8000550 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4640      	mov	r0, r8
 80028e0:	4649      	mov	r1, r9
 80028e2:	f7fd fc7f 	bl	80001e4 <__adddf3>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4614      	mov	r4, r2
 80028ec:	461d      	mov	r5, r3
 80028ee:	4b13      	ldr	r3, [pc, #76]	; (800293c <TrapezoidalTraj_PreCal+0xf4>)
 80028f0:	ed93 7a00 	vldr	s14, [r3]
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <TrapezoidalTraj_PreCal+0xf0>)
 80028f6:	edd3 7a00 	vldr	s15, [r3]
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	ee17 0a90 	vmov	r0, s15
 8002902:	f7fd fdcd 	bl	80004a0 <__aeabi_f2d>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4620      	mov	r0, r4
 800290c:	4629      	mov	r1, r5
 800290e:	f7fd ff49 	bl	80007a4 <__aeabi_ddiv>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	f7fe f8c9 	bl	8000ab0 <__aeabi_d2f>
 800291e:	4602      	mov	r2, r0
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	601a      	str	r2, [r3, #0]
	}
}
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800292e:	bf00      	nop
 8002930:	00000000 	.word	0x00000000
 8002934:	40000000 	.word	0x40000000
 8002938:	20000208 	.word	0x20000208
 800293c:	2000020c 	.word	0x2000020c

08002940 <TrapezoidalTraj_GetState>:

void TrapezoidalTraj_GetState(int16_t start_pos, int16_t final_pos, Traj* trajectory, uint32_t t_us)
{
 8002940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002944:	ed2d 8b02 	vpush	{d8}
 8002948:	b08c      	sub	sp, #48	; 0x30
 800294a:	af00      	add	r7, sp, #0
 800294c:	613a      	str	r2, [r7, #16]
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	4603      	mov	r3, r0
 8002952:	82fb      	strh	r3, [r7, #22]
 8002954:	460b      	mov	r3, r1
 8002956:	82bb      	strh	r3, [r7, #20]
	if (start_pos != final_pos)
 8002958:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800295c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	f000 8391 	beq.w	8003088 <TrapezoidalTraj_GetState+0x748>
	{
		float t = t_us/1000000.0;
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f7fd fd78 	bl	800045c <__aeabi_ui2d>
 800296c:	a3ab      	add	r3, pc, #684	; (adr r3, 8002c1c <TrapezoidalTraj_GetState+0x2dc>)
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f7fd ff17 	bl	80007a4 <__aeabi_ddiv>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	f7fe f897 	bl	8000ab0 <__aeabi_d2f>
 8002982:	4603      	mov	r3, r0
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28

		float t_acc = trajectory->t_acc;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
		float t_total = trajectory->t_total;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	623b      	str	r3, [r7, #32]

		float s = final_pos - start_pos;
 8002992:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002996:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a4:	edc7 7a07 	vstr	s15, [r7, #28]
		int8_t dir = 1;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (s < 0)
 80029ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80029b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	d502      	bpl.n	80029c2 <TrapezoidalTraj_GetState+0x82>
		{
			dir = -1;
 80029bc:	23ff      	movs	r3, #255	; 0xff
 80029be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (2*t_acc < t_total) // General Case
 80029c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80029ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d6:	f340 81e8 	ble.w	8002daa <TrapezoidalTraj_GetState+0x46a>
		{
			if (t <= t_acc)
 80029da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80029de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ea:	d862      	bhi.n	8002ab2 <TrapezoidalTraj_GetState+0x172>
			{
				qddot_des = dir*a;
 80029ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80029f0:	ee07 3a90 	vmov	s15, r3
 80029f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f8:	4b83      	ldr	r3, [pc, #524]	; (8002c08 <TrapezoidalTraj_GetState+0x2c8>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a02:	4b82      	ldr	r3, [pc, #520]	; (8002c0c <TrapezoidalTraj_GetState+0x2cc>)
 8002a04:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*t;
 8002a08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002a0c:	ee07 3a90 	vmov	s15, r3
 8002a10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a14:	4b7c      	ldr	r3, [pc, #496]	; (8002c08 <TrapezoidalTraj_GetState+0x2c8>)
 8002a16:	edd3 7a00 	vldr	s15, [r3]
 8002a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a26:	4b7a      	ldr	r3, [pc, #488]	; (8002c10 <TrapezoidalTraj_GetState+0x2d0>)
 8002a28:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t,2));
 8002a2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fd23 	bl	800047c <__aeabi_i2d>
 8002a36:	4604      	mov	r4, r0
 8002a38:	460d      	mov	r5, r1
 8002a3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fd fd1c 	bl	800047c <__aeabi_i2d>
 8002a44:	4680      	mov	r8, r0
 8002a46:	4689      	mov	r9, r1
 8002a48:	4b6f      	ldr	r3, [pc, #444]	; (8002c08 <TrapezoidalTraj_GetState+0x2c8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fd27 	bl	80004a0 <__aeabi_f2d>
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <TrapezoidalTraj_GetState+0x2d4>)
 8002a58:	f7fd fd7a 	bl	8000550 <__aeabi_dmul>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4692      	mov	sl, r2
 8002a62:	469b      	mov	fp, r3
 8002a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a66:	f7fd fd1b 	bl	80004a0 <__aeabi_f2d>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8002c00 <TrapezoidalTraj_GetState+0x2c0>
 8002a72:	ec43 2b10 	vmov	d0, r2, r3
 8002a76:	f008 feed 	bl	800b854 <pow>
 8002a7a:	ec53 2b10 	vmov	r2, r3, d0
 8002a7e:	4650      	mov	r0, sl
 8002a80:	4659      	mov	r1, fp
 8002a82:	f7fd fd65 	bl	8000550 <__aeabi_dmul>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4640      	mov	r0, r8
 8002a8c:	4649      	mov	r1, r9
 8002a8e:	f7fd fd5f 	bl	8000550 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4620      	mov	r0, r4
 8002a98:	4629      	mov	r1, r5
 8002a9a:	f7fd fba3 	bl	80001e4 <__adddf3>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7fe f803 	bl	8000ab0 <__aeabi_d2f>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4a5a      	ldr	r2, [pc, #360]	; (8002c18 <TrapezoidalTraj_GetState+0x2d8>)
 8002aae:	6013      	str	r3, [r2, #0]
				qdot_des = dir*a*(2*t_acc - t);
				q_des = start_pos + dir*(2*a*t_acc*t-0.5*a*pow(t,2)-a*pow(t_acc,2));
			}
		}
	}
}
 8002ab0:	e2ea      	b.n	8003088 <TrapezoidalTraj_GetState+0x748>
			else if (t_acc < t && t < (t_total - t_acc))
 8002ab2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ab6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac2:	f140 8083 	bpl.w	8002bcc <TrapezoidalTraj_GetState+0x28c>
 8002ac6:	ed97 7a08 	vldr	s14, [r7, #32]
 8002aca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ade:	d575      	bpl.n	8002bcc <TrapezoidalTraj_GetState+0x28c>
				qddot_des = 0;
 8002ae0:	4b4a      	ldr	r3, [pc, #296]	; (8002c0c <TrapezoidalTraj_GetState+0x2cc>)
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
				qdot_des = dir*a*t_acc;
 8002ae8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002aec:	ee07 3a90 	vmov	s15, r3
 8002af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002af4:	4b44      	ldr	r3, [pc, #272]	; (8002c08 <TrapezoidalTraj_GetState+0x2c8>)
 8002af6:	edd3 7a00 	vldr	s15, [r3]
 8002afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002afe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b06:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <TrapezoidalTraj_GetState+0x2d0>)
 8002b08:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t_acc,2) + a*t_acc*(t - t_acc));
 8002b0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fcb3 	bl	800047c <__aeabi_i2d>
 8002b16:	4604      	mov	r4, r0
 8002b18:	460d      	mov	r5, r1
 8002b1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fcac 	bl	800047c <__aeabi_i2d>
 8002b24:	4680      	mov	r8, r0
 8002b26:	4689      	mov	r9, r1
 8002b28:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <TrapezoidalTraj_GetState+0x2c8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fcb7 	bl	80004a0 <__aeabi_f2d>
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <TrapezoidalTraj_GetState+0x2d4>)
 8002b38:	f7fd fd0a 	bl	8000550 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4692      	mov	sl, r2
 8002b42:	469b      	mov	fp, r3
 8002b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b46:	f7fd fcab 	bl	80004a0 <__aeabi_f2d>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8002c00 <TrapezoidalTraj_GetState+0x2c0>
 8002b52:	ec43 2b10 	vmov	d0, r2, r3
 8002b56:	f008 fe7d 	bl	800b854 <pow>
 8002b5a:	ec53 2b10 	vmov	r2, r3, d0
 8002b5e:	4650      	mov	r0, sl
 8002b60:	4659      	mov	r1, fp
 8002b62:	f7fd fcf5 	bl	8000550 <__aeabi_dmul>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4692      	mov	sl, r2
 8002b6c:	469b      	mov	fp, r3
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <TrapezoidalTraj_GetState+0x2c8>)
 8002b70:	ed93 7a00 	vldr	s14, [r3]
 8002b74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b7c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002b80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8c:	ee17 0a90 	vmov	r0, s15
 8002b90:	f7fd fc86 	bl	80004a0 <__aeabi_f2d>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4650      	mov	r0, sl
 8002b9a:	4659      	mov	r1, fp
 8002b9c:	f7fd fb22 	bl	80001e4 <__adddf3>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4640      	mov	r0, r8
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	f7fd fcd2 	bl	8000550 <__aeabi_dmul>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	f7fd fb16 	bl	80001e4 <__adddf3>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f7fd ff76 	bl	8000ab0 <__aeabi_d2f>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <TrapezoidalTraj_GetState+0x2d8>)
 8002bc8:	6013      	str	r3, [r2, #0]
}
 8002bca:	e25d      	b.n	8003088 <TrapezoidalTraj_GetState+0x748>
			else if ((t_total - t_acc) <= t && t <= t_total)
 8002bcc:	ed97 7a08 	vldr	s14, [r7, #32]
 8002bd0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	da00      	bge.n	8002be8 <TrapezoidalTraj_GetState+0x2a8>
}
 8002be6:	e24f      	b.n	8003088 <TrapezoidalTraj_GetState+0x748>
			else if ((t_total - t_acc) <= t && t <= t_total)
 8002be8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002bec:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	d914      	bls.n	8002c24 <TrapezoidalTraj_GetState+0x2e4>
}
 8002bfa:	e245      	b.n	8003088 <TrapezoidalTraj_GetState+0x748>
 8002bfc:	f3af 8000 	nop.w
 8002c00:	00000000 	.word	0x00000000
 8002c04:	40000000 	.word	0x40000000
 8002c08:	2000020c 	.word	0x2000020c
 8002c0c:	20000860 	.word	0x20000860
 8002c10:	2000085c 	.word	0x2000085c
 8002c14:	3fe00000 	.word	0x3fe00000
 8002c18:	20000858 	.word	0x20000858
 8002c1c:	00000000 	.word	0x00000000
 8002c20:	412e8480 	.word	0x412e8480
				qddot_des = -dir*a;
 8002c24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002c28:	425b      	negs	r3, r3
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c32:	4bbd      	ldr	r3, [pc, #756]	; (8002f28 <TrapezoidalTraj_GetState+0x5e8>)
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3c:	4bbb      	ldr	r3, [pc, #748]	; (8002f2c <TrapezoidalTraj_GetState+0x5ec>)
 8002c3e:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*(t_total - t);
 8002c42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4e:	4bb6      	ldr	r3, [pc, #728]	; (8002f28 <TrapezoidalTraj_GetState+0x5e8>)
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c58:	edd7 6a08 	vldr	s13, [r7, #32]
 8002c5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c68:	4bb1      	ldr	r3, [pc, #708]	; (8002f30 <TrapezoidalTraj_GetState+0x5f0>)
 8002c6a:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(a*t_total*t+a*t_acc*t_total-a*pow(t_acc,2)-0.5*a*(pow(t,2)+pow(t_total,2)));
 8002c6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fc02 	bl	800047c <__aeabi_i2d>
 8002c78:	4682      	mov	sl, r0
 8002c7a:	468b      	mov	fp, r1
 8002c7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fbfb 	bl	800047c <__aeabi_i2d>
 8002c86:	e9c7 0100 	strd	r0, r1, [r7]
 8002c8a:	4ba7      	ldr	r3, [pc, #668]	; (8002f28 <TrapezoidalTraj_GetState+0x5e8>)
 8002c8c:	ed93 7a00 	vldr	s14, [r3]
 8002c90:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ca0:	4ba1      	ldr	r3, [pc, #644]	; (8002f28 <TrapezoidalTraj_GetState+0x5e8>)
 8002ca2:	edd3 6a00 	vldr	s13, [r3]
 8002ca6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002caa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cae:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cba:	ee17 0a90 	vmov	r0, s15
 8002cbe:	f7fd fbef 	bl	80004a0 <__aeabi_f2d>
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	460d      	mov	r5, r1
 8002cc6:	4b98      	ldr	r3, [pc, #608]	; (8002f28 <TrapezoidalTraj_GetState+0x5e8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fbe8 	bl	80004a0 <__aeabi_f2d>
 8002cd0:	4680      	mov	r8, r0
 8002cd2:	4689      	mov	r9, r1
 8002cd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cd6:	f7fd fbe3 	bl	80004a0 <__aeabi_f2d>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8002f20 <TrapezoidalTraj_GetState+0x5e0>
 8002ce2:	ec43 2b10 	vmov	d0, r2, r3
 8002ce6:	f008 fdb5 	bl	800b854 <pow>
 8002cea:	ec53 2b10 	vmov	r2, r3, d0
 8002cee:	4640      	mov	r0, r8
 8002cf0:	4649      	mov	r1, r9
 8002cf2:	f7fd fc2d 	bl	8000550 <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	f7fd fa6f 	bl	80001e0 <__aeabi_dsub>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4614      	mov	r4, r2
 8002d08:	461d      	mov	r5, r3
 8002d0a:	4b87      	ldr	r3, [pc, #540]	; (8002f28 <TrapezoidalTraj_GetState+0x5e8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fbc6 	bl	80004a0 <__aeabi_f2d>
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	4b86      	ldr	r3, [pc, #536]	; (8002f34 <TrapezoidalTraj_GetState+0x5f4>)
 8002d1a:	f7fd fc19 	bl	8000550 <__aeabi_dmul>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4690      	mov	r8, r2
 8002d24:	4699      	mov	r9, r3
 8002d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d28:	f7fd fbba 	bl	80004a0 <__aeabi_f2d>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8002f20 <TrapezoidalTraj_GetState+0x5e0>
 8002d34:	ec43 2b10 	vmov	d0, r2, r3
 8002d38:	f008 fd8c 	bl	800b854 <pow>
 8002d3c:	eeb0 8a40 	vmov.f32	s16, s0
 8002d40:	eef0 8a60 	vmov.f32	s17, s1
 8002d44:	6a38      	ldr	r0, [r7, #32]
 8002d46:	f7fd fbab 	bl	80004a0 <__aeabi_f2d>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002f20 <TrapezoidalTraj_GetState+0x5e0>
 8002d52:	ec43 2b10 	vmov	d0, r2, r3
 8002d56:	f008 fd7d 	bl	800b854 <pow>
 8002d5a:	ec53 2b10 	vmov	r2, r3, d0
 8002d5e:	ec51 0b18 	vmov	r0, r1, d8
 8002d62:	f7fd fa3f 	bl	80001e4 <__adddf3>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4640      	mov	r0, r8
 8002d6c:	4649      	mov	r1, r9
 8002d6e:	f7fd fbef 	bl	8000550 <__aeabi_dmul>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7fd fa31 	bl	80001e0 <__aeabi_dsub>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d86:	f7fd fbe3 	bl	8000550 <__aeabi_dmul>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4650      	mov	r0, sl
 8002d90:	4659      	mov	r1, fp
 8002d92:	f7fd fa27 	bl	80001e4 <__adddf3>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f7fd fe87 	bl	8000ab0 <__aeabi_d2f>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4a64      	ldr	r2, [pc, #400]	; (8002f38 <TrapezoidalTraj_GetState+0x5f8>)
 8002da6:	6013      	str	r3, [r2, #0]
}
 8002da8:	e16e      	b.n	8003088 <TrapezoidalTraj_GetState+0x748>
			t_acc = 0.5*sqrt(4*fabs(s)/a);
 8002daa:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dae:	eef0 7ae7 	vabs.f32	s15, s15
 8002db2:	ee17 0a90 	vmov	r0, s15
 8002db6:	f7fd fb73 	bl	80004a0 <__aeabi_f2d>
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	4b5f      	ldr	r3, [pc, #380]	; (8002f3c <TrapezoidalTraj_GetState+0x5fc>)
 8002dc0:	f7fd fbc6 	bl	8000550 <__aeabi_dmul>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4614      	mov	r4, r2
 8002dca:	461d      	mov	r5, r3
 8002dcc:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <TrapezoidalTraj_GetState+0x5e8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fd fb65 	bl	80004a0 <__aeabi_f2d>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4620      	mov	r0, r4
 8002ddc:	4629      	mov	r1, r5
 8002dde:	f7fd fce1 	bl	80007a4 <__aeabi_ddiv>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	ec43 2b17 	vmov	d7, r2, r3
 8002dea:	eeb0 0a47 	vmov.f32	s0, s14
 8002dee:	eef0 0a67 	vmov.f32	s1, s15
 8002df2:	f008 fd9f 	bl	800b934 <sqrt>
 8002df6:	ec51 0b10 	vmov	r0, r1, d0
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	4b4d      	ldr	r3, [pc, #308]	; (8002f34 <TrapezoidalTraj_GetState+0x5f4>)
 8002e00:	f7fd fba6 	bl	8000550 <__aeabi_dmul>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7fd fe50 	bl	8000ab0 <__aeabi_d2f>
 8002e10:	4603      	mov	r3, r0
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
			t_total = 2*t_acc;
 8002e14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e1c:	edc7 7a08 	vstr	s15, [r7, #32]
			if (t <= t_acc)
 8002e20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e30:	d862      	bhi.n	8002ef8 <TrapezoidalTraj_GetState+0x5b8>
				qddot_des = dir*a;
 8002e32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e3e:	4b3a      	ldr	r3, [pc, #232]	; (8002f28 <TrapezoidalTraj_GetState+0x5e8>)
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e48:	4b38      	ldr	r3, [pc, #224]	; (8002f2c <TrapezoidalTraj_GetState+0x5ec>)
 8002e4a:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*t;
 8002e4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e52:	ee07 3a90 	vmov	s15, r3
 8002e56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e5a:	4b33      	ldr	r3, [pc, #204]	; (8002f28 <TrapezoidalTraj_GetState+0x5e8>)
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6c:	4b30      	ldr	r3, [pc, #192]	; (8002f30 <TrapezoidalTraj_GetState+0x5f0>)
 8002e6e:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t,2));
 8002e72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd fb00 	bl	800047c <__aeabi_i2d>
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	460d      	mov	r5, r1
 8002e80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd faf9 	bl	800047c <__aeabi_i2d>
 8002e8a:	4680      	mov	r8, r0
 8002e8c:	4689      	mov	r9, r1
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <TrapezoidalTraj_GetState+0x5e8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd fb04 	bl	80004a0 <__aeabi_f2d>
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <TrapezoidalTraj_GetState+0x5f4>)
 8002e9e:	f7fd fb57 	bl	8000550 <__aeabi_dmul>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4692      	mov	sl, r2
 8002ea8:	469b      	mov	fp, r3
 8002eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eac:	f7fd faf8 	bl	80004a0 <__aeabi_f2d>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8002f20 <TrapezoidalTraj_GetState+0x5e0>
 8002eb8:	ec43 2b10 	vmov	d0, r2, r3
 8002ebc:	f008 fcca 	bl	800b854 <pow>
 8002ec0:	ec53 2b10 	vmov	r2, r3, d0
 8002ec4:	4650      	mov	r0, sl
 8002ec6:	4659      	mov	r1, fp
 8002ec8:	f7fd fb42 	bl	8000550 <__aeabi_dmul>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4640      	mov	r0, r8
 8002ed2:	4649      	mov	r1, r9
 8002ed4:	f7fd fb3c 	bl	8000550 <__aeabi_dmul>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4620      	mov	r0, r4
 8002ede:	4629      	mov	r1, r5
 8002ee0:	f7fd f980 	bl	80001e4 <__adddf3>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	f7fd fde0 	bl	8000ab0 <__aeabi_d2f>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <TrapezoidalTraj_GetState+0x5f8>)
 8002ef4:	6013      	str	r3, [r2, #0]
}
 8002ef6:	e0c7      	b.n	8003088 <TrapezoidalTraj_GetState+0x748>
			else if (t_acc < t && t < t_total)
 8002ef8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002efc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f08:	d400      	bmi.n	8002f0c <TrapezoidalTraj_GetState+0x5cc>
}
 8002f0a:	e0bd      	b.n	8003088 <TrapezoidalTraj_GetState+0x748>
			else if (t_acc < t && t < t_total)
 8002f0c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002f10:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1c:	d410      	bmi.n	8002f40 <TrapezoidalTraj_GetState+0x600>
}
 8002f1e:	e0b3      	b.n	8003088 <TrapezoidalTraj_GetState+0x748>
 8002f20:	00000000 	.word	0x00000000
 8002f24:	40000000 	.word	0x40000000
 8002f28:	2000020c 	.word	0x2000020c
 8002f2c:	20000860 	.word	0x20000860
 8002f30:	2000085c 	.word	0x2000085c
 8002f34:	3fe00000 	.word	0x3fe00000
 8002f38:	20000858 	.word	0x20000858
 8002f3c:	40100000 	.word	0x40100000
				qddot_des = -dir*a;
 8002f40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f44:	425b      	negs	r3, r3
 8002f46:	ee07 3a90 	vmov	s15, r3
 8002f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f4e:	4b54      	ldr	r3, [pc, #336]	; (80030a0 <TrapezoidalTraj_GetState+0x760>)
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f58:	4b52      	ldr	r3, [pc, #328]	; (80030a4 <TrapezoidalTraj_GetState+0x764>)
 8002f5a:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*(2*t_acc - t);
 8002f5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f6a:	4b4d      	ldr	r3, [pc, #308]	; (80030a0 <TrapezoidalTraj_GetState+0x760>)
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f78:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f88:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <TrapezoidalTraj_GetState+0x768>)
 8002f8a:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(2*a*t_acc*t-0.5*a*pow(t,2)-a*pow(t_acc,2));
 8002f8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fa72 	bl	800047c <__aeabi_i2d>
 8002f98:	4604      	mov	r4, r0
 8002f9a:	460d      	mov	r5, r1
 8002f9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd fa6b 	bl	800047c <__aeabi_i2d>
 8002fa6:	4680      	mov	r8, r0
 8002fa8:	4689      	mov	r9, r1
 8002faa:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <TrapezoidalTraj_GetState+0x760>)
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002fb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc4:	ee17 0a90 	vmov	r0, s15
 8002fc8:	f7fd fa6a 	bl	80004a0 <__aeabi_f2d>
 8002fcc:	4682      	mov	sl, r0
 8002fce:	468b      	mov	fp, r1
 8002fd0:	4b33      	ldr	r3, [pc, #204]	; (80030a0 <TrapezoidalTraj_GetState+0x760>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd fa63 	bl	80004a0 <__aeabi_f2d>
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	4b33      	ldr	r3, [pc, #204]	; (80030ac <TrapezoidalTraj_GetState+0x76c>)
 8002fe0:	f7fd fab6 	bl	8000550 <__aeabi_dmul>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	e9c7 2300 	strd	r2, r3, [r7]
 8002fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fee:	f7fd fa57 	bl	80004a0 <__aeabi_f2d>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8003098 <TrapezoidalTraj_GetState+0x758>
 8002ffa:	ec43 2b10 	vmov	d0, r2, r3
 8002ffe:	f008 fc29 	bl	800b854 <pow>
 8003002:	ec53 2b10 	vmov	r2, r3, d0
 8003006:	e9d7 0100 	ldrd	r0, r1, [r7]
 800300a:	f7fd faa1 	bl	8000550 <__aeabi_dmul>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4650      	mov	r0, sl
 8003014:	4659      	mov	r1, fp
 8003016:	f7fd f8e3 	bl	80001e0 <__aeabi_dsub>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	e9c7 2300 	strd	r2, r3, [r7]
 8003022:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <TrapezoidalTraj_GetState+0x760>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fa3a 	bl	80004a0 <__aeabi_f2d>
 800302c:	4682      	mov	sl, r0
 800302e:	468b      	mov	fp, r1
 8003030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003032:	f7fd fa35 	bl	80004a0 <__aeabi_f2d>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003098 <TrapezoidalTraj_GetState+0x758>
 800303e:	ec43 2b10 	vmov	d0, r2, r3
 8003042:	f008 fc07 	bl	800b854 <pow>
 8003046:	ec53 2b10 	vmov	r2, r3, d0
 800304a:	4650      	mov	r0, sl
 800304c:	4659      	mov	r1, fp
 800304e:	f7fd fa7f 	bl	8000550 <__aeabi_dmul>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800305a:	f7fd f8c1 	bl	80001e0 <__aeabi_dsub>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4640      	mov	r0, r8
 8003064:	4649      	mov	r1, r9
 8003066:	f7fd fa73 	bl	8000550 <__aeabi_dmul>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f7fd f8b7 	bl	80001e4 <__adddf3>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fd17 	bl	8000ab0 <__aeabi_d2f>
 8003082:	4603      	mov	r3, r0
 8003084:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <TrapezoidalTraj_GetState+0x770>)
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	bf00      	nop
 800308a:	3730      	adds	r7, #48	; 0x30
 800308c:	46bd      	mov	sp, r7
 800308e:	ecbd 8b02 	vpop	{d8}
 8003092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003096:	bf00      	nop
 8003098:	00000000 	.word	0x00000000
 800309c:	40000000 	.word	0x40000000
 80030a0:	2000020c 	.word	0x2000020c
 80030a4:	20000860 	.word	0x20000860
 80030a8:	2000085c 	.word	0x2000085c
 80030ac:	3fe00000 	.word	0x3fe00000
 80030b0:	20000858 	.word	0x20000858

080030b4 <swap>:
  30, 40,
  50, 40
};

void swap(float* a, float* b)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
	float temp = *a;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]
	*a = *b;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	601a      	str	r2, [r3, #0]
	*b = temp;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	601a      	str	r2, [r3, #0]
}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <SetTwoPointsForCalibrate>:

void SetTwoPointsForCalibrate(float x0, float y0, float x1, float y1, uint8_t trayNumber) // 0->Pick, 1->Place
{
 80030e0:	b5b0      	push	{r4, r5, r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	ed87 0a05 	vstr	s0, [r7, #20]
 80030ea:	edc7 0a04 	vstr	s1, [r7, #16]
 80030ee:	ed87 1a03 	vstr	s2, [r7, #12]
 80030f2:	edc7 1a02 	vstr	s3, [r7, #8]
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
	if(y0 > y1){swap(&x0, &x1); swap(&y0, &y1);}
 80030fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80030fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	dd10      	ble.n	800312e <SetTwoPointsForCalibrate+0x4e>
 800310c:	f107 020c 	add.w	r2, r7, #12
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ffcc 	bl	80030b4 <swap>
 800311c:	f107 0208 	add.w	r2, r7, #8
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff ffc4 	bl	80030b4 <swap>
 800312c:	e021      	b.n	8003172 <SetTwoPointsForCalibrate+0x92>
	else if(y0 == y1)
 800312e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003132:	edd7 7a02 	vldr	s15, [r7, #8]
 8003136:	eeb4 7a67 	vcmp.f32	s14, s15
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	d118      	bne.n	8003172 <SetTwoPointsForCalibrate+0x92>
	{
		if (x0 > x1){swap(&x0, &x1); swap(&y0, &y1);}
 8003140:	ed97 7a05 	vldr	s14, [r7, #20]
 8003144:	edd7 7a03 	vldr	s15, [r7, #12]
 8003148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003150:	dd0f      	ble.n	8003172 <SetTwoPointsForCalibrate+0x92>
 8003152:	f107 020c 	add.w	r2, r7, #12
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ffa9 	bl	80030b4 <swap>
 8003162:	f107 0208 	add.w	r2, r7, #8
 8003166:	f107 0310 	add.w	r3, r7, #16
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ffa1 	bl	80030b4 <swap>
	}

	reference[0] = x0; reference[1] = y0;
 8003172:	edd7 7a05 	vldr	s15, [r7, #20]
 8003176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800317a:	ee17 2a90 	vmov	r2, s15
 800317e:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <SetTwoPointsForCalibrate+0x1e0>)
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	edd7 7a04 	vldr	s15, [r7, #16]
 8003186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800318a:	ee17 2a90 	vmov	r2, s15
 800318e:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <SetTwoPointsForCalibrate+0x1e0>)
 8003190:	605a      	str	r2, [r3, #4]
	opposite[0] = x1; opposite[1] = y1;
 8003192:	edd7 7a03 	vldr	s15, [r7, #12]
 8003196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800319a:	ee17 2a90 	vmov	r2, s15
 800319e:	4b49      	ldr	r3, [pc, #292]	; (80032c4 <SetTwoPointsForCalibrate+0x1e4>)
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80031a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031aa:	ee17 2a90 	vmov	r2, s15
 80031ae:	4b45      	ldr	r3, [pc, #276]	; (80032c4 <SetTwoPointsForCalibrate+0x1e4>)
 80031b0:	605a      	str	r2, [r3, #4]

	rotationAngleRadian = atan2(y1 - y0, x1 - x0) - atan2(50, 60);
 80031b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80031b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80031ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031be:	ee17 0a90 	vmov	r0, s15
 80031c2:	f7fd f96d 	bl	80004a0 <__aeabi_f2d>
 80031c6:	4604      	mov	r4, r0
 80031c8:	460d      	mov	r5, r1
 80031ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80031ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80031d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d6:	ee17 0a90 	vmov	r0, s15
 80031da:	f7fd f961 	bl	80004a0 <__aeabi_f2d>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	ec43 2b11 	vmov	d1, r2, r3
 80031e6:	ec45 4b10 	vmov	d0, r4, r5
 80031ea:	f008 fb31 	bl	800b850 <atan2>
 80031ee:	ec51 0b10 	vmov	r0, r1, d0
 80031f2:	a32f      	add	r3, pc, #188	; (adr r3, 80032b0 <SetTwoPointsForCalibrate+0x1d0>)
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f7fc fff2 	bl	80001e0 <__aeabi_dsub>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	f7fd fc54 	bl	8000ab0 <__aeabi_d2f>
 8003208:	4603      	mov	r3, r0
 800320a:	4a2f      	ldr	r2, [pc, #188]	; (80032c8 <SetTwoPointsForCalibrate+0x1e8>)
 800320c:	6013      	str	r3, [r2, #0]
	Degrees = rotationAngleRadian * (180 / M_PI);
 800320e:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <SetTwoPointsForCalibrate+0x1e8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd f944 	bl	80004a0 <__aeabi_f2d>
 8003218:	a327      	add	r3, pc, #156	; (adr r3, 80032b8 <SetTwoPointsForCalibrate+0x1d8>)
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	f7fd f997 	bl	8000550 <__aeabi_dmul>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f7fd fc41 	bl	8000ab0 <__aeabi_d2f>
 800322e:	4603      	mov	r3, r0
 8003230:	4a26      	ldr	r2, [pc, #152]	; (80032cc <SetTwoPointsForCalibrate+0x1ec>)
 8003232:	6013      	str	r3, [r2, #0]

	if (trayNumber == 0)
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d118      	bne.n	800326c <SetTwoPointsForCalibrate+0x18c>
	{
		Pickreference[0] = reference[0];
 800323a:	4b21      	ldr	r3, [pc, #132]	; (80032c0 <SetTwoPointsForCalibrate+0x1e0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a24      	ldr	r2, [pc, #144]	; (80032d0 <SetTwoPointsForCalibrate+0x1f0>)
 8003240:	6013      	str	r3, [r2, #0]
		Pickreference[1] = reference[1];
 8003242:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <SetTwoPointsForCalibrate+0x1e0>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a22      	ldr	r2, [pc, #136]	; (80032d0 <SetTwoPointsForCalibrate+0x1f0>)
 8003248:	6053      	str	r3, [r2, #4]
		Pickopposite[0] = opposite[0];
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <SetTwoPointsForCalibrate+0x1e4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <SetTwoPointsForCalibrate+0x1f4>)
 8003250:	6013      	str	r3, [r2, #0]
		Pickopposite[1] = opposite[1];
 8003252:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <SetTwoPointsForCalibrate+0x1e4>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4a1f      	ldr	r2, [pc, #124]	; (80032d4 <SetTwoPointsForCalibrate+0x1f4>)
 8003258:	6053      	str	r3, [r2, #4]
		PickrotationAngleRadian = rotationAngleRadian;
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <SetTwoPointsForCalibrate+0x1e8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1e      	ldr	r2, [pc, #120]	; (80032d8 <SetTwoPointsForCalibrate+0x1f8>)
 8003260:	6013      	str	r3, [r2, #0]
		PickrotationAngleDegree = Degrees;
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <SetTwoPointsForCalibrate+0x1ec>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <SetTwoPointsForCalibrate+0x1fc>)
 8003268:	6013      	str	r3, [r2, #0]
		Placeopposite[0] = opposite[0];
		Placeopposite[1] = opposite[1];
		PlacerotationAngleRadian = rotationAngleRadian;
		PlacerotationAngleDegree = Degrees;
	}
}
 800326a:	e01a      	b.n	80032a2 <SetTwoPointsForCalibrate+0x1c2>
	else if (trayNumber == 1)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d117      	bne.n	80032a2 <SetTwoPointsForCalibrate+0x1c2>
		Placereference[0] = reference[0];
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <SetTwoPointsForCalibrate+0x1e0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <SetTwoPointsForCalibrate+0x200>)
 8003278:	6013      	str	r3, [r2, #0]
		Placereference[1] = reference[1];
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <SetTwoPointsForCalibrate+0x1e0>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <SetTwoPointsForCalibrate+0x200>)
 8003280:	6053      	str	r3, [r2, #4]
		Placeopposite[0] = opposite[0];
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <SetTwoPointsForCalibrate+0x1e4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a17      	ldr	r2, [pc, #92]	; (80032e4 <SetTwoPointsForCalibrate+0x204>)
 8003288:	6013      	str	r3, [r2, #0]
		Placeopposite[1] = opposite[1];
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <SetTwoPointsForCalibrate+0x1e4>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <SetTwoPointsForCalibrate+0x204>)
 8003290:	6053      	str	r3, [r2, #4]
		PlacerotationAngleRadian = rotationAngleRadian;
 8003292:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <SetTwoPointsForCalibrate+0x1e8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <SetTwoPointsForCalibrate+0x208>)
 8003298:	6013      	str	r3, [r2, #0]
		PlacerotationAngleDegree = Degrees;
 800329a:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <SetTwoPointsForCalibrate+0x1ec>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a13      	ldr	r2, [pc, #76]	; (80032ec <SetTwoPointsForCalibrate+0x20c>)
 80032a0:	6013      	str	r3, [r2, #0]
}
 80032a2:	bf00      	nop
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bdb0      	pop	{r4, r5, r7, pc}
 80032aa:	bf00      	nop
 80032ac:	f3af 8000 	nop.w
 80032b0:	c3f16a8a 	.word	0xc3f16a8a
 80032b4:	3fe63b4b 	.word	0x3fe63b4b
 80032b8:	1a63c1f8 	.word	0x1a63c1f8
 80032bc:	404ca5dc 	.word	0x404ca5dc
 80032c0:	2000031c 	.word	0x2000031c
 80032c4:	20000324 	.word	0x20000324
 80032c8:	2000032c 	.word	0x2000032c
 80032cc:	20000330 	.word	0x20000330
 80032d0:	2000094c 	.word	0x2000094c
 80032d4:	20000954 	.word	0x20000954
 80032d8:	2000095c 	.word	0x2000095c
 80032dc:	20000960 	.word	0x20000960
 80032e0:	200009ac 	.word	0x200009ac
 80032e4:	200009b4 	.word	0x200009b4
 80032e8:	200009bc 	.word	0x200009bc
 80032ec:	200009c0 	.word	0x200009c0

080032f0 <GetJoystickXYaxisValue>:

uint8_t JoyStickSwitch_last = 1;
uint64_t StartTime = 0;

void GetJoystickXYaxisValue(float* ptrx, float* ptry)
{
 80032f0:	b5b0      	push	{r4, r5, r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
	JoyStickSwitch = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80032fa:	2110      	movs	r1, #16
 80032fc:	487a      	ldr	r0, [pc, #488]	; (80034e8 <GetJoystickXYaxisValue+0x1f8>)
 80032fe:	f002 fe87 	bl	8006010 <HAL_GPIO_ReadPin>
 8003302:	4603      	mov	r3, r0
 8003304:	461a      	mov	r2, r3
 8003306:	4b79      	ldr	r3, [pc, #484]	; (80034ec <GetJoystickXYaxisValue+0x1fc>)
 8003308:	701a      	strb	r2, [r3, #0]

	static uint8_t i = 0;
	if(i % 2 == 0)
 800330a:	4b79      	ldr	r3, [pc, #484]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d12a      	bne.n	800336e <GetJoystickXYaxisValue+0x7e>
	{
		IN1[i/2] = adcRawData[i];
 8003318:	4b75      	ldr	r3, [pc, #468]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b75      	ldr	r3, [pc, #468]	; (80034f4 <GetJoystickXYaxisValue+0x204>)
 8003320:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8003324:	4b72      	ldr	r3, [pc, #456]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	4b72      	ldr	r3, [pc, #456]	; (80034f8 <GetJoystickXYaxisValue+0x208>)
 8003330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		Y_axis += IN1[i/2];
 8003334:	4b6e      	ldr	r3, [pc, #440]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	085b      	lsrs	r3, r3, #1
 800333a:	b2db      	uxtb	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	4b6e      	ldr	r3, [pc, #440]	; (80034f8 <GetJoystickXYaxisValue+0x208>)
 8003340:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003344:	4b6d      	ldr	r3, [pc, #436]	; (80034fc <GetJoystickXYaxisValue+0x20c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4413      	add	r3, r2
 800334a:	4a6c      	ldr	r2, [pc, #432]	; (80034fc <GetJoystickXYaxisValue+0x20c>)
 800334c:	6013      	str	r3, [r2, #0]
		if(i == 18)
 800334e:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b12      	cmp	r3, #18
 8003354:	d143      	bne.n	80033de <GetJoystickXYaxisValue+0xee>
		{
			joystickYaxis = Y_axis/10;
 8003356:	4b69      	ldr	r3, [pc, #420]	; (80034fc <GetJoystickXYaxisValue+0x20c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a69      	ldr	r2, [pc, #420]	; (8003500 <GetJoystickXYaxisValue+0x210>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	08db      	lsrs	r3, r3, #3
 8003362:	4a68      	ldr	r2, [pc, #416]	; (8003504 <GetJoystickXYaxisValue+0x214>)
 8003364:	6013      	str	r3, [r2, #0]
			Y_axis = 0;
 8003366:	4b65      	ldr	r3, [pc, #404]	; (80034fc <GetJoystickXYaxisValue+0x20c>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e037      	b.n	80033de <GetJoystickXYaxisValue+0xee>
		}
	}
	else if(i % 2 == 1)
 800336e:	4b60      	ldr	r3, [pc, #384]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d030      	beq.n	80033de <GetJoystickXYaxisValue+0xee>
	{
		IN0[(i-1)/2] = adcRawData[i];
 800337c:	4b5c      	ldr	r3, [pc, #368]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	4b5c      	ldr	r3, [pc, #368]	; (80034f4 <GetJoystickXYaxisValue+0x204>)
 8003384:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8003388:	4b59      	ldr	r3, [pc, #356]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	3b01      	subs	r3, #1
 800338e:	0fda      	lsrs	r2, r3, #31
 8003390:	4413      	add	r3, r2
 8003392:	105b      	asrs	r3, r3, #1
 8003394:	461a      	mov	r2, r3
 8003396:	4b5c      	ldr	r3, [pc, #368]	; (8003508 <GetJoystickXYaxisValue+0x218>)
 8003398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		X_axis += IN0[(i-1)/2];
 800339c:	4b54      	ldr	r3, [pc, #336]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	0fda      	lsrs	r2, r3, #31
 80033a4:	4413      	add	r3, r2
 80033a6:	105b      	asrs	r3, r3, #1
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b57      	ldr	r3, [pc, #348]	; (8003508 <GetJoystickXYaxisValue+0x218>)
 80033ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033b0:	4b56      	ldr	r3, [pc, #344]	; (800350c <GetJoystickXYaxisValue+0x21c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4413      	add	r3, r2
 80033b6:	4a55      	ldr	r2, [pc, #340]	; (800350c <GetJoystickXYaxisValue+0x21c>)
 80033b8:	6013      	str	r3, [r2, #0]
		if(i == 19)
 80033ba:	4b4d      	ldr	r3, [pc, #308]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b13      	cmp	r3, #19
 80033c0:	d10d      	bne.n	80033de <GetJoystickXYaxisValue+0xee>
		{
			joystickXaxis = X_axis/10;
 80033c2:	4b52      	ldr	r3, [pc, #328]	; (800350c <GetJoystickXYaxisValue+0x21c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a4e      	ldr	r2, [pc, #312]	; (8003500 <GetJoystickXYaxisValue+0x210>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	08db      	lsrs	r3, r3, #3
 80033ce:	4a50      	ldr	r2, [pc, #320]	; (8003510 <GetJoystickXYaxisValue+0x220>)
 80033d0:	6013      	str	r3, [r2, #0]
			X_axis = 0;
 80033d2:	4b4e      	ldr	r3, [pc, #312]	; (800350c <GetJoystickXYaxisValue+0x21c>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
			i = 0;
 80033d8:	4b45      	ldr	r3, [pc, #276]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
		}
	}
	i = (i+1)%20;
 80033de:	4b44      	ldr	r3, [pc, #272]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	4b4b      	ldr	r3, [pc, #300]	; (8003514 <GetJoystickXYaxisValue+0x224>)
 80033e6:	fb83 1302 	smull	r1, r3, r3, r2
 80033ea:	10d9      	asrs	r1, r3, #3
 80033ec:	17d3      	asrs	r3, r2, #31
 80033ee:	1ac9      	subs	r1, r1, r3
 80033f0:	460b      	mov	r3, r1
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	1ad1      	subs	r1, r2, r3
 80033fa:	b2ca      	uxtb	r2, r1
 80033fc:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <GetJoystickXYaxisValue+0x200>)
 80033fe:	701a      	strb	r2, [r3, #0]

	if ((JoyStickSwitch == 0) && (SetHomeYFlag == 0) && (joystickYaxis < 2500) && (joystickYaxis > 1400)&& (joystickXaxis < 2500) && (joystickXaxis > 1400))
 8003400:	4b3a      	ldr	r3, [pc, #232]	; (80034ec <GetJoystickXYaxisValue+0x1fc>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d167      	bne.n	80034d8 <GetJoystickXYaxisValue+0x1e8>
 8003408:	4b43      	ldr	r3, [pc, #268]	; (8003518 <GetJoystickXYaxisValue+0x228>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d163      	bne.n	80034d8 <GetJoystickXYaxisValue+0x1e8>
 8003410:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <GetJoystickXYaxisValue+0x214>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003418:	4293      	cmp	r3, r2
 800341a:	d85d      	bhi.n	80034d8 <GetJoystickXYaxisValue+0x1e8>
 800341c:	4b39      	ldr	r3, [pc, #228]	; (8003504 <GetJoystickXYaxisValue+0x214>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003424:	d958      	bls.n	80034d8 <GetJoystickXYaxisValue+0x1e8>
 8003426:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <GetJoystickXYaxisValue+0x220>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800342e:	4293      	cmp	r3, r2
 8003430:	d852      	bhi.n	80034d8 <GetJoystickXYaxisValue+0x1e8>
 8003432:	4b37      	ldr	r3, [pc, #220]	; (8003510 <GetJoystickXYaxisValue+0x220>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800343a:	d94d      	bls.n	80034d8 <GetJoystickXYaxisValue+0x1e8>
	{
		if (JoyStickSwitch_last == 1 && JoyStickSwitch == 0)
 800343c:	4b37      	ldr	r3, [pc, #220]	; (800351c <GetJoystickXYaxisValue+0x22c>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d124      	bne.n	800348e <GetJoystickXYaxisValue+0x19e>
 8003444:	4b29      	ldr	r3, [pc, #164]	; (80034ec <GetJoystickXYaxisValue+0x1fc>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d120      	bne.n	800348e <GetJoystickXYaxisValue+0x19e>
		{
			StartTime = micros(&htim5);
 800344c:	4834      	ldr	r0, [pc, #208]	; (8003520 <GetJoystickXYaxisValue+0x230>)
 800344e:	f7fe fafb 	bl	8001a48 <micros>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4933      	ldr	r1, [pc, #204]	; (8003524 <GetJoystickXYaxisValue+0x234>)
 8003458:	e9c1 2300 	strd	r2, r3, [r1]
			// Keep encoder position xy
			*ptrx = registerFrame[68].U16/10.0; //encoderx
 800345c:	4b32      	ldr	r3, [pc, #200]	; (8003528 <GetJoystickXYaxisValue+0x238>)
 800345e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd f80a 	bl	800047c <__aeabi_i2d>
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	4b2f      	ldr	r3, [pc, #188]	; (800352c <GetJoystickXYaxisValue+0x23c>)
 800346e:	f7fd f999 	bl	80007a4 <__aeabi_ddiv>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f7fd fb19 	bl	8000ab0 <__aeabi_d2f>
 800347e:	4602      	mov	r2, r0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	601a      	str	r2, [r3, #0]
			*ptry = QEIData.position; //encodery25
 8003484:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <GetJoystickXYaxisValue+0x240>)
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e024      	b.n	80034d8 <GetJoystickXYaxisValue+0x1e8>
		}
		else if (JoyStickSwitch_last == 0 && JoyStickSwitch == 0)
 800348e:	4b23      	ldr	r3, [pc, #140]	; (800351c <GetJoystickXYaxisValue+0x22c>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d120      	bne.n	80034d8 <GetJoystickXYaxisValue+0x1e8>
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <GetJoystickXYaxisValue+0x1fc>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d11c      	bne.n	80034d8 <GetJoystickXYaxisValue+0x1e8>
		{
			if ((micros(&htim5) - StartTime) >= 2000000)
 800349e:	4820      	ldr	r0, [pc, #128]	; (8003520 <GetJoystickXYaxisValue+0x230>)
 80034a0:	f7fe fad2 	bl	8001a48 <micros>
 80034a4:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <GetJoystickXYaxisValue+0x234>)
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	1a84      	subs	r4, r0, r2
 80034ac:	eb61 0503 	sbc.w	r5, r1, r3
 80034b0:	4b20      	ldr	r3, [pc, #128]	; (8003534 <GetJoystickXYaxisValue+0x244>)
 80034b2:	429c      	cmp	r4, r3
 80034b4:	f175 0300 	sbcs.w	r3, r5, #0
 80034b8:	d30e      	bcc.n	80034d8 <GetJoystickXYaxisValue+0x1e8>
			{
				//set home x-axis
				registerFrame[64].U16 = 1;
 80034ba:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <GetJoystickXYaxisValue+0x238>)
 80034bc:	2201      	movs	r2, #1
 80034be:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				//set home y-axis
				SetHomeYFlag = 1;
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <GetJoystickXYaxisValue+0x228>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
				StartTime = micros(&htim5);
 80034c8:	4815      	ldr	r0, [pc, #84]	; (8003520 <GetJoystickXYaxisValue+0x230>)
 80034ca:	f7fe fabd 	bl	8001a48 <micros>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4914      	ldr	r1, [pc, #80]	; (8003524 <GetJoystickXYaxisValue+0x234>)
 80034d4:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
	}
	JoyStickSwitch_last = JoyStickSwitch;
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <GetJoystickXYaxisValue+0x1fc>)
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <GetJoystickXYaxisValue+0x22c>)
 80034de:	701a      	strb	r2, [r3, #0]
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bdb0      	pop	{r4, r5, r7, pc}
 80034e8:	40020000 	.word	0x40020000
 80034ec:	20000938 	.word	0x20000938
 80034f0:	20000340 	.word	0x20000340
 80034f4:	200008c0 	.word	0x200008c0
 80034f8:	20000910 	.word	0x20000910
 80034fc:	20000940 	.word	0x20000940
 8003500:	cccccccd 	.word	0xcccccccd
 8003504:	20000948 	.word	0x20000948
 8003508:	200008e8 	.word	0x200008e8
 800350c:	2000093c 	.word	0x2000093c
 8003510:	20000944 	.word	0x20000944
 8003514:	66666667 	.word	0x66666667
 8003518:	20000211 	.word	0x20000211
 800351c:	20000210 	.word	0x20000210
 8003520:	20000608 	.word	0x20000608
 8003524:	20000338 	.word	0x20000338
 8003528:	20000ee8 	.word	0x20000ee8
 800352c:	40240000 	.word	0x40240000
 8003530:	20000888 	.word	0x20000888
 8003534:	001e8480 	.word	0x001e8480

08003538 <JoyStickControlCartesian>:

void JoyStickControlCartesian()
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
	if (SetHomeYFlag == 0)
 800353c:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <JoyStickControlCartesian+0x78>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d132      	bne.n	80035aa <JoyStickControlCartesian+0x72>
	{
		//X-axis
		if(joystickYaxis > 2500) //Left
 8003544:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <JoyStickControlCartesian+0x7c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800354c:	4293      	cmp	r3, r2
 800354e:	d904      	bls.n	800355a <JoyStickControlCartesian+0x22>
		{registerFrame[64].U16 = 4;}
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <JoyStickControlCartesian+0x80>)
 8003552:	2204      	movs	r2, #4
 8003554:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003558:	e00d      	b.n	8003576 <JoyStickControlCartesian+0x3e>

		else if(joystickYaxis < 1400) //Right
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <JoyStickControlCartesian+0x7c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003562:	d204      	bcs.n	800356e <JoyStickControlCartesian+0x36>
		{registerFrame[64].U16 = 8;}
 8003564:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <JoyStickControlCartesian+0x80>)
 8003566:	2208      	movs	r2, #8
 8003568:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800356c:	e003      	b.n	8003576 <JoyStickControlCartesian+0x3e>

		else{registerFrame[64].U16 = 0;}
 800356e:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <JoyStickControlCartesian+0x80>)
 8003570:	2200      	movs	r2, #0
 8003572:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		//Y-axis
		if(joystickXaxis < 1400) //Front
 8003576:	4b11      	ldr	r3, [pc, #68]	; (80035bc <JoyStickControlCartesian+0x84>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800357e:	d203      	bcs.n	8003588 <JoyStickControlCartesian+0x50>
		{PulseWidthModulation = 3000;}
 8003580:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <JoyStickControlCartesian+0x88>)
 8003582:	4a10      	ldr	r2, [pc, #64]	; (80035c4 <JoyStickControlCartesian+0x8c>)
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e00d      	b.n	80035a4 <JoyStickControlCartesian+0x6c>

		else if(joystickXaxis > 2500) //Back
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <JoyStickControlCartesian+0x84>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003590:	4293      	cmp	r3, r2
 8003592:	d903      	bls.n	800359c <JoyStickControlCartesian+0x64>
		{PulseWidthModulation = -3000;}
 8003594:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <JoyStickControlCartesian+0x88>)
 8003596:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <JoyStickControlCartesian+0x90>)
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	e003      	b.n	80035a4 <JoyStickControlCartesian+0x6c>

		else{PulseWidthModulation = 0;}
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <JoyStickControlCartesian+0x88>)
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

		MotorDrive(&htim1);
 80035a4:	4809      	ldr	r0, [pc, #36]	; (80035cc <JoyStickControlCartesian+0x94>)
 80035a6:	f7fe fc25 	bl	8001df4 <MotorDrive>
	}
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000211 	.word	0x20000211
 80035b4:	20000948 	.word	0x20000948
 80035b8:	20000ee8 	.word	0x20000ee8
 80035bc:	20000944 	.word	0x20000944
 80035c0:	200008a4 	.word	0x200008a4
 80035c4:	453b8000 	.word	0x453b8000
 80035c8:	c53b8000 	.word	0xc53b8000
 80035cc:	200004a0 	.word	0x200004a0

080035d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035d4:	f001 f9f6 	bl	80049c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035d8:	f000 f8a0 	bl	800371c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035dc:	f000 fb8c 	bl	8003cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 80035e0:	f000 fb4c 	bl	8003c7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80035e4:	f000 fb1e 	bl	8003c24 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80035e8:	f000 fa82 	bl	8003af0 <MX_TIM5_Init>
  MX_TIM1_Init();
 80035ec:	f000 f98c 	bl	8003908 <MX_TIM1_Init>
  MX_TIM3_Init();
 80035f0:	f000 fa2a 	bl	8003a48 <MX_TIM3_Init>
  MX_TIM11_Init();
 80035f4:	f000 faca 	bl	8003b8c <MX_TIM11_Init>
  MX_ADC1_Init();
 80035f8:	f000 f8f8 	bl	80037ec <MX_ADC1_Init>
  MX_I2C1_Init();
 80035fc:	f000 f956 	bl	80038ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8003600:	4831      	ldr	r0, [pc, #196]	; (80036c8 <main+0xf8>)
 8003602:	f005 fa11 	bl	8008a28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8003606:	4831      	ldr	r0, [pc, #196]	; (80036cc <main+0xfc>)
 8003608:	f005 f9b4 	bl	8008974 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800360c:	213c      	movs	r1, #60	; 0x3c
 800360e:	4830      	ldr	r0, [pc, #192]	; (80036d0 <main+0x100>)
 8003610:	f005 fd02 	bl	8009018 <HAL_TIM_Encoder_Start>

  //eff_write(testMode_cmd);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003614:	2100      	movs	r1, #0
 8003616:	482d      	ldr	r0, [pc, #180]	; (80036cc <main+0xfc>)
 8003618:	f005 fb34 	bl	8008c84 <HAL_TIM_PWM_Start>

  Controller.Kp = 150;
 800361c:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <main+0x104>)
 800361e:	4a2e      	ldr	r2, [pc, #184]	; (80036d8 <main+0x108>)
 8003620:	601a      	str	r2, [r3, #0]
  Controller.Ki = 2.5;
 8003622:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <main+0x104>)
 8003624:	4a2d      	ldr	r2, [pc, #180]	; (80036dc <main+0x10c>)
 8003626:	605a      	str	r2, [r3, #4]
  Controller.Kd = 0;
 8003628:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <main+0x104>)
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	609a      	str	r2, [r3, #8]

  hmodbus.huart = &huart2;
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <main+0x110>)
 8003632:	4a2c      	ldr	r2, [pc, #176]	; (80036e4 <main+0x114>)
 8003634:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 8003636:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <main+0x110>)
 8003638:	4a2b      	ldr	r2, [pc, #172]	; (80036e8 <main+0x118>)
 800363a:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 800363c:	4b28      	ldr	r3, [pc, #160]	; (80036e0 <main+0x110>)
 800363e:	2215      	movs	r2, #21
 8003640:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =70;
 8003642:	4b27      	ldr	r3, [pc, #156]	; (80036e0 <main+0x110>)
 8003644:	2246      	movs	r2, #70	; 0x46
 8003646:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8003648:	4928      	ldr	r1, [pc, #160]	; (80036ec <main+0x11c>)
 800364a:	4825      	ldr	r0, [pc, #148]	; (80036e0 <main+0x110>)
 800364c:	f7fe fdf8 	bl	8002240 <Modbus_init>

  //joy stick--------------------------
  HAL_ADC_Start_DMA(&hadc1, adcRawData, 20);
 8003650:	2214      	movs	r2, #20
 8003652:	4927      	ldr	r1, [pc, #156]	; (80036f0 <main+0x120>)
 8003654:	4827      	ldr	r0, [pc, #156]	; (80036f4 <main+0x124>)
 8003656:	f001 fa6b 	bl	8004b30 <HAL_ADC_Start_DMA>
  //-----------------------------------

	PickTray9holes[1] = 300;
 800365a:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <main+0x128>)
 800365c:	4a27      	ldr	r2, [pc, #156]	; (80036fc <main+0x12c>)
 800365e:	605a      	str	r2, [r3, #4]
	PlaceTray9holes[1] = -300;
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <main+0x130>)
 8003662:	4a28      	ldr	r2, [pc, #160]	; (8003704 <main+0x134>)
 8003664:	605a      	str	r2, [r3, #4]
	PickTray9holes[3] = 300;
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <main+0x128>)
 8003668:	4a24      	ldr	r2, [pc, #144]	; (80036fc <main+0x12c>)
 800366a:	60da      	str	r2, [r3, #12]
	PlaceTray9holes[3] = -300;
 800366c:	4b24      	ldr	r3, [pc, #144]	; (8003700 <main+0x130>)
 800366e:	4a25      	ldr	r2, [pc, #148]	; (8003704 <main+0x134>)
 8003670:	60da      	str	r2, [r3, #12]
	PickTray9holes[5] = 200;
 8003672:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <main+0x128>)
 8003674:	4a24      	ldr	r2, [pc, #144]	; (8003708 <main+0x138>)
 8003676:	615a      	str	r2, [r3, #20]
	PlaceTray9holes[5] = -200;
 8003678:	4b21      	ldr	r3, [pc, #132]	; (8003700 <main+0x130>)
 800367a:	4a24      	ldr	r2, [pc, #144]	; (800370c <main+0x13c>)
 800367c:	615a      	str	r2, [r3, #20]
	PickTray9holes[7] = 200;
 800367e:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <main+0x128>)
 8003680:	4a21      	ldr	r2, [pc, #132]	; (8003708 <main+0x138>)
 8003682:	61da      	str	r2, [r3, #28]
	PlaceTray9holes[7] = -200;
 8003684:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <main+0x130>)
 8003686:	4a21      	ldr	r2, [pc, #132]	; (800370c <main+0x13c>)
 8003688:	61da      	str	r2, [r3, #28]
	PickTray9holes[9] = 100;
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <main+0x128>)
 800368c:	4a20      	ldr	r2, [pc, #128]	; (8003710 <main+0x140>)
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
	PlaceTray9holes[9] = -100;
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <main+0x130>)
 8003692:	4a20      	ldr	r2, [pc, #128]	; (8003714 <main+0x144>)
 8003694:	625a      	str	r2, [r3, #36]	; 0x24
	PickTray9holes[11] = 100;
 8003696:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <main+0x128>)
 8003698:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <main+0x140>)
 800369a:	62da      	str	r2, [r3, #44]	; 0x2c
	PlaceTray9holes[11] = -100;
 800369c:	4b18      	ldr	r3, [pc, #96]	; (8003700 <main+0x130>)
 800369e:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <main+0x144>)
 80036a0:	62da      	str	r2, [r3, #44]	; 0x2c
	PickTray9holes[13] = 100;
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <main+0x128>)
 80036a4:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <main+0x140>)
 80036a6:	635a      	str	r2, [r3, #52]	; 0x34
	PlaceTray9holes[13] = -100;
 80036a8:	4b15      	ldr	r3, [pc, #84]	; (8003700 <main+0x130>)
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <main+0x144>)
 80036ac:	635a      	str	r2, [r3, #52]	; 0x34
	PickTray9holes[15] = 200;
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <main+0x128>)
 80036b0:	4a15      	ldr	r2, [pc, #84]	; (8003708 <main+0x138>)
 80036b2:	63da      	str	r2, [r3, #60]	; 0x3c
	PlaceTray9holes[15] = -300;
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <main+0x130>)
 80036b6:	4a13      	ldr	r2, [pc, #76]	; (8003704 <main+0x134>)
 80036b8:	63da      	str	r2, [r3, #60]	; 0x3c
	PickTray9holes[17] = 300;
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <main+0x128>)
 80036bc:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <main+0x12c>)
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
	PlaceTray9holes[17] = -50;
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <main+0x130>)
 80036c2:	4a15      	ldr	r2, [pc, #84]	; (8003718 <main+0x148>)
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
//  	PlaceTray9holes[17] = -300;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036c6:	e7fe      	b.n	80036c6 <main+0xf6>
 80036c8:	20000608 	.word	0x20000608
 80036cc:	200004a0 	.word	0x200004a0
 80036d0:	20000554 	.word	0x20000554
 80036d4:	200008ac 	.word	0x200008ac
 80036d8:	43160000 	.word	0x43160000
 80036dc:	40200000 	.word	0x40200000
 80036e0:	20000a10 	.word	0x20000a10
 80036e4:	20000770 	.word	0x20000770
 80036e8:	200006bc 	.word	0x200006bc
 80036ec:	20000ee8 	.word	0x20000ee8
 80036f0:	200008c0 	.word	0x200008c0
 80036f4:	20000344 	.word	0x20000344
 80036f8:	20000964 	.word	0x20000964
 80036fc:	43960000 	.word	0x43960000
 8003700:	200009c4 	.word	0x200009c4
 8003704:	c3960000 	.word	0xc3960000
 8003708:	43480000 	.word	0x43480000
 800370c:	c3480000 	.word	0xc3480000
 8003710:	42c80000 	.word	0x42c80000
 8003714:	c2c80000 	.word	0xc2c80000
 8003718:	c2480000 	.word	0xc2480000

0800371c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b094      	sub	sp, #80	; 0x50
 8003720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003722:	f107 0320 	add.w	r3, r7, #32
 8003726:	2230      	movs	r2, #48	; 0x30
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f008 f888 	bl	800b840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	2300      	movs	r3, #0
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <SystemClock_Config+0xc8>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	4a26      	ldr	r2, [pc, #152]	; (80037e4 <SystemClock_Config+0xc8>)
 800374a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374e:	6413      	str	r3, [r2, #64]	; 0x40
 8003750:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <SystemClock_Config+0xc8>)
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800375c:	2300      	movs	r3, #0
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <SystemClock_Config+0xcc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <SystemClock_Config+0xcc>)
 8003766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <SystemClock_Config+0xcc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003774:	607b      	str	r3, [r7, #4]
 8003776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003778:	2302      	movs	r3, #2
 800377a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800377c:	2301      	movs	r3, #1
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003780:	2310      	movs	r3, #16
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003784:	2302      	movs	r3, #2
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003788:	2300      	movs	r3, #0
 800378a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800378c:	2308      	movs	r3, #8
 800378e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003790:	2364      	movs	r3, #100	; 0x64
 8003792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003794:	2302      	movs	r3, #2
 8003796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003798:	2304      	movs	r3, #4
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800379c:	f107 0320 	add.w	r3, r7, #32
 80037a0:	4618      	mov	r0, r3
 80037a2:	f004 fbf3 	bl	8007f8c <HAL_RCC_OscConfig>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037ac:	f000 fd84 	bl	80042b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037b0:	230f      	movs	r3, #15
 80037b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037b4:	2302      	movs	r3, #2
 80037b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80037c6:	f107 030c 	add.w	r3, r7, #12
 80037ca:	2103      	movs	r1, #3
 80037cc:	4618      	mov	r0, r3
 80037ce:	f004 fe55 	bl	800847c <HAL_RCC_ClockConfig>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80037d8:	f000 fd6e 	bl	80042b8 <Error_Handler>
  }
}
 80037dc:	bf00      	nop
 80037de:	3750      	adds	r7, #80	; 0x50
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40007000 	.word	0x40007000

080037ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
//#define break while(1){}
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037f2:	463b      	mov	r3, r7
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80037fe:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <MX_ADC1_Init+0xb4>)
 8003800:	4a28      	ldr	r2, [pc, #160]	; (80038a4 <MX_ADC1_Init+0xb8>)
 8003802:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003804:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <MX_ADC1_Init+0xb4>)
 8003806:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800380a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800380c:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <MX_ADC1_Init+0xb4>)
 800380e:	2200      	movs	r2, #0
 8003810:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003812:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <MX_ADC1_Init+0xb4>)
 8003814:	2201      	movs	r2, #1
 8003816:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003818:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <MX_ADC1_Init+0xb4>)
 800381a:	2201      	movs	r2, #1
 800381c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <MX_ADC1_Init+0xb4>)
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003826:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <MX_ADC1_Init+0xb4>)
 8003828:	2200      	movs	r2, #0
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800382c:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <MX_ADC1_Init+0xb4>)
 800382e:	4a1e      	ldr	r2, [pc, #120]	; (80038a8 <MX_ADC1_Init+0xbc>)
 8003830:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <MX_ADC1_Init+0xb4>)
 8003834:	2200      	movs	r2, #0
 8003836:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <MX_ADC1_Init+0xb4>)
 800383a:	2202      	movs	r2, #2
 800383c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <MX_ADC1_Init+0xb4>)
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <MX_ADC1_Init+0xb4>)
 8003848:	2201      	movs	r2, #1
 800384a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800384c:	4814      	ldr	r0, [pc, #80]	; (80038a0 <MX_ADC1_Init+0xb4>)
 800384e:	f001 f92b 	bl	8004aa8 <HAL_ADC_Init>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003858:	f000 fd2e 	bl	80042b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800385c:	2300      	movs	r3, #0
 800385e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003860:	2301      	movs	r3, #1
 8003862:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003864:	2303      	movs	r3, #3
 8003866:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003868:	463b      	mov	r3, r7
 800386a:	4619      	mov	r1, r3
 800386c:	480c      	ldr	r0, [pc, #48]	; (80038a0 <MX_ADC1_Init+0xb4>)
 800386e:	f001 fa6d 	bl	8004d4c <HAL_ADC_ConfigChannel>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003878:	f000 fd1e 	bl	80042b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800387c:	2301      	movs	r3, #1
 800387e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003880:	2302      	movs	r3, #2
 8003882:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003884:	463b      	mov	r3, r7
 8003886:	4619      	mov	r1, r3
 8003888:	4805      	ldr	r0, [pc, #20]	; (80038a0 <MX_ADC1_Init+0xb4>)
 800388a:	f001 fa5f 	bl	8004d4c <HAL_ADC_ConfigChannel>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003894:	f000 fd10 	bl	80042b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000344 	.word	0x20000344
 80038a4:	40012000 	.word	0x40012000
 80038a8:	0f000001 	.word	0x0f000001

080038ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <MX_I2C1_Init+0x50>)
 80038b2:	4a13      	ldr	r2, [pc, #76]	; (8003900 <MX_I2C1_Init+0x54>)
 80038b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80038b6:	4b11      	ldr	r3, [pc, #68]	; (80038fc <MX_I2C1_Init+0x50>)
 80038b8:	4a12      	ldr	r2, [pc, #72]	; (8003904 <MX_I2C1_Init+0x58>)
 80038ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <MX_I2C1_Init+0x50>)
 80038be:	2200      	movs	r2, #0
 80038c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <MX_I2C1_Init+0x50>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <MX_I2C1_Init+0x50>)
 80038ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <MX_I2C1_Init+0x50>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <MX_I2C1_Init+0x50>)
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <MX_I2C1_Init+0x50>)
 80038de:	2200      	movs	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <MX_I2C1_Init+0x50>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <MX_I2C1_Init+0x50>)
 80038ea:	f002 fbdb 	bl	80060a4 <HAL_I2C_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80038f4:	f000 fce0 	bl	80042b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200003ec 	.word	0x200003ec
 8003900:	40005400 	.word	0x40005400
 8003904:	000186a0 	.word	0x000186a0

08003908 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b096      	sub	sp, #88	; 0x58
 800390c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800390e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800391c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	609a      	str	r2, [r3, #8]
 8003932:	60da      	str	r2, [r3, #12]
 8003934:	611a      	str	r2, [r3, #16]
 8003936:	615a      	str	r2, [r3, #20]
 8003938:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800393a:	1d3b      	adds	r3, r7, #4
 800393c:	2220      	movs	r2, #32
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f007 ff7d 	bl	800b840 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003946:	4b3e      	ldr	r3, [pc, #248]	; (8003a40 <MX_TIM1_Init+0x138>)
 8003948:	4a3e      	ldr	r2, [pc, #248]	; (8003a44 <MX_TIM1_Init+0x13c>)
 800394a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800394c:	4b3c      	ldr	r3, [pc, #240]	; (8003a40 <MX_TIM1_Init+0x138>)
 800394e:	2200      	movs	r2, #0
 8003950:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003952:	4b3b      	ldr	r3, [pc, #236]	; (8003a40 <MX_TIM1_Init+0x138>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8003958:	4b39      	ldr	r3, [pc, #228]	; (8003a40 <MX_TIM1_Init+0x138>)
 800395a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800395e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003960:	4b37      	ldr	r3, [pc, #220]	; (8003a40 <MX_TIM1_Init+0x138>)
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003966:	4b36      	ldr	r3, [pc, #216]	; (8003a40 <MX_TIM1_Init+0x138>)
 8003968:	2200      	movs	r2, #0
 800396a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800396c:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <MX_TIM1_Init+0x138>)
 800396e:	2200      	movs	r2, #0
 8003970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003972:	4833      	ldr	r0, [pc, #204]	; (8003a40 <MX_TIM1_Init+0x138>)
 8003974:	f004 ffa2 	bl	80088bc <HAL_TIM_Base_Init>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800397e:	f000 fc9b 	bl	80042b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003986:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003988:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800398c:	4619      	mov	r1, r3
 800398e:	482c      	ldr	r0, [pc, #176]	; (8003a40 <MX_TIM1_Init+0x138>)
 8003990:	f005 fe16 	bl	80095c0 <HAL_TIM_ConfigClockSource>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800399a:	f000 fc8d 	bl	80042b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800399e:	4828      	ldr	r0, [pc, #160]	; (8003a40 <MX_TIM1_Init+0x138>)
 80039a0:	f005 f90a 	bl	8008bb8 <HAL_TIM_PWM_Init>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80039aa:	f000 fc85 	bl	80042b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ae:	2300      	movs	r3, #0
 80039b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80039b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039ba:	4619      	mov	r1, r3
 80039bc:	4820      	ldr	r0, [pc, #128]	; (8003a40 <MX_TIM1_Init+0x138>)
 80039be:	f006 fb8f 	bl	800a0e0 <HAL_TIMEx_MasterConfigSynchronization>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80039c8:	f000 fc76 	bl	80042b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039cc:	2360      	movs	r3, #96	; 0x60
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039d4:	2300      	movs	r3, #0
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039d8:	2300      	movs	r3, #0
 80039da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039dc:	2300      	movs	r3, #0
 80039de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039e0:	2300      	movs	r3, #0
 80039e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039e4:	2300      	movs	r3, #0
 80039e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ec:	2200      	movs	r2, #0
 80039ee:	4619      	mov	r1, r3
 80039f0:	4813      	ldr	r0, [pc, #76]	; (8003a40 <MX_TIM1_Init+0x138>)
 80039f2:	f005 fd23 	bl	800943c <HAL_TIM_PWM_ConfigChannel>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80039fc:	f000 fc5c 	bl	80042b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a18:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4807      	ldr	r0, [pc, #28]	; (8003a40 <MX_TIM1_Init+0x138>)
 8003a24:	f006 fbca 	bl	800a1bc <HAL_TIMEx_ConfigBreakDeadTime>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003a2e:	f000 fc43 	bl	80042b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003a32:	4803      	ldr	r0, [pc, #12]	; (8003a40 <MX_TIM1_Init+0x138>)
 8003a34:	f000 fe24 	bl	8004680 <HAL_TIM_MspPostInit>

}
 8003a38:	bf00      	nop
 8003a3a:	3758      	adds	r7, #88	; 0x58
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	200004a0 	.word	0x200004a0
 8003a44:	40010000 	.word	0x40010000

08003a48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	; 0x30
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a4e:	f107 030c 	add.w	r3, r7, #12
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f007 fef2 	bl	800b840 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a5c:	1d3b      	adds	r3, r7, #4
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a64:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <MX_TIM3_Init+0xa0>)
 8003a66:	4a21      	ldr	r2, [pc, #132]	; (8003aec <MX_TIM3_Init+0xa4>)
 8003a68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <MX_TIM3_Init+0xa0>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a70:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <MX_TIM3_Init+0xa0>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD - 1;
 8003a76:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <MX_TIM3_Init+0xa0>)
 8003a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <MX_TIM3_Init+0xa0>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a84:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <MX_TIM3_Init+0xa0>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a92:	2301      	movs	r3, #1
 8003a94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003aae:	f107 030c 	add.w	r3, r7, #12
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	480c      	ldr	r0, [pc, #48]	; (8003ae8 <MX_TIM3_Init+0xa0>)
 8003ab6:	f005 f9fb 	bl	8008eb0 <HAL_TIM_Encoder_Init>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003ac0:	f000 fbfa 	bl	80042b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003acc:	1d3b      	adds	r3, r7, #4
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4805      	ldr	r0, [pc, #20]	; (8003ae8 <MX_TIM3_Init+0xa0>)
 8003ad2:	f006 fb05 	bl	800a0e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003adc:	f000 fbec 	bl	80042b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ae0:	bf00      	nop
 8003ae2:	3730      	adds	r7, #48	; 0x30
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000554 	.word	0x20000554
 8003aec:	40000400 	.word	0x40000400

08003af0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003af6:	f107 0308 	add.w	r3, r7, #8
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b04:	463b      	mov	r3, r7
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <MX_TIM5_Init+0x90>)
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <MX_TIM5_Init+0x94>)
 8003b10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <MX_TIM5_Init+0x90>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b18:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <MX_TIM5_Init+0x90>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8003b1e:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <MX_TIM5_Init+0x90>)
 8003b20:	4a19      	ldr	r2, [pc, #100]	; (8003b88 <MX_TIM5_Init+0x98>)
 8003b22:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b24:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <MX_TIM5_Init+0x90>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b2a:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <MX_TIM5_Init+0x90>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003b30:	4813      	ldr	r0, [pc, #76]	; (8003b80 <MX_TIM5_Init+0x90>)
 8003b32:	f004 fec3 	bl	80088bc <HAL_TIM_Base_Init>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8003b3c:	f000 fbbc 	bl	80042b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003b46:	f107 0308 	add.w	r3, r7, #8
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	480c      	ldr	r0, [pc, #48]	; (8003b80 <MX_TIM5_Init+0x90>)
 8003b4e:	f005 fd37 	bl	80095c0 <HAL_TIM_ConfigClockSource>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8003b58:	f000 fbae 	bl	80042b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003b64:	463b      	mov	r3, r7
 8003b66:	4619      	mov	r1, r3
 8003b68:	4805      	ldr	r0, [pc, #20]	; (8003b80 <MX_TIM5_Init+0x90>)
 8003b6a:	f006 fab9 	bl	800a0e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8003b74:	f000 fba0 	bl	80042b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003b78:	bf00      	nop
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000608 	.word	0x20000608
 8003b84:	40000c00 	.word	0x40000c00
 8003b88:	0001869f 	.word	0x0001869f

08003b8c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b92:	1d3b      	adds	r3, r7, #4
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
 8003ba0:	615a      	str	r2, [r3, #20]
 8003ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <MX_TIM11_Init+0x90>)
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <MX_TIM11_Init+0x94>)
 8003ba8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003baa:	4b1c      	ldr	r3, [pc, #112]	; (8003c1c <MX_TIM11_Init+0x90>)
 8003bac:	2263      	movs	r2, #99	; 0x63
 8003bae:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <MX_TIM11_Init+0x90>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8003bb6:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <MX_TIM11_Init+0x90>)
 8003bb8:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8003bbc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bbe:	4b17      	ldr	r3, [pc, #92]	; (8003c1c <MX_TIM11_Init+0x90>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc4:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <MX_TIM11_Init+0x90>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003bca:	4814      	ldr	r0, [pc, #80]	; (8003c1c <MX_TIM11_Init+0x90>)
 8003bcc:	f004 fe76 	bl	80088bc <HAL_TIM_Base_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003bd6:	f000 fb6f 	bl	80042b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8003bda:	4810      	ldr	r0, [pc, #64]	; (8003c1c <MX_TIM11_Init+0x90>)
 8003bdc:	f004 ff86 	bl	8008aec <HAL_TIM_OC_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003be6:	f000 fb67 	bl	80042b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003bea:	2310      	movs	r3, #16
 8003bec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8003bee:	f240 5399 	movw	r3, #1433	; 0x599
 8003bf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4619      	mov	r1, r3
 8003c02:	4806      	ldr	r0, [pc, #24]	; (8003c1c <MX_TIM11_Init+0x90>)
 8003c04:	f005 fbbe 	bl	8009384 <HAL_TIM_OC_ConfigChannel>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8003c0e:	f000 fb53 	bl	80042b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003c12:	bf00      	nop
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200006bc 	.word	0x200006bc
 8003c20:	40014800 	.word	0x40014800

08003c24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <MX_USART2_UART_Init+0x50>)
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <MX_USART2_UART_Init+0x54>)
 8003c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <MX_USART2_UART_Init+0x50>)
 8003c30:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003c36:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <MX_USART2_UART_Init+0x50>)
 8003c38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c3c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <MX_USART2_UART_Init+0x50>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <MX_USART2_UART_Init+0x50>)
 8003c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <MX_USART2_UART_Init+0x50>)
 8003c4e:	220c      	movs	r2, #12
 8003c50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <MX_USART2_UART_Init+0x50>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <MX_USART2_UART_Init+0x50>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c5e:	4805      	ldr	r0, [pc, #20]	; (8003c74 <MX_USART2_UART_Init+0x50>)
 8003c60:	f006 fb1c 	bl	800a29c <HAL_UART_Init>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8003c6a:	f000 fb25 	bl	80042b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000770 	.word	0x20000770
 8003c78:	40004400 	.word	0x40004400

08003c7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <MX_DMA_Init+0x78>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <MX_DMA_Init+0x78>)
 8003c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c90:	6313      	str	r3, [r2, #48]	; 0x30
 8003c92:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <MX_DMA_Init+0x78>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c9a:	607b      	str	r3, [r7, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <MX_DMA_Init+0x78>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	4a13      	ldr	r2, [pc, #76]	; (8003cf4 <MX_DMA_Init+0x78>)
 8003ca8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cac:	6313      	str	r3, [r2, #48]	; 0x30
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <MX_DMA_Init+0x78>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	200b      	movs	r0, #11
 8003cc0:	f001 fbcf 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003cc4:	200b      	movs	r0, #11
 8003cc6:	f001 fbe8 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2011      	movs	r0, #17
 8003cd0:	f001 fbc7 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003cd4:	2011      	movs	r0, #17
 8003cd6:	f001 fbe0 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2100      	movs	r1, #0
 8003cde:	2038      	movs	r0, #56	; 0x38
 8003ce0:	f001 fbbf 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003ce4:	2038      	movs	r0, #56	; 0x38
 8003ce6:	f001 fbd8 	bl	800549a <HAL_NVIC_EnableIRQ>

}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800

08003cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	609a      	str	r2, [r3, #8]
 8003d0a:	60da      	str	r2, [r3, #12]
 8003d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	4b63      	ldr	r3, [pc, #396]	; (8003ea0 <MX_GPIO_Init+0x1a8>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	4a62      	ldr	r2, [pc, #392]	; (8003ea0 <MX_GPIO_Init+0x1a8>)
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1e:	4b60      	ldr	r3, [pc, #384]	; (8003ea0 <MX_GPIO_Init+0x1a8>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	4b5c      	ldr	r3, [pc, #368]	; (8003ea0 <MX_GPIO_Init+0x1a8>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a5b      	ldr	r2, [pc, #364]	; (8003ea0 <MX_GPIO_Init+0x1a8>)
 8003d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <MX_GPIO_Init+0x1a8>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	4b55      	ldr	r3, [pc, #340]	; (8003ea0 <MX_GPIO_Init+0x1a8>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a54      	ldr	r2, [pc, #336]	; (8003ea0 <MX_GPIO_Init+0x1a8>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b52      	ldr	r3, [pc, #328]	; (8003ea0 <MX_GPIO_Init+0x1a8>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	4b4e      	ldr	r3, [pc, #312]	; (8003ea0 <MX_GPIO_Init+0x1a8>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a4d      	ldr	r2, [pc, #308]	; (8003ea0 <MX_GPIO_Init+0x1a8>)
 8003d6c:	f043 0302 	orr.w	r3, r3, #2
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b4b      	ldr	r3, [pc, #300]	; (8003ea0 <MX_GPIO_Init+0x1a8>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8003d84:	4847      	ldr	r0, [pc, #284]	; (8003ea4 <MX_GPIO_Init+0x1ac>)
 8003d86:	f002 f95b 	bl	8006040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003d90:	4845      	ldr	r0, [pc, #276]	; (8003ea8 <MX_GPIO_Init+0x1b0>)
 8003d92:	f002 f955 	bl	8006040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d9c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003da6:	f107 0314 	add.w	r3, r7, #20
 8003daa:	4619      	mov	r1, r3
 8003dac:	483f      	ldr	r0, [pc, #252]	; (8003eac <MX_GPIO_Init+0x1b4>)
 8003dae:	f001 ffab 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003db2:	2310      	movs	r3, #16
 8003db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dbe:	f107 0314 	add.w	r3, r7, #20
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4837      	ldr	r0, [pc, #220]	; (8003ea4 <MX_GPIO_Init+0x1ac>)
 8003dc6:	f001 ff9f 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 8003dca:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8003dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	4619      	mov	r1, r3
 8003de2:	4830      	ldr	r0, [pc, #192]	; (8003ea4 <MX_GPIO_Init+0x1ac>)
 8003de4:	f001 ff90 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003de8:	2306      	movs	r3, #6
 8003dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003dec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003df2:	2301      	movs	r3, #1
 8003df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df6:	f107 0314 	add.w	r3, r7, #20
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	482a      	ldr	r0, [pc, #168]	; (8003ea8 <MX_GPIO_Init+0x1b0>)
 8003dfe:	f001 ff83 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003e08:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e12:	f107 0314 	add.w	r3, r7, #20
 8003e16:	4619      	mov	r1, r3
 8003e18:	4823      	ldr	r0, [pc, #140]	; (8003ea8 <MX_GPIO_Init+0x1b0>)
 8003e1a:	f001 ff75 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e1e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e24:	2301      	movs	r3, #1
 8003e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	4619      	mov	r1, r3
 8003e36:	481c      	ldr	r0, [pc, #112]	; (8003ea8 <MX_GPIO_Init+0x1b0>)
 8003e38:	f001 ff66 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4c:	f107 0314 	add.w	r3, r7, #20
 8003e50:	4619      	mov	r1, r3
 8003e52:	4814      	ldr	r0, [pc, #80]	; (8003ea4 <MX_GPIO_Init+0x1ac>)
 8003e54:	f001 ff58 	bl	8005d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	2007      	movs	r0, #7
 8003e5e:	f001 fb00 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003e62:	2007      	movs	r0, #7
 8003e64:	f001 fb19 	bl	800549a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	2008      	movs	r0, #8
 8003e6e:	f001 faf8 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003e72:	2008      	movs	r0, #8
 8003e74:	f001 fb11 	bl	800549a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	2017      	movs	r0, #23
 8003e7e:	f001 faf0 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e82:	2017      	movs	r0, #23
 8003e84:	f001 fb09 	bl	800549a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2028      	movs	r0, #40	; 0x28
 8003e8e:	f001 fae8 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e92:	2028      	movs	r0, #40	; 0x28
 8003e94:	f001 fb01 	bl	800549a <HAL_NVIC_EnableIRQ>

}
 8003e98:	bf00      	nop
 8003e9a:	3728      	adds	r7, #40	; 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40020000 	.word	0x40020000
 8003ea8:	40020400 	.word	0x40020400
 8003eac:	40020800 	.word	0x40020800

08003eb0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b5b0      	push	{r4, r5, r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a51      	ldr	r2, [pc, #324]	; (8004000 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	f040 809a 	bne.w	8003ff6 <HAL_TIM_PeriodElapsedCallback+0x146>
	{
		_micros += 1000;
 8003ec2:	4b50      	ldr	r3, [pc, #320]	; (8004004 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8003ecc:	f143 0500 	adc.w	r5, r3, #0
 8003ed0:	4b4c      	ldr	r3, [pc, #304]	; (8004004 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003ed2:	e9c3 4500 	strd	r4, r5, [r3]
		QEIEncoderPositionVelocity_Update(&htim3, &htim5);
 8003ed6:	494a      	ldr	r1, [pc, #296]	; (8004000 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003ed8:	484b      	ldr	r0, [pc, #300]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003eda:	f7fd fded 	bl	8001ab8 <QEIEncoderPositionVelocity_Update>

		check_pe();
 8003ede:	f7fd ff3b 	bl	8001d58 <check_pe>
		SetHome(&htim3, &htim1);
 8003ee2:	494a      	ldr	r1, [pc, #296]	; (800400c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003ee4:	4848      	ldr	r0, [pc, #288]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003ee6:	f7fe f817 	bl	8001f18 <SetHome>

		if (EndEffectorSoftResetFlag)
 8003eea:	4b49      	ldr	r3, [pc, #292]	; (8004010 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			eff_write(softReset_cmd);
 8003ef2:	4848      	ldr	r0, [pc, #288]	; (8004014 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003ef4:	f7fd ff5e 	bl	8001db4 <eff_write>
			EndEffectorSoftResetFlag = 0;
 8003ef8:	4b45      	ldr	r3, [pc, #276]	; (8004010 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	701a      	strb	r2, [r3, #0]
		}

		if ((SetPickTrayFlag == 0) && (SetPlaceTrayFlag == 0) && (SetHomeFlag == 0) && (RunTrayFlag == 0) && (RunPointFlag == 0))
 8003efe:	4b46      	ldr	r3, [pc, #280]	; (8004018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d14c      	bne.n	8003fa0 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8003f06:	4b45      	ldr	r3, [pc, #276]	; (800401c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d148      	bne.n	8003fa0 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8003f0e:	4b44      	ldr	r3, [pc, #272]	; (8004020 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d144      	bne.n	8003fa0 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8003f16:	4b43      	ldr	r3, [pc, #268]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d140      	bne.n	8003fa0 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8003f1e:	4b42      	ldr	r3, [pc, #264]	; (8004028 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d13c      	bne.n	8003fa0 <HAL_TIM_PeriodElapsedCallback+0xf0>
		{
			switch (registerFrame[1].U16)
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003f28:	885b      	ldrh	r3, [r3, #2]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	2b0f      	cmp	r3, #15
 8003f2e:	d838      	bhi.n	8003fa2 <HAL_TIM_PeriodElapsedCallback+0xf2>
 8003f30:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f79 	.word	0x08003f79
 8003f3c:	08003f81 	.word	0x08003f81
 8003f40:	08003fa3 	.word	0x08003fa3
 8003f44:	08003f89 	.word	0x08003f89
 8003f48:	08003fa3 	.word	0x08003fa3
 8003f4c:	08003fa3 	.word	0x08003fa3
 8003f50:	08003fa3 	.word	0x08003fa3
 8003f54:	08003f91 	.word	0x08003f91
 8003f58:	08003fa3 	.word	0x08003fa3
 8003f5c:	08003fa3 	.word	0x08003fa3
 8003f60:	08003fa3 	.word	0x08003fa3
 8003f64:	08003fa3 	.word	0x08003fa3
 8003f68:	08003fa3 	.word	0x08003fa3
 8003f6c:	08003fa3 	.word	0x08003fa3
 8003f70:	08003fa3 	.word	0x08003fa3
 8003f74:	08003f99 	.word	0x08003f99
			{
			case 0b00001:
				SetPickTrayFlag = 1;
 8003f78:	4b27      	ldr	r3, [pc, #156]	; (8004018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
			break;
 8003f7e:	e010      	b.n	8003fa2 <HAL_TIM_PeriodElapsedCallback+0xf2>
			case 0b00010:
				SetPlaceTrayFlag = 1;
 8003f80:	4b26      	ldr	r3, [pc, #152]	; (800401c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	701a      	strb	r2, [r3, #0]
			break;
 8003f86:	e00c      	b.n	8003fa2 <HAL_TIM_PeriodElapsedCallback+0xf2>
			case 0b00100:
				SetHomeFlag = 1;
 8003f88:	4b25      	ldr	r3, [pc, #148]	; (8004020 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]
			break;
 8003f8e:	e008      	b.n	8003fa2 <HAL_TIM_PeriodElapsedCallback+0xf2>
			case 0b01000:
				RunTrayFlag = 1;
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
			break;
 8003f96:	e004      	b.n	8003fa2 <HAL_TIM_PeriodElapsedCallback+0xf2>
			case 0b10000:
				RunPointFlag = 1;
 8003f98:	4b23      	ldr	r3, [pc, #140]	; (8004028 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	701a      	strb	r2, [r3, #0]
			break;
 8003f9e:	e000      	b.n	8003fa2 <HAL_TIM_PeriodElapsedCallback+0xf2>
			}
		}
 8003fa0:	bf00      	nop

		if (emer_pushed)
 8003fa2:	4b23      	ldr	r3, [pc, #140]	; (8004030 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_TIM_PeriodElapsedCallback+0x10e>
		{
			BaseSystem_SetPickTray();
 8003faa:	f7fd f93d 	bl	8001228 <BaseSystem_SetPickTray>
			BaseSystem_SetPlaceTray();
 8003fae:	f7fd fa63 	bl	8001478 <BaseSystem_SetPlaceTray>
			BaseSystem_SetHome();
 8003fb2:	f7fd f89b 	bl	80010ec <BaseSystem_SetHome>
			BaseSystem_RuntrayMode();
 8003fb6:	f7fd fb87 	bl	80016c8 <BaseSystem_RuntrayMode>
			BaseSystem_RunPointMode();
 8003fba:	f7fd f8d5 	bl	8001168 <BaseSystem_RunPointMode>
		}

		static uint8_t i = 0;
		if (i == 0)
 8003fbe:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d107      	bne.n	8003fd6 <HAL_TIM_PeriodElapsedCallback+0x126>
		{
			registerFrame[0].U16 = 0b0101100101100001; //Ya 22881
 8003fc6:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003fc8:	f645 1261 	movw	r2, #22881	; 0x5961
 8003fcc:	801a      	strh	r2, [r3, #0]
			eff_st();
 8003fce:	f7fd fce7 	bl	80019a0 <eff_st>
			Modbus_Protocal_Worker();
 8003fd2:	f7fe f9c1 	bl	8002358 <Modbus_Protocal_Worker>
		}
		i = (i + 1) % 100;
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	4a16      	ldr	r2, [pc, #88]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003fde:	fb82 1203 	smull	r1, r2, r2, r3
 8003fe2:	1151      	asrs	r1, r2, #5
 8003fe4:	17da      	asrs	r2, r3, #31
 8003fe6:	1a8a      	subs	r2, r1, r2
 8003fe8:	2164      	movs	r1, #100	; 0x64
 8003fea:	fb01 f202 	mul.w	r2, r1, r2
 8003fee:	1a9a      	subs	r2, r3, r2
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003ff4:	701a      	strb	r2, [r3, #0]
	}
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000608 	.word	0x20000608
 8004004:	20000880 	.word	0x20000880
 8004008:	20000554 	.word	0x20000554
 800400c:	200004a0 	.word	0x200004a0
 8004010:	20000238 	.word	0x20000238
 8004014:	20000214 	.word	0x20000214
 8004018:	20000f74 	.word	0x20000f74
 800401c:	20000f75 	.word	0x20000f75
 8004020:	20000f76 	.word	0x20000f76
 8004024:	20000f77 	.word	0x20000f77
 8004028:	20000f78 	.word	0x20000f78
 800402c:	20000ee8 	.word	0x20000ee8
 8004030:	20000239 	.word	0x20000239
 8004034:	20000f79 	.word	0x20000f79
 8004038:	51eb851f 	.word	0x51eb851f
 800403c:	00000000 	.word	0x00000000

08004040 <ControllerState>:

void ControllerState()
{
 8004040:	b5b0      	push	{r4, r5, r7, lr}
 8004042:	af00      	add	r7, sp, #0
	static enum {Idle, Follow} state = Idle;

	if (SetHomeYFlag == 0)
 8004044:	4b88      	ldr	r3, [pc, #544]	; (8004268 <ControllerState+0x228>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f040 8107 	bne.w	800425c <ControllerState+0x21c>
	{
		switch(state)
 800404e:	4b87      	ldr	r3, [pc, #540]	; (800426c <ControllerState+0x22c>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <ControllerState+0x1c>
 8004056:	2b01      	cmp	r3, #1
 8004058:	d045      	beq.n	80040e6 <ControllerState+0xa6>
 800405a:	e0fb      	b.n	8004254 <ControllerState+0x214>
		{
		case Idle:
			ControllerFinishedFollowFlag = 1;
 800405c:	4b84      	ldr	r3, [pc, #528]	; (8004270 <ControllerState+0x230>)
 800405e:	2201      	movs	r2, #1
 8004060:	701a      	strb	r2, [r3, #0]
			PulseWidthModulation = 0;
 8004062:	4b84      	ldr	r3, [pc, #528]	; (8004274 <ControllerState+0x234>)
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
			MotorDrive(&htim1);
 800406a:	4883      	ldr	r0, [pc, #524]	; (8004278 <ControllerState+0x238>)
 800406c:	f7fd fec2 	bl	8001df4 <MotorDrive>
			Pi = QEIData.position;
 8004070:	4b82      	ldr	r3, [pc, #520]	; (800427c <ControllerState+0x23c>)
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	4a82      	ldr	r2, [pc, #520]	; (8004280 <ControllerState+0x240>)
 8004076:	6013      	str	r3, [r2, #0]

			if(Pf != Pf_last)
 8004078:	4b82      	ldr	r3, [pc, #520]	; (8004284 <ControllerState+0x244>)
 800407a:	ed93 7a00 	vldr	s14, [r3]
 800407e:	4b82      	ldr	r3, [pc, #520]	; (8004288 <ControllerState+0x248>)
 8004080:	edd3 7a00 	vldr	s15, [r3]
 8004084:	eeb4 7a67 	vcmp.f32	s14, s15
 8004088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408c:	f000 80df 	beq.w	800424e <ControllerState+0x20e>
			{
				t_traj = 0;
 8004090:	497e      	ldr	r1, [pc, #504]	; (800428c <ControllerState+0x24c>)
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	e9c1 2300 	strd	r2, r3, [r1]
				SteadyStateFlag = 0;
 800409e:	4b7c      	ldr	r3, [pc, #496]	; (8004290 <ControllerState+0x250>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
				TrapezoidalTraj_PreCal(Pi, Pf, &traj);
 80040a4:	4b76      	ldr	r3, [pc, #472]	; (8004280 <ControllerState+0x240>)
 80040a6:	edd3 7a00 	vldr	s15, [r3]
 80040aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040ae:	ee17 3a90 	vmov	r3, s15
 80040b2:	b21b      	sxth	r3, r3
 80040b4:	4a73      	ldr	r2, [pc, #460]	; (8004284 <ControllerState+0x244>)
 80040b6:	edd2 7a00 	vldr	s15, [r2]
 80040ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040be:	ee17 2a90 	vmov	r2, s15
 80040c2:	b211      	sxth	r1, r2
 80040c4:	4a73      	ldr	r2, [pc, #460]	; (8004294 <ControllerState+0x254>)
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe fbbe 	bl	8002848 <TrapezoidalTraj_PreCal>
				ControllerFinishedFollowFlag = 0;
 80040cc:	4b68      	ldr	r3, [pc, #416]	; (8004270 <ControllerState+0x230>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
				state = Follow;
 80040d2:	4b66      	ldr	r3, [pc, #408]	; (800426c <ControllerState+0x22c>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80040d8:	2201      	movs	r2, #1
 80040da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040de:	486e      	ldr	r0, [pc, #440]	; (8004298 <ControllerState+0x258>)
 80040e0:	f001 ffae 	bl	8006040 <HAL_GPIO_WritePin>
			}
		break;
 80040e4:	e0b3      	b.n	800424e <ControllerState+0x20e>

		case Follow:
			t_traj = t_traj + 1000;
 80040e6:	4b69      	ldr	r3, [pc, #420]	; (800428c <ControllerState+0x24c>)
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f512 707a 	adds.w	r0, r2, #1000	; 0x3e8
 80040f0:	f143 0100 	adc.w	r1, r3, #0
 80040f4:	4b65      	ldr	r3, [pc, #404]	; (800428c <ControllerState+0x24c>)
 80040f6:	e9c3 0100 	strd	r0, r1, [r3]
			if (t_traj <= traj.t_total * 1000000)
 80040fa:	4b64      	ldr	r3, [pc, #400]	; (800428c <ControllerState+0x24c>)
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	f7fc fdec 	bl	8000ce0 <__aeabi_ul2f>
 8004108:	ee06 0a90 	vmov	s13, r0
 800410c:	4b61      	ldr	r3, [pc, #388]	; (8004294 <ControllerState+0x254>)
 800410e:	edd3 7a00 	vldr	s15, [r3]
 8004112:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800429c <ControllerState+0x25c>
 8004116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800411a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004122:	d817      	bhi.n	8004154 <ControllerState+0x114>
			{
				TrapezoidalTraj_GetState(Pi, Pf, &traj, t_traj);
 8004124:	4b56      	ldr	r3, [pc, #344]	; (8004280 <ControllerState+0x240>)
 8004126:	edd3 7a00 	vldr	s15, [r3]
 800412a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800412e:	ee17 3a90 	vmov	r3, s15
 8004132:	b218      	sxth	r0, r3
 8004134:	4b53      	ldr	r3, [pc, #332]	; (8004284 <ControllerState+0x244>)
 8004136:	edd3 7a00 	vldr	s15, [r3]
 800413a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800413e:	ee17 3a90 	vmov	r3, s15
 8004142:	b219      	sxth	r1, r3
 8004144:	4b51      	ldr	r3, [pc, #324]	; (800428c <ControllerState+0x24c>)
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	4613      	mov	r3, r2
 800414c:	4a51      	ldr	r2, [pc, #324]	; (8004294 <ControllerState+0x254>)
 800414e:	f7fe fbf7 	bl	8002940 <TrapezoidalTraj_GetState>
 8004152:	e003      	b.n	800415c <ControllerState+0x11c>
			}
			else
			{
				q_des = Pf;
 8004154:	4b4b      	ldr	r3, [pc, #300]	; (8004284 <ControllerState+0x244>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a51      	ldr	r2, [pc, #324]	; (80042a0 <ControllerState+0x260>)
 800415a:	6013      	str	r3, [r2, #0]
			}

			PositionControlVelocityForm(&Controller);
 800415c:	4851      	ldr	r0, [pc, #324]	; (80042a4 <ControllerState+0x264>)
 800415e:	f7fd fbbd 	bl	80018dc <PositionControlVelocityForm>
			MotorDrive(&htim1);
 8004162:	4845      	ldr	r0, [pc, #276]	; (8004278 <ControllerState+0x238>)
 8004164:	f7fd fe46 	bl	8001df4 <MotorDrive>

			if (((t_traj > traj.t_total * 1000000) && (0.15 > fabs(q_des - QEIData.position)) && (SteadyStateFlag == 0)) || P_disallow || N_disallow)
 8004168:	4b48      	ldr	r3, [pc, #288]	; (800428c <ControllerState+0x24c>)
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	4610      	mov	r0, r2
 8004170:	4619      	mov	r1, r3
 8004172:	f7fc fdb5 	bl	8000ce0 <__aeabi_ul2f>
 8004176:	ee06 0a90 	vmov	s13, r0
 800417a:	4b46      	ldr	r3, [pc, #280]	; (8004294 <ControllerState+0x254>)
 800417c:	edd3 7a00 	vldr	s15, [r3]
 8004180:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800429c <ControllerState+0x25c>
 8004184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004188:	eef4 6ae7 	vcmpe.f32	s13, s15
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	dd19      	ble.n	80041c6 <ControllerState+0x186>
 8004192:	4b43      	ldr	r3, [pc, #268]	; (80042a0 <ControllerState+0x260>)
 8004194:	ed93 7a00 	vldr	s14, [r3]
 8004198:	4b38      	ldr	r3, [pc, #224]	; (800427c <ControllerState+0x23c>)
 800419a:	edd3 7a04 	vldr	s15, [r3, #16]
 800419e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041a2:	eef0 7ae7 	vabs.f32	s15, s15
 80041a6:	ee17 0a90 	vmov	r0, s15
 80041aa:	f7fc f979 	bl	80004a0 <__aeabi_f2d>
 80041ae:	a32c      	add	r3, pc, #176	; (adr r3, 8004260 <ControllerState+0x220>)
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f7fc fc3e 	bl	8000a34 <__aeabi_dcmplt>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <ControllerState+0x186>
 80041be:	4b34      	ldr	r3, [pc, #208]	; (8004290 <ControllerState+0x250>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <ControllerState+0x196>
 80041c6:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <ControllerState+0x268>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <ControllerState+0x196>
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <ControllerState+0x26c>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <ControllerState+0x1b0>
			{
				t_total_actual = t_traj + 500000;
 80041d6:	4b2d      	ldr	r3, [pc, #180]	; (800428c <ControllerState+0x24c>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	4934      	ldr	r1, [pc, #208]	; (80042b0 <ControllerState+0x270>)
 80041de:	1854      	adds	r4, r2, r1
 80041e0:	f143 0500 	adc.w	r5, r3, #0
 80041e4:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <ControllerState+0x274>)
 80041e6:	e9c3 4500 	strd	r4, r5, [r3]
				SteadyStateFlag = 1;
 80041ea:	4b29      	ldr	r3, [pc, #164]	; (8004290 <ControllerState+0x250>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	701a      	strb	r2, [r3, #0]
			}

			if (SteadyStateFlag && (t_traj > t_total_actual) && (0.15 > fabs(q_des - QEIData.position)))
 80041f0:	4b27      	ldr	r3, [pc, #156]	; (8004290 <ControllerState+0x250>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02c      	beq.n	8004252 <ControllerState+0x212>
 80041f8:	4b24      	ldr	r3, [pc, #144]	; (800428c <ControllerState+0x24c>)
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	492d      	ldr	r1, [pc, #180]	; (80042b4 <ControllerState+0x274>)
 8004200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004204:	4290      	cmp	r0, r2
 8004206:	eb71 0303 	sbcs.w	r3, r1, r3
 800420a:	d222      	bcs.n	8004252 <ControllerState+0x212>
 800420c:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <ControllerState+0x260>)
 800420e:	ed93 7a00 	vldr	s14, [r3]
 8004212:	4b1a      	ldr	r3, [pc, #104]	; (800427c <ControllerState+0x23c>)
 8004214:	edd3 7a04 	vldr	s15, [r3, #16]
 8004218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800421c:	eef0 7ae7 	vabs.f32	s15, s15
 8004220:	ee17 0a90 	vmov	r0, s15
 8004224:	f7fc f93c 	bl	80004a0 <__aeabi_f2d>
 8004228:	a30d      	add	r3, pc, #52	; (adr r3, 8004260 <ControllerState+0x220>)
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f7fc fc01 	bl	8000a34 <__aeabi_dcmplt>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d100      	bne.n	800423a <ControllerState+0x1fa>
			{
				state = Idle;
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
			}
		break;
 8004238:	e00b      	b.n	8004252 <ControllerState+0x212>
				state = Idle;
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <ControllerState+0x22c>)
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8004240:	2200      	movs	r2, #0
 8004242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004246:	4814      	ldr	r0, [pc, #80]	; (8004298 <ControllerState+0x258>)
 8004248:	f001 fefa 	bl	8006040 <HAL_GPIO_WritePin>
		break;
 800424c:	e001      	b.n	8004252 <ControllerState+0x212>
		break;
 800424e:	bf00      	nop
 8004250:	e000      	b.n	8004254 <ControllerState+0x214>
		break;
 8004252:	bf00      	nop
		}
		Pf_last = Pf;
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <ControllerState+0x244>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a0b      	ldr	r2, [pc, #44]	; (8004288 <ControllerState+0x248>)
 800425a:	6013      	str	r3, [r2, #0]
	}
}
 800425c:	bf00      	nop
 800425e:	bdb0      	pop	{r4, r5, r7, pc}
 8004260:	33333333 	.word	0x33333333
 8004264:	3fc33333 	.word	0x3fc33333
 8004268:	20000211 	.word	0x20000211
 800426c:	20000f7a 	.word	0x20000f7a
 8004270:	200008a8 	.word	0x200008a8
 8004274:	200008a4 	.word	0x200008a4
 8004278:	200004a0 	.word	0x200004a0
 800427c:	20000888 	.word	0x20000888
 8004280:	2000086c 	.word	0x2000086c
 8004284:	20000870 	.word	0x20000870
 8004288:	20000874 	.word	0x20000874
 800428c:	20000848 	.word	0x20000848
 8004290:	20000878 	.word	0x20000878
 8004294:	20000864 	.word	0x20000864
 8004298:	40020400 	.word	0x40020400
 800429c:	49742400 	.word	0x49742400
 80042a0:	20000858 	.word	0x20000858
 80042a4:	200008ac 	.word	0x200008ac
 80042a8:	200008b8 	.word	0x200008b8
 80042ac:	200008b9 	.word	0x200008b9
 80042b0:	0007a120 	.word	0x0007a120
 80042b4:	20000850 	.word	0x20000850

080042b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042bc:	b672      	cpsid	i
}
 80042be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042c0:	e7fe      	b.n	80042c0 <Error_Handler+0x8>
	...

080042c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_MspInit+0x4c>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <HAL_MspInit+0x4c>)
 80042d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042d8:	6453      	str	r3, [r2, #68]	; 0x44
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <HAL_MspInit+0x4c>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	603b      	str	r3, [r7, #0]
 80042ea:	4b09      	ldr	r3, [pc, #36]	; (8004310 <HAL_MspInit+0x4c>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	4a08      	ldr	r2, [pc, #32]	; (8004310 <HAL_MspInit+0x4c>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6413      	str	r3, [r2, #64]	; 0x40
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_MspInit+0x4c>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004302:	2007      	movs	r0, #7
 8004304:	f001 f8a2 	bl	800544c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800

08004314 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431c:	f107 0314 	add.w	r3, r7, #20
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	60da      	str	r2, [r3, #12]
 800432a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2f      	ldr	r2, [pc, #188]	; (80043f0 <HAL_ADC_MspInit+0xdc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d157      	bne.n	80043e6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_ADC_MspInit+0xe0>)
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	4a2d      	ldr	r2, [pc, #180]	; (80043f4 <HAL_ADC_MspInit+0xe0>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004344:	6453      	str	r3, [r2, #68]	; 0x44
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_ADC_MspInit+0xe0>)
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <HAL_ADC_MspInit+0xe0>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <HAL_ADC_MspInit+0xe0>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6313      	str	r3, [r2, #48]	; 0x30
 8004362:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <HAL_ADC_MspInit+0xe0>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800436e:	2303      	movs	r3, #3
 8004370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004372:	2303      	movs	r3, #3
 8004374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437a:	f107 0314 	add.w	r3, r7, #20
 800437e:	4619      	mov	r1, r3
 8004380:	481d      	ldr	r0, [pc, #116]	; (80043f8 <HAL_ADC_MspInit+0xe4>)
 8004382:	f001 fcc1 	bl	8005d08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004386:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 8004388:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <HAL_ADC_MspInit+0xec>)
 800438a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800438c:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 800438e:	2200      	movs	r2, #0
 8004390:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004392:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 8004394:	2200      	movs	r2, #0
 8004396:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004398:	4b18      	ldr	r3, [pc, #96]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 800439a:	2200      	movs	r2, #0
 800439c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800439e:	4b17      	ldr	r3, [pc, #92]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 80043a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 80043a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043ae:	4b13      	ldr	r3, [pc, #76]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 80043b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80043b6:	4b11      	ldr	r3, [pc, #68]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 80043b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80043be:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043c4:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80043ca:	480c      	ldr	r0, [pc, #48]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 80043cc:	f001 f880 	bl	80054d0 <HAL_DMA_Init>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80043d6:	f7ff ff6f 	bl	80042b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a07      	ldr	r2, [pc, #28]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
 80043e0:	4a06      	ldr	r2, [pc, #24]	; (80043fc <HAL_ADC_MspInit+0xe8>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80043e6:	bf00      	nop
 80043e8:	3728      	adds	r7, #40	; 0x28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40012000 	.word	0x40012000
 80043f4:	40023800 	.word	0x40023800
 80043f8:	40020000 	.word	0x40020000
 80043fc:	2000038c 	.word	0x2000038c
 8004400:	40026410 	.word	0x40026410

08004404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	; 0x28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800440c:	f107 0314 	add.w	r3, r7, #20
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	609a      	str	r2, [r3, #8]
 8004418:	60da      	str	r2, [r3, #12]
 800441a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a38      	ldr	r2, [pc, #224]	; (8004504 <HAL_I2C_MspInit+0x100>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d16a      	bne.n	80044fc <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	4b37      	ldr	r3, [pc, #220]	; (8004508 <HAL_I2C_MspInit+0x104>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	4a36      	ldr	r2, [pc, #216]	; (8004508 <HAL_I2C_MspInit+0x104>)
 8004430:	f043 0302 	orr.w	r3, r3, #2
 8004434:	6313      	str	r3, [r2, #48]	; 0x30
 8004436:	4b34      	ldr	r3, [pc, #208]	; (8004508 <HAL_I2C_MspInit+0x104>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004442:	23c0      	movs	r3, #192	; 0xc0
 8004444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004446:	2312      	movs	r3, #18
 8004448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800444e:	2303      	movs	r3, #3
 8004450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004452:	2304      	movs	r3, #4
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004456:	f107 0314 	add.w	r3, r7, #20
 800445a:	4619      	mov	r1, r3
 800445c:	482b      	ldr	r0, [pc, #172]	; (800450c <HAL_I2C_MspInit+0x108>)
 800445e:	f001 fc53 	bl	8005d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	4b28      	ldr	r3, [pc, #160]	; (8004508 <HAL_I2C_MspInit+0x104>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	4a27      	ldr	r2, [pc, #156]	; (8004508 <HAL_I2C_MspInit+0x104>)
 800446c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004470:	6413      	str	r3, [r2, #64]	; 0x40
 8004472:	4b25      	ldr	r3, [pc, #148]	; (8004508 <HAL_I2C_MspInit+0x104>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800447e:	4b24      	ldr	r3, [pc, #144]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 8004480:	4a24      	ldr	r2, [pc, #144]	; (8004514 <HAL_I2C_MspInit+0x110>)
 8004482:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004484:	4b22      	ldr	r3, [pc, #136]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 8004486:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800448a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800448c:	4b20      	ldr	r3, [pc, #128]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 800448e:	2200      	movs	r2, #0
 8004490:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004492:	4b1f      	ldr	r3, [pc, #124]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 8004494:	2200      	movs	r2, #0
 8004496:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004498:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 800449a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800449e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044a6:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 80044ac:	4b18      	ldr	r3, [pc, #96]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 80044ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044b2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044b4:	4b16      	ldr	r3, [pc, #88]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80044c0:	4813      	ldr	r0, [pc, #76]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 80044c2:	f001 f805 	bl	80054d0 <HAL_DMA_Init>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80044cc:	f7ff fef4 	bl	80042b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 80044d4:	639a      	str	r2, [r3, #56]	; 0x38
 80044d6:	4a0e      	ldr	r2, [pc, #56]	; (8004510 <HAL_I2C_MspInit+0x10c>)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80044dc:	2200      	movs	r2, #0
 80044de:	2100      	movs	r1, #0
 80044e0:	201f      	movs	r0, #31
 80044e2:	f000 ffbe 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80044e6:	201f      	movs	r0, #31
 80044e8:	f000 ffd7 	bl	800549a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80044ec:	2200      	movs	r2, #0
 80044ee:	2100      	movs	r1, #0
 80044f0:	2020      	movs	r0, #32
 80044f2:	f000 ffb6 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80044f6:	2020      	movs	r0, #32
 80044f8:	f000 ffcf 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80044fc:	bf00      	nop
 80044fe:	3728      	adds	r7, #40	; 0x28
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40005400 	.word	0x40005400
 8004508:	40023800 	.word	0x40023800
 800450c:	40020400 	.word	0x40020400
 8004510:	20000440 	.word	0x20000440
 8004514:	40026010 	.word	0x40026010

08004518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <HAL_TIM_Base_MspInit+0xb8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d116      	bne.n	8004558 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <HAL_TIM_Base_MspInit+0xbc>)
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	4a28      	ldr	r2, [pc, #160]	; (80045d4 <HAL_TIM_Base_MspInit+0xbc>)
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	6453      	str	r3, [r2, #68]	; 0x44
 800453a:	4b26      	ldr	r3, [pc, #152]	; (80045d4 <HAL_TIM_Base_MspInit+0xbc>)
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004546:	2200      	movs	r2, #0
 8004548:	2100      	movs	r1, #0
 800454a:	201a      	movs	r0, #26
 800454c:	f000 ff89 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004550:	201a      	movs	r0, #26
 8004552:	f000 ffa2 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004556:	e036      	b.n	80045c6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1e      	ldr	r2, [pc, #120]	; (80045d8 <HAL_TIM_Base_MspInit+0xc0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d116      	bne.n	8004590 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <HAL_TIM_Base_MspInit+0xbc>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <HAL_TIM_Base_MspInit+0xbc>)
 800456c:	f043 0308 	orr.w	r3, r3, #8
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
 8004572:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <HAL_TIM_Base_MspInit+0xbc>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800457e:	2200      	movs	r2, #0
 8004580:	2100      	movs	r1, #0
 8004582:	2032      	movs	r0, #50	; 0x32
 8004584:	f000 ff6d 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004588:	2032      	movs	r0, #50	; 0x32
 800458a:	f000 ff86 	bl	800549a <HAL_NVIC_EnableIRQ>
}
 800458e:	e01a      	b.n	80045c6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a11      	ldr	r2, [pc, #68]	; (80045dc <HAL_TIM_Base_MspInit+0xc4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d115      	bne.n	80045c6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <HAL_TIM_Base_MspInit+0xbc>)
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <HAL_TIM_Base_MspInit+0xbc>)
 80045a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a8:	6453      	str	r3, [r2, #68]	; 0x44
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <HAL_TIM_Base_MspInit+0xbc>)
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	2100      	movs	r1, #0
 80045ba:	201a      	movs	r0, #26
 80045bc:	f000 ff51 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80045c0:	201a      	movs	r0, #26
 80045c2:	f000 ff6a 	bl	800549a <HAL_NVIC_EnableIRQ>
}
 80045c6:	bf00      	nop
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40014800 	.word	0x40014800

080045e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	f107 0314 	add.w	r3, r7, #20
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_TIM_Encoder_MspInit+0x94>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d133      	bne.n	800466a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <HAL_TIM_Encoder_MspInit+0x98>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	4a1b      	ldr	r2, [pc, #108]	; (8004678 <HAL_TIM_Encoder_MspInit+0x98>)
 800460c:	f043 0302 	orr.w	r3, r3, #2
 8004610:	6413      	str	r3, [r2, #64]	; 0x40
 8004612:	4b19      	ldr	r3, [pc, #100]	; (8004678 <HAL_TIM_Encoder_MspInit+0x98>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	4b15      	ldr	r3, [pc, #84]	; (8004678 <HAL_TIM_Encoder_MspInit+0x98>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4a14      	ldr	r2, [pc, #80]	; (8004678 <HAL_TIM_Encoder_MspInit+0x98>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6313      	str	r3, [r2, #48]	; 0x30
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_TIM_Encoder_MspInit+0x98>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800463a:	23c0      	movs	r3, #192	; 0xc0
 800463c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463e:	2302      	movs	r3, #2
 8004640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004646:	2300      	movs	r3, #0
 8004648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800464a:	2302      	movs	r3, #2
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800464e:	f107 0314 	add.w	r3, r7, #20
 8004652:	4619      	mov	r1, r3
 8004654:	4809      	ldr	r0, [pc, #36]	; (800467c <HAL_TIM_Encoder_MspInit+0x9c>)
 8004656:	f001 fb57 	bl	8005d08 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800465a:	2200      	movs	r2, #0
 800465c:	2100      	movs	r1, #0
 800465e:	201d      	movs	r0, #29
 8004660:	f000 feff 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004664:	201d      	movs	r0, #29
 8004666:	f000 ff18 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800466a:	bf00      	nop
 800466c:	3728      	adds	r7, #40	; 0x28
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40000400 	.word	0x40000400
 8004678:	40023800 	.word	0x40023800
 800467c:	40020000 	.word	0x40020000

08004680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004688:	f107 030c 	add.w	r3, r7, #12
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <HAL_TIM_MspPostInit+0x68>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d11e      	bne.n	80046e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <HAL_TIM_MspPostInit+0x6c>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a10      	ldr	r2, [pc, #64]	; (80046ec <HAL_TIM_MspPostInit+0x6c>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <HAL_TIM_MspPostInit+0x6c>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80046be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c4:	2302      	movs	r3, #2
 80046c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80046d0:	2301      	movs	r3, #1
 80046d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d4:	f107 030c 	add.w	r3, r7, #12
 80046d8:	4619      	mov	r1, r3
 80046da:	4805      	ldr	r0, [pc, #20]	; (80046f0 <HAL_TIM_MspPostInit+0x70>)
 80046dc:	f001 fb14 	bl	8005d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80046e0:	bf00      	nop
 80046e2:	3720      	adds	r7, #32
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40020000 	.word	0x40020000

080046f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	; 0x28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a34      	ldr	r2, [pc, #208]	; (80047e4 <HAL_UART_MspInit+0xf0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d161      	bne.n	80047da <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	4b33      	ldr	r3, [pc, #204]	; (80047e8 <HAL_UART_MspInit+0xf4>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	4a32      	ldr	r2, [pc, #200]	; (80047e8 <HAL_UART_MspInit+0xf4>)
 8004720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004724:	6413      	str	r3, [r2, #64]	; 0x40
 8004726:	4b30      	ldr	r3, [pc, #192]	; (80047e8 <HAL_UART_MspInit+0xf4>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <HAL_UART_MspInit+0xf4>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	4a2b      	ldr	r2, [pc, #172]	; (80047e8 <HAL_UART_MspInit+0xf4>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	6313      	str	r3, [r2, #48]	; 0x30
 8004742:	4b29      	ldr	r3, [pc, #164]	; (80047e8 <HAL_UART_MspInit+0xf4>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800474e:	230c      	movs	r3, #12
 8004750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004752:	2302      	movs	r3, #2
 8004754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475a:	2303      	movs	r3, #3
 800475c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800475e:	2307      	movs	r3, #7
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004762:	f107 0314 	add.w	r3, r7, #20
 8004766:	4619      	mov	r1, r3
 8004768:	4820      	ldr	r0, [pc, #128]	; (80047ec <HAL_UART_MspInit+0xf8>)
 800476a:	f001 facd 	bl	8005d08 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800476e:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 8004770:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <HAL_UART_MspInit+0x100>)
 8004772:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004774:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 8004776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800477a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800477c:	4b1c      	ldr	r3, [pc, #112]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 800477e:	2240      	movs	r2, #64	; 0x40
 8004780:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004782:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 8004784:	2200      	movs	r2, #0
 8004786:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004788:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 800478a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800478e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004790:	4b17      	ldr	r3, [pc, #92]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 8004792:	2200      	movs	r2, #0
 8004794:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004796:	4b16      	ldr	r3, [pc, #88]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 8004798:	2200      	movs	r2, #0
 800479a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800479c:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 800479e:	2200      	movs	r2, #0
 80047a0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047a2:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047a8:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80047ae:	4810      	ldr	r0, [pc, #64]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 80047b0:	f000 fe8e 	bl	80054d0 <HAL_DMA_Init>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80047ba:	f7ff fd7d 	bl	80042b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a0b      	ldr	r2, [pc, #44]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 80047c2:	635a      	str	r2, [r3, #52]	; 0x34
 80047c4:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80047ca:	2200      	movs	r2, #0
 80047cc:	2100      	movs	r1, #0
 80047ce:	2026      	movs	r0, #38	; 0x26
 80047d0:	f000 fe47 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047d4:	2026      	movs	r0, #38	; 0x26
 80047d6:	f000 fe60 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80047da:	bf00      	nop
 80047dc:	3728      	adds	r7, #40	; 0x28
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40004400 	.word	0x40004400
 80047e8:	40023800 	.word	0x40023800
 80047ec:	40020000 	.word	0x40020000
 80047f0:	200007e4 	.word	0x200007e4
 80047f4:	400260a0 	.word	0x400260a0

080047f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047fc:	e7fe      	b.n	80047fc <NMI_Handler+0x4>

080047fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004802:	e7fe      	b.n	8004802 <HardFault_Handler+0x4>

08004804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004808:	e7fe      	b.n	8004808 <MemManage_Handler+0x4>

0800480a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800480a:	b480      	push	{r7}
 800480c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800480e:	e7fe      	b.n	800480e <BusFault_Handler+0x4>

08004810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004814:	e7fe      	b.n	8004814 <UsageFault_Handler+0x4>

08004816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004816:	b480      	push	{r7}
 8004818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800481a:	bf00      	nop
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004832:	b480      	push	{r7}
 8004834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004844:	f000 f910 	bl	8004a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}

0800484c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004850:	2002      	movs	r0, #2
 8004852:	f001 fc0f 	bl	8006074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004856:	bf00      	nop
 8004858:	bd80      	pop	{r7, pc}

0800485a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800485e:	2004      	movs	r0, #4
 8004860:	f001 fc08 	bl	8006074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004864:	bf00      	nop
 8004866:	bd80      	pop	{r7, pc}

08004868 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800486c:	4802      	ldr	r0, [pc, #8]	; (8004878 <DMA1_Stream0_IRQHandler+0x10>)
 800486e:	f000 ffc7 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000440 	.word	0x20000440

0800487c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004880:	4802      	ldr	r0, [pc, #8]	; (800488c <DMA1_Stream6_IRQHandler+0x10>)
 8004882:	f000 ffbd 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	200007e4 	.word	0x200007e4

08004890 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004894:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004898:	f001 fbec 	bl	8006074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800489c:	bf00      	nop
 800489e:	bd80      	pop	{r7, pc}

080048a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048a4:	4803      	ldr	r0, [pc, #12]	; (80048b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80048a6:	f004 fc45 	bl	8009134 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80048aa:	4803      	ldr	r0, [pc, #12]	; (80048b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80048ac:	f004 fc42 	bl	8009134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80048b0:	bf00      	nop
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	200004a0 	.word	0x200004a0
 80048b8:	200006bc 	.word	0x200006bc

080048bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80048c0:	4802      	ldr	r0, [pc, #8]	; (80048cc <TIM3_IRQHandler+0x10>)
 80048c2:	f004 fc37 	bl	8009134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000554 	.word	0x20000554

080048d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <I2C1_EV_IRQHandler+0x10>)
 80048d6:	f001 fe7d 	bl	80065d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	200003ec 	.word	0x200003ec

080048e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <I2C1_ER_IRQHandler+0x10>)
 80048ea:	f001 ffe4 	bl	80068b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200003ec 	.word	0x200003ec

080048f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80048fc:	4802      	ldr	r0, [pc, #8]	; (8004908 <USART2_IRQHandler+0x10>)
 80048fe:	f005 ff21 	bl	800a744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000770 	.word	0x20000770

0800490c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004910:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004914:	f001 fbae 	bl	8006074 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004918:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800491c:	f001 fbaa 	bl	8006074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004920:	bf00      	nop
 8004922:	bd80      	pop	{r7, pc}

08004924 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004928:	4802      	ldr	r0, [pc, #8]	; (8004934 <TIM5_IRQHandler+0x10>)
 800492a:	f004 fc03 	bl	8009134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800492e:	bf00      	nop
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000608 	.word	0x20000608

08004938 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800493c:	4802      	ldr	r0, [pc, #8]	; (8004948 <DMA2_Stream0_IRQHandler+0x10>)
 800493e:	f000 ff5f 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	2000038c 	.word	0x2000038c

0800494c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004950:	4b06      	ldr	r3, [pc, #24]	; (800496c <SystemInit+0x20>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	4a05      	ldr	r2, [pc, #20]	; (800496c <SystemInit+0x20>)
 8004958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800495c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004960:	bf00      	nop
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	e000ed00 	.word	0xe000ed00

08004970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004974:	480d      	ldr	r0, [pc, #52]	; (80049ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004976:	490e      	ldr	r1, [pc, #56]	; (80049b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004978:	4a0e      	ldr	r2, [pc, #56]	; (80049b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800497a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800497c:	e002      	b.n	8004984 <LoopCopyDataInit>

0800497e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800497e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004982:	3304      	adds	r3, #4

08004984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004988:	d3f9      	bcc.n	800497e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800498a:	4a0b      	ldr	r2, [pc, #44]	; (80049b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800498c:	4c0b      	ldr	r4, [pc, #44]	; (80049bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800498e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004990:	e001      	b.n	8004996 <LoopFillZerobss>

08004992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004994:	3204      	adds	r2, #4

08004996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004998:	d3fb      	bcc.n	8004992 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800499a:	f7ff ffd7 	bl	800494c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800499e:	f006 ff1d 	bl	800b7dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049a2:	f7fe fe15 	bl	80035d0 <main>
  bx  lr    
 80049a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80049a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049b0:	200002ac 	.word	0x200002ac
  ldr r2, =_sidata
 80049b4:	0800cca8 	.word	0x0800cca8
  ldr r2, =_sbss
 80049b8:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 80049bc:	20000f80 	.word	0x20000f80

080049c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049c0:	e7fe      	b.n	80049c0 <ADC_IRQHandler>
	...

080049c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049c8:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <HAL_Init+0x40>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <HAL_Init+0x40>)
 80049ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_Init+0x40>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <HAL_Init+0x40>)
 80049da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049e0:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <HAL_Init+0x40>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a07      	ldr	r2, [pc, #28]	; (8004a04 <HAL_Init+0x40>)
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049ec:	2003      	movs	r0, #3
 80049ee:	f000 fd2d 	bl	800544c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049f2:	2000      	movs	r0, #0
 80049f4:	f000 f808 	bl	8004a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049f8:	f7ff fc64 	bl	80042c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40023c00 	.word	0x40023c00

08004a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a10:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <HAL_InitTick+0x54>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <HAL_InitTick+0x58>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fd45 	bl	80054b6 <HAL_SYSTICK_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e00e      	b.n	8004a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b0f      	cmp	r3, #15
 8004a3a:	d80a      	bhi.n	8004a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	f04f 30ff 	mov.w	r0, #4294967295
 8004a44:	f000 fd0d 	bl	8005462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a48:	4a06      	ldr	r2, [pc, #24]	; (8004a64 <HAL_InitTick+0x5c>)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e000      	b.n	8004a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	2000023c 	.word	0x2000023c
 8004a60:	20000244 	.word	0x20000244
 8004a64:	20000240 	.word	0x20000240

08004a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <HAL_IncTick+0x20>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <HAL_IncTick+0x24>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4413      	add	r3, r2
 8004a78:	4a04      	ldr	r2, [pc, #16]	; (8004a8c <HAL_IncTick+0x24>)
 8004a7a:	6013      	str	r3, [r2, #0]
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000244 	.word	0x20000244
 8004a8c:	20000f7c 	.word	0x20000f7c

08004a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return uwTick;
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <HAL_GetTick+0x14>)
 8004a96:	681b      	ldr	r3, [r3, #0]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000f7c 	.word	0x20000f7c

08004aa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e033      	b.n	8004b26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fc24 	bl	8004314 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d118      	bne.n	8004b18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004aee:	f023 0302 	bic.w	r3, r3, #2
 8004af2:	f043 0202 	orr.w	r2, r3, #2
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa58 	bl	8004fb0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	f043 0201 	orr.w	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
 8004b16:	e001      	b.n	8004b1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_ADC_Start_DMA+0x1e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e0ce      	b.n	8004cec <HAL_ADC_Start_DMA+0x1bc>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d018      	beq.n	8004b96 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b74:	4b5f      	ldr	r3, [pc, #380]	; (8004cf4 <HAL_ADC_Start_DMA+0x1c4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a5f      	ldr	r2, [pc, #380]	; (8004cf8 <HAL_ADC_Start_DMA+0x1c8>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	0c9a      	lsrs	r2, r3, #18
 8004b80:	4613      	mov	r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	4413      	add	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004b88:	e002      	b.n	8004b90 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f9      	bne.n	8004b8a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba4:	d107      	bne.n	8004bb6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	f040 8086 	bne.w	8004cd2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bf0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c04:	d106      	bne.n	8004c14 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f023 0206 	bic.w	r2, r3, #6
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	645a      	str	r2, [r3, #68]	; 0x44
 8004c12:	e002      	b.n	8004c1a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <HAL_ADC_Start_DMA+0x1cc>)
 8004c24:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	4a35      	ldr	r2, [pc, #212]	; (8004d00 <HAL_ADC_Start_DMA+0x1d0>)
 8004c2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	4a34      	ldr	r2, [pc, #208]	; (8004d04 <HAL_ADC_Start_DMA+0x1d4>)
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	4a33      	ldr	r2, [pc, #204]	; (8004d08 <HAL_ADC_Start_DMA+0x1d8>)
 8004c3c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c46:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004c56:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c66:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	334c      	adds	r3, #76	; 0x4c
 8004c72:	4619      	mov	r1, r3
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f000 fcd8 	bl	800562c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10f      	bne.n	8004ca8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d129      	bne.n	8004cea <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ca4:	609a      	str	r2, [r3, #8]
 8004ca6:	e020      	b.n	8004cea <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <HAL_ADC_Start_DMA+0x1dc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d11b      	bne.n	8004cea <HAL_ADC_Start_DMA+0x1ba>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d114      	bne.n	8004cea <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	e00b      	b.n	8004cea <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f043 0210 	orr.w	r2, r3, #16
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	f043 0201 	orr.w	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	2000023c 	.word	0x2000023c
 8004cf8:	431bde83 	.word	0x431bde83
 8004cfc:	40012300 	.word	0x40012300
 8004d00:	080051a9 	.word	0x080051a9
 8004d04:	08005263 	.word	0x08005263
 8004d08:	0800527f 	.word	0x0800527f
 8004d0c:	40012000 	.word	0x40012000

08004d10 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x1c>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e113      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x244>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b09      	cmp	r3, #9
 8004d76:	d925      	bls.n	8004dc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68d9      	ldr	r1, [r3, #12]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	461a      	mov	r2, r3
 8004d86:	4613      	mov	r3, r2
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3b1e      	subs	r3, #30
 8004d8e:	2207      	movs	r2, #7
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43da      	mvns	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68d9      	ldr	r1, [r3, #12]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	4618      	mov	r0, r3
 8004db0:	4603      	mov	r3, r0
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	4403      	add	r3, r0
 8004db6:	3b1e      	subs	r3, #30
 8004db8:	409a      	lsls	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	60da      	str	r2, [r3, #12]
 8004dc2:	e022      	b.n	8004e0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6919      	ldr	r1, [r3, #16]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	4413      	add	r3, r2
 8004dd8:	2207      	movs	r2, #7
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43da      	mvns	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	400a      	ands	r2, r1
 8004de6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6919      	ldr	r1, [r3, #16]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	4618      	mov	r0, r3
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4403      	add	r3, r0
 8004e00:	409a      	lsls	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b06      	cmp	r3, #6
 8004e10:	d824      	bhi.n	8004e5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	3b05      	subs	r3, #5
 8004e24:	221f      	movs	r2, #31
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43da      	mvns	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	400a      	ands	r2, r1
 8004e32:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	4618      	mov	r0, r3
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3b05      	subs	r3, #5
 8004e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	635a      	str	r2, [r3, #52]	; 0x34
 8004e5a:	e04c      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b0c      	cmp	r3, #12
 8004e62:	d824      	bhi.n	8004eae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	3b23      	subs	r3, #35	; 0x23
 8004e76:	221f      	movs	r2, #31
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	43da      	mvns	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	400a      	ands	r2, r1
 8004e84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	4618      	mov	r0, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3b23      	subs	r3, #35	; 0x23
 8004ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8004eac:	e023      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	3b41      	subs	r3, #65	; 0x41
 8004ec0:	221f      	movs	r2, #31
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43da      	mvns	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	400a      	ands	r2, r1
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	4618      	mov	r0, r3
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3b41      	subs	r3, #65	; 0x41
 8004eea:	fa00 f203 	lsl.w	r2, r0, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ef6:	4b29      	ldr	r3, [pc, #164]	; (8004f9c <HAL_ADC_ConfigChannel+0x250>)
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a28      	ldr	r2, [pc, #160]	; (8004fa0 <HAL_ADC_ConfigChannel+0x254>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10f      	bne.n	8004f24 <HAL_ADC_ConfigChannel+0x1d8>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b12      	cmp	r3, #18
 8004f0a:	d10b      	bne.n	8004f24 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <HAL_ADC_ConfigChannel+0x254>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d12b      	bne.n	8004f86 <HAL_ADC_ConfigChannel+0x23a>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <HAL_ADC_ConfigChannel+0x258>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <HAL_ADC_ConfigChannel+0x1f4>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b11      	cmp	r3, #17
 8004f3e:	d122      	bne.n	8004f86 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a11      	ldr	r2, [pc, #68]	; (8004fa4 <HAL_ADC_ConfigChannel+0x258>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d111      	bne.n	8004f86 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <HAL_ADC_ConfigChannel+0x25c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a11      	ldr	r2, [pc, #68]	; (8004fac <HAL_ADC_ConfigChannel+0x260>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	0c9a      	lsrs	r2, r3, #18
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f78:	e002      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f9      	bne.n	8004f7a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40012300 	.word	0x40012300
 8004fa0:	40012000 	.word	0x40012000
 8004fa4:	10000012 	.word	0x10000012
 8004fa8:	2000023c 	.word	0x2000023c
 8004fac:	431bde83 	.word	0x431bde83

08004fb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fb8:	4b79      	ldr	r3, [pc, #484]	; (80051a0 <ADC_Init+0x1f0>)
 8004fba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6859      	ldr	r1, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	021a      	lsls	r2, r3, #8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005008:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6859      	ldr	r1, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800502a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6899      	ldr	r1, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	4a58      	ldr	r2, [pc, #352]	; (80051a4 <ADC_Init+0x1f4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d022      	beq.n	800508e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005056:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6899      	ldr	r1, [r3, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6899      	ldr	r1, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	609a      	str	r2, [r3, #8]
 800508c:	e00f      	b.n	80050ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800509c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0202 	bic.w	r2, r2, #2
 80050bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6899      	ldr	r1, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	7e1b      	ldrb	r3, [r3, #24]
 80050c8:	005a      	lsls	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01b      	beq.n	8005114 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80050fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	3b01      	subs	r3, #1
 8005108:	035a      	lsls	r2, r3, #13
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	e007      	b.n	8005124 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005122:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005132:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	3b01      	subs	r3, #1
 8005140:	051a      	lsls	r2, r3, #20
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6899      	ldr	r1, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005166:	025a      	lsls	r2, r3, #9
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6899      	ldr	r1, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	029a      	lsls	r2, r3, #10
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40012300 	.word	0x40012300
 80051a4:	0f000001 	.word	0x0f000001

080051a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d13c      	bne.n	800523c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d12b      	bne.n	8005234 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d127      	bne.n	8005234 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d006      	beq.n	8005200 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d119      	bne.n	8005234 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0220 	bic.w	r2, r2, #32
 800520e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d105      	bne.n	8005234 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	f043 0201 	orr.w	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f7ff fd6b 	bl	8004d10 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800523a:	e00e      	b.n	800525a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7ff fd75 	bl	8004d38 <HAL_ADC_ErrorCallback>
}
 800524e:	e004      	b.n	800525a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	4798      	blx	r3
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff fd57 	bl	8004d24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2240      	movs	r2, #64	; 0x40
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005296:	f043 0204 	orr.w	r2, r3, #4
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7ff fd4a 	bl	8004d38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052bc:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <__NVIC_SetPriorityGrouping+0x44>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052c8:	4013      	ands	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052de:	4a04      	ldr	r2, [pc, #16]	; (80052f0 <__NVIC_SetPriorityGrouping+0x44>)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	60d3      	str	r3, [r2, #12]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052f8:	4b04      	ldr	r3, [pc, #16]	; (800530c <__NVIC_GetPriorityGrouping+0x18>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	0a1b      	lsrs	r3, r3, #8
 80052fe:	f003 0307 	and.w	r3, r3, #7
}
 8005302:	4618      	mov	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	e000ed00 	.word	0xe000ed00

08005310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800531a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800531e:	2b00      	cmp	r3, #0
 8005320:	db0b      	blt.n	800533a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	f003 021f 	and.w	r2, r3, #31
 8005328:	4907      	ldr	r1, [pc, #28]	; (8005348 <__NVIC_EnableIRQ+0x38>)
 800532a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	2001      	movs	r0, #1
 8005332:	fa00 f202 	lsl.w	r2, r0, r2
 8005336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	e000e100 	.word	0xe000e100

0800534c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	6039      	str	r1, [r7, #0]
 8005356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535c:	2b00      	cmp	r3, #0
 800535e:	db0a      	blt.n	8005376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	490c      	ldr	r1, [pc, #48]	; (8005398 <__NVIC_SetPriority+0x4c>)
 8005366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536a:	0112      	lsls	r2, r2, #4
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	440b      	add	r3, r1
 8005370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005374:	e00a      	b.n	800538c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	b2da      	uxtb	r2, r3
 800537a:	4908      	ldr	r1, [pc, #32]	; (800539c <__NVIC_SetPriority+0x50>)
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	3b04      	subs	r3, #4
 8005384:	0112      	lsls	r2, r2, #4
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	440b      	add	r3, r1
 800538a:	761a      	strb	r2, [r3, #24]
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	e000e100 	.word	0xe000e100
 800539c:	e000ed00 	.word	0xe000ed00

080053a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b089      	sub	sp, #36	; 0x24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f1c3 0307 	rsb	r3, r3, #7
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	bf28      	it	cs
 80053be:	2304      	movcs	r3, #4
 80053c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	3304      	adds	r3, #4
 80053c6:	2b06      	cmp	r3, #6
 80053c8:	d902      	bls.n	80053d0 <NVIC_EncodePriority+0x30>
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	3b03      	subs	r3, #3
 80053ce:	e000      	b.n	80053d2 <NVIC_EncodePriority+0x32>
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d4:	f04f 32ff 	mov.w	r2, #4294967295
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	43da      	mvns	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	401a      	ands	r2, r3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053e8:	f04f 31ff 	mov.w	r1, #4294967295
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	43d9      	mvns	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f8:	4313      	orrs	r3, r2
         );
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3724      	adds	r7, #36	; 0x24
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3b01      	subs	r3, #1
 8005414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005418:	d301      	bcc.n	800541e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800541a:	2301      	movs	r3, #1
 800541c:	e00f      	b.n	800543e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800541e:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <SysTick_Config+0x40>)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3b01      	subs	r3, #1
 8005424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005426:	210f      	movs	r1, #15
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	f7ff ff8e 	bl	800534c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <SysTick_Config+0x40>)
 8005432:	2200      	movs	r2, #0
 8005434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005436:	4b04      	ldr	r3, [pc, #16]	; (8005448 <SysTick_Config+0x40>)
 8005438:	2207      	movs	r2, #7
 800543a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	e000e010 	.word	0xe000e010

0800544c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ff29 	bl	80052ac <__NVIC_SetPriorityGrouping>
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	4603      	mov	r3, r0
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005474:	f7ff ff3e 	bl	80052f4 <__NVIC_GetPriorityGrouping>
 8005478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	6978      	ldr	r0, [r7, #20]
 8005480:	f7ff ff8e 	bl	80053a0 <NVIC_EncodePriority>
 8005484:	4602      	mov	r2, r0
 8005486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548a:	4611      	mov	r1, r2
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff ff5d 	bl	800534c <__NVIC_SetPriority>
}
 8005492:	bf00      	nop
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	4603      	mov	r3, r0
 80054a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff ff31 	bl	8005310 <__NVIC_EnableIRQ>
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff ffa2 	bl	8005408 <SysTick_Config>
 80054c4:	4603      	mov	r3, r0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054dc:	f7ff fad8 	bl	8004a90 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e099      	b.n	8005620 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0201 	bic.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800550c:	e00f      	b.n	800552e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800550e:	f7ff fabf 	bl	8004a90 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b05      	cmp	r3, #5
 800551a:	d908      	bls.n	800552e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2203      	movs	r2, #3
 8005526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e078      	b.n	8005620 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e8      	bne.n	800550e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4b38      	ldr	r3, [pc, #224]	; (8005628 <HAL_DMA_Init+0x158>)
 8005548:	4013      	ands	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800555a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	2b04      	cmp	r3, #4
 8005586:	d107      	bne.n	8005598 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	4313      	orrs	r3, r2
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0307 	bic.w	r3, r3, #7
 80055ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d117      	bne.n	80055f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00e      	beq.n	80055f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fb1b 	bl	8005c10 <DMA_CheckFifoParam>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d008      	beq.n	80055f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2240      	movs	r2, #64	; 0x40
 80055e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055ee:	2301      	movs	r3, #1
 80055f0:	e016      	b.n	8005620 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fad2 	bl	8005ba4 <DMA_CalcBaseAndBitshift>
 8005600:	4603      	mov	r3, r0
 8005602:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005608:	223f      	movs	r2, #63	; 0x3f
 800560a:	409a      	lsls	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	f010803f 	.word	0xf010803f

0800562c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005642:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_DMA_Start_IT+0x26>
 800564e:	2302      	movs	r3, #2
 8005650:	e040      	b.n	80056d4 <HAL_DMA_Start_IT+0xa8>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b01      	cmp	r3, #1
 8005664:	d12f      	bne.n	80056c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fa64 	bl	8005b48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005684:	223f      	movs	r2, #63	; 0x3f
 8005686:	409a      	lsls	r2, r3
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0216 	orr.w	r2, r2, #22
 800569a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0208 	orr.w	r2, r2, #8
 80056b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e005      	b.n	80056d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056ce:	2302      	movs	r3, #2
 80056d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056ea:	f7ff f9d1 	bl	8004a90 <HAL_GetTick>
 80056ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d008      	beq.n	800570e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2280      	movs	r2, #128	; 0x80
 8005700:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e052      	b.n	80057b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0216 	bic.w	r2, r2, #22
 800571c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800572c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d103      	bne.n	800573e <HAL_DMA_Abort+0x62>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0208 	bic.w	r2, r2, #8
 800574c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0201 	bic.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800575e:	e013      	b.n	8005788 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005760:	f7ff f996 	bl	8004a90 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b05      	cmp	r3, #5
 800576c:	d90c      	bls.n	8005788 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2203      	movs	r2, #3
 8005778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e015      	b.n	80057b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e4      	bne.n	8005760 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579a:	223f      	movs	r2, #63	; 0x3f
 800579c:	409a      	lsls	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d004      	beq.n	80057da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2280      	movs	r2, #128	; 0x80
 80057d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e00c      	b.n	80057f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2205      	movs	r2, #5
 80057de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0201 	bic.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800580c:	4b8e      	ldr	r3, [pc, #568]	; (8005a48 <HAL_DMA_IRQHandler+0x248>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a8e      	ldr	r2, [pc, #568]	; (8005a4c <HAL_DMA_IRQHandler+0x24c>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	0a9b      	lsrs	r3, r3, #10
 8005818:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582a:	2208      	movs	r2, #8
 800582c:	409a      	lsls	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01a      	beq.n	800586c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d013      	beq.n	800586c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0204 	bic.w	r2, r2, #4
 8005852:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005858:	2208      	movs	r2, #8
 800585a:	409a      	lsls	r2, r3
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005864:	f043 0201 	orr.w	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005870:	2201      	movs	r2, #1
 8005872:	409a      	lsls	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4013      	ands	r3, r2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d012      	beq.n	80058a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00b      	beq.n	80058a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588e:	2201      	movs	r2, #1
 8005890:	409a      	lsls	r2, r3
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589a:	f043 0202 	orr.w	r2, r3, #2
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a6:	2204      	movs	r2, #4
 80058a8:	409a      	lsls	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4013      	ands	r3, r2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d012      	beq.n	80058d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c4:	2204      	movs	r2, #4
 80058c6:	409a      	lsls	r2, r3
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d0:	f043 0204 	orr.w	r2, r3, #4
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058dc:	2210      	movs	r2, #16
 80058de:	409a      	lsls	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4013      	ands	r3, r2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d043      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d03c      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fa:	2210      	movs	r2, #16
 80058fc:	409a      	lsls	r2, r3
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d018      	beq.n	8005942 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d108      	bne.n	8005930 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d024      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
 800592e:	e01f      	b.n	8005970 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01b      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
 8005940:	e016      	b.n	8005970 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0208 	bic.w	r2, r2, #8
 800595e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005974:	2220      	movs	r2, #32
 8005976:	409a      	lsls	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 808f 	beq.w	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8087 	beq.w	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005996:	2220      	movs	r2, #32
 8005998:	409a      	lsls	r2, r3
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	d136      	bne.n	8005a18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0216 	bic.w	r2, r2, #22
 80059b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695a      	ldr	r2, [r3, #20]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <HAL_DMA_IRQHandler+0x1da>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0208 	bic.w	r2, r2, #8
 80059e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ee:	223f      	movs	r2, #63	; 0x3f
 80059f0:	409a      	lsls	r2, r3
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d07e      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	4798      	blx	r3
        }
        return;
 8005a16:	e079      	b.n	8005b0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01d      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10d      	bne.n	8005a50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d031      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
 8005a44:	e02c      	b.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
 8005a46:	bf00      	nop
 8005a48:	2000023c 	.word	0x2000023c
 8005a4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d023      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
 8005a60:	e01e      	b.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10f      	bne.n	8005a90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0210 	bic.w	r2, r2, #16
 8005a7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d032      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d022      	beq.n	8005afa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2205      	movs	r2, #5
 8005ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d307      	bcc.n	8005ae8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f2      	bne.n	8005acc <HAL_DMA_IRQHandler+0x2cc>
 8005ae6:	e000      	b.n	8005aea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005ae8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	4798      	blx	r3
 8005b0a:	e000      	b.n	8005b0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b0c:	bf00      	nop
    }
  }
}
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b22:	b2db      	uxtb	r3, r3
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d108      	bne.n	8005b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b86:	e007      	b.n	8005b98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	60da      	str	r2, [r3, #12]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	3b10      	subs	r3, #16
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <DMA_CalcBaseAndBitshift+0x64>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bbe:	4a13      	ldr	r2, [pc, #76]	; (8005c0c <DMA_CalcBaseAndBitshift+0x68>)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d909      	bls.n	8005be6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bda:	f023 0303 	bic.w	r3, r3, #3
 8005bde:	1d1a      	adds	r2, r3, #4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	659a      	str	r2, [r3, #88]	; 0x58
 8005be4:	e007      	b.n	8005bf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	aaaaaaab 	.word	0xaaaaaaab
 8005c0c:	0800cbf0 	.word	0x0800cbf0

08005c10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d11f      	bne.n	8005c6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d856      	bhi.n	8005cde <DMA_CheckFifoParam+0xce>
 8005c30:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <DMA_CheckFifoParam+0x28>)
 8005c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c36:	bf00      	nop
 8005c38:	08005c49 	.word	0x08005c49
 8005c3c:	08005c5b 	.word	0x08005c5b
 8005c40:	08005c49 	.word	0x08005c49
 8005c44:	08005cdf 	.word	0x08005cdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d046      	beq.n	8005ce2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c58:	e043      	b.n	8005ce2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c62:	d140      	bne.n	8005ce6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c68:	e03d      	b.n	8005ce6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c72:	d121      	bne.n	8005cb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d837      	bhi.n	8005cea <DMA_CheckFifoParam+0xda>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <DMA_CheckFifoParam+0x70>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005c97 	.word	0x08005c97
 8005c88:	08005c91 	.word	0x08005c91
 8005c8c:	08005ca9 	.word	0x08005ca9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
      break;
 8005c94:	e030      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d025      	beq.n	8005cee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ca6:	e022      	b.n	8005cee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cb0:	d11f      	bne.n	8005cf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005cb6:	e01c      	b.n	8005cf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d903      	bls.n	8005cc6 <DMA_CheckFifoParam+0xb6>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d003      	beq.n	8005ccc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005cc4:	e018      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cca:	e015      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00e      	beq.n	8005cf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]
      break;
 8005cdc:	e00b      	b.n	8005cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e00a      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ce2:	bf00      	nop
 8005ce4:	e008      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ce6:	bf00      	nop
 8005ce8:	e006      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cea:	bf00      	nop
 8005cec:	e004      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cee:	bf00      	nop
 8005cf0:	e002      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005cf2:	bf00      	nop
 8005cf4:	e000      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cf6:	bf00      	nop
    }
  } 
  
  return status; 
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop

08005d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b089      	sub	sp, #36	; 0x24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61fb      	str	r3, [r7, #28]
 8005d22:	e159      	b.n	8005fd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d24:	2201      	movs	r2, #1
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4013      	ands	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	f040 8148 	bne.w	8005fd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d005      	beq.n	8005d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d130      	bne.n	8005dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	2203      	movs	r2, #3
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	43db      	mvns	r3, r3
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d90:	2201      	movs	r2, #1
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	f003 0201 	and.w	r2, r3, #1
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d017      	beq.n	8005df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d123      	bne.n	8005e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	08da      	lsrs	r2, r3, #3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3208      	adds	r2, #8
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	220f      	movs	r2, #15
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	43db      	mvns	r3, r3
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4013      	ands	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	08da      	lsrs	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3208      	adds	r2, #8
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	2203      	movs	r2, #3
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	4013      	ands	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f003 0203 	and.w	r2, r3, #3
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80a2 	beq.w	8005fd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	4b57      	ldr	r3, [pc, #348]	; (8005ff0 <HAL_GPIO_Init+0x2e8>)
 8005e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e96:	4a56      	ldr	r2, [pc, #344]	; (8005ff0 <HAL_GPIO_Init+0x2e8>)
 8005e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e9e:	4b54      	ldr	r3, [pc, #336]	; (8005ff0 <HAL_GPIO_Init+0x2e8>)
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eaa:	4a52      	ldr	r2, [pc, #328]	; (8005ff4 <HAL_GPIO_Init+0x2ec>)
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	089b      	lsrs	r3, r3, #2
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	220f      	movs	r2, #15
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a49      	ldr	r2, [pc, #292]	; (8005ff8 <HAL_GPIO_Init+0x2f0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d019      	beq.n	8005f0a <HAL_GPIO_Init+0x202>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a48      	ldr	r2, [pc, #288]	; (8005ffc <HAL_GPIO_Init+0x2f4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d013      	beq.n	8005f06 <HAL_GPIO_Init+0x1fe>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a47      	ldr	r2, [pc, #284]	; (8006000 <HAL_GPIO_Init+0x2f8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00d      	beq.n	8005f02 <HAL_GPIO_Init+0x1fa>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a46      	ldr	r2, [pc, #280]	; (8006004 <HAL_GPIO_Init+0x2fc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d007      	beq.n	8005efe <HAL_GPIO_Init+0x1f6>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a45      	ldr	r2, [pc, #276]	; (8006008 <HAL_GPIO_Init+0x300>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d101      	bne.n	8005efa <HAL_GPIO_Init+0x1f2>
 8005ef6:	2304      	movs	r3, #4
 8005ef8:	e008      	b.n	8005f0c <HAL_GPIO_Init+0x204>
 8005efa:	2307      	movs	r3, #7
 8005efc:	e006      	b.n	8005f0c <HAL_GPIO_Init+0x204>
 8005efe:	2303      	movs	r3, #3
 8005f00:	e004      	b.n	8005f0c <HAL_GPIO_Init+0x204>
 8005f02:	2302      	movs	r3, #2
 8005f04:	e002      	b.n	8005f0c <HAL_GPIO_Init+0x204>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e000      	b.n	8005f0c <HAL_GPIO_Init+0x204>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	f002 0203 	and.w	r2, r2, #3
 8005f12:	0092      	lsls	r2, r2, #2
 8005f14:	4093      	lsls	r3, r2
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f1c:	4935      	ldr	r1, [pc, #212]	; (8005ff4 <HAL_GPIO_Init+0x2ec>)
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	089b      	lsrs	r3, r3, #2
 8005f22:	3302      	adds	r3, #2
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f2a:	4b38      	ldr	r3, [pc, #224]	; (800600c <HAL_GPIO_Init+0x304>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	43db      	mvns	r3, r3
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	4013      	ands	r3, r2
 8005f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f4e:	4a2f      	ldr	r2, [pc, #188]	; (800600c <HAL_GPIO_Init+0x304>)
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f54:	4b2d      	ldr	r3, [pc, #180]	; (800600c <HAL_GPIO_Init+0x304>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4013      	ands	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f78:	4a24      	ldr	r2, [pc, #144]	; (800600c <HAL_GPIO_Init+0x304>)
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f7e:	4b23      	ldr	r3, [pc, #140]	; (800600c <HAL_GPIO_Init+0x304>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	43db      	mvns	r3, r3
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fa2:	4a1a      	ldr	r2, [pc, #104]	; (800600c <HAL_GPIO_Init+0x304>)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fa8:	4b18      	ldr	r3, [pc, #96]	; (800600c <HAL_GPIO_Init+0x304>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fcc:	4a0f      	ldr	r2, [pc, #60]	; (800600c <HAL_GPIO_Init+0x304>)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	61fb      	str	r3, [r7, #28]
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	2b0f      	cmp	r3, #15
 8005fdc:	f67f aea2 	bls.w	8005d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	3724      	adds	r7, #36	; 0x24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	40023800 	.word	0x40023800
 8005ff4:	40013800 	.word	0x40013800
 8005ff8:	40020000 	.word	0x40020000
 8005ffc:	40020400 	.word	0x40020400
 8006000:	40020800 	.word	0x40020800
 8006004:	40020c00 	.word	0x40020c00
 8006008:	40021000 	.word	0x40021000
 800600c:	40013c00 	.word	0x40013c00

08006010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	887b      	ldrh	r3, [r7, #2]
 8006022:	4013      	ands	r3, r2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]
 800602c:	e001      	b.n	8006032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	807b      	strh	r3, [r7, #2]
 800604c:	4613      	mov	r3, r2
 800604e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006050:	787b      	ldrb	r3, [r7, #1]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006056:	887a      	ldrh	r2, [r7, #2]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800605c:	e003      	b.n	8006066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800605e:	887b      	ldrh	r3, [r7, #2]
 8006060:	041a      	lsls	r2, r3, #16
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	619a      	str	r2, [r3, #24]
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800607e:	4b08      	ldr	r3, [pc, #32]	; (80060a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006080:	695a      	ldr	r2, [r3, #20]
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	4013      	ands	r3, r2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d006      	beq.n	8006098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800608a:	4a05      	ldr	r2, [pc, #20]	; (80060a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	4618      	mov	r0, r3
 8006094:	f7fb fe12 	bl	8001cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40013c00 	.word	0x40013c00

080060a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e12b      	b.n	800630e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fe f99a 	bl	8004404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	; 0x24
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0201 	bic.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006108:	f002 fbb0 	bl	800886c <HAL_RCC_GetPCLK1Freq>
 800610c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	4a81      	ldr	r2, [pc, #516]	; (8006318 <HAL_I2C_Init+0x274>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d807      	bhi.n	8006128 <HAL_I2C_Init+0x84>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4a80      	ldr	r2, [pc, #512]	; (800631c <HAL_I2C_Init+0x278>)
 800611c:	4293      	cmp	r3, r2
 800611e:	bf94      	ite	ls
 8006120:	2301      	movls	r3, #1
 8006122:	2300      	movhi	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	e006      	b.n	8006136 <HAL_I2C_Init+0x92>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4a7d      	ldr	r2, [pc, #500]	; (8006320 <HAL_I2C_Init+0x27c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	bf94      	ite	ls
 8006130:	2301      	movls	r3, #1
 8006132:	2300      	movhi	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e0e7      	b.n	800630e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4a78      	ldr	r2, [pc, #480]	; (8006324 <HAL_I2C_Init+0x280>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	0c9b      	lsrs	r3, r3, #18
 8006148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4a6a      	ldr	r2, [pc, #424]	; (8006318 <HAL_I2C_Init+0x274>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d802      	bhi.n	8006178 <HAL_I2C_Init+0xd4>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	3301      	adds	r3, #1
 8006176:	e009      	b.n	800618c <HAL_I2C_Init+0xe8>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800617e:	fb02 f303 	mul.w	r3, r2, r3
 8006182:	4a69      	ldr	r2, [pc, #420]	; (8006328 <HAL_I2C_Init+0x284>)
 8006184:	fba2 2303 	umull	r2, r3, r2, r3
 8006188:	099b      	lsrs	r3, r3, #6
 800618a:	3301      	adds	r3, #1
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	430b      	orrs	r3, r1
 8006192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800619e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	495c      	ldr	r1, [pc, #368]	; (8006318 <HAL_I2C_Init+0x274>)
 80061a8:	428b      	cmp	r3, r1
 80061aa:	d819      	bhi.n	80061e0 <HAL_I2C_Init+0x13c>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1e59      	subs	r1, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80061ba:	1c59      	adds	r1, r3, #1
 80061bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061c0:	400b      	ands	r3, r1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_I2C_Init+0x138>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1e59      	subs	r1, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80061d4:	3301      	adds	r3, #1
 80061d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061da:	e051      	b.n	8006280 <HAL_I2C_Init+0x1dc>
 80061dc:	2304      	movs	r3, #4
 80061de:	e04f      	b.n	8006280 <HAL_I2C_Init+0x1dc>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d111      	bne.n	800620c <HAL_I2C_Init+0x168>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	1e58      	subs	r0, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6859      	ldr	r1, [r3, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	440b      	add	r3, r1
 80061f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061fa:	3301      	adds	r3, #1
 80061fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006200:	2b00      	cmp	r3, #0
 8006202:	bf0c      	ite	eq
 8006204:	2301      	moveq	r3, #1
 8006206:	2300      	movne	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	e012      	b.n	8006232 <HAL_I2C_Init+0x18e>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	1e58      	subs	r0, r3, #1
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6859      	ldr	r1, [r3, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	0099      	lsls	r1, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006222:	3301      	adds	r3, #1
 8006224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006228:	2b00      	cmp	r3, #0
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_I2C_Init+0x196>
 8006236:	2301      	movs	r3, #1
 8006238:	e022      	b.n	8006280 <HAL_I2C_Init+0x1dc>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10e      	bne.n	8006260 <HAL_I2C_Init+0x1bc>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1e58      	subs	r0, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	440b      	add	r3, r1
 8006250:	fbb0 f3f3 	udiv	r3, r0, r3
 8006254:	3301      	adds	r3, #1
 8006256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800625a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625e:	e00f      	b.n	8006280 <HAL_I2C_Init+0x1dc>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1e58      	subs	r0, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	440b      	add	r3, r1
 800626e:	0099      	lsls	r1, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	fbb0 f3f3 	udiv	r3, r0, r3
 8006276:	3301      	adds	r3, #1
 8006278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	6809      	ldr	r1, [r1, #0]
 8006284:	4313      	orrs	r3, r2
 8006286:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69da      	ldr	r2, [r3, #28]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80062ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6911      	ldr	r1, [r2, #16]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	68d2      	ldr	r2, [r2, #12]
 80062ba:	4311      	orrs	r1, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	430b      	orrs	r3, r1
 80062c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695a      	ldr	r2, [r3, #20]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	000186a0 	.word	0x000186a0
 800631c:	001e847f 	.word	0x001e847f
 8006320:	003d08ff 	.word	0x003d08ff
 8006324:	431bde83 	.word	0x431bde83
 8006328:	10624dd3 	.word	0x10624dd3

0800632c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	607a      	str	r2, [r7, #4]
 8006336:	461a      	mov	r2, r3
 8006338:	460b      	mov	r3, r1
 800633a:	817b      	strh	r3, [r7, #10]
 800633c:	4613      	mov	r3, r2
 800633e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b20      	cmp	r3, #32
 800634e:	f040 8085 	bne.w	800645c <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006352:	4b46      	ldr	r3, [pc, #280]	; (800646c <HAL_I2C_Master_Transmit_IT+0x140>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	08db      	lsrs	r3, r3, #3
 8006358:	4a45      	ldr	r2, [pc, #276]	; (8006470 <HAL_I2C_Master_Transmit_IT+0x144>)
 800635a:	fba2 2303 	umull	r2, r3, r2, r3
 800635e:	0a1a      	lsrs	r2, r3, #8
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009a      	lsls	r2, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	3b01      	subs	r3, #1
 8006370:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d116      	bne.n	80063a6 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2220      	movs	r2, #32
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f043 0220 	orr.w	r2, r3, #32
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e05b      	b.n	800645e <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d0db      	beq.n	800636c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d101      	bne.n	80063c2 <HAL_I2C_Master_Transmit_IT+0x96>
 80063be:	2302      	movs	r3, #2
 80063c0:	e04d      	b.n	800645e <HAL_I2C_Master_Transmit_IT+0x132>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d007      	beq.n	80063e8 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2221      	movs	r2, #33	; 0x21
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2210      	movs	r2, #16
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	893a      	ldrh	r2, [r7, #8]
 8006418:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4a13      	ldr	r2, [pc, #76]	; (8006474 <HAL_I2C_Master_Transmit_IT+0x148>)
 8006428:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800642a:	897a      	ldrh	r2, [r7, #10]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006446:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006456:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	e000      	b.n	800645e <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800645c:	2302      	movs	r3, #2
  }
}
 800645e:	4618      	mov	r0, r3
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	2000023c 	.word	0x2000023c
 8006470:	14f8b589 	.word	0x14f8b589
 8006474:	ffff0000 	.word	0xffff0000

08006478 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	607a      	str	r2, [r7, #4]
 8006482:	461a      	mov	r2, r3
 8006484:	460b      	mov	r3, r1
 8006486:	817b      	strh	r3, [r7, #10]
 8006488:	4613      	mov	r3, r2
 800648a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b20      	cmp	r3, #32
 800649a:	f040 808d 	bne.w	80065b8 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800649e:	4b4a      	ldr	r3, [pc, #296]	; (80065c8 <HAL_I2C_Master_Receive_IT+0x150>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	08db      	lsrs	r3, r3, #3
 80064a4:	4a49      	ldr	r2, [pc, #292]	; (80065cc <HAL_I2C_Master_Receive_IT+0x154>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	0a1a      	lsrs	r2, r3, #8
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009a      	lsls	r2, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d116      	bne.n	80064f2 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f043 0220 	orr.w	r2, r3, #32
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e063      	b.n	80065ba <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d0db      	beq.n	80064b8 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <HAL_I2C_Master_Receive_IT+0x96>
 800650a:	2302      	movs	r3, #2
 800650c:	e055      	b.n	80065ba <HAL_I2C_Master_Receive_IT+0x142>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b01      	cmp	r3, #1
 8006522:	d007      	beq.n	8006534 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006542:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2222      	movs	r2, #34	; 0x22
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2210      	movs	r2, #16
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	893a      	ldrh	r2, [r7, #8]
 8006564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a17      	ldr	r2, [pc, #92]	; (80065d0 <HAL_I2C_Master_Receive_IT+0x158>)
 8006574:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006576:	897a      	ldrh	r2, [r7, #10]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006592:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065a2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065b2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	e000      	b.n	80065ba <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80065b8:	2302      	movs	r3, #2
  }
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	2000023c 	.word	0x2000023c
 80065cc:	14f8b589 	.word	0x14f8b589
 80065d0:	ffff0000 	.word	0xffff0000

080065d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	2b10      	cmp	r3, #16
 8006602:	d003      	beq.n	800660c <HAL_I2C_EV_IRQHandler+0x38>
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	2b40      	cmp	r3, #64	; 0x40
 8006608:	f040 80c1 	bne.w	800678e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10d      	bne.n	8006642 <HAL_I2C_EV_IRQHandler+0x6e>
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800662c:	d003      	beq.n	8006636 <HAL_I2C_EV_IRQHandler+0x62>
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006634:	d101      	bne.n	800663a <HAL_I2C_EV_IRQHandler+0x66>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <HAL_I2C_EV_IRQHandler+0x68>
 800663a:	2300      	movs	r3, #0
 800663c:	2b01      	cmp	r3, #1
 800663e:	f000 8132 	beq.w	80068a6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00c      	beq.n	8006666 <HAL_I2C_EV_IRQHandler+0x92>
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	0a5b      	lsrs	r3, r3, #9
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d006      	beq.n	8006666 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fc7b 	bl	8007f54 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fd83 	bl	800716a <I2C_Master_SB>
 8006664:	e092      	b.n	800678c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	08db      	lsrs	r3, r3, #3
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <HAL_I2C_EV_IRQHandler+0xb2>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	0a5b      	lsrs	r3, r3, #9
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fdf9 	bl	8007276 <I2C_Master_ADD10>
 8006684:	e082      	b.n	800678c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	085b      	lsrs	r3, r3, #1
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <HAL_I2C_EV_IRQHandler+0xd2>
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	0a5b      	lsrs	r3, r3, #9
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fe13 	bl	80072ca <I2C_Master_ADDR>
 80066a4:	e072      	b.n	800678c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	089b      	lsrs	r3, r3, #2
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d03b      	beq.n	800672a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c0:	f000 80f3 	beq.w	80068aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	09db      	lsrs	r3, r3, #7
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00f      	beq.n	80066f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	0a9b      	lsrs	r3, r3, #10
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	089b      	lsrs	r3, r3, #2
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d103      	bne.n	80066f0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f9f3 	bl	8006ad4 <I2C_MasterTransmit_TXE>
 80066ee:	e04d      	b.n	800678c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	089b      	lsrs	r3, r3, #2
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80d6 	beq.w	80068aa <HAL_I2C_EV_IRQHandler+0x2d6>
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	0a5b      	lsrs	r3, r3, #9
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 80cf 	beq.w	80068aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	2b21      	cmp	r3, #33	; 0x21
 8006710:	d103      	bne.n	800671a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa7a 	bl	8006c0c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006718:	e0c7      	b.n	80068aa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	2b40      	cmp	r3, #64	; 0x40
 800671e:	f040 80c4 	bne.w	80068aa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fae8 	bl	8006cf8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006728:	e0bf      	b.n	80068aa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006738:	f000 80b7 	beq.w	80068aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	099b      	lsrs	r3, r3, #6
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00f      	beq.n	8006768 <HAL_I2C_EV_IRQHandler+0x194>
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	0a9b      	lsrs	r3, r3, #10
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d009      	beq.n	8006768 <HAL_I2C_EV_IRQHandler+0x194>
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	089b      	lsrs	r3, r3, #2
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d103      	bne.n	8006768 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fb5d 	bl	8006e20 <I2C_MasterReceive_RXNE>
 8006766:	e011      	b.n	800678c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	089b      	lsrs	r3, r3, #2
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 809a 	beq.w	80068aa <HAL_I2C_EV_IRQHandler+0x2d6>
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	0a5b      	lsrs	r3, r3, #9
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 8093 	beq.w	80068aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fc06 	bl	8006f96 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800678a:	e08e      	b.n	80068aa <HAL_I2C_EV_IRQHandler+0x2d6>
 800678c:	e08d      	b.n	80068aa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	e007      	b.n	80067b0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	085b      	lsrs	r3, r3, #1
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d012      	beq.n	80067e2 <HAL_I2C_EV_IRQHandler+0x20e>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	0a5b      	lsrs	r3, r3, #9
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00c      	beq.n	80067e2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80067d8:	69b9      	ldr	r1, [r7, #24]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 ffc4 	bl	8007768 <I2C_Slave_ADDR>
 80067e0:	e066      	b.n	80068b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	091b      	lsrs	r3, r3, #4
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d009      	beq.n	8006802 <HAL_I2C_EV_IRQHandler+0x22e>
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	0a5b      	lsrs	r3, r3, #9
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fffe 	bl	80077fc <I2C_Slave_STOPF>
 8006800:	e056      	b.n	80068b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	2b21      	cmp	r3, #33	; 0x21
 8006806:	d002      	beq.n	800680e <HAL_I2C_EV_IRQHandler+0x23a>
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	2b29      	cmp	r3, #41	; 0x29
 800680c:	d125      	bne.n	800685a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	09db      	lsrs	r3, r3, #7
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00f      	beq.n	800683a <HAL_I2C_EV_IRQHandler+0x266>
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	0a9b      	lsrs	r3, r3, #10
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <HAL_I2C_EV_IRQHandler+0x266>
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	089b      	lsrs	r3, r3, #2
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d103      	bne.n	800683a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 feda 	bl	80075ec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006838:	e039      	b.n	80068ae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	089b      	lsrs	r3, r3, #2
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d033      	beq.n	80068ae <HAL_I2C_EV_IRQHandler+0x2da>
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	0a5b      	lsrs	r3, r3, #9
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d02d      	beq.n	80068ae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 ff07 	bl	8007666 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006858:	e029      	b.n	80068ae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	099b      	lsrs	r3, r3, #6
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00f      	beq.n	8006886 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	0a9b      	lsrs	r3, r3, #10
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	089b      	lsrs	r3, r3, #2
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 ff12 	bl	80076a8 <I2C_SlaveReceive_RXNE>
 8006884:	e014      	b.n	80068b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	089b      	lsrs	r3, r3, #2
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00e      	beq.n	80068b0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	0a5b      	lsrs	r3, r3, #9
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d008      	beq.n	80068b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 ff40 	bl	8007724 <I2C_SlaveReceive_BTF>
 80068a4:	e004      	b.n	80068b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80068a6:	bf00      	nop
 80068a8:	e002      	b.n	80068b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068aa:	bf00      	nop
 80068ac:	e000      	b.n	80068b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b08a      	sub	sp, #40	; 0x28
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80068ce:	2300      	movs	r3, #0
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068d8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	0a1b      	lsrs	r3, r3, #8
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00e      	beq.n	8006904 <HAL_I2C_ER_IRQHandler+0x4e>
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	0a1b      	lsrs	r3, r3, #8
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d008      	beq.n	8006904 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	f043 0301 	orr.w	r3, r3, #1
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006902:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	0a5b      	lsrs	r3, r3, #9
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00e      	beq.n	800692e <HAL_I2C_ER_IRQHandler+0x78>
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	0a1b      	lsrs	r3, r3, #8
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	f043 0302 	orr.w	r3, r3, #2
 8006922:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800692c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	0a9b      	lsrs	r3, r3, #10
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d03f      	beq.n	80069ba <HAL_I2C_ER_IRQHandler+0x104>
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	0a1b      	lsrs	r3, r3, #8
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d039      	beq.n	80069ba <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006946:	7efb      	ldrb	r3, [r7, #27]
 8006948:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006958:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006960:	7ebb      	ldrb	r3, [r7, #26]
 8006962:	2b20      	cmp	r3, #32
 8006964:	d112      	bne.n	800698c <HAL_I2C_ER_IRQHandler+0xd6>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10f      	bne.n	800698c <HAL_I2C_ER_IRQHandler+0xd6>
 800696c:	7cfb      	ldrb	r3, [r7, #19]
 800696e:	2b21      	cmp	r3, #33	; 0x21
 8006970:	d008      	beq.n	8006984 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006972:	7cfb      	ldrb	r3, [r7, #19]
 8006974:	2b29      	cmp	r3, #41	; 0x29
 8006976:	d005      	beq.n	8006984 <HAL_I2C_ER_IRQHandler+0xce>
 8006978:	7cfb      	ldrb	r3, [r7, #19]
 800697a:	2b28      	cmp	r3, #40	; 0x28
 800697c:	d106      	bne.n	800698c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b21      	cmp	r3, #33	; 0x21
 8006982:	d103      	bne.n	800698c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f869 	bl	8007a5c <I2C_Slave_AF>
 800698a:	e016      	b.n	80069ba <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006994:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	f043 0304 	orr.w	r3, r3, #4
 800699c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800699e:	7efb      	ldrb	r3, [r7, #27]
 80069a0:	2b10      	cmp	r3, #16
 80069a2:	d002      	beq.n	80069aa <HAL_I2C_ER_IRQHandler+0xf4>
 80069a4:	7efb      	ldrb	r3, [r7, #27]
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d107      	bne.n	80069ba <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069b8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	0adb      	lsrs	r3, r3, #11
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00e      	beq.n	80069e4 <HAL_I2C_ER_IRQHandler+0x12e>
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	0a1b      	lsrs	r3, r3, #8
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d008      	beq.n	80069e4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	f043 0308 	orr.w	r3, r3, #8
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80069e2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d008      	beq.n	80069fc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 f8a0 	bl	8007b3c <I2C_ITError>
  }
}
 80069fc:	bf00      	nop
 80069fe:	3728      	adds	r7, #40	; 0x28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
 8006a60:	4613      	mov	r3, r2
 8006a62:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d150      	bne.n	8006b9c <I2C_MasterTransmit_TXE+0xc8>
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	2b21      	cmp	r3, #33	; 0x21
 8006afe:	d14d      	bne.n	8006b9c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d01d      	beq.n	8006b42 <I2C_MasterTransmit_TXE+0x6e>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d01a      	beq.n	8006b42 <I2C_MasterTransmit_TXE+0x6e>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b12:	d016      	beq.n	8006b42 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b22:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2211      	movs	r2, #17
 8006b28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff ff62 	bl	8006a04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b40:	e060      	b.n	8006c04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b50:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b60:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	d107      	bne.n	8006b8c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff ff7d 	bl	8006a84 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b8a:	e03b      	b.n	8006c04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff ff35 	bl	8006a04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b9a:	e033      	b.n	8006c04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	2b21      	cmp	r3, #33	; 0x21
 8006ba0:	d005      	beq.n	8006bae <I2C_MasterTransmit_TXE+0xda>
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b40      	cmp	r3, #64	; 0x40
 8006ba6:	d12d      	bne.n	8006c04 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	2b22      	cmp	r3, #34	; 0x22
 8006bac:	d12a      	bne.n	8006c04 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d108      	bne.n	8006bca <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bc6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006bc8:	e01c      	b.n	8006c04 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	d103      	bne.n	8006bde <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f88e 	bl	8006cf8 <I2C_MemoryTransmit_TXE_BTF>
}
 8006bdc:	e012      	b.n	8006c04 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c02:	e7ff      	b.n	8006c04 <I2C_MasterTransmit_TXE+0x130>
 8006c04:	bf00      	nop
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b21      	cmp	r3, #33	; 0x21
 8006c24:	d164      	bne.n	8006cf0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d012      	beq.n	8006c56 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	781a      	ldrb	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006c54:	e04c      	b.n	8006cf0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d01d      	beq.n	8006c98 <I2C_MasterTransmit_BTF+0x8c>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d01a      	beq.n	8006c98 <I2C_MasterTransmit_BTF+0x8c>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c68:	d016      	beq.n	8006c98 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c78:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2211      	movs	r2, #17
 8006c7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff feb7 	bl	8006a04 <HAL_I2C_MasterTxCpltCallback>
}
 8006c96:	e02b      	b.n	8006cf0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ca6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	d107      	bne.n	8006ce2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff fed2 	bl	8006a84 <HAL_I2C_MemTxCpltCallback>
}
 8006ce0:	e006      	b.n	8006cf0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff fe8a 	bl	8006a04 <HAL_I2C_MasterTxCpltCallback>
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d11d      	bne.n	8006d4c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d10b      	bne.n	8006d30 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d28:	1c9a      	adds	r2, r3, #2
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006d2e:	e073      	b.n	8006e18 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	121b      	asrs	r3, r3, #8
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006d4a:	e065      	b.n	8006e18 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d10b      	bne.n	8006d6c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006d6a:	e055      	b.n	8006e18 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d151      	bne.n	8006e18 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	2b22      	cmp	r3, #34	; 0x22
 8006d78:	d10d      	bne.n	8006d96 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d88:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006d94:	e040      	b.n	8006e18 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d015      	beq.n	8006dcc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	2b21      	cmp	r3, #33	; 0x21
 8006da4:	d112      	bne.n	8006dcc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	781a      	ldrb	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006dca:	e025      	b.n	8006e18 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d120      	bne.n	8006e18 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	2b21      	cmp	r3, #33	; 0x21
 8006dda:	d11d      	bne.n	8006e18 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dfa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff fe36 	bl	8006a84 <HAL_I2C_MemTxCpltCallback>
}
 8006e18:	bf00      	nop
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b22      	cmp	r3, #34	; 0x22
 8006e32:	f040 80ac 	bne.w	8006f8e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d921      	bls.n	8006e88 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	691a      	ldr	r2, [r3, #16]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	f040 808c 	bne.w	8006f8e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e84:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006e86:	e082      	b.n	8006f8e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d075      	beq.n	8006f7c <I2C_MasterReceive_RXNE+0x15c>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d002      	beq.n	8006e9c <I2C_MasterReceive_RXNE+0x7c>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d16f      	bne.n	8006f7c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 f827 	bl	8007ef0 <I2C_WaitOnSTOPRequestThroughIT>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d142      	bne.n	8006f2e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ec6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d10a      	bne.n	8006f18 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff fdc1 	bl	8006a98 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f16:	e03a      	b.n	8006f8e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2212      	movs	r2, #18
 8006f24:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff fd76 	bl	8006a18 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f2c:	e02f      	b.n	8006f8e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f3c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	b2d2      	uxtb	r2, r2
 8006f4a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff fd99 	bl	8006aac <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f7a:	e008      	b.n	8006f8e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f8a:	605a      	str	r2, [r3, #4]
}
 8006f8c:	e7ff      	b.n	8006f8e <I2C_MasterReceive_RXNE+0x16e>
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d11b      	bne.n	8006fe6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fbc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006fe4:	e0bd      	b.n	8007162 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d129      	bne.n	8007044 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ffe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b04      	cmp	r3, #4
 8007004:	d00a      	beq.n	800701c <I2C_MasterReceive_BTF+0x86>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d007      	beq.n	800701c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800701a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	b29a      	uxth	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007042:	e08e      	b.n	8007162 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d176      	bne.n	800713c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d002      	beq.n	800705a <I2C_MasterReceive_BTF+0xc4>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b10      	cmp	r3, #16
 8007058:	d108      	bne.n	800706c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e019      	b.n	80070a0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b04      	cmp	r3, #4
 8007070:	d002      	beq.n	8007078 <I2C_MasterReceive_BTF+0xe2>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b02      	cmp	r3, #2
 8007076:	d108      	bne.n	800708a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	e00a      	b.n	80070a0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b10      	cmp	r3, #16
 800708e:	d007      	beq.n	80070a0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800709e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	b2d2      	uxtb	r2, r2
 80070d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80070fa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b40      	cmp	r3, #64	; 0x40
 800710e:	d10a      	bne.n	8007126 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff fcba 	bl	8006a98 <HAL_I2C_MemRxCpltCallback>
}
 8007124:	e01d      	b.n	8007162 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2212      	movs	r2, #18
 8007132:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff fc6f 	bl	8006a18 <HAL_I2C_MasterRxCpltCallback>
}
 800713a:	e012      	b.n	8007162 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691a      	ldr	r2, [r3, #16]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007158:	b29b      	uxth	r3, r3
 800715a:	3b01      	subs	r3, #1
 800715c:	b29a      	uxth	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007162:	bf00      	nop
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	d117      	bne.n	80071ae <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718a:	b2db      	uxtb	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007196:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007198:	e067      	b.n	800726a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	611a      	str	r2, [r3, #16]
}
 80071ac:	e05d      	b.n	800726a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071b6:	d133      	bne.n	8007220 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b21      	cmp	r3, #33	; 0x21
 80071c2:	d109      	bne.n	80071d8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071d4:	611a      	str	r2, [r3, #16]
 80071d6:	e008      	b.n	80071ea <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f043 0301 	orr.w	r3, r3, #1
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d004      	beq.n	80071fc <I2C_Master_SB+0x92>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d108      	bne.n	800720e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	2b00      	cmp	r3, #0
 8007202:	d032      	beq.n	800726a <I2C_Master_SB+0x100>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720a:	2b00      	cmp	r3, #0
 800720c:	d02d      	beq.n	800726a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800721c:	605a      	str	r2, [r3, #4]
}
 800721e:	e024      	b.n	800726a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10e      	bne.n	8007246 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722c:	b29b      	uxth	r3, r3
 800722e:	11db      	asrs	r3, r3, #7
 8007230:	b2db      	uxtb	r3, r3
 8007232:	f003 0306 	and.w	r3, r3, #6
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f063 030f 	orn	r3, r3, #15
 800723c:	b2da      	uxtb	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	611a      	str	r2, [r3, #16]
}
 8007244:	e011      	b.n	800726a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724a:	2b01      	cmp	r3, #1
 800724c:	d10d      	bne.n	800726a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	b29b      	uxth	r3, r3
 8007254:	11db      	asrs	r3, r3, #7
 8007256:	b2db      	uxtb	r3, r3
 8007258:	f003 0306 	and.w	r3, r3, #6
 800725c:	b2db      	uxtb	r3, r3
 800725e:	f063 030e 	orn	r3, r3, #14
 8007262:	b2da      	uxtb	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	611a      	str	r2, [r3, #16]
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	b2da      	uxtb	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <I2C_Master_ADD10+0x26>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007298:	2b00      	cmp	r3, #0
 800729a:	d108      	bne.n	80072ae <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00c      	beq.n	80072be <I2C_Master_ADD10+0x48>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072bc:	605a      	str	r2, [r3, #4]
  }
}
 80072be:	bf00      	nop
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b091      	sub	sp, #68	; 0x44
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b22      	cmp	r3, #34	; 0x22
 80072f2:	f040 8169 	bne.w	80075c8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10f      	bne.n	800731e <I2C_Master_ADDR+0x54>
 80072fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007302:	2b40      	cmp	r3, #64	; 0x40
 8007304:	d10b      	bne.n	800731e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007306:	2300      	movs	r3, #0
 8007308:	633b      	str	r3, [r7, #48]	; 0x30
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	633b      	str	r3, [r7, #48]	; 0x30
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	633b      	str	r3, [r7, #48]	; 0x30
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	e160      	b.n	80075e0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007322:	2b00      	cmp	r3, #0
 8007324:	d11d      	bne.n	8007362 <I2C_Master_ADDR+0x98>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800732e:	d118      	bne.n	8007362 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007330:	2300      	movs	r3, #0
 8007332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007354:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	651a      	str	r2, [r3, #80]	; 0x50
 8007360:	e13e      	b.n	80075e0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d113      	bne.n	8007394 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800736c:	2300      	movs	r3, #0
 800736e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	e115      	b.n	80075c0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b01      	cmp	r3, #1
 800739c:	f040 808a 	bne.w	80074b4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073a6:	d137      	bne.n	8007418 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c6:	d113      	bne.n	80073f0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073d8:	2300      	movs	r3, #0
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	e0e7      	b.n	80075c0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073f0:	2300      	movs	r3, #0
 80073f2:	623b      	str	r3, [r7, #32]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	623b      	str	r3, [r7, #32]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	623b      	str	r3, [r7, #32]
 8007404:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	e0d3      	b.n	80075c0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	2b08      	cmp	r3, #8
 800741c:	d02e      	beq.n	800747c <I2C_Master_ADDR+0x1b2>
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	2b20      	cmp	r3, #32
 8007422:	d02b      	beq.n	800747c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007426:	2b12      	cmp	r3, #18
 8007428:	d102      	bne.n	8007430 <I2C_Master_ADDR+0x166>
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	2b01      	cmp	r3, #1
 800742e:	d125      	bne.n	800747c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	2b04      	cmp	r3, #4
 8007434:	d00e      	beq.n	8007454 <I2C_Master_ADDR+0x18a>
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	2b02      	cmp	r3, #2
 800743a:	d00b      	beq.n	8007454 <I2C_Master_ADDR+0x18a>
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	2b10      	cmp	r3, #16
 8007440:	d008      	beq.n	8007454 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	e007      	b.n	8007464 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007462:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007464:	2300      	movs	r3, #0
 8007466:	61fb      	str	r3, [r7, #28]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	61fb      	str	r3, [r7, #28]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	e0a1      	b.n	80075c0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800748a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800748c:	2300      	movs	r3, #0
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e085      	b.n	80075c0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d14d      	bne.n	800755a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d016      	beq.n	80074f2 <I2C_Master_ADDR+0x228>
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d013      	beq.n	80074f2 <I2C_Master_ADDR+0x228>
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d010      	beq.n	80074f2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074de:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e007      	b.n	8007502 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007500:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007510:	d117      	bne.n	8007542 <I2C_Master_ADDR+0x278>
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007518:	d00b      	beq.n	8007532 <I2C_Master_ADDR+0x268>
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	2b01      	cmp	r3, #1
 800751e:	d008      	beq.n	8007532 <I2C_Master_ADDR+0x268>
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	2b08      	cmp	r3, #8
 8007524:	d005      	beq.n	8007532 <I2C_Master_ADDR+0x268>
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	2b10      	cmp	r3, #16
 800752a:	d002      	beq.n	8007532 <I2C_Master_ADDR+0x268>
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	2b20      	cmp	r3, #32
 8007530:	d107      	bne.n	8007542 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007540:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007542:	2300      	movs	r3, #0
 8007544:	617b      	str	r3, [r7, #20]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	617b      	str	r3, [r7, #20]
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	e032      	b.n	80075c0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007568:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007578:	d117      	bne.n	80075aa <I2C_Master_ADDR+0x2e0>
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007580:	d00b      	beq.n	800759a <I2C_Master_ADDR+0x2d0>
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	2b01      	cmp	r3, #1
 8007586:	d008      	beq.n	800759a <I2C_Master_ADDR+0x2d0>
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	2b08      	cmp	r3, #8
 800758c:	d005      	beq.n	800759a <I2C_Master_ADDR+0x2d0>
 800758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007590:	2b10      	cmp	r3, #16
 8007592:	d002      	beq.n	800759a <I2C_Master_ADDR+0x2d0>
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	2b20      	cmp	r3, #32
 8007598:	d107      	bne.n	80075aa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075aa:	2300      	movs	r3, #0
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	613b      	str	r3, [r7, #16]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80075c6:	e00b      	b.n	80075e0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
}
 80075de:	e7ff      	b.n	80075e0 <I2C_Master_ADDR+0x316>
 80075e0:	bf00      	nop
 80075e2:	3744      	adds	r7, #68	; 0x44
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d02b      	beq.n	800765e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762e:	b29b      	uxth	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d114      	bne.n	800765e <I2C_SlaveTransmit_TXE+0x72>
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	2b29      	cmp	r3, #41	; 0x29
 8007638:	d111      	bne.n	800765e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007648:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2221      	movs	r2, #33	; 0x21
 800764e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2228      	movs	r2, #40	; 0x28
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff f9e7 	bl	8006a2c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800765e:	bf00      	nop
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007672:	b29b      	uxth	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d011      	beq.n	800769c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	781a      	ldrb	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d02c      	beq.n	800771c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076de:	b29b      	uxth	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d114      	bne.n	800771c <I2C_SlaveReceive_RXNE+0x74>
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	2b2a      	cmp	r3, #42	; 0x2a
 80076f6:	d111      	bne.n	800771c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007706:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2222      	movs	r2, #34	; 0x22
 800770c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2228      	movs	r2, #40	; 0x28
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff f992 	bl	8006a40 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007730:	b29b      	uxth	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d012      	beq.n	800775c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007782:	2b28      	cmp	r3, #40	; 0x28
 8007784:	d127      	bne.n	80077d6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007794:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	089b      	lsrs	r3, r3, #2
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80077a2:	2301      	movs	r3, #1
 80077a4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	09db      	lsrs	r3, r3, #7
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d103      	bne.n	80077ba <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	81bb      	strh	r3, [r7, #12]
 80077b8:	e002      	b.n	80077c0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80077c8:	89ba      	ldrh	r2, [r7, #12]
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff f940 	bl	8006a54 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80077d4:	e00e      	b.n	80077f4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077d6:	2300      	movs	r3, #0
 80077d8:	60bb      	str	r3, [r7, #8]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	60bb      	str	r3, [r7, #8]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80077f4:	bf00      	nop
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800780a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800781a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800781c:	2300      	movs	r3, #0
 800781e:	60bb      	str	r3, [r7, #8]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	60bb      	str	r3, [r7, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0201 	orr.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007848:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007858:	d172      	bne.n	8007940 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800785a:	7bfb      	ldrb	r3, [r7, #15]
 800785c:	2b22      	cmp	r3, #34	; 0x22
 800785e:	d002      	beq.n	8007866 <I2C_Slave_STOPF+0x6a>
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	2b2a      	cmp	r3, #42	; 0x2a
 8007864:	d135      	bne.n	80078d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	b29a      	uxth	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d005      	beq.n	800788a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007882:	f043 0204 	orr.w	r2, r3, #4
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007898:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe f938 	bl	8005b14 <HAL_DMA_GetState>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d049      	beq.n	800793e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	4a69      	ldr	r2, [pc, #420]	; (8007a54 <I2C_Slave_STOPF+0x258>)
 80078b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fd ff80 	bl	80057bc <HAL_DMA_Abort_IT>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d03d      	beq.n	800793e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078cc:	4610      	mov	r0, r2
 80078ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078d0:	e035      	b.n	800793e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	b29a      	uxth	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f043 0204 	orr.w	r2, r3, #4
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007904:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790a:	4618      	mov	r0, r3
 800790c:	f7fe f902 	bl	8005b14 <HAL_DMA_GetState>
 8007910:	4603      	mov	r3, r0
 8007912:	2b01      	cmp	r3, #1
 8007914:	d014      	beq.n	8007940 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791a:	4a4e      	ldr	r2, [pc, #312]	; (8007a54 <I2C_Slave_STOPF+0x258>)
 800791c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007922:	4618      	mov	r0, r3
 8007924:	f7fd ff4a 	bl	80057bc <HAL_DMA_Abort_IT>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d008      	beq.n	8007940 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007938:	4610      	mov	r0, r2
 800793a:	4798      	blx	r3
 800793c:	e000      	b.n	8007940 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800793e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d03e      	beq.n	80079c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b04      	cmp	r3, #4
 8007956:	d112      	bne.n	800797e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691a      	ldr	r2, [r3, #16]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	b2d2      	uxtb	r2, r2
 8007964:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007988:	2b40      	cmp	r3, #64	; 0x40
 800798a:	d112      	bne.n	80079b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	691a      	ldr	r2, [r3, #16]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	b2d2      	uxtb	r2, r2
 8007998:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	f043 0204 	orr.w	r2, r3, #4
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f8b3 	bl	8007b3c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80079d6:	e039      	b.n	8007a4c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	2b2a      	cmp	r3, #42	; 0x2a
 80079dc:	d109      	bne.n	80079f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2228      	movs	r2, #40	; 0x28
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff f827 	bl	8006a40 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b28      	cmp	r3, #40	; 0x28
 80079fc:	d111      	bne.n	8007a22 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a15      	ldr	r2, [pc, #84]	; (8007a58 <I2C_Slave_STOPF+0x25c>)
 8007a02:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff f828 	bl	8006a70 <HAL_I2C_ListenCpltCallback>
}
 8007a20:	e014      	b.n	8007a4c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a26:	2b22      	cmp	r3, #34	; 0x22
 8007a28:	d002      	beq.n	8007a30 <I2C_Slave_STOPF+0x234>
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	2b22      	cmp	r3, #34	; 0x22
 8007a2e:	d10d      	bne.n	8007a4c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fe fffa 	bl	8006a40 <HAL_I2C_SlaveRxCpltCallback>
}
 8007a4c:	bf00      	nop
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	08007da1 	.word	0x08007da1
 8007a58:	ffff0000 	.word	0xffff0000

08007a5c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d002      	beq.n	8007a7e <I2C_Slave_AF+0x22>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	d129      	bne.n	8007ad2 <I2C_Slave_AF+0x76>
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	2b28      	cmp	r3, #40	; 0x28
 8007a82:	d126      	bne.n	8007ad2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a2c      	ldr	r2, [pc, #176]	; (8007b38 <I2C_Slave_AF+0xdc>)
 8007a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a98:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007aa2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7fe ffd0 	bl	8006a70 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007ad0:	e02e      	b.n	8007b30 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	2b21      	cmp	r3, #33	; 0x21
 8007ad6:	d126      	bne.n	8007b26 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a17      	ldr	r2, [pc, #92]	; (8007b38 <I2C_Slave_AF+0xdc>)
 8007adc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2221      	movs	r2, #33	; 0x21
 8007ae2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b02:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b0c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b1c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fe ff84 	bl	8006a2c <HAL_I2C_SlaveTxCpltCallback>
}
 8007b24:	e004      	b.n	8007b30 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b2e:	615a      	str	r2, [r3, #20]
}
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	ffff0000 	.word	0xffff0000

08007b3c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	2b10      	cmp	r3, #16
 8007b58:	d002      	beq.n	8007b60 <I2C_ITError+0x24>
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	2b40      	cmp	r3, #64	; 0x40
 8007b5e:	d10a      	bne.n	8007b76 <I2C_ITError+0x3a>
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	2b22      	cmp	r3, #34	; 0x22
 8007b64:	d107      	bne.n	8007b76 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b74:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b7c:	2b28      	cmp	r3, #40	; 0x28
 8007b7e:	d107      	bne.n	8007b90 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2228      	movs	r2, #40	; 0x28
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b8e:	e015      	b.n	8007bbc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b9e:	d00a      	beq.n	8007bb6 <I2C_ITError+0x7a>
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	2b60      	cmp	r3, #96	; 0x60
 8007ba4:	d007      	beq.n	8007bb6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bca:	d162      	bne.n	8007c92 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bda:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d020      	beq.n	8007c2c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bee:	4a6a      	ldr	r2, [pc, #424]	; (8007d98 <I2C_ITError+0x25c>)
 8007bf0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fd fde0 	bl	80057bc <HAL_DMA_Abort_IT>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 8089 	beq.w	8007d16 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0201 	bic.w	r2, r2, #1
 8007c12:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c26:	4610      	mov	r0, r2
 8007c28:	4798      	blx	r3
 8007c2a:	e074      	b.n	8007d16 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c30:	4a59      	ldr	r2, [pc, #356]	; (8007d98 <I2C_ITError+0x25c>)
 8007c32:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fd fdbf 	bl	80057bc <HAL_DMA_Abort_IT>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d068      	beq.n	8007d16 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4e:	2b40      	cmp	r3, #64	; 0x40
 8007c50:	d10b      	bne.n	8007c6a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	b2d2      	uxtb	r2, r2
 8007c5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0201 	bic.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	4798      	blx	r3
 8007c90:	e041      	b.n	8007d16 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b60      	cmp	r3, #96	; 0x60
 8007c9c:	d125      	bne.n	8007cea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb6:	2b40      	cmp	r3, #64	; 0x40
 8007cb8:	d10b      	bne.n	8007cd2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	b2d2      	uxtb	r2, r2
 8007cc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 0201 	bic.w	r2, r2, #1
 8007ce0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fe feec 	bl	8006ac0 <HAL_I2C_AbortCpltCallback>
 8007ce8:	e015      	b.n	8007d16 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf4:	2b40      	cmp	r3, #64	; 0x40
 8007cf6:	d10b      	bne.n	8007d10 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7fe fecb 	bl	8006aac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10e      	bne.n	8007d44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d109      	bne.n	8007d44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d104      	bne.n	8007d44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d007      	beq.n	8007d54 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d52:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d5a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d113      	bne.n	8007d90 <I2C_ITError+0x254>
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	2b28      	cmp	r3, #40	; 0x28
 8007d6c:	d110      	bne.n	8007d90 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <I2C_ITError+0x260>)
 8007d72:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fe fe70 	bl	8006a70 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d90:	bf00      	nop
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	08007da1 	.word	0x08007da1
 8007d9c:	ffff0000 	.word	0xffff0000

08007da0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007dba:	4b4b      	ldr	r3, [pc, #300]	; (8007ee8 <I2C_DMAAbort+0x148>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	08db      	lsrs	r3, r3, #3
 8007dc0:	4a4a      	ldr	r2, [pc, #296]	; (8007eec <I2C_DMAAbort+0x14c>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	0a1a      	lsrs	r2, r3, #8
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	00da      	lsls	r2, r3, #3
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d106      	bne.n	8007de8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	f043 0220 	orr.w	r2, r3, #32
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007de6:	e00a      	b.n	8007dfe <I2C_DMAAbort+0x5e>
    }
    count--;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dfc:	d0ea      	beq.n	8007dd4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e2c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2200      	movs	r2, #0
 8007e32:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e40:	2200      	movs	r2, #0
 8007e42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	2200      	movs	r2, #0
 8007e52:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 0201 	bic.w	r2, r2, #1
 8007e62:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b60      	cmp	r3, #96	; 0x60
 8007e6e:	d10e      	bne.n	8007e8e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2200      	movs	r2, #0
 8007e84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007e86:	6978      	ldr	r0, [r7, #20]
 8007e88:	f7fe fe1a 	bl	8006ac0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e8c:	e027      	b.n	8007ede <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e8e:	7cfb      	ldrb	r3, [r7, #19]
 8007e90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e94:	2b28      	cmp	r3, #40	; 0x28
 8007e96:	d117      	bne.n	8007ec8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007eb6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2228      	movs	r2, #40	; 0x28
 8007ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ec6:	e007      	b.n	8007ed8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007ed8:	6978      	ldr	r0, [r7, #20]
 8007eda:	f7fe fde7 	bl	8006aac <HAL_I2C_ErrorCallback>
}
 8007ede:	bf00      	nop
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	2000023c 	.word	0x2000023c
 8007eec:	14f8b589 	.word	0x14f8b589

08007ef0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007efc:	4b13      	ldr	r3, [pc, #76]	; (8007f4c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	08db      	lsrs	r3, r3, #3
 8007f02:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007f04:	fba2 2303 	umull	r2, r3, r2, r3
 8007f08:	0a1a      	lsrs	r2, r3, #8
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	3b01      	subs	r3, #1
 8007f16:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d107      	bne.n	8007f2e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	f043 0220 	orr.w	r2, r3, #32
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e008      	b.n	8007f40 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f3c:	d0e9      	beq.n	8007f12 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	2000023c 	.word	0x2000023c
 8007f50:	14f8b589 	.word	0x14f8b589

08007f54 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007f64:	d103      	bne.n	8007f6e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f6c:	e007      	b.n	8007f7e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007f76:	d102      	bne.n	8007f7e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2208      	movs	r2, #8
 8007f7c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
	...

08007f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e267      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d075      	beq.n	8008096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007faa:	4b88      	ldr	r3, [pc, #544]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f003 030c 	and.w	r3, r3, #12
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d00c      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fb6:	4b85      	ldr	r3, [pc, #532]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fbe:	2b08      	cmp	r3, #8
 8007fc0:	d112      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fc2:	4b82      	ldr	r3, [pc, #520]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fce:	d10b      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fd0:	4b7e      	ldr	r3, [pc, #504]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d05b      	beq.n	8008094 <HAL_RCC_OscConfig+0x108>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d157      	bne.n	8008094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e242      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff0:	d106      	bne.n	8008000 <HAL_RCC_OscConfig+0x74>
 8007ff2:	4b76      	ldr	r3, [pc, #472]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a75      	ldr	r2, [pc, #468]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8007ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	e01d      	b.n	800803c <HAL_RCC_OscConfig+0xb0>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008008:	d10c      	bne.n	8008024 <HAL_RCC_OscConfig+0x98>
 800800a:	4b70      	ldr	r3, [pc, #448]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a6f      	ldr	r2, [pc, #444]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8008010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	4b6d      	ldr	r3, [pc, #436]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a6c      	ldr	r2, [pc, #432]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 800801c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	e00b      	b.n	800803c <HAL_RCC_OscConfig+0xb0>
 8008024:	4b69      	ldr	r3, [pc, #420]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a68      	ldr	r2, [pc, #416]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 800802a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	4b66      	ldr	r3, [pc, #408]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a65      	ldr	r2, [pc, #404]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8008036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800803a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d013      	beq.n	800806c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008044:	f7fc fd24 	bl	8004a90 <HAL_GetTick>
 8008048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800804a:	e008      	b.n	800805e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800804c:	f7fc fd20 	bl	8004a90 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b64      	cmp	r3, #100	; 0x64
 8008058:	d901      	bls.n	800805e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e207      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800805e:	4b5b      	ldr	r3, [pc, #364]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d0f0      	beq.n	800804c <HAL_RCC_OscConfig+0xc0>
 800806a:	e014      	b.n	8008096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800806c:	f7fc fd10 	bl	8004a90 <HAL_GetTick>
 8008070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008072:	e008      	b.n	8008086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008074:	f7fc fd0c 	bl	8004a90 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b64      	cmp	r3, #100	; 0x64
 8008080:	d901      	bls.n	8008086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e1f3      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008086:	4b51      	ldr	r3, [pc, #324]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1f0      	bne.n	8008074 <HAL_RCC_OscConfig+0xe8>
 8008092:	e000      	b.n	8008096 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d063      	beq.n	800816a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080a2:	4b4a      	ldr	r3, [pc, #296]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f003 030c 	and.w	r3, r3, #12
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00b      	beq.n	80080c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080ae:	4b47      	ldr	r3, [pc, #284]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d11c      	bne.n	80080f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080ba:	4b44      	ldr	r3, [pc, #272]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d116      	bne.n	80080f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080c6:	4b41      	ldr	r3, [pc, #260]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d005      	beq.n	80080de <HAL_RCC_OscConfig+0x152>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d001      	beq.n	80080de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e1c7      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080de:	4b3b      	ldr	r3, [pc, #236]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	4937      	ldr	r1, [pc, #220]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080f2:	e03a      	b.n	800816a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d020      	beq.n	800813e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080fc:	4b34      	ldr	r3, [pc, #208]	; (80081d0 <HAL_RCC_OscConfig+0x244>)
 80080fe:	2201      	movs	r2, #1
 8008100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008102:	f7fc fcc5 	bl	8004a90 <HAL_GetTick>
 8008106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008108:	e008      	b.n	800811c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800810a:	f7fc fcc1 	bl	8004a90 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d901      	bls.n	800811c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e1a8      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800811c:	4b2b      	ldr	r3, [pc, #172]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d0f0      	beq.n	800810a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008128:	4b28      	ldr	r3, [pc, #160]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	4925      	ldr	r1, [pc, #148]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8008138:	4313      	orrs	r3, r2
 800813a:	600b      	str	r3, [r1, #0]
 800813c:	e015      	b.n	800816a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800813e:	4b24      	ldr	r3, [pc, #144]	; (80081d0 <HAL_RCC_OscConfig+0x244>)
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008144:	f7fc fca4 	bl	8004a90 <HAL_GetTick>
 8008148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800814a:	e008      	b.n	800815e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800814c:	f7fc fca0 	bl	8004a90 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	2b02      	cmp	r3, #2
 8008158:	d901      	bls.n	800815e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e187      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800815e:	4b1b      	ldr	r3, [pc, #108]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1f0      	bne.n	800814c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	2b00      	cmp	r3, #0
 8008174:	d036      	beq.n	80081e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d016      	beq.n	80081ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800817e:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <HAL_RCC_OscConfig+0x248>)
 8008180:	2201      	movs	r2, #1
 8008182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008184:	f7fc fc84 	bl	8004a90 <HAL_GetTick>
 8008188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800818a:	e008      	b.n	800819e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800818c:	f7fc fc80 	bl	8004a90 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e167      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800819e:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <HAL_RCC_OscConfig+0x240>)
 80081a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0f0      	beq.n	800818c <HAL_RCC_OscConfig+0x200>
 80081aa:	e01b      	b.n	80081e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <HAL_RCC_OscConfig+0x248>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081b2:	f7fc fc6d 	bl	8004a90 <HAL_GetTick>
 80081b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081b8:	e00e      	b.n	80081d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081ba:	f7fc fc69 	bl	8004a90 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d907      	bls.n	80081d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e150      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
 80081cc:	40023800 	.word	0x40023800
 80081d0:	42470000 	.word	0x42470000
 80081d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081d8:	4b88      	ldr	r3, [pc, #544]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 80081da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1ea      	bne.n	80081ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0304 	and.w	r3, r3, #4
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8097 	beq.w	8008320 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081f2:	2300      	movs	r3, #0
 80081f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081f6:	4b81      	ldr	r3, [pc, #516]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10f      	bne.n	8008222 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008202:	2300      	movs	r3, #0
 8008204:	60bb      	str	r3, [r7, #8]
 8008206:	4b7d      	ldr	r3, [pc, #500]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	4a7c      	ldr	r2, [pc, #496]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 800820c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008210:	6413      	str	r3, [r2, #64]	; 0x40
 8008212:	4b7a      	ldr	r3, [pc, #488]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800821a:	60bb      	str	r3, [r7, #8]
 800821c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800821e:	2301      	movs	r3, #1
 8008220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008222:	4b77      	ldr	r3, [pc, #476]	; (8008400 <HAL_RCC_OscConfig+0x474>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822a:	2b00      	cmp	r3, #0
 800822c:	d118      	bne.n	8008260 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800822e:	4b74      	ldr	r3, [pc, #464]	; (8008400 <HAL_RCC_OscConfig+0x474>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a73      	ldr	r2, [pc, #460]	; (8008400 <HAL_RCC_OscConfig+0x474>)
 8008234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800823a:	f7fc fc29 	bl	8004a90 <HAL_GetTick>
 800823e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008240:	e008      	b.n	8008254 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008242:	f7fc fc25 	bl	8004a90 <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	2b02      	cmp	r3, #2
 800824e:	d901      	bls.n	8008254 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e10c      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008254:	4b6a      	ldr	r3, [pc, #424]	; (8008400 <HAL_RCC_OscConfig+0x474>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0f0      	beq.n	8008242 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d106      	bne.n	8008276 <HAL_RCC_OscConfig+0x2ea>
 8008268:	4b64      	ldr	r3, [pc, #400]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 800826a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826c:	4a63      	ldr	r2, [pc, #396]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 800826e:	f043 0301 	orr.w	r3, r3, #1
 8008272:	6713      	str	r3, [r2, #112]	; 0x70
 8008274:	e01c      	b.n	80082b0 <HAL_RCC_OscConfig+0x324>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	2b05      	cmp	r3, #5
 800827c:	d10c      	bne.n	8008298 <HAL_RCC_OscConfig+0x30c>
 800827e:	4b5f      	ldr	r3, [pc, #380]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 8008280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008282:	4a5e      	ldr	r2, [pc, #376]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 8008284:	f043 0304 	orr.w	r3, r3, #4
 8008288:	6713      	str	r3, [r2, #112]	; 0x70
 800828a:	4b5c      	ldr	r3, [pc, #368]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 800828c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828e:	4a5b      	ldr	r2, [pc, #364]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 8008290:	f043 0301 	orr.w	r3, r3, #1
 8008294:	6713      	str	r3, [r2, #112]	; 0x70
 8008296:	e00b      	b.n	80082b0 <HAL_RCC_OscConfig+0x324>
 8008298:	4b58      	ldr	r3, [pc, #352]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 800829a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829c:	4a57      	ldr	r2, [pc, #348]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 800829e:	f023 0301 	bic.w	r3, r3, #1
 80082a2:	6713      	str	r3, [r2, #112]	; 0x70
 80082a4:	4b55      	ldr	r3, [pc, #340]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 80082a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a8:	4a54      	ldr	r2, [pc, #336]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 80082aa:	f023 0304 	bic.w	r3, r3, #4
 80082ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d015      	beq.n	80082e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b8:	f7fc fbea 	bl	8004a90 <HAL_GetTick>
 80082bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082be:	e00a      	b.n	80082d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082c0:	f7fc fbe6 	bl	8004a90 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e0cb      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082d6:	4b49      	ldr	r3, [pc, #292]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 80082d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0ee      	beq.n	80082c0 <HAL_RCC_OscConfig+0x334>
 80082e2:	e014      	b.n	800830e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082e4:	f7fc fbd4 	bl	8004a90 <HAL_GetTick>
 80082e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ea:	e00a      	b.n	8008302 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ec:	f7fc fbd0 	bl	8004a90 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e0b5      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008302:	4b3e      	ldr	r3, [pc, #248]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 8008304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1ee      	bne.n	80082ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d105      	bne.n	8008320 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008314:	4b39      	ldr	r3, [pc, #228]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 8008316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008318:	4a38      	ldr	r2, [pc, #224]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 800831a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800831e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80a1 	beq.w	800846c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800832a:	4b34      	ldr	r3, [pc, #208]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 030c 	and.w	r3, r3, #12
 8008332:	2b08      	cmp	r3, #8
 8008334:	d05c      	beq.n	80083f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	2b02      	cmp	r3, #2
 800833c:	d141      	bne.n	80083c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800833e:	4b31      	ldr	r3, [pc, #196]	; (8008404 <HAL_RCC_OscConfig+0x478>)
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008344:	f7fc fba4 	bl	8004a90 <HAL_GetTick>
 8008348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800834a:	e008      	b.n	800835e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800834c:	f7fc fba0 	bl	8004a90 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b02      	cmp	r3, #2
 8008358:	d901      	bls.n	800835e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e087      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800835e:	4b27      	ldr	r3, [pc, #156]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1f0      	bne.n	800834c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	69da      	ldr	r2, [r3, #28]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	431a      	orrs	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	019b      	lsls	r3, r3, #6
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008380:	085b      	lsrs	r3, r3, #1
 8008382:	3b01      	subs	r3, #1
 8008384:	041b      	lsls	r3, r3, #16
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	061b      	lsls	r3, r3, #24
 800838e:	491b      	ldr	r1, [pc, #108]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 8008390:	4313      	orrs	r3, r2
 8008392:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008394:	4b1b      	ldr	r3, [pc, #108]	; (8008404 <HAL_RCC_OscConfig+0x478>)
 8008396:	2201      	movs	r2, #1
 8008398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800839a:	f7fc fb79 	bl	8004a90 <HAL_GetTick>
 800839e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083a0:	e008      	b.n	80083b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083a2:	f7fc fb75 	bl	8004a90 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d901      	bls.n	80083b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e05c      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083b4:	4b11      	ldr	r3, [pc, #68]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0f0      	beq.n	80083a2 <HAL_RCC_OscConfig+0x416>
 80083c0:	e054      	b.n	800846c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083c2:	4b10      	ldr	r3, [pc, #64]	; (8008404 <HAL_RCC_OscConfig+0x478>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083c8:	f7fc fb62 	bl	8004a90 <HAL_GetTick>
 80083cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ce:	e008      	b.n	80083e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083d0:	f7fc fb5e 	bl	8004a90 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e045      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083e2:	4b06      	ldr	r3, [pc, #24]	; (80083fc <HAL_RCC_OscConfig+0x470>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1f0      	bne.n	80083d0 <HAL_RCC_OscConfig+0x444>
 80083ee:	e03d      	b.n	800846c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d107      	bne.n	8008408 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e038      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
 80083fc:	40023800 	.word	0x40023800
 8008400:	40007000 	.word	0x40007000
 8008404:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008408:	4b1b      	ldr	r3, [pc, #108]	; (8008478 <HAL_RCC_OscConfig+0x4ec>)
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d028      	beq.n	8008468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008420:	429a      	cmp	r2, r3
 8008422:	d121      	bne.n	8008468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800842e:	429a      	cmp	r2, r3
 8008430:	d11a      	bne.n	8008468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008438:	4013      	ands	r3, r2
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800843e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008440:	4293      	cmp	r3, r2
 8008442:	d111      	bne.n	8008468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844e:	085b      	lsrs	r3, r3, #1
 8008450:	3b01      	subs	r3, #1
 8008452:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008454:	429a      	cmp	r2, r3
 8008456:	d107      	bne.n	8008468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008462:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008464:	429a      	cmp	r2, r3
 8008466:	d001      	beq.n	800846c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e000      	b.n	800846e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	40023800 	.word	0x40023800

0800847c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e0cc      	b.n	800862a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008490:	4b68      	ldr	r3, [pc, #416]	; (8008634 <HAL_RCC_ClockConfig+0x1b8>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0307 	and.w	r3, r3, #7
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d90c      	bls.n	80084b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800849e:	4b65      	ldr	r3, [pc, #404]	; (8008634 <HAL_RCC_ClockConfig+0x1b8>)
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	b2d2      	uxtb	r2, r2
 80084a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084a6:	4b63      	ldr	r3, [pc, #396]	; (8008634 <HAL_RCC_ClockConfig+0x1b8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d001      	beq.n	80084b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e0b8      	b.n	800862a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d020      	beq.n	8008506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d005      	beq.n	80084dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084d0:	4b59      	ldr	r3, [pc, #356]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	4a58      	ldr	r2, [pc, #352]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 80084d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0308 	and.w	r3, r3, #8
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d005      	beq.n	80084f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084e8:	4b53      	ldr	r3, [pc, #332]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	4a52      	ldr	r2, [pc, #328]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 80084ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084f4:	4b50      	ldr	r3, [pc, #320]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	494d      	ldr	r1, [pc, #308]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 8008502:	4313      	orrs	r3, r2
 8008504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d044      	beq.n	800859c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d107      	bne.n	800852a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800851a:	4b47      	ldr	r3, [pc, #284]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d119      	bne.n	800855a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e07f      	b.n	800862a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2b02      	cmp	r3, #2
 8008530:	d003      	beq.n	800853a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008536:	2b03      	cmp	r3, #3
 8008538:	d107      	bne.n	800854a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800853a:	4b3f      	ldr	r3, [pc, #252]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d109      	bne.n	800855a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e06f      	b.n	800862a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800854a:	4b3b      	ldr	r3, [pc, #236]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e067      	b.n	800862a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800855a:	4b37      	ldr	r3, [pc, #220]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f023 0203 	bic.w	r2, r3, #3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	4934      	ldr	r1, [pc, #208]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 8008568:	4313      	orrs	r3, r2
 800856a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800856c:	f7fc fa90 	bl	8004a90 <HAL_GetTick>
 8008570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008572:	e00a      	b.n	800858a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008574:	f7fc fa8c 	bl	8004a90 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008582:	4293      	cmp	r3, r2
 8008584:	d901      	bls.n	800858a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e04f      	b.n	800862a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800858a:	4b2b      	ldr	r3, [pc, #172]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f003 020c 	and.w	r2, r3, #12
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	429a      	cmp	r2, r3
 800859a:	d1eb      	bne.n	8008574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800859c:	4b25      	ldr	r3, [pc, #148]	; (8008634 <HAL_RCC_ClockConfig+0x1b8>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0307 	and.w	r3, r3, #7
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d20c      	bcs.n	80085c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085aa:	4b22      	ldr	r3, [pc, #136]	; (8008634 <HAL_RCC_ClockConfig+0x1b8>)
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	b2d2      	uxtb	r2, r2
 80085b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085b2:	4b20      	ldr	r3, [pc, #128]	; (8008634 <HAL_RCC_ClockConfig+0x1b8>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d001      	beq.n	80085c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e032      	b.n	800862a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0304 	and.w	r3, r3, #4
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d008      	beq.n	80085e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085d0:	4b19      	ldr	r3, [pc, #100]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	4916      	ldr	r1, [pc, #88]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0308 	and.w	r3, r3, #8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d009      	beq.n	8008602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085ee:	4b12      	ldr	r3, [pc, #72]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	490e      	ldr	r1, [pc, #56]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008602:	f000 f821 	bl	8008648 <HAL_RCC_GetSysClockFreq>
 8008606:	4602      	mov	r2, r0
 8008608:	4b0b      	ldr	r3, [pc, #44]	; (8008638 <HAL_RCC_ClockConfig+0x1bc>)
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	091b      	lsrs	r3, r3, #4
 800860e:	f003 030f 	and.w	r3, r3, #15
 8008612:	490a      	ldr	r1, [pc, #40]	; (800863c <HAL_RCC_ClockConfig+0x1c0>)
 8008614:	5ccb      	ldrb	r3, [r1, r3]
 8008616:	fa22 f303 	lsr.w	r3, r2, r3
 800861a:	4a09      	ldr	r2, [pc, #36]	; (8008640 <HAL_RCC_ClockConfig+0x1c4>)
 800861c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800861e:	4b09      	ldr	r3, [pc, #36]	; (8008644 <HAL_RCC_ClockConfig+0x1c8>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4618      	mov	r0, r3
 8008624:	f7fc f9f0 	bl	8004a08 <HAL_InitTick>

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	40023c00 	.word	0x40023c00
 8008638:	40023800 	.word	0x40023800
 800863c:	0800cbd8 	.word	0x0800cbd8
 8008640:	2000023c 	.word	0x2000023c
 8008644:	20000240 	.word	0x20000240

08008648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800864c:	b094      	sub	sp, #80	; 0x50
 800864e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	647b      	str	r3, [r7, #68]	; 0x44
 8008654:	2300      	movs	r3, #0
 8008656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008658:	2300      	movs	r3, #0
 800865a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800865c:	2300      	movs	r3, #0
 800865e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008660:	4b79      	ldr	r3, [pc, #484]	; (8008848 <HAL_RCC_GetSysClockFreq+0x200>)
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f003 030c 	and.w	r3, r3, #12
 8008668:	2b08      	cmp	r3, #8
 800866a:	d00d      	beq.n	8008688 <HAL_RCC_GetSysClockFreq+0x40>
 800866c:	2b08      	cmp	r3, #8
 800866e:	f200 80e1 	bhi.w	8008834 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <HAL_RCC_GetSysClockFreq+0x34>
 8008676:	2b04      	cmp	r3, #4
 8008678:	d003      	beq.n	8008682 <HAL_RCC_GetSysClockFreq+0x3a>
 800867a:	e0db      	b.n	8008834 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800867c:	4b73      	ldr	r3, [pc, #460]	; (800884c <HAL_RCC_GetSysClockFreq+0x204>)
 800867e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008680:	e0db      	b.n	800883a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008682:	4b73      	ldr	r3, [pc, #460]	; (8008850 <HAL_RCC_GetSysClockFreq+0x208>)
 8008684:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008686:	e0d8      	b.n	800883a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008688:	4b6f      	ldr	r3, [pc, #444]	; (8008848 <HAL_RCC_GetSysClockFreq+0x200>)
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008690:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008692:	4b6d      	ldr	r3, [pc, #436]	; (8008848 <HAL_RCC_GetSysClockFreq+0x200>)
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d063      	beq.n	8008766 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800869e:	4b6a      	ldr	r3, [pc, #424]	; (8008848 <HAL_RCC_GetSysClockFreq+0x200>)
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	099b      	lsrs	r3, r3, #6
 80086a4:	2200      	movs	r2, #0
 80086a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80086a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80086aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b0:	633b      	str	r3, [r7, #48]	; 0x30
 80086b2:	2300      	movs	r3, #0
 80086b4:	637b      	str	r3, [r7, #52]	; 0x34
 80086b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80086ba:	4622      	mov	r2, r4
 80086bc:	462b      	mov	r3, r5
 80086be:	f04f 0000 	mov.w	r0, #0
 80086c2:	f04f 0100 	mov.w	r1, #0
 80086c6:	0159      	lsls	r1, r3, #5
 80086c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086cc:	0150      	lsls	r0, r2, #5
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	4621      	mov	r1, r4
 80086d4:	1a51      	subs	r1, r2, r1
 80086d6:	6139      	str	r1, [r7, #16]
 80086d8:	4629      	mov	r1, r5
 80086da:	eb63 0301 	sbc.w	r3, r3, r1
 80086de:	617b      	str	r3, [r7, #20]
 80086e0:	f04f 0200 	mov.w	r2, #0
 80086e4:	f04f 0300 	mov.w	r3, #0
 80086e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086ec:	4659      	mov	r1, fp
 80086ee:	018b      	lsls	r3, r1, #6
 80086f0:	4651      	mov	r1, sl
 80086f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80086f6:	4651      	mov	r1, sl
 80086f8:	018a      	lsls	r2, r1, #6
 80086fa:	4651      	mov	r1, sl
 80086fc:	ebb2 0801 	subs.w	r8, r2, r1
 8008700:	4659      	mov	r1, fp
 8008702:	eb63 0901 	sbc.w	r9, r3, r1
 8008706:	f04f 0200 	mov.w	r2, #0
 800870a:	f04f 0300 	mov.w	r3, #0
 800870e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008712:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008716:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800871a:	4690      	mov	r8, r2
 800871c:	4699      	mov	r9, r3
 800871e:	4623      	mov	r3, r4
 8008720:	eb18 0303 	adds.w	r3, r8, r3
 8008724:	60bb      	str	r3, [r7, #8]
 8008726:	462b      	mov	r3, r5
 8008728:	eb49 0303 	adc.w	r3, r9, r3
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	f04f 0200 	mov.w	r2, #0
 8008732:	f04f 0300 	mov.w	r3, #0
 8008736:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800873a:	4629      	mov	r1, r5
 800873c:	024b      	lsls	r3, r1, #9
 800873e:	4621      	mov	r1, r4
 8008740:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008744:	4621      	mov	r1, r4
 8008746:	024a      	lsls	r2, r1, #9
 8008748:	4610      	mov	r0, r2
 800874a:	4619      	mov	r1, r3
 800874c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800874e:	2200      	movs	r2, #0
 8008750:	62bb      	str	r3, [r7, #40]	; 0x28
 8008752:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008754:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008758:	f7f8 fb08 	bl	8000d6c <__aeabi_uldivmod>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4613      	mov	r3, r2
 8008762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008764:	e058      	b.n	8008818 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008766:	4b38      	ldr	r3, [pc, #224]	; (8008848 <HAL_RCC_GetSysClockFreq+0x200>)
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	099b      	lsrs	r3, r3, #6
 800876c:	2200      	movs	r2, #0
 800876e:	4618      	mov	r0, r3
 8008770:	4611      	mov	r1, r2
 8008772:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008776:	623b      	str	r3, [r7, #32]
 8008778:	2300      	movs	r3, #0
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
 800877c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008780:	4642      	mov	r2, r8
 8008782:	464b      	mov	r3, r9
 8008784:	f04f 0000 	mov.w	r0, #0
 8008788:	f04f 0100 	mov.w	r1, #0
 800878c:	0159      	lsls	r1, r3, #5
 800878e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008792:	0150      	lsls	r0, r2, #5
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4641      	mov	r1, r8
 800879a:	ebb2 0a01 	subs.w	sl, r2, r1
 800879e:	4649      	mov	r1, r9
 80087a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80087a4:	f04f 0200 	mov.w	r2, #0
 80087a8:	f04f 0300 	mov.w	r3, #0
 80087ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80087b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80087b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80087b8:	ebb2 040a 	subs.w	r4, r2, sl
 80087bc:	eb63 050b 	sbc.w	r5, r3, fp
 80087c0:	f04f 0200 	mov.w	r2, #0
 80087c4:	f04f 0300 	mov.w	r3, #0
 80087c8:	00eb      	lsls	r3, r5, #3
 80087ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087ce:	00e2      	lsls	r2, r4, #3
 80087d0:	4614      	mov	r4, r2
 80087d2:	461d      	mov	r5, r3
 80087d4:	4643      	mov	r3, r8
 80087d6:	18e3      	adds	r3, r4, r3
 80087d8:	603b      	str	r3, [r7, #0]
 80087da:	464b      	mov	r3, r9
 80087dc:	eb45 0303 	adc.w	r3, r5, r3
 80087e0:	607b      	str	r3, [r7, #4]
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	f04f 0300 	mov.w	r3, #0
 80087ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80087ee:	4629      	mov	r1, r5
 80087f0:	028b      	lsls	r3, r1, #10
 80087f2:	4621      	mov	r1, r4
 80087f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087f8:	4621      	mov	r1, r4
 80087fa:	028a      	lsls	r2, r1, #10
 80087fc:	4610      	mov	r0, r2
 80087fe:	4619      	mov	r1, r3
 8008800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008802:	2200      	movs	r2, #0
 8008804:	61bb      	str	r3, [r7, #24]
 8008806:	61fa      	str	r2, [r7, #28]
 8008808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800880c:	f7f8 faae 	bl	8000d6c <__aeabi_uldivmod>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4613      	mov	r3, r2
 8008816:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008818:	4b0b      	ldr	r3, [pc, #44]	; (8008848 <HAL_RCC_GetSysClockFreq+0x200>)
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	0c1b      	lsrs	r3, r3, #16
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	3301      	adds	r3, #1
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008828:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800882a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800882c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008830:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008832:	e002      	b.n	800883a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008834:	4b05      	ldr	r3, [pc, #20]	; (800884c <HAL_RCC_GetSysClockFreq+0x204>)
 8008836:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800883a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800883c:	4618      	mov	r0, r3
 800883e:	3750      	adds	r7, #80	; 0x50
 8008840:	46bd      	mov	sp, r7
 8008842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008846:	bf00      	nop
 8008848:	40023800 	.word	0x40023800
 800884c:	00f42400 	.word	0x00f42400
 8008850:	007a1200 	.word	0x007a1200

08008854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008858:	4b03      	ldr	r3, [pc, #12]	; (8008868 <HAL_RCC_GetHCLKFreq+0x14>)
 800885a:	681b      	ldr	r3, [r3, #0]
}
 800885c:	4618      	mov	r0, r3
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	2000023c 	.word	0x2000023c

0800886c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008870:	f7ff fff0 	bl	8008854 <HAL_RCC_GetHCLKFreq>
 8008874:	4602      	mov	r2, r0
 8008876:	4b05      	ldr	r3, [pc, #20]	; (800888c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	0a9b      	lsrs	r3, r3, #10
 800887c:	f003 0307 	and.w	r3, r3, #7
 8008880:	4903      	ldr	r1, [pc, #12]	; (8008890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008882:	5ccb      	ldrb	r3, [r1, r3]
 8008884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008888:	4618      	mov	r0, r3
 800888a:	bd80      	pop	{r7, pc}
 800888c:	40023800 	.word	0x40023800
 8008890:	0800cbe8 	.word	0x0800cbe8

08008894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008898:	f7ff ffdc 	bl	8008854 <HAL_RCC_GetHCLKFreq>
 800889c:	4602      	mov	r2, r0
 800889e:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	0b5b      	lsrs	r3, r3, #13
 80088a4:	f003 0307 	and.w	r3, r3, #7
 80088a8:	4903      	ldr	r1, [pc, #12]	; (80088b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088aa:	5ccb      	ldrb	r3, [r1, r3]
 80088ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	40023800 	.word	0x40023800
 80088b8:	0800cbe8 	.word	0x0800cbe8

080088bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e04c      	b.n	8008968 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d111      	bne.n	80088fe <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f001 fba4 	bl	800a030 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d102      	bne.n	80088f6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a1f      	ldr	r2, [pc, #124]	; (8008970 <HAL_TIM_Base_Init+0xb4>)
 80088f4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2202      	movs	r2, #2
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3304      	adds	r3, #4
 800890e:	4619      	mov	r1, r3
 8008910:	4610      	mov	r0, r2
 8008912:	f001 f8c1 	bl	8009a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	08004519 	.word	0x08004519

08008974 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	d001      	beq.n	800898c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e03c      	b.n	8008a06 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a1e      	ldr	r2, [pc, #120]	; (8008a14 <HAL_TIM_Base_Start+0xa0>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d018      	beq.n	80089d0 <HAL_TIM_Base_Start+0x5c>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a6:	d013      	beq.n	80089d0 <HAL_TIM_Base_Start+0x5c>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a1a      	ldr	r2, [pc, #104]	; (8008a18 <HAL_TIM_Base_Start+0xa4>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d00e      	beq.n	80089d0 <HAL_TIM_Base_Start+0x5c>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a19      	ldr	r2, [pc, #100]	; (8008a1c <HAL_TIM_Base_Start+0xa8>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d009      	beq.n	80089d0 <HAL_TIM_Base_Start+0x5c>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a17      	ldr	r2, [pc, #92]	; (8008a20 <HAL_TIM_Base_Start+0xac>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d004      	beq.n	80089d0 <HAL_TIM_Base_Start+0x5c>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a16      	ldr	r2, [pc, #88]	; (8008a24 <HAL_TIM_Base_Start+0xb0>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d111      	bne.n	80089f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2b06      	cmp	r3, #6
 80089e0:	d010      	beq.n	8008a04 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f042 0201 	orr.w	r2, r2, #1
 80089f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089f2:	e007      	b.n	8008a04 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0201 	orr.w	r2, r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	40010000 	.word	0x40010000
 8008a18:	40000400 	.word	0x40000400
 8008a1c:	40000800 	.word	0x40000800
 8008a20:	40000c00 	.word	0x40000c00
 8008a24:	40014000 	.word	0x40014000

08008a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d001      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e044      	b.n	8008aca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f042 0201 	orr.w	r2, r2, #1
 8008a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a1e      	ldr	r2, [pc, #120]	; (8008ad8 <HAL_TIM_Base_Start_IT+0xb0>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d018      	beq.n	8008a94 <HAL_TIM_Base_Start_IT+0x6c>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a6a:	d013      	beq.n	8008a94 <HAL_TIM_Base_Start_IT+0x6c>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a1a      	ldr	r2, [pc, #104]	; (8008adc <HAL_TIM_Base_Start_IT+0xb4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d00e      	beq.n	8008a94 <HAL_TIM_Base_Start_IT+0x6c>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a19      	ldr	r2, [pc, #100]	; (8008ae0 <HAL_TIM_Base_Start_IT+0xb8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d009      	beq.n	8008a94 <HAL_TIM_Base_Start_IT+0x6c>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a17      	ldr	r2, [pc, #92]	; (8008ae4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d004      	beq.n	8008a94 <HAL_TIM_Base_Start_IT+0x6c>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a16      	ldr	r2, [pc, #88]	; (8008ae8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d111      	bne.n	8008ab8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f003 0307 	and.w	r3, r3, #7
 8008a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b06      	cmp	r3, #6
 8008aa4:	d010      	beq.n	8008ac8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f042 0201 	orr.w	r2, r2, #1
 8008ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ab6:	e007      	b.n	8008ac8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0201 	orr.w	r2, r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	40010000 	.word	0x40010000
 8008adc:	40000400 	.word	0x40000400
 8008ae0:	40000800 	.word	0x40000800
 8008ae4:	40000c00 	.word	0x40000c00
 8008ae8:	40014000 	.word	0x40014000

08008aec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e04c      	b.n	8008b98 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d111      	bne.n	8008b2e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 fa8c 	bl	800a030 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d102      	bne.n	8008b26 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a1f      	ldr	r2, [pc, #124]	; (8008ba0 <HAL_TIM_OC_Init+0xb4>)
 8008b24:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2202      	movs	r2, #2
 8008b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4610      	mov	r0, r2
 8008b42:	f000 ffa9 	bl	8009a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	08008ba5 	.word	0x08008ba5

08008ba4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e04c      	b.n	8008c64 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d111      	bne.n	8008bfa <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 fa26 	bl	800a030 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d102      	bne.n	8008bf2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a1f      	ldr	r2, [pc, #124]	; (8008c6c <HAL_TIM_PWM_Init+0xb4>)
 8008bf0:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	3304      	adds	r3, #4
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	f000 ff43 	bl	8009a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	08008c71 	.word	0x08008c71

08008c70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d109      	bne.n	8008ca8 <HAL_TIM_PWM_Start+0x24>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	bf14      	ite	ne
 8008ca0:	2301      	movne	r3, #1
 8008ca2:	2300      	moveq	r3, #0
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	e022      	b.n	8008cee <HAL_TIM_PWM_Start+0x6a>
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d109      	bne.n	8008cc2 <HAL_TIM_PWM_Start+0x3e>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	bf14      	ite	ne
 8008cba:	2301      	movne	r3, #1
 8008cbc:	2300      	moveq	r3, #0
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	e015      	b.n	8008cee <HAL_TIM_PWM_Start+0x6a>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	d109      	bne.n	8008cdc <HAL_TIM_PWM_Start+0x58>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	bf14      	ite	ne
 8008cd4:	2301      	movne	r3, #1
 8008cd6:	2300      	moveq	r3, #0
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	e008      	b.n	8008cee <HAL_TIM_PWM_Start+0x6a>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	bf14      	ite	ne
 8008ce8:	2301      	movne	r3, #1
 8008cea:	2300      	moveq	r3, #0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e068      	b.n	8008dc8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d104      	bne.n	8008d06 <HAL_TIM_PWM_Start+0x82>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d04:	e013      	b.n	8008d2e <HAL_TIM_PWM_Start+0xaa>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d104      	bne.n	8008d16 <HAL_TIM_PWM_Start+0x92>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d14:	e00b      	b.n	8008d2e <HAL_TIM_PWM_Start+0xaa>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b08      	cmp	r3, #8
 8008d1a:	d104      	bne.n	8008d26 <HAL_TIM_PWM_Start+0xa2>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d24:	e003      	b.n	8008d2e <HAL_TIM_PWM_Start+0xaa>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2202      	movs	r2, #2
 8008d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2201      	movs	r2, #1
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f001 f954 	bl	8009fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a23      	ldr	r2, [pc, #140]	; (8008dd0 <HAL_TIM_PWM_Start+0x14c>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d107      	bne.n	8008d56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a1d      	ldr	r2, [pc, #116]	; (8008dd0 <HAL_TIM_PWM_Start+0x14c>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d018      	beq.n	8008d92 <HAL_TIM_PWM_Start+0x10e>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d68:	d013      	beq.n	8008d92 <HAL_TIM_PWM_Start+0x10e>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a19      	ldr	r2, [pc, #100]	; (8008dd4 <HAL_TIM_PWM_Start+0x150>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d00e      	beq.n	8008d92 <HAL_TIM_PWM_Start+0x10e>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a17      	ldr	r2, [pc, #92]	; (8008dd8 <HAL_TIM_PWM_Start+0x154>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d009      	beq.n	8008d92 <HAL_TIM_PWM_Start+0x10e>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a16      	ldr	r2, [pc, #88]	; (8008ddc <HAL_TIM_PWM_Start+0x158>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d004      	beq.n	8008d92 <HAL_TIM_PWM_Start+0x10e>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a14      	ldr	r2, [pc, #80]	; (8008de0 <HAL_TIM_PWM_Start+0x15c>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d111      	bne.n	8008db6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f003 0307 	and.w	r3, r3, #7
 8008d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2b06      	cmp	r3, #6
 8008da2:	d010      	beq.n	8008dc6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f042 0201 	orr.w	r2, r2, #1
 8008db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db4:	e007      	b.n	8008dc6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f042 0201 	orr.w	r2, r2, #1
 8008dc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	40010000 	.word	0x40010000
 8008dd4:	40000400 	.word	0x40000400
 8008dd8:	40000800 	.word	0x40000800
 8008ddc:	40000c00 	.word	0x40000c00
 8008de0:	40014000 	.word	0x40014000

08008de4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008df4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008dfc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e0c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d108      	bne.n	8008e26 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d105      	bne.n	8008e26 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e1a:	7b7b      	ldrb	r3, [r7, #13]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d102      	bne.n	8008e26 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e20:	7b3b      	ldrb	r3, [r7, #12]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d001      	beq.n	8008e2a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e03b      	b.n	8008ea2 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2202      	movs	r2, #2
 8008e46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68da      	ldr	r2, [r3, #12]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f042 0202 	orr.w	r2, r2, #2
 8008e58:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0204 	orr.w	r2, r2, #4
 8008e68:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	2100      	movs	r1, #0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 f8b6 	bl	8009fe4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	2104      	movs	r1, #4
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 f8af 	bl	8009fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a08      	ldr	r2, [pc, #32]	; (8008eac <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d107      	bne.n	8008ea0 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	40010000 	.word	0x40010000

08008eb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e0a2      	b.n	800900a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d111      	bne.n	8008ef4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 f8a9 	bl	800a030 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d102      	bne.n	8008eec <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a4a      	ldr	r2, [pc, #296]	; (8009014 <HAL_TIM_Encoder_Init+0x164>)
 8008eea:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6812      	ldr	r2, [r2, #0]
 8008f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f0a:	f023 0307 	bic.w	r3, r3, #7
 8008f0e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3304      	adds	r3, #4
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	f000 fdbc 	bl	8009a98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f48:	f023 0303 	bic.w	r3, r3, #3
 8008f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	689a      	ldr	r2, [r3, #8]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	021b      	lsls	r3, r3, #8
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008f66:	f023 030c 	bic.w	r3, r3, #12
 8008f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	4313      	orrs	r3, r2
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	011a      	lsls	r2, r3, #4
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	031b      	lsls	r3, r3, #12
 8008f96:	4313      	orrs	r3, r2
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008fa4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008fac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	011b      	lsls	r3, r3, #4
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	080045e1 	.word	0x080045e1

08009018 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009028:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009030:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009038:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009040:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d110      	bne.n	800906a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d102      	bne.n	8009054 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800904e:	7b7b      	ldrb	r3, [r7, #13]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d001      	beq.n	8009058 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e069      	b.n	800912c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2202      	movs	r2, #2
 800905c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009068:	e031      	b.n	80090ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b04      	cmp	r3, #4
 800906e:	d110      	bne.n	8009092 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009070:	7bbb      	ldrb	r3, [r7, #14]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d102      	bne.n	800907c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009076:	7b3b      	ldrb	r3, [r7, #12]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d001      	beq.n	8009080 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e055      	b.n	800912c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009090:	e01d      	b.n	80090ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d108      	bne.n	80090aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d105      	bne.n	80090aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800909e:	7b7b      	ldrb	r3, [r7, #13]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d102      	bne.n	80090aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80090a4:	7b3b      	ldrb	r3, [r7, #12]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d001      	beq.n	80090ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e03e      	b.n	800912c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2202      	movs	r2, #2
 80090b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2202      	movs	r2, #2
 80090ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2202      	movs	r2, #2
 80090c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2202      	movs	r2, #2
 80090ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <HAL_TIM_Encoder_Start+0xc4>
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	d008      	beq.n	80090ec <HAL_TIM_Encoder_Start+0xd4>
 80090da:	e00f      	b.n	80090fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2201      	movs	r2, #1
 80090e2:	2100      	movs	r1, #0
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 ff7d 	bl	8009fe4 <TIM_CCxChannelCmd>
      break;
 80090ea:	e016      	b.n	800911a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2201      	movs	r2, #1
 80090f2:	2104      	movs	r1, #4
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 ff75 	bl	8009fe4 <TIM_CCxChannelCmd>
      break;
 80090fa:	e00e      	b.n	800911a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2201      	movs	r2, #1
 8009102:	2100      	movs	r1, #0
 8009104:	4618      	mov	r0, r3
 8009106:	f000 ff6d 	bl	8009fe4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2201      	movs	r2, #1
 8009110:	2104      	movs	r1, #4
 8009112:	4618      	mov	r0, r3
 8009114:	f000 ff66 	bl	8009fe4 <TIM_CCxChannelCmd>
      break;
 8009118:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f042 0201 	orr.w	r2, r2, #1
 8009128:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	f003 0302 	and.w	r3, r3, #2
 8009146:	2b02      	cmp	r3, #2
 8009148:	d128      	bne.n	800919c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f003 0302 	and.w	r3, r3, #2
 8009154:	2b02      	cmp	r3, #2
 8009156:	d121      	bne.n	800919c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f06f 0202 	mvn.w	r2, #2
 8009160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2201      	movs	r2, #1
 8009166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	f003 0303 	and.w	r3, r3, #3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d005      	beq.n	8009182 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	4798      	blx	r3
 8009180:	e009      	b.n	8009196 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	f003 0304 	and.w	r3, r3, #4
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	d128      	bne.n	80091fc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b04      	cmp	r3, #4
 80091b6:	d121      	bne.n	80091fc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f06f 0204 	mvn.w	r2, #4
 80091c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2202      	movs	r2, #2
 80091c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d005      	beq.n	80091e2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	4798      	blx	r3
 80091e0:	e009      	b.n	80091f6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f003 0308 	and.w	r3, r3, #8
 8009206:	2b08      	cmp	r3, #8
 8009208:	d128      	bne.n	800925c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f003 0308 	and.w	r3, r3, #8
 8009214:	2b08      	cmp	r3, #8
 8009216:	d121      	bne.n	800925c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f06f 0208 	mvn.w	r2, #8
 8009220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2204      	movs	r2, #4
 8009226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d005      	beq.n	8009242 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	4798      	blx	r3
 8009240:	e009      	b.n	8009256 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f003 0310 	and.w	r3, r3, #16
 8009266:	2b10      	cmp	r3, #16
 8009268:	d128      	bne.n	80092bc <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f003 0310 	and.w	r3, r3, #16
 8009274:	2b10      	cmp	r3, #16
 8009276:	d121      	bne.n	80092bc <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f06f 0210 	mvn.w	r2, #16
 8009280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2208      	movs	r2, #8
 8009286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009292:	2b00      	cmp	r3, #0
 8009294:	d005      	beq.n	80092a2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	4798      	blx	r3
 80092a0:	e009      	b.n	80092b6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d110      	bne.n	80092ec <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d109      	bne.n	80092ec <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f06f 0201 	mvn.w	r2, #1
 80092e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f6:	2b80      	cmp	r3, #128	; 0x80
 80092f8:	d110      	bne.n	800931c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009304:	2b80      	cmp	r3, #128	; 0x80
 8009306:	d109      	bne.n	800931c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009326:	2b40      	cmp	r3, #64	; 0x40
 8009328:	d110      	bne.n	800934c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009334:	2b40      	cmp	r3, #64	; 0x40
 8009336:	d109      	bne.n	800934c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b20      	cmp	r3, #32
 8009358:	d110      	bne.n	800937c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f003 0320 	and.w	r3, r3, #32
 8009364:	2b20      	cmp	r3, #32
 8009366:	d109      	bne.n	800937c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f06f 0220 	mvn.w	r2, #32
 8009370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800939a:	2b01      	cmp	r3, #1
 800939c:	d101      	bne.n	80093a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800939e:	2302      	movs	r3, #2
 80093a0:	e048      	b.n	8009434 <HAL_TIM_OC_ConfigChannel+0xb0>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b0c      	cmp	r3, #12
 80093ae:	d839      	bhi.n	8009424 <HAL_TIM_OC_ConfigChannel+0xa0>
 80093b0:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80093b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b6:	bf00      	nop
 80093b8:	080093ed 	.word	0x080093ed
 80093bc:	08009425 	.word	0x08009425
 80093c0:	08009425 	.word	0x08009425
 80093c4:	08009425 	.word	0x08009425
 80093c8:	080093fb 	.word	0x080093fb
 80093cc:	08009425 	.word	0x08009425
 80093d0:	08009425 	.word	0x08009425
 80093d4:	08009425 	.word	0x08009425
 80093d8:	08009409 	.word	0x08009409
 80093dc:	08009425 	.word	0x08009425
 80093e0:	08009425 	.word	0x08009425
 80093e4:	08009425 	.word	0x08009425
 80093e8:	08009417 	.word	0x08009417
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68b9      	ldr	r1, [r7, #8]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fbd0 	bl	8009b98 <TIM_OC1_SetConfig>
      break;
 80093f8:	e017      	b.n	800942a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fc2f 	bl	8009c64 <TIM_OC2_SetConfig>
      break;
 8009406:	e010      	b.n	800942a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 fc94 	bl	8009d3c <TIM_OC3_SetConfig>
      break;
 8009414:	e009      	b.n	800942a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68b9      	ldr	r1, [r7, #8]
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fcf7 	bl	8009e10 <TIM_OC4_SetConfig>
      break;
 8009422:	e002      	b.n	800942a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	75fb      	strb	r3, [r7, #23]
      break;
 8009428:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009432:	7dfb      	ldrb	r3, [r7, #23]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009452:	2b01      	cmp	r3, #1
 8009454:	d101      	bne.n	800945a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009456:	2302      	movs	r3, #2
 8009458:	e0ae      	b.n	80095b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b0c      	cmp	r3, #12
 8009466:	f200 809f 	bhi.w	80095a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800946a:	a201      	add	r2, pc, #4	; (adr r2, 8009470 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800946c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009470:	080094a5 	.word	0x080094a5
 8009474:	080095a9 	.word	0x080095a9
 8009478:	080095a9 	.word	0x080095a9
 800947c:	080095a9 	.word	0x080095a9
 8009480:	080094e5 	.word	0x080094e5
 8009484:	080095a9 	.word	0x080095a9
 8009488:	080095a9 	.word	0x080095a9
 800948c:	080095a9 	.word	0x080095a9
 8009490:	08009527 	.word	0x08009527
 8009494:	080095a9 	.word	0x080095a9
 8009498:	080095a9 	.word	0x080095a9
 800949c:	080095a9 	.word	0x080095a9
 80094a0:	08009567 	.word	0x08009567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68b9      	ldr	r1, [r7, #8]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fb74 	bl	8009b98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699a      	ldr	r2, [r3, #24]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f042 0208 	orr.w	r2, r2, #8
 80094be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f022 0204 	bic.w	r2, r2, #4
 80094ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6999      	ldr	r1, [r3, #24]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	691a      	ldr	r2, [r3, #16]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	619a      	str	r2, [r3, #24]
      break;
 80094e2:	e064      	b.n	80095ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68b9      	ldr	r1, [r7, #8]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fbba 	bl	8009c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699a      	ldr	r2, [r3, #24]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699a      	ldr	r2, [r3, #24]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800950e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6999      	ldr	r1, [r3, #24]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	021a      	lsls	r2, r3, #8
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	619a      	str	r2, [r3, #24]
      break;
 8009524:	e043      	b.n	80095ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	4618      	mov	r0, r3
 800952e:	f000 fc05 	bl	8009d3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	69da      	ldr	r2, [r3, #28]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f042 0208 	orr.w	r2, r2, #8
 8009540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69da      	ldr	r2, [r3, #28]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f022 0204 	bic.w	r2, r2, #4
 8009550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69d9      	ldr	r1, [r3, #28]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	691a      	ldr	r2, [r3, #16]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	61da      	str	r2, [r3, #28]
      break;
 8009564:	e023      	b.n	80095ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68b9      	ldr	r1, [r7, #8]
 800956c:	4618      	mov	r0, r3
 800956e:	f000 fc4f 	bl	8009e10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69da      	ldr	r2, [r3, #28]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69da      	ldr	r2, [r3, #28]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69d9      	ldr	r1, [r3, #28]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	021a      	lsls	r2, r3, #8
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	61da      	str	r2, [r3, #28]
      break;
 80095a6:	e002      	b.n	80095ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	75fb      	strb	r3, [r7, #23]
      break;
 80095ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d101      	bne.n	80095dc <HAL_TIM_ConfigClockSource+0x1c>
 80095d8:	2302      	movs	r3, #2
 80095da:	e0b4      	b.n	8009746 <HAL_TIM_ConfigClockSource+0x186>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009614:	d03e      	beq.n	8009694 <HAL_TIM_ConfigClockSource+0xd4>
 8009616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800961a:	f200 8087 	bhi.w	800972c <HAL_TIM_ConfigClockSource+0x16c>
 800961e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009622:	f000 8086 	beq.w	8009732 <HAL_TIM_ConfigClockSource+0x172>
 8009626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800962a:	d87f      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x16c>
 800962c:	2b70      	cmp	r3, #112	; 0x70
 800962e:	d01a      	beq.n	8009666 <HAL_TIM_ConfigClockSource+0xa6>
 8009630:	2b70      	cmp	r3, #112	; 0x70
 8009632:	d87b      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x16c>
 8009634:	2b60      	cmp	r3, #96	; 0x60
 8009636:	d050      	beq.n	80096da <HAL_TIM_ConfigClockSource+0x11a>
 8009638:	2b60      	cmp	r3, #96	; 0x60
 800963a:	d877      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x16c>
 800963c:	2b50      	cmp	r3, #80	; 0x50
 800963e:	d03c      	beq.n	80096ba <HAL_TIM_ConfigClockSource+0xfa>
 8009640:	2b50      	cmp	r3, #80	; 0x50
 8009642:	d873      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x16c>
 8009644:	2b40      	cmp	r3, #64	; 0x40
 8009646:	d058      	beq.n	80096fa <HAL_TIM_ConfigClockSource+0x13a>
 8009648:	2b40      	cmp	r3, #64	; 0x40
 800964a:	d86f      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x16c>
 800964c:	2b30      	cmp	r3, #48	; 0x30
 800964e:	d064      	beq.n	800971a <HAL_TIM_ConfigClockSource+0x15a>
 8009650:	2b30      	cmp	r3, #48	; 0x30
 8009652:	d86b      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x16c>
 8009654:	2b20      	cmp	r3, #32
 8009656:	d060      	beq.n	800971a <HAL_TIM_ConfigClockSource+0x15a>
 8009658:	2b20      	cmp	r3, #32
 800965a:	d867      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x16c>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d05c      	beq.n	800971a <HAL_TIM_ConfigClockSource+0x15a>
 8009660:	2b10      	cmp	r3, #16
 8009662:	d05a      	beq.n	800971a <HAL_TIM_ConfigClockSource+0x15a>
 8009664:	e062      	b.n	800972c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	6899      	ldr	r1, [r3, #8]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f000 fc95 	bl	8009fa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	609a      	str	r2, [r3, #8]
      break;
 8009692:	e04f      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6818      	ldr	r0, [r3, #0]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	6899      	ldr	r1, [r3, #8]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f000 fc7e 	bl	8009fa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689a      	ldr	r2, [r3, #8]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096b6:	609a      	str	r2, [r3, #8]
      break;
 80096b8:	e03c      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6818      	ldr	r0, [r3, #0]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	6859      	ldr	r1, [r3, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	461a      	mov	r2, r3
 80096c8:	f000 fbf2 	bl	8009eb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2150      	movs	r1, #80	; 0x50
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 fc4b 	bl	8009f6e <TIM_ITRx_SetConfig>
      break;
 80096d8:	e02c      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	6859      	ldr	r1, [r3, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	461a      	mov	r2, r3
 80096e8:	f000 fc11 	bl	8009f0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2160      	movs	r1, #96	; 0x60
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 fc3b 	bl	8009f6e <TIM_ITRx_SetConfig>
      break;
 80096f8:	e01c      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6818      	ldr	r0, [r3, #0]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	6859      	ldr	r1, [r3, #4]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	461a      	mov	r2, r3
 8009708:	f000 fbd2 	bl	8009eb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2140      	movs	r1, #64	; 0x40
 8009712:	4618      	mov	r0, r3
 8009714:	f000 fc2b 	bl	8009f6e <TIM_ITRx_SetConfig>
      break;
 8009718:	e00c      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4619      	mov	r1, r3
 8009724:	4610      	mov	r0, r2
 8009726:	f000 fc22 	bl	8009f6e <TIM_ITRx_SetConfig>
      break;
 800972a:	e003      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	73fb      	strb	r3, [r7, #15]
      break;
 8009730:	e000      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009744:	7bfb      	ldrb	r3, [r7, #15]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800976a:	bf00      	nop
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009776:	b480      	push	{r7}
 8009778:	b083      	sub	sp, #12
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800977e:	bf00      	nop
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800978a:	b480      	push	{r7}
 800978c:	b083      	sub	sp, #12
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009792:	bf00      	nop
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800979e:	b480      	push	{r7}
 80097a0:	b083      	sub	sp, #12
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097a6:	bf00      	nop
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80097ba:	bf00      	nop
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097ce:	bf00      	nop
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
	...

08009804 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	460b      	mov	r3, r1
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d101      	bne.n	8009820 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e135      	b.n	8009a8c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009826:	2b01      	cmp	r3, #1
 8009828:	d101      	bne.n	800982e <HAL_TIM_RegisterCallback+0x2a>
 800982a:	2302      	movs	r3, #2
 800982c:	e12e      	b.n	8009a8c <HAL_TIM_RegisterCallback+0x288>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b01      	cmp	r3, #1
 8009840:	f040 80ba 	bne.w	80099b8 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	2b1a      	cmp	r3, #26
 8009848:	f200 80b3 	bhi.w	80099b2 <HAL_TIM_RegisterCallback+0x1ae>
 800984c:	a201      	add	r2, pc, #4	; (adr r2, 8009854 <HAL_TIM_RegisterCallback+0x50>)
 800984e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009852:	bf00      	nop
 8009854:	080098c1 	.word	0x080098c1
 8009858:	080098c9 	.word	0x080098c9
 800985c:	080098d1 	.word	0x080098d1
 8009860:	080098d9 	.word	0x080098d9
 8009864:	080098e1 	.word	0x080098e1
 8009868:	080098e9 	.word	0x080098e9
 800986c:	080098f1 	.word	0x080098f1
 8009870:	080098f9 	.word	0x080098f9
 8009874:	08009901 	.word	0x08009901
 8009878:	08009909 	.word	0x08009909
 800987c:	08009911 	.word	0x08009911
 8009880:	08009919 	.word	0x08009919
 8009884:	08009921 	.word	0x08009921
 8009888:	08009929 	.word	0x08009929
 800988c:	08009931 	.word	0x08009931
 8009890:	0800993b 	.word	0x0800993b
 8009894:	08009945 	.word	0x08009945
 8009898:	0800994f 	.word	0x0800994f
 800989c:	08009959 	.word	0x08009959
 80098a0:	08009963 	.word	0x08009963
 80098a4:	0800996d 	.word	0x0800996d
 80098a8:	08009977 	.word	0x08009977
 80098ac:	08009981 	.word	0x08009981
 80098b0:	0800998b 	.word	0x0800998b
 80098b4:	08009995 	.word	0x08009995
 80098b8:	0800999f 	.word	0x0800999f
 80098bc:	080099a9 	.word	0x080099a9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80098c6:	e0dc      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80098ce:	e0d8      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80098d6:	e0d4      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80098de:	e0d0      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80098e6:	e0cc      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80098ee:	e0c8      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80098f6:	e0c4      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80098fe:	e0c0      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009906:	e0bc      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800990e:	e0b8      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009916:	e0b4      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800991e:	e0b0      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009926:	e0ac      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800992e:	e0a8      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009938:	e0a3      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009942:	e09e      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800994c:	e099      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009956:	e094      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009960:	e08f      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800996a:	e08a      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009974:	e085      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800997e:	e080      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009988:	e07b      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009992:	e076      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800999c:	e071      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80099a6:	e06c      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80099b0:	e067      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	75fb      	strb	r3, [r7, #23]
        break;
 80099b6:	e064      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d15c      	bne.n	8009a7e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80099c4:	7afb      	ldrb	r3, [r7, #11]
 80099c6:	2b0d      	cmp	r3, #13
 80099c8:	d856      	bhi.n	8009a78 <HAL_TIM_RegisterCallback+0x274>
 80099ca:	a201      	add	r2, pc, #4	; (adr r2, 80099d0 <HAL_TIM_RegisterCallback+0x1cc>)
 80099cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d0:	08009a09 	.word	0x08009a09
 80099d4:	08009a11 	.word	0x08009a11
 80099d8:	08009a19 	.word	0x08009a19
 80099dc:	08009a21 	.word	0x08009a21
 80099e0:	08009a29 	.word	0x08009a29
 80099e4:	08009a31 	.word	0x08009a31
 80099e8:	08009a39 	.word	0x08009a39
 80099ec:	08009a41 	.word	0x08009a41
 80099f0:	08009a49 	.word	0x08009a49
 80099f4:	08009a51 	.word	0x08009a51
 80099f8:	08009a59 	.word	0x08009a59
 80099fc:	08009a61 	.word	0x08009a61
 8009a00:	08009a69 	.word	0x08009a69
 8009a04:	08009a71 	.word	0x08009a71
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009a0e:	e038      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009a16:	e034      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009a1e:	e030      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009a26:	e02c      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009a2e:	e028      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009a36:	e024      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009a3e:	e020      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009a46:	e01c      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009a4e:	e018      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009a56:	e014      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009a5e:	e010      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009a66:	e00c      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009a6e:	e008      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009a76:	e004      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	75fb      	strb	r3, [r7, #23]
        break;
 8009a7c:	e001      	b.n	8009a82 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	371c      	adds	r7, #28
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a34      	ldr	r2, [pc, #208]	; (8009b7c <TIM_Base_SetConfig+0xe4>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d00f      	beq.n	8009ad0 <TIM_Base_SetConfig+0x38>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ab6:	d00b      	beq.n	8009ad0 <TIM_Base_SetConfig+0x38>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a31      	ldr	r2, [pc, #196]	; (8009b80 <TIM_Base_SetConfig+0xe8>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d007      	beq.n	8009ad0 <TIM_Base_SetConfig+0x38>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a30      	ldr	r2, [pc, #192]	; (8009b84 <TIM_Base_SetConfig+0xec>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d003      	beq.n	8009ad0 <TIM_Base_SetConfig+0x38>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a2f      	ldr	r2, [pc, #188]	; (8009b88 <TIM_Base_SetConfig+0xf0>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d108      	bne.n	8009ae2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a25      	ldr	r2, [pc, #148]	; (8009b7c <TIM_Base_SetConfig+0xe4>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d01b      	beq.n	8009b22 <TIM_Base_SetConfig+0x8a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009af0:	d017      	beq.n	8009b22 <TIM_Base_SetConfig+0x8a>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a22      	ldr	r2, [pc, #136]	; (8009b80 <TIM_Base_SetConfig+0xe8>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d013      	beq.n	8009b22 <TIM_Base_SetConfig+0x8a>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a21      	ldr	r2, [pc, #132]	; (8009b84 <TIM_Base_SetConfig+0xec>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d00f      	beq.n	8009b22 <TIM_Base_SetConfig+0x8a>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a20      	ldr	r2, [pc, #128]	; (8009b88 <TIM_Base_SetConfig+0xf0>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d00b      	beq.n	8009b22 <TIM_Base_SetConfig+0x8a>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a1f      	ldr	r2, [pc, #124]	; (8009b8c <TIM_Base_SetConfig+0xf4>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d007      	beq.n	8009b22 <TIM_Base_SetConfig+0x8a>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a1e      	ldr	r2, [pc, #120]	; (8009b90 <TIM_Base_SetConfig+0xf8>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d003      	beq.n	8009b22 <TIM_Base_SetConfig+0x8a>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a1d      	ldr	r2, [pc, #116]	; (8009b94 <TIM_Base_SetConfig+0xfc>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d108      	bne.n	8009b34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a08      	ldr	r2, [pc, #32]	; (8009b7c <TIM_Base_SetConfig+0xe4>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d103      	bne.n	8009b68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	691a      	ldr	r2, [r3, #16]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	615a      	str	r2, [r3, #20]
}
 8009b6e:	bf00      	nop
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	40010000 	.word	0x40010000
 8009b80:	40000400 	.word	0x40000400
 8009b84:	40000800 	.word	0x40000800
 8009b88:	40000c00 	.word	0x40000c00
 8009b8c:	40014000 	.word	0x40014000
 8009b90:	40014400 	.word	0x40014400
 8009b94:	40014800 	.word	0x40014800

08009b98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	f023 0201 	bic.w	r2, r3, #1
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f023 0303 	bic.w	r3, r3, #3
 8009bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f023 0302 	bic.w	r3, r3, #2
 8009be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a1c      	ldr	r2, [pc, #112]	; (8009c60 <TIM_OC1_SetConfig+0xc8>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d10c      	bne.n	8009c0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f023 0308 	bic.w	r3, r3, #8
 8009bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f023 0304 	bic.w	r3, r3, #4
 8009c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a13      	ldr	r2, [pc, #76]	; (8009c60 <TIM_OC1_SetConfig+0xc8>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d111      	bne.n	8009c3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	685a      	ldr	r2, [r3, #4]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	621a      	str	r2, [r3, #32]
}
 8009c54:	bf00      	nop
 8009c56:	371c      	adds	r7, #28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	40010000 	.word	0x40010000

08009c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	f023 0210 	bic.w	r2, r3, #16
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	021b      	lsls	r3, r3, #8
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f023 0320 	bic.w	r3, r3, #32
 8009cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	011b      	lsls	r3, r3, #4
 8009cb6:	697a      	ldr	r2, [r7, #20]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a1e      	ldr	r2, [pc, #120]	; (8009d38 <TIM_OC2_SetConfig+0xd4>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d10d      	bne.n	8009ce0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	011b      	lsls	r3, r3, #4
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a15      	ldr	r2, [pc, #84]	; (8009d38 <TIM_OC2_SetConfig+0xd4>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d113      	bne.n	8009d10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	699b      	ldr	r3, [r3, #24]
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	621a      	str	r2, [r3, #32]
}
 8009d2a:	bf00      	nop
 8009d2c:	371c      	adds	r7, #28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	40010000 	.word	0x40010000

08009d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f023 0303 	bic.w	r3, r3, #3
 8009d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	021b      	lsls	r3, r3, #8
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a1d      	ldr	r2, [pc, #116]	; (8009e0c <TIM_OC3_SetConfig+0xd0>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d10d      	bne.n	8009db6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009da0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	021b      	lsls	r3, r3, #8
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a14      	ldr	r2, [pc, #80]	; (8009e0c <TIM_OC3_SetConfig+0xd0>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d113      	bne.n	8009de6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	011b      	lsls	r3, r3, #4
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	011b      	lsls	r3, r3, #4
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	697a      	ldr	r2, [r7, #20]
 8009dfe:	621a      	str	r2, [r3, #32]
}
 8009e00:	bf00      	nop
 8009e02:	371c      	adds	r7, #28
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	40010000 	.word	0x40010000

08009e10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	69db      	ldr	r3, [r3, #28]
 8009e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	021b      	lsls	r3, r3, #8
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	031b      	lsls	r3, r3, #12
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a10      	ldr	r2, [pc, #64]	; (8009eac <TIM_OC4_SetConfig+0x9c>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d109      	bne.n	8009e84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	695b      	ldr	r3, [r3, #20]
 8009e7c:	019b      	lsls	r3, r3, #6
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	621a      	str	r2, [r3, #32]
}
 8009e9e:	bf00      	nop
 8009ea0:	371c      	adds	r7, #28
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	40010000 	.word	0x40010000

08009eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6a1b      	ldr	r3, [r3, #32]
 8009ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	f023 0201 	bic.w	r2, r3, #1
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	011b      	lsls	r3, r3, #4
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f023 030a 	bic.w	r3, r3, #10
 8009eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	621a      	str	r2, [r3, #32]
}
 8009f02:	bf00      	nop
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b087      	sub	sp, #28
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	60f8      	str	r0, [r7, #12]
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	f023 0210 	bic.w	r2, r3, #16
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
 8009f30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	031b      	lsls	r3, r3, #12
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	697a      	ldr	r2, [r7, #20]
 8009f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	621a      	str	r2, [r3, #32]
}
 8009f62:	bf00      	nop
 8009f64:	371c      	adds	r7, #28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b085      	sub	sp, #20
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	f043 0307 	orr.w	r3, r3, #7
 8009f90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	609a      	str	r2, [r3, #8]
}
 8009f98:	bf00      	nop
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b087      	sub	sp, #28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
 8009fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	021a      	lsls	r2, r3, #8
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	431a      	orrs	r2, r3
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	697a      	ldr	r2, [r7, #20]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	609a      	str	r2, [r3, #8]
}
 8009fd8:	bf00      	nop
 8009fda:	371c      	adds	r7, #28
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	f003 031f 	and.w	r3, r3, #31
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6a1a      	ldr	r2, [r3, #32]
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	43db      	mvns	r3, r3
 800a006:	401a      	ands	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6a1a      	ldr	r2, [r3, #32]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	f003 031f 	and.w	r3, r3, #31
 800a016:	6879      	ldr	r1, [r7, #4]
 800a018:	fa01 f303 	lsl.w	r3, r1, r3
 800a01c:	431a      	orrs	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	621a      	str	r2, [r3, #32]
}
 800a022:	bf00      	nop
 800a024:	371c      	adds	r7, #28
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
	...

0800a030 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a1c      	ldr	r2, [pc, #112]	; (800a0ac <TIM_ResetCallback+0x7c>)
 800a03c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a1b      	ldr	r2, [pc, #108]	; (800a0b0 <TIM_ResetCallback+0x80>)
 800a044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a1a      	ldr	r2, [pc, #104]	; (800a0b4 <TIM_ResetCallback+0x84>)
 800a04c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a19      	ldr	r2, [pc, #100]	; (800a0b8 <TIM_ResetCallback+0x88>)
 800a054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a18      	ldr	r2, [pc, #96]	; (800a0bc <TIM_ResetCallback+0x8c>)
 800a05c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a17      	ldr	r2, [pc, #92]	; (800a0c0 <TIM_ResetCallback+0x90>)
 800a064:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a16      	ldr	r2, [pc, #88]	; (800a0c4 <TIM_ResetCallback+0x94>)
 800a06c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a15      	ldr	r2, [pc, #84]	; (800a0c8 <TIM_ResetCallback+0x98>)
 800a074:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a14      	ldr	r2, [pc, #80]	; (800a0cc <TIM_ResetCallback+0x9c>)
 800a07c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a13      	ldr	r2, [pc, #76]	; (800a0d0 <TIM_ResetCallback+0xa0>)
 800a084:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a12      	ldr	r2, [pc, #72]	; (800a0d4 <TIM_ResetCallback+0xa4>)
 800a08c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a11      	ldr	r2, [pc, #68]	; (800a0d8 <TIM_ResetCallback+0xa8>)
 800a094:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a10      	ldr	r2, [pc, #64]	; (800a0dc <TIM_ResetCallback+0xac>)
 800a09c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	08003eb1 	.word	0x08003eb1
 800a0b0:	0800974f 	.word	0x0800974f
 800a0b4:	080097c7 	.word	0x080097c7
 800a0b8:	080097db 	.word	0x080097db
 800a0bc:	08009777 	.word	0x08009777
 800a0c0:	0800978b 	.word	0x0800978b
 800a0c4:	08009763 	.word	0x08009763
 800a0c8:	0800979f 	.word	0x0800979f
 800a0cc:	080097b3 	.word	0x080097b3
 800a0d0:	080097ef 	.word	0x080097ef
 800a0d4:	0800a261 	.word	0x0800a261
 800a0d8:	0800a275 	.word	0x0800a275
 800a0dc:	0800a289 	.word	0x0800a289

0800a0e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d101      	bne.n	800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	e050      	b.n	800a19a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2202      	movs	r2, #2
 800a104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	4313      	orrs	r3, r2
 800a128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a1c      	ldr	r2, [pc, #112]	; (800a1a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d018      	beq.n	800a16e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a144:	d013      	beq.n	800a16e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a18      	ldr	r2, [pc, #96]	; (800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d00e      	beq.n	800a16e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a16      	ldr	r2, [pc, #88]	; (800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d009      	beq.n	800a16e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a15      	ldr	r2, [pc, #84]	; (800a1b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d004      	beq.n	800a16e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a13      	ldr	r2, [pc, #76]	; (800a1b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d10c      	bne.n	800a188 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	40010000 	.word	0x40010000
 800a1ac:	40000400 	.word	0x40000400
 800a1b0:	40000800 	.word	0x40000800
 800a1b4:	40000c00 	.word	0x40000c00
 800a1b8:	40014000 	.word	0x40014000

0800a1bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d101      	bne.n	800a1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	e03d      	b.n	800a254 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	4313      	orrs	r3, r2
 800a208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4313      	orrs	r3, r2
 800a216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	4313      	orrs	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	4313      	orrs	r3, r2
 800a232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	4313      	orrs	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e04a      	b.n	800a344 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d111      	bne.n	800a2de <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 fd2c 	bl	800ad20 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d102      	bne.n	800a2d6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a1e      	ldr	r2, [pc, #120]	; (800a34c <HAL_UART_Init+0xb0>)
 800a2d4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2224      	movs	r2, #36	; 0x24
 800a2e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a2f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fff6 	bl	800b2e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	691a      	ldr	r2, [r3, #16]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a30a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	695a      	ldr	r2, [r3, #20]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a31a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a32a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2220      	movs	r2, #32
 800a336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	080046f5 	.word	0x080046f5

0800a350 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a350:	b480      	push	{r7}
 800a352:	b087      	sub	sp, #28
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	460b      	mov	r3, r1
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d107      	bne.n	800a378 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36c:	f043 0220 	orr.w	r2, r3, #32
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e08c      	b.n	800a492 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d101      	bne.n	800a386 <HAL_UART_RegisterCallback+0x36>
 800a382:	2302      	movs	r3, #2
 800a384:	e085      	b.n	800a492 <HAL_UART_RegisterCallback+0x142>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b20      	cmp	r3, #32
 800a398:	d151      	bne.n	800a43e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a39a:	7afb      	ldrb	r3, [r7, #11]
 800a39c:	2b0c      	cmp	r3, #12
 800a39e:	d845      	bhi.n	800a42c <HAL_UART_RegisterCallback+0xdc>
 800a3a0:	a201      	add	r2, pc, #4	; (adr r2, 800a3a8 <HAL_UART_RegisterCallback+0x58>)
 800a3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a6:	bf00      	nop
 800a3a8:	0800a3dd 	.word	0x0800a3dd
 800a3ac:	0800a3e5 	.word	0x0800a3e5
 800a3b0:	0800a3ed 	.word	0x0800a3ed
 800a3b4:	0800a3f5 	.word	0x0800a3f5
 800a3b8:	0800a3fd 	.word	0x0800a3fd
 800a3bc:	0800a405 	.word	0x0800a405
 800a3c0:	0800a40d 	.word	0x0800a40d
 800a3c4:	0800a415 	.word	0x0800a415
 800a3c8:	0800a42d 	.word	0x0800a42d
 800a3cc:	0800a42d 	.word	0x0800a42d
 800a3d0:	0800a42d 	.word	0x0800a42d
 800a3d4:	0800a41d 	.word	0x0800a41d
 800a3d8:	0800a425 	.word	0x0800a425
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800a3e2:	e051      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a3ea:	e04d      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a3f2:	e049      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a3fa:	e045      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a402:	e041      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a40a:	e03d      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a412:	e039      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a41a:	e035      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a422:	e031      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a42a:	e02d      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a430:	f043 0220 	orr.w	r2, r3, #32
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	75fb      	strb	r3, [r7, #23]
        break;
 800a43c:	e024      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d116      	bne.n	800a478 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a44a:	7afb      	ldrb	r3, [r7, #11]
 800a44c:	2b0b      	cmp	r3, #11
 800a44e:	d002      	beq.n	800a456 <HAL_UART_RegisterCallback+0x106>
 800a450:	2b0c      	cmp	r3, #12
 800a452:	d004      	beq.n	800a45e <HAL_UART_RegisterCallback+0x10e>
 800a454:	e007      	b.n	800a466 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a45c:	e014      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a464:	e010      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a46a:	f043 0220 	orr.w	r2, r3, #32
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	75fb      	strb	r3, [r7, #23]
        break;
 800a476:	e007      	b.n	800a488 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47c:	f043 0220 	orr.w	r2, r3, #32
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a490:	7dfb      	ldrb	r3, [r7, #23]
}
 800a492:	4618      	mov	r0, r3
 800a494:	371c      	adds	r7, #28
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop

0800a4a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b20      	cmp	r3, #32
 800a4b8:	d11d      	bne.n	800a4f6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <HAL_UART_Receive_IT+0x26>
 800a4c0:	88fb      	ldrh	r3, [r7, #6]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e016      	b.n	800a4f8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d101      	bne.n	800a4d8 <HAL_UART_Receive_IT+0x38>
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	e00f      	b.n	800a4f8 <HAL_UART_Receive_IT+0x58>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a4e6:	88fb      	ldrh	r3, [r7, #6]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	68b9      	ldr	r1, [r7, #8]
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 fcf7 	bl	800aee0 <UART_Start_Receive_IT>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	e000      	b.n	800a4f8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a4f6:	2302      	movs	r3, #2
  }
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b08c      	sub	sp, #48	; 0x30
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	4613      	mov	r3, r2
 800a50c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b20      	cmp	r3, #32
 800a518:	d165      	bne.n	800a5e6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d002      	beq.n	800a526 <HAL_UART_Transmit_DMA+0x26>
 800a520:	88fb      	ldrh	r3, [r7, #6]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d101      	bne.n	800a52a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e05e      	b.n	800a5e8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a530:	2b01      	cmp	r3, #1
 800a532:	d101      	bne.n	800a538 <HAL_UART_Transmit_DMA+0x38>
 800a534:	2302      	movs	r3, #2
 800a536:	e057      	b.n	800a5e8 <HAL_UART_Transmit_DMA+0xe8>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	88fa      	ldrh	r2, [r7, #6]
 800a54a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	88fa      	ldrh	r2, [r7, #6]
 800a550:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2221      	movs	r2, #33	; 0x21
 800a55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a564:	4a22      	ldr	r2, [pc, #136]	; (800a5f0 <HAL_UART_Transmit_DMA+0xf0>)
 800a566:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56c:	4a21      	ldr	r2, [pc, #132]	; (800a5f4 <HAL_UART_Transmit_DMA+0xf4>)
 800a56e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a574:	4a20      	ldr	r2, [pc, #128]	; (800a5f8 <HAL_UART_Transmit_DMA+0xf8>)
 800a576:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57c:	2200      	movs	r2, #0
 800a57e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a580:	f107 0308 	add.w	r3, r7, #8
 800a584:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	6819      	ldr	r1, [r3, #0]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3304      	adds	r3, #4
 800a594:	461a      	mov	r2, r3
 800a596:	88fb      	ldrh	r3, [r7, #6]
 800a598:	f7fb f848 	bl	800562c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3314      	adds	r3, #20
 800a5b4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	e853 3f00 	ldrex	r3, [r3]
 800a5bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3314      	adds	r3, #20
 800a5cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ce:	627a      	str	r2, [r7, #36]	; 0x24
 800a5d0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d2:	6a39      	ldr	r1, [r7, #32]
 800a5d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d6:	e841 2300 	strex	r3, r2, [r1]
 800a5da:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1e5      	bne.n	800a5ae <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	e000      	b.n	800a5e8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a5e6:	2302      	movs	r3, #2
  }
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3730      	adds	r7, #48	; 0x30
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	0800ad91 	.word	0x0800ad91
 800a5f4:	0800ae2d 	.word	0x0800ae2d
 800a5f8:	0800ae4b 	.word	0x0800ae4b

0800a5fc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b09a      	sub	sp, #104	; 0x68
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	330c      	adds	r3, #12
 800a60a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a60e:	e853 3f00 	ldrex	r3, [r3]
 800a612:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a616:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a61a:	667b      	str	r3, [r7, #100]	; 0x64
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	330c      	adds	r3, #12
 800a622:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a624:	657a      	str	r2, [r7, #84]	; 0x54
 800a626:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a628:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a62a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a62c:	e841 2300 	strex	r3, r2, [r1]
 800a630:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1e5      	bne.n	800a604 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3314      	adds	r3, #20
 800a63e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a642:	e853 3f00 	ldrex	r3, [r3]
 800a646:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	f023 0301 	bic.w	r3, r3, #1
 800a64e:	663b      	str	r3, [r7, #96]	; 0x60
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3314      	adds	r3, #20
 800a656:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a658:	643a      	str	r2, [r7, #64]	; 0x40
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a65e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a660:	e841 2300 	strex	r3, r2, [r1]
 800a664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1e5      	bne.n	800a638 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a670:	2b01      	cmp	r3, #1
 800a672:	d119      	bne.n	800a6a8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	330c      	adds	r3, #12
 800a67a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	e853 3f00 	ldrex	r3, [r3]
 800a682:	61fb      	str	r3, [r7, #28]
   return(result);
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	f023 0310 	bic.w	r3, r3, #16
 800a68a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	330c      	adds	r3, #12
 800a692:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a694:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a69a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a69c:	e841 2300 	strex	r3, r2, [r1]
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1e5      	bne.n	800a674 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b2:	2b40      	cmp	r3, #64	; 0x40
 800a6b4:	d136      	bne.n	800a724 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3314      	adds	r3, #20
 800a6bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	e853 3f00 	ldrex	r3, [r3]
 800a6c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	3314      	adds	r3, #20
 800a6d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6d6:	61ba      	str	r2, [r7, #24]
 800a6d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6da:	6979      	ldr	r1, [r7, #20]
 800a6dc:	69ba      	ldr	r2, [r7, #24]
 800a6de:	e841 2300 	strex	r3, r2, [r1]
 800a6e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1e5      	bne.n	800a6b6 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d018      	beq.n	800a724 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fa ffec 	bl	80056dc <HAL_DMA_Abort>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00c      	beq.n	800a724 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fb fa0e 	bl	8005b30 <HAL_DMA_GetError>
 800a714:	4603      	mov	r3, r0
 800a716:	2b20      	cmp	r3, #32
 800a718:	d104      	bne.n	800a724 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2210      	movs	r2, #16
 800a71e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	e00a      	b.n	800a73a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2220      	movs	r2, #32
 800a72e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3768      	adds	r7, #104	; 0x68
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
	...

0800a744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b0ba      	sub	sp, #232	; 0xe8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a76a:	2300      	movs	r3, #0
 800a76c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a770:	2300      	movs	r3, #0
 800a772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a77a:	f003 030f 	and.w	r3, r3, #15
 800a77e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10f      	bne.n	800a7aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a78e:	f003 0320 	and.w	r3, r3, #32
 800a792:	2b00      	cmp	r3, #0
 800a794:	d009      	beq.n	800a7aa <HAL_UART_IRQHandler+0x66>
 800a796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a79a:	f003 0320 	and.w	r3, r3, #32
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d003      	beq.n	800a7aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fce3 	bl	800b16e <UART_Receive_IT>
      return;
 800a7a8:	e25b      	b.n	800ac62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a7aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f000 80e1 	beq.w	800a976 <HAL_UART_IRQHandler+0x232>
 800a7b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d106      	bne.n	800a7ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 80d4 	beq.w	800a976 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a7ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00b      	beq.n	800a7f2 <HAL_UART_IRQHandler+0xae>
 800a7da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d005      	beq.n	800a7f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ea:	f043 0201 	orr.w	r2, r3, #1
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f6:	f003 0304 	and.w	r3, r3, #4
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00b      	beq.n	800a816 <HAL_UART_IRQHandler+0xd2>
 800a7fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a802:	f003 0301 	and.w	r3, r3, #1
 800a806:	2b00      	cmp	r3, #0
 800a808:	d005      	beq.n	800a816 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	f043 0202 	orr.w	r2, r3, #2
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00b      	beq.n	800a83a <HAL_UART_IRQHandler+0xf6>
 800a822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a826:	f003 0301 	and.w	r3, r3, #1
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d005      	beq.n	800a83a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a832:	f043 0204 	orr.w	r2, r3, #4
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a83a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a83e:	f003 0308 	and.w	r3, r3, #8
 800a842:	2b00      	cmp	r3, #0
 800a844:	d011      	beq.n	800a86a <HAL_UART_IRQHandler+0x126>
 800a846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a84a:	f003 0320 	and.w	r3, r3, #32
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d105      	bne.n	800a85e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d005      	beq.n	800a86a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a862:	f043 0208 	orr.w	r2, r3, #8
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 81f2 	beq.w	800ac58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a878:	f003 0320 	and.w	r3, r3, #32
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d008      	beq.n	800a892 <HAL_UART_IRQHandler+0x14e>
 800a880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a884:	f003 0320 	and.w	r3, r3, #32
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d002      	beq.n	800a892 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fc6e 	bl	800b16e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89c:	2b40      	cmp	r3, #64	; 0x40
 800a89e:	bf0c      	ite	eq
 800a8a0:	2301      	moveq	r3, #1
 800a8a2:	2300      	movne	r3, #0
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	f003 0308 	and.w	r3, r3, #8
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d103      	bne.n	800a8be <HAL_UART_IRQHandler+0x17a>
 800a8b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d051      	beq.n	800a962 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fb74 	bl	800afac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ce:	2b40      	cmp	r3, #64	; 0x40
 800a8d0:	d142      	bne.n	800a958 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	3314      	adds	r3, #20
 800a8d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a8e0:	e853 3f00 	ldrex	r3, [r3]
 800a8e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a8e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3314      	adds	r3, #20
 800a8fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a8fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a90a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a90e:	e841 2300 	strex	r3, r2, [r1]
 800a912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1d9      	bne.n	800a8d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a922:	2b00      	cmp	r3, #0
 800a924:	d013      	beq.n	800a94e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92a:	4a7f      	ldr	r2, [pc, #508]	; (800ab28 <HAL_UART_IRQHandler+0x3e4>)
 800a92c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a932:	4618      	mov	r0, r3
 800a934:	f7fa ff42 	bl	80057bc <HAL_DMA_Abort_IT>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d019      	beq.n	800a972 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a948:	4610      	mov	r0, r2
 800a94a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a94c:	e011      	b.n	800a972 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a956:	e00c      	b.n	800a972 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a960:	e007      	b.n	800a972 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a970:	e172      	b.n	800ac58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a972:	bf00      	nop
    return;
 800a974:	e170      	b.n	800ac58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	f040 814c 	bne.w	800ac18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a984:	f003 0310 	and.w	r3, r3, #16
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 8145 	beq.w	800ac18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a98e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a992:	f003 0310 	and.w	r3, r3, #16
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 813e 	beq.w	800ac18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a99c:	2300      	movs	r3, #0
 800a99e:	60bb      	str	r3, [r7, #8]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	60bb      	str	r3, [r7, #8]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	60bb      	str	r3, [r7, #8]
 800a9b0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	695b      	ldr	r3, [r3, #20]
 800a9b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9bc:	2b40      	cmp	r3, #64	; 0x40
 800a9be:	f040 80b5 	bne.w	800ab2c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f000 8142 	beq.w	800ac5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	f080 813b 	bcs.w	800ac5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9ec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f2:	69db      	ldr	r3, [r3, #28]
 800a9f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9f8:	f000 8088 	beq.w	800ab0c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	330c      	adds	r3, #12
 800aa02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa0a:	e853 3f00 	ldrex	r3, [r3]
 800aa0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	330c      	adds	r3, #12
 800aa24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aa28:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa30:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1d9      	bne.n	800a9fc <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3314      	adds	r3, #20
 800aa4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa52:	e853 3f00 	ldrex	r3, [r3]
 800aa56:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa5a:	f023 0301 	bic.w	r3, r3, #1
 800aa5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3314      	adds	r3, #20
 800aa68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa6c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa78:	e841 2300 	strex	r3, r2, [r1]
 800aa7c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e1      	bne.n	800aa48 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3314      	adds	r3, #20
 800aa8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa8e:	e853 3f00 	ldrex	r3, [r3]
 800aa92:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3314      	adds	r3, #20
 800aaa4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aaa8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aaaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aaae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aab0:	e841 2300 	strex	r3, r2, [r1]
 800aab4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1e3      	bne.n	800aa84 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2220      	movs	r2, #32
 800aac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	330c      	adds	r3, #12
 800aad0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aad4:	e853 3f00 	ldrex	r3, [r3]
 800aad8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aadc:	f023 0310 	bic.w	r3, r3, #16
 800aae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	330c      	adds	r3, #12
 800aaea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aaee:	65ba      	str	r2, [r7, #88]	; 0x58
 800aaf0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aafc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e3      	bne.n	800aaca <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fa fde8 	bl	80056dc <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800ab18:	b292      	uxth	r2, r2
 800ab1a:	1a8a      	subs	r2, r1, r2
 800ab1c:	b292      	uxth	r2, r2
 800ab1e:	4611      	mov	r1, r2
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab24:	e09a      	b.n	800ac5c <HAL_UART_IRQHandler+0x518>
 800ab26:	bf00      	nop
 800ab28:	0800b073 	.word	0x0800b073
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 808c 	beq.w	800ac60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ab48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 8087 	beq.w	800ac60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	330c      	adds	r3, #12
 800ab58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	330c      	adds	r3, #12
 800ab72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ab76:	647a      	str	r2, [r7, #68]	; 0x44
 800ab78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab7e:	e841 2300 	strex	r3, r2, [r1]
 800ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1e3      	bne.n	800ab52 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3314      	adds	r3, #20
 800ab90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab94:	e853 3f00 	ldrex	r3, [r3]
 800ab98:	623b      	str	r3, [r7, #32]
   return(result);
 800ab9a:	6a3b      	ldr	r3, [r7, #32]
 800ab9c:	f023 0301 	bic.w	r3, r3, #1
 800aba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	3314      	adds	r3, #20
 800abaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800abae:	633a      	str	r2, [r7, #48]	; 0x30
 800abb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abb6:	e841 2300 	strex	r3, r2, [r1]
 800abba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1e3      	bne.n	800ab8a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2220      	movs	r2, #32
 800abc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	330c      	adds	r3, #12
 800abd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	e853 3f00 	ldrex	r3, [r3]
 800abde:	60fb      	str	r3, [r7, #12]
   return(result);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f023 0310 	bic.w	r3, r3, #16
 800abe6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	330c      	adds	r3, #12
 800abf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800abf4:	61fa      	str	r2, [r7, #28]
 800abf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf8:	69b9      	ldr	r1, [r7, #24]
 800abfa:	69fa      	ldr	r2, [r7, #28]
 800abfc:	e841 2300 	strex	r3, r2, [r1]
 800ac00:	617b      	str	r3, [r7, #20]
   return(result);
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1e3      	bne.n	800abd0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac0c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800ac10:	4611      	mov	r1, r2
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac16:	e023      	b.n	800ac60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d009      	beq.n	800ac38 <HAL_UART_IRQHandler+0x4f4>
 800ac24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fa33 	bl	800b09c <UART_Transmit_IT>
    return;
 800ac36:	e014      	b.n	800ac62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00e      	beq.n	800ac62 <HAL_UART_IRQHandler+0x51e>
 800ac44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d008      	beq.n	800ac62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fa73 	bl	800b13c <UART_EndTransmit_IT>
    return;
 800ac56:	e004      	b.n	800ac62 <HAL_UART_IRQHandler+0x51e>
    return;
 800ac58:	bf00      	nop
 800ac5a:	e002      	b.n	800ac62 <HAL_UART_IRQHandler+0x51e>
      return;
 800ac5c:	bf00      	nop
 800ac5e:	e000      	b.n	800ac62 <HAL_UART_IRQHandler+0x51e>
      return;
 800ac60:	bf00      	nop
  }
}
 800ac62:	37e8      	adds	r7, #232	; 0xe8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a10      	ldr	r2, [pc, #64]	; (800ad6c <UART_InitCallbacksToDefault+0x4c>)
 800ad2c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a0f      	ldr	r2, [pc, #60]	; (800ad70 <UART_InitCallbacksToDefault+0x50>)
 800ad32:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a0f      	ldr	r2, [pc, #60]	; (800ad74 <UART_InitCallbacksToDefault+0x54>)
 800ad38:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a0e      	ldr	r2, [pc, #56]	; (800ad78 <UART_InitCallbacksToDefault+0x58>)
 800ad3e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a0e      	ldr	r2, [pc, #56]	; (800ad7c <UART_InitCallbacksToDefault+0x5c>)
 800ad44:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a0d      	ldr	r2, [pc, #52]	; (800ad80 <UART_InitCallbacksToDefault+0x60>)
 800ad4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a0d      	ldr	r2, [pc, #52]	; (800ad84 <UART_InitCallbacksToDefault+0x64>)
 800ad50:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a0c      	ldr	r2, [pc, #48]	; (800ad88 <UART_InitCallbacksToDefault+0x68>)
 800ad56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a0c      	ldr	r2, [pc, #48]	; (800ad8c <UART_InitCallbacksToDefault+0x6c>)
 800ad5c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800ad5e:	bf00      	nop
 800ad60:	370c      	adds	r7, #12
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	0800ac7d 	.word	0x0800ac7d
 800ad70:	0800ac69 	.word	0x0800ac69
 800ad74:	0800aca5 	.word	0x0800aca5
 800ad78:	0800ac91 	.word	0x0800ac91
 800ad7c:	0800acb9 	.word	0x0800acb9
 800ad80:	0800accd 	.word	0x0800accd
 800ad84:	0800ace1 	.word	0x0800ace1
 800ad88:	0800acf5 	.word	0x0800acf5
 800ad8c:	0800ad09 	.word	0x0800ad09

0800ad90 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b090      	sub	sp, #64	; 0x40
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d137      	bne.n	800ae1c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800adac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adae:	2200      	movs	r2, #0
 800adb0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800adb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	3314      	adds	r3, #20
 800adb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	e853 3f00 	ldrex	r3, [r3]
 800adc0:	623b      	str	r3, [r7, #32]
   return(result);
 800adc2:	6a3b      	ldr	r3, [r7, #32]
 800adc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800adca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3314      	adds	r3, #20
 800add0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800add2:	633a      	str	r2, [r7, #48]	; 0x30
 800add4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800add8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adda:	e841 2300 	strex	r3, r2, [r1]
 800adde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1e5      	bne.n	800adb2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ade6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	330c      	adds	r3, #12
 800adec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	e853 3f00 	ldrex	r3, [r3]
 800adf4:	60fb      	str	r3, [r7, #12]
   return(result);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adfc:	637b      	str	r3, [r7, #52]	; 0x34
 800adfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	330c      	adds	r3, #12
 800ae04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae06:	61fa      	str	r2, [r7, #28]
 800ae08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0a:	69b9      	ldr	r1, [r7, #24]
 800ae0c:	69fa      	ldr	r2, [r7, #28]
 800ae0e:	e841 2300 	strex	r3, r2, [r1]
 800ae12:	617b      	str	r3, [r7, #20]
   return(result);
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1e5      	bne.n	800ade6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae1a:	e003      	b.n	800ae24 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800ae1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ae22:	4798      	blx	r3
}
 800ae24:	bf00      	nop
 800ae26:	3740      	adds	r7, #64	; 0x40
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae42:	bf00      	nop
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ae52:	2300      	movs	r3, #0
 800ae54:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae66:	2b80      	cmp	r3, #128	; 0x80
 800ae68:	bf0c      	ite	eq
 800ae6a:	2301      	moveq	r3, #1
 800ae6c:	2300      	movne	r3, #0
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	2b21      	cmp	r3, #33	; 0x21
 800ae7c:	d108      	bne.n	800ae90 <UART_DMAError+0x46>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d005      	beq.n	800ae90 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	2200      	movs	r2, #0
 800ae88:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ae8a:	68b8      	ldr	r0, [r7, #8]
 800ae8c:	f000 f866 	bl	800af5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae9a:	2b40      	cmp	r3, #64	; 0x40
 800ae9c:	bf0c      	ite	eq
 800ae9e:	2301      	moveq	r3, #1
 800aea0:	2300      	movne	r3, #0
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	2b22      	cmp	r3, #34	; 0x22
 800aeb0:	d108      	bne.n	800aec4 <UART_DMAError+0x7a>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d005      	beq.n	800aec4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2200      	movs	r2, #0
 800aebc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800aebe:	68b8      	ldr	r0, [r7, #8]
 800aec0:	f000 f874 	bl	800afac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec8:	f043 0210 	orr.w	r2, r3, #16
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed4:	68b8      	ldr	r0, [r7, #8]
 800aed6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aed8:	bf00      	nop
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	4613      	mov	r3, r2
 800aeec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	88fa      	ldrh	r2, [r7, #6]
 800aef8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	88fa      	ldrh	r2, [r7, #6]
 800aefe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2222      	movs	r2, #34	; 0x22
 800af0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d007      	beq.n	800af2e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af2c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	695a      	ldr	r2, [r3, #20]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f042 0201 	orr.w	r2, r2, #1
 800af3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68da      	ldr	r2, [r3, #12]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f042 0220 	orr.w	r2, r2, #32
 800af4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b089      	sub	sp, #36	; 0x24
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	330c      	adds	r3, #12
 800af6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	e853 3f00 	ldrex	r3, [r3]
 800af72:	60bb      	str	r3, [r7, #8]
   return(result);
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800af7a:	61fb      	str	r3, [r7, #28]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	330c      	adds	r3, #12
 800af82:	69fa      	ldr	r2, [r7, #28]
 800af84:	61ba      	str	r2, [r7, #24]
 800af86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af88:	6979      	ldr	r1, [r7, #20]
 800af8a:	69ba      	ldr	r2, [r7, #24]
 800af8c:	e841 2300 	strex	r3, r2, [r1]
 800af90:	613b      	str	r3, [r7, #16]
   return(result);
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1e5      	bne.n	800af64 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2220      	movs	r2, #32
 800af9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800afa0:	bf00      	nop
 800afa2:	3724      	adds	r7, #36	; 0x24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afac:	b480      	push	{r7}
 800afae:	b095      	sub	sp, #84	; 0x54
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	330c      	adds	r3, #12
 800afba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afbe:	e853 3f00 	ldrex	r3, [r3]
 800afc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	330c      	adds	r3, #12
 800afd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afd4:	643a      	str	r2, [r7, #64]	; 0x40
 800afd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afdc:	e841 2300 	strex	r3, r2, [r1]
 800afe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e5      	bne.n	800afb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3314      	adds	r3, #20
 800afee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	e853 3f00 	ldrex	r3, [r3]
 800aff6:	61fb      	str	r3, [r7, #28]
   return(result);
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	f023 0301 	bic.w	r3, r3, #1
 800affe:	64bb      	str	r3, [r7, #72]	; 0x48
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3314      	adds	r3, #20
 800b006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b008:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b00a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b00e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b010:	e841 2300 	strex	r3, r2, [r1]
 800b014:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1e5      	bne.n	800afe8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b020:	2b01      	cmp	r3, #1
 800b022:	d119      	bne.n	800b058 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	330c      	adds	r3, #12
 800b02a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	e853 3f00 	ldrex	r3, [r3]
 800b032:	60bb      	str	r3, [r7, #8]
   return(result);
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	f023 0310 	bic.w	r3, r3, #16
 800b03a:	647b      	str	r3, [r7, #68]	; 0x44
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	330c      	adds	r3, #12
 800b042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b044:	61ba      	str	r2, [r7, #24]
 800b046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b048:	6979      	ldr	r1, [r7, #20]
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	e841 2300 	strex	r3, r2, [r1]
 800b050:	613b      	str	r3, [r7, #16]
   return(result);
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d1e5      	bne.n	800b024 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2220      	movs	r2, #32
 800b05c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b066:	bf00      	nop
 800b068:	3754      	adds	r7, #84	; 0x54
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b084      	sub	sp, #16
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b094:	bf00      	nop
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	2b21      	cmp	r3, #33	; 0x21
 800b0ae:	d13e      	bne.n	800b12e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0b8:	d114      	bne.n	800b0e4 <UART_Transmit_IT+0x48>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d110      	bne.n	800b0e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a1b      	ldr	r3, [r3, #32]
 800b0dc:	1c9a      	adds	r2, r3, #2
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	621a      	str	r2, [r3, #32]
 800b0e2:	e008      	b.n	800b0f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a1b      	ldr	r3, [r3, #32]
 800b0e8:	1c59      	adds	r1, r3, #1
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	6211      	str	r1, [r2, #32]
 800b0ee:	781a      	ldrb	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	4619      	mov	r1, r3
 800b104:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10f      	bne.n	800b12a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	68da      	ldr	r2, [r3, #12]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b118:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68da      	ldr	r2, [r3, #12]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b128:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b12a:	2300      	movs	r3, #0
 800b12c:	e000      	b.n	800b130 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b12e:	2302      	movs	r3, #2
  }
}
 800b130:	4618      	mov	r0, r3
 800b132:	3714      	adds	r7, #20
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	68da      	ldr	r2, [r3, #12]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b152:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2220      	movs	r2, #32
 800b158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b08c      	sub	sp, #48	; 0x30
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b22      	cmp	r3, #34	; 0x22
 800b180:	f040 80ad 	bne.w	800b2de <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b18c:	d117      	bne.n	800b1be <UART_Receive_IT+0x50>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d113      	bne.n	800b1be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b196:	2300      	movs	r3, #0
 800b198:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b6:	1c9a      	adds	r2, r3, #2
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	629a      	str	r2, [r3, #40]	; 0x28
 800b1bc:	e026      	b.n	800b20c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1d0:	d007      	beq.n	800b1e2 <UART_Receive_IT+0x74>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10a      	bne.n	800b1f0 <UART_Receive_IT+0x82>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d106      	bne.n	800b1f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	b2da      	uxtb	r2, r3
 800b1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ec:	701a      	strb	r2, [r3, #0]
 800b1ee:	e008      	b.n	800b202 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b200:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b206:	1c5a      	adds	r2, r3, #1
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b210:	b29b      	uxth	r3, r3
 800b212:	3b01      	subs	r3, #1
 800b214:	b29b      	uxth	r3, r3
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	4619      	mov	r1, r3
 800b21a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d15c      	bne.n	800b2da <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68da      	ldr	r2, [r3, #12]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f022 0220 	bic.w	r2, r2, #32
 800b22e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68da      	ldr	r2, [r3, #12]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b23e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	695a      	ldr	r2, [r3, #20]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f022 0201 	bic.w	r2, r2, #1
 800b24e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2220      	movs	r2, #32
 800b254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d136      	bne.n	800b2ce <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	330c      	adds	r3, #12
 800b26c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	e853 3f00 	ldrex	r3, [r3]
 800b274:	613b      	str	r3, [r7, #16]
   return(result);
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	f023 0310 	bic.w	r3, r3, #16
 800b27c:	627b      	str	r3, [r7, #36]	; 0x24
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	330c      	adds	r3, #12
 800b284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b286:	623a      	str	r2, [r7, #32]
 800b288:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28a:	69f9      	ldr	r1, [r7, #28]
 800b28c:	6a3a      	ldr	r2, [r7, #32]
 800b28e:	e841 2300 	strex	r3, r2, [r1]
 800b292:	61bb      	str	r3, [r7, #24]
   return(result);
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1e5      	bne.n	800b266 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 0310 	and.w	r3, r3, #16
 800b2a4:	2b10      	cmp	r3, #16
 800b2a6:	d10a      	bne.n	800b2be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	60fb      	str	r3, [r7, #12]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	4798      	blx	r3
 800b2cc:	e003      	b.n	800b2d6 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	e002      	b.n	800b2e0 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e000      	b.n	800b2e0 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b2de:	2302      	movs	r3, #2
  }
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3730      	adds	r7, #48	; 0x30
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2ec:	b0c0      	sub	sp, #256	; 0x100
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b304:	68d9      	ldr	r1, [r3, #12]
 800b306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	ea40 0301 	orr.w	r3, r0, r1
 800b310:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b316:	689a      	ldr	r2, [r3, #8]
 800b318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	431a      	orrs	r2, r3
 800b320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	431a      	orrs	r2, r3
 800b328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b32c:	69db      	ldr	r3, [r3, #28]
 800b32e:	4313      	orrs	r3, r2
 800b330:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b340:	f021 010c 	bic.w	r1, r1, #12
 800b344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b34e:	430b      	orrs	r3, r1
 800b350:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b35e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b362:	6999      	ldr	r1, [r3, #24]
 800b364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	ea40 0301 	orr.w	r3, r0, r1
 800b36e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	4b8f      	ldr	r3, [pc, #572]	; (800b5b4 <UART_SetConfig+0x2cc>)
 800b378:	429a      	cmp	r2, r3
 800b37a:	d005      	beq.n	800b388 <UART_SetConfig+0xa0>
 800b37c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	4b8d      	ldr	r3, [pc, #564]	; (800b5b8 <UART_SetConfig+0x2d0>)
 800b384:	429a      	cmp	r2, r3
 800b386:	d104      	bne.n	800b392 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b388:	f7fd fa84 	bl	8008894 <HAL_RCC_GetPCLK2Freq>
 800b38c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b390:	e003      	b.n	800b39a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b392:	f7fd fa6b 	bl	800886c <HAL_RCC_GetPCLK1Freq>
 800b396:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b39a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b39e:	69db      	ldr	r3, [r3, #28]
 800b3a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3a4:	f040 810c 	bne.w	800b5c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b3a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b3b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b3b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b3ba:	4622      	mov	r2, r4
 800b3bc:	462b      	mov	r3, r5
 800b3be:	1891      	adds	r1, r2, r2
 800b3c0:	65b9      	str	r1, [r7, #88]	; 0x58
 800b3c2:	415b      	adcs	r3, r3
 800b3c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	eb12 0801 	adds.w	r8, r2, r1
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	eb43 0901 	adc.w	r9, r3, r1
 800b3d6:	f04f 0200 	mov.w	r2, #0
 800b3da:	f04f 0300 	mov.w	r3, #0
 800b3de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b3e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b3e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b3ea:	4690      	mov	r8, r2
 800b3ec:	4699      	mov	r9, r3
 800b3ee:	4623      	mov	r3, r4
 800b3f0:	eb18 0303 	adds.w	r3, r8, r3
 800b3f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3f8:	462b      	mov	r3, r5
 800b3fa:	eb49 0303 	adc.w	r3, r9, r3
 800b3fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b40e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b412:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b416:	460b      	mov	r3, r1
 800b418:	18db      	adds	r3, r3, r3
 800b41a:	653b      	str	r3, [r7, #80]	; 0x50
 800b41c:	4613      	mov	r3, r2
 800b41e:	eb42 0303 	adc.w	r3, r2, r3
 800b422:	657b      	str	r3, [r7, #84]	; 0x54
 800b424:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b428:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b42c:	f7f5 fc9e 	bl	8000d6c <__aeabi_uldivmod>
 800b430:	4602      	mov	r2, r0
 800b432:	460b      	mov	r3, r1
 800b434:	4b61      	ldr	r3, [pc, #388]	; (800b5bc <UART_SetConfig+0x2d4>)
 800b436:	fba3 2302 	umull	r2, r3, r3, r2
 800b43a:	095b      	lsrs	r3, r3, #5
 800b43c:	011c      	lsls	r4, r3, #4
 800b43e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b442:	2200      	movs	r2, #0
 800b444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b448:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b44c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b450:	4642      	mov	r2, r8
 800b452:	464b      	mov	r3, r9
 800b454:	1891      	adds	r1, r2, r2
 800b456:	64b9      	str	r1, [r7, #72]	; 0x48
 800b458:	415b      	adcs	r3, r3
 800b45a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b45c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b460:	4641      	mov	r1, r8
 800b462:	eb12 0a01 	adds.w	sl, r2, r1
 800b466:	4649      	mov	r1, r9
 800b468:	eb43 0b01 	adc.w	fp, r3, r1
 800b46c:	f04f 0200 	mov.w	r2, #0
 800b470:	f04f 0300 	mov.w	r3, #0
 800b474:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b478:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b47c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b480:	4692      	mov	sl, r2
 800b482:	469b      	mov	fp, r3
 800b484:	4643      	mov	r3, r8
 800b486:	eb1a 0303 	adds.w	r3, sl, r3
 800b48a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b48e:	464b      	mov	r3, r9
 800b490:	eb4b 0303 	adc.w	r3, fp, r3
 800b494:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b4a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	18db      	adds	r3, r3, r3
 800b4b0:	643b      	str	r3, [r7, #64]	; 0x40
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	eb42 0303 	adc.w	r3, r2, r3
 800b4b8:	647b      	str	r3, [r7, #68]	; 0x44
 800b4ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b4be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b4c2:	f7f5 fc53 	bl	8000d6c <__aeabi_uldivmod>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	4b3b      	ldr	r3, [pc, #236]	; (800b5bc <UART_SetConfig+0x2d4>)
 800b4ce:	fba3 2301 	umull	r2, r3, r3, r1
 800b4d2:	095b      	lsrs	r3, r3, #5
 800b4d4:	2264      	movs	r2, #100	; 0x64
 800b4d6:	fb02 f303 	mul.w	r3, r2, r3
 800b4da:	1acb      	subs	r3, r1, r3
 800b4dc:	00db      	lsls	r3, r3, #3
 800b4de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b4e2:	4b36      	ldr	r3, [pc, #216]	; (800b5bc <UART_SetConfig+0x2d4>)
 800b4e4:	fba3 2302 	umull	r2, r3, r3, r2
 800b4e8:	095b      	lsrs	r3, r3, #5
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b4f0:	441c      	add	r4, r3
 800b4f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b500:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b504:	4642      	mov	r2, r8
 800b506:	464b      	mov	r3, r9
 800b508:	1891      	adds	r1, r2, r2
 800b50a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b50c:	415b      	adcs	r3, r3
 800b50e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b510:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b514:	4641      	mov	r1, r8
 800b516:	1851      	adds	r1, r2, r1
 800b518:	6339      	str	r1, [r7, #48]	; 0x30
 800b51a:	4649      	mov	r1, r9
 800b51c:	414b      	adcs	r3, r1
 800b51e:	637b      	str	r3, [r7, #52]	; 0x34
 800b520:	f04f 0200 	mov.w	r2, #0
 800b524:	f04f 0300 	mov.w	r3, #0
 800b528:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b52c:	4659      	mov	r1, fp
 800b52e:	00cb      	lsls	r3, r1, #3
 800b530:	4651      	mov	r1, sl
 800b532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b536:	4651      	mov	r1, sl
 800b538:	00ca      	lsls	r2, r1, #3
 800b53a:	4610      	mov	r0, r2
 800b53c:	4619      	mov	r1, r3
 800b53e:	4603      	mov	r3, r0
 800b540:	4642      	mov	r2, r8
 800b542:	189b      	adds	r3, r3, r2
 800b544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b548:	464b      	mov	r3, r9
 800b54a:	460a      	mov	r2, r1
 800b54c:	eb42 0303 	adc.w	r3, r2, r3
 800b550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b560:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b564:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b568:	460b      	mov	r3, r1
 800b56a:	18db      	adds	r3, r3, r3
 800b56c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b56e:	4613      	mov	r3, r2
 800b570:	eb42 0303 	adc.w	r3, r2, r3
 800b574:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b576:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b57a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b57e:	f7f5 fbf5 	bl	8000d6c <__aeabi_uldivmod>
 800b582:	4602      	mov	r2, r0
 800b584:	460b      	mov	r3, r1
 800b586:	4b0d      	ldr	r3, [pc, #52]	; (800b5bc <UART_SetConfig+0x2d4>)
 800b588:	fba3 1302 	umull	r1, r3, r3, r2
 800b58c:	095b      	lsrs	r3, r3, #5
 800b58e:	2164      	movs	r1, #100	; 0x64
 800b590:	fb01 f303 	mul.w	r3, r1, r3
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	00db      	lsls	r3, r3, #3
 800b598:	3332      	adds	r3, #50	; 0x32
 800b59a:	4a08      	ldr	r2, [pc, #32]	; (800b5bc <UART_SetConfig+0x2d4>)
 800b59c:	fba2 2303 	umull	r2, r3, r2, r3
 800b5a0:	095b      	lsrs	r3, r3, #5
 800b5a2:	f003 0207 	and.w	r2, r3, #7
 800b5a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4422      	add	r2, r4
 800b5ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b5b0:	e105      	b.n	800b7be <UART_SetConfig+0x4d6>
 800b5b2:	bf00      	nop
 800b5b4:	40011000 	.word	0x40011000
 800b5b8:	40011400 	.word	0x40011400
 800b5bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b5c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b5ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b5ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b5d2:	4642      	mov	r2, r8
 800b5d4:	464b      	mov	r3, r9
 800b5d6:	1891      	adds	r1, r2, r2
 800b5d8:	6239      	str	r1, [r7, #32]
 800b5da:	415b      	adcs	r3, r3
 800b5dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b5de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b5e2:	4641      	mov	r1, r8
 800b5e4:	1854      	adds	r4, r2, r1
 800b5e6:	4649      	mov	r1, r9
 800b5e8:	eb43 0501 	adc.w	r5, r3, r1
 800b5ec:	f04f 0200 	mov.w	r2, #0
 800b5f0:	f04f 0300 	mov.w	r3, #0
 800b5f4:	00eb      	lsls	r3, r5, #3
 800b5f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b5fa:	00e2      	lsls	r2, r4, #3
 800b5fc:	4614      	mov	r4, r2
 800b5fe:	461d      	mov	r5, r3
 800b600:	4643      	mov	r3, r8
 800b602:	18e3      	adds	r3, r4, r3
 800b604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b608:	464b      	mov	r3, r9
 800b60a:	eb45 0303 	adc.w	r3, r5, r3
 800b60e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b61e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b622:	f04f 0200 	mov.w	r2, #0
 800b626:	f04f 0300 	mov.w	r3, #0
 800b62a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b62e:	4629      	mov	r1, r5
 800b630:	008b      	lsls	r3, r1, #2
 800b632:	4621      	mov	r1, r4
 800b634:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b638:	4621      	mov	r1, r4
 800b63a:	008a      	lsls	r2, r1, #2
 800b63c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b640:	f7f5 fb94 	bl	8000d6c <__aeabi_uldivmod>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4b60      	ldr	r3, [pc, #384]	; (800b7cc <UART_SetConfig+0x4e4>)
 800b64a:	fba3 2302 	umull	r2, r3, r3, r2
 800b64e:	095b      	lsrs	r3, r3, #5
 800b650:	011c      	lsls	r4, r3, #4
 800b652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b656:	2200      	movs	r2, #0
 800b658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b65c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b660:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b664:	4642      	mov	r2, r8
 800b666:	464b      	mov	r3, r9
 800b668:	1891      	adds	r1, r2, r2
 800b66a:	61b9      	str	r1, [r7, #24]
 800b66c:	415b      	adcs	r3, r3
 800b66e:	61fb      	str	r3, [r7, #28]
 800b670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b674:	4641      	mov	r1, r8
 800b676:	1851      	adds	r1, r2, r1
 800b678:	6139      	str	r1, [r7, #16]
 800b67a:	4649      	mov	r1, r9
 800b67c:	414b      	adcs	r3, r1
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	f04f 0200 	mov.w	r2, #0
 800b684:	f04f 0300 	mov.w	r3, #0
 800b688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b68c:	4659      	mov	r1, fp
 800b68e:	00cb      	lsls	r3, r1, #3
 800b690:	4651      	mov	r1, sl
 800b692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b696:	4651      	mov	r1, sl
 800b698:	00ca      	lsls	r2, r1, #3
 800b69a:	4610      	mov	r0, r2
 800b69c:	4619      	mov	r1, r3
 800b69e:	4603      	mov	r3, r0
 800b6a0:	4642      	mov	r2, r8
 800b6a2:	189b      	adds	r3, r3, r2
 800b6a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b6a8:	464b      	mov	r3, r9
 800b6aa:	460a      	mov	r2, r1
 800b6ac:	eb42 0303 	adc.w	r3, r2, r3
 800b6b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	67bb      	str	r3, [r7, #120]	; 0x78
 800b6be:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b6c0:	f04f 0200 	mov.w	r2, #0
 800b6c4:	f04f 0300 	mov.w	r3, #0
 800b6c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	008b      	lsls	r3, r1, #2
 800b6d0:	4641      	mov	r1, r8
 800b6d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6d6:	4641      	mov	r1, r8
 800b6d8:	008a      	lsls	r2, r1, #2
 800b6da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b6de:	f7f5 fb45 	bl	8000d6c <__aeabi_uldivmod>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4b39      	ldr	r3, [pc, #228]	; (800b7cc <UART_SetConfig+0x4e4>)
 800b6e8:	fba3 1302 	umull	r1, r3, r3, r2
 800b6ec:	095b      	lsrs	r3, r3, #5
 800b6ee:	2164      	movs	r1, #100	; 0x64
 800b6f0:	fb01 f303 	mul.w	r3, r1, r3
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	011b      	lsls	r3, r3, #4
 800b6f8:	3332      	adds	r3, #50	; 0x32
 800b6fa:	4a34      	ldr	r2, [pc, #208]	; (800b7cc <UART_SetConfig+0x4e4>)
 800b6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b700:	095b      	lsrs	r3, r3, #5
 800b702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b706:	441c      	add	r4, r3
 800b708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b70c:	2200      	movs	r2, #0
 800b70e:	673b      	str	r3, [r7, #112]	; 0x70
 800b710:	677a      	str	r2, [r7, #116]	; 0x74
 800b712:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b716:	4642      	mov	r2, r8
 800b718:	464b      	mov	r3, r9
 800b71a:	1891      	adds	r1, r2, r2
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	415b      	adcs	r3, r3
 800b720:	60fb      	str	r3, [r7, #12]
 800b722:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b726:	4641      	mov	r1, r8
 800b728:	1851      	adds	r1, r2, r1
 800b72a:	6039      	str	r1, [r7, #0]
 800b72c:	4649      	mov	r1, r9
 800b72e:	414b      	adcs	r3, r1
 800b730:	607b      	str	r3, [r7, #4]
 800b732:	f04f 0200 	mov.w	r2, #0
 800b736:	f04f 0300 	mov.w	r3, #0
 800b73a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b73e:	4659      	mov	r1, fp
 800b740:	00cb      	lsls	r3, r1, #3
 800b742:	4651      	mov	r1, sl
 800b744:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b748:	4651      	mov	r1, sl
 800b74a:	00ca      	lsls	r2, r1, #3
 800b74c:	4610      	mov	r0, r2
 800b74e:	4619      	mov	r1, r3
 800b750:	4603      	mov	r3, r0
 800b752:	4642      	mov	r2, r8
 800b754:	189b      	adds	r3, r3, r2
 800b756:	66bb      	str	r3, [r7, #104]	; 0x68
 800b758:	464b      	mov	r3, r9
 800b75a:	460a      	mov	r2, r1
 800b75c:	eb42 0303 	adc.w	r3, r2, r3
 800b760:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	663b      	str	r3, [r7, #96]	; 0x60
 800b76c:	667a      	str	r2, [r7, #100]	; 0x64
 800b76e:	f04f 0200 	mov.w	r2, #0
 800b772:	f04f 0300 	mov.w	r3, #0
 800b776:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b77a:	4649      	mov	r1, r9
 800b77c:	008b      	lsls	r3, r1, #2
 800b77e:	4641      	mov	r1, r8
 800b780:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b784:	4641      	mov	r1, r8
 800b786:	008a      	lsls	r2, r1, #2
 800b788:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b78c:	f7f5 faee 	bl	8000d6c <__aeabi_uldivmod>
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	4b0d      	ldr	r3, [pc, #52]	; (800b7cc <UART_SetConfig+0x4e4>)
 800b796:	fba3 1302 	umull	r1, r3, r3, r2
 800b79a:	095b      	lsrs	r3, r3, #5
 800b79c:	2164      	movs	r1, #100	; 0x64
 800b79e:	fb01 f303 	mul.w	r3, r1, r3
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	011b      	lsls	r3, r3, #4
 800b7a6:	3332      	adds	r3, #50	; 0x32
 800b7a8:	4a08      	ldr	r2, [pc, #32]	; (800b7cc <UART_SetConfig+0x4e4>)
 800b7aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ae:	095b      	lsrs	r3, r3, #5
 800b7b0:	f003 020f 	and.w	r2, r3, #15
 800b7b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4422      	add	r2, r4
 800b7bc:	609a      	str	r2, [r3, #8]
}
 800b7be:	bf00      	nop
 800b7c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7ca:	bf00      	nop
 800b7cc:	51eb851f 	.word	0x51eb851f

0800b7d0 <__errno>:
 800b7d0:	4b01      	ldr	r3, [pc, #4]	; (800b7d8 <__errno+0x8>)
 800b7d2:	6818      	ldr	r0, [r3, #0]
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	20000248 	.word	0x20000248

0800b7dc <__libc_init_array>:
 800b7dc:	b570      	push	{r4, r5, r6, lr}
 800b7de:	4d0d      	ldr	r5, [pc, #52]	; (800b814 <__libc_init_array+0x38>)
 800b7e0:	4c0d      	ldr	r4, [pc, #52]	; (800b818 <__libc_init_array+0x3c>)
 800b7e2:	1b64      	subs	r4, r4, r5
 800b7e4:	10a4      	asrs	r4, r4, #2
 800b7e6:	2600      	movs	r6, #0
 800b7e8:	42a6      	cmp	r6, r4
 800b7ea:	d109      	bne.n	800b800 <__libc_init_array+0x24>
 800b7ec:	4d0b      	ldr	r5, [pc, #44]	; (800b81c <__libc_init_array+0x40>)
 800b7ee:	4c0c      	ldr	r4, [pc, #48]	; (800b820 <__libc_init_array+0x44>)
 800b7f0:	f001 f9e4 	bl	800cbbc <_init>
 800b7f4:	1b64      	subs	r4, r4, r5
 800b7f6:	10a4      	asrs	r4, r4, #2
 800b7f8:	2600      	movs	r6, #0
 800b7fa:	42a6      	cmp	r6, r4
 800b7fc:	d105      	bne.n	800b80a <__libc_init_array+0x2e>
 800b7fe:	bd70      	pop	{r4, r5, r6, pc}
 800b800:	f855 3b04 	ldr.w	r3, [r5], #4
 800b804:	4798      	blx	r3
 800b806:	3601      	adds	r6, #1
 800b808:	e7ee      	b.n	800b7e8 <__libc_init_array+0xc>
 800b80a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b80e:	4798      	blx	r3
 800b810:	3601      	adds	r6, #1
 800b812:	e7f2      	b.n	800b7fa <__libc_init_array+0x1e>
 800b814:	0800cca0 	.word	0x0800cca0
 800b818:	0800cca0 	.word	0x0800cca0
 800b81c:	0800cca0 	.word	0x0800cca0
 800b820:	0800cca4 	.word	0x0800cca4

0800b824 <memcpy>:
 800b824:	440a      	add	r2, r1
 800b826:	4291      	cmp	r1, r2
 800b828:	f100 33ff 	add.w	r3, r0, #4294967295
 800b82c:	d100      	bne.n	800b830 <memcpy+0xc>
 800b82e:	4770      	bx	lr
 800b830:	b510      	push	{r4, lr}
 800b832:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b83a:	4291      	cmp	r1, r2
 800b83c:	d1f9      	bne.n	800b832 <memcpy+0xe>
 800b83e:	bd10      	pop	{r4, pc}

0800b840 <memset>:
 800b840:	4402      	add	r2, r0
 800b842:	4603      	mov	r3, r0
 800b844:	4293      	cmp	r3, r2
 800b846:	d100      	bne.n	800b84a <memset+0xa>
 800b848:	4770      	bx	lr
 800b84a:	f803 1b01 	strb.w	r1, [r3], #1
 800b84e:	e7f9      	b.n	800b844 <memset+0x4>

0800b850 <atan2>:
 800b850:	f000 b89e 	b.w	800b990 <__ieee754_atan2>

0800b854 <pow>:
 800b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b856:	ed2d 8b02 	vpush	{d8}
 800b85a:	eeb0 8a40 	vmov.f32	s16, s0
 800b85e:	eef0 8a60 	vmov.f32	s17, s1
 800b862:	ec55 4b11 	vmov	r4, r5, d1
 800b866:	f000 f95f 	bl	800bb28 <__ieee754_pow>
 800b86a:	4622      	mov	r2, r4
 800b86c:	462b      	mov	r3, r5
 800b86e:	4620      	mov	r0, r4
 800b870:	4629      	mov	r1, r5
 800b872:	ec57 6b10 	vmov	r6, r7, d0
 800b876:	f7f5 f905 	bl	8000a84 <__aeabi_dcmpun>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d13b      	bne.n	800b8f6 <pow+0xa2>
 800b87e:	ec51 0b18 	vmov	r0, r1, d8
 800b882:	2200      	movs	r2, #0
 800b884:	2300      	movs	r3, #0
 800b886:	f7f5 f8cb 	bl	8000a20 <__aeabi_dcmpeq>
 800b88a:	b1b8      	cbz	r0, 800b8bc <pow+0x68>
 800b88c:	2200      	movs	r2, #0
 800b88e:	2300      	movs	r3, #0
 800b890:	4620      	mov	r0, r4
 800b892:	4629      	mov	r1, r5
 800b894:	f7f5 f8c4 	bl	8000a20 <__aeabi_dcmpeq>
 800b898:	2800      	cmp	r0, #0
 800b89a:	d146      	bne.n	800b92a <pow+0xd6>
 800b89c:	ec45 4b10 	vmov	d0, r4, r5
 800b8a0:	f001 f8fb 	bl	800ca9a <finite>
 800b8a4:	b338      	cbz	r0, 800b8f6 <pow+0xa2>
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	f7f5 f8c1 	bl	8000a34 <__aeabi_dcmplt>
 800b8b2:	b300      	cbz	r0, 800b8f6 <pow+0xa2>
 800b8b4:	f7ff ff8c 	bl	800b7d0 <__errno>
 800b8b8:	2322      	movs	r3, #34	; 0x22
 800b8ba:	e01b      	b.n	800b8f4 <pow+0xa0>
 800b8bc:	ec47 6b10 	vmov	d0, r6, r7
 800b8c0:	f001 f8eb 	bl	800ca9a <finite>
 800b8c4:	b9e0      	cbnz	r0, 800b900 <pow+0xac>
 800b8c6:	eeb0 0a48 	vmov.f32	s0, s16
 800b8ca:	eef0 0a68 	vmov.f32	s1, s17
 800b8ce:	f001 f8e4 	bl	800ca9a <finite>
 800b8d2:	b1a8      	cbz	r0, 800b900 <pow+0xac>
 800b8d4:	ec45 4b10 	vmov	d0, r4, r5
 800b8d8:	f001 f8df 	bl	800ca9a <finite>
 800b8dc:	b180      	cbz	r0, 800b900 <pow+0xac>
 800b8de:	4632      	mov	r2, r6
 800b8e0:	463b      	mov	r3, r7
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	4639      	mov	r1, r7
 800b8e6:	f7f5 f8cd 	bl	8000a84 <__aeabi_dcmpun>
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	d0e2      	beq.n	800b8b4 <pow+0x60>
 800b8ee:	f7ff ff6f 	bl	800b7d0 <__errno>
 800b8f2:	2321      	movs	r3, #33	; 0x21
 800b8f4:	6003      	str	r3, [r0, #0]
 800b8f6:	ecbd 8b02 	vpop	{d8}
 800b8fa:	ec47 6b10 	vmov	d0, r6, r7
 800b8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b900:	2200      	movs	r2, #0
 800b902:	2300      	movs	r3, #0
 800b904:	4630      	mov	r0, r6
 800b906:	4639      	mov	r1, r7
 800b908:	f7f5 f88a 	bl	8000a20 <__aeabi_dcmpeq>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d0f2      	beq.n	800b8f6 <pow+0xa2>
 800b910:	eeb0 0a48 	vmov.f32	s0, s16
 800b914:	eef0 0a68 	vmov.f32	s1, s17
 800b918:	f001 f8bf 	bl	800ca9a <finite>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d0ea      	beq.n	800b8f6 <pow+0xa2>
 800b920:	ec45 4b10 	vmov	d0, r4, r5
 800b924:	f001 f8b9 	bl	800ca9a <finite>
 800b928:	e7c3      	b.n	800b8b2 <pow+0x5e>
 800b92a:	4f01      	ldr	r7, [pc, #4]	; (800b930 <pow+0xdc>)
 800b92c:	2600      	movs	r6, #0
 800b92e:	e7e2      	b.n	800b8f6 <pow+0xa2>
 800b930:	3ff00000 	.word	0x3ff00000

0800b934 <sqrt>:
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	ed2d 8b02 	vpush	{d8}
 800b93a:	ec55 4b10 	vmov	r4, r5, d0
 800b93e:	f000 fe21 	bl	800c584 <__ieee754_sqrt>
 800b942:	4622      	mov	r2, r4
 800b944:	462b      	mov	r3, r5
 800b946:	4620      	mov	r0, r4
 800b948:	4629      	mov	r1, r5
 800b94a:	eeb0 8a40 	vmov.f32	s16, s0
 800b94e:	eef0 8a60 	vmov.f32	s17, s1
 800b952:	f7f5 f897 	bl	8000a84 <__aeabi_dcmpun>
 800b956:	b990      	cbnz	r0, 800b97e <sqrt+0x4a>
 800b958:	2200      	movs	r2, #0
 800b95a:	2300      	movs	r3, #0
 800b95c:	4620      	mov	r0, r4
 800b95e:	4629      	mov	r1, r5
 800b960:	f7f5 f868 	bl	8000a34 <__aeabi_dcmplt>
 800b964:	b158      	cbz	r0, 800b97e <sqrt+0x4a>
 800b966:	f7ff ff33 	bl	800b7d0 <__errno>
 800b96a:	2321      	movs	r3, #33	; 0x21
 800b96c:	6003      	str	r3, [r0, #0]
 800b96e:	2200      	movs	r2, #0
 800b970:	2300      	movs	r3, #0
 800b972:	4610      	mov	r0, r2
 800b974:	4619      	mov	r1, r3
 800b976:	f7f4 ff15 	bl	80007a4 <__aeabi_ddiv>
 800b97a:	ec41 0b18 	vmov	d8, r0, r1
 800b97e:	eeb0 0a48 	vmov.f32	s0, s16
 800b982:	eef0 0a68 	vmov.f32	s1, s17
 800b986:	ecbd 8b02 	vpop	{d8}
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	0000      	movs	r0, r0
	...

0800b990 <__ieee754_atan2>:
 800b990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b994:	ec57 6b11 	vmov	r6, r7, d1
 800b998:	4273      	negs	r3, r6
 800b99a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bb20 <__ieee754_atan2+0x190>
 800b99e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b9a2:	4333      	orrs	r3, r6
 800b9a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b9a8:	4573      	cmp	r3, lr
 800b9aa:	ec51 0b10 	vmov	r0, r1, d0
 800b9ae:	ee11 8a10 	vmov	r8, s2
 800b9b2:	d80a      	bhi.n	800b9ca <__ieee754_atan2+0x3a>
 800b9b4:	4244      	negs	r4, r0
 800b9b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9ba:	4304      	orrs	r4, r0
 800b9bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b9c0:	4574      	cmp	r4, lr
 800b9c2:	ee10 9a10 	vmov	r9, s0
 800b9c6:	468c      	mov	ip, r1
 800b9c8:	d907      	bls.n	800b9da <__ieee754_atan2+0x4a>
 800b9ca:	4632      	mov	r2, r6
 800b9cc:	463b      	mov	r3, r7
 800b9ce:	f7f4 fc09 	bl	80001e4 <__adddf3>
 800b9d2:	ec41 0b10 	vmov	d0, r0, r1
 800b9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b9de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b9e2:	4334      	orrs	r4, r6
 800b9e4:	d103      	bne.n	800b9ee <__ieee754_atan2+0x5e>
 800b9e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9ea:	f000 bead 	b.w	800c748 <atan>
 800b9ee:	17bc      	asrs	r4, r7, #30
 800b9f0:	f004 0402 	and.w	r4, r4, #2
 800b9f4:	ea53 0909 	orrs.w	r9, r3, r9
 800b9f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b9fc:	d107      	bne.n	800ba0e <__ieee754_atan2+0x7e>
 800b9fe:	2c02      	cmp	r4, #2
 800ba00:	d060      	beq.n	800bac4 <__ieee754_atan2+0x134>
 800ba02:	2c03      	cmp	r4, #3
 800ba04:	d1e5      	bne.n	800b9d2 <__ieee754_atan2+0x42>
 800ba06:	a142      	add	r1, pc, #264	; (adr r1, 800bb10 <__ieee754_atan2+0x180>)
 800ba08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba0c:	e7e1      	b.n	800b9d2 <__ieee754_atan2+0x42>
 800ba0e:	ea52 0808 	orrs.w	r8, r2, r8
 800ba12:	d106      	bne.n	800ba22 <__ieee754_atan2+0x92>
 800ba14:	f1bc 0f00 	cmp.w	ip, #0
 800ba18:	da5f      	bge.n	800bada <__ieee754_atan2+0x14a>
 800ba1a:	a13f      	add	r1, pc, #252	; (adr r1, 800bb18 <__ieee754_atan2+0x188>)
 800ba1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba20:	e7d7      	b.n	800b9d2 <__ieee754_atan2+0x42>
 800ba22:	4572      	cmp	r2, lr
 800ba24:	d10f      	bne.n	800ba46 <__ieee754_atan2+0xb6>
 800ba26:	4293      	cmp	r3, r2
 800ba28:	f104 34ff 	add.w	r4, r4, #4294967295
 800ba2c:	d107      	bne.n	800ba3e <__ieee754_atan2+0xae>
 800ba2e:	2c02      	cmp	r4, #2
 800ba30:	d84c      	bhi.n	800bacc <__ieee754_atan2+0x13c>
 800ba32:	4b35      	ldr	r3, [pc, #212]	; (800bb08 <__ieee754_atan2+0x178>)
 800ba34:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ba38:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ba3c:	e7c9      	b.n	800b9d2 <__ieee754_atan2+0x42>
 800ba3e:	2c02      	cmp	r4, #2
 800ba40:	d848      	bhi.n	800bad4 <__ieee754_atan2+0x144>
 800ba42:	4b32      	ldr	r3, [pc, #200]	; (800bb0c <__ieee754_atan2+0x17c>)
 800ba44:	e7f6      	b.n	800ba34 <__ieee754_atan2+0xa4>
 800ba46:	4573      	cmp	r3, lr
 800ba48:	d0e4      	beq.n	800ba14 <__ieee754_atan2+0x84>
 800ba4a:	1a9b      	subs	r3, r3, r2
 800ba4c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ba50:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba54:	da1e      	bge.n	800ba94 <__ieee754_atan2+0x104>
 800ba56:	2f00      	cmp	r7, #0
 800ba58:	da01      	bge.n	800ba5e <__ieee754_atan2+0xce>
 800ba5a:	323c      	adds	r2, #60	; 0x3c
 800ba5c:	db1e      	blt.n	800ba9c <__ieee754_atan2+0x10c>
 800ba5e:	4632      	mov	r2, r6
 800ba60:	463b      	mov	r3, r7
 800ba62:	f7f4 fe9f 	bl	80007a4 <__aeabi_ddiv>
 800ba66:	ec41 0b10 	vmov	d0, r0, r1
 800ba6a:	f001 f80d 	bl	800ca88 <fabs>
 800ba6e:	f000 fe6b 	bl	800c748 <atan>
 800ba72:	ec51 0b10 	vmov	r0, r1, d0
 800ba76:	2c01      	cmp	r4, #1
 800ba78:	d013      	beq.n	800baa2 <__ieee754_atan2+0x112>
 800ba7a:	2c02      	cmp	r4, #2
 800ba7c:	d015      	beq.n	800baaa <__ieee754_atan2+0x11a>
 800ba7e:	2c00      	cmp	r4, #0
 800ba80:	d0a7      	beq.n	800b9d2 <__ieee754_atan2+0x42>
 800ba82:	a319      	add	r3, pc, #100	; (adr r3, 800bae8 <__ieee754_atan2+0x158>)
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	f7f4 fbaa 	bl	80001e0 <__aeabi_dsub>
 800ba8c:	a318      	add	r3, pc, #96	; (adr r3, 800baf0 <__ieee754_atan2+0x160>)
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	e014      	b.n	800babe <__ieee754_atan2+0x12e>
 800ba94:	a118      	add	r1, pc, #96	; (adr r1, 800baf8 <__ieee754_atan2+0x168>)
 800ba96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba9a:	e7ec      	b.n	800ba76 <__ieee754_atan2+0xe6>
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	2100      	movs	r1, #0
 800baa0:	e7e9      	b.n	800ba76 <__ieee754_atan2+0xe6>
 800baa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baa6:	4619      	mov	r1, r3
 800baa8:	e793      	b.n	800b9d2 <__ieee754_atan2+0x42>
 800baaa:	a30f      	add	r3, pc, #60	; (adr r3, 800bae8 <__ieee754_atan2+0x158>)
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	f7f4 fb96 	bl	80001e0 <__aeabi_dsub>
 800bab4:	4602      	mov	r2, r0
 800bab6:	460b      	mov	r3, r1
 800bab8:	a10d      	add	r1, pc, #52	; (adr r1, 800baf0 <__ieee754_atan2+0x160>)
 800baba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800babe:	f7f4 fb8f 	bl	80001e0 <__aeabi_dsub>
 800bac2:	e786      	b.n	800b9d2 <__ieee754_atan2+0x42>
 800bac4:	a10a      	add	r1, pc, #40	; (adr r1, 800baf0 <__ieee754_atan2+0x160>)
 800bac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baca:	e782      	b.n	800b9d2 <__ieee754_atan2+0x42>
 800bacc:	a10c      	add	r1, pc, #48	; (adr r1, 800bb00 <__ieee754_atan2+0x170>)
 800bace:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bad2:	e77e      	b.n	800b9d2 <__ieee754_atan2+0x42>
 800bad4:	2000      	movs	r0, #0
 800bad6:	2100      	movs	r1, #0
 800bad8:	e77b      	b.n	800b9d2 <__ieee754_atan2+0x42>
 800bada:	a107      	add	r1, pc, #28	; (adr r1, 800baf8 <__ieee754_atan2+0x168>)
 800badc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae0:	e777      	b.n	800b9d2 <__ieee754_atan2+0x42>
 800bae2:	bf00      	nop
 800bae4:	f3af 8000 	nop.w
 800bae8:	33145c07 	.word	0x33145c07
 800baec:	3ca1a626 	.word	0x3ca1a626
 800baf0:	54442d18 	.word	0x54442d18
 800baf4:	400921fb 	.word	0x400921fb
 800baf8:	54442d18 	.word	0x54442d18
 800bafc:	3ff921fb 	.word	0x3ff921fb
 800bb00:	54442d18 	.word	0x54442d18
 800bb04:	3fe921fb 	.word	0x3fe921fb
 800bb08:	0800cbf8 	.word	0x0800cbf8
 800bb0c:	0800cc10 	.word	0x0800cc10
 800bb10:	54442d18 	.word	0x54442d18
 800bb14:	c00921fb 	.word	0xc00921fb
 800bb18:	54442d18 	.word	0x54442d18
 800bb1c:	bff921fb 	.word	0xbff921fb
 800bb20:	7ff00000 	.word	0x7ff00000
 800bb24:	00000000 	.word	0x00000000

0800bb28 <__ieee754_pow>:
 800bb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2c:	ed2d 8b06 	vpush	{d8-d10}
 800bb30:	b089      	sub	sp, #36	; 0x24
 800bb32:	ed8d 1b00 	vstr	d1, [sp]
 800bb36:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bb3a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bb3e:	ea58 0102 	orrs.w	r1, r8, r2
 800bb42:	ec57 6b10 	vmov	r6, r7, d0
 800bb46:	d115      	bne.n	800bb74 <__ieee754_pow+0x4c>
 800bb48:	19b3      	adds	r3, r6, r6
 800bb4a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bb4e:	4152      	adcs	r2, r2
 800bb50:	4299      	cmp	r1, r3
 800bb52:	4b89      	ldr	r3, [pc, #548]	; (800bd78 <__ieee754_pow+0x250>)
 800bb54:	4193      	sbcs	r3, r2
 800bb56:	f080 84d2 	bcs.w	800c4fe <__ieee754_pow+0x9d6>
 800bb5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb5e:	4630      	mov	r0, r6
 800bb60:	4639      	mov	r1, r7
 800bb62:	f7f4 fb3f 	bl	80001e4 <__adddf3>
 800bb66:	ec41 0b10 	vmov	d0, r0, r1
 800bb6a:	b009      	add	sp, #36	; 0x24
 800bb6c:	ecbd 8b06 	vpop	{d8-d10}
 800bb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb74:	4b81      	ldr	r3, [pc, #516]	; (800bd7c <__ieee754_pow+0x254>)
 800bb76:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bb7a:	429c      	cmp	r4, r3
 800bb7c:	ee10 aa10 	vmov	sl, s0
 800bb80:	463d      	mov	r5, r7
 800bb82:	dc06      	bgt.n	800bb92 <__ieee754_pow+0x6a>
 800bb84:	d101      	bne.n	800bb8a <__ieee754_pow+0x62>
 800bb86:	2e00      	cmp	r6, #0
 800bb88:	d1e7      	bne.n	800bb5a <__ieee754_pow+0x32>
 800bb8a:	4598      	cmp	r8, r3
 800bb8c:	dc01      	bgt.n	800bb92 <__ieee754_pow+0x6a>
 800bb8e:	d10f      	bne.n	800bbb0 <__ieee754_pow+0x88>
 800bb90:	b172      	cbz	r2, 800bbb0 <__ieee754_pow+0x88>
 800bb92:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bb96:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bb9a:	ea55 050a 	orrs.w	r5, r5, sl
 800bb9e:	d1dc      	bne.n	800bb5a <__ieee754_pow+0x32>
 800bba0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bba4:	18db      	adds	r3, r3, r3
 800bba6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bbaa:	4152      	adcs	r2, r2
 800bbac:	429d      	cmp	r5, r3
 800bbae:	e7d0      	b.n	800bb52 <__ieee754_pow+0x2a>
 800bbb0:	2d00      	cmp	r5, #0
 800bbb2:	da3b      	bge.n	800bc2c <__ieee754_pow+0x104>
 800bbb4:	4b72      	ldr	r3, [pc, #456]	; (800bd80 <__ieee754_pow+0x258>)
 800bbb6:	4598      	cmp	r8, r3
 800bbb8:	dc51      	bgt.n	800bc5e <__ieee754_pow+0x136>
 800bbba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bbbe:	4598      	cmp	r8, r3
 800bbc0:	f340 84ac 	ble.w	800c51c <__ieee754_pow+0x9f4>
 800bbc4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bbc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bbcc:	2b14      	cmp	r3, #20
 800bbce:	dd0f      	ble.n	800bbf0 <__ieee754_pow+0xc8>
 800bbd0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bbd4:	fa22 f103 	lsr.w	r1, r2, r3
 800bbd8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	f040 849d 	bne.w	800c51c <__ieee754_pow+0x9f4>
 800bbe2:	f001 0101 	and.w	r1, r1, #1
 800bbe6:	f1c1 0302 	rsb	r3, r1, #2
 800bbea:	9304      	str	r3, [sp, #16]
 800bbec:	b182      	cbz	r2, 800bc10 <__ieee754_pow+0xe8>
 800bbee:	e05f      	b.n	800bcb0 <__ieee754_pow+0x188>
 800bbf0:	2a00      	cmp	r2, #0
 800bbf2:	d15b      	bne.n	800bcac <__ieee754_pow+0x184>
 800bbf4:	f1c3 0314 	rsb	r3, r3, #20
 800bbf8:	fa48 f103 	asr.w	r1, r8, r3
 800bbfc:	fa01 f303 	lsl.w	r3, r1, r3
 800bc00:	4543      	cmp	r3, r8
 800bc02:	f040 8488 	bne.w	800c516 <__ieee754_pow+0x9ee>
 800bc06:	f001 0101 	and.w	r1, r1, #1
 800bc0a:	f1c1 0302 	rsb	r3, r1, #2
 800bc0e:	9304      	str	r3, [sp, #16]
 800bc10:	4b5c      	ldr	r3, [pc, #368]	; (800bd84 <__ieee754_pow+0x25c>)
 800bc12:	4598      	cmp	r8, r3
 800bc14:	d132      	bne.n	800bc7c <__ieee754_pow+0x154>
 800bc16:	f1b9 0f00 	cmp.w	r9, #0
 800bc1a:	f280 8478 	bge.w	800c50e <__ieee754_pow+0x9e6>
 800bc1e:	4959      	ldr	r1, [pc, #356]	; (800bd84 <__ieee754_pow+0x25c>)
 800bc20:	4632      	mov	r2, r6
 800bc22:	463b      	mov	r3, r7
 800bc24:	2000      	movs	r0, #0
 800bc26:	f7f4 fdbd 	bl	80007a4 <__aeabi_ddiv>
 800bc2a:	e79c      	b.n	800bb66 <__ieee754_pow+0x3e>
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	9304      	str	r3, [sp, #16]
 800bc30:	2a00      	cmp	r2, #0
 800bc32:	d13d      	bne.n	800bcb0 <__ieee754_pow+0x188>
 800bc34:	4b51      	ldr	r3, [pc, #324]	; (800bd7c <__ieee754_pow+0x254>)
 800bc36:	4598      	cmp	r8, r3
 800bc38:	d1ea      	bne.n	800bc10 <__ieee754_pow+0xe8>
 800bc3a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bc3e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bc42:	ea53 030a 	orrs.w	r3, r3, sl
 800bc46:	f000 845a 	beq.w	800c4fe <__ieee754_pow+0x9d6>
 800bc4a:	4b4f      	ldr	r3, [pc, #316]	; (800bd88 <__ieee754_pow+0x260>)
 800bc4c:	429c      	cmp	r4, r3
 800bc4e:	dd08      	ble.n	800bc62 <__ieee754_pow+0x13a>
 800bc50:	f1b9 0f00 	cmp.w	r9, #0
 800bc54:	f2c0 8457 	blt.w	800c506 <__ieee754_pow+0x9de>
 800bc58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc5c:	e783      	b.n	800bb66 <__ieee754_pow+0x3e>
 800bc5e:	2302      	movs	r3, #2
 800bc60:	e7e5      	b.n	800bc2e <__ieee754_pow+0x106>
 800bc62:	f1b9 0f00 	cmp.w	r9, #0
 800bc66:	f04f 0000 	mov.w	r0, #0
 800bc6a:	f04f 0100 	mov.w	r1, #0
 800bc6e:	f6bf af7a 	bge.w	800bb66 <__ieee754_pow+0x3e>
 800bc72:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bc76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bc7a:	e774      	b.n	800bb66 <__ieee754_pow+0x3e>
 800bc7c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bc80:	d106      	bne.n	800bc90 <__ieee754_pow+0x168>
 800bc82:	4632      	mov	r2, r6
 800bc84:	463b      	mov	r3, r7
 800bc86:	4630      	mov	r0, r6
 800bc88:	4639      	mov	r1, r7
 800bc8a:	f7f4 fc61 	bl	8000550 <__aeabi_dmul>
 800bc8e:	e76a      	b.n	800bb66 <__ieee754_pow+0x3e>
 800bc90:	4b3e      	ldr	r3, [pc, #248]	; (800bd8c <__ieee754_pow+0x264>)
 800bc92:	4599      	cmp	r9, r3
 800bc94:	d10c      	bne.n	800bcb0 <__ieee754_pow+0x188>
 800bc96:	2d00      	cmp	r5, #0
 800bc98:	db0a      	blt.n	800bcb0 <__ieee754_pow+0x188>
 800bc9a:	ec47 6b10 	vmov	d0, r6, r7
 800bc9e:	b009      	add	sp, #36	; 0x24
 800bca0:	ecbd 8b06 	vpop	{d8-d10}
 800bca4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca8:	f000 bc6c 	b.w	800c584 <__ieee754_sqrt>
 800bcac:	2300      	movs	r3, #0
 800bcae:	9304      	str	r3, [sp, #16]
 800bcb0:	ec47 6b10 	vmov	d0, r6, r7
 800bcb4:	f000 fee8 	bl	800ca88 <fabs>
 800bcb8:	ec51 0b10 	vmov	r0, r1, d0
 800bcbc:	f1ba 0f00 	cmp.w	sl, #0
 800bcc0:	d129      	bne.n	800bd16 <__ieee754_pow+0x1ee>
 800bcc2:	b124      	cbz	r4, 800bcce <__ieee754_pow+0x1a6>
 800bcc4:	4b2f      	ldr	r3, [pc, #188]	; (800bd84 <__ieee754_pow+0x25c>)
 800bcc6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d123      	bne.n	800bd16 <__ieee754_pow+0x1ee>
 800bcce:	f1b9 0f00 	cmp.w	r9, #0
 800bcd2:	da05      	bge.n	800bce0 <__ieee754_pow+0x1b8>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	2000      	movs	r0, #0
 800bcda:	492a      	ldr	r1, [pc, #168]	; (800bd84 <__ieee754_pow+0x25c>)
 800bcdc:	f7f4 fd62 	bl	80007a4 <__aeabi_ddiv>
 800bce0:	2d00      	cmp	r5, #0
 800bce2:	f6bf af40 	bge.w	800bb66 <__ieee754_pow+0x3e>
 800bce6:	9b04      	ldr	r3, [sp, #16]
 800bce8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bcec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bcf0:	4323      	orrs	r3, r4
 800bcf2:	d108      	bne.n	800bd06 <__ieee754_pow+0x1de>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	f7f4 fa70 	bl	80001e0 <__aeabi_dsub>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	e78f      	b.n	800bc26 <__ieee754_pow+0xfe>
 800bd06:	9b04      	ldr	r3, [sp, #16]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	f47f af2c 	bne.w	800bb66 <__ieee754_pow+0x3e>
 800bd0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd12:	4619      	mov	r1, r3
 800bd14:	e727      	b.n	800bb66 <__ieee754_pow+0x3e>
 800bd16:	0feb      	lsrs	r3, r5, #31
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	9306      	str	r3, [sp, #24]
 800bd1c:	9a06      	ldr	r2, [sp, #24]
 800bd1e:	9b04      	ldr	r3, [sp, #16]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	d102      	bne.n	800bd2a <__ieee754_pow+0x202>
 800bd24:	4632      	mov	r2, r6
 800bd26:	463b      	mov	r3, r7
 800bd28:	e7e6      	b.n	800bcf8 <__ieee754_pow+0x1d0>
 800bd2a:	4b19      	ldr	r3, [pc, #100]	; (800bd90 <__ieee754_pow+0x268>)
 800bd2c:	4598      	cmp	r8, r3
 800bd2e:	f340 80fb 	ble.w	800bf28 <__ieee754_pow+0x400>
 800bd32:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bd36:	4598      	cmp	r8, r3
 800bd38:	4b13      	ldr	r3, [pc, #76]	; (800bd88 <__ieee754_pow+0x260>)
 800bd3a:	dd0c      	ble.n	800bd56 <__ieee754_pow+0x22e>
 800bd3c:	429c      	cmp	r4, r3
 800bd3e:	dc0f      	bgt.n	800bd60 <__ieee754_pow+0x238>
 800bd40:	f1b9 0f00 	cmp.w	r9, #0
 800bd44:	da0f      	bge.n	800bd66 <__ieee754_pow+0x23e>
 800bd46:	2000      	movs	r0, #0
 800bd48:	b009      	add	sp, #36	; 0x24
 800bd4a:	ecbd 8b06 	vpop	{d8-d10}
 800bd4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd52:	f000 bcf0 	b.w	800c736 <__math_oflow>
 800bd56:	429c      	cmp	r4, r3
 800bd58:	dbf2      	blt.n	800bd40 <__ieee754_pow+0x218>
 800bd5a:	4b0a      	ldr	r3, [pc, #40]	; (800bd84 <__ieee754_pow+0x25c>)
 800bd5c:	429c      	cmp	r4, r3
 800bd5e:	dd19      	ble.n	800bd94 <__ieee754_pow+0x26c>
 800bd60:	f1b9 0f00 	cmp.w	r9, #0
 800bd64:	dcef      	bgt.n	800bd46 <__ieee754_pow+0x21e>
 800bd66:	2000      	movs	r0, #0
 800bd68:	b009      	add	sp, #36	; 0x24
 800bd6a:	ecbd 8b06 	vpop	{d8-d10}
 800bd6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd72:	f000 bcd7 	b.w	800c724 <__math_uflow>
 800bd76:	bf00      	nop
 800bd78:	fff00000 	.word	0xfff00000
 800bd7c:	7ff00000 	.word	0x7ff00000
 800bd80:	433fffff 	.word	0x433fffff
 800bd84:	3ff00000 	.word	0x3ff00000
 800bd88:	3fefffff 	.word	0x3fefffff
 800bd8c:	3fe00000 	.word	0x3fe00000
 800bd90:	41e00000 	.word	0x41e00000
 800bd94:	4b60      	ldr	r3, [pc, #384]	; (800bf18 <__ieee754_pow+0x3f0>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	f7f4 fa22 	bl	80001e0 <__aeabi_dsub>
 800bd9c:	a354      	add	r3, pc, #336	; (adr r3, 800bef0 <__ieee754_pow+0x3c8>)
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	4604      	mov	r4, r0
 800bda4:	460d      	mov	r5, r1
 800bda6:	f7f4 fbd3 	bl	8000550 <__aeabi_dmul>
 800bdaa:	a353      	add	r3, pc, #332	; (adr r3, 800bef8 <__ieee754_pow+0x3d0>)
 800bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	460f      	mov	r7, r1
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	f7f4 fbca 	bl	8000550 <__aeabi_dmul>
 800bdbc:	4b57      	ldr	r3, [pc, #348]	; (800bf1c <__ieee754_pow+0x3f4>)
 800bdbe:	4682      	mov	sl, r0
 800bdc0:	468b      	mov	fp, r1
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	f7f4 fbc2 	bl	8000550 <__aeabi_dmul>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	a14b      	add	r1, pc, #300	; (adr r1, 800bf00 <__ieee754_pow+0x3d8>)
 800bdd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdd6:	f7f4 fa03 	bl	80001e0 <__aeabi_dsub>
 800bdda:	4622      	mov	r2, r4
 800bddc:	462b      	mov	r3, r5
 800bdde:	f7f4 fbb7 	bl	8000550 <__aeabi_dmul>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	2000      	movs	r0, #0
 800bde8:	494d      	ldr	r1, [pc, #308]	; (800bf20 <__ieee754_pow+0x3f8>)
 800bdea:	f7f4 f9f9 	bl	80001e0 <__aeabi_dsub>
 800bdee:	4622      	mov	r2, r4
 800bdf0:	4680      	mov	r8, r0
 800bdf2:	4689      	mov	r9, r1
 800bdf4:	462b      	mov	r3, r5
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	f7f4 fba9 	bl	8000550 <__aeabi_dmul>
 800bdfe:	4602      	mov	r2, r0
 800be00:	460b      	mov	r3, r1
 800be02:	4640      	mov	r0, r8
 800be04:	4649      	mov	r1, r9
 800be06:	f7f4 fba3 	bl	8000550 <__aeabi_dmul>
 800be0a:	a33f      	add	r3, pc, #252	; (adr r3, 800bf08 <__ieee754_pow+0x3e0>)
 800be0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be10:	f7f4 fb9e 	bl	8000550 <__aeabi_dmul>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	4650      	mov	r0, sl
 800be1a:	4659      	mov	r1, fp
 800be1c:	f7f4 f9e0 	bl	80001e0 <__aeabi_dsub>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4680      	mov	r8, r0
 800be26:	4689      	mov	r9, r1
 800be28:	4630      	mov	r0, r6
 800be2a:	4639      	mov	r1, r7
 800be2c:	f7f4 f9da 	bl	80001e4 <__adddf3>
 800be30:	2000      	movs	r0, #0
 800be32:	4632      	mov	r2, r6
 800be34:	463b      	mov	r3, r7
 800be36:	4604      	mov	r4, r0
 800be38:	460d      	mov	r5, r1
 800be3a:	f7f4 f9d1 	bl	80001e0 <__aeabi_dsub>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	4640      	mov	r0, r8
 800be44:	4649      	mov	r1, r9
 800be46:	f7f4 f9cb 	bl	80001e0 <__aeabi_dsub>
 800be4a:	9b04      	ldr	r3, [sp, #16]
 800be4c:	9a06      	ldr	r2, [sp, #24]
 800be4e:	3b01      	subs	r3, #1
 800be50:	4313      	orrs	r3, r2
 800be52:	4682      	mov	sl, r0
 800be54:	468b      	mov	fp, r1
 800be56:	f040 81e7 	bne.w	800c228 <__ieee754_pow+0x700>
 800be5a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bf10 <__ieee754_pow+0x3e8>
 800be5e:	eeb0 8a47 	vmov.f32	s16, s14
 800be62:	eef0 8a67 	vmov.f32	s17, s15
 800be66:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be6a:	2600      	movs	r6, #0
 800be6c:	4632      	mov	r2, r6
 800be6e:	463b      	mov	r3, r7
 800be70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be74:	f7f4 f9b4 	bl	80001e0 <__aeabi_dsub>
 800be78:	4622      	mov	r2, r4
 800be7a:	462b      	mov	r3, r5
 800be7c:	f7f4 fb68 	bl	8000550 <__aeabi_dmul>
 800be80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be84:	4680      	mov	r8, r0
 800be86:	4689      	mov	r9, r1
 800be88:	4650      	mov	r0, sl
 800be8a:	4659      	mov	r1, fp
 800be8c:	f7f4 fb60 	bl	8000550 <__aeabi_dmul>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	4640      	mov	r0, r8
 800be96:	4649      	mov	r1, r9
 800be98:	f7f4 f9a4 	bl	80001e4 <__adddf3>
 800be9c:	4632      	mov	r2, r6
 800be9e:	463b      	mov	r3, r7
 800bea0:	4680      	mov	r8, r0
 800bea2:	4689      	mov	r9, r1
 800bea4:	4620      	mov	r0, r4
 800bea6:	4629      	mov	r1, r5
 800bea8:	f7f4 fb52 	bl	8000550 <__aeabi_dmul>
 800beac:	460b      	mov	r3, r1
 800beae:	4604      	mov	r4, r0
 800beb0:	460d      	mov	r5, r1
 800beb2:	4602      	mov	r2, r0
 800beb4:	4649      	mov	r1, r9
 800beb6:	4640      	mov	r0, r8
 800beb8:	f7f4 f994 	bl	80001e4 <__adddf3>
 800bebc:	4b19      	ldr	r3, [pc, #100]	; (800bf24 <__ieee754_pow+0x3fc>)
 800bebe:	4299      	cmp	r1, r3
 800bec0:	ec45 4b19 	vmov	d9, r4, r5
 800bec4:	4606      	mov	r6, r0
 800bec6:	460f      	mov	r7, r1
 800bec8:	468b      	mov	fp, r1
 800beca:	f340 82f1 	ble.w	800c4b0 <__ieee754_pow+0x988>
 800bece:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bed2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bed6:	4303      	orrs	r3, r0
 800bed8:	f000 81e4 	beq.w	800c2a4 <__ieee754_pow+0x77c>
 800bedc:	ec51 0b18 	vmov	r0, r1, d8
 800bee0:	2200      	movs	r2, #0
 800bee2:	2300      	movs	r3, #0
 800bee4:	f7f4 fda6 	bl	8000a34 <__aeabi_dcmplt>
 800bee8:	3800      	subs	r0, #0
 800beea:	bf18      	it	ne
 800beec:	2001      	movne	r0, #1
 800beee:	e72b      	b.n	800bd48 <__ieee754_pow+0x220>
 800bef0:	60000000 	.word	0x60000000
 800bef4:	3ff71547 	.word	0x3ff71547
 800bef8:	f85ddf44 	.word	0xf85ddf44
 800befc:	3e54ae0b 	.word	0x3e54ae0b
 800bf00:	55555555 	.word	0x55555555
 800bf04:	3fd55555 	.word	0x3fd55555
 800bf08:	652b82fe 	.word	0x652b82fe
 800bf0c:	3ff71547 	.word	0x3ff71547
 800bf10:	00000000 	.word	0x00000000
 800bf14:	bff00000 	.word	0xbff00000
 800bf18:	3ff00000 	.word	0x3ff00000
 800bf1c:	3fd00000 	.word	0x3fd00000
 800bf20:	3fe00000 	.word	0x3fe00000
 800bf24:	408fffff 	.word	0x408fffff
 800bf28:	4bd5      	ldr	r3, [pc, #852]	; (800c280 <__ieee754_pow+0x758>)
 800bf2a:	402b      	ands	r3, r5
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	b92b      	cbnz	r3, 800bf3c <__ieee754_pow+0x414>
 800bf30:	4bd4      	ldr	r3, [pc, #848]	; (800c284 <__ieee754_pow+0x75c>)
 800bf32:	f7f4 fb0d 	bl	8000550 <__aeabi_dmul>
 800bf36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bf3a:	460c      	mov	r4, r1
 800bf3c:	1523      	asrs	r3, r4, #20
 800bf3e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bf42:	4413      	add	r3, r2
 800bf44:	9305      	str	r3, [sp, #20]
 800bf46:	4bd0      	ldr	r3, [pc, #832]	; (800c288 <__ieee754_pow+0x760>)
 800bf48:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bf4c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bf50:	429c      	cmp	r4, r3
 800bf52:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bf56:	dd08      	ble.n	800bf6a <__ieee754_pow+0x442>
 800bf58:	4bcc      	ldr	r3, [pc, #816]	; (800c28c <__ieee754_pow+0x764>)
 800bf5a:	429c      	cmp	r4, r3
 800bf5c:	f340 8162 	ble.w	800c224 <__ieee754_pow+0x6fc>
 800bf60:	9b05      	ldr	r3, [sp, #20]
 800bf62:	3301      	adds	r3, #1
 800bf64:	9305      	str	r3, [sp, #20]
 800bf66:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bf6a:	2400      	movs	r4, #0
 800bf6c:	00e3      	lsls	r3, r4, #3
 800bf6e:	9307      	str	r3, [sp, #28]
 800bf70:	4bc7      	ldr	r3, [pc, #796]	; (800c290 <__ieee754_pow+0x768>)
 800bf72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf76:	ed93 7b00 	vldr	d7, [r3]
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	ec53 2b17 	vmov	r2, r3, d7
 800bf80:	eeb0 9a47 	vmov.f32	s18, s14
 800bf84:	eef0 9a67 	vmov.f32	s19, s15
 800bf88:	4682      	mov	sl, r0
 800bf8a:	f7f4 f929 	bl	80001e0 <__aeabi_dsub>
 800bf8e:	4652      	mov	r2, sl
 800bf90:	4606      	mov	r6, r0
 800bf92:	460f      	mov	r7, r1
 800bf94:	462b      	mov	r3, r5
 800bf96:	ec51 0b19 	vmov	r0, r1, d9
 800bf9a:	f7f4 f923 	bl	80001e4 <__adddf3>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	49bb      	ldr	r1, [pc, #748]	; (800c294 <__ieee754_pow+0x76c>)
 800bfa6:	f7f4 fbfd 	bl	80007a4 <__aeabi_ddiv>
 800bfaa:	ec41 0b1a 	vmov	d10, r0, r1
 800bfae:	4602      	mov	r2, r0
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	4639      	mov	r1, r7
 800bfb6:	f7f4 facb 	bl	8000550 <__aeabi_dmul>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfc0:	9302      	str	r3, [sp, #8]
 800bfc2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bfc6:	46ab      	mov	fp, r5
 800bfc8:	106d      	asrs	r5, r5, #1
 800bfca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bfce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bfd2:	ec41 0b18 	vmov	d8, r0, r1
 800bfd6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bfda:	2200      	movs	r2, #0
 800bfdc:	4640      	mov	r0, r8
 800bfde:	4649      	mov	r1, r9
 800bfe0:	4614      	mov	r4, r2
 800bfe2:	461d      	mov	r5, r3
 800bfe4:	f7f4 fab4 	bl	8000550 <__aeabi_dmul>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	460b      	mov	r3, r1
 800bfec:	4630      	mov	r0, r6
 800bfee:	4639      	mov	r1, r7
 800bff0:	f7f4 f8f6 	bl	80001e0 <__aeabi_dsub>
 800bff4:	ec53 2b19 	vmov	r2, r3, d9
 800bff8:	4606      	mov	r6, r0
 800bffa:	460f      	mov	r7, r1
 800bffc:	4620      	mov	r0, r4
 800bffe:	4629      	mov	r1, r5
 800c000:	f7f4 f8ee 	bl	80001e0 <__aeabi_dsub>
 800c004:	4602      	mov	r2, r0
 800c006:	460b      	mov	r3, r1
 800c008:	4650      	mov	r0, sl
 800c00a:	4659      	mov	r1, fp
 800c00c:	f7f4 f8e8 	bl	80001e0 <__aeabi_dsub>
 800c010:	4642      	mov	r2, r8
 800c012:	464b      	mov	r3, r9
 800c014:	f7f4 fa9c 	bl	8000550 <__aeabi_dmul>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	4630      	mov	r0, r6
 800c01e:	4639      	mov	r1, r7
 800c020:	f7f4 f8de 	bl	80001e0 <__aeabi_dsub>
 800c024:	ec53 2b1a 	vmov	r2, r3, d10
 800c028:	f7f4 fa92 	bl	8000550 <__aeabi_dmul>
 800c02c:	ec53 2b18 	vmov	r2, r3, d8
 800c030:	ec41 0b19 	vmov	d9, r0, r1
 800c034:	ec51 0b18 	vmov	r0, r1, d8
 800c038:	f7f4 fa8a 	bl	8000550 <__aeabi_dmul>
 800c03c:	a37c      	add	r3, pc, #496	; (adr r3, 800c230 <__ieee754_pow+0x708>)
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	4604      	mov	r4, r0
 800c044:	460d      	mov	r5, r1
 800c046:	f7f4 fa83 	bl	8000550 <__aeabi_dmul>
 800c04a:	a37b      	add	r3, pc, #492	; (adr r3, 800c238 <__ieee754_pow+0x710>)
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	f7f4 f8c8 	bl	80001e4 <__adddf3>
 800c054:	4622      	mov	r2, r4
 800c056:	462b      	mov	r3, r5
 800c058:	f7f4 fa7a 	bl	8000550 <__aeabi_dmul>
 800c05c:	a378      	add	r3, pc, #480	; (adr r3, 800c240 <__ieee754_pow+0x718>)
 800c05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c062:	f7f4 f8bf 	bl	80001e4 <__adddf3>
 800c066:	4622      	mov	r2, r4
 800c068:	462b      	mov	r3, r5
 800c06a:	f7f4 fa71 	bl	8000550 <__aeabi_dmul>
 800c06e:	a376      	add	r3, pc, #472	; (adr r3, 800c248 <__ieee754_pow+0x720>)
 800c070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c074:	f7f4 f8b6 	bl	80001e4 <__adddf3>
 800c078:	4622      	mov	r2, r4
 800c07a:	462b      	mov	r3, r5
 800c07c:	f7f4 fa68 	bl	8000550 <__aeabi_dmul>
 800c080:	a373      	add	r3, pc, #460	; (adr r3, 800c250 <__ieee754_pow+0x728>)
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	f7f4 f8ad 	bl	80001e4 <__adddf3>
 800c08a:	4622      	mov	r2, r4
 800c08c:	462b      	mov	r3, r5
 800c08e:	f7f4 fa5f 	bl	8000550 <__aeabi_dmul>
 800c092:	a371      	add	r3, pc, #452	; (adr r3, 800c258 <__ieee754_pow+0x730>)
 800c094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c098:	f7f4 f8a4 	bl	80001e4 <__adddf3>
 800c09c:	4622      	mov	r2, r4
 800c09e:	4606      	mov	r6, r0
 800c0a0:	460f      	mov	r7, r1
 800c0a2:	462b      	mov	r3, r5
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	4629      	mov	r1, r5
 800c0a8:	f7f4 fa52 	bl	8000550 <__aeabi_dmul>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	4639      	mov	r1, r7
 800c0b4:	f7f4 fa4c 	bl	8000550 <__aeabi_dmul>
 800c0b8:	4642      	mov	r2, r8
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	460d      	mov	r5, r1
 800c0be:	464b      	mov	r3, r9
 800c0c0:	ec51 0b18 	vmov	r0, r1, d8
 800c0c4:	f7f4 f88e 	bl	80001e4 <__adddf3>
 800c0c8:	ec53 2b19 	vmov	r2, r3, d9
 800c0cc:	f7f4 fa40 	bl	8000550 <__aeabi_dmul>
 800c0d0:	4622      	mov	r2, r4
 800c0d2:	462b      	mov	r3, r5
 800c0d4:	f7f4 f886 	bl	80001e4 <__adddf3>
 800c0d8:	4642      	mov	r2, r8
 800c0da:	4682      	mov	sl, r0
 800c0dc:	468b      	mov	fp, r1
 800c0de:	464b      	mov	r3, r9
 800c0e0:	4640      	mov	r0, r8
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	f7f4 fa34 	bl	8000550 <__aeabi_dmul>
 800c0e8:	4b6b      	ldr	r3, [pc, #428]	; (800c298 <__ieee754_pow+0x770>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	460f      	mov	r7, r1
 800c0f0:	f7f4 f878 	bl	80001e4 <__adddf3>
 800c0f4:	4652      	mov	r2, sl
 800c0f6:	465b      	mov	r3, fp
 800c0f8:	f7f4 f874 	bl	80001e4 <__adddf3>
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	4604      	mov	r4, r0
 800c100:	460d      	mov	r5, r1
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	4640      	mov	r0, r8
 800c108:	4649      	mov	r1, r9
 800c10a:	f7f4 fa21 	bl	8000550 <__aeabi_dmul>
 800c10e:	4b62      	ldr	r3, [pc, #392]	; (800c298 <__ieee754_pow+0x770>)
 800c110:	4680      	mov	r8, r0
 800c112:	4689      	mov	r9, r1
 800c114:	2200      	movs	r2, #0
 800c116:	4620      	mov	r0, r4
 800c118:	4629      	mov	r1, r5
 800c11a:	f7f4 f861 	bl	80001e0 <__aeabi_dsub>
 800c11e:	4632      	mov	r2, r6
 800c120:	463b      	mov	r3, r7
 800c122:	f7f4 f85d 	bl	80001e0 <__aeabi_dsub>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	4650      	mov	r0, sl
 800c12c:	4659      	mov	r1, fp
 800c12e:	f7f4 f857 	bl	80001e0 <__aeabi_dsub>
 800c132:	ec53 2b18 	vmov	r2, r3, d8
 800c136:	f7f4 fa0b 	bl	8000550 <__aeabi_dmul>
 800c13a:	4622      	mov	r2, r4
 800c13c:	4606      	mov	r6, r0
 800c13e:	460f      	mov	r7, r1
 800c140:	462b      	mov	r3, r5
 800c142:	ec51 0b19 	vmov	r0, r1, d9
 800c146:	f7f4 fa03 	bl	8000550 <__aeabi_dmul>
 800c14a:	4602      	mov	r2, r0
 800c14c:	460b      	mov	r3, r1
 800c14e:	4630      	mov	r0, r6
 800c150:	4639      	mov	r1, r7
 800c152:	f7f4 f847 	bl	80001e4 <__adddf3>
 800c156:	4606      	mov	r6, r0
 800c158:	460f      	mov	r7, r1
 800c15a:	4602      	mov	r2, r0
 800c15c:	460b      	mov	r3, r1
 800c15e:	4640      	mov	r0, r8
 800c160:	4649      	mov	r1, r9
 800c162:	f7f4 f83f 	bl	80001e4 <__adddf3>
 800c166:	a33e      	add	r3, pc, #248	; (adr r3, 800c260 <__ieee754_pow+0x738>)
 800c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16c:	2000      	movs	r0, #0
 800c16e:	4604      	mov	r4, r0
 800c170:	460d      	mov	r5, r1
 800c172:	f7f4 f9ed 	bl	8000550 <__aeabi_dmul>
 800c176:	4642      	mov	r2, r8
 800c178:	ec41 0b18 	vmov	d8, r0, r1
 800c17c:	464b      	mov	r3, r9
 800c17e:	4620      	mov	r0, r4
 800c180:	4629      	mov	r1, r5
 800c182:	f7f4 f82d 	bl	80001e0 <__aeabi_dsub>
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	4630      	mov	r0, r6
 800c18c:	4639      	mov	r1, r7
 800c18e:	f7f4 f827 	bl	80001e0 <__aeabi_dsub>
 800c192:	a335      	add	r3, pc, #212	; (adr r3, 800c268 <__ieee754_pow+0x740>)
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	f7f4 f9da 	bl	8000550 <__aeabi_dmul>
 800c19c:	a334      	add	r3, pc, #208	; (adr r3, 800c270 <__ieee754_pow+0x748>)
 800c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	460f      	mov	r7, r1
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	f7f4 f9d1 	bl	8000550 <__aeabi_dmul>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	4639      	mov	r1, r7
 800c1b6:	f7f4 f815 	bl	80001e4 <__adddf3>
 800c1ba:	9a07      	ldr	r2, [sp, #28]
 800c1bc:	4b37      	ldr	r3, [pc, #220]	; (800c29c <__ieee754_pow+0x774>)
 800c1be:	4413      	add	r3, r2
 800c1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c4:	f7f4 f80e 	bl	80001e4 <__adddf3>
 800c1c8:	4682      	mov	sl, r0
 800c1ca:	9805      	ldr	r0, [sp, #20]
 800c1cc:	468b      	mov	fp, r1
 800c1ce:	f7f4 f955 	bl	800047c <__aeabi_i2d>
 800c1d2:	9a07      	ldr	r2, [sp, #28]
 800c1d4:	4b32      	ldr	r3, [pc, #200]	; (800c2a0 <__ieee754_pow+0x778>)
 800c1d6:	4413      	add	r3, r2
 800c1d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1dc:	4606      	mov	r6, r0
 800c1de:	460f      	mov	r7, r1
 800c1e0:	4652      	mov	r2, sl
 800c1e2:	465b      	mov	r3, fp
 800c1e4:	ec51 0b18 	vmov	r0, r1, d8
 800c1e8:	f7f3 fffc 	bl	80001e4 <__adddf3>
 800c1ec:	4642      	mov	r2, r8
 800c1ee:	464b      	mov	r3, r9
 800c1f0:	f7f3 fff8 	bl	80001e4 <__adddf3>
 800c1f4:	4632      	mov	r2, r6
 800c1f6:	463b      	mov	r3, r7
 800c1f8:	f7f3 fff4 	bl	80001e4 <__adddf3>
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	4632      	mov	r2, r6
 800c200:	463b      	mov	r3, r7
 800c202:	4604      	mov	r4, r0
 800c204:	460d      	mov	r5, r1
 800c206:	f7f3 ffeb 	bl	80001e0 <__aeabi_dsub>
 800c20a:	4642      	mov	r2, r8
 800c20c:	464b      	mov	r3, r9
 800c20e:	f7f3 ffe7 	bl	80001e0 <__aeabi_dsub>
 800c212:	ec53 2b18 	vmov	r2, r3, d8
 800c216:	f7f3 ffe3 	bl	80001e0 <__aeabi_dsub>
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	4650      	mov	r0, sl
 800c220:	4659      	mov	r1, fp
 800c222:	e610      	b.n	800be46 <__ieee754_pow+0x31e>
 800c224:	2401      	movs	r4, #1
 800c226:	e6a1      	b.n	800bf6c <__ieee754_pow+0x444>
 800c228:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c278 <__ieee754_pow+0x750>
 800c22c:	e617      	b.n	800be5e <__ieee754_pow+0x336>
 800c22e:	bf00      	nop
 800c230:	4a454eef 	.word	0x4a454eef
 800c234:	3fca7e28 	.word	0x3fca7e28
 800c238:	93c9db65 	.word	0x93c9db65
 800c23c:	3fcd864a 	.word	0x3fcd864a
 800c240:	a91d4101 	.word	0xa91d4101
 800c244:	3fd17460 	.word	0x3fd17460
 800c248:	518f264d 	.word	0x518f264d
 800c24c:	3fd55555 	.word	0x3fd55555
 800c250:	db6fabff 	.word	0xdb6fabff
 800c254:	3fdb6db6 	.word	0x3fdb6db6
 800c258:	33333303 	.word	0x33333303
 800c25c:	3fe33333 	.word	0x3fe33333
 800c260:	e0000000 	.word	0xe0000000
 800c264:	3feec709 	.word	0x3feec709
 800c268:	dc3a03fd 	.word	0xdc3a03fd
 800c26c:	3feec709 	.word	0x3feec709
 800c270:	145b01f5 	.word	0x145b01f5
 800c274:	be3e2fe0 	.word	0xbe3e2fe0
 800c278:	00000000 	.word	0x00000000
 800c27c:	3ff00000 	.word	0x3ff00000
 800c280:	7ff00000 	.word	0x7ff00000
 800c284:	43400000 	.word	0x43400000
 800c288:	0003988e 	.word	0x0003988e
 800c28c:	000bb679 	.word	0x000bb679
 800c290:	0800cc28 	.word	0x0800cc28
 800c294:	3ff00000 	.word	0x3ff00000
 800c298:	40080000 	.word	0x40080000
 800c29c:	0800cc48 	.word	0x0800cc48
 800c2a0:	0800cc38 	.word	0x0800cc38
 800c2a4:	a3b5      	add	r3, pc, #724	; (adr r3, 800c57c <__ieee754_pow+0xa54>)
 800c2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	4649      	mov	r1, r9
 800c2ae:	f7f3 ff99 	bl	80001e4 <__adddf3>
 800c2b2:	4622      	mov	r2, r4
 800c2b4:	ec41 0b1a 	vmov	d10, r0, r1
 800c2b8:	462b      	mov	r3, r5
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	4639      	mov	r1, r7
 800c2be:	f7f3 ff8f 	bl	80001e0 <__aeabi_dsub>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	ec51 0b1a 	vmov	r0, r1, d10
 800c2ca:	f7f4 fbd1 	bl	8000a70 <__aeabi_dcmpgt>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	f47f ae04 	bne.w	800bedc <__ieee754_pow+0x3b4>
 800c2d4:	4aa4      	ldr	r2, [pc, #656]	; (800c568 <__ieee754_pow+0xa40>)
 800c2d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	f340 8108 	ble.w	800c4f0 <__ieee754_pow+0x9c8>
 800c2e0:	151b      	asrs	r3, r3, #20
 800c2e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c2e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c2ea:	fa4a f303 	asr.w	r3, sl, r3
 800c2ee:	445b      	add	r3, fp
 800c2f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c2f4:	4e9d      	ldr	r6, [pc, #628]	; (800c56c <__ieee754_pow+0xa44>)
 800c2f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c2fa:	4116      	asrs	r6, r2
 800c2fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c300:	2000      	movs	r0, #0
 800c302:	ea23 0106 	bic.w	r1, r3, r6
 800c306:	f1c2 0214 	rsb	r2, r2, #20
 800c30a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c30e:	fa4a fa02 	asr.w	sl, sl, r2
 800c312:	f1bb 0f00 	cmp.w	fp, #0
 800c316:	4602      	mov	r2, r0
 800c318:	460b      	mov	r3, r1
 800c31a:	4620      	mov	r0, r4
 800c31c:	4629      	mov	r1, r5
 800c31e:	bfb8      	it	lt
 800c320:	f1ca 0a00 	rsblt	sl, sl, #0
 800c324:	f7f3 ff5c 	bl	80001e0 <__aeabi_dsub>
 800c328:	ec41 0b19 	vmov	d9, r0, r1
 800c32c:	4642      	mov	r2, r8
 800c32e:	464b      	mov	r3, r9
 800c330:	ec51 0b19 	vmov	r0, r1, d9
 800c334:	f7f3 ff56 	bl	80001e4 <__adddf3>
 800c338:	a37b      	add	r3, pc, #492	; (adr r3, 800c528 <__ieee754_pow+0xa00>)
 800c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33e:	2000      	movs	r0, #0
 800c340:	4604      	mov	r4, r0
 800c342:	460d      	mov	r5, r1
 800c344:	f7f4 f904 	bl	8000550 <__aeabi_dmul>
 800c348:	ec53 2b19 	vmov	r2, r3, d9
 800c34c:	4606      	mov	r6, r0
 800c34e:	460f      	mov	r7, r1
 800c350:	4620      	mov	r0, r4
 800c352:	4629      	mov	r1, r5
 800c354:	f7f3 ff44 	bl	80001e0 <__aeabi_dsub>
 800c358:	4602      	mov	r2, r0
 800c35a:	460b      	mov	r3, r1
 800c35c:	4640      	mov	r0, r8
 800c35e:	4649      	mov	r1, r9
 800c360:	f7f3 ff3e 	bl	80001e0 <__aeabi_dsub>
 800c364:	a372      	add	r3, pc, #456	; (adr r3, 800c530 <__ieee754_pow+0xa08>)
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	f7f4 f8f1 	bl	8000550 <__aeabi_dmul>
 800c36e:	a372      	add	r3, pc, #456	; (adr r3, 800c538 <__ieee754_pow+0xa10>)
 800c370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c374:	4680      	mov	r8, r0
 800c376:	4689      	mov	r9, r1
 800c378:	4620      	mov	r0, r4
 800c37a:	4629      	mov	r1, r5
 800c37c:	f7f4 f8e8 	bl	8000550 <__aeabi_dmul>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	4640      	mov	r0, r8
 800c386:	4649      	mov	r1, r9
 800c388:	f7f3 ff2c 	bl	80001e4 <__adddf3>
 800c38c:	4604      	mov	r4, r0
 800c38e:	460d      	mov	r5, r1
 800c390:	4602      	mov	r2, r0
 800c392:	460b      	mov	r3, r1
 800c394:	4630      	mov	r0, r6
 800c396:	4639      	mov	r1, r7
 800c398:	f7f3 ff24 	bl	80001e4 <__adddf3>
 800c39c:	4632      	mov	r2, r6
 800c39e:	463b      	mov	r3, r7
 800c3a0:	4680      	mov	r8, r0
 800c3a2:	4689      	mov	r9, r1
 800c3a4:	f7f3 ff1c 	bl	80001e0 <__aeabi_dsub>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	4629      	mov	r1, r5
 800c3b0:	f7f3 ff16 	bl	80001e0 <__aeabi_dsub>
 800c3b4:	4642      	mov	r2, r8
 800c3b6:	4606      	mov	r6, r0
 800c3b8:	460f      	mov	r7, r1
 800c3ba:	464b      	mov	r3, r9
 800c3bc:	4640      	mov	r0, r8
 800c3be:	4649      	mov	r1, r9
 800c3c0:	f7f4 f8c6 	bl	8000550 <__aeabi_dmul>
 800c3c4:	a35e      	add	r3, pc, #376	; (adr r3, 800c540 <__ieee754_pow+0xa18>)
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	460d      	mov	r5, r1
 800c3ce:	f7f4 f8bf 	bl	8000550 <__aeabi_dmul>
 800c3d2:	a35d      	add	r3, pc, #372	; (adr r3, 800c548 <__ieee754_pow+0xa20>)
 800c3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d8:	f7f3 ff02 	bl	80001e0 <__aeabi_dsub>
 800c3dc:	4622      	mov	r2, r4
 800c3de:	462b      	mov	r3, r5
 800c3e0:	f7f4 f8b6 	bl	8000550 <__aeabi_dmul>
 800c3e4:	a35a      	add	r3, pc, #360	; (adr r3, 800c550 <__ieee754_pow+0xa28>)
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	f7f3 fefb 	bl	80001e4 <__adddf3>
 800c3ee:	4622      	mov	r2, r4
 800c3f0:	462b      	mov	r3, r5
 800c3f2:	f7f4 f8ad 	bl	8000550 <__aeabi_dmul>
 800c3f6:	a358      	add	r3, pc, #352	; (adr r3, 800c558 <__ieee754_pow+0xa30>)
 800c3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fc:	f7f3 fef0 	bl	80001e0 <__aeabi_dsub>
 800c400:	4622      	mov	r2, r4
 800c402:	462b      	mov	r3, r5
 800c404:	f7f4 f8a4 	bl	8000550 <__aeabi_dmul>
 800c408:	a355      	add	r3, pc, #340	; (adr r3, 800c560 <__ieee754_pow+0xa38>)
 800c40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40e:	f7f3 fee9 	bl	80001e4 <__adddf3>
 800c412:	4622      	mov	r2, r4
 800c414:	462b      	mov	r3, r5
 800c416:	f7f4 f89b 	bl	8000550 <__aeabi_dmul>
 800c41a:	4602      	mov	r2, r0
 800c41c:	460b      	mov	r3, r1
 800c41e:	4640      	mov	r0, r8
 800c420:	4649      	mov	r1, r9
 800c422:	f7f3 fedd 	bl	80001e0 <__aeabi_dsub>
 800c426:	4604      	mov	r4, r0
 800c428:	460d      	mov	r5, r1
 800c42a:	4602      	mov	r2, r0
 800c42c:	460b      	mov	r3, r1
 800c42e:	4640      	mov	r0, r8
 800c430:	4649      	mov	r1, r9
 800c432:	f7f4 f88d 	bl	8000550 <__aeabi_dmul>
 800c436:	2200      	movs	r2, #0
 800c438:	ec41 0b19 	vmov	d9, r0, r1
 800c43c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c440:	4620      	mov	r0, r4
 800c442:	4629      	mov	r1, r5
 800c444:	f7f3 fecc 	bl	80001e0 <__aeabi_dsub>
 800c448:	4602      	mov	r2, r0
 800c44a:	460b      	mov	r3, r1
 800c44c:	ec51 0b19 	vmov	r0, r1, d9
 800c450:	f7f4 f9a8 	bl	80007a4 <__aeabi_ddiv>
 800c454:	4632      	mov	r2, r6
 800c456:	4604      	mov	r4, r0
 800c458:	460d      	mov	r5, r1
 800c45a:	463b      	mov	r3, r7
 800c45c:	4640      	mov	r0, r8
 800c45e:	4649      	mov	r1, r9
 800c460:	f7f4 f876 	bl	8000550 <__aeabi_dmul>
 800c464:	4632      	mov	r2, r6
 800c466:	463b      	mov	r3, r7
 800c468:	f7f3 febc 	bl	80001e4 <__adddf3>
 800c46c:	4602      	mov	r2, r0
 800c46e:	460b      	mov	r3, r1
 800c470:	4620      	mov	r0, r4
 800c472:	4629      	mov	r1, r5
 800c474:	f7f3 feb4 	bl	80001e0 <__aeabi_dsub>
 800c478:	4642      	mov	r2, r8
 800c47a:	464b      	mov	r3, r9
 800c47c:	f7f3 feb0 	bl	80001e0 <__aeabi_dsub>
 800c480:	460b      	mov	r3, r1
 800c482:	4602      	mov	r2, r0
 800c484:	493a      	ldr	r1, [pc, #232]	; (800c570 <__ieee754_pow+0xa48>)
 800c486:	2000      	movs	r0, #0
 800c488:	f7f3 feaa 	bl	80001e0 <__aeabi_dsub>
 800c48c:	ec41 0b10 	vmov	d0, r0, r1
 800c490:	ee10 3a90 	vmov	r3, s1
 800c494:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c49c:	da2b      	bge.n	800c4f6 <__ieee754_pow+0x9ce>
 800c49e:	4650      	mov	r0, sl
 800c4a0:	f000 fb06 	bl	800cab0 <scalbn>
 800c4a4:	ec51 0b10 	vmov	r0, r1, d0
 800c4a8:	ec53 2b18 	vmov	r2, r3, d8
 800c4ac:	f7ff bbed 	b.w	800bc8a <__ieee754_pow+0x162>
 800c4b0:	4b30      	ldr	r3, [pc, #192]	; (800c574 <__ieee754_pow+0xa4c>)
 800c4b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c4b6:	429e      	cmp	r6, r3
 800c4b8:	f77f af0c 	ble.w	800c2d4 <__ieee754_pow+0x7ac>
 800c4bc:	4b2e      	ldr	r3, [pc, #184]	; (800c578 <__ieee754_pow+0xa50>)
 800c4be:	440b      	add	r3, r1
 800c4c0:	4303      	orrs	r3, r0
 800c4c2:	d009      	beq.n	800c4d8 <__ieee754_pow+0x9b0>
 800c4c4:	ec51 0b18 	vmov	r0, r1, d8
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f7f4 fab2 	bl	8000a34 <__aeabi_dcmplt>
 800c4d0:	3800      	subs	r0, #0
 800c4d2:	bf18      	it	ne
 800c4d4:	2001      	movne	r0, #1
 800c4d6:	e447      	b.n	800bd68 <__ieee754_pow+0x240>
 800c4d8:	4622      	mov	r2, r4
 800c4da:	462b      	mov	r3, r5
 800c4dc:	f7f3 fe80 	bl	80001e0 <__aeabi_dsub>
 800c4e0:	4642      	mov	r2, r8
 800c4e2:	464b      	mov	r3, r9
 800c4e4:	f7f4 faba 	bl	8000a5c <__aeabi_dcmpge>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	f43f aef3 	beq.w	800c2d4 <__ieee754_pow+0x7ac>
 800c4ee:	e7e9      	b.n	800c4c4 <__ieee754_pow+0x99c>
 800c4f0:	f04f 0a00 	mov.w	sl, #0
 800c4f4:	e71a      	b.n	800c32c <__ieee754_pow+0x804>
 800c4f6:	ec51 0b10 	vmov	r0, r1, d0
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	e7d4      	b.n	800c4a8 <__ieee754_pow+0x980>
 800c4fe:	491c      	ldr	r1, [pc, #112]	; (800c570 <__ieee754_pow+0xa48>)
 800c500:	2000      	movs	r0, #0
 800c502:	f7ff bb30 	b.w	800bb66 <__ieee754_pow+0x3e>
 800c506:	2000      	movs	r0, #0
 800c508:	2100      	movs	r1, #0
 800c50a:	f7ff bb2c 	b.w	800bb66 <__ieee754_pow+0x3e>
 800c50e:	4630      	mov	r0, r6
 800c510:	4639      	mov	r1, r7
 800c512:	f7ff bb28 	b.w	800bb66 <__ieee754_pow+0x3e>
 800c516:	9204      	str	r2, [sp, #16]
 800c518:	f7ff bb7a 	b.w	800bc10 <__ieee754_pow+0xe8>
 800c51c:	2300      	movs	r3, #0
 800c51e:	f7ff bb64 	b.w	800bbea <__ieee754_pow+0xc2>
 800c522:	bf00      	nop
 800c524:	f3af 8000 	nop.w
 800c528:	00000000 	.word	0x00000000
 800c52c:	3fe62e43 	.word	0x3fe62e43
 800c530:	fefa39ef 	.word	0xfefa39ef
 800c534:	3fe62e42 	.word	0x3fe62e42
 800c538:	0ca86c39 	.word	0x0ca86c39
 800c53c:	be205c61 	.word	0xbe205c61
 800c540:	72bea4d0 	.word	0x72bea4d0
 800c544:	3e663769 	.word	0x3e663769
 800c548:	c5d26bf1 	.word	0xc5d26bf1
 800c54c:	3ebbbd41 	.word	0x3ebbbd41
 800c550:	af25de2c 	.word	0xaf25de2c
 800c554:	3f11566a 	.word	0x3f11566a
 800c558:	16bebd93 	.word	0x16bebd93
 800c55c:	3f66c16c 	.word	0x3f66c16c
 800c560:	5555553e 	.word	0x5555553e
 800c564:	3fc55555 	.word	0x3fc55555
 800c568:	3fe00000 	.word	0x3fe00000
 800c56c:	000fffff 	.word	0x000fffff
 800c570:	3ff00000 	.word	0x3ff00000
 800c574:	4090cbff 	.word	0x4090cbff
 800c578:	3f6f3400 	.word	0x3f6f3400
 800c57c:	652b82fe 	.word	0x652b82fe
 800c580:	3c971547 	.word	0x3c971547

0800c584 <__ieee754_sqrt>:
 800c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c588:	ec55 4b10 	vmov	r4, r5, d0
 800c58c:	4e55      	ldr	r6, [pc, #340]	; (800c6e4 <__ieee754_sqrt+0x160>)
 800c58e:	43ae      	bics	r6, r5
 800c590:	ee10 0a10 	vmov	r0, s0
 800c594:	ee10 3a10 	vmov	r3, s0
 800c598:	462a      	mov	r2, r5
 800c59a:	4629      	mov	r1, r5
 800c59c:	d110      	bne.n	800c5c0 <__ieee754_sqrt+0x3c>
 800c59e:	ee10 2a10 	vmov	r2, s0
 800c5a2:	462b      	mov	r3, r5
 800c5a4:	f7f3 ffd4 	bl	8000550 <__aeabi_dmul>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	f7f3 fe18 	bl	80001e4 <__adddf3>
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	460d      	mov	r5, r1
 800c5b8:	ec45 4b10 	vmov	d0, r4, r5
 800c5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c0:	2d00      	cmp	r5, #0
 800c5c2:	dc10      	bgt.n	800c5e6 <__ieee754_sqrt+0x62>
 800c5c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c5c8:	4330      	orrs	r0, r6
 800c5ca:	d0f5      	beq.n	800c5b8 <__ieee754_sqrt+0x34>
 800c5cc:	b15d      	cbz	r5, 800c5e6 <__ieee754_sqrt+0x62>
 800c5ce:	ee10 2a10 	vmov	r2, s0
 800c5d2:	462b      	mov	r3, r5
 800c5d4:	ee10 0a10 	vmov	r0, s0
 800c5d8:	f7f3 fe02 	bl	80001e0 <__aeabi_dsub>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	460b      	mov	r3, r1
 800c5e0:	f7f4 f8e0 	bl	80007a4 <__aeabi_ddiv>
 800c5e4:	e7e6      	b.n	800c5b4 <__ieee754_sqrt+0x30>
 800c5e6:	1512      	asrs	r2, r2, #20
 800c5e8:	d074      	beq.n	800c6d4 <__ieee754_sqrt+0x150>
 800c5ea:	07d4      	lsls	r4, r2, #31
 800c5ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c5f0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c5f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c5f8:	bf5e      	ittt	pl
 800c5fa:	0fda      	lsrpl	r2, r3, #31
 800c5fc:	005b      	lslpl	r3, r3, #1
 800c5fe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c602:	2400      	movs	r4, #0
 800c604:	0fda      	lsrs	r2, r3, #31
 800c606:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c60a:	107f      	asrs	r7, r7, #1
 800c60c:	005b      	lsls	r3, r3, #1
 800c60e:	2516      	movs	r5, #22
 800c610:	4620      	mov	r0, r4
 800c612:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c616:	1886      	adds	r6, r0, r2
 800c618:	428e      	cmp	r6, r1
 800c61a:	bfde      	ittt	le
 800c61c:	1b89      	suble	r1, r1, r6
 800c61e:	18b0      	addle	r0, r6, r2
 800c620:	18a4      	addle	r4, r4, r2
 800c622:	0049      	lsls	r1, r1, #1
 800c624:	3d01      	subs	r5, #1
 800c626:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c62a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c62e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c632:	d1f0      	bne.n	800c616 <__ieee754_sqrt+0x92>
 800c634:	462a      	mov	r2, r5
 800c636:	f04f 0e20 	mov.w	lr, #32
 800c63a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c63e:	4281      	cmp	r1, r0
 800c640:	eb06 0c05 	add.w	ip, r6, r5
 800c644:	dc02      	bgt.n	800c64c <__ieee754_sqrt+0xc8>
 800c646:	d113      	bne.n	800c670 <__ieee754_sqrt+0xec>
 800c648:	459c      	cmp	ip, r3
 800c64a:	d811      	bhi.n	800c670 <__ieee754_sqrt+0xec>
 800c64c:	f1bc 0f00 	cmp.w	ip, #0
 800c650:	eb0c 0506 	add.w	r5, ip, r6
 800c654:	da43      	bge.n	800c6de <__ieee754_sqrt+0x15a>
 800c656:	2d00      	cmp	r5, #0
 800c658:	db41      	blt.n	800c6de <__ieee754_sqrt+0x15a>
 800c65a:	f100 0801 	add.w	r8, r0, #1
 800c65e:	1a09      	subs	r1, r1, r0
 800c660:	459c      	cmp	ip, r3
 800c662:	bf88      	it	hi
 800c664:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c668:	eba3 030c 	sub.w	r3, r3, ip
 800c66c:	4432      	add	r2, r6
 800c66e:	4640      	mov	r0, r8
 800c670:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c674:	f1be 0e01 	subs.w	lr, lr, #1
 800c678:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c67c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c680:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c684:	d1db      	bne.n	800c63e <__ieee754_sqrt+0xba>
 800c686:	430b      	orrs	r3, r1
 800c688:	d006      	beq.n	800c698 <__ieee754_sqrt+0x114>
 800c68a:	1c50      	adds	r0, r2, #1
 800c68c:	bf13      	iteet	ne
 800c68e:	3201      	addne	r2, #1
 800c690:	3401      	addeq	r4, #1
 800c692:	4672      	moveq	r2, lr
 800c694:	f022 0201 	bicne.w	r2, r2, #1
 800c698:	1063      	asrs	r3, r4, #1
 800c69a:	0852      	lsrs	r2, r2, #1
 800c69c:	07e1      	lsls	r1, r4, #31
 800c69e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c6a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c6a6:	bf48      	it	mi
 800c6a8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c6ac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c6b0:	4614      	mov	r4, r2
 800c6b2:	e781      	b.n	800c5b8 <__ieee754_sqrt+0x34>
 800c6b4:	0ad9      	lsrs	r1, r3, #11
 800c6b6:	3815      	subs	r0, #21
 800c6b8:	055b      	lsls	r3, r3, #21
 800c6ba:	2900      	cmp	r1, #0
 800c6bc:	d0fa      	beq.n	800c6b4 <__ieee754_sqrt+0x130>
 800c6be:	02cd      	lsls	r5, r1, #11
 800c6c0:	d50a      	bpl.n	800c6d8 <__ieee754_sqrt+0x154>
 800c6c2:	f1c2 0420 	rsb	r4, r2, #32
 800c6c6:	fa23 f404 	lsr.w	r4, r3, r4
 800c6ca:	1e55      	subs	r5, r2, #1
 800c6cc:	4093      	lsls	r3, r2
 800c6ce:	4321      	orrs	r1, r4
 800c6d0:	1b42      	subs	r2, r0, r5
 800c6d2:	e78a      	b.n	800c5ea <__ieee754_sqrt+0x66>
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	e7f0      	b.n	800c6ba <__ieee754_sqrt+0x136>
 800c6d8:	0049      	lsls	r1, r1, #1
 800c6da:	3201      	adds	r2, #1
 800c6dc:	e7ef      	b.n	800c6be <__ieee754_sqrt+0x13a>
 800c6de:	4680      	mov	r8, r0
 800c6e0:	e7bd      	b.n	800c65e <__ieee754_sqrt+0xda>
 800c6e2:	bf00      	nop
 800c6e4:	7ff00000 	.word	0x7ff00000

0800c6e8 <with_errno>:
 800c6e8:	b570      	push	{r4, r5, r6, lr}
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	4616      	mov	r6, r2
 800c6f0:	f7ff f86e 	bl	800b7d0 <__errno>
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	6006      	str	r6, [r0, #0]
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	bd70      	pop	{r4, r5, r6, pc}

0800c6fc <xflow>:
 800c6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6fe:	4614      	mov	r4, r2
 800c700:	461d      	mov	r5, r3
 800c702:	b108      	cbz	r0, 800c708 <xflow+0xc>
 800c704:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c708:	e9cd 2300 	strd	r2, r3, [sp]
 800c70c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c710:	4620      	mov	r0, r4
 800c712:	4629      	mov	r1, r5
 800c714:	f7f3 ff1c 	bl	8000550 <__aeabi_dmul>
 800c718:	2222      	movs	r2, #34	; 0x22
 800c71a:	b003      	add	sp, #12
 800c71c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c720:	f7ff bfe2 	b.w	800c6e8 <with_errno>

0800c724 <__math_uflow>:
 800c724:	b508      	push	{r3, lr}
 800c726:	2200      	movs	r2, #0
 800c728:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c72c:	f7ff ffe6 	bl	800c6fc <xflow>
 800c730:	ec41 0b10 	vmov	d0, r0, r1
 800c734:	bd08      	pop	{r3, pc}

0800c736 <__math_oflow>:
 800c736:	b508      	push	{r3, lr}
 800c738:	2200      	movs	r2, #0
 800c73a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c73e:	f7ff ffdd 	bl	800c6fc <xflow>
 800c742:	ec41 0b10 	vmov	d0, r0, r1
 800c746:	bd08      	pop	{r3, pc}

0800c748 <atan>:
 800c748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74c:	ec55 4b10 	vmov	r4, r5, d0
 800c750:	4bc3      	ldr	r3, [pc, #780]	; (800ca60 <atan+0x318>)
 800c752:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c756:	429e      	cmp	r6, r3
 800c758:	46ab      	mov	fp, r5
 800c75a:	dd18      	ble.n	800c78e <atan+0x46>
 800c75c:	4bc1      	ldr	r3, [pc, #772]	; (800ca64 <atan+0x31c>)
 800c75e:	429e      	cmp	r6, r3
 800c760:	dc01      	bgt.n	800c766 <atan+0x1e>
 800c762:	d109      	bne.n	800c778 <atan+0x30>
 800c764:	b144      	cbz	r4, 800c778 <atan+0x30>
 800c766:	4622      	mov	r2, r4
 800c768:	462b      	mov	r3, r5
 800c76a:	4620      	mov	r0, r4
 800c76c:	4629      	mov	r1, r5
 800c76e:	f7f3 fd39 	bl	80001e4 <__adddf3>
 800c772:	4604      	mov	r4, r0
 800c774:	460d      	mov	r5, r1
 800c776:	e006      	b.n	800c786 <atan+0x3e>
 800c778:	f1bb 0f00 	cmp.w	fp, #0
 800c77c:	f300 8131 	bgt.w	800c9e2 <atan+0x29a>
 800c780:	a59b      	add	r5, pc, #620	; (adr r5, 800c9f0 <atan+0x2a8>)
 800c782:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c786:	ec45 4b10 	vmov	d0, r4, r5
 800c78a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78e:	4bb6      	ldr	r3, [pc, #728]	; (800ca68 <atan+0x320>)
 800c790:	429e      	cmp	r6, r3
 800c792:	dc14      	bgt.n	800c7be <atan+0x76>
 800c794:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c798:	429e      	cmp	r6, r3
 800c79a:	dc0d      	bgt.n	800c7b8 <atan+0x70>
 800c79c:	a396      	add	r3, pc, #600	; (adr r3, 800c9f8 <atan+0x2b0>)
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	ee10 0a10 	vmov	r0, s0
 800c7a6:	4629      	mov	r1, r5
 800c7a8:	f7f3 fd1c 	bl	80001e4 <__adddf3>
 800c7ac:	4baf      	ldr	r3, [pc, #700]	; (800ca6c <atan+0x324>)
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f7f4 f95e 	bl	8000a70 <__aeabi_dcmpgt>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d1e6      	bne.n	800c786 <atan+0x3e>
 800c7b8:	f04f 3aff 	mov.w	sl, #4294967295
 800c7bc:	e02b      	b.n	800c816 <atan+0xce>
 800c7be:	f000 f963 	bl	800ca88 <fabs>
 800c7c2:	4bab      	ldr	r3, [pc, #684]	; (800ca70 <atan+0x328>)
 800c7c4:	429e      	cmp	r6, r3
 800c7c6:	ec55 4b10 	vmov	r4, r5, d0
 800c7ca:	f300 80bf 	bgt.w	800c94c <atan+0x204>
 800c7ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c7d2:	429e      	cmp	r6, r3
 800c7d4:	f300 80a0 	bgt.w	800c918 <atan+0x1d0>
 800c7d8:	ee10 2a10 	vmov	r2, s0
 800c7dc:	ee10 0a10 	vmov	r0, s0
 800c7e0:	462b      	mov	r3, r5
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	f7f3 fcfe 	bl	80001e4 <__adddf3>
 800c7e8:	4ba0      	ldr	r3, [pc, #640]	; (800ca6c <atan+0x324>)
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f7f3 fcf8 	bl	80001e0 <__aeabi_dsub>
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	460f      	mov	r7, r1
 800c7f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	f7f3 fcf1 	bl	80001e4 <__adddf3>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	4630      	mov	r0, r6
 800c808:	4639      	mov	r1, r7
 800c80a:	f7f3 ffcb 	bl	80007a4 <__aeabi_ddiv>
 800c80e:	f04f 0a00 	mov.w	sl, #0
 800c812:	4604      	mov	r4, r0
 800c814:	460d      	mov	r5, r1
 800c816:	4622      	mov	r2, r4
 800c818:	462b      	mov	r3, r5
 800c81a:	4620      	mov	r0, r4
 800c81c:	4629      	mov	r1, r5
 800c81e:	f7f3 fe97 	bl	8000550 <__aeabi_dmul>
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	4680      	mov	r8, r0
 800c828:	4689      	mov	r9, r1
 800c82a:	f7f3 fe91 	bl	8000550 <__aeabi_dmul>
 800c82e:	a374      	add	r3, pc, #464	; (adr r3, 800ca00 <atan+0x2b8>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	4606      	mov	r6, r0
 800c836:	460f      	mov	r7, r1
 800c838:	f7f3 fe8a 	bl	8000550 <__aeabi_dmul>
 800c83c:	a372      	add	r3, pc, #456	; (adr r3, 800ca08 <atan+0x2c0>)
 800c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c842:	f7f3 fccf 	bl	80001e4 <__adddf3>
 800c846:	4632      	mov	r2, r6
 800c848:	463b      	mov	r3, r7
 800c84a:	f7f3 fe81 	bl	8000550 <__aeabi_dmul>
 800c84e:	a370      	add	r3, pc, #448	; (adr r3, 800ca10 <atan+0x2c8>)
 800c850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c854:	f7f3 fcc6 	bl	80001e4 <__adddf3>
 800c858:	4632      	mov	r2, r6
 800c85a:	463b      	mov	r3, r7
 800c85c:	f7f3 fe78 	bl	8000550 <__aeabi_dmul>
 800c860:	a36d      	add	r3, pc, #436	; (adr r3, 800ca18 <atan+0x2d0>)
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	f7f3 fcbd 	bl	80001e4 <__adddf3>
 800c86a:	4632      	mov	r2, r6
 800c86c:	463b      	mov	r3, r7
 800c86e:	f7f3 fe6f 	bl	8000550 <__aeabi_dmul>
 800c872:	a36b      	add	r3, pc, #428	; (adr r3, 800ca20 <atan+0x2d8>)
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	f7f3 fcb4 	bl	80001e4 <__adddf3>
 800c87c:	4632      	mov	r2, r6
 800c87e:	463b      	mov	r3, r7
 800c880:	f7f3 fe66 	bl	8000550 <__aeabi_dmul>
 800c884:	a368      	add	r3, pc, #416	; (adr r3, 800ca28 <atan+0x2e0>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	f7f3 fcab 	bl	80001e4 <__adddf3>
 800c88e:	4642      	mov	r2, r8
 800c890:	464b      	mov	r3, r9
 800c892:	f7f3 fe5d 	bl	8000550 <__aeabi_dmul>
 800c896:	a366      	add	r3, pc, #408	; (adr r3, 800ca30 <atan+0x2e8>)
 800c898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89c:	4680      	mov	r8, r0
 800c89e:	4689      	mov	r9, r1
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	4639      	mov	r1, r7
 800c8a4:	f7f3 fe54 	bl	8000550 <__aeabi_dmul>
 800c8a8:	a363      	add	r3, pc, #396	; (adr r3, 800ca38 <atan+0x2f0>)
 800c8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ae:	f7f3 fc97 	bl	80001e0 <__aeabi_dsub>
 800c8b2:	4632      	mov	r2, r6
 800c8b4:	463b      	mov	r3, r7
 800c8b6:	f7f3 fe4b 	bl	8000550 <__aeabi_dmul>
 800c8ba:	a361      	add	r3, pc, #388	; (adr r3, 800ca40 <atan+0x2f8>)
 800c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c0:	f7f3 fc8e 	bl	80001e0 <__aeabi_dsub>
 800c8c4:	4632      	mov	r2, r6
 800c8c6:	463b      	mov	r3, r7
 800c8c8:	f7f3 fe42 	bl	8000550 <__aeabi_dmul>
 800c8cc:	a35e      	add	r3, pc, #376	; (adr r3, 800ca48 <atan+0x300>)
 800c8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d2:	f7f3 fc85 	bl	80001e0 <__aeabi_dsub>
 800c8d6:	4632      	mov	r2, r6
 800c8d8:	463b      	mov	r3, r7
 800c8da:	f7f3 fe39 	bl	8000550 <__aeabi_dmul>
 800c8de:	a35c      	add	r3, pc, #368	; (adr r3, 800ca50 <atan+0x308>)
 800c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e4:	f7f3 fc7c 	bl	80001e0 <__aeabi_dsub>
 800c8e8:	4632      	mov	r2, r6
 800c8ea:	463b      	mov	r3, r7
 800c8ec:	f7f3 fe30 	bl	8000550 <__aeabi_dmul>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	4649      	mov	r1, r9
 800c8f8:	f7f3 fc74 	bl	80001e4 <__adddf3>
 800c8fc:	4622      	mov	r2, r4
 800c8fe:	462b      	mov	r3, r5
 800c900:	f7f3 fe26 	bl	8000550 <__aeabi_dmul>
 800c904:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	d14b      	bne.n	800c9a6 <atan+0x25e>
 800c90e:	4620      	mov	r0, r4
 800c910:	4629      	mov	r1, r5
 800c912:	f7f3 fc65 	bl	80001e0 <__aeabi_dsub>
 800c916:	e72c      	b.n	800c772 <atan+0x2a>
 800c918:	ee10 0a10 	vmov	r0, s0
 800c91c:	4b53      	ldr	r3, [pc, #332]	; (800ca6c <atan+0x324>)
 800c91e:	2200      	movs	r2, #0
 800c920:	4629      	mov	r1, r5
 800c922:	f7f3 fc5d 	bl	80001e0 <__aeabi_dsub>
 800c926:	4b51      	ldr	r3, [pc, #324]	; (800ca6c <atan+0x324>)
 800c928:	4606      	mov	r6, r0
 800c92a:	460f      	mov	r7, r1
 800c92c:	2200      	movs	r2, #0
 800c92e:	4620      	mov	r0, r4
 800c930:	4629      	mov	r1, r5
 800c932:	f7f3 fc57 	bl	80001e4 <__adddf3>
 800c936:	4602      	mov	r2, r0
 800c938:	460b      	mov	r3, r1
 800c93a:	4630      	mov	r0, r6
 800c93c:	4639      	mov	r1, r7
 800c93e:	f7f3 ff31 	bl	80007a4 <__aeabi_ddiv>
 800c942:	f04f 0a01 	mov.w	sl, #1
 800c946:	4604      	mov	r4, r0
 800c948:	460d      	mov	r5, r1
 800c94a:	e764      	b.n	800c816 <atan+0xce>
 800c94c:	4b49      	ldr	r3, [pc, #292]	; (800ca74 <atan+0x32c>)
 800c94e:	429e      	cmp	r6, r3
 800c950:	da1d      	bge.n	800c98e <atan+0x246>
 800c952:	ee10 0a10 	vmov	r0, s0
 800c956:	4b48      	ldr	r3, [pc, #288]	; (800ca78 <atan+0x330>)
 800c958:	2200      	movs	r2, #0
 800c95a:	4629      	mov	r1, r5
 800c95c:	f7f3 fc40 	bl	80001e0 <__aeabi_dsub>
 800c960:	4b45      	ldr	r3, [pc, #276]	; (800ca78 <atan+0x330>)
 800c962:	4606      	mov	r6, r0
 800c964:	460f      	mov	r7, r1
 800c966:	2200      	movs	r2, #0
 800c968:	4620      	mov	r0, r4
 800c96a:	4629      	mov	r1, r5
 800c96c:	f7f3 fdf0 	bl	8000550 <__aeabi_dmul>
 800c970:	4b3e      	ldr	r3, [pc, #248]	; (800ca6c <atan+0x324>)
 800c972:	2200      	movs	r2, #0
 800c974:	f7f3 fc36 	bl	80001e4 <__adddf3>
 800c978:	4602      	mov	r2, r0
 800c97a:	460b      	mov	r3, r1
 800c97c:	4630      	mov	r0, r6
 800c97e:	4639      	mov	r1, r7
 800c980:	f7f3 ff10 	bl	80007a4 <__aeabi_ddiv>
 800c984:	f04f 0a02 	mov.w	sl, #2
 800c988:	4604      	mov	r4, r0
 800c98a:	460d      	mov	r5, r1
 800c98c:	e743      	b.n	800c816 <atan+0xce>
 800c98e:	462b      	mov	r3, r5
 800c990:	ee10 2a10 	vmov	r2, s0
 800c994:	4939      	ldr	r1, [pc, #228]	; (800ca7c <atan+0x334>)
 800c996:	2000      	movs	r0, #0
 800c998:	f7f3 ff04 	bl	80007a4 <__aeabi_ddiv>
 800c99c:	f04f 0a03 	mov.w	sl, #3
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	460d      	mov	r5, r1
 800c9a4:	e737      	b.n	800c816 <atan+0xce>
 800c9a6:	4b36      	ldr	r3, [pc, #216]	; (800ca80 <atan+0x338>)
 800c9a8:	4e36      	ldr	r6, [pc, #216]	; (800ca84 <atan+0x33c>)
 800c9aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c9ae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c9b2:	e9da 2300 	ldrd	r2, r3, [sl]
 800c9b6:	f7f3 fc13 	bl	80001e0 <__aeabi_dsub>
 800c9ba:	4622      	mov	r2, r4
 800c9bc:	462b      	mov	r3, r5
 800c9be:	f7f3 fc0f 	bl	80001e0 <__aeabi_dsub>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c9ca:	f7f3 fc09 	bl	80001e0 <__aeabi_dsub>
 800c9ce:	f1bb 0f00 	cmp.w	fp, #0
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	460d      	mov	r5, r1
 800c9d6:	f6bf aed6 	bge.w	800c786 <atan+0x3e>
 800c9da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9de:	461d      	mov	r5, r3
 800c9e0:	e6d1      	b.n	800c786 <atan+0x3e>
 800c9e2:	a51d      	add	r5, pc, #116	; (adr r5, 800ca58 <atan+0x310>)
 800c9e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c9e8:	e6cd      	b.n	800c786 <atan+0x3e>
 800c9ea:	bf00      	nop
 800c9ec:	f3af 8000 	nop.w
 800c9f0:	54442d18 	.word	0x54442d18
 800c9f4:	bff921fb 	.word	0xbff921fb
 800c9f8:	8800759c 	.word	0x8800759c
 800c9fc:	7e37e43c 	.word	0x7e37e43c
 800ca00:	e322da11 	.word	0xe322da11
 800ca04:	3f90ad3a 	.word	0x3f90ad3a
 800ca08:	24760deb 	.word	0x24760deb
 800ca0c:	3fa97b4b 	.word	0x3fa97b4b
 800ca10:	a0d03d51 	.word	0xa0d03d51
 800ca14:	3fb10d66 	.word	0x3fb10d66
 800ca18:	c54c206e 	.word	0xc54c206e
 800ca1c:	3fb745cd 	.word	0x3fb745cd
 800ca20:	920083ff 	.word	0x920083ff
 800ca24:	3fc24924 	.word	0x3fc24924
 800ca28:	5555550d 	.word	0x5555550d
 800ca2c:	3fd55555 	.word	0x3fd55555
 800ca30:	2c6a6c2f 	.word	0x2c6a6c2f
 800ca34:	bfa2b444 	.word	0xbfa2b444
 800ca38:	52defd9a 	.word	0x52defd9a
 800ca3c:	3fadde2d 	.word	0x3fadde2d
 800ca40:	af749a6d 	.word	0xaf749a6d
 800ca44:	3fb3b0f2 	.word	0x3fb3b0f2
 800ca48:	fe231671 	.word	0xfe231671
 800ca4c:	3fbc71c6 	.word	0x3fbc71c6
 800ca50:	9998ebc4 	.word	0x9998ebc4
 800ca54:	3fc99999 	.word	0x3fc99999
 800ca58:	54442d18 	.word	0x54442d18
 800ca5c:	3ff921fb 	.word	0x3ff921fb
 800ca60:	440fffff 	.word	0x440fffff
 800ca64:	7ff00000 	.word	0x7ff00000
 800ca68:	3fdbffff 	.word	0x3fdbffff
 800ca6c:	3ff00000 	.word	0x3ff00000
 800ca70:	3ff2ffff 	.word	0x3ff2ffff
 800ca74:	40038000 	.word	0x40038000
 800ca78:	3ff80000 	.word	0x3ff80000
 800ca7c:	bff00000 	.word	0xbff00000
 800ca80:	0800cc78 	.word	0x0800cc78
 800ca84:	0800cc58 	.word	0x0800cc58

0800ca88 <fabs>:
 800ca88:	ec51 0b10 	vmov	r0, r1, d0
 800ca8c:	ee10 2a10 	vmov	r2, s0
 800ca90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca94:	ec43 2b10 	vmov	d0, r2, r3
 800ca98:	4770      	bx	lr

0800ca9a <finite>:
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	ed8d 0b00 	vstr	d0, [sp]
 800caa0:	9801      	ldr	r0, [sp, #4]
 800caa2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800caa6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800caaa:	0fc0      	lsrs	r0, r0, #31
 800caac:	b002      	add	sp, #8
 800caae:	4770      	bx	lr

0800cab0 <scalbn>:
 800cab0:	b570      	push	{r4, r5, r6, lr}
 800cab2:	ec55 4b10 	vmov	r4, r5, d0
 800cab6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800caba:	4606      	mov	r6, r0
 800cabc:	462b      	mov	r3, r5
 800cabe:	b99a      	cbnz	r2, 800cae8 <scalbn+0x38>
 800cac0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cac4:	4323      	orrs	r3, r4
 800cac6:	d036      	beq.n	800cb36 <scalbn+0x86>
 800cac8:	4b39      	ldr	r3, [pc, #228]	; (800cbb0 <scalbn+0x100>)
 800caca:	4629      	mov	r1, r5
 800cacc:	ee10 0a10 	vmov	r0, s0
 800cad0:	2200      	movs	r2, #0
 800cad2:	f7f3 fd3d 	bl	8000550 <__aeabi_dmul>
 800cad6:	4b37      	ldr	r3, [pc, #220]	; (800cbb4 <scalbn+0x104>)
 800cad8:	429e      	cmp	r6, r3
 800cada:	4604      	mov	r4, r0
 800cadc:	460d      	mov	r5, r1
 800cade:	da10      	bge.n	800cb02 <scalbn+0x52>
 800cae0:	a32b      	add	r3, pc, #172	; (adr r3, 800cb90 <scalbn+0xe0>)
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	e03a      	b.n	800cb5e <scalbn+0xae>
 800cae8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800caec:	428a      	cmp	r2, r1
 800caee:	d10c      	bne.n	800cb0a <scalbn+0x5a>
 800caf0:	ee10 2a10 	vmov	r2, s0
 800caf4:	4620      	mov	r0, r4
 800caf6:	4629      	mov	r1, r5
 800caf8:	f7f3 fb74 	bl	80001e4 <__adddf3>
 800cafc:	4604      	mov	r4, r0
 800cafe:	460d      	mov	r5, r1
 800cb00:	e019      	b.n	800cb36 <scalbn+0x86>
 800cb02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cb06:	460b      	mov	r3, r1
 800cb08:	3a36      	subs	r2, #54	; 0x36
 800cb0a:	4432      	add	r2, r6
 800cb0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cb10:	428a      	cmp	r2, r1
 800cb12:	dd08      	ble.n	800cb26 <scalbn+0x76>
 800cb14:	2d00      	cmp	r5, #0
 800cb16:	a120      	add	r1, pc, #128	; (adr r1, 800cb98 <scalbn+0xe8>)
 800cb18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb1c:	da1c      	bge.n	800cb58 <scalbn+0xa8>
 800cb1e:	a120      	add	r1, pc, #128	; (adr r1, 800cba0 <scalbn+0xf0>)
 800cb20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb24:	e018      	b.n	800cb58 <scalbn+0xa8>
 800cb26:	2a00      	cmp	r2, #0
 800cb28:	dd08      	ble.n	800cb3c <scalbn+0x8c>
 800cb2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cb36:	ec45 4b10 	vmov	d0, r4, r5
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}
 800cb3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cb40:	da19      	bge.n	800cb76 <scalbn+0xc6>
 800cb42:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cb46:	429e      	cmp	r6, r3
 800cb48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cb4c:	dd0a      	ble.n	800cb64 <scalbn+0xb4>
 800cb4e:	a112      	add	r1, pc, #72	; (adr r1, 800cb98 <scalbn+0xe8>)
 800cb50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d1e2      	bne.n	800cb1e <scalbn+0x6e>
 800cb58:	a30f      	add	r3, pc, #60	; (adr r3, 800cb98 <scalbn+0xe8>)
 800cb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5e:	f7f3 fcf7 	bl	8000550 <__aeabi_dmul>
 800cb62:	e7cb      	b.n	800cafc <scalbn+0x4c>
 800cb64:	a10a      	add	r1, pc, #40	; (adr r1, 800cb90 <scalbn+0xe0>)
 800cb66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d0b8      	beq.n	800cae0 <scalbn+0x30>
 800cb6e:	a10e      	add	r1, pc, #56	; (adr r1, 800cba8 <scalbn+0xf8>)
 800cb70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb74:	e7b4      	b.n	800cae0 <scalbn+0x30>
 800cb76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb7a:	3236      	adds	r2, #54	; 0x36
 800cb7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cb84:	4620      	mov	r0, r4
 800cb86:	4b0c      	ldr	r3, [pc, #48]	; (800cbb8 <scalbn+0x108>)
 800cb88:	2200      	movs	r2, #0
 800cb8a:	e7e8      	b.n	800cb5e <scalbn+0xae>
 800cb8c:	f3af 8000 	nop.w
 800cb90:	c2f8f359 	.word	0xc2f8f359
 800cb94:	01a56e1f 	.word	0x01a56e1f
 800cb98:	8800759c 	.word	0x8800759c
 800cb9c:	7e37e43c 	.word	0x7e37e43c
 800cba0:	8800759c 	.word	0x8800759c
 800cba4:	fe37e43c 	.word	0xfe37e43c
 800cba8:	c2f8f359 	.word	0xc2f8f359
 800cbac:	81a56e1f 	.word	0x81a56e1f
 800cbb0:	43500000 	.word	0x43500000
 800cbb4:	ffff3cb0 	.word	0xffff3cb0
 800cbb8:	3c900000 	.word	0x3c900000

0800cbbc <_init>:
 800cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbe:	bf00      	nop
 800cbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc2:	bc08      	pop	{r3}
 800cbc4:	469e      	mov	lr, r3
 800cbc6:	4770      	bx	lr

0800cbc8 <_fini>:
 800cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbca:	bf00      	nop
 800cbcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbce:	bc08      	pop	{r3}
 800cbd0:	469e      	mov	lr, r3
 800cbd2:	4770      	bx	lr
