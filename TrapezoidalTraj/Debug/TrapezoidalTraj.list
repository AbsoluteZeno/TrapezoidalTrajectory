
TrapezoidalTraj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006024  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080061c0  080061c0  000161c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006208  08006208  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006208  08006208  00016208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006210  08006210  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006214  08006214  00016214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000088  0800629c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  0800629c  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e762  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f76  00000000  00000000  0002e816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00030790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  000313e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001753a  00000000  00000000  00031fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbcb  00000000  00000000  000494f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed13  00000000  00000000  000590bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7dd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b8  00000000  00000000  000e7e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080061a4 	.word	0x080061a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	080061a4 	.word	0x080061a4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b992 	b.w	80010a8 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f824 	bl	8000dd8 <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fbd3 	bl	8000550 <__aeabi_dmul>
 8000daa:	f000 f97f 	bl	80010ac <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fb54 	bl	800045c <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fbca 	bl	8000550 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa0c 	bl	80001e0 <__aeabi_dsub>
 8000dc8:	f000 f970 	bl	80010ac <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__aeabi_d2uiz>:
 80010ac:	004a      	lsls	r2, r1, #1
 80010ae:	d211      	bcs.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010b4:	d211      	bcs.n	80010da <__aeabi_d2uiz+0x2e>
 80010b6:	d50d      	bpl.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010c0:	d40e      	bmi.n	80010e0 <__aeabi_d2uiz+0x34>
 80010c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010ce:	fa23 f002 	lsr.w	r0, r3, r2
 80010d2:	4770      	bx	lr
 80010d4:	f04f 0000 	mov.w	r0, #0
 80010d8:	4770      	bx	lr
 80010da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80010de:	d102      	bne.n	80010e6 <__aeabi_d2uiz+0x3a>
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0000 	mov.w	r0, #0
 80010ea:	4770      	bx	lr

080010ec <PositionControlVelocityForm>:
float first_error = 0;
float second_error = 0;
float third_error = 0;

void PositionControlVelocityForm(PID* controller)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	first_error = q_des - QEIData.position;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <PositionControlVelocityForm+0xac>)
 80010f6:	ed93 7a00 	vldr	s14, [r3]
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <PositionControlVelocityForm+0xb0>)
 80010fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <PositionControlVelocityForm+0xb4>)
 8001106:	edc3 7a00 	vstr	s15, [r3]

	float kp_position = controller->Kp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	617b      	str	r3, [r7, #20]
	float ki_position = controller->Ki;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
	float kd_position = controller->Kd;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	60fb      	str	r3, [r7, #12]

	PulseWidthModulation += ((kp_position + ki_position + kd_position) * first_error) - ((kp_position + (2 * kd_position)) * second_error) + (kd_position * third_error);
 800111c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001120:	edd7 7a04 	vldr	s15, [r7, #16]
 8001124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001128:	edd7 7a03 	vldr	s15, [r7, #12]
 800112c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <PositionControlVelocityForm+0xb4>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113a:	edd7 7a03 	vldr	s15, [r7, #12]
 800113e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001142:	edd7 7a05 	vldr	s15, [r7, #20]
 8001146:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <PositionControlVelocityForm+0xb8>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <PositionControlVelocityForm+0xbc>)
 800115a:	edd3 6a00 	vldr	s13, [r3]
 800115e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001166:	ee37 7a27 	vadd.f32	s14, s14, s15
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <PositionControlVelocityForm+0xc0>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <PositionControlVelocityForm+0xc0>)
 8001176:	edc3 7a00 	vstr	s15, [r3]

	third_error = second_error;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <PositionControlVelocityForm+0xb8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <PositionControlVelocityForm+0xbc>)
 8001180:	6013      	str	r3, [r2, #0]

	second_error = first_error;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <PositionControlVelocityForm+0xb4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <PositionControlVelocityForm+0xb8>)
 8001188:	6013      	str	r3, [r2, #0]
}
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200001d8 	.word	0x200001d8
 800119c:	20000200 	.word	0x20000200
 80011a0:	200000a4 	.word	0x200000a4
 80011a4:	200000a8 	.word	0x200000a8
 80011a8:	200000ac 	.word	0x200000ac
 80011ac:	20000218 	.word	0x20000218

080011b0 <micros>:

uint16_t res = 8192;      	  // Resolution [pulse/revolution]
float pulley_dia = 30.558;	  // mm

uint64_t micros(TIM_HandleTypeDef* Timer_tim)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(Timer_tim)*0.01 + _micros;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f94c 	bl	800045c <__aeabi_ui2d>
 80011c4:	a313      	add	r3, pc, #76	; (adr r3, 8001214 <micros+0x64>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff f9c1 	bl	8000550 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4614      	mov	r4, r2
 80011d4:	461d      	mov	r5, r3
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <micros+0x60>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff f980 	bl	80004e4 <__aeabi_ul2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7fe fffa 	bl	80001e4 <__adddf3>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fdd0 	bl	8000d9c <__aeabi_d2ulz>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
}
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bdb0      	pop	{r4, r5, r7, pc}
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
 8001210:	200001f8 	.word	0x200001f8
 8001214:	47ae147b 	.word	0x47ae147b
 8001218:	3f847ae1 	.word	0x3f847ae1
 800121c:	00000000 	.word	0x00000000

08001220 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* Timer_tim)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	QEIData.timestamp[0] = micros(Timer_tim);
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff ffc0 	bl	80011b0 <micros>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4b52      	ldr	r3, [pc, #328]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 8001236:	609a      	str	r2, [r3, #8]
	uint32_t lastposition = __HAL_TIM_GET_COUNTER(Encoder_tim);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	613b      	str	r3, [r7, #16]
	QEIData.data[0] = lastposition;
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 8001244:	6013      	str	r3, [r2, #0]
	if (lastposition > ((QEI_PERIOD/2) - 1))
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800124c:	d305      	bcc.n	800125a <QEIEncoderPositionVelocity_Update+0x3a>
	{
		QEIData.data[0] = lastposition - QEI_PERIOD;
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001254:	461a      	mov	r2, r3
 8001256:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 8001258:	601a      	str	r2, [r3, #0]
	}

	// position calculation
	QEIData.position = QEIData.data[0] * PI *  pulley_dia/res;
 800125a:	4b49      	ldr	r3, [pc, #292]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001266:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001384 <QEIEncoderPositionVelocity_Update+0x164>
 800126a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800126e:	4b46      	ldr	r3, [pc, #280]	; (8001388 <QEIEncoderPositionVelocity_Update+0x168>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001278:	4b44      	ldr	r3, [pc, #272]	; (800138c <QEIEncoderPositionVelocity_Update+0x16c>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 800128a:	edc3 7a04 	vstr	s15, [r3, #16]

	int32_t diffPosition = QEIData.data[0] - QEIData.data[1];
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	617b      	str	r3, [r7, #20]
	float diffTime = QEIData.timestamp[0] - QEIData.timestamp[1];
 800129a:	4b39      	ldr	r3, [pc, #228]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ac:	edc7 7a03 	vstr	s15, [r7, #12]

	// unwrap
	if (diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012b6:	dd03      	ble.n	80012c0 <QEIEncoderPositionVelocity_Update+0xa0>
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80012be:	617b      	str	r3, [r7, #20]
	if (diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80012c6:	da03      	bge.n	80012d0 <QEIEncoderPositionVelocity_Update+0xb0>
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80012ce:	617b      	str	r3, [r7, #20]

	// velocity calculation
	QEIData.velocity = (diffPosition * 1000000.0 * PI * pulley_dia)/(res * diffTime);
 80012d0:	6978      	ldr	r0, [r7, #20]
 80012d2:	f7ff f8d3 	bl	800047c <__aeabi_i2d>
 80012d6:	a326      	add	r3, pc, #152	; (adr r3, 8001370 <QEIEncoderPositionVelocity_Update+0x150>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff f938 	bl	8000550 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	a323      	add	r3, pc, #140	; (adr r3, 8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f92f 	bl	8000550 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4614      	mov	r4, r2
 80012f8:	461d      	mov	r5, r3
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <QEIEncoderPositionVelocity_Update+0x168>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f8ce 	bl	80004a0 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7ff f920 	bl	8000550 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4614      	mov	r4, r2
 8001316:	461d      	mov	r5, r3
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <QEIEncoderPositionVelocity_Update+0x16c>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001324:	edd7 7a03 	vldr	s15, [r7, #12]
 8001328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800132c:	ee17 0a90 	vmov	r0, s15
 8001330:	f7ff f8b6 	bl	80004a0 <__aeabi_f2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7ff fa32 	bl	80007a4 <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fbb2 	bl	8000ab0 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 8001350:	6153      	str	r3, [r2, #20]

	QEIData.data[1] = QEIData.data[0];
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 8001358:	6053      	str	r3, [r2, #4]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 8001360:	60d3      	str	r3, [r2, #12]
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	00000000 	.word	0x00000000
 8001374:	412e8480 	.word	0x412e8480
 8001378:	60000000 	.word	0x60000000
 800137c:	400921fb 	.word	0x400921fb
 8001380:	20000200 	.word	0x20000200
 8001384:	40490fdb 	.word	0x40490fdb
 8001388:	20000004 	.word	0x20000004
 800138c:	20000000 	.word	0x20000000

08001390 <MotorDrive>:
extern uint8_t SetHomeFlag;
extern uint8_t P_disallow;
extern uint8_t N_disallow;

void MotorDrive(TIM_HandleTypeDef* PWM_tim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	if(emer_pushed == 1){
 8001398:	4b35      	ldr	r3, [pc, #212]	; (8001470 <MotorDrive+0xe0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d162      	bne.n	8001466 <MotorDrive+0xd6>
		if (PulseWidthModulation >= 0)
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <MotorDrive+0xe4>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	db25      	blt.n	80013fc <MotorDrive+0x6c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b6:	4830      	ldr	r0, [pc, #192]	; (8001478 <MotorDrive+0xe8>)
 80013b8:	f001 fe4a 	bl	8003050 <HAL_GPIO_WritePin>
			N_disallow = 0;
 80013bc:	4b2f      	ldr	r3, [pc, #188]	; (800147c <MotorDrive+0xec>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation > 8000)
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <MotorDrive+0xe4>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001480 <MotorDrive+0xf0>
 80013cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d4:	dd02      	ble.n	80013dc <MotorDrive+0x4c>
			{
				PulseWidthModulation = 8000;
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <MotorDrive+0xe4>)
 80013d8:	4a2a      	ldr	r2, [pc, #168]	; (8001484 <MotorDrive+0xf4>)
 80013da:	601a      	str	r2, [r3, #0]
			}

			if (pe2_st || P_disallow)
 80013dc:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <MotorDrive+0xf8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d103      	bne.n	80013ec <MotorDrive+0x5c>
 80013e4:	4b29      	ldr	r3, [pc, #164]	; (800148c <MotorDrive+0xfc>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d02c      	beq.n	8001446 <MotorDrive+0xb6>
			{
				PulseWidthModulation = 0;
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <MotorDrive+0xe4>)
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
				P_disallow = 1;
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <MotorDrive+0xfc>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	e024      	b.n	8001446 <MotorDrive+0xb6>
			}
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001402:	481d      	ldr	r0, [pc, #116]	; (8001478 <MotorDrive+0xe8>)
 8001404:	f001 fe24 	bl	8003050 <HAL_GPIO_WritePin>
			P_disallow = 0;
 8001408:	4b20      	ldr	r3, [pc, #128]	; (800148c <MotorDrive+0xfc>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation < -8000)
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <MotorDrive+0xe4>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001490 <MotorDrive+0x100>
 8001418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	d502      	bpl.n	8001428 <MotorDrive+0x98>
			{
				PulseWidthModulation = -8000;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MotorDrive+0xe4>)
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <MotorDrive+0x104>)
 8001426:	601a      	str	r2, [r3, #0]
			}

			if (pe3_st || P_disallow)
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MotorDrive+0x108>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d103      	bne.n	8001438 <MotorDrive+0xa8>
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <MotorDrive+0xfc>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <MotorDrive+0xb6>
			{
				PulseWidthModulation = 0;
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MotorDrive+0xe4>)
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
				N_disallow = 1;
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MotorDrive+0xec>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
			}
		}

		__HAL_TIM_SET_COMPARE(PWM_tim, TIM_CHANNEL_1, fabs(PulseWidthModulation*5));
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MotorDrive+0xe4>)
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001454:	eef0 7ae7 	vabs.f32	s15, s15
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001460:	ee17 2a90 	vmov	r2, s15
 8001464:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000011 	.word	0x20000011
 8001474:	20000218 	.word	0x20000218
 8001478:	40020000 	.word	0x40020000
 800147c:	20000229 	.word	0x20000229
 8001480:	45fa0000 	.word	0x45fa0000
 8001484:	45fa0000 	.word	0x45fa0000
 8001488:	2000022b 	.word	0x2000022b
 800148c:	20000228 	.word	0x20000228
 8001490:	c5fa0000 	.word	0xc5fa0000
 8001494:	c5fa0000 	.word	0xc5fa0000
 8001498:	2000022c 	.word	0x2000022c

0800149c <SetHome>:

void SetHome(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* PWM_tim)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	static enum {Jog, Overcenter, Center, Recenter} SetHomeState = Jog;

	if (SetHomeFlag)
 80014a6:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <SetHome+0xf4>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d06c      	beq.n	8001588 <SetHome+0xec>
	{
		switch (SetHomeState)
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <SetHome+0xf8>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d865      	bhi.n	8001582 <SetHome+0xe6>
 80014b6:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <SetHome+0x20>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	08001503 	.word	0x08001503
 80014c4:	08001527 	.word	0x08001527
 80014c8:	08001559 	.word	0x08001559
		{
		case Jog:
			PulseWidthModulation = 3000;
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <SetHome+0xfc>)
 80014ce:	4a33      	ldr	r2, [pc, #204]	; (800159c <SetHome+0x100>)
 80014d0:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <SetHome+0x104>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <SetHome+0x4e>
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Overcenter;
 80014e2:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <SetHome+0xf8>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
			else if (pe2_st)
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
				SetHomeState = Recenter;
			}
			break;
 80014e8:	e048      	b.n	800157c <SetHome+0xe0>
			else if (pe2_st)
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <SetHome+0x108>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d044      	beq.n	800157c <SetHome+0xe0>
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Recenter;
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <SetHome+0xf8>)
 80014fc:	2203      	movs	r2, #3
 80014fe:	701a      	strb	r2, [r3, #0]
			break;
 8001500:	e03c      	b.n	800157c <SetHome+0xe0>
		case Overcenter:
			PulseWidthModulation = 3000;
 8001502:	4b25      	ldr	r3, [pc, #148]	; (8001598 <SetHome+0xfc>)
 8001504:	4a25      	ldr	r2, [pc, #148]	; (800159c <SetHome+0x100>)
 8001506:	601a      	str	r2, [r3, #0]

			if (QEIData.position >= 50)
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <SetHome+0x10c>)
 800150a:	edd3 7a04 	vldr	s15, [r3, #16]
 800150e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80015ac <SetHome+0x110>
 8001512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151a:	da00      	bge.n	800151e <SetHome+0x82>
			{
				SetHomeState = Center;
			}
			break;
 800151c:	e031      	b.n	8001582 <SetHome+0xe6>
				SetHomeState = Center;
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <SetHome+0xf8>)
 8001520:	2202      	movs	r2, #2
 8001522:	701a      	strb	r2, [r3, #0]
			break;
 8001524:	e02d      	b.n	8001582 <SetHome+0xe6>
		case Center:
			PulseWidthModulation = -3000;
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <SetHome+0xfc>)
 8001528:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <SetHome+0x114>)
 800152a:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <SetHome+0x104>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d025      	beq.n	8001580 <SetHome+0xe4>
			{
				PulseWidthModulation = 0;
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <SetHome+0xfc>)
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
				MotorDrive(PWM_tim);
 800153c:	6838      	ldr	r0, [r7, #0]
 800153e:	f7ff ff27 	bl	8001390 <MotorDrive>
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeFlag = 0;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <SetHome+0xf4>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
				SetHomeState = Jog;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <SetHome+0xf8>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001556:	e013      	b.n	8001580 <SetHome+0xe4>
		case Recenter:
			PulseWidthModulation = -3000;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <SetHome+0xfc>)
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <SetHome+0x114>)
 800155c:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= -300)
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <SetHome+0x10c>)
 8001560:	edd3 7a04 	vldr	s15, [r3, #16]
 8001564:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80015b4 <SetHome+0x118>
 8001568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001570:	d900      	bls.n	8001574 <SetHome+0xd8>
			{
				SetHomeState = Center;
			}
			break;
 8001572:	e006      	b.n	8001582 <SetHome+0xe6>
				SetHomeState = Center;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <SetHome+0xf8>)
 8001576:	2202      	movs	r2, #2
 8001578:	701a      	strb	r2, [r3, #0]
			break;
 800157a:	e002      	b.n	8001582 <SetHome+0xe6>
			break;
 800157c:	bf00      	nop
 800157e:	e000      	b.n	8001582 <SetHome+0xe6>
			break;
 8001580:	bf00      	nop
		}
		MotorDrive(PWM_tim);
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	f7ff ff04 	bl	8001390 <MotorDrive>
	}
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000010 	.word	0x20000010
 8001594:	200000b0 	.word	0x200000b0
 8001598:	20000218 	.word	0x20000218
 800159c:	453b8000 	.word	0x453b8000
 80015a0:	2000022a 	.word	0x2000022a
 80015a4:	2000022b 	.word	0x2000022b
 80015a8:	20000200 	.word	0x20000200
 80015ac:	42480000 	.word	0x42480000
 80015b0:	c53b8000 	.word	0xc53b8000
 80015b4:	c3960000 	.word	0xc3960000

080015b8 <TrapezoidalTraj_PreCal>:

float v_max = 1000.0;	  	  // mm/s
float a = 2000.0;		  	  // mm/s^

void TrapezoidalTraj_PreCal(int16_t start_pos, int16_t final_pos, Traj* trajectory)
{
 80015b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	603a      	str	r2, [r7, #0]
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	460b      	mov	r3, r1
 80015c8:	80bb      	strh	r3, [r7, #4]
	if (start_pos != final_pos)
 80015ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d05e      	beq.n	8001694 <TrapezoidalTraj_PreCal+0xdc>
	{
		float s = final_pos - start_pos;
 80015d6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e8:	edc7 7a03 	vstr	s15, [r7, #12]

		trajectory->t_acc = v_max/a;
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <TrapezoidalTraj_PreCal+0xf0>)
 80015ee:	edd3 6a00 	vldr	s13, [r3]
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <TrapezoidalTraj_PreCal+0xf4>)
 80015f4:	ed93 7a00 	vldr	s14, [r3]
 80015f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	edc3 7a01 	vstr	s15, [r3, #4]
		trajectory->t_total = (pow(v_max,2)+a*fabs(s))/(a*v_max);
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <TrapezoidalTraj_PreCal+0xf0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff4a 	bl	80004a0 <__aeabi_f2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80016a0 <TrapezoidalTraj_PreCal+0xe8>
 8001614:	ec43 2b10 	vmov	d0, r2, r3
 8001618:	f003 fe7c 	bl	8005314 <pow>
 800161c:	ec59 8b10 	vmov	r8, r9, d0
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <TrapezoidalTraj_PreCal+0xf4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff3b 	bl	80004a0 <__aeabi_f2d>
 800162a:	4604      	mov	r4, r0
 800162c:	460d      	mov	r5, r1
 800162e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001632:	eef0 7ae7 	vabs.f32	s15, s15
 8001636:	ee17 0a90 	vmov	r0, s15
 800163a:	f7fe ff31 	bl	80004a0 <__aeabi_f2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4620      	mov	r0, r4
 8001644:	4629      	mov	r1, r5
 8001646:	f7fe ff83 	bl	8000550 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4640      	mov	r0, r8
 8001650:	4649      	mov	r1, r9
 8001652:	f7fe fdc7 	bl	80001e4 <__adddf3>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4614      	mov	r4, r2
 800165c:	461d      	mov	r5, r3
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <TrapezoidalTraj_PreCal+0xf4>)
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <TrapezoidalTraj_PreCal+0xf0>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	ee17 0a90 	vmov	r0, s15
 8001672:	f7fe ff15 	bl	80004a0 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7ff f891 	bl	80007a4 <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa11 	bl	8000ab0 <__aeabi_d2f>
 800168e:	4602      	mov	r2, r0
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	601a      	str	r2, [r3, #0]
	}
}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800169e:	bf00      	nop
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40000000 	.word	0x40000000
 80016a8:	20000008 	.word	0x20000008
 80016ac:	2000000c 	.word	0x2000000c

080016b0 <TrapezoidalTraj_GetState>:

void TrapezoidalTraj_GetState(int16_t start_pos, int16_t final_pos, Traj* trajectory, uint32_t t_us)
{
 80016b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016b4:	ed2d 8b02 	vpush	{d8}
 80016b8:	b08c      	sub	sp, #48	; 0x30
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	613a      	str	r2, [r7, #16]
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4603      	mov	r3, r0
 80016c2:	82fb      	strh	r3, [r7, #22]
 80016c4:	460b      	mov	r3, r1
 80016c6:	82bb      	strh	r3, [r7, #20]
	if (start_pos != final_pos)
 80016c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f000 8391 	beq.w	8001df8 <TrapezoidalTraj_GetState+0x748>
	{
		float t = t_us/1000000.0;
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f7fe fec0 	bl	800045c <__aeabi_ui2d>
 80016dc:	a3ab      	add	r3, pc, #684	; (adr r3, 800198c <TrapezoidalTraj_GetState+0x2dc>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7ff f85f 	bl	80007a4 <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff f9df 	bl	8000ab0 <__aeabi_d2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28

		float t_acc = trajectory->t_acc;
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
		float t_total = trajectory->t_total;
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	623b      	str	r3, [r7, #32]

		float s = final_pos - start_pos;
 8001702:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001706:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001714:	edc7 7a07 	vstr	s15, [r7, #28]
		int8_t dir = 1;
 8001718:	2301      	movs	r3, #1
 800171a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (s < 0)
 800171e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001722:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	d502      	bpl.n	8001732 <TrapezoidalTraj_GetState+0x82>
		{
			dir = -1;
 800172c:	23ff      	movs	r3, #255	; 0xff
 800172e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (2*t_acc < t_total) // General Case
 8001732:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001736:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800173a:	ed97 7a08 	vldr	s14, [r7, #32]
 800173e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	f340 81e8 	ble.w	8001b1a <TrapezoidalTraj_GetState+0x46a>
		{
			if (t <= t_acc)
 800174a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800174e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	d862      	bhi.n	8001822 <TrapezoidalTraj_GetState+0x172>
			{
				qddot_des = dir*a;
 800175c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001768:	4b83      	ldr	r3, [pc, #524]	; (8001978 <TrapezoidalTraj_GetState+0x2c8>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001772:	4b82      	ldr	r3, [pc, #520]	; (800197c <TrapezoidalTraj_GetState+0x2cc>)
 8001774:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*t;
 8001778:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001784:	4b7c      	ldr	r3, [pc, #496]	; (8001978 <TrapezoidalTraj_GetState+0x2c8>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800178e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001796:	4b7a      	ldr	r3, [pc, #488]	; (8001980 <TrapezoidalTraj_GetState+0x2d0>)
 8001798:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t,2));
 800179c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fe6b 	bl	800047c <__aeabi_i2d>
 80017a6:	4604      	mov	r4, r0
 80017a8:	460d      	mov	r5, r1
 80017aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fe64 	bl	800047c <__aeabi_i2d>
 80017b4:	4680      	mov	r8, r0
 80017b6:	4689      	mov	r9, r1
 80017b8:	4b6f      	ldr	r3, [pc, #444]	; (8001978 <TrapezoidalTraj_GetState+0x2c8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fe6f 	bl	80004a0 <__aeabi_f2d>
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	4b6f      	ldr	r3, [pc, #444]	; (8001984 <TrapezoidalTraj_GetState+0x2d4>)
 80017c8:	f7fe fec2 	bl	8000550 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4692      	mov	sl, r2
 80017d2:	469b      	mov	fp, r3
 80017d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017d6:	f7fe fe63 	bl	80004a0 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8001970 <TrapezoidalTraj_GetState+0x2c0>
 80017e2:	ec43 2b10 	vmov	d0, r2, r3
 80017e6:	f003 fd95 	bl	8005314 <pow>
 80017ea:	ec53 2b10 	vmov	r2, r3, d0
 80017ee:	4650      	mov	r0, sl
 80017f0:	4659      	mov	r1, fp
 80017f2:	f7fe fead 	bl	8000550 <__aeabi_dmul>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4640      	mov	r0, r8
 80017fc:	4649      	mov	r1, r9
 80017fe:	f7fe fea7 	bl	8000550 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4620      	mov	r0, r4
 8001808:	4629      	mov	r1, r5
 800180a:	f7fe fceb 	bl	80001e4 <__adddf3>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff f94b 	bl	8000ab0 <__aeabi_d2f>
 800181a:	4603      	mov	r3, r0
 800181c:	4a5a      	ldr	r2, [pc, #360]	; (8001988 <TrapezoidalTraj_GetState+0x2d8>)
 800181e:	6013      	str	r3, [r2, #0]
				qdot_des = dir*a*(2*t_acc - t);
				q_des = start_pos + dir*(2*a*t_acc*t-0.5*a*pow(t,2)-a*pow(t_acc,2));
			}
		}
	}
}
 8001820:	e2ea      	b.n	8001df8 <TrapezoidalTraj_GetState+0x748>
			else if (t_acc < t && t < (t_total - t_acc))
 8001822:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001826:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800182a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	f140 8083 	bpl.w	800193c <TrapezoidalTraj_GetState+0x28c>
 8001836:	ed97 7a08 	vldr	s14, [r7, #32]
 800183a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800183e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001842:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184e:	d575      	bpl.n	800193c <TrapezoidalTraj_GetState+0x28c>
				qddot_des = 0;
 8001850:	4b4a      	ldr	r3, [pc, #296]	; (800197c <TrapezoidalTraj_GetState+0x2cc>)
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
				qdot_des = dir*a*t_acc;
 8001858:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001864:	4b44      	ldr	r3, [pc, #272]	; (8001978 <TrapezoidalTraj_GetState+0x2c8>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800186e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001876:	4b42      	ldr	r3, [pc, #264]	; (8001980 <TrapezoidalTraj_GetState+0x2d0>)
 8001878:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t_acc,2) + a*t_acc*(t - t_acc));
 800187c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fdfb 	bl	800047c <__aeabi_i2d>
 8001886:	4604      	mov	r4, r0
 8001888:	460d      	mov	r5, r1
 800188a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fdf4 	bl	800047c <__aeabi_i2d>
 8001894:	4680      	mov	r8, r0
 8001896:	4689      	mov	r9, r1
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <TrapezoidalTraj_GetState+0x2c8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fdff 	bl	80004a0 <__aeabi_f2d>
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <TrapezoidalTraj_GetState+0x2d4>)
 80018a8:	f7fe fe52 	bl	8000550 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4692      	mov	sl, r2
 80018b2:	469b      	mov	fp, r3
 80018b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018b6:	f7fe fdf3 	bl	80004a0 <__aeabi_f2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001970 <TrapezoidalTraj_GetState+0x2c0>
 80018c2:	ec43 2b10 	vmov	d0, r2, r3
 80018c6:	f003 fd25 	bl	8005314 <pow>
 80018ca:	ec53 2b10 	vmov	r2, r3, d0
 80018ce:	4650      	mov	r0, sl
 80018d0:	4659      	mov	r1, fp
 80018d2:	f7fe fe3d 	bl	8000550 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4692      	mov	sl, r2
 80018dc:	469b      	mov	fp, r3
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <TrapezoidalTraj_GetState+0x2c8>)
 80018e0:	ed93 7a00 	vldr	s14, [r3]
 80018e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ec:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80018f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	ee17 0a90 	vmov	r0, s15
 8001900:	f7fe fdce 	bl	80004a0 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4650      	mov	r0, sl
 800190a:	4659      	mov	r1, fp
 800190c:	f7fe fc6a 	bl	80001e4 <__adddf3>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4640      	mov	r0, r8
 8001916:	4649      	mov	r1, r9
 8001918:	f7fe fe1a 	bl	8000550 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7fe fc5e 	bl	80001e4 <__adddf3>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f8be 	bl	8000ab0 <__aeabi_d2f>
 8001934:	4603      	mov	r3, r0
 8001936:	4a14      	ldr	r2, [pc, #80]	; (8001988 <TrapezoidalTraj_GetState+0x2d8>)
 8001938:	6013      	str	r3, [r2, #0]
}
 800193a:	e25d      	b.n	8001df8 <TrapezoidalTraj_GetState+0x748>
			else if ((t_total - t_acc) <= t && t <= t_total)
 800193c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001940:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001948:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800194c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001954:	da00      	bge.n	8001958 <TrapezoidalTraj_GetState+0x2a8>
}
 8001956:	e24f      	b.n	8001df8 <TrapezoidalTraj_GetState+0x748>
			else if ((t_total - t_acc) <= t && t <= t_total)
 8001958:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800195c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001968:	d914      	bls.n	8001994 <TrapezoidalTraj_GetState+0x2e4>
}
 800196a:	e245      	b.n	8001df8 <TrapezoidalTraj_GetState+0x748>
 800196c:	f3af 8000 	nop.w
 8001970:	00000000 	.word	0x00000000
 8001974:	40000000 	.word	0x40000000
 8001978:	2000000c 	.word	0x2000000c
 800197c:	200001e0 	.word	0x200001e0
 8001980:	200001dc 	.word	0x200001dc
 8001984:	3fe00000 	.word	0x3fe00000
 8001988:	200001d8 	.word	0x200001d8
 800198c:	00000000 	.word	0x00000000
 8001990:	412e8480 	.word	0x412e8480
				qddot_des = -dir*a;
 8001994:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001998:	425b      	negs	r3, r3
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a2:	4bbd      	ldr	r3, [pc, #756]	; (8001c98 <TrapezoidalTraj_GetState+0x5e8>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ac:	4bbb      	ldr	r3, [pc, #748]	; (8001c9c <TrapezoidalTraj_GetState+0x5ec>)
 80019ae:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*(t_total - t);
 80019b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019be:	4bb6      	ldr	r3, [pc, #728]	; (8001c98 <TrapezoidalTraj_GetState+0x5e8>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c8:	edd7 6a08 	vldr	s13, [r7, #32]
 80019cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d8:	4bb1      	ldr	r3, [pc, #708]	; (8001ca0 <TrapezoidalTraj_GetState+0x5f0>)
 80019da:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(a*t_total*t+a*t_acc*t_total-a*pow(t_acc,2)-0.5*a*(pow(t,2)+pow(t_total,2)));
 80019de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fd4a 	bl	800047c <__aeabi_i2d>
 80019e8:	4682      	mov	sl, r0
 80019ea:	468b      	mov	fp, r1
 80019ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd43 	bl	800047c <__aeabi_i2d>
 80019f6:	e9c7 0100 	strd	r0, r1, [r7]
 80019fa:	4ba7      	ldr	r3, [pc, #668]	; (8001c98 <TrapezoidalTraj_GetState+0x5e8>)
 80019fc:	ed93 7a00 	vldr	s14, [r3]
 8001a00:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a10:	4ba1      	ldr	r3, [pc, #644]	; (8001c98 <TrapezoidalTraj_GetState+0x5e8>)
 8001a12:	edd3 6a00 	vldr	s13, [r3]
 8001a16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a1a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2a:	ee17 0a90 	vmov	r0, s15
 8001a2e:	f7fe fd37 	bl	80004a0 <__aeabi_f2d>
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
 8001a36:	4b98      	ldr	r3, [pc, #608]	; (8001c98 <TrapezoidalTraj_GetState+0x5e8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd30 	bl	80004a0 <__aeabi_f2d>
 8001a40:	4680      	mov	r8, r0
 8001a42:	4689      	mov	r9, r1
 8001a44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a46:	f7fe fd2b 	bl	80004a0 <__aeabi_f2d>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8001c90 <TrapezoidalTraj_GetState+0x5e0>
 8001a52:	ec43 2b10 	vmov	d0, r2, r3
 8001a56:	f003 fc5d 	bl	8005314 <pow>
 8001a5a:	ec53 2b10 	vmov	r2, r3, d0
 8001a5e:	4640      	mov	r0, r8
 8001a60:	4649      	mov	r1, r9
 8001a62:	f7fe fd75 	bl	8000550 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f7fe fbb7 	bl	80001e0 <__aeabi_dsub>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4614      	mov	r4, r2
 8001a78:	461d      	mov	r5, r3
 8001a7a:	4b87      	ldr	r3, [pc, #540]	; (8001c98 <TrapezoidalTraj_GetState+0x5e8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd0e 	bl	80004a0 <__aeabi_f2d>
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b86      	ldr	r3, [pc, #536]	; (8001ca4 <TrapezoidalTraj_GetState+0x5f4>)
 8001a8a:	f7fe fd61 	bl	8000550 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4690      	mov	r8, r2
 8001a94:	4699      	mov	r9, r3
 8001a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a98:	f7fe fd02 	bl	80004a0 <__aeabi_f2d>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8001c90 <TrapezoidalTraj_GetState+0x5e0>
 8001aa4:	ec43 2b10 	vmov	d0, r2, r3
 8001aa8:	f003 fc34 	bl	8005314 <pow>
 8001aac:	eeb0 8a40 	vmov.f32	s16, s0
 8001ab0:	eef0 8a60 	vmov.f32	s17, s1
 8001ab4:	6a38      	ldr	r0, [r7, #32]
 8001ab6:	f7fe fcf3 	bl	80004a0 <__aeabi_f2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8001c90 <TrapezoidalTraj_GetState+0x5e0>
 8001ac2:	ec43 2b10 	vmov	d0, r2, r3
 8001ac6:	f003 fc25 	bl	8005314 <pow>
 8001aca:	ec53 2b10 	vmov	r2, r3, d0
 8001ace:	ec51 0b18 	vmov	r0, r1, d8
 8001ad2:	f7fe fb87 	bl	80001e4 <__adddf3>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4640      	mov	r0, r8
 8001adc:	4649      	mov	r1, r9
 8001ade:	f7fe fd37 	bl	8000550 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	4629      	mov	r1, r5
 8001aea:	f7fe fb79 	bl	80001e0 <__aeabi_dsub>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001af6:	f7fe fd2b 	bl	8000550 <__aeabi_dmul>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4650      	mov	r0, sl
 8001b00:	4659      	mov	r1, fp
 8001b02:	f7fe fb6f 	bl	80001e4 <__adddf3>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7fe ffcf 	bl	8000ab0 <__aeabi_d2f>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a64      	ldr	r2, [pc, #400]	; (8001ca8 <TrapezoidalTraj_GetState+0x5f8>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	e16e      	b.n	8001df8 <TrapezoidalTraj_GetState+0x748>
			t_acc = 0.5*sqrt(4*fabs(s)/a);
 8001b1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b1e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b22:	ee17 0a90 	vmov	r0, s15
 8001b26:	f7fe fcbb 	bl	80004a0 <__aeabi_f2d>
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <TrapezoidalTraj_GetState+0x5fc>)
 8001b30:	f7fe fd0e 	bl	8000550 <__aeabi_dmul>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4614      	mov	r4, r2
 8001b3a:	461d      	mov	r5, r3
 8001b3c:	4b56      	ldr	r3, [pc, #344]	; (8001c98 <TrapezoidalTraj_GetState+0x5e8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcad 	bl	80004a0 <__aeabi_f2d>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	f7fe fe29 	bl	80007a4 <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	ec43 2b17 	vmov	d7, r2, r3
 8001b5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b5e:	eef0 0a67 	vmov.f32	s1, s15
 8001b62:	f003 fc47 	bl	80053f4 <sqrt>
 8001b66:	ec51 0b10 	vmov	r0, r1, d0
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b4d      	ldr	r3, [pc, #308]	; (8001ca4 <TrapezoidalTraj_GetState+0x5f4>)
 8001b70:	f7fe fcee 	bl	8000550 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7fe ff98 	bl	8000ab0 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
			t_total = 2*t_acc;
 8001b84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b8c:	edc7 7a08 	vstr	s15, [r7, #32]
			if (t <= t_acc)
 8001b90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001b94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	d862      	bhi.n	8001c68 <TrapezoidalTraj_GetState+0x5b8>
				qddot_des = dir*a;
 8001ba2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001ba6:	ee07 3a90 	vmov	s15, r3
 8001baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bae:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <TrapezoidalTraj_GetState+0x5e8>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <TrapezoidalTraj_GetState+0x5ec>)
 8001bba:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*t;
 8001bbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bca:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <TrapezoidalTraj_GetState+0x5e8>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bdc:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <TrapezoidalTraj_GetState+0x5f0>)
 8001bde:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t,2));
 8001be2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc48 	bl	800047c <__aeabi_i2d>
 8001bec:	4604      	mov	r4, r0
 8001bee:	460d      	mov	r5, r1
 8001bf0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc41 	bl	800047c <__aeabi_i2d>
 8001bfa:	4680      	mov	r8, r0
 8001bfc:	4689      	mov	r9, r1
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <TrapezoidalTraj_GetState+0x5e8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fc4c 	bl	80004a0 <__aeabi_f2d>
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <TrapezoidalTraj_GetState+0x5f4>)
 8001c0e:	f7fe fc9f 	bl	8000550 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4692      	mov	sl, r2
 8001c18:	469b      	mov	fp, r3
 8001c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c1c:	f7fe fc40 	bl	80004a0 <__aeabi_f2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001c90 <TrapezoidalTraj_GetState+0x5e0>
 8001c28:	ec43 2b10 	vmov	d0, r2, r3
 8001c2c:	f003 fb72 	bl	8005314 <pow>
 8001c30:	ec53 2b10 	vmov	r2, r3, d0
 8001c34:	4650      	mov	r0, sl
 8001c36:	4659      	mov	r1, fp
 8001c38:	f7fe fc8a 	bl	8000550 <__aeabi_dmul>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4640      	mov	r0, r8
 8001c42:	4649      	mov	r1, r9
 8001c44:	f7fe fc84 	bl	8000550 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fac8 	bl	80001e4 <__adddf3>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff28 	bl	8000ab0 <__aeabi_d2f>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <TrapezoidalTraj_GetState+0x5f8>)
 8001c64:	6013      	str	r3, [r2, #0]
}
 8001c66:	e0c7      	b.n	8001df8 <TrapezoidalTraj_GetState+0x748>
			else if (t_acc < t && t < t_total)
 8001c68:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	d400      	bmi.n	8001c7c <TrapezoidalTraj_GetState+0x5cc>
}
 8001c7a:	e0bd      	b.n	8001df8 <TrapezoidalTraj_GetState+0x748>
			else if (t_acc < t && t < t_total)
 8001c7c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c80:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	d410      	bmi.n	8001cb0 <TrapezoidalTraj_GetState+0x600>
}
 8001c8e:	e0b3      	b.n	8001df8 <TrapezoidalTraj_GetState+0x748>
 8001c90:	00000000 	.word	0x00000000
 8001c94:	40000000 	.word	0x40000000
 8001c98:	2000000c 	.word	0x2000000c
 8001c9c:	200001e0 	.word	0x200001e0
 8001ca0:	200001dc 	.word	0x200001dc
 8001ca4:	3fe00000 	.word	0x3fe00000
 8001ca8:	200001d8 	.word	0x200001d8
 8001cac:	40100000 	.word	0x40100000
				qddot_des = -dir*a;
 8001cb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001cb4:	425b      	negs	r3, r3
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cbe:	4b54      	ldr	r3, [pc, #336]	; (8001e10 <TrapezoidalTraj_GetState+0x760>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc8:	4b52      	ldr	r3, [pc, #328]	; (8001e14 <TrapezoidalTraj_GetState+0x764>)
 8001cca:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*(2*t_acc - t);
 8001cce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <TrapezoidalTraj_GetState+0x760>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ce8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001cec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001cf0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf8:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <TrapezoidalTraj_GetState+0x768>)
 8001cfa:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(2*a*t_acc*t-0.5*a*pow(t,2)-a*pow(t_acc,2));
 8001cfe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fbba 	bl	800047c <__aeabi_i2d>
 8001d08:	4604      	mov	r4, r0
 8001d0a:	460d      	mov	r5, r1
 8001d0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fbb3 	bl	800047c <__aeabi_i2d>
 8001d16:	4680      	mov	r8, r0
 8001d18:	4689      	mov	r9, r1
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <TrapezoidalTraj_GetState+0x760>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d34:	ee17 0a90 	vmov	r0, s15
 8001d38:	f7fe fbb2 	bl	80004a0 <__aeabi_f2d>
 8001d3c:	4682      	mov	sl, r0
 8001d3e:	468b      	mov	fp, r1
 8001d40:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <TrapezoidalTraj_GetState+0x760>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fbab 	bl	80004a0 <__aeabi_f2d>
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <TrapezoidalTraj_GetState+0x76c>)
 8001d50:	f7fe fbfe 	bl	8000550 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	e9c7 2300 	strd	r2, r3, [r7]
 8001d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d5e:	f7fe fb9f 	bl	80004a0 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001e08 <TrapezoidalTraj_GetState+0x758>
 8001d6a:	ec43 2b10 	vmov	d0, r2, r3
 8001d6e:	f003 fad1 	bl	8005314 <pow>
 8001d72:	ec53 2b10 	vmov	r2, r3, d0
 8001d76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d7a:	f7fe fbe9 	bl	8000550 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4650      	mov	r0, sl
 8001d84:	4659      	mov	r1, fp
 8001d86:	f7fe fa2b 	bl	80001e0 <__aeabi_dsub>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	e9c7 2300 	strd	r2, r3, [r7]
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <TrapezoidalTraj_GetState+0x760>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fb82 	bl	80004a0 <__aeabi_f2d>
 8001d9c:	4682      	mov	sl, r0
 8001d9e:	468b      	mov	fp, r1
 8001da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001da2:	f7fe fb7d 	bl	80004a0 <__aeabi_f2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001e08 <TrapezoidalTraj_GetState+0x758>
 8001dae:	ec43 2b10 	vmov	d0, r2, r3
 8001db2:	f003 faaf 	bl	8005314 <pow>
 8001db6:	ec53 2b10 	vmov	r2, r3, d0
 8001dba:	4650      	mov	r0, sl
 8001dbc:	4659      	mov	r1, fp
 8001dbe:	f7fe fbc7 	bl	8000550 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dca:	f7fe fa09 	bl	80001e0 <__aeabi_dsub>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4640      	mov	r0, r8
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	f7fe fbbb 	bl	8000550 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4620      	mov	r0, r4
 8001de0:	4629      	mov	r1, r5
 8001de2:	f7fe f9ff 	bl	80001e4 <__adddf3>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7fe fe5f 	bl	8000ab0 <__aeabi_d2f>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <TrapezoidalTraj_GetState+0x770>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	3730      	adds	r7, #48	; 0x30
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	ecbd 8b02 	vpop	{d8}
 8001e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e06:	bf00      	nop
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40000000 	.word	0x40000000
 8001e10:	2000000c 	.word	0x2000000c
 8001e14:	200001e0 	.word	0x200001e0
 8001e18:	200001dc 	.word	0x200001dc
 8001e1c:	3fe00000 	.word	0x3fe00000
 8001e20:	200001d8 	.word	0x200001d8

08001e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e28:	f000 fdf2 	bl	8002a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e2c:	f000 f838 	bl	8001ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e30:	f000 fa0a 	bl	8002248 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e34:	f000 f9de 	bl	80021f4 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001e38:	f000 f98e 	bl	8002158 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001e3c:	f000 f898 	bl	8001f70 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001e40:	f000 f936 	bl	80020b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8001e44:	480f      	ldr	r0, [pc, #60]	; (8001e84 <main+0x60>)
 8001e46:	f001 fe77 	bl	8003b38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8001e4a:	480f      	ldr	r0, [pc, #60]	; (8001e88 <main+0x64>)
 8001e4c:	f001 fe1a 	bl	8003a84 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 || TIM_CHANNEL_2);
 8001e50:	2101      	movs	r1, #1
 8001e52:	480e      	ldr	r0, [pc, #56]	; (8001e8c <main+0x68>)
 8001e54:	f002 f882 	bl	8003f5c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	480b      	ldr	r0, [pc, #44]	; (8001e88 <main+0x64>)
 8001e5c:	f001 ff28 	bl	8003cb0 <HAL_TIM_PWM_Start>

  Controller.Kp = 120;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <main+0x6c>)
 8001e62:	4a0c      	ldr	r2, [pc, #48]	; (8001e94 <main+0x70>)
 8001e64:	601a      	str	r2, [r3, #0]
  Controller.Ki = 0.05;
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <main+0x6c>)
 8001e68:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <main+0x74>)
 8001e6a:	605a      	str	r2, [r3, #4]
  Controller.Kd = 0;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <main+0x6c>)
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Micro = micros(&htim5);
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <main+0x60>)
 8001e76:	f7ff f99b 	bl	80011b0 <micros>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <main+0x78>)
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e7f7      	b.n	8001e74 <main+0x50>
 8001e84:	20000144 	.word	0x20000144
 8001e88:	200000b4 	.word	0x200000b4
 8001e8c:	200000fc 	.word	0x200000fc
 8001e90:	2000021c 	.word	0x2000021c
 8001e94:	42f00000 	.word	0x42f00000
 8001e98:	3d4ccccd 	.word	0x3d4ccccd
 8001e9c:	20000230 	.word	0x20000230

08001ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b094      	sub	sp, #80	; 0x50
 8001ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ea6:	f107 0320 	add.w	r3, r7, #32
 8001eaa:	2230      	movs	r2, #48	; 0x30
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fa28 	bl	8005304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <SystemClock_Config+0xc8>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <SystemClock_Config+0xc8>)
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed4:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <SystemClock_Config+0xc8>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <SystemClock_Config+0xcc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <SystemClock_Config+0xcc>)
 8001eea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <SystemClock_Config+0xcc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f00:	2301      	movs	r3, #1
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f04:	2310      	movs	r3, #16
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f10:	2308      	movs	r3, #8
 8001f12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f14:	2364      	movs	r3, #100	; 0x64
 8001f16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f20:	f107 0320 	add.w	r3, r7, #32
 8001f24:	4618      	mov	r0, r3
 8001f26:	f001 f8c5 	bl	80030b4 <HAL_RCC_OscConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f30:	f000 fbaa 	bl	8002688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f34:	230f      	movs	r3, #15
 8001f36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	2103      	movs	r1, #3
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 fb27 	bl	80035a4 <HAL_RCC_ClockConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f5c:	f000 fb94 	bl	8002688 <Error_Handler>
  }
}
 8001f60:	bf00      	nop
 8001f62:	3750      	adds	r7, #80	; 0x50
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40007000 	.word	0x40007000

08001f70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b096      	sub	sp, #88	; 0x58
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	615a      	str	r2, [r3, #20]
 8001fa0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 f9ab 	bl	8005304 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fae:	4b3e      	ldr	r3, [pc, #248]	; (80020a8 <MX_TIM1_Init+0x138>)
 8001fb0:	4a3e      	ldr	r2, [pc, #248]	; (80020ac <MX_TIM1_Init+0x13c>)
 8001fb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fb4:	4b3c      	ldr	r3, [pc, #240]	; (80020a8 <MX_TIM1_Init+0x138>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <MX_TIM1_Init+0x138>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001fc0:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <MX_TIM1_Init+0x138>)
 8001fc2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001fc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <MX_TIM1_Init+0x138>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fce:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <MX_TIM1_Init+0x138>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd4:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <MX_TIM1_Init+0x138>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fda:	4833      	ldr	r0, [pc, #204]	; (80020a8 <MX_TIM1_Init+0x138>)
 8001fdc:	f001 fd02 	bl	80039e4 <HAL_TIM_Base_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001fe6:	f000 fb4f 	bl	8002688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ff0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	482c      	ldr	r0, [pc, #176]	; (80020a8 <MX_TIM1_Init+0x138>)
 8001ff8:	f002 fa08 	bl	800440c <HAL_TIM_ConfigClockSource>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002002:	f000 fb41 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002006:	4828      	ldr	r0, [pc, #160]	; (80020a8 <MX_TIM1_Init+0x138>)
 8002008:	f001 fdf8 	bl	8003bfc <HAL_TIM_PWM_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002012:	f000 fb39 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800201e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002022:	4619      	mov	r1, r3
 8002024:	4820      	ldr	r0, [pc, #128]	; (80020a8 <MX_TIM1_Init+0x138>)
 8002026:	f002 fdad 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002030:	f000 fb2a 	bl	8002688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002034:	2360      	movs	r3, #96	; 0x60
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002040:	2300      	movs	r3, #0
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800204c:	2300      	movs	r3, #0
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002054:	2200      	movs	r2, #0
 8002056:	4619      	mov	r1, r3
 8002058:	4813      	ldr	r0, [pc, #76]	; (80020a8 <MX_TIM1_Init+0x138>)
 800205a:	f002 f915 	bl	8004288 <HAL_TIM_PWM_ConfigChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002064:	f000 fb10 	bl	8002688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800207c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002080:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	4619      	mov	r1, r3
 800208a:	4807      	ldr	r0, [pc, #28]	; (80020a8 <MX_TIM1_Init+0x138>)
 800208c:	f002 fde8 	bl	8004c60 <HAL_TIMEx_ConfigBreakDeadTime>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002096:	f000 faf7 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800209a:	4803      	ldr	r0, [pc, #12]	; (80020a8 <MX_TIM1_Init+0x138>)
 800209c:	f000 fbb0 	bl	8002800 <HAL_TIM_MspPostInit>

}
 80020a0:	bf00      	nop
 80020a2:	3758      	adds	r7, #88	; 0x58
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200000b4 	.word	0x200000b4
 80020ac:	40010000 	.word	0x40010000

080020b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	; 0x30
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	2224      	movs	r2, #36	; 0x24
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 f920 	bl	8005304 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020cc:	4b20      	ldr	r3, [pc, #128]	; (8002150 <MX_TIM3_Init+0xa0>)
 80020ce:	4a21      	ldr	r2, [pc, #132]	; (8002154 <MX_TIM3_Init+0xa4>)
 80020d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020d2:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <MX_TIM3_Init+0xa0>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <MX_TIM3_Init+0xa0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD - 1;
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <MX_TIM3_Init+0xa0>)
 80020e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <MX_TIM3_Init+0xa0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <MX_TIM3_Init+0xa0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020f2:	2303      	movs	r3, #3
 80020f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020fa:	2301      	movs	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800210a:	2301      	movs	r3, #1
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800210e:	2300      	movs	r3, #0
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	4619      	mov	r1, r3
 800211c:	480c      	ldr	r0, [pc, #48]	; (8002150 <MX_TIM3_Init+0xa0>)
 800211e:	f001 fe77 	bl	8003e10 <HAL_TIM_Encoder_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002128:	f000 faae 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212c:	2300      	movs	r3, #0
 800212e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	4619      	mov	r1, r3
 8002138:	4805      	ldr	r0, [pc, #20]	; (8002150 <MX_TIM3_Init+0xa0>)
 800213a:	f002 fd23 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002144:	f000 faa0 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	3730      	adds	r7, #48	; 0x30
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	200000fc 	.word	0x200000fc
 8002154:	40000400 	.word	0x40000400

08002158 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215e:	f107 0308 	add.w	r3, r7, #8
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216c:	463b      	mov	r3, r7
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <MX_TIM5_Init+0x90>)
 8002176:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <MX_TIM5_Init+0x94>)
 8002178:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <MX_TIM5_Init+0x90>)
 800217c:	2200      	movs	r2, #0
 800217e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <MX_TIM5_Init+0x90>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <MX_TIM5_Init+0x90>)
 8002188:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <MX_TIM5_Init+0x98>)
 800218a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <MX_TIM5_Init+0x90>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <MX_TIM5_Init+0x90>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002198:	4813      	ldr	r0, [pc, #76]	; (80021e8 <MX_TIM5_Init+0x90>)
 800219a:	f001 fc23 	bl	80039e4 <HAL_TIM_Base_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80021a4:	f000 fa70 	bl	8002688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	4619      	mov	r1, r3
 80021b4:	480c      	ldr	r0, [pc, #48]	; (80021e8 <MX_TIM5_Init+0x90>)
 80021b6:	f002 f929 	bl	800440c <HAL_TIM_ConfigClockSource>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80021c0:	f000 fa62 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021cc:	463b      	mov	r3, r7
 80021ce:	4619      	mov	r1, r3
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_TIM5_Init+0x90>)
 80021d2:	f002 fcd7 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80021dc:	f000 fa54 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000144 	.word	0x20000144
 80021ec:	40000c00 	.word	0x40000c00
 80021f0:	0001869f 	.word	0x0001869f

080021f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <MX_USART2_UART_Init+0x50>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800222c:	f002 fd7e 	bl	8004d2c <HAL_UART_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002236:	f000 fa27 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000018c 	.word	0x2000018c
 8002244:	40004400 	.word	0x40004400

08002248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
 800225c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	4b4c      	ldr	r3, [pc, #304]	; (8002394 <MX_GPIO_Init+0x14c>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a4b      	ldr	r2, [pc, #300]	; (8002394 <MX_GPIO_Init+0x14c>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b49      	ldr	r3, [pc, #292]	; (8002394 <MX_GPIO_Init+0x14c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b45      	ldr	r3, [pc, #276]	; (8002394 <MX_GPIO_Init+0x14c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a44      	ldr	r2, [pc, #272]	; (8002394 <MX_GPIO_Init+0x14c>)
 8002284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b42      	ldr	r3, [pc, #264]	; (8002394 <MX_GPIO_Init+0x14c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	4b3e      	ldr	r3, [pc, #248]	; (8002394 <MX_GPIO_Init+0x14c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a3d      	ldr	r2, [pc, #244]	; (8002394 <MX_GPIO_Init+0x14c>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <MX_GPIO_Init+0x14c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <MX_GPIO_Init+0x14c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a36      	ldr	r2, [pc, #216]	; (8002394 <MX_GPIO_Init+0x14c>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b34      	ldr	r3, [pc, #208]	; (8002394 <MX_GPIO_Init+0x14c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80022d4:	4830      	ldr	r0, [pc, #192]	; (8002398 <MX_GPIO_Init+0x150>)
 80022d6:	f000 febb 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	482a      	ldr	r0, [pc, #168]	; (800239c <MX_GPIO_Init+0x154>)
 80022f2:	f000 fd11 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 80022f6:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80022fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fc:	2301      	movs	r3, #1
 80022fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	4822      	ldr	r0, [pc, #136]	; (8002398 <MX_GPIO_Init+0x150>)
 8002310:	f000 fd02 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002314:	2302      	movs	r3, #2
 8002316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	481e      	ldr	r0, [pc, #120]	; (80023a0 <MX_GPIO_Init+0x158>)
 8002328:	f000 fcf6 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800232c:	2304      	movs	r3, #4
 800232e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002330:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4619      	mov	r1, r3
 8002340:	4817      	ldr	r0, [pc, #92]	; (80023a0 <MX_GPIO_Init+0x158>)
 8002342:	f000 fce9 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800234a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800234c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4619      	mov	r1, r3
 800235c:	4810      	ldr	r0, [pc, #64]	; (80023a0 <MX_GPIO_Init+0x158>)
 800235e:	f000 fcdb 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4619      	mov	r1, r3
 8002376:	4808      	ldr	r0, [pc, #32]	; (8002398 <MX_GPIO_Init+0x150>)
 8002378:	f000 fcce 	bl	8002d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	2028      	movs	r0, #40	; 0x28
 8002382:	f000 fc92 	bl	8002caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002386:	2028      	movs	r0, #40	; 0x28
 8002388:	f000 fcab 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

}
 800238c:	bf00      	nop
 800238e:	3728      	adds	r7, #40	; 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40023800 	.word	0x40023800
 8002398:	40020000 	.word	0x40020000
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020400 	.word	0x40020400

080023a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b5b0      	push	{r4, r5, r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d115      	bne.n	80023e0 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		_micros += 1000;
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 80023be:	f143 0500 	adc.w	r5, r3, #0
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023c4:	e9c3 4500 	strd	r4, r5, [r3]

		QEIEncoderPositionVelocity_Update(&htim3, &htim5);
 80023c8:	4907      	ldr	r1, [pc, #28]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80023ca:	4809      	ldr	r0, [pc, #36]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80023cc:	f7fe ff28 	bl	8001220 <QEIEncoderPositionVelocity_Update>
		check_pe();
 80023d0:	f000 f92c 	bl	800262c <check_pe>
		SetHome(&htim3, &htim1);
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80023d6:	4806      	ldr	r0, [pc, #24]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80023d8:	f7ff f860 	bl	800149c <SetHome>
		ControllerState();
 80023dc:	f000 f80c 	bl	80023f8 <ControllerState>
	}
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bdb0      	pop	{r4, r5, r7, pc}
 80023e8:	20000144 	.word	0x20000144
 80023ec:	200001f8 	.word	0x200001f8
 80023f0:	200000fc 	.word	0x200000fc
 80023f4:	200000b4 	.word	0x200000b4

080023f8 <ControllerState>:
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fabs(PulseWidthModulation));
//	}
//}

void ControllerState()
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	static enum {Idle, Follow} state = Idle;

	if (SetHomeFlag == 0)
 80023fc:	4b64      	ldr	r3, [pc, #400]	; (8002590 <ControllerState+0x198>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 80bc 	bne.w	800257e <ControllerState+0x186>
	{
		switch(state)
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <ControllerState+0x19c>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <ControllerState+0x1c>
 800240e:	2b01      	cmp	r3, #1
 8002410:	d036      	beq.n	8002480 <ControllerState+0x88>
 8002412:	e0b0      	b.n	8002576 <ControllerState+0x17e>
		{
		case Idle:
			PulseWidthModulation = 0;
 8002414:	4b60      	ldr	r3, [pc, #384]	; (8002598 <ControllerState+0x1a0>)
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
			MotorDrive(&htim1);
 800241c:	485f      	ldr	r0, [pc, #380]	; (800259c <ControllerState+0x1a4>)
 800241e:	f7fe ffb7 	bl	8001390 <MotorDrive>
			Pi = QEIData.position;
 8002422:	4b5f      	ldr	r3, [pc, #380]	; (80025a0 <ControllerState+0x1a8>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	4a5f      	ldr	r2, [pc, #380]	; (80025a4 <ControllerState+0x1ac>)
 8002428:	6013      	str	r3, [r2, #0]

			if(Pf != Pf_last)
 800242a:	4b5f      	ldr	r3, [pc, #380]	; (80025a8 <ControllerState+0x1b0>)
 800242c:	ed93 7a00 	vldr	s14, [r3]
 8002430:	4b5e      	ldr	r3, [pc, #376]	; (80025ac <ControllerState+0x1b4>)
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	eeb4 7a67 	vcmp.f32	s14, s15
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	f000 8097 	beq.w	8002570 <ControllerState+0x178>
			{
				t_traj = 0;
 8002442:	495b      	ldr	r1, [pc, #364]	; (80025b0 <ControllerState+0x1b8>)
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	e9c1 2300 	strd	r2, r3, [r1]
				TrapezoidalTraj_PreCal(Pi, Pf, &traj);
 8002450:	4b54      	ldr	r3, [pc, #336]	; (80025a4 <ControllerState+0x1ac>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800245a:	ee17 3a90 	vmov	r3, s15
 800245e:	b21b      	sxth	r3, r3
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <ControllerState+0x1b0>)
 8002462:	edd2 7a00 	vldr	s15, [r2]
 8002466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800246a:	ee17 2a90 	vmov	r2, s15
 800246e:	b211      	sxth	r1, r2
 8002470:	4a50      	ldr	r2, [pc, #320]	; (80025b4 <ControllerState+0x1bc>)
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff f8a0 	bl	80015b8 <TrapezoidalTraj_PreCal>
				state = Follow;
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <ControllerState+0x19c>)
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800247e:	e077      	b.n	8002570 <ControllerState+0x178>

		case Follow:
			t_traj = t_traj + 1000;
 8002480:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <ControllerState+0x1b8>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f512 707a 	adds.w	r0, r2, #1000	; 0x3e8
 800248a:	f143 0100 	adc.w	r1, r3, #0
 800248e:	4b48      	ldr	r3, [pc, #288]	; (80025b0 <ControllerState+0x1b8>)
 8002490:	e9c3 0100 	strd	r0, r1, [r3]
			if (t_traj <= traj.t_total * 1000000)
 8002494:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <ControllerState+0x1b8>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f7fe fc1f 	bl	8000ce0 <__aeabi_ul2f>
 80024a2:	ee06 0a90 	vmov	s13, r0
 80024a6:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <ControllerState+0x1bc>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80025b8 <ControllerState+0x1c0>
 80024b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80024b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024bc:	d817      	bhi.n	80024ee <ControllerState+0xf6>
			{
				TrapezoidalTraj_GetState(Pi, Pf, &traj, t_traj);
 80024be:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <ControllerState+0x1ac>)
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c8:	ee17 3a90 	vmov	r3, s15
 80024cc:	b218      	sxth	r0, r3
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <ControllerState+0x1b0>)
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d8:	ee17 3a90 	vmov	r3, s15
 80024dc:	b219      	sxth	r1, r3
 80024de:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <ControllerState+0x1b8>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	4613      	mov	r3, r2
 80024e6:	4a33      	ldr	r2, [pc, #204]	; (80025b4 <ControllerState+0x1bc>)
 80024e8:	f7ff f8e2 	bl	80016b0 <TrapezoidalTraj_GetState>
 80024ec:	e003      	b.n	80024f6 <ControllerState+0xfe>
			}
			else
			{
				q_des = Pf;
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <ControllerState+0x1b0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a32      	ldr	r2, [pc, #200]	; (80025bc <ControllerState+0x1c4>)
 80024f4:	6013      	str	r3, [r2, #0]
			}

			PositionControlVelocityForm(&Controller);
 80024f6:	4832      	ldr	r0, [pc, #200]	; (80025c0 <ControllerState+0x1c8>)
 80024f8:	f7fe fdf8 	bl	80010ec <PositionControlVelocityForm>
			MotorDrive(&htim1);
 80024fc:	4827      	ldr	r0, [pc, #156]	; (800259c <ControllerState+0x1a4>)
 80024fe:	f7fe ff47 	bl	8001390 <MotorDrive>

			if (((t_traj > traj.t_total * 1000000) && (0.15 > fabs(q_des - QEIData.position))) || P_disallow || P_disallow)
 8002502:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <ControllerState+0x1b8>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f7fe fbe8 	bl	8000ce0 <__aeabi_ul2f>
 8002510:	ee06 0a90 	vmov	s13, r0
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <ControllerState+0x1bc>)
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80025b8 <ControllerState+0x1c0>
 800251e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002522:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	dd15      	ble.n	8002558 <ControllerState+0x160>
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <ControllerState+0x1c4>)
 800252e:	ed93 7a00 	vldr	s14, [r3]
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <ControllerState+0x1a8>)
 8002534:	edd3 7a04 	vldr	s15, [r3, #16]
 8002538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253c:	eef0 7ae7 	vabs.f32	s15, s15
 8002540:	ee17 0a90 	vmov	r0, s15
 8002544:	f7fd ffac 	bl	80004a0 <__aeabi_f2d>
 8002548:	a30f      	add	r3, pc, #60	; (adr r3, 8002588 <ControllerState+0x190>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fe fa71 	bl	8000a34 <__aeabi_dcmplt>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d107      	bne.n	8002568 <ControllerState+0x170>
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <ControllerState+0x1cc>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d103      	bne.n	8002568 <ControllerState+0x170>
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <ControllerState+0x1cc>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <ControllerState+0x17c>
			{
				state = Idle;
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <ControllerState+0x19c>)
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800256e:	e001      	b.n	8002574 <ControllerState+0x17c>
		break;
 8002570:	bf00      	nop
 8002572:	e000      	b.n	8002576 <ControllerState+0x17e>
		break;
 8002574:	bf00      	nop
		}
		Pf_last = Pf;
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <ControllerState+0x1b0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <ControllerState+0x1b4>)
 800257c:	6013      	str	r3, [r2, #0]
	}
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	f3af 8000 	nop.w
 8002588:	33333333 	.word	0x33333333
 800258c:	3fc33333 	.word	0x3fc33333
 8002590:	20000010 	.word	0x20000010
 8002594:	20000234 	.word	0x20000234
 8002598:	20000218 	.word	0x20000218
 800259c:	200000b4 	.word	0x200000b4
 80025a0:	20000200 	.word	0x20000200
 80025a4:	200001ec 	.word	0x200001ec
 80025a8:	200001f0 	.word	0x200001f0
 80025ac:	200001f4 	.word	0x200001f4
 80025b0:	200001d0 	.word	0x200001d0
 80025b4:	200001e4 	.word	0x200001e4
 80025b8:	49742400 	.word	0x49742400
 80025bc:	200001d8 	.word	0x200001d8
 80025c0:	2000021c 	.word	0x2000021c
 80025c4:	20000228 	.word	0x20000228

080025c8 <HAL_GPIO_EXTI_Callback>:
//		MotorDrive(&htim1);
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0)
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d8:	d10e      	bne.n	80025f8 <HAL_GPIO_EXTI_Callback+0x30>
 80025da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025de:	4810      	ldr	r0, [pc, #64]	; (8002620 <HAL_GPIO_EXTI_Callback+0x58>)
 80025e0:	f000 fd1e 	bl	8003020 <HAL_GPIO_ReadPin>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_GPIO_EXTI_Callback+0x30>
	{
		emer_pushed = 0;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_GPIO_EXTI_Callback+0x5c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_GPIO_EXTI_Callback+0x60>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2200      	movs	r2, #0
 80025f6:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1)
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fe:	d10a      	bne.n	8002616 <HAL_GPIO_EXTI_Callback+0x4e>
 8002600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002604:	4806      	ldr	r0, [pc, #24]	; (8002620 <HAL_GPIO_EXTI_Callback+0x58>)
 8002606:	f000 fd0b 	bl	8003020 <HAL_GPIO_ReadPin>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d102      	bne.n	8002616 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		emer_pushed = 1;
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
	}
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40020400 	.word	0x40020400
 8002624:	20000011 	.word	0x20000011
 8002628:	200000b4 	.word	0x200000b4

0800262c <check_pe>:

void check_pe(){
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
	// Photoelectric Sensor
	if(emer_pushed == 1){
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <check_pe+0x44>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d118      	bne.n	800266a <check_pe+0x3e>
		pe1_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8002638:	2102      	movs	r1, #2
 800263a:	480e      	ldr	r0, [pc, #56]	; (8002674 <check_pe+0x48>)
 800263c:	f000 fcf0 	bl	8003020 <HAL_GPIO_ReadPin>
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <check_pe+0x4c>)
 8002646:	701a      	strb	r2, [r3, #0]
		pe2_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8002648:	2104      	movs	r1, #4
 800264a:	480a      	ldr	r0, [pc, #40]	; (8002674 <check_pe+0x48>)
 800264c:	f000 fce8 	bl	8003020 <HAL_GPIO_ReadPin>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <check_pe+0x50>)
 8002656:	701a      	strb	r2, [r3, #0]
		pe3_st = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8002658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800265c:	4808      	ldr	r0, [pc, #32]	; (8002680 <check_pe+0x54>)
 800265e:	f000 fcdf 	bl	8003020 <HAL_GPIO_ReadPin>
 8002662:	4603      	mov	r3, r0
 8002664:	461a      	mov	r2, r3
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <check_pe+0x58>)
 8002668:	701a      	strb	r2, [r3, #0]
	}
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000011 	.word	0x20000011
 8002674:	40020400 	.word	0x40020400
 8002678:	2000022a 	.word	0x2000022a
 800267c:	2000022b 	.word	0x2000022b
 8002680:	40020000 	.word	0x40020000
 8002684:	2000022c 	.word	0x2000022c

08002688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800268c:	b672      	cpsid	i
}
 800268e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002690:	e7fe      	b.n	8002690 <Error_Handler+0x8>
	...

08002694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_MspInit+0x4c>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	4a0f      	ldr	r2, [pc, #60]	; (80026e0 <HAL_MspInit+0x4c>)
 80026a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a8:	6453      	str	r3, [r2, #68]	; 0x44
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <HAL_MspInit+0x4c>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_MspInit+0x4c>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <HAL_MspInit+0x4c>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_MspInit+0x4c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026d2:	2007      	movs	r0, #7
 80026d4:	f000 fade 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800

080026e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a18      	ldr	r2, [pc, #96]	; (8002754 <HAL_TIM_Base_MspInit+0x70>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_TIM_Base_MspInit+0x74>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a16      	ldr	r2, [pc, #88]	; (8002758 <HAL_TIM_Base_MspInit+0x74>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_TIM_Base_MspInit+0x74>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002712:	e01a      	b.n	800274a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a10      	ldr	r2, [pc, #64]	; (800275c <HAL_TIM_Base_MspInit+0x78>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d115      	bne.n	800274a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_TIM_Base_MspInit+0x74>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <HAL_TIM_Base_MspInit+0x74>)
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_TIM_Base_MspInit+0x74>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	2032      	movs	r0, #50	; 0x32
 8002740:	f000 fab3 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002744:	2032      	movs	r0, #50	; 0x32
 8002746:	f000 facc 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40010000 	.word	0x40010000
 8002758:	40023800 	.word	0x40023800
 800275c:	40000c00 	.word	0x40000c00

08002760 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <HAL_TIM_Encoder_MspInit+0x94>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d133      	bne.n	80027ea <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a1b      	ldr	r2, [pc, #108]	; (80027f8 <HAL_TIM_Encoder_MspInit+0x98>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_TIM_Encoder_MspInit+0x98>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <HAL_TIM_Encoder_MspInit+0x98>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_TIM_Encoder_MspInit+0x98>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027ba:	23c0      	movs	r3, #192	; 0xc0
 80027bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027ca:	2302      	movs	r3, #2
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	4619      	mov	r1, r3
 80027d4:	4809      	ldr	r0, [pc, #36]	; (80027fc <HAL_TIM_Encoder_MspInit+0x9c>)
 80027d6:	f000 fa9f 	bl	8002d18 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	201d      	movs	r0, #29
 80027e0:	f000 fa63 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027e4:	201d      	movs	r0, #29
 80027e6:	f000 fa7c 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027ea:	bf00      	nop
 80027ec:	3728      	adds	r7, #40	; 0x28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40000400 	.word	0x40000400
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020000 	.word	0x40020000

08002800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 030c 	add.w	r3, r7, #12
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_TIM_MspPostInit+0x68>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d11e      	bne.n	8002860 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_TIM_MspPostInit+0x6c>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a10      	ldr	r2, [pc, #64]	; (800286c <HAL_TIM_MspPostInit+0x6c>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <HAL_TIM_MspPostInit+0x6c>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800283e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002842:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002850:	2301      	movs	r3, #1
 8002852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002854:	f107 030c 	add.w	r3, r7, #12
 8002858:	4619      	mov	r1, r3
 800285a:	4805      	ldr	r0, [pc, #20]	; (8002870 <HAL_TIM_MspPostInit+0x70>)
 800285c:	f000 fa5c 	bl	8002d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002860:	bf00      	nop
 8002862:	3720      	adds	r7, #32
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40010000 	.word	0x40010000
 800286c:	40023800 	.word	0x40023800
 8002870:	40020000 	.word	0x40020000

08002874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <HAL_UART_MspInit+0x84>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d12b      	bne.n	80028ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_UART_MspInit+0x88>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <HAL_UART_MspInit+0x88>)
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_UART_MspInit+0x88>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <HAL_UART_MspInit+0x88>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a10      	ldr	r2, [pc, #64]	; (80028fc <HAL_UART_MspInit+0x88>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HAL_UART_MspInit+0x88>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028ce:	230c      	movs	r3, #12
 80028d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028de:	2307      	movs	r3, #7
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	4619      	mov	r1, r3
 80028e8:	4805      	ldr	r0, [pc, #20]	; (8002900 <HAL_UART_MspInit+0x8c>)
 80028ea:	f000 fa15 	bl	8002d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028ee:	bf00      	nop
 80028f0:	3728      	adds	r7, #40	; 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40004400 	.word	0x40004400
 80028fc:	40023800 	.word	0x40023800
 8002900:	40020000 	.word	0x40020000

08002904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002908:	e7fe      	b.n	8002908 <NMI_Handler+0x4>

0800290a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290e:	e7fe      	b.n	800290e <HardFault_Handler+0x4>

08002910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <MemManage_Handler+0x4>

08002916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291a:	e7fe      	b.n	800291a <BusFault_Handler+0x4>

0800291c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <UsageFault_Handler+0x4>

08002922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002950:	f000 f8b0 	bl	8002ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}

08002958 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <TIM3_IRQHandler+0x10>)
 800295e:	f001 fb8b 	bl	8004078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200000fc 	.word	0x200000fc

0800296c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002970:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002974:	f000 fb86 	bl	8003084 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002978:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800297c:	f000 fb82 	bl	8003084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <TIM5_IRQHandler+0x10>)
 800298a:	f001 fb75 	bl	8004078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000144 	.word	0x20000144

08002998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <SystemInit+0x20>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <SystemInit+0x20>)
 80029a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029c0:	480d      	ldr	r0, [pc, #52]	; (80029f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029c2:	490e      	ldr	r1, [pc, #56]	; (80029fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029c4:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c8:	e002      	b.n	80029d0 <LoopCopyDataInit>

080029ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ce:	3304      	adds	r3, #4

080029d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d4:	d3f9      	bcc.n	80029ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d6:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029d8:	4c0b      	ldr	r4, [pc, #44]	; (8002a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029dc:	e001      	b.n	80029e2 <LoopFillZerobss>

080029de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e0:	3204      	adds	r2, #4

080029e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e4:	d3fb      	bcc.n	80029de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029e6:	f7ff ffd7 	bl	8002998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ea:	f002 fc67 	bl	80052bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ee:	f7ff fa19 	bl	8001e24 <main>
  bx  lr    
 80029f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029fc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002a00:	08006218 	.word	0x08006218
  ldr r2, =_sbss
 8002a04:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002a08:	2000023c 	.word	0x2000023c

08002a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <ADC_IRQHandler>
	...

08002a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_Init+0x40>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <HAL_Init+0x40>)
 8002a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_Init+0x40>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <HAL_Init+0x40>)
 8002a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_Init+0x40>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_Init+0x40>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f000 f92b 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f000 f808 	bl	8002a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a44:	f7ff fe26 	bl	8002694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023c00 	.word	0x40023c00

08002a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_InitTick+0x54>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_InitTick+0x58>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4619      	mov	r1, r3
 8002a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f943 	bl	8002cfe <HAL_SYSTICK_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00e      	b.n	8002aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b0f      	cmp	r3, #15
 8002a86:	d80a      	bhi.n	8002a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	f000 f90b 	bl	8002caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a94:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <HAL_InitTick+0x5c>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000014 	.word	0x20000014
 8002aac:	2000001c 	.word	0x2000001c
 8002ab0:	20000018 	.word	0x20000018

08002ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_IncTick+0x20>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_IncTick+0x24>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <HAL_IncTick+0x24>)
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	2000001c 	.word	0x2000001c
 8002ad8:	20000238 	.word	0x20000238

08002adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae0:	4b03      	ldr	r3, [pc, #12]	; (8002af0 <HAL_GetTick+0x14>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000238 	.word	0x20000238

08002af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b10:	4013      	ands	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b26:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	60d3      	str	r3, [r2, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <__NVIC_GetPriorityGrouping+0x18>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 0307 	and.w	r3, r3, #7
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	db0b      	blt.n	8002b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	4907      	ldr	r1, [pc, #28]	; (8002b90 <__NVIC_EnableIRQ+0x38>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2001      	movs	r0, #1
 8002b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000e100 	.word	0xe000e100

08002b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	db0a      	blt.n	8002bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	490c      	ldr	r1, [pc, #48]	; (8002be0 <__NVIC_SetPriority+0x4c>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bbc:	e00a      	b.n	8002bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4908      	ldr	r1, [pc, #32]	; (8002be4 <__NVIC_SetPriority+0x50>)
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	3b04      	subs	r3, #4
 8002bcc:	0112      	lsls	r2, r2, #4
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	761a      	strb	r2, [r3, #24]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000e100 	.word	0xe000e100
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	; 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f1c3 0307 	rsb	r3, r3, #7
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	bf28      	it	cs
 8002c06:	2304      	movcs	r3, #4
 8002c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d902      	bls.n	8002c18 <NVIC_EncodePriority+0x30>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3b03      	subs	r3, #3
 8002c16:	e000      	b.n	8002c1a <NVIC_EncodePriority+0x32>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43d9      	mvns	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	4313      	orrs	r3, r2
         );
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3724      	adds	r7, #36	; 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c60:	d301      	bcc.n	8002c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00f      	b.n	8002c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <SysTick_Config+0x40>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6e:	210f      	movs	r1, #15
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f7ff ff8e 	bl	8002b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <SysTick_Config+0x40>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <SysTick_Config+0x40>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff29 	bl	8002af4 <__NVIC_SetPriorityGrouping>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cbc:	f7ff ff3e 	bl	8002b3c <__NVIC_GetPriorityGrouping>
 8002cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff ff8e 	bl	8002be8 <NVIC_EncodePriority>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff5d 	bl	8002b94 <__NVIC_SetPriority>
}
 8002cda:	bf00      	nop
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff31 	bl	8002b58 <__NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ffa2 	bl	8002c50 <SysTick_Config>
 8002d0c:	4603      	mov	r3, r0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	e159      	b.n	8002fe8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	f040 8148 	bne.w	8002fe2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d005      	beq.n	8002d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d130      	bne.n	8002dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da0:	2201      	movs	r2, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 0201 	and.w	r2, r3, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d017      	beq.n	8002e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d123      	bne.n	8002e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	69b9      	ldr	r1, [r7, #24]
 8002e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0203 	and.w	r2, r3, #3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80a2 	beq.w	8002fe2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	4b57      	ldr	r3, [pc, #348]	; (8003000 <HAL_GPIO_Init+0x2e8>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	4a56      	ldr	r2, [pc, #344]	; (8003000 <HAL_GPIO_Init+0x2e8>)
 8002ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eac:	6453      	str	r3, [r2, #68]	; 0x44
 8002eae:	4b54      	ldr	r3, [pc, #336]	; (8003000 <HAL_GPIO_Init+0x2e8>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eba:	4a52      	ldr	r2, [pc, #328]	; (8003004 <HAL_GPIO_Init+0x2ec>)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a49      	ldr	r2, [pc, #292]	; (8003008 <HAL_GPIO_Init+0x2f0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d019      	beq.n	8002f1a <HAL_GPIO_Init+0x202>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a48      	ldr	r2, [pc, #288]	; (800300c <HAL_GPIO_Init+0x2f4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_GPIO_Init+0x1fe>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a47      	ldr	r2, [pc, #284]	; (8003010 <HAL_GPIO_Init+0x2f8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00d      	beq.n	8002f12 <HAL_GPIO_Init+0x1fa>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a46      	ldr	r2, [pc, #280]	; (8003014 <HAL_GPIO_Init+0x2fc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <HAL_GPIO_Init+0x1f6>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a45      	ldr	r2, [pc, #276]	; (8003018 <HAL_GPIO_Init+0x300>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d101      	bne.n	8002f0a <HAL_GPIO_Init+0x1f2>
 8002f06:	2304      	movs	r3, #4
 8002f08:	e008      	b.n	8002f1c <HAL_GPIO_Init+0x204>
 8002f0a:	2307      	movs	r3, #7
 8002f0c:	e006      	b.n	8002f1c <HAL_GPIO_Init+0x204>
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e004      	b.n	8002f1c <HAL_GPIO_Init+0x204>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e002      	b.n	8002f1c <HAL_GPIO_Init+0x204>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_GPIO_Init+0x204>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	f002 0203 	and.w	r2, r2, #3
 8002f22:	0092      	lsls	r2, r2, #2
 8002f24:	4093      	lsls	r3, r2
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f2c:	4935      	ldr	r1, [pc, #212]	; (8003004 <HAL_GPIO_Init+0x2ec>)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	3302      	adds	r3, #2
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f3a:	4b38      	ldr	r3, [pc, #224]	; (800301c <HAL_GPIO_Init+0x304>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f5e:	4a2f      	ldr	r2, [pc, #188]	; (800301c <HAL_GPIO_Init+0x304>)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f64:	4b2d      	ldr	r3, [pc, #180]	; (800301c <HAL_GPIO_Init+0x304>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f88:	4a24      	ldr	r2, [pc, #144]	; (800301c <HAL_GPIO_Init+0x304>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f8e:	4b23      	ldr	r3, [pc, #140]	; (800301c <HAL_GPIO_Init+0x304>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb2:	4a1a      	ldr	r2, [pc, #104]	; (800301c <HAL_GPIO_Init+0x304>)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb8:	4b18      	ldr	r3, [pc, #96]	; (800301c <HAL_GPIO_Init+0x304>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fdc:	4a0f      	ldr	r2, [pc, #60]	; (800301c <HAL_GPIO_Init+0x304>)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b0f      	cmp	r3, #15
 8002fec:	f67f aea2 	bls.w	8002d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3724      	adds	r7, #36	; 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800
 8003004:	40013800 	.word	0x40013800
 8003008:	40020000 	.word	0x40020000
 800300c:	40020400 	.word	0x40020400
 8003010:	40020800 	.word	0x40020800
 8003014:	40020c00 	.word	0x40020c00
 8003018:	40021000 	.word	0x40021000
 800301c:	40013c00 	.word	0x40013c00

08003020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	887b      	ldrh	r3, [r7, #2]
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e001      	b.n	8003042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800306c:	e003      	b.n	8003076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	619a      	str	r2, [r3, #24]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800309a:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fa90 	bl	80025c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40013c00 	.word	0x40013c00

080030b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e267      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d075      	beq.n	80031be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d2:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d00c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030de:	4b85      	ldr	r3, [pc, #532]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d112      	bne.n	8003110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ea:	4b82      	ldr	r3, [pc, #520]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f6:	d10b      	bne.n	8003110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	4b7e      	ldr	r3, [pc, #504]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d05b      	beq.n	80031bc <HAL_RCC_OscConfig+0x108>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d157      	bne.n	80031bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e242      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003118:	d106      	bne.n	8003128 <HAL_RCC_OscConfig+0x74>
 800311a:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a75      	ldr	r2, [pc, #468]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e01d      	b.n	8003164 <HAL_RCC_OscConfig+0xb0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x98>
 8003132:	4b70      	ldr	r3, [pc, #448]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a6f      	ldr	r2, [pc, #444]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6c      	ldr	r2, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0xb0>
 800314c:	4b69      	ldr	r3, [pc, #420]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a68      	ldr	r2, [pc, #416]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4b66      	ldr	r3, [pc, #408]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a65      	ldr	r2, [pc, #404]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800315e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7ff fcb6 	bl	8002adc <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003174:	f7ff fcb2 	bl	8002adc <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e207      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b5b      	ldr	r3, [pc, #364]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0xc0>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7ff fca2 	bl	8002adc <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800319c:	f7ff fc9e 	bl	8002adc <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1f3      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	4b51      	ldr	r3, [pc, #324]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0xe8>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d063      	beq.n	8003292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ca:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d11c      	bne.n	800321c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e2:	4b44      	ldr	r3, [pc, #272]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d116      	bne.n	800321c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x152>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e1c7      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4937      	ldr	r1, [pc, #220]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	e03a      	b.n	8003292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003224:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <HAL_RCC_OscConfig+0x244>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7ff fc57 	bl	8002adc <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003232:	f7ff fc53 	bl	8002adc <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1a8      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4925      	ldr	r1, [pc, #148]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCC_OscConfig+0x244>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7ff fc36 	bl	8002adc <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003274:	f7ff fc32 	bl	8002adc <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e187      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d036      	beq.n	800330c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <HAL_RCC_OscConfig+0x248>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ac:	f7ff fc16 	bl	8002adc <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b4:	f7ff fc12 	bl	8002adc <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e167      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x200>
 80032d2:	e01b      	b.n	800330c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_RCC_OscConfig+0x248>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7ff fbff 	bl	8002adc <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	e00e      	b.n	8003300 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e2:	f7ff fbfb 	bl	8002adc <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d907      	bls.n	8003300 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e150      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
 80032f4:	40023800 	.word	0x40023800
 80032f8:	42470000 	.word	0x42470000
 80032fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ea      	bne.n	80032e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8097 	beq.w	8003448 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331e:	4b81      	ldr	r3, [pc, #516]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10f      	bne.n	800334a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	4b7d      	ldr	r3, [pc, #500]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a7c      	ldr	r2, [pc, #496]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003346:	2301      	movs	r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334a:	4b77      	ldr	r3, [pc, #476]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d118      	bne.n	8003388 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003356:	4b74      	ldr	r3, [pc, #464]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a73      	ldr	r2, [pc, #460]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003362:	f7ff fbbb 	bl	8002adc <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336a:	f7ff fbb7 	bl	8002adc <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e10c      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x2ea>
 8003390:	4b64      	ldr	r3, [pc, #400]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a63      	ldr	r2, [pc, #396]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	e01c      	b.n	80033d8 <HAL_RCC_OscConfig+0x324>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x30c>
 80033a6:	4b5f      	ldr	r3, [pc, #380]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a5e      	ldr	r2, [pc, #376]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033ac:	f043 0304 	orr.w	r3, r3, #4
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
 80033b2:	4b5c      	ldr	r3, [pc, #368]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a5b      	ldr	r2, [pc, #364]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0x324>
 80033c0:	4b58      	ldr	r3, [pc, #352]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	4a57      	ldr	r2, [pc, #348]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	6713      	str	r3, [r2, #112]	; 0x70
 80033cc:	4b55      	ldr	r3, [pc, #340]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	4a54      	ldr	r2, [pc, #336]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033d2:	f023 0304 	bic.w	r3, r3, #4
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d015      	beq.n	800340c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7ff fb7c 	bl	8002adc <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7ff fb78 	bl	8002adc <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0cb      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fe:	4b49      	ldr	r3, [pc, #292]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ee      	beq.n	80033e8 <HAL_RCC_OscConfig+0x334>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340c:	f7ff fb66 	bl	8002adc <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7ff fb62 	bl	8002adc <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0b5      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342a:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ee      	bne.n	8003414 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343c:	4b39      	ldr	r3, [pc, #228]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	4a38      	ldr	r2, [pc, #224]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80a1 	beq.w	8003594 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003452:	4b34      	ldr	r3, [pc, #208]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b08      	cmp	r3, #8
 800345c:	d05c      	beq.n	8003518 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d141      	bne.n	80034ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b31      	ldr	r3, [pc, #196]	; (800352c <HAL_RCC_OscConfig+0x478>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7ff fb36 	bl	8002adc <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7ff fb32 	bl	8002adc <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e087      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	3b01      	subs	r3, #1
 80034ac:	041b      	lsls	r3, r3, #16
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	061b      	lsls	r3, r3, #24
 80034b6:	491b      	ldr	r1, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x478>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7ff fb0b 	bl	8002adc <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ca:	f7ff fb07 	bl	8002adc <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e05c      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x416>
 80034e8:	e054      	b.n	8003594 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <HAL_RCC_OscConfig+0x478>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7ff faf4 	bl	8002adc <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7ff faf0 	bl	8002adc <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e045      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x444>
 8003516:	e03d      	b.n	8003594 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e038      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000
 800352c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003530:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x4ec>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d028      	beq.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d121      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d11a      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003568:	4293      	cmp	r3, r2
 800356a:	d111      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	3b01      	subs	r3, #1
 800357a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800

080035a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0cc      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b8:	4b68      	ldr	r3, [pc, #416]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d90c      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b65      	ldr	r3, [pc, #404]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b63      	ldr	r3, [pc, #396]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0b8      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d020      	beq.n	800362e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f8:	4b59      	ldr	r3, [pc, #356]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a58      	ldr	r2, [pc, #352]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003610:	4b53      	ldr	r3, [pc, #332]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a52      	ldr	r2, [pc, #328]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800361c:	4b50      	ldr	r3, [pc, #320]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	494d      	ldr	r1, [pc, #308]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d044      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d119      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e07f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d003      	beq.n	8003662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365e:	2b03      	cmp	r3, #3
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e067      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4934      	ldr	r1, [pc, #208]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003694:	f7ff fa22 	bl	8002adc <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369c:	f7ff fa1e 	bl	8002adc <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e04f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 020c 	and.w	r2, r3, #12
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d1eb      	bne.n	800369c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d20c      	bcs.n	80036ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e032      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4916      	ldr	r1, [pc, #88]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	490e      	ldr	r1, [pc, #56]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800372a:	f000 f821 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 800372e:	4602      	mov	r2, r0
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	490a      	ldr	r1, [pc, #40]	; (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	5ccb      	ldrb	r3, [r1, r3]
 800373e:	fa22 f303 	lsr.w	r3, r2, r3
 8003742:	4a09      	ldr	r2, [pc, #36]	; (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff f982 	bl	8002a54 <HAL_InitTick>

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40023c00 	.word	0x40023c00
 8003760:	40023800 	.word	0x40023800
 8003764:	080061c0 	.word	0x080061c0
 8003768:	20000014 	.word	0x20000014
 800376c:	20000018 	.word	0x20000018

08003770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003774:	b094      	sub	sp, #80	; 0x50
 8003776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	647b      	str	r3, [r7, #68]	; 0x44
 800377c:	2300      	movs	r3, #0
 800377e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003780:	2300      	movs	r3, #0
 8003782:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003788:	4b79      	ldr	r3, [pc, #484]	; (8003970 <HAL_RCC_GetSysClockFreq+0x200>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d00d      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003794:	2b08      	cmp	r3, #8
 8003796:	f200 80e1 	bhi.w	800395c <HAL_RCC_GetSysClockFreq+0x1ec>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x34>
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0x3a>
 80037a2:	e0db      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a4:	4b73      	ldr	r3, [pc, #460]	; (8003974 <HAL_RCC_GetSysClockFreq+0x204>)
 80037a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037a8:	e0db      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037aa:	4b73      	ldr	r3, [pc, #460]	; (8003978 <HAL_RCC_GetSysClockFreq+0x208>)
 80037ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ae:	e0d8      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b0:	4b6f      	ldr	r3, [pc, #444]	; (8003970 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ba:	4b6d      	ldr	r3, [pc, #436]	; (8003970 <HAL_RCC_GetSysClockFreq+0x200>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d063      	beq.n	800388e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c6:	4b6a      	ldr	r3, [pc, #424]	; (8003970 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	2200      	movs	r2, #0
 80037ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80037d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d8:	633b      	str	r3, [r7, #48]	; 0x30
 80037da:	2300      	movs	r3, #0
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
 80037de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037e2:	4622      	mov	r2, r4
 80037e4:	462b      	mov	r3, r5
 80037e6:	f04f 0000 	mov.w	r0, #0
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	0159      	lsls	r1, r3, #5
 80037f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f4:	0150      	lsls	r0, r2, #5
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4621      	mov	r1, r4
 80037fc:	1a51      	subs	r1, r2, r1
 80037fe:	6139      	str	r1, [r7, #16]
 8003800:	4629      	mov	r1, r5
 8003802:	eb63 0301 	sbc.w	r3, r3, r1
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003814:	4659      	mov	r1, fp
 8003816:	018b      	lsls	r3, r1, #6
 8003818:	4651      	mov	r1, sl
 800381a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800381e:	4651      	mov	r1, sl
 8003820:	018a      	lsls	r2, r1, #6
 8003822:	4651      	mov	r1, sl
 8003824:	ebb2 0801 	subs.w	r8, r2, r1
 8003828:	4659      	mov	r1, fp
 800382a:	eb63 0901 	sbc.w	r9, r3, r1
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800383a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800383e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003842:	4690      	mov	r8, r2
 8003844:	4699      	mov	r9, r3
 8003846:	4623      	mov	r3, r4
 8003848:	eb18 0303 	adds.w	r3, r8, r3
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	462b      	mov	r3, r5
 8003850:	eb49 0303 	adc.w	r3, r9, r3
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003862:	4629      	mov	r1, r5
 8003864:	024b      	lsls	r3, r1, #9
 8003866:	4621      	mov	r1, r4
 8003868:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800386c:	4621      	mov	r1, r4
 800386e:	024a      	lsls	r2, r1, #9
 8003870:	4610      	mov	r0, r2
 8003872:	4619      	mov	r1, r3
 8003874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003876:	2200      	movs	r2, #0
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
 800387a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800387c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003880:	f7fd fa74 	bl	8000d6c <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4613      	mov	r3, r2
 800388a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800388c:	e058      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388e:	4b38      	ldr	r3, [pc, #224]	; (8003970 <HAL_RCC_GetSysClockFreq+0x200>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	2200      	movs	r2, #0
 8003896:	4618      	mov	r0, r3
 8003898:	4611      	mov	r1, r2
 800389a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800389e:	623b      	str	r3, [r7, #32]
 80038a0:	2300      	movs	r3, #0
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
 80038a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038a8:	4642      	mov	r2, r8
 80038aa:	464b      	mov	r3, r9
 80038ac:	f04f 0000 	mov.w	r0, #0
 80038b0:	f04f 0100 	mov.w	r1, #0
 80038b4:	0159      	lsls	r1, r3, #5
 80038b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ba:	0150      	lsls	r0, r2, #5
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4641      	mov	r1, r8
 80038c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038c6:	4649      	mov	r1, r9
 80038c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038e0:	ebb2 040a 	subs.w	r4, r2, sl
 80038e4:	eb63 050b 	sbc.w	r5, r3, fp
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	00eb      	lsls	r3, r5, #3
 80038f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f6:	00e2      	lsls	r2, r4, #3
 80038f8:	4614      	mov	r4, r2
 80038fa:	461d      	mov	r5, r3
 80038fc:	4643      	mov	r3, r8
 80038fe:	18e3      	adds	r3, r4, r3
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	464b      	mov	r3, r9
 8003904:	eb45 0303 	adc.w	r3, r5, r3
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003916:	4629      	mov	r1, r5
 8003918:	028b      	lsls	r3, r1, #10
 800391a:	4621      	mov	r1, r4
 800391c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003920:	4621      	mov	r1, r4
 8003922:	028a      	lsls	r2, r1, #10
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800392a:	2200      	movs	r2, #0
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	61fa      	str	r2, [r7, #28]
 8003930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003934:	f7fd fa1a 	bl	8000d6c <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4613      	mov	r3, r2
 800393e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_GetSysClockFreq+0x200>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800395a:	e002      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetSysClockFreq+0x204>)
 800395e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003964:	4618      	mov	r0, r3
 8003966:	3750      	adds	r7, #80	; 0x50
 8003968:	46bd      	mov	sp, r7
 800396a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	00f42400 	.word	0x00f42400
 8003978:	007a1200 	.word	0x007a1200

0800397c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_RCC_GetHCLKFreq+0x14>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000014 	.word	0x20000014

08003994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003998:	f7ff fff0 	bl	800397c <HAL_RCC_GetHCLKFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	0a9b      	lsrs	r3, r3, #10
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	4903      	ldr	r1, [pc, #12]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40023800 	.word	0x40023800
 80039b8:	080061d0 	.word	0x080061d0

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039c0:	f7ff ffdc 	bl	800397c <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	0b5b      	lsrs	r3, r3, #13
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4903      	ldr	r1, [pc, #12]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d8:	4618      	mov	r0, r3
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40023800 	.word	0x40023800
 80039e0:	080061d0 	.word	0x080061d0

080039e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e041      	b.n	8003a7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fe fe6a 	bl	80026e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f000 fde2 	bl	80045ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d001      	beq.n	8003a9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e03c      	b.n	8003b16 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1e      	ldr	r2, [pc, #120]	; (8003b24 <HAL_TIM_Base_Start+0xa0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d018      	beq.n	8003ae0 <HAL_TIM_Base_Start+0x5c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab6:	d013      	beq.n	8003ae0 <HAL_TIM_Base_Start+0x5c>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1a      	ldr	r2, [pc, #104]	; (8003b28 <HAL_TIM_Base_Start+0xa4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_TIM_Base_Start+0x5c>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a19      	ldr	r2, [pc, #100]	; (8003b2c <HAL_TIM_Base_Start+0xa8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_TIM_Base_Start+0x5c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <HAL_TIM_Base_Start+0xac>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_TIM_Base_Start+0x5c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <HAL_TIM_Base_Start+0xb0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d111      	bne.n	8003b04 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d010      	beq.n	8003b14 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b02:	e007      	b.n	8003b14 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800
 8003b30:	40000c00 	.word	0x40000c00
 8003b34:	40014000 	.word	0x40014000

08003b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d001      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e044      	b.n	8003bda <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d018      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7a:	d013      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1a      	ldr	r2, [pc, #104]	; (8003bec <HAL_TIM_Base_Start_IT+0xb4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00e      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a16      	ldr	r2, [pc, #88]	; (8003bf8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d111      	bne.n	8003bc8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b06      	cmp	r3, #6
 8003bb4:	d010      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0201 	orr.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc6:	e007      	b.n	8003bd8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40000800 	.word	0x40000800
 8003bf4:	40000c00 	.word	0x40000c00
 8003bf8:	40014000 	.word	0x40014000

08003bfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e041      	b.n	8003c92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f839 	bl	8003c9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f000 fcd6 	bl	80045ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d109      	bne.n	8003cd4 <HAL_TIM_PWM_Start+0x24>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e022      	b.n	8003d1a <HAL_TIM_PWM_Start+0x6a>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d109      	bne.n	8003cee <HAL_TIM_PWM_Start+0x3e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	bf14      	ite	ne
 8003ce6:	2301      	movne	r3, #1
 8003ce8:	2300      	moveq	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	e015      	b.n	8003d1a <HAL_TIM_PWM_Start+0x6a>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d109      	bne.n	8003d08 <HAL_TIM_PWM_Start+0x58>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	bf14      	ite	ne
 8003d00:	2301      	movne	r3, #1
 8003d02:	2300      	moveq	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e008      	b.n	8003d1a <HAL_TIM_PWM_Start+0x6a>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e068      	b.n	8003df4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_PWM_Start+0x82>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d30:	e013      	b.n	8003d5a <HAL_TIM_PWM_Start+0xaa>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_PWM_Start+0x92>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d40:	e00b      	b.n	8003d5a <HAL_TIM_PWM_Start+0xaa>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d104      	bne.n	8003d52 <HAL_TIM_PWM_Start+0xa2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d50:	e003      	b.n	8003d5a <HAL_TIM_PWM_Start+0xaa>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2202      	movs	r2, #2
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fee8 	bl	8004b38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a23      	ldr	r2, [pc, #140]	; (8003dfc <HAL_TIM_PWM_Start+0x14c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d107      	bne.n	8003d82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <HAL_TIM_PWM_Start+0x14c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d018      	beq.n	8003dbe <HAL_TIM_PWM_Start+0x10e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d94:	d013      	beq.n	8003dbe <HAL_TIM_PWM_Start+0x10e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_TIM_PWM_Start+0x150>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00e      	beq.n	8003dbe <HAL_TIM_PWM_Start+0x10e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a17      	ldr	r2, [pc, #92]	; (8003e04 <HAL_TIM_PWM_Start+0x154>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d009      	beq.n	8003dbe <HAL_TIM_PWM_Start+0x10e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <HAL_TIM_PWM_Start+0x158>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d004      	beq.n	8003dbe <HAL_TIM_PWM_Start+0x10e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a14      	ldr	r2, [pc, #80]	; (8003e0c <HAL_TIM_PWM_Start+0x15c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d111      	bne.n	8003de2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b06      	cmp	r3, #6
 8003dce:	d010      	beq.n	8003df2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de0:	e007      	b.n	8003df2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800
 8003e08:	40000c00 	.word	0x40000c00
 8003e0c:	40014000 	.word	0x40014000

08003e10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e097      	b.n	8003f54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7fe fc91 	bl	8002760 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2202      	movs	r2, #2
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e54:	f023 0307 	bic.w	r3, r3, #7
 8003e58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f000 fbc1 	bl	80045ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003eb0:	f023 030c 	bic.w	r3, r3, #12
 8003eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	011a      	lsls	r2, r3, #4
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	031b      	lsls	r3, r3, #12
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003eee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	4313      	orrs	r3, r2
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d110      	bne.n	8003fae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d102      	bne.n	8003f98 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f92:	7b7b      	ldrb	r3, [r7, #13]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d001      	beq.n	8003f9c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e069      	b.n	8004070 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fac:	e031      	b.n	8004012 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d110      	bne.n	8003fd6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fb4:	7bbb      	ldrb	r3, [r7, #14]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d102      	bne.n	8003fc0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fba:	7b3b      	ldrb	r3, [r7, #12]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d001      	beq.n	8003fc4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e055      	b.n	8004070 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd4:	e01d      	b.n	8004012 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d108      	bne.n	8003fee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fdc:	7bbb      	ldrb	r3, [r7, #14]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fe2:	7b7b      	ldrb	r3, [r7, #13]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d102      	bne.n	8003fee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fe8:	7b3b      	ldrb	r3, [r7, #12]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d001      	beq.n	8003ff2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e03e      	b.n	8004070 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2202      	movs	r2, #2
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_TIM_Encoder_Start+0xc4>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b04      	cmp	r3, #4
 800401c:	d008      	beq.n	8004030 <HAL_TIM_Encoder_Start+0xd4>
 800401e:	e00f      	b.n	8004040 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2201      	movs	r2, #1
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fd85 	bl	8004b38 <TIM_CCxChannelCmd>
      break;
 800402e:	e016      	b.n	800405e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2201      	movs	r2, #1
 8004036:	2104      	movs	r1, #4
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fd7d 	bl	8004b38 <TIM_CCxChannelCmd>
      break;
 800403e:	e00e      	b.n	800405e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2201      	movs	r2, #1
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fd75 	bl	8004b38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2201      	movs	r2, #1
 8004054:	2104      	movs	r1, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fd6e 	bl	8004b38 <TIM_CCxChannelCmd>
      break;
 800405c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b02      	cmp	r3, #2
 800408c:	d122      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b02      	cmp	r3, #2
 800409a:	d11b      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0202 	mvn.w	r2, #2
 80040a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fa77 	bl	80045ae <HAL_TIM_IC_CaptureCallback>
 80040c0:	e005      	b.n	80040ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fa69 	bl	800459a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fa7a 	bl	80045c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d122      	bne.n	8004128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d11b      	bne.n	8004128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0204 	mvn.w	r2, #4
 80040f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2202      	movs	r2, #2
 80040fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fa4d 	bl	80045ae <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fa3f 	bl	800459a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fa50 	bl	80045c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b08      	cmp	r3, #8
 8004134:	d122      	bne.n	800417c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b08      	cmp	r3, #8
 8004142:	d11b      	bne.n	800417c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0208 	mvn.w	r2, #8
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2204      	movs	r2, #4
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fa23 	bl	80045ae <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fa15 	bl	800459a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fa26 	bl	80045c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b10      	cmp	r3, #16
 8004188:	d122      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b10      	cmp	r3, #16
 8004196:	d11b      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0210 	mvn.w	r2, #16
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2208      	movs	r2, #8
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f9f9 	bl	80045ae <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f9eb 	bl	800459a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f9fc 	bl	80045c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d10e      	bne.n	80041fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d107      	bne.n	80041fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0201 	mvn.w	r2, #1
 80041f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fe f8d4 	bl	80023a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b80      	cmp	r3, #128	; 0x80
 8004208:	d10e      	bne.n	8004228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d107      	bne.n	8004228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fd78 	bl	8004d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d10e      	bne.n	8004254 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d107      	bne.n	8004254 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f9c1 	bl	80045d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b20      	cmp	r3, #32
 8004260:	d10e      	bne.n	8004280 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b20      	cmp	r3, #32
 800426e:	d107      	bne.n	8004280 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0220 	mvn.w	r2, #32
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fd42 	bl	8004d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e0ae      	b.n	8004404 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	f200 809f 	bhi.w	80043f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	080043f5 	.word	0x080043f5
 80042c4:	080043f5 	.word	0x080043f5
 80042c8:	080043f5 	.word	0x080043f5
 80042cc:	08004331 	.word	0x08004331
 80042d0:	080043f5 	.word	0x080043f5
 80042d4:	080043f5 	.word	0x080043f5
 80042d8:	080043f5 	.word	0x080043f5
 80042dc:	08004373 	.word	0x08004373
 80042e0:	080043f5 	.word	0x080043f5
 80042e4:	080043f5 	.word	0x080043f5
 80042e8:	080043f5 	.word	0x080043f5
 80042ec:	080043b3 	.word	0x080043b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f9f8 	bl	80046ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0208 	orr.w	r2, r2, #8
 800430a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0204 	bic.w	r2, r2, #4
 800431a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6999      	ldr	r1, [r3, #24]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	619a      	str	r2, [r3, #24]
      break;
 800432e:	e064      	b.n	80043fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fa3e 	bl	80047b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800434a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6999      	ldr	r1, [r3, #24]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	021a      	lsls	r2, r3, #8
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	619a      	str	r2, [r3, #24]
      break;
 8004370:	e043      	b.n	80043fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fa89 	bl	8004890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0208 	orr.w	r2, r2, #8
 800438c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69da      	ldr	r2, [r3, #28]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0204 	bic.w	r2, r2, #4
 800439c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69d9      	ldr	r1, [r3, #28]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	61da      	str	r2, [r3, #28]
      break;
 80043b0:	e023      	b.n	80043fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fad3 	bl	8004964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69da      	ldr	r2, [r3, #28]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69d9      	ldr	r1, [r3, #28]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	021a      	lsls	r2, r3, #8
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	61da      	str	r2, [r3, #28]
      break;
 80043f2:	e002      	b.n	80043fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	75fb      	strb	r3, [r7, #23]
      break;
 80043f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004402:	7dfb      	ldrb	r3, [r7, #23]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_TIM_ConfigClockSource+0x1c>
 8004424:	2302      	movs	r3, #2
 8004426:	e0b4      	b.n	8004592 <HAL_TIM_ConfigClockSource+0x186>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800444e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004460:	d03e      	beq.n	80044e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004466:	f200 8087 	bhi.w	8004578 <HAL_TIM_ConfigClockSource+0x16c>
 800446a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446e:	f000 8086 	beq.w	800457e <HAL_TIM_ConfigClockSource+0x172>
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004476:	d87f      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x16c>
 8004478:	2b70      	cmp	r3, #112	; 0x70
 800447a:	d01a      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0xa6>
 800447c:	2b70      	cmp	r3, #112	; 0x70
 800447e:	d87b      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x16c>
 8004480:	2b60      	cmp	r3, #96	; 0x60
 8004482:	d050      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x11a>
 8004484:	2b60      	cmp	r3, #96	; 0x60
 8004486:	d877      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x16c>
 8004488:	2b50      	cmp	r3, #80	; 0x50
 800448a:	d03c      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0xfa>
 800448c:	2b50      	cmp	r3, #80	; 0x50
 800448e:	d873      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d058      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x13a>
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d86f      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x16c>
 8004498:	2b30      	cmp	r3, #48	; 0x30
 800449a:	d064      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x15a>
 800449c:	2b30      	cmp	r3, #48	; 0x30
 800449e:	d86b      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x16c>
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d060      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x15a>
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d867      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x16c>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d05c      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x15a>
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d05a      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x15a>
 80044b0:	e062      	b.n	8004578 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6899      	ldr	r1, [r3, #8]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f000 fb19 	bl	8004af8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	609a      	str	r2, [r3, #8]
      break;
 80044de:	e04f      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	6899      	ldr	r1, [r3, #8]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f000 fb02 	bl	8004af8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004502:	609a      	str	r2, [r3, #8]
      break;
 8004504:	e03c      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6859      	ldr	r1, [r3, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	461a      	mov	r2, r3
 8004514:	f000 fa76 	bl	8004a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2150      	movs	r1, #80	; 0x50
 800451e:	4618      	mov	r0, r3
 8004520:	f000 facf 	bl	8004ac2 <TIM_ITRx_SetConfig>
      break;
 8004524:	e02c      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	461a      	mov	r2, r3
 8004534:	f000 fa95 	bl	8004a62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2160      	movs	r1, #96	; 0x60
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fabf 	bl	8004ac2 <TIM_ITRx_SetConfig>
      break;
 8004544:	e01c      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6859      	ldr	r1, [r3, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	461a      	mov	r2, r3
 8004554:	f000 fa56 	bl	8004a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2140      	movs	r1, #64	; 0x40
 800455e:	4618      	mov	r0, r3
 8004560:	f000 faaf 	bl	8004ac2 <TIM_ITRx_SetConfig>
      break;
 8004564:	e00c      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f000 faa6 	bl	8004ac2 <TIM_ITRx_SetConfig>
      break;
 8004576:	e003      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
      break;
 800457c:	e000      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800457e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a34      	ldr	r2, [pc, #208]	; (80046d0 <TIM_Base_SetConfig+0xe4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00f      	beq.n	8004624 <TIM_Base_SetConfig+0x38>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460a:	d00b      	beq.n	8004624 <TIM_Base_SetConfig+0x38>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a31      	ldr	r2, [pc, #196]	; (80046d4 <TIM_Base_SetConfig+0xe8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d007      	beq.n	8004624 <TIM_Base_SetConfig+0x38>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a30      	ldr	r2, [pc, #192]	; (80046d8 <TIM_Base_SetConfig+0xec>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_Base_SetConfig+0x38>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a2f      	ldr	r2, [pc, #188]	; (80046dc <TIM_Base_SetConfig+0xf0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d108      	bne.n	8004636 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a25      	ldr	r2, [pc, #148]	; (80046d0 <TIM_Base_SetConfig+0xe4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01b      	beq.n	8004676 <TIM_Base_SetConfig+0x8a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004644:	d017      	beq.n	8004676 <TIM_Base_SetConfig+0x8a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a22      	ldr	r2, [pc, #136]	; (80046d4 <TIM_Base_SetConfig+0xe8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <TIM_Base_SetConfig+0x8a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <TIM_Base_SetConfig+0xec>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00f      	beq.n	8004676 <TIM_Base_SetConfig+0x8a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a20      	ldr	r2, [pc, #128]	; (80046dc <TIM_Base_SetConfig+0xf0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00b      	beq.n	8004676 <TIM_Base_SetConfig+0x8a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a1f      	ldr	r2, [pc, #124]	; (80046e0 <TIM_Base_SetConfig+0xf4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d007      	beq.n	8004676 <TIM_Base_SetConfig+0x8a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a1e      	ldr	r2, [pc, #120]	; (80046e4 <TIM_Base_SetConfig+0xf8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d003      	beq.n	8004676 <TIM_Base_SetConfig+0x8a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <TIM_Base_SetConfig+0xfc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d108      	bne.n	8004688 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a08      	ldr	r2, [pc, #32]	; (80046d0 <TIM_Base_SetConfig+0xe4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d103      	bne.n	80046bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	615a      	str	r2, [r3, #20]
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40010000 	.word	0x40010000
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40000800 	.word	0x40000800
 80046dc:	40000c00 	.word	0x40000c00
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400
 80046e8:	40014800 	.word	0x40014800

080046ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f023 0201 	bic.w	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f023 0302 	bic.w	r3, r3, #2
 8004734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <TIM_OC1_SetConfig+0xc8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d10c      	bne.n	8004762 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f023 0308 	bic.w	r3, r3, #8
 800474e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f023 0304 	bic.w	r3, r3, #4
 8004760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a13      	ldr	r2, [pc, #76]	; (80047b4 <TIM_OC1_SetConfig+0xc8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d111      	bne.n	800478e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	621a      	str	r2, [r3, #32]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40010000 	.word	0x40010000

080047b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f023 0210 	bic.w	r2, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f023 0320 	bic.w	r3, r3, #32
 8004802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a1e      	ldr	r2, [pc, #120]	; (800488c <TIM_OC2_SetConfig+0xd4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d10d      	bne.n	8004834 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800481e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004832:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a15      	ldr	r2, [pc, #84]	; (800488c <TIM_OC2_SetConfig+0xd4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d113      	bne.n	8004864 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800484a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000

08004890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0303 	bic.w	r3, r3, #3
 80048c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a1d      	ldr	r2, [pc, #116]	; (8004960 <TIM_OC3_SetConfig+0xd0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d10d      	bne.n	800490a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a14      	ldr	r2, [pc, #80]	; (8004960 <TIM_OC3_SetConfig+0xd0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d113      	bne.n	800493a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	621a      	str	r2, [r3, #32]
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	40010000 	.word	0x40010000

08004964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	031b      	lsls	r3, r3, #12
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a10      	ldr	r2, [pc, #64]	; (8004a00 <TIM_OC4_SetConfig+0x9c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d109      	bne.n	80049d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	019b      	lsls	r3, r3, #6
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	621a      	str	r2, [r3, #32]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40010000 	.word	0x40010000

08004a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f023 0201 	bic.w	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f023 030a 	bic.w	r3, r3, #10
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	621a      	str	r2, [r3, #32]
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b087      	sub	sp, #28
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f023 0210 	bic.w	r2, r3, #16
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	031b      	lsls	r3, r3, #12
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	621a      	str	r2, [r3, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f043 0307 	orr.w	r3, r3, #7
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	609a      	str	r2, [r3, #8]
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	021a      	lsls	r2, r3, #8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	609a      	str	r2, [r3, #8]
}
 8004b2c:	bf00      	nop
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a1a      	ldr	r2, [r3, #32]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a1a      	ldr	r2, [r3, #32]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	431a      	orrs	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	621a      	str	r2, [r3, #32]
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e050      	b.n	8004c3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d018      	beq.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be8:	d013      	beq.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00e      	beq.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a16      	ldr	r2, [pc, #88]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d10c      	bne.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40010000 	.word	0x40010000
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40000c00 	.word	0x40000c00
 8004c5c:	40014000 	.word	0x40014000

08004c60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e03d      	b.n	8004cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e03f      	b.n	8004dbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fd fd8e 	bl	8002874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2224      	movs	r2, #36	; 0x24
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f829 	bl	8004dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695a      	ldr	r2, [r3, #20]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004da4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dcc:	b0c0      	sub	sp, #256	; 0x100
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de4:	68d9      	ldr	r1, [r3, #12]
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	ea40 0301 	orr.w	r3, r0, r1
 8004df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e20:	f021 010c 	bic.w	r1, r1, #12
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e42:	6999      	ldr	r1, [r3, #24]
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	ea40 0301 	orr.w	r3, r0, r1
 8004e4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b8f      	ldr	r3, [pc, #572]	; (8005094 <UART_SetConfig+0x2cc>)
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d005      	beq.n	8004e68 <UART_SetConfig+0xa0>
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b8d      	ldr	r3, [pc, #564]	; (8005098 <UART_SetConfig+0x2d0>)
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d104      	bne.n	8004e72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e68:	f7fe fda8 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 8004e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e70:	e003      	b.n	8004e7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e72:	f7fe fd8f 	bl	8003994 <HAL_RCC_GetPCLK1Freq>
 8004e76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e84:	f040 810c 	bne.w	80050a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e9a:	4622      	mov	r2, r4
 8004e9c:	462b      	mov	r3, r5
 8004e9e:	1891      	adds	r1, r2, r2
 8004ea0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ea2:	415b      	adcs	r3, r3
 8004ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004eaa:	4621      	mov	r1, r4
 8004eac:	eb12 0801 	adds.w	r8, r2, r1
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	eb43 0901 	adc.w	r9, r3, r1
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eca:	4690      	mov	r8, r2
 8004ecc:	4699      	mov	r9, r3
 8004ece:	4623      	mov	r3, r4
 8004ed0:	eb18 0303 	adds.w	r3, r8, r3
 8004ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ed8:	462b      	mov	r3, r5
 8004eda:	eb49 0303 	adc.w	r3, r9, r3
 8004ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004eee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	18db      	adds	r3, r3, r3
 8004efa:	653b      	str	r3, [r7, #80]	; 0x50
 8004efc:	4613      	mov	r3, r2
 8004efe:	eb42 0303 	adc.w	r3, r2, r3
 8004f02:	657b      	str	r3, [r7, #84]	; 0x54
 8004f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f0c:	f7fb ff2e 	bl	8000d6c <__aeabi_uldivmod>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4b61      	ldr	r3, [pc, #388]	; (800509c <UART_SetConfig+0x2d4>)
 8004f16:	fba3 2302 	umull	r2, r3, r3, r2
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	011c      	lsls	r4, r3, #4
 8004f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f30:	4642      	mov	r2, r8
 8004f32:	464b      	mov	r3, r9
 8004f34:	1891      	adds	r1, r2, r2
 8004f36:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f38:	415b      	adcs	r3, r3
 8004f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f40:	4641      	mov	r1, r8
 8004f42:	eb12 0a01 	adds.w	sl, r2, r1
 8004f46:	4649      	mov	r1, r9
 8004f48:	eb43 0b01 	adc.w	fp, r3, r1
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f60:	4692      	mov	sl, r2
 8004f62:	469b      	mov	fp, r3
 8004f64:	4643      	mov	r3, r8
 8004f66:	eb1a 0303 	adds.w	r3, sl, r3
 8004f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f6e:	464b      	mov	r3, r9
 8004f70:	eb4b 0303 	adc.w	r3, fp, r3
 8004f74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	18db      	adds	r3, r3, r3
 8004f90:	643b      	str	r3, [r7, #64]	; 0x40
 8004f92:	4613      	mov	r3, r2
 8004f94:	eb42 0303 	adc.w	r3, r2, r3
 8004f98:	647b      	str	r3, [r7, #68]	; 0x44
 8004f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004fa2:	f7fb fee3 	bl	8000d6c <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	4b3b      	ldr	r3, [pc, #236]	; (800509c <UART_SetConfig+0x2d4>)
 8004fae:	fba3 2301 	umull	r2, r3, r3, r1
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2264      	movs	r2, #100	; 0x64
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	1acb      	subs	r3, r1, r3
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fc2:	4b36      	ldr	r3, [pc, #216]	; (800509c <UART_SetConfig+0x2d4>)
 8004fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fd0:	441c      	add	r4, r3
 8004fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	1891      	adds	r1, r2, r2
 8004fea:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fec:	415b      	adcs	r3, r3
 8004fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	1851      	adds	r1, r2, r1
 8004ff8:	6339      	str	r1, [r7, #48]	; 0x30
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	414b      	adcs	r3, r1
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800500c:	4659      	mov	r1, fp
 800500e:	00cb      	lsls	r3, r1, #3
 8005010:	4651      	mov	r1, sl
 8005012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005016:	4651      	mov	r1, sl
 8005018:	00ca      	lsls	r2, r1, #3
 800501a:	4610      	mov	r0, r2
 800501c:	4619      	mov	r1, r3
 800501e:	4603      	mov	r3, r0
 8005020:	4642      	mov	r2, r8
 8005022:	189b      	adds	r3, r3, r2
 8005024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005028:	464b      	mov	r3, r9
 800502a:	460a      	mov	r2, r1
 800502c:	eb42 0303 	adc.w	r3, r2, r3
 8005030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005040:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005048:	460b      	mov	r3, r1
 800504a:	18db      	adds	r3, r3, r3
 800504c:	62bb      	str	r3, [r7, #40]	; 0x28
 800504e:	4613      	mov	r3, r2
 8005050:	eb42 0303 	adc.w	r3, r2, r3
 8005054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800505a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800505e:	f7fb fe85 	bl	8000d6c <__aeabi_uldivmod>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <UART_SetConfig+0x2d4>)
 8005068:	fba3 1302 	umull	r1, r3, r3, r2
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	2164      	movs	r1, #100	; 0x64
 8005070:	fb01 f303 	mul.w	r3, r1, r3
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	3332      	adds	r3, #50	; 0x32
 800507a:	4a08      	ldr	r2, [pc, #32]	; (800509c <UART_SetConfig+0x2d4>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	f003 0207 	and.w	r2, r3, #7
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4422      	add	r2, r4
 800508e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005090:	e105      	b.n	800529e <UART_SetConfig+0x4d6>
 8005092:	bf00      	nop
 8005094:	40011000 	.word	0x40011000
 8005098:	40011400 	.word	0x40011400
 800509c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050b2:	4642      	mov	r2, r8
 80050b4:	464b      	mov	r3, r9
 80050b6:	1891      	adds	r1, r2, r2
 80050b8:	6239      	str	r1, [r7, #32]
 80050ba:	415b      	adcs	r3, r3
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
 80050be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050c2:	4641      	mov	r1, r8
 80050c4:	1854      	adds	r4, r2, r1
 80050c6:	4649      	mov	r1, r9
 80050c8:	eb43 0501 	adc.w	r5, r3, r1
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	00eb      	lsls	r3, r5, #3
 80050d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050da:	00e2      	lsls	r2, r4, #3
 80050dc:	4614      	mov	r4, r2
 80050de:	461d      	mov	r5, r3
 80050e0:	4643      	mov	r3, r8
 80050e2:	18e3      	adds	r3, r4, r3
 80050e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050e8:	464b      	mov	r3, r9
 80050ea:	eb45 0303 	adc.w	r3, r5, r3
 80050ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800510e:	4629      	mov	r1, r5
 8005110:	008b      	lsls	r3, r1, #2
 8005112:	4621      	mov	r1, r4
 8005114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005118:	4621      	mov	r1, r4
 800511a:	008a      	lsls	r2, r1, #2
 800511c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005120:	f7fb fe24 	bl	8000d6c <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4b60      	ldr	r3, [pc, #384]	; (80052ac <UART_SetConfig+0x4e4>)
 800512a:	fba3 2302 	umull	r2, r3, r3, r2
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	011c      	lsls	r4, r3, #4
 8005132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005136:	2200      	movs	r2, #0
 8005138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800513c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	1891      	adds	r1, r2, r2
 800514a:	61b9      	str	r1, [r7, #24]
 800514c:	415b      	adcs	r3, r3
 800514e:	61fb      	str	r3, [r7, #28]
 8005150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005154:	4641      	mov	r1, r8
 8005156:	1851      	adds	r1, r2, r1
 8005158:	6139      	str	r1, [r7, #16]
 800515a:	4649      	mov	r1, r9
 800515c:	414b      	adcs	r3, r1
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800516c:	4659      	mov	r1, fp
 800516e:	00cb      	lsls	r3, r1, #3
 8005170:	4651      	mov	r1, sl
 8005172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005176:	4651      	mov	r1, sl
 8005178:	00ca      	lsls	r2, r1, #3
 800517a:	4610      	mov	r0, r2
 800517c:	4619      	mov	r1, r3
 800517e:	4603      	mov	r3, r0
 8005180:	4642      	mov	r2, r8
 8005182:	189b      	adds	r3, r3, r2
 8005184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005188:	464b      	mov	r3, r9
 800518a:	460a      	mov	r2, r1
 800518c:	eb42 0303 	adc.w	r3, r2, r3
 8005190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	67bb      	str	r3, [r7, #120]	; 0x78
 800519e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051ac:	4649      	mov	r1, r9
 80051ae:	008b      	lsls	r3, r1, #2
 80051b0:	4641      	mov	r1, r8
 80051b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b6:	4641      	mov	r1, r8
 80051b8:	008a      	lsls	r2, r1, #2
 80051ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051be:	f7fb fdd5 	bl	8000d6c <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4b39      	ldr	r3, [pc, #228]	; (80052ac <UART_SetConfig+0x4e4>)
 80051c8:	fba3 1302 	umull	r1, r3, r3, r2
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	2164      	movs	r1, #100	; 0x64
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	3332      	adds	r3, #50	; 0x32
 80051da:	4a34      	ldr	r2, [pc, #208]	; (80052ac <UART_SetConfig+0x4e4>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e6:	441c      	add	r4, r3
 80051e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ec:	2200      	movs	r2, #0
 80051ee:	673b      	str	r3, [r7, #112]	; 0x70
 80051f0:	677a      	str	r2, [r7, #116]	; 0x74
 80051f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051f6:	4642      	mov	r2, r8
 80051f8:	464b      	mov	r3, r9
 80051fa:	1891      	adds	r1, r2, r2
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	415b      	adcs	r3, r3
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005206:	4641      	mov	r1, r8
 8005208:	1851      	adds	r1, r2, r1
 800520a:	6039      	str	r1, [r7, #0]
 800520c:	4649      	mov	r1, r9
 800520e:	414b      	adcs	r3, r1
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800521e:	4659      	mov	r1, fp
 8005220:	00cb      	lsls	r3, r1, #3
 8005222:	4651      	mov	r1, sl
 8005224:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005228:	4651      	mov	r1, sl
 800522a:	00ca      	lsls	r2, r1, #3
 800522c:	4610      	mov	r0, r2
 800522e:	4619      	mov	r1, r3
 8005230:	4603      	mov	r3, r0
 8005232:	4642      	mov	r2, r8
 8005234:	189b      	adds	r3, r3, r2
 8005236:	66bb      	str	r3, [r7, #104]	; 0x68
 8005238:	464b      	mov	r3, r9
 800523a:	460a      	mov	r2, r1
 800523c:	eb42 0303 	adc.w	r3, r2, r3
 8005240:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	663b      	str	r3, [r7, #96]	; 0x60
 800524c:	667a      	str	r2, [r7, #100]	; 0x64
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800525a:	4649      	mov	r1, r9
 800525c:	008b      	lsls	r3, r1, #2
 800525e:	4641      	mov	r1, r8
 8005260:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005264:	4641      	mov	r1, r8
 8005266:	008a      	lsls	r2, r1, #2
 8005268:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800526c:	f7fb fd7e 	bl	8000d6c <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <UART_SetConfig+0x4e4>)
 8005276:	fba3 1302 	umull	r1, r3, r3, r2
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	2164      	movs	r1, #100	; 0x64
 800527e:	fb01 f303 	mul.w	r3, r1, r3
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	3332      	adds	r3, #50	; 0x32
 8005288:	4a08      	ldr	r2, [pc, #32]	; (80052ac <UART_SetConfig+0x4e4>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	f003 020f 	and.w	r2, r3, #15
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4422      	add	r2, r4
 800529c:	609a      	str	r2, [r3, #8]
}
 800529e:	bf00      	nop
 80052a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052a4:	46bd      	mov	sp, r7
 80052a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052aa:	bf00      	nop
 80052ac:	51eb851f 	.word	0x51eb851f

080052b0 <__errno>:
 80052b0:	4b01      	ldr	r3, [pc, #4]	; (80052b8 <__errno+0x8>)
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000020 	.word	0x20000020

080052bc <__libc_init_array>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4d0d      	ldr	r5, [pc, #52]	; (80052f4 <__libc_init_array+0x38>)
 80052c0:	4c0d      	ldr	r4, [pc, #52]	; (80052f8 <__libc_init_array+0x3c>)
 80052c2:	1b64      	subs	r4, r4, r5
 80052c4:	10a4      	asrs	r4, r4, #2
 80052c6:	2600      	movs	r6, #0
 80052c8:	42a6      	cmp	r6, r4
 80052ca:	d109      	bne.n	80052e0 <__libc_init_array+0x24>
 80052cc:	4d0b      	ldr	r5, [pc, #44]	; (80052fc <__libc_init_array+0x40>)
 80052ce:	4c0c      	ldr	r4, [pc, #48]	; (8005300 <__libc_init_array+0x44>)
 80052d0:	f000 ff68 	bl	80061a4 <_init>
 80052d4:	1b64      	subs	r4, r4, r5
 80052d6:	10a4      	asrs	r4, r4, #2
 80052d8:	2600      	movs	r6, #0
 80052da:	42a6      	cmp	r6, r4
 80052dc:	d105      	bne.n	80052ea <__libc_init_array+0x2e>
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e4:	4798      	blx	r3
 80052e6:	3601      	adds	r6, #1
 80052e8:	e7ee      	b.n	80052c8 <__libc_init_array+0xc>
 80052ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ee:	4798      	blx	r3
 80052f0:	3601      	adds	r6, #1
 80052f2:	e7f2      	b.n	80052da <__libc_init_array+0x1e>
 80052f4:	08006210 	.word	0x08006210
 80052f8:	08006210 	.word	0x08006210
 80052fc:	08006210 	.word	0x08006210
 8005300:	08006214 	.word	0x08006214

08005304 <memset>:
 8005304:	4402      	add	r2, r0
 8005306:	4603      	mov	r3, r0
 8005308:	4293      	cmp	r3, r2
 800530a:	d100      	bne.n	800530e <memset+0xa>
 800530c:	4770      	bx	lr
 800530e:	f803 1b01 	strb.w	r1, [r3], #1
 8005312:	e7f9      	b.n	8005308 <memset+0x4>

08005314 <pow>:
 8005314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005316:	ed2d 8b02 	vpush	{d8}
 800531a:	eeb0 8a40 	vmov.f32	s16, s0
 800531e:	eef0 8a60 	vmov.f32	s17, s1
 8005322:	ec55 4b11 	vmov	r4, r5, d1
 8005326:	f000 f893 	bl	8005450 <__ieee754_pow>
 800532a:	4622      	mov	r2, r4
 800532c:	462b      	mov	r3, r5
 800532e:	4620      	mov	r0, r4
 8005330:	4629      	mov	r1, r5
 8005332:	ec57 6b10 	vmov	r6, r7, d0
 8005336:	f7fb fba5 	bl	8000a84 <__aeabi_dcmpun>
 800533a:	2800      	cmp	r0, #0
 800533c:	d13b      	bne.n	80053b6 <pow+0xa2>
 800533e:	ec51 0b18 	vmov	r0, r1, d8
 8005342:	2200      	movs	r2, #0
 8005344:	2300      	movs	r3, #0
 8005346:	f7fb fb6b 	bl	8000a20 <__aeabi_dcmpeq>
 800534a:	b1b8      	cbz	r0, 800537c <pow+0x68>
 800534c:	2200      	movs	r2, #0
 800534e:	2300      	movs	r3, #0
 8005350:	4620      	mov	r0, r4
 8005352:	4629      	mov	r1, r5
 8005354:	f7fb fb64 	bl	8000a20 <__aeabi_dcmpeq>
 8005358:	2800      	cmp	r0, #0
 800535a:	d146      	bne.n	80053ea <pow+0xd6>
 800535c:	ec45 4b10 	vmov	d0, r4, r5
 8005360:	f000 fe8f 	bl	8006082 <finite>
 8005364:	b338      	cbz	r0, 80053b6 <pow+0xa2>
 8005366:	2200      	movs	r2, #0
 8005368:	2300      	movs	r3, #0
 800536a:	4620      	mov	r0, r4
 800536c:	4629      	mov	r1, r5
 800536e:	f7fb fb61 	bl	8000a34 <__aeabi_dcmplt>
 8005372:	b300      	cbz	r0, 80053b6 <pow+0xa2>
 8005374:	f7ff ff9c 	bl	80052b0 <__errno>
 8005378:	2322      	movs	r3, #34	; 0x22
 800537a:	e01b      	b.n	80053b4 <pow+0xa0>
 800537c:	ec47 6b10 	vmov	d0, r6, r7
 8005380:	f000 fe7f 	bl	8006082 <finite>
 8005384:	b9e0      	cbnz	r0, 80053c0 <pow+0xac>
 8005386:	eeb0 0a48 	vmov.f32	s0, s16
 800538a:	eef0 0a68 	vmov.f32	s1, s17
 800538e:	f000 fe78 	bl	8006082 <finite>
 8005392:	b1a8      	cbz	r0, 80053c0 <pow+0xac>
 8005394:	ec45 4b10 	vmov	d0, r4, r5
 8005398:	f000 fe73 	bl	8006082 <finite>
 800539c:	b180      	cbz	r0, 80053c0 <pow+0xac>
 800539e:	4632      	mov	r2, r6
 80053a0:	463b      	mov	r3, r7
 80053a2:	4630      	mov	r0, r6
 80053a4:	4639      	mov	r1, r7
 80053a6:	f7fb fb6d 	bl	8000a84 <__aeabi_dcmpun>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d0e2      	beq.n	8005374 <pow+0x60>
 80053ae:	f7ff ff7f 	bl	80052b0 <__errno>
 80053b2:	2321      	movs	r3, #33	; 0x21
 80053b4:	6003      	str	r3, [r0, #0]
 80053b6:	ecbd 8b02 	vpop	{d8}
 80053ba:	ec47 6b10 	vmov	d0, r6, r7
 80053be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053c0:	2200      	movs	r2, #0
 80053c2:	2300      	movs	r3, #0
 80053c4:	4630      	mov	r0, r6
 80053c6:	4639      	mov	r1, r7
 80053c8:	f7fb fb2a 	bl	8000a20 <__aeabi_dcmpeq>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d0f2      	beq.n	80053b6 <pow+0xa2>
 80053d0:	eeb0 0a48 	vmov.f32	s0, s16
 80053d4:	eef0 0a68 	vmov.f32	s1, s17
 80053d8:	f000 fe53 	bl	8006082 <finite>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d0ea      	beq.n	80053b6 <pow+0xa2>
 80053e0:	ec45 4b10 	vmov	d0, r4, r5
 80053e4:	f000 fe4d 	bl	8006082 <finite>
 80053e8:	e7c3      	b.n	8005372 <pow+0x5e>
 80053ea:	4f01      	ldr	r7, [pc, #4]	; (80053f0 <pow+0xdc>)
 80053ec:	2600      	movs	r6, #0
 80053ee:	e7e2      	b.n	80053b6 <pow+0xa2>
 80053f0:	3ff00000 	.word	0x3ff00000

080053f4 <sqrt>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	ed2d 8b02 	vpush	{d8}
 80053fa:	ec55 4b10 	vmov	r4, r5, d0
 80053fe:	f000 fd55 	bl	8005eac <__ieee754_sqrt>
 8005402:	4622      	mov	r2, r4
 8005404:	462b      	mov	r3, r5
 8005406:	4620      	mov	r0, r4
 8005408:	4629      	mov	r1, r5
 800540a:	eeb0 8a40 	vmov.f32	s16, s0
 800540e:	eef0 8a60 	vmov.f32	s17, s1
 8005412:	f7fb fb37 	bl	8000a84 <__aeabi_dcmpun>
 8005416:	b990      	cbnz	r0, 800543e <sqrt+0x4a>
 8005418:	2200      	movs	r2, #0
 800541a:	2300      	movs	r3, #0
 800541c:	4620      	mov	r0, r4
 800541e:	4629      	mov	r1, r5
 8005420:	f7fb fb08 	bl	8000a34 <__aeabi_dcmplt>
 8005424:	b158      	cbz	r0, 800543e <sqrt+0x4a>
 8005426:	f7ff ff43 	bl	80052b0 <__errno>
 800542a:	2321      	movs	r3, #33	; 0x21
 800542c:	6003      	str	r3, [r0, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	2300      	movs	r3, #0
 8005432:	4610      	mov	r0, r2
 8005434:	4619      	mov	r1, r3
 8005436:	f7fb f9b5 	bl	80007a4 <__aeabi_ddiv>
 800543a:	ec41 0b18 	vmov	d8, r0, r1
 800543e:	eeb0 0a48 	vmov.f32	s0, s16
 8005442:	eef0 0a68 	vmov.f32	s1, s17
 8005446:	ecbd 8b02 	vpop	{d8}
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	0000      	movs	r0, r0
	...

08005450 <__ieee754_pow>:
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	ed2d 8b06 	vpush	{d8-d10}
 8005458:	b089      	sub	sp, #36	; 0x24
 800545a:	ed8d 1b00 	vstr	d1, [sp]
 800545e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005462:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005466:	ea58 0102 	orrs.w	r1, r8, r2
 800546a:	ec57 6b10 	vmov	r6, r7, d0
 800546e:	d115      	bne.n	800549c <__ieee754_pow+0x4c>
 8005470:	19b3      	adds	r3, r6, r6
 8005472:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005476:	4152      	adcs	r2, r2
 8005478:	4299      	cmp	r1, r3
 800547a:	4b89      	ldr	r3, [pc, #548]	; (80056a0 <__ieee754_pow+0x250>)
 800547c:	4193      	sbcs	r3, r2
 800547e:	f080 84d2 	bcs.w	8005e26 <__ieee754_pow+0x9d6>
 8005482:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005486:	4630      	mov	r0, r6
 8005488:	4639      	mov	r1, r7
 800548a:	f7fa feab 	bl	80001e4 <__adddf3>
 800548e:	ec41 0b10 	vmov	d0, r0, r1
 8005492:	b009      	add	sp, #36	; 0x24
 8005494:	ecbd 8b06 	vpop	{d8-d10}
 8005498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549c:	4b81      	ldr	r3, [pc, #516]	; (80056a4 <__ieee754_pow+0x254>)
 800549e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80054a2:	429c      	cmp	r4, r3
 80054a4:	ee10 aa10 	vmov	sl, s0
 80054a8:	463d      	mov	r5, r7
 80054aa:	dc06      	bgt.n	80054ba <__ieee754_pow+0x6a>
 80054ac:	d101      	bne.n	80054b2 <__ieee754_pow+0x62>
 80054ae:	2e00      	cmp	r6, #0
 80054b0:	d1e7      	bne.n	8005482 <__ieee754_pow+0x32>
 80054b2:	4598      	cmp	r8, r3
 80054b4:	dc01      	bgt.n	80054ba <__ieee754_pow+0x6a>
 80054b6:	d10f      	bne.n	80054d8 <__ieee754_pow+0x88>
 80054b8:	b172      	cbz	r2, 80054d8 <__ieee754_pow+0x88>
 80054ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80054be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80054c2:	ea55 050a 	orrs.w	r5, r5, sl
 80054c6:	d1dc      	bne.n	8005482 <__ieee754_pow+0x32>
 80054c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80054cc:	18db      	adds	r3, r3, r3
 80054ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80054d2:	4152      	adcs	r2, r2
 80054d4:	429d      	cmp	r5, r3
 80054d6:	e7d0      	b.n	800547a <__ieee754_pow+0x2a>
 80054d8:	2d00      	cmp	r5, #0
 80054da:	da3b      	bge.n	8005554 <__ieee754_pow+0x104>
 80054dc:	4b72      	ldr	r3, [pc, #456]	; (80056a8 <__ieee754_pow+0x258>)
 80054de:	4598      	cmp	r8, r3
 80054e0:	dc51      	bgt.n	8005586 <__ieee754_pow+0x136>
 80054e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80054e6:	4598      	cmp	r8, r3
 80054e8:	f340 84ac 	ble.w	8005e44 <__ieee754_pow+0x9f4>
 80054ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80054f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80054f4:	2b14      	cmp	r3, #20
 80054f6:	dd0f      	ble.n	8005518 <__ieee754_pow+0xc8>
 80054f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80054fc:	fa22 f103 	lsr.w	r1, r2, r3
 8005500:	fa01 f303 	lsl.w	r3, r1, r3
 8005504:	4293      	cmp	r3, r2
 8005506:	f040 849d 	bne.w	8005e44 <__ieee754_pow+0x9f4>
 800550a:	f001 0101 	and.w	r1, r1, #1
 800550e:	f1c1 0302 	rsb	r3, r1, #2
 8005512:	9304      	str	r3, [sp, #16]
 8005514:	b182      	cbz	r2, 8005538 <__ieee754_pow+0xe8>
 8005516:	e05f      	b.n	80055d8 <__ieee754_pow+0x188>
 8005518:	2a00      	cmp	r2, #0
 800551a:	d15b      	bne.n	80055d4 <__ieee754_pow+0x184>
 800551c:	f1c3 0314 	rsb	r3, r3, #20
 8005520:	fa48 f103 	asr.w	r1, r8, r3
 8005524:	fa01 f303 	lsl.w	r3, r1, r3
 8005528:	4543      	cmp	r3, r8
 800552a:	f040 8488 	bne.w	8005e3e <__ieee754_pow+0x9ee>
 800552e:	f001 0101 	and.w	r1, r1, #1
 8005532:	f1c1 0302 	rsb	r3, r1, #2
 8005536:	9304      	str	r3, [sp, #16]
 8005538:	4b5c      	ldr	r3, [pc, #368]	; (80056ac <__ieee754_pow+0x25c>)
 800553a:	4598      	cmp	r8, r3
 800553c:	d132      	bne.n	80055a4 <__ieee754_pow+0x154>
 800553e:	f1b9 0f00 	cmp.w	r9, #0
 8005542:	f280 8478 	bge.w	8005e36 <__ieee754_pow+0x9e6>
 8005546:	4959      	ldr	r1, [pc, #356]	; (80056ac <__ieee754_pow+0x25c>)
 8005548:	4632      	mov	r2, r6
 800554a:	463b      	mov	r3, r7
 800554c:	2000      	movs	r0, #0
 800554e:	f7fb f929 	bl	80007a4 <__aeabi_ddiv>
 8005552:	e79c      	b.n	800548e <__ieee754_pow+0x3e>
 8005554:	2300      	movs	r3, #0
 8005556:	9304      	str	r3, [sp, #16]
 8005558:	2a00      	cmp	r2, #0
 800555a:	d13d      	bne.n	80055d8 <__ieee754_pow+0x188>
 800555c:	4b51      	ldr	r3, [pc, #324]	; (80056a4 <__ieee754_pow+0x254>)
 800555e:	4598      	cmp	r8, r3
 8005560:	d1ea      	bne.n	8005538 <__ieee754_pow+0xe8>
 8005562:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005566:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800556a:	ea53 030a 	orrs.w	r3, r3, sl
 800556e:	f000 845a 	beq.w	8005e26 <__ieee754_pow+0x9d6>
 8005572:	4b4f      	ldr	r3, [pc, #316]	; (80056b0 <__ieee754_pow+0x260>)
 8005574:	429c      	cmp	r4, r3
 8005576:	dd08      	ble.n	800558a <__ieee754_pow+0x13a>
 8005578:	f1b9 0f00 	cmp.w	r9, #0
 800557c:	f2c0 8457 	blt.w	8005e2e <__ieee754_pow+0x9de>
 8005580:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005584:	e783      	b.n	800548e <__ieee754_pow+0x3e>
 8005586:	2302      	movs	r3, #2
 8005588:	e7e5      	b.n	8005556 <__ieee754_pow+0x106>
 800558a:	f1b9 0f00 	cmp.w	r9, #0
 800558e:	f04f 0000 	mov.w	r0, #0
 8005592:	f04f 0100 	mov.w	r1, #0
 8005596:	f6bf af7a 	bge.w	800548e <__ieee754_pow+0x3e>
 800559a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800559e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80055a2:	e774      	b.n	800548e <__ieee754_pow+0x3e>
 80055a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80055a8:	d106      	bne.n	80055b8 <__ieee754_pow+0x168>
 80055aa:	4632      	mov	r2, r6
 80055ac:	463b      	mov	r3, r7
 80055ae:	4630      	mov	r0, r6
 80055b0:	4639      	mov	r1, r7
 80055b2:	f7fa ffcd 	bl	8000550 <__aeabi_dmul>
 80055b6:	e76a      	b.n	800548e <__ieee754_pow+0x3e>
 80055b8:	4b3e      	ldr	r3, [pc, #248]	; (80056b4 <__ieee754_pow+0x264>)
 80055ba:	4599      	cmp	r9, r3
 80055bc:	d10c      	bne.n	80055d8 <__ieee754_pow+0x188>
 80055be:	2d00      	cmp	r5, #0
 80055c0:	db0a      	blt.n	80055d8 <__ieee754_pow+0x188>
 80055c2:	ec47 6b10 	vmov	d0, r6, r7
 80055c6:	b009      	add	sp, #36	; 0x24
 80055c8:	ecbd 8b06 	vpop	{d8-d10}
 80055cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d0:	f000 bc6c 	b.w	8005eac <__ieee754_sqrt>
 80055d4:	2300      	movs	r3, #0
 80055d6:	9304      	str	r3, [sp, #16]
 80055d8:	ec47 6b10 	vmov	d0, r6, r7
 80055dc:	f000 fd48 	bl	8006070 <fabs>
 80055e0:	ec51 0b10 	vmov	r0, r1, d0
 80055e4:	f1ba 0f00 	cmp.w	sl, #0
 80055e8:	d129      	bne.n	800563e <__ieee754_pow+0x1ee>
 80055ea:	b124      	cbz	r4, 80055f6 <__ieee754_pow+0x1a6>
 80055ec:	4b2f      	ldr	r3, [pc, #188]	; (80056ac <__ieee754_pow+0x25c>)
 80055ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d123      	bne.n	800563e <__ieee754_pow+0x1ee>
 80055f6:	f1b9 0f00 	cmp.w	r9, #0
 80055fa:	da05      	bge.n	8005608 <__ieee754_pow+0x1b8>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	2000      	movs	r0, #0
 8005602:	492a      	ldr	r1, [pc, #168]	; (80056ac <__ieee754_pow+0x25c>)
 8005604:	f7fb f8ce 	bl	80007a4 <__aeabi_ddiv>
 8005608:	2d00      	cmp	r5, #0
 800560a:	f6bf af40 	bge.w	800548e <__ieee754_pow+0x3e>
 800560e:	9b04      	ldr	r3, [sp, #16]
 8005610:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005614:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005618:	4323      	orrs	r3, r4
 800561a:	d108      	bne.n	800562e <__ieee754_pow+0x1de>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	f7fa fddc 	bl	80001e0 <__aeabi_dsub>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	e78f      	b.n	800554e <__ieee754_pow+0xfe>
 800562e:	9b04      	ldr	r3, [sp, #16]
 8005630:	2b01      	cmp	r3, #1
 8005632:	f47f af2c 	bne.w	800548e <__ieee754_pow+0x3e>
 8005636:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800563a:	4619      	mov	r1, r3
 800563c:	e727      	b.n	800548e <__ieee754_pow+0x3e>
 800563e:	0feb      	lsrs	r3, r5, #31
 8005640:	3b01      	subs	r3, #1
 8005642:	9306      	str	r3, [sp, #24]
 8005644:	9a06      	ldr	r2, [sp, #24]
 8005646:	9b04      	ldr	r3, [sp, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	d102      	bne.n	8005652 <__ieee754_pow+0x202>
 800564c:	4632      	mov	r2, r6
 800564e:	463b      	mov	r3, r7
 8005650:	e7e6      	b.n	8005620 <__ieee754_pow+0x1d0>
 8005652:	4b19      	ldr	r3, [pc, #100]	; (80056b8 <__ieee754_pow+0x268>)
 8005654:	4598      	cmp	r8, r3
 8005656:	f340 80fb 	ble.w	8005850 <__ieee754_pow+0x400>
 800565a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800565e:	4598      	cmp	r8, r3
 8005660:	4b13      	ldr	r3, [pc, #76]	; (80056b0 <__ieee754_pow+0x260>)
 8005662:	dd0c      	ble.n	800567e <__ieee754_pow+0x22e>
 8005664:	429c      	cmp	r4, r3
 8005666:	dc0f      	bgt.n	8005688 <__ieee754_pow+0x238>
 8005668:	f1b9 0f00 	cmp.w	r9, #0
 800566c:	da0f      	bge.n	800568e <__ieee754_pow+0x23e>
 800566e:	2000      	movs	r0, #0
 8005670:	b009      	add	sp, #36	; 0x24
 8005672:	ecbd 8b06 	vpop	{d8-d10}
 8005676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567a:	f000 bcf0 	b.w	800605e <__math_oflow>
 800567e:	429c      	cmp	r4, r3
 8005680:	dbf2      	blt.n	8005668 <__ieee754_pow+0x218>
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <__ieee754_pow+0x25c>)
 8005684:	429c      	cmp	r4, r3
 8005686:	dd19      	ble.n	80056bc <__ieee754_pow+0x26c>
 8005688:	f1b9 0f00 	cmp.w	r9, #0
 800568c:	dcef      	bgt.n	800566e <__ieee754_pow+0x21e>
 800568e:	2000      	movs	r0, #0
 8005690:	b009      	add	sp, #36	; 0x24
 8005692:	ecbd 8b06 	vpop	{d8-d10}
 8005696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569a:	f000 bcd7 	b.w	800604c <__math_uflow>
 800569e:	bf00      	nop
 80056a0:	fff00000 	.word	0xfff00000
 80056a4:	7ff00000 	.word	0x7ff00000
 80056a8:	433fffff 	.word	0x433fffff
 80056ac:	3ff00000 	.word	0x3ff00000
 80056b0:	3fefffff 	.word	0x3fefffff
 80056b4:	3fe00000 	.word	0x3fe00000
 80056b8:	41e00000 	.word	0x41e00000
 80056bc:	4b60      	ldr	r3, [pc, #384]	; (8005840 <__ieee754_pow+0x3f0>)
 80056be:	2200      	movs	r2, #0
 80056c0:	f7fa fd8e 	bl	80001e0 <__aeabi_dsub>
 80056c4:	a354      	add	r3, pc, #336	; (adr r3, 8005818 <__ieee754_pow+0x3c8>)
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	4604      	mov	r4, r0
 80056cc:	460d      	mov	r5, r1
 80056ce:	f7fa ff3f 	bl	8000550 <__aeabi_dmul>
 80056d2:	a353      	add	r3, pc, #332	; (adr r3, 8005820 <__ieee754_pow+0x3d0>)
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	4606      	mov	r6, r0
 80056da:	460f      	mov	r7, r1
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fa ff36 	bl	8000550 <__aeabi_dmul>
 80056e4:	4b57      	ldr	r3, [pc, #348]	; (8005844 <__ieee754_pow+0x3f4>)
 80056e6:	4682      	mov	sl, r0
 80056e8:	468b      	mov	fp, r1
 80056ea:	2200      	movs	r2, #0
 80056ec:	4620      	mov	r0, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	f7fa ff2e 	bl	8000550 <__aeabi_dmul>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	a14b      	add	r1, pc, #300	; (adr r1, 8005828 <__ieee754_pow+0x3d8>)
 80056fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056fe:	f7fa fd6f 	bl	80001e0 <__aeabi_dsub>
 8005702:	4622      	mov	r2, r4
 8005704:	462b      	mov	r3, r5
 8005706:	f7fa ff23 	bl	8000550 <__aeabi_dmul>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	2000      	movs	r0, #0
 8005710:	494d      	ldr	r1, [pc, #308]	; (8005848 <__ieee754_pow+0x3f8>)
 8005712:	f7fa fd65 	bl	80001e0 <__aeabi_dsub>
 8005716:	4622      	mov	r2, r4
 8005718:	4680      	mov	r8, r0
 800571a:	4689      	mov	r9, r1
 800571c:	462b      	mov	r3, r5
 800571e:	4620      	mov	r0, r4
 8005720:	4629      	mov	r1, r5
 8005722:	f7fa ff15 	bl	8000550 <__aeabi_dmul>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4640      	mov	r0, r8
 800572c:	4649      	mov	r1, r9
 800572e:	f7fa ff0f 	bl	8000550 <__aeabi_dmul>
 8005732:	a33f      	add	r3, pc, #252	; (adr r3, 8005830 <__ieee754_pow+0x3e0>)
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f7fa ff0a 	bl	8000550 <__aeabi_dmul>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4650      	mov	r0, sl
 8005742:	4659      	mov	r1, fp
 8005744:	f7fa fd4c 	bl	80001e0 <__aeabi_dsub>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4680      	mov	r8, r0
 800574e:	4689      	mov	r9, r1
 8005750:	4630      	mov	r0, r6
 8005752:	4639      	mov	r1, r7
 8005754:	f7fa fd46 	bl	80001e4 <__adddf3>
 8005758:	2000      	movs	r0, #0
 800575a:	4632      	mov	r2, r6
 800575c:	463b      	mov	r3, r7
 800575e:	4604      	mov	r4, r0
 8005760:	460d      	mov	r5, r1
 8005762:	f7fa fd3d 	bl	80001e0 <__aeabi_dsub>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4640      	mov	r0, r8
 800576c:	4649      	mov	r1, r9
 800576e:	f7fa fd37 	bl	80001e0 <__aeabi_dsub>
 8005772:	9b04      	ldr	r3, [sp, #16]
 8005774:	9a06      	ldr	r2, [sp, #24]
 8005776:	3b01      	subs	r3, #1
 8005778:	4313      	orrs	r3, r2
 800577a:	4682      	mov	sl, r0
 800577c:	468b      	mov	fp, r1
 800577e:	f040 81e7 	bne.w	8005b50 <__ieee754_pow+0x700>
 8005782:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005838 <__ieee754_pow+0x3e8>
 8005786:	eeb0 8a47 	vmov.f32	s16, s14
 800578a:	eef0 8a67 	vmov.f32	s17, s15
 800578e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005792:	2600      	movs	r6, #0
 8005794:	4632      	mov	r2, r6
 8005796:	463b      	mov	r3, r7
 8005798:	e9dd 0100 	ldrd	r0, r1, [sp]
 800579c:	f7fa fd20 	bl	80001e0 <__aeabi_dsub>
 80057a0:	4622      	mov	r2, r4
 80057a2:	462b      	mov	r3, r5
 80057a4:	f7fa fed4 	bl	8000550 <__aeabi_dmul>
 80057a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057ac:	4680      	mov	r8, r0
 80057ae:	4689      	mov	r9, r1
 80057b0:	4650      	mov	r0, sl
 80057b2:	4659      	mov	r1, fp
 80057b4:	f7fa fecc 	bl	8000550 <__aeabi_dmul>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4640      	mov	r0, r8
 80057be:	4649      	mov	r1, r9
 80057c0:	f7fa fd10 	bl	80001e4 <__adddf3>
 80057c4:	4632      	mov	r2, r6
 80057c6:	463b      	mov	r3, r7
 80057c8:	4680      	mov	r8, r0
 80057ca:	4689      	mov	r9, r1
 80057cc:	4620      	mov	r0, r4
 80057ce:	4629      	mov	r1, r5
 80057d0:	f7fa febe 	bl	8000550 <__aeabi_dmul>
 80057d4:	460b      	mov	r3, r1
 80057d6:	4604      	mov	r4, r0
 80057d8:	460d      	mov	r5, r1
 80057da:	4602      	mov	r2, r0
 80057dc:	4649      	mov	r1, r9
 80057de:	4640      	mov	r0, r8
 80057e0:	f7fa fd00 	bl	80001e4 <__adddf3>
 80057e4:	4b19      	ldr	r3, [pc, #100]	; (800584c <__ieee754_pow+0x3fc>)
 80057e6:	4299      	cmp	r1, r3
 80057e8:	ec45 4b19 	vmov	d9, r4, r5
 80057ec:	4606      	mov	r6, r0
 80057ee:	460f      	mov	r7, r1
 80057f0:	468b      	mov	fp, r1
 80057f2:	f340 82f1 	ble.w	8005dd8 <__ieee754_pow+0x988>
 80057f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80057fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80057fe:	4303      	orrs	r3, r0
 8005800:	f000 81e4 	beq.w	8005bcc <__ieee754_pow+0x77c>
 8005804:	ec51 0b18 	vmov	r0, r1, d8
 8005808:	2200      	movs	r2, #0
 800580a:	2300      	movs	r3, #0
 800580c:	f7fb f912 	bl	8000a34 <__aeabi_dcmplt>
 8005810:	3800      	subs	r0, #0
 8005812:	bf18      	it	ne
 8005814:	2001      	movne	r0, #1
 8005816:	e72b      	b.n	8005670 <__ieee754_pow+0x220>
 8005818:	60000000 	.word	0x60000000
 800581c:	3ff71547 	.word	0x3ff71547
 8005820:	f85ddf44 	.word	0xf85ddf44
 8005824:	3e54ae0b 	.word	0x3e54ae0b
 8005828:	55555555 	.word	0x55555555
 800582c:	3fd55555 	.word	0x3fd55555
 8005830:	652b82fe 	.word	0x652b82fe
 8005834:	3ff71547 	.word	0x3ff71547
 8005838:	00000000 	.word	0x00000000
 800583c:	bff00000 	.word	0xbff00000
 8005840:	3ff00000 	.word	0x3ff00000
 8005844:	3fd00000 	.word	0x3fd00000
 8005848:	3fe00000 	.word	0x3fe00000
 800584c:	408fffff 	.word	0x408fffff
 8005850:	4bd5      	ldr	r3, [pc, #852]	; (8005ba8 <__ieee754_pow+0x758>)
 8005852:	402b      	ands	r3, r5
 8005854:	2200      	movs	r2, #0
 8005856:	b92b      	cbnz	r3, 8005864 <__ieee754_pow+0x414>
 8005858:	4bd4      	ldr	r3, [pc, #848]	; (8005bac <__ieee754_pow+0x75c>)
 800585a:	f7fa fe79 	bl	8000550 <__aeabi_dmul>
 800585e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005862:	460c      	mov	r4, r1
 8005864:	1523      	asrs	r3, r4, #20
 8005866:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800586a:	4413      	add	r3, r2
 800586c:	9305      	str	r3, [sp, #20]
 800586e:	4bd0      	ldr	r3, [pc, #832]	; (8005bb0 <__ieee754_pow+0x760>)
 8005870:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005874:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005878:	429c      	cmp	r4, r3
 800587a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800587e:	dd08      	ble.n	8005892 <__ieee754_pow+0x442>
 8005880:	4bcc      	ldr	r3, [pc, #816]	; (8005bb4 <__ieee754_pow+0x764>)
 8005882:	429c      	cmp	r4, r3
 8005884:	f340 8162 	ble.w	8005b4c <__ieee754_pow+0x6fc>
 8005888:	9b05      	ldr	r3, [sp, #20]
 800588a:	3301      	adds	r3, #1
 800588c:	9305      	str	r3, [sp, #20]
 800588e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005892:	2400      	movs	r4, #0
 8005894:	00e3      	lsls	r3, r4, #3
 8005896:	9307      	str	r3, [sp, #28]
 8005898:	4bc7      	ldr	r3, [pc, #796]	; (8005bb8 <__ieee754_pow+0x768>)
 800589a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800589e:	ed93 7b00 	vldr	d7, [r3]
 80058a2:	4629      	mov	r1, r5
 80058a4:	ec53 2b17 	vmov	r2, r3, d7
 80058a8:	eeb0 9a47 	vmov.f32	s18, s14
 80058ac:	eef0 9a67 	vmov.f32	s19, s15
 80058b0:	4682      	mov	sl, r0
 80058b2:	f7fa fc95 	bl	80001e0 <__aeabi_dsub>
 80058b6:	4652      	mov	r2, sl
 80058b8:	4606      	mov	r6, r0
 80058ba:	460f      	mov	r7, r1
 80058bc:	462b      	mov	r3, r5
 80058be:	ec51 0b19 	vmov	r0, r1, d9
 80058c2:	f7fa fc8f 	bl	80001e4 <__adddf3>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	2000      	movs	r0, #0
 80058cc:	49bb      	ldr	r1, [pc, #748]	; (8005bbc <__ieee754_pow+0x76c>)
 80058ce:	f7fa ff69 	bl	80007a4 <__aeabi_ddiv>
 80058d2:	ec41 0b1a 	vmov	d10, r0, r1
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4630      	mov	r0, r6
 80058dc:	4639      	mov	r1, r7
 80058de:	f7fa fe37 	bl	8000550 <__aeabi_dmul>
 80058e2:	2300      	movs	r3, #0
 80058e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058e8:	9302      	str	r3, [sp, #8]
 80058ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80058ee:	46ab      	mov	fp, r5
 80058f0:	106d      	asrs	r5, r5, #1
 80058f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80058f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80058fa:	ec41 0b18 	vmov	d8, r0, r1
 80058fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005902:	2200      	movs	r2, #0
 8005904:	4640      	mov	r0, r8
 8005906:	4649      	mov	r1, r9
 8005908:	4614      	mov	r4, r2
 800590a:	461d      	mov	r5, r3
 800590c:	f7fa fe20 	bl	8000550 <__aeabi_dmul>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4630      	mov	r0, r6
 8005916:	4639      	mov	r1, r7
 8005918:	f7fa fc62 	bl	80001e0 <__aeabi_dsub>
 800591c:	ec53 2b19 	vmov	r2, r3, d9
 8005920:	4606      	mov	r6, r0
 8005922:	460f      	mov	r7, r1
 8005924:	4620      	mov	r0, r4
 8005926:	4629      	mov	r1, r5
 8005928:	f7fa fc5a 	bl	80001e0 <__aeabi_dsub>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4650      	mov	r0, sl
 8005932:	4659      	mov	r1, fp
 8005934:	f7fa fc54 	bl	80001e0 <__aeabi_dsub>
 8005938:	4642      	mov	r2, r8
 800593a:	464b      	mov	r3, r9
 800593c:	f7fa fe08 	bl	8000550 <__aeabi_dmul>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4630      	mov	r0, r6
 8005946:	4639      	mov	r1, r7
 8005948:	f7fa fc4a 	bl	80001e0 <__aeabi_dsub>
 800594c:	ec53 2b1a 	vmov	r2, r3, d10
 8005950:	f7fa fdfe 	bl	8000550 <__aeabi_dmul>
 8005954:	ec53 2b18 	vmov	r2, r3, d8
 8005958:	ec41 0b19 	vmov	d9, r0, r1
 800595c:	ec51 0b18 	vmov	r0, r1, d8
 8005960:	f7fa fdf6 	bl	8000550 <__aeabi_dmul>
 8005964:	a37c      	add	r3, pc, #496	; (adr r3, 8005b58 <__ieee754_pow+0x708>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	4604      	mov	r4, r0
 800596c:	460d      	mov	r5, r1
 800596e:	f7fa fdef 	bl	8000550 <__aeabi_dmul>
 8005972:	a37b      	add	r3, pc, #492	; (adr r3, 8005b60 <__ieee754_pow+0x710>)
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f7fa fc34 	bl	80001e4 <__adddf3>
 800597c:	4622      	mov	r2, r4
 800597e:	462b      	mov	r3, r5
 8005980:	f7fa fde6 	bl	8000550 <__aeabi_dmul>
 8005984:	a378      	add	r3, pc, #480	; (adr r3, 8005b68 <__ieee754_pow+0x718>)
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f7fa fc2b 	bl	80001e4 <__adddf3>
 800598e:	4622      	mov	r2, r4
 8005990:	462b      	mov	r3, r5
 8005992:	f7fa fddd 	bl	8000550 <__aeabi_dmul>
 8005996:	a376      	add	r3, pc, #472	; (adr r3, 8005b70 <__ieee754_pow+0x720>)
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	f7fa fc22 	bl	80001e4 <__adddf3>
 80059a0:	4622      	mov	r2, r4
 80059a2:	462b      	mov	r3, r5
 80059a4:	f7fa fdd4 	bl	8000550 <__aeabi_dmul>
 80059a8:	a373      	add	r3, pc, #460	; (adr r3, 8005b78 <__ieee754_pow+0x728>)
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	f7fa fc19 	bl	80001e4 <__adddf3>
 80059b2:	4622      	mov	r2, r4
 80059b4:	462b      	mov	r3, r5
 80059b6:	f7fa fdcb 	bl	8000550 <__aeabi_dmul>
 80059ba:	a371      	add	r3, pc, #452	; (adr r3, 8005b80 <__ieee754_pow+0x730>)
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	f7fa fc10 	bl	80001e4 <__adddf3>
 80059c4:	4622      	mov	r2, r4
 80059c6:	4606      	mov	r6, r0
 80059c8:	460f      	mov	r7, r1
 80059ca:	462b      	mov	r3, r5
 80059cc:	4620      	mov	r0, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	f7fa fdbe 	bl	8000550 <__aeabi_dmul>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4630      	mov	r0, r6
 80059da:	4639      	mov	r1, r7
 80059dc:	f7fa fdb8 	bl	8000550 <__aeabi_dmul>
 80059e0:	4642      	mov	r2, r8
 80059e2:	4604      	mov	r4, r0
 80059e4:	460d      	mov	r5, r1
 80059e6:	464b      	mov	r3, r9
 80059e8:	ec51 0b18 	vmov	r0, r1, d8
 80059ec:	f7fa fbfa 	bl	80001e4 <__adddf3>
 80059f0:	ec53 2b19 	vmov	r2, r3, d9
 80059f4:	f7fa fdac 	bl	8000550 <__aeabi_dmul>
 80059f8:	4622      	mov	r2, r4
 80059fa:	462b      	mov	r3, r5
 80059fc:	f7fa fbf2 	bl	80001e4 <__adddf3>
 8005a00:	4642      	mov	r2, r8
 8005a02:	4682      	mov	sl, r0
 8005a04:	468b      	mov	fp, r1
 8005a06:	464b      	mov	r3, r9
 8005a08:	4640      	mov	r0, r8
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	f7fa fda0 	bl	8000550 <__aeabi_dmul>
 8005a10:	4b6b      	ldr	r3, [pc, #428]	; (8005bc0 <__ieee754_pow+0x770>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	4606      	mov	r6, r0
 8005a16:	460f      	mov	r7, r1
 8005a18:	f7fa fbe4 	bl	80001e4 <__adddf3>
 8005a1c:	4652      	mov	r2, sl
 8005a1e:	465b      	mov	r3, fp
 8005a20:	f7fa fbe0 	bl	80001e4 <__adddf3>
 8005a24:	2000      	movs	r0, #0
 8005a26:	4604      	mov	r4, r0
 8005a28:	460d      	mov	r5, r1
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4640      	mov	r0, r8
 8005a30:	4649      	mov	r1, r9
 8005a32:	f7fa fd8d 	bl	8000550 <__aeabi_dmul>
 8005a36:	4b62      	ldr	r3, [pc, #392]	; (8005bc0 <__ieee754_pow+0x770>)
 8005a38:	4680      	mov	r8, r0
 8005a3a:	4689      	mov	r9, r1
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4629      	mov	r1, r5
 8005a42:	f7fa fbcd 	bl	80001e0 <__aeabi_dsub>
 8005a46:	4632      	mov	r2, r6
 8005a48:	463b      	mov	r3, r7
 8005a4a:	f7fa fbc9 	bl	80001e0 <__aeabi_dsub>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4650      	mov	r0, sl
 8005a54:	4659      	mov	r1, fp
 8005a56:	f7fa fbc3 	bl	80001e0 <__aeabi_dsub>
 8005a5a:	ec53 2b18 	vmov	r2, r3, d8
 8005a5e:	f7fa fd77 	bl	8000550 <__aeabi_dmul>
 8005a62:	4622      	mov	r2, r4
 8005a64:	4606      	mov	r6, r0
 8005a66:	460f      	mov	r7, r1
 8005a68:	462b      	mov	r3, r5
 8005a6a:	ec51 0b19 	vmov	r0, r1, d9
 8005a6e:	f7fa fd6f 	bl	8000550 <__aeabi_dmul>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4630      	mov	r0, r6
 8005a78:	4639      	mov	r1, r7
 8005a7a:	f7fa fbb3 	bl	80001e4 <__adddf3>
 8005a7e:	4606      	mov	r6, r0
 8005a80:	460f      	mov	r7, r1
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4640      	mov	r0, r8
 8005a88:	4649      	mov	r1, r9
 8005a8a:	f7fa fbab 	bl	80001e4 <__adddf3>
 8005a8e:	a33e      	add	r3, pc, #248	; (adr r3, 8005b88 <__ieee754_pow+0x738>)
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	2000      	movs	r0, #0
 8005a96:	4604      	mov	r4, r0
 8005a98:	460d      	mov	r5, r1
 8005a9a:	f7fa fd59 	bl	8000550 <__aeabi_dmul>
 8005a9e:	4642      	mov	r2, r8
 8005aa0:	ec41 0b18 	vmov	d8, r0, r1
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	f7fa fb99 	bl	80001e0 <__aeabi_dsub>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	4639      	mov	r1, r7
 8005ab6:	f7fa fb93 	bl	80001e0 <__aeabi_dsub>
 8005aba:	a335      	add	r3, pc, #212	; (adr r3, 8005b90 <__ieee754_pow+0x740>)
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	f7fa fd46 	bl	8000550 <__aeabi_dmul>
 8005ac4:	a334      	add	r3, pc, #208	; (adr r3, 8005b98 <__ieee754_pow+0x748>)
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	4606      	mov	r6, r0
 8005acc:	460f      	mov	r7, r1
 8005ace:	4620      	mov	r0, r4
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	f7fa fd3d 	bl	8000550 <__aeabi_dmul>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4630      	mov	r0, r6
 8005adc:	4639      	mov	r1, r7
 8005ade:	f7fa fb81 	bl	80001e4 <__adddf3>
 8005ae2:	9a07      	ldr	r2, [sp, #28]
 8005ae4:	4b37      	ldr	r3, [pc, #220]	; (8005bc4 <__ieee754_pow+0x774>)
 8005ae6:	4413      	add	r3, r2
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f7fa fb7a 	bl	80001e4 <__adddf3>
 8005af0:	4682      	mov	sl, r0
 8005af2:	9805      	ldr	r0, [sp, #20]
 8005af4:	468b      	mov	fp, r1
 8005af6:	f7fa fcc1 	bl	800047c <__aeabi_i2d>
 8005afa:	9a07      	ldr	r2, [sp, #28]
 8005afc:	4b32      	ldr	r3, [pc, #200]	; (8005bc8 <__ieee754_pow+0x778>)
 8005afe:	4413      	add	r3, r2
 8005b00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b04:	4606      	mov	r6, r0
 8005b06:	460f      	mov	r7, r1
 8005b08:	4652      	mov	r2, sl
 8005b0a:	465b      	mov	r3, fp
 8005b0c:	ec51 0b18 	vmov	r0, r1, d8
 8005b10:	f7fa fb68 	bl	80001e4 <__adddf3>
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	f7fa fb64 	bl	80001e4 <__adddf3>
 8005b1c:	4632      	mov	r2, r6
 8005b1e:	463b      	mov	r3, r7
 8005b20:	f7fa fb60 	bl	80001e4 <__adddf3>
 8005b24:	2000      	movs	r0, #0
 8005b26:	4632      	mov	r2, r6
 8005b28:	463b      	mov	r3, r7
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	f7fa fb57 	bl	80001e0 <__aeabi_dsub>
 8005b32:	4642      	mov	r2, r8
 8005b34:	464b      	mov	r3, r9
 8005b36:	f7fa fb53 	bl	80001e0 <__aeabi_dsub>
 8005b3a:	ec53 2b18 	vmov	r2, r3, d8
 8005b3e:	f7fa fb4f 	bl	80001e0 <__aeabi_dsub>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4650      	mov	r0, sl
 8005b48:	4659      	mov	r1, fp
 8005b4a:	e610      	b.n	800576e <__ieee754_pow+0x31e>
 8005b4c:	2401      	movs	r4, #1
 8005b4e:	e6a1      	b.n	8005894 <__ieee754_pow+0x444>
 8005b50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005ba0 <__ieee754_pow+0x750>
 8005b54:	e617      	b.n	8005786 <__ieee754_pow+0x336>
 8005b56:	bf00      	nop
 8005b58:	4a454eef 	.word	0x4a454eef
 8005b5c:	3fca7e28 	.word	0x3fca7e28
 8005b60:	93c9db65 	.word	0x93c9db65
 8005b64:	3fcd864a 	.word	0x3fcd864a
 8005b68:	a91d4101 	.word	0xa91d4101
 8005b6c:	3fd17460 	.word	0x3fd17460
 8005b70:	518f264d 	.word	0x518f264d
 8005b74:	3fd55555 	.word	0x3fd55555
 8005b78:	db6fabff 	.word	0xdb6fabff
 8005b7c:	3fdb6db6 	.word	0x3fdb6db6
 8005b80:	33333303 	.word	0x33333303
 8005b84:	3fe33333 	.word	0x3fe33333
 8005b88:	e0000000 	.word	0xe0000000
 8005b8c:	3feec709 	.word	0x3feec709
 8005b90:	dc3a03fd 	.word	0xdc3a03fd
 8005b94:	3feec709 	.word	0x3feec709
 8005b98:	145b01f5 	.word	0x145b01f5
 8005b9c:	be3e2fe0 	.word	0xbe3e2fe0
 8005ba0:	00000000 	.word	0x00000000
 8005ba4:	3ff00000 	.word	0x3ff00000
 8005ba8:	7ff00000 	.word	0x7ff00000
 8005bac:	43400000 	.word	0x43400000
 8005bb0:	0003988e 	.word	0x0003988e
 8005bb4:	000bb679 	.word	0x000bb679
 8005bb8:	080061d8 	.word	0x080061d8
 8005bbc:	3ff00000 	.word	0x3ff00000
 8005bc0:	40080000 	.word	0x40080000
 8005bc4:	080061f8 	.word	0x080061f8
 8005bc8:	080061e8 	.word	0x080061e8
 8005bcc:	a3b5      	add	r3, pc, #724	; (adr r3, 8005ea4 <__ieee754_pow+0xa54>)
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	f7fa fb05 	bl	80001e4 <__adddf3>
 8005bda:	4622      	mov	r2, r4
 8005bdc:	ec41 0b1a 	vmov	d10, r0, r1
 8005be0:	462b      	mov	r3, r5
 8005be2:	4630      	mov	r0, r6
 8005be4:	4639      	mov	r1, r7
 8005be6:	f7fa fafb 	bl	80001e0 <__aeabi_dsub>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	ec51 0b1a 	vmov	r0, r1, d10
 8005bf2:	f7fa ff3d 	bl	8000a70 <__aeabi_dcmpgt>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	f47f ae04 	bne.w	8005804 <__ieee754_pow+0x3b4>
 8005bfc:	4aa4      	ldr	r2, [pc, #656]	; (8005e90 <__ieee754_pow+0xa40>)
 8005bfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c02:	4293      	cmp	r3, r2
 8005c04:	f340 8108 	ble.w	8005e18 <__ieee754_pow+0x9c8>
 8005c08:	151b      	asrs	r3, r3, #20
 8005c0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005c0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005c12:	fa4a f303 	asr.w	r3, sl, r3
 8005c16:	445b      	add	r3, fp
 8005c18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005c1c:	4e9d      	ldr	r6, [pc, #628]	; (8005e94 <__ieee754_pow+0xa44>)
 8005c1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005c22:	4116      	asrs	r6, r2
 8005c24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005c28:	2000      	movs	r0, #0
 8005c2a:	ea23 0106 	bic.w	r1, r3, r6
 8005c2e:	f1c2 0214 	rsb	r2, r2, #20
 8005c32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005c36:	fa4a fa02 	asr.w	sl, sl, r2
 8005c3a:	f1bb 0f00 	cmp.w	fp, #0
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4620      	mov	r0, r4
 8005c44:	4629      	mov	r1, r5
 8005c46:	bfb8      	it	lt
 8005c48:	f1ca 0a00 	rsblt	sl, sl, #0
 8005c4c:	f7fa fac8 	bl	80001e0 <__aeabi_dsub>
 8005c50:	ec41 0b19 	vmov	d9, r0, r1
 8005c54:	4642      	mov	r2, r8
 8005c56:	464b      	mov	r3, r9
 8005c58:	ec51 0b19 	vmov	r0, r1, d9
 8005c5c:	f7fa fac2 	bl	80001e4 <__adddf3>
 8005c60:	a37b      	add	r3, pc, #492	; (adr r3, 8005e50 <__ieee754_pow+0xa00>)
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	2000      	movs	r0, #0
 8005c68:	4604      	mov	r4, r0
 8005c6a:	460d      	mov	r5, r1
 8005c6c:	f7fa fc70 	bl	8000550 <__aeabi_dmul>
 8005c70:	ec53 2b19 	vmov	r2, r3, d9
 8005c74:	4606      	mov	r6, r0
 8005c76:	460f      	mov	r7, r1
 8005c78:	4620      	mov	r0, r4
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	f7fa fab0 	bl	80001e0 <__aeabi_dsub>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4640      	mov	r0, r8
 8005c86:	4649      	mov	r1, r9
 8005c88:	f7fa faaa 	bl	80001e0 <__aeabi_dsub>
 8005c8c:	a372      	add	r3, pc, #456	; (adr r3, 8005e58 <__ieee754_pow+0xa08>)
 8005c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c92:	f7fa fc5d 	bl	8000550 <__aeabi_dmul>
 8005c96:	a372      	add	r3, pc, #456	; (adr r3, 8005e60 <__ieee754_pow+0xa10>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	4680      	mov	r8, r0
 8005c9e:	4689      	mov	r9, r1
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	f7fa fc54 	bl	8000550 <__aeabi_dmul>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4640      	mov	r0, r8
 8005cae:	4649      	mov	r1, r9
 8005cb0:	f7fa fa98 	bl	80001e4 <__adddf3>
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	460d      	mov	r5, r1
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	f7fa fa90 	bl	80001e4 <__adddf3>
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	4680      	mov	r8, r0
 8005cca:	4689      	mov	r9, r1
 8005ccc:	f7fa fa88 	bl	80001e0 <__aeabi_dsub>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f7fa fa82 	bl	80001e0 <__aeabi_dsub>
 8005cdc:	4642      	mov	r2, r8
 8005cde:	4606      	mov	r6, r0
 8005ce0:	460f      	mov	r7, r1
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	4640      	mov	r0, r8
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	f7fa fc32 	bl	8000550 <__aeabi_dmul>
 8005cec:	a35e      	add	r3, pc, #376	; (adr r3, 8005e68 <__ieee754_pow+0xa18>)
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	460d      	mov	r5, r1
 8005cf6:	f7fa fc2b 	bl	8000550 <__aeabi_dmul>
 8005cfa:	a35d      	add	r3, pc, #372	; (adr r3, 8005e70 <__ieee754_pow+0xa20>)
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	f7fa fa6e 	bl	80001e0 <__aeabi_dsub>
 8005d04:	4622      	mov	r2, r4
 8005d06:	462b      	mov	r3, r5
 8005d08:	f7fa fc22 	bl	8000550 <__aeabi_dmul>
 8005d0c:	a35a      	add	r3, pc, #360	; (adr r3, 8005e78 <__ieee754_pow+0xa28>)
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	f7fa fa67 	bl	80001e4 <__adddf3>
 8005d16:	4622      	mov	r2, r4
 8005d18:	462b      	mov	r3, r5
 8005d1a:	f7fa fc19 	bl	8000550 <__aeabi_dmul>
 8005d1e:	a358      	add	r3, pc, #352	; (adr r3, 8005e80 <__ieee754_pow+0xa30>)
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f7fa fa5c 	bl	80001e0 <__aeabi_dsub>
 8005d28:	4622      	mov	r2, r4
 8005d2a:	462b      	mov	r3, r5
 8005d2c:	f7fa fc10 	bl	8000550 <__aeabi_dmul>
 8005d30:	a355      	add	r3, pc, #340	; (adr r3, 8005e88 <__ieee754_pow+0xa38>)
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	f7fa fa55 	bl	80001e4 <__adddf3>
 8005d3a:	4622      	mov	r2, r4
 8005d3c:	462b      	mov	r3, r5
 8005d3e:	f7fa fc07 	bl	8000550 <__aeabi_dmul>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4640      	mov	r0, r8
 8005d48:	4649      	mov	r1, r9
 8005d4a:	f7fa fa49 	bl	80001e0 <__aeabi_dsub>
 8005d4e:	4604      	mov	r4, r0
 8005d50:	460d      	mov	r5, r1
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4640      	mov	r0, r8
 8005d58:	4649      	mov	r1, r9
 8005d5a:	f7fa fbf9 	bl	8000550 <__aeabi_dmul>
 8005d5e:	2200      	movs	r2, #0
 8005d60:	ec41 0b19 	vmov	d9, r0, r1
 8005d64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d68:	4620      	mov	r0, r4
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	f7fa fa38 	bl	80001e0 <__aeabi_dsub>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	ec51 0b19 	vmov	r0, r1, d9
 8005d78:	f7fa fd14 	bl	80007a4 <__aeabi_ddiv>
 8005d7c:	4632      	mov	r2, r6
 8005d7e:	4604      	mov	r4, r0
 8005d80:	460d      	mov	r5, r1
 8005d82:	463b      	mov	r3, r7
 8005d84:	4640      	mov	r0, r8
 8005d86:	4649      	mov	r1, r9
 8005d88:	f7fa fbe2 	bl	8000550 <__aeabi_dmul>
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	463b      	mov	r3, r7
 8005d90:	f7fa fa28 	bl	80001e4 <__adddf3>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4620      	mov	r0, r4
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	f7fa fa20 	bl	80001e0 <__aeabi_dsub>
 8005da0:	4642      	mov	r2, r8
 8005da2:	464b      	mov	r3, r9
 8005da4:	f7fa fa1c 	bl	80001e0 <__aeabi_dsub>
 8005da8:	460b      	mov	r3, r1
 8005daa:	4602      	mov	r2, r0
 8005dac:	493a      	ldr	r1, [pc, #232]	; (8005e98 <__ieee754_pow+0xa48>)
 8005dae:	2000      	movs	r0, #0
 8005db0:	f7fa fa16 	bl	80001e0 <__aeabi_dsub>
 8005db4:	ec41 0b10 	vmov	d0, r0, r1
 8005db8:	ee10 3a90 	vmov	r3, s1
 8005dbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc4:	da2b      	bge.n	8005e1e <__ieee754_pow+0x9ce>
 8005dc6:	4650      	mov	r0, sl
 8005dc8:	f000 f966 	bl	8006098 <scalbn>
 8005dcc:	ec51 0b10 	vmov	r0, r1, d0
 8005dd0:	ec53 2b18 	vmov	r2, r3, d8
 8005dd4:	f7ff bbed 	b.w	80055b2 <__ieee754_pow+0x162>
 8005dd8:	4b30      	ldr	r3, [pc, #192]	; (8005e9c <__ieee754_pow+0xa4c>)
 8005dda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005dde:	429e      	cmp	r6, r3
 8005de0:	f77f af0c 	ble.w	8005bfc <__ieee754_pow+0x7ac>
 8005de4:	4b2e      	ldr	r3, [pc, #184]	; (8005ea0 <__ieee754_pow+0xa50>)
 8005de6:	440b      	add	r3, r1
 8005de8:	4303      	orrs	r3, r0
 8005dea:	d009      	beq.n	8005e00 <__ieee754_pow+0x9b0>
 8005dec:	ec51 0b18 	vmov	r0, r1, d8
 8005df0:	2200      	movs	r2, #0
 8005df2:	2300      	movs	r3, #0
 8005df4:	f7fa fe1e 	bl	8000a34 <__aeabi_dcmplt>
 8005df8:	3800      	subs	r0, #0
 8005dfa:	bf18      	it	ne
 8005dfc:	2001      	movne	r0, #1
 8005dfe:	e447      	b.n	8005690 <__ieee754_pow+0x240>
 8005e00:	4622      	mov	r2, r4
 8005e02:	462b      	mov	r3, r5
 8005e04:	f7fa f9ec 	bl	80001e0 <__aeabi_dsub>
 8005e08:	4642      	mov	r2, r8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	f7fa fe26 	bl	8000a5c <__aeabi_dcmpge>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	f43f aef3 	beq.w	8005bfc <__ieee754_pow+0x7ac>
 8005e16:	e7e9      	b.n	8005dec <__ieee754_pow+0x99c>
 8005e18:	f04f 0a00 	mov.w	sl, #0
 8005e1c:	e71a      	b.n	8005c54 <__ieee754_pow+0x804>
 8005e1e:	ec51 0b10 	vmov	r0, r1, d0
 8005e22:	4619      	mov	r1, r3
 8005e24:	e7d4      	b.n	8005dd0 <__ieee754_pow+0x980>
 8005e26:	491c      	ldr	r1, [pc, #112]	; (8005e98 <__ieee754_pow+0xa48>)
 8005e28:	2000      	movs	r0, #0
 8005e2a:	f7ff bb30 	b.w	800548e <__ieee754_pow+0x3e>
 8005e2e:	2000      	movs	r0, #0
 8005e30:	2100      	movs	r1, #0
 8005e32:	f7ff bb2c 	b.w	800548e <__ieee754_pow+0x3e>
 8005e36:	4630      	mov	r0, r6
 8005e38:	4639      	mov	r1, r7
 8005e3a:	f7ff bb28 	b.w	800548e <__ieee754_pow+0x3e>
 8005e3e:	9204      	str	r2, [sp, #16]
 8005e40:	f7ff bb7a 	b.w	8005538 <__ieee754_pow+0xe8>
 8005e44:	2300      	movs	r3, #0
 8005e46:	f7ff bb64 	b.w	8005512 <__ieee754_pow+0xc2>
 8005e4a:	bf00      	nop
 8005e4c:	f3af 8000 	nop.w
 8005e50:	00000000 	.word	0x00000000
 8005e54:	3fe62e43 	.word	0x3fe62e43
 8005e58:	fefa39ef 	.word	0xfefa39ef
 8005e5c:	3fe62e42 	.word	0x3fe62e42
 8005e60:	0ca86c39 	.word	0x0ca86c39
 8005e64:	be205c61 	.word	0xbe205c61
 8005e68:	72bea4d0 	.word	0x72bea4d0
 8005e6c:	3e663769 	.word	0x3e663769
 8005e70:	c5d26bf1 	.word	0xc5d26bf1
 8005e74:	3ebbbd41 	.word	0x3ebbbd41
 8005e78:	af25de2c 	.word	0xaf25de2c
 8005e7c:	3f11566a 	.word	0x3f11566a
 8005e80:	16bebd93 	.word	0x16bebd93
 8005e84:	3f66c16c 	.word	0x3f66c16c
 8005e88:	5555553e 	.word	0x5555553e
 8005e8c:	3fc55555 	.word	0x3fc55555
 8005e90:	3fe00000 	.word	0x3fe00000
 8005e94:	000fffff 	.word	0x000fffff
 8005e98:	3ff00000 	.word	0x3ff00000
 8005e9c:	4090cbff 	.word	0x4090cbff
 8005ea0:	3f6f3400 	.word	0x3f6f3400
 8005ea4:	652b82fe 	.word	0x652b82fe
 8005ea8:	3c971547 	.word	0x3c971547

08005eac <__ieee754_sqrt>:
 8005eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb0:	ec55 4b10 	vmov	r4, r5, d0
 8005eb4:	4e55      	ldr	r6, [pc, #340]	; (800600c <__ieee754_sqrt+0x160>)
 8005eb6:	43ae      	bics	r6, r5
 8005eb8:	ee10 0a10 	vmov	r0, s0
 8005ebc:	ee10 3a10 	vmov	r3, s0
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	d110      	bne.n	8005ee8 <__ieee754_sqrt+0x3c>
 8005ec6:	ee10 2a10 	vmov	r2, s0
 8005eca:	462b      	mov	r3, r5
 8005ecc:	f7fa fb40 	bl	8000550 <__aeabi_dmul>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	f7fa f984 	bl	80001e4 <__adddf3>
 8005edc:	4604      	mov	r4, r0
 8005ede:	460d      	mov	r5, r1
 8005ee0:	ec45 4b10 	vmov	d0, r4, r5
 8005ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee8:	2d00      	cmp	r5, #0
 8005eea:	dc10      	bgt.n	8005f0e <__ieee754_sqrt+0x62>
 8005eec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005ef0:	4330      	orrs	r0, r6
 8005ef2:	d0f5      	beq.n	8005ee0 <__ieee754_sqrt+0x34>
 8005ef4:	b15d      	cbz	r5, 8005f0e <__ieee754_sqrt+0x62>
 8005ef6:	ee10 2a10 	vmov	r2, s0
 8005efa:	462b      	mov	r3, r5
 8005efc:	ee10 0a10 	vmov	r0, s0
 8005f00:	f7fa f96e 	bl	80001e0 <__aeabi_dsub>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	f7fa fc4c 	bl	80007a4 <__aeabi_ddiv>
 8005f0c:	e7e6      	b.n	8005edc <__ieee754_sqrt+0x30>
 8005f0e:	1512      	asrs	r2, r2, #20
 8005f10:	d074      	beq.n	8005ffc <__ieee754_sqrt+0x150>
 8005f12:	07d4      	lsls	r4, r2, #31
 8005f14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005f18:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005f1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005f20:	bf5e      	ittt	pl
 8005f22:	0fda      	lsrpl	r2, r3, #31
 8005f24:	005b      	lslpl	r3, r3, #1
 8005f26:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005f2a:	2400      	movs	r4, #0
 8005f2c:	0fda      	lsrs	r2, r3, #31
 8005f2e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005f32:	107f      	asrs	r7, r7, #1
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	2516      	movs	r5, #22
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005f3e:	1886      	adds	r6, r0, r2
 8005f40:	428e      	cmp	r6, r1
 8005f42:	bfde      	ittt	le
 8005f44:	1b89      	suble	r1, r1, r6
 8005f46:	18b0      	addle	r0, r6, r2
 8005f48:	18a4      	addle	r4, r4, r2
 8005f4a:	0049      	lsls	r1, r1, #1
 8005f4c:	3d01      	subs	r5, #1
 8005f4e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005f52:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005f56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005f5a:	d1f0      	bne.n	8005f3e <__ieee754_sqrt+0x92>
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	f04f 0e20 	mov.w	lr, #32
 8005f62:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005f66:	4281      	cmp	r1, r0
 8005f68:	eb06 0c05 	add.w	ip, r6, r5
 8005f6c:	dc02      	bgt.n	8005f74 <__ieee754_sqrt+0xc8>
 8005f6e:	d113      	bne.n	8005f98 <__ieee754_sqrt+0xec>
 8005f70:	459c      	cmp	ip, r3
 8005f72:	d811      	bhi.n	8005f98 <__ieee754_sqrt+0xec>
 8005f74:	f1bc 0f00 	cmp.w	ip, #0
 8005f78:	eb0c 0506 	add.w	r5, ip, r6
 8005f7c:	da43      	bge.n	8006006 <__ieee754_sqrt+0x15a>
 8005f7e:	2d00      	cmp	r5, #0
 8005f80:	db41      	blt.n	8006006 <__ieee754_sqrt+0x15a>
 8005f82:	f100 0801 	add.w	r8, r0, #1
 8005f86:	1a09      	subs	r1, r1, r0
 8005f88:	459c      	cmp	ip, r3
 8005f8a:	bf88      	it	hi
 8005f8c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005f90:	eba3 030c 	sub.w	r3, r3, ip
 8005f94:	4432      	add	r2, r6
 8005f96:	4640      	mov	r0, r8
 8005f98:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005f9c:	f1be 0e01 	subs.w	lr, lr, #1
 8005fa0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005fa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005fa8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005fac:	d1db      	bne.n	8005f66 <__ieee754_sqrt+0xba>
 8005fae:	430b      	orrs	r3, r1
 8005fb0:	d006      	beq.n	8005fc0 <__ieee754_sqrt+0x114>
 8005fb2:	1c50      	adds	r0, r2, #1
 8005fb4:	bf13      	iteet	ne
 8005fb6:	3201      	addne	r2, #1
 8005fb8:	3401      	addeq	r4, #1
 8005fba:	4672      	moveq	r2, lr
 8005fbc:	f022 0201 	bicne.w	r2, r2, #1
 8005fc0:	1063      	asrs	r3, r4, #1
 8005fc2:	0852      	lsrs	r2, r2, #1
 8005fc4:	07e1      	lsls	r1, r4, #31
 8005fc6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005fca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005fce:	bf48      	it	mi
 8005fd0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005fd4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005fd8:	4614      	mov	r4, r2
 8005fda:	e781      	b.n	8005ee0 <__ieee754_sqrt+0x34>
 8005fdc:	0ad9      	lsrs	r1, r3, #11
 8005fde:	3815      	subs	r0, #21
 8005fe0:	055b      	lsls	r3, r3, #21
 8005fe2:	2900      	cmp	r1, #0
 8005fe4:	d0fa      	beq.n	8005fdc <__ieee754_sqrt+0x130>
 8005fe6:	02cd      	lsls	r5, r1, #11
 8005fe8:	d50a      	bpl.n	8006000 <__ieee754_sqrt+0x154>
 8005fea:	f1c2 0420 	rsb	r4, r2, #32
 8005fee:	fa23 f404 	lsr.w	r4, r3, r4
 8005ff2:	1e55      	subs	r5, r2, #1
 8005ff4:	4093      	lsls	r3, r2
 8005ff6:	4321      	orrs	r1, r4
 8005ff8:	1b42      	subs	r2, r0, r5
 8005ffa:	e78a      	b.n	8005f12 <__ieee754_sqrt+0x66>
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	e7f0      	b.n	8005fe2 <__ieee754_sqrt+0x136>
 8006000:	0049      	lsls	r1, r1, #1
 8006002:	3201      	adds	r2, #1
 8006004:	e7ef      	b.n	8005fe6 <__ieee754_sqrt+0x13a>
 8006006:	4680      	mov	r8, r0
 8006008:	e7bd      	b.n	8005f86 <__ieee754_sqrt+0xda>
 800600a:	bf00      	nop
 800600c:	7ff00000 	.word	0x7ff00000

08006010 <with_errno>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	4604      	mov	r4, r0
 8006014:	460d      	mov	r5, r1
 8006016:	4616      	mov	r6, r2
 8006018:	f7ff f94a 	bl	80052b0 <__errno>
 800601c:	4629      	mov	r1, r5
 800601e:	6006      	str	r6, [r0, #0]
 8006020:	4620      	mov	r0, r4
 8006022:	bd70      	pop	{r4, r5, r6, pc}

08006024 <xflow>:
 8006024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006026:	4614      	mov	r4, r2
 8006028:	461d      	mov	r5, r3
 800602a:	b108      	cbz	r0, 8006030 <xflow+0xc>
 800602c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006030:	e9cd 2300 	strd	r2, r3, [sp]
 8006034:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006038:	4620      	mov	r0, r4
 800603a:	4629      	mov	r1, r5
 800603c:	f7fa fa88 	bl	8000550 <__aeabi_dmul>
 8006040:	2222      	movs	r2, #34	; 0x22
 8006042:	b003      	add	sp, #12
 8006044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006048:	f7ff bfe2 	b.w	8006010 <with_errno>

0800604c <__math_uflow>:
 800604c:	b508      	push	{r3, lr}
 800604e:	2200      	movs	r2, #0
 8006050:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006054:	f7ff ffe6 	bl	8006024 <xflow>
 8006058:	ec41 0b10 	vmov	d0, r0, r1
 800605c:	bd08      	pop	{r3, pc}

0800605e <__math_oflow>:
 800605e:	b508      	push	{r3, lr}
 8006060:	2200      	movs	r2, #0
 8006062:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006066:	f7ff ffdd 	bl	8006024 <xflow>
 800606a:	ec41 0b10 	vmov	d0, r0, r1
 800606e:	bd08      	pop	{r3, pc}

08006070 <fabs>:
 8006070:	ec51 0b10 	vmov	r0, r1, d0
 8006074:	ee10 2a10 	vmov	r2, s0
 8006078:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800607c:	ec43 2b10 	vmov	d0, r2, r3
 8006080:	4770      	bx	lr

08006082 <finite>:
 8006082:	b082      	sub	sp, #8
 8006084:	ed8d 0b00 	vstr	d0, [sp]
 8006088:	9801      	ldr	r0, [sp, #4]
 800608a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800608e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006092:	0fc0      	lsrs	r0, r0, #31
 8006094:	b002      	add	sp, #8
 8006096:	4770      	bx	lr

08006098 <scalbn>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	ec55 4b10 	vmov	r4, r5, d0
 800609e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80060a2:	4606      	mov	r6, r0
 80060a4:	462b      	mov	r3, r5
 80060a6:	b99a      	cbnz	r2, 80060d0 <scalbn+0x38>
 80060a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80060ac:	4323      	orrs	r3, r4
 80060ae:	d036      	beq.n	800611e <scalbn+0x86>
 80060b0:	4b39      	ldr	r3, [pc, #228]	; (8006198 <scalbn+0x100>)
 80060b2:	4629      	mov	r1, r5
 80060b4:	ee10 0a10 	vmov	r0, s0
 80060b8:	2200      	movs	r2, #0
 80060ba:	f7fa fa49 	bl	8000550 <__aeabi_dmul>
 80060be:	4b37      	ldr	r3, [pc, #220]	; (800619c <scalbn+0x104>)
 80060c0:	429e      	cmp	r6, r3
 80060c2:	4604      	mov	r4, r0
 80060c4:	460d      	mov	r5, r1
 80060c6:	da10      	bge.n	80060ea <scalbn+0x52>
 80060c8:	a32b      	add	r3, pc, #172	; (adr r3, 8006178 <scalbn+0xe0>)
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	e03a      	b.n	8006146 <scalbn+0xae>
 80060d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80060d4:	428a      	cmp	r2, r1
 80060d6:	d10c      	bne.n	80060f2 <scalbn+0x5a>
 80060d8:	ee10 2a10 	vmov	r2, s0
 80060dc:	4620      	mov	r0, r4
 80060de:	4629      	mov	r1, r5
 80060e0:	f7fa f880 	bl	80001e4 <__adddf3>
 80060e4:	4604      	mov	r4, r0
 80060e6:	460d      	mov	r5, r1
 80060e8:	e019      	b.n	800611e <scalbn+0x86>
 80060ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80060ee:	460b      	mov	r3, r1
 80060f0:	3a36      	subs	r2, #54	; 0x36
 80060f2:	4432      	add	r2, r6
 80060f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80060f8:	428a      	cmp	r2, r1
 80060fa:	dd08      	ble.n	800610e <scalbn+0x76>
 80060fc:	2d00      	cmp	r5, #0
 80060fe:	a120      	add	r1, pc, #128	; (adr r1, 8006180 <scalbn+0xe8>)
 8006100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006104:	da1c      	bge.n	8006140 <scalbn+0xa8>
 8006106:	a120      	add	r1, pc, #128	; (adr r1, 8006188 <scalbn+0xf0>)
 8006108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800610c:	e018      	b.n	8006140 <scalbn+0xa8>
 800610e:	2a00      	cmp	r2, #0
 8006110:	dd08      	ble.n	8006124 <scalbn+0x8c>
 8006112:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006116:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800611a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800611e:	ec45 4b10 	vmov	d0, r4, r5
 8006122:	bd70      	pop	{r4, r5, r6, pc}
 8006124:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006128:	da19      	bge.n	800615e <scalbn+0xc6>
 800612a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800612e:	429e      	cmp	r6, r3
 8006130:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006134:	dd0a      	ble.n	800614c <scalbn+0xb4>
 8006136:	a112      	add	r1, pc, #72	; (adr r1, 8006180 <scalbn+0xe8>)
 8006138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e2      	bne.n	8006106 <scalbn+0x6e>
 8006140:	a30f      	add	r3, pc, #60	; (adr r3, 8006180 <scalbn+0xe8>)
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	f7fa fa03 	bl	8000550 <__aeabi_dmul>
 800614a:	e7cb      	b.n	80060e4 <scalbn+0x4c>
 800614c:	a10a      	add	r1, pc, #40	; (adr r1, 8006178 <scalbn+0xe0>)
 800614e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0b8      	beq.n	80060c8 <scalbn+0x30>
 8006156:	a10e      	add	r1, pc, #56	; (adr r1, 8006190 <scalbn+0xf8>)
 8006158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800615c:	e7b4      	b.n	80060c8 <scalbn+0x30>
 800615e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006162:	3236      	adds	r2, #54	; 0x36
 8006164:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006168:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800616c:	4620      	mov	r0, r4
 800616e:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <scalbn+0x108>)
 8006170:	2200      	movs	r2, #0
 8006172:	e7e8      	b.n	8006146 <scalbn+0xae>
 8006174:	f3af 8000 	nop.w
 8006178:	c2f8f359 	.word	0xc2f8f359
 800617c:	01a56e1f 	.word	0x01a56e1f
 8006180:	8800759c 	.word	0x8800759c
 8006184:	7e37e43c 	.word	0x7e37e43c
 8006188:	8800759c 	.word	0x8800759c
 800618c:	fe37e43c 	.word	0xfe37e43c
 8006190:	c2f8f359 	.word	0xc2f8f359
 8006194:	81a56e1f 	.word	0x81a56e1f
 8006198:	43500000 	.word	0x43500000
 800619c:	ffff3cb0 	.word	0xffff3cb0
 80061a0:	3c900000 	.word	0x3c900000

080061a4 <_init>:
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	bf00      	nop
 80061a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061aa:	bc08      	pop	{r3}
 80061ac:	469e      	mov	lr, r3
 80061ae:	4770      	bx	lr

080061b0 <_fini>:
 80061b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b2:	bf00      	nop
 80061b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b6:	bc08      	pop	{r3}
 80061b8:	469e      	mov	lr, r3
 80061ba:	4770      	bx	lr
