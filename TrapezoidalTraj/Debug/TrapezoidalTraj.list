
TrapezoidalTraj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e24  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005fc0  08005fc0  00015fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006008  08006008  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006010  08006010  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006010  08006010  00016010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000088  080060a0  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080060a0  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d502  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b53  00000000  00000000  0002d5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002f110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  0002fd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016810  00000000  00000000  000308b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d82a  00000000  00000000  000470c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ebb6  00000000  00000000  000548f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e34a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000384c  00000000  00000000  000e34f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005fa4 	.word	0x08005fa4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	08005fa4 	.word	0x08005fa4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b994 	b.w	80010ac <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f826 	bl	8000ddc <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_f2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	f7ff fb7f 	bl	80004a0 <__aeabi_f2d>
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <__aeabi_f2ulz+0x38>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	4606      	mov	r6, r0
 8000da8:	460f      	mov	r7, r1
 8000daa:	f7ff fbd1 	bl	8000550 <__aeabi_dmul>
 8000dae:	f000 f97f 	bl	80010b0 <__aeabi_d2uiz>
 8000db2:	4604      	mov	r4, r0
 8000db4:	f7ff fb52 	bl	800045c <__aeabi_ui2d>
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <__aeabi_f2ulz+0x3c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f7ff fbc8 	bl	8000550 <__aeabi_dmul>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	4639      	mov	r1, r7
 8000dc8:	f7ff fa0a 	bl	80001e0 <__aeabi_dsub>
 8000dcc:	f000 f970 	bl	80010b0 <__aeabi_d2uiz>
 8000dd0:	4621      	mov	r1, r4
 8000dd2:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd4:	3df00000 	.word	0x3df00000
 8000dd8:	41f00000 	.word	0x41f00000

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468e      	mov	lr, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d14d      	bne.n	8000e86 <__udivmoddi4+0xaa>
 8000dea:	428a      	cmp	r2, r1
 8000dec:	4694      	mov	ip, r2
 8000dee:	d969      	bls.n	8000ec4 <__udivmoddi4+0xe8>
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	b152      	cbz	r2, 8000e0c <__udivmoddi4+0x30>
 8000df6:	fa01 f302 	lsl.w	r3, r1, r2
 8000dfa:	f1c2 0120 	rsb	r1, r2, #32
 8000dfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000e02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e06:	ea41 0e03 	orr.w	lr, r1, r3
 8000e0a:	4094      	lsls	r4, r2
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	0c21      	lsrs	r1, r4, #16
 8000e12:	fbbe f6f8 	udiv	r6, lr, r8
 8000e16:	fa1f f78c 	uxth.w	r7, ip
 8000e1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e22:	fb06 f107 	mul.w	r1, r6, r7
 8000e26:	4299      	cmp	r1, r3
 8000e28:	d90a      	bls.n	8000e40 <__udivmoddi4+0x64>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e32:	f080 811f 	bcs.w	8001074 <__udivmoddi4+0x298>
 8000e36:	4299      	cmp	r1, r3
 8000e38:	f240 811c 	bls.w	8001074 <__udivmoddi4+0x298>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e48:	fb08 3310 	mls	r3, r8, r0, r3
 8000e4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e50:	fb00 f707 	mul.w	r7, r0, r7
 8000e54:	42a7      	cmp	r7, r4
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x92>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e60:	f080 810a 	bcs.w	8001078 <__udivmoddi4+0x29c>
 8000e64:	42a7      	cmp	r7, r4
 8000e66:	f240 8107 	bls.w	8001078 <__udivmoddi4+0x29c>
 8000e6a:	4464      	add	r4, ip
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	1be4      	subs	r4, r4, r7
 8000e74:	2600      	movs	r6, #0
 8000e76:	b11d      	cbz	r5, 8000e80 <__udivmoddi4+0xa4>
 8000e78:	40d4      	lsrs	r4, r2
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d909      	bls.n	8000e9e <__udivmoddi4+0xc2>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	f000 80ef 	beq.w	800106e <__udivmoddi4+0x292>
 8000e90:	2600      	movs	r6, #0
 8000e92:	e9c5 0100 	strd	r0, r1, [r5]
 8000e96:	4630      	mov	r0, r6
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	fab3 f683 	clz	r6, r3
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d14a      	bne.n	8000f3c <__udivmoddi4+0x160>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d302      	bcc.n	8000eb0 <__udivmoddi4+0xd4>
 8000eaa:	4282      	cmp	r2, r0
 8000eac:	f200 80f9 	bhi.w	80010a2 <__udivmoddi4+0x2c6>
 8000eb0:	1a84      	subs	r4, r0, r2
 8000eb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	469e      	mov	lr, r3
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	d0e0      	beq.n	8000e80 <__udivmoddi4+0xa4>
 8000ebe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ec2:	e7dd      	b.n	8000e80 <__udivmoddi4+0xa4>
 8000ec4:	b902      	cbnz	r2, 8000ec8 <__udivmoddi4+0xec>
 8000ec6:	deff      	udf	#255	; 0xff
 8000ec8:	fab2 f282 	clz	r2, r2
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f040 8092 	bne.w	8000ff6 <__udivmoddi4+0x21a>
 8000ed2:	eba1 010c 	sub.w	r1, r1, ip
 8000ed6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eda:	fa1f fe8c 	uxth.w	lr, ip
 8000ede:	2601      	movs	r6, #1
 8000ee0:	0c20      	lsrs	r0, r4, #16
 8000ee2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee6:	fb07 1113 	mls	r1, r7, r3, r1
 8000eea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eee:	fb0e f003 	mul.w	r0, lr, r3
 8000ef2:	4288      	cmp	r0, r1
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x12c>
 8000ef6:	eb1c 0101 	adds.w	r1, ip, r1
 8000efa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efe:	d202      	bcs.n	8000f06 <__udivmoddi4+0x12a>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f200 80cb 	bhi.w	800109c <__udivmoddi4+0x2c0>
 8000f06:	4643      	mov	r3, r8
 8000f08:	1a09      	subs	r1, r1, r0
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f10:	fb07 1110 	mls	r1, r7, r0, r1
 8000f14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f18:	fb0e fe00 	mul.w	lr, lr, r0
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x156>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f28:	d202      	bcs.n	8000f30 <__udivmoddi4+0x154>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	f200 80bb 	bhi.w	80010a6 <__udivmoddi4+0x2ca>
 8000f30:	4608      	mov	r0, r1
 8000f32:	eba4 040e 	sub.w	r4, r4, lr
 8000f36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f3a:	e79c      	b.n	8000e76 <__udivmoddi4+0x9a>
 8000f3c:	f1c6 0720 	rsb	r7, r6, #32
 8000f40:	40b3      	lsls	r3, r6
 8000f42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f52:	431c      	orrs	r4, r3
 8000f54:	40f9      	lsrs	r1, r7
 8000f56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f62:	0c20      	lsrs	r0, r4, #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fb09 1118 	mls	r1, r9, r8, r1
 8000f6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f70:	fb08 f00e 	mul.w	r0, r8, lr
 8000f74:	4288      	cmp	r0, r1
 8000f76:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7a:	d90b      	bls.n	8000f94 <__udivmoddi4+0x1b8>
 8000f7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f84:	f080 8088 	bcs.w	8001098 <__udivmoddi4+0x2bc>
 8000f88:	4288      	cmp	r0, r1
 8000f8a:	f240 8085 	bls.w	8001098 <__udivmoddi4+0x2bc>
 8000f8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f92:	4461      	add	r1, ip
 8000f94:	1a09      	subs	r1, r1, r0
 8000f96:	b2a4      	uxth	r4, r4
 8000f98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000fa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa8:	458e      	cmp	lr, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1e2>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb4:	d26c      	bcs.n	8001090 <__udivmoddi4+0x2b4>
 8000fb6:	458e      	cmp	lr, r1
 8000fb8:	d96a      	bls.n	8001090 <__udivmoddi4+0x2b4>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc6:	eba1 010e 	sub.w	r1, r1, lr
 8000fca:	42a1      	cmp	r1, r4
 8000fcc:	46c8      	mov	r8, r9
 8000fce:	46a6      	mov	lr, r4
 8000fd0:	d356      	bcc.n	8001080 <__udivmoddi4+0x2a4>
 8000fd2:	d053      	beq.n	800107c <__udivmoddi4+0x2a0>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x212>
 8000fd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000fda:	eb61 010e 	sbc.w	r1, r1, lr
 8000fde:	fa01 f707 	lsl.w	r7, r1, r7
 8000fe2:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe6:	40f1      	lsrs	r1, r6
 8000fe8:	431f      	orrs	r7, r3
 8000fea:	e9c5 7100 	strd	r7, r1, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	f1c2 0320 	rsb	r3, r2, #32
 8000ffa:	40d8      	lsrs	r0, r3
 8000ffc:	fa0c fc02 	lsl.w	ip, ip, r2
 8001000:	fa21 f303 	lsr.w	r3, r1, r3
 8001004:	4091      	lsls	r1, r2
 8001006:	4301      	orrs	r1, r0
 8001008:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800100c:	fa1f fe8c 	uxth.w	lr, ip
 8001010:	fbb3 f0f7 	udiv	r0, r3, r7
 8001014:	fb07 3610 	mls	r6, r7, r0, r3
 8001018:	0c0b      	lsrs	r3, r1, #16
 800101a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101e:	fb00 f60e 	mul.w	r6, r0, lr
 8001022:	429e      	cmp	r6, r3
 8001024:	fa04 f402 	lsl.w	r4, r4, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x260>
 800102a:	eb1c 0303 	adds.w	r3, ip, r3
 800102e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001032:	d22f      	bcs.n	8001094 <__udivmoddi4+0x2b8>
 8001034:	429e      	cmp	r6, r3
 8001036:	d92d      	bls.n	8001094 <__udivmoddi4+0x2b8>
 8001038:	3802      	subs	r0, #2
 800103a:	4463      	add	r3, ip
 800103c:	1b9b      	subs	r3, r3, r6
 800103e:	b289      	uxth	r1, r1
 8001040:	fbb3 f6f7 	udiv	r6, r3, r7
 8001044:	fb07 3316 	mls	r3, r7, r6, r3
 8001048:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104c:	fb06 f30e 	mul.w	r3, r6, lr
 8001050:	428b      	cmp	r3, r1
 8001052:	d908      	bls.n	8001066 <__udivmoddi4+0x28a>
 8001054:	eb1c 0101 	adds.w	r1, ip, r1
 8001058:	f106 38ff 	add.w	r8, r6, #4294967295
 800105c:	d216      	bcs.n	800108c <__udivmoddi4+0x2b0>
 800105e:	428b      	cmp	r3, r1
 8001060:	d914      	bls.n	800108c <__udivmoddi4+0x2b0>
 8001062:	3e02      	subs	r6, #2
 8001064:	4461      	add	r1, ip
 8001066:	1ac9      	subs	r1, r1, r3
 8001068:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800106c:	e738      	b.n	8000ee0 <__udivmoddi4+0x104>
 800106e:	462e      	mov	r6, r5
 8001070:	4628      	mov	r0, r5
 8001072:	e705      	b.n	8000e80 <__udivmoddi4+0xa4>
 8001074:	4606      	mov	r6, r0
 8001076:	e6e3      	b.n	8000e40 <__udivmoddi4+0x64>
 8001078:	4618      	mov	r0, r3
 800107a:	e6f8      	b.n	8000e6e <__udivmoddi4+0x92>
 800107c:	454b      	cmp	r3, r9
 800107e:	d2a9      	bcs.n	8000fd4 <__udivmoddi4+0x1f8>
 8001080:	ebb9 0802 	subs.w	r8, r9, r2
 8001084:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001088:	3801      	subs	r0, #1
 800108a:	e7a3      	b.n	8000fd4 <__udivmoddi4+0x1f8>
 800108c:	4646      	mov	r6, r8
 800108e:	e7ea      	b.n	8001066 <__udivmoddi4+0x28a>
 8001090:	4620      	mov	r0, r4
 8001092:	e794      	b.n	8000fbe <__udivmoddi4+0x1e2>
 8001094:	4640      	mov	r0, r8
 8001096:	e7d1      	b.n	800103c <__udivmoddi4+0x260>
 8001098:	46d0      	mov	r8, sl
 800109a:	e77b      	b.n	8000f94 <__udivmoddi4+0x1b8>
 800109c:	3b02      	subs	r3, #2
 800109e:	4461      	add	r1, ip
 80010a0:	e732      	b.n	8000f08 <__udivmoddi4+0x12c>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e709      	b.n	8000eba <__udivmoddi4+0xde>
 80010a6:	4464      	add	r4, ip
 80010a8:	3802      	subs	r0, #2
 80010aa:	e742      	b.n	8000f32 <__udivmoddi4+0x156>

080010ac <__aeabi_idiv0>:
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <__aeabi_d2uiz>:
 80010b0:	004a      	lsls	r2, r1, #1
 80010b2:	d211      	bcs.n	80010d8 <__aeabi_d2uiz+0x28>
 80010b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010b8:	d211      	bcs.n	80010de <__aeabi_d2uiz+0x2e>
 80010ba:	d50d      	bpl.n	80010d8 <__aeabi_d2uiz+0x28>
 80010bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010c4:	d40e      	bmi.n	80010e4 <__aeabi_d2uiz+0x34>
 80010c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010d2:	fa23 f002 	lsr.w	r0, r3, r2
 80010d6:	4770      	bx	lr
 80010d8:	f04f 0000 	mov.w	r0, #0
 80010dc:	4770      	bx	lr
 80010de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80010e2:	d102      	bne.n	80010ea <__aeabi_d2uiz+0x3a>
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f001 fbee 	bl	80028d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f87e 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f000 fa54 	bl	80015a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001100:	f000 fa28 	bl	8001554 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001104:	f000 f9d8 	bl	80014b8 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001108:	f000 f8e0 	bl	80012cc <MX_TIM1_Init>
  MX_TIM3_Init();
 800110c:	f000 f980 	bl	8001410 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim5);
 8001110:	482b      	ldr	r0, [pc, #172]	; (80011c0 <main+0xd0>)
 8001112:	f002 fc19 	bl	8003948 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8001116:	482b      	ldr	r0, [pc, #172]	; (80011c4 <main+0xd4>)
 8001118:	f002 fc16 	bl	8003948 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 || TIM_CHANNEL_2);
 800111c:	2101      	movs	r1, #1
 800111e:	482a      	ldr	r0, [pc, #168]	; (80011c8 <main+0xd8>)
 8001120:	f002 fe1c 	bl	8003d5c <HAL_TIM_Encoder_Start>

  Vel_PID.Kp = 50;
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <main+0xdc>)
 8001126:	4a2a      	ldr	r2, [pc, #168]	; (80011d0 <main+0xe0>)
 8001128:	619a      	str	r2, [r3, #24]
  Vel_PID.Ki = 40;
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <main+0xdc>)
 800112c:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <main+0xe4>)
 800112e:	61da      	str	r2, [r3, #28]
  Vel_PID.Kd = 0;
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <main+0xdc>)
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&Vel_PID, 0);
 8001138:	2100      	movs	r1, #0
 800113a:	4824      	ldr	r0, [pc, #144]	; (80011cc <main+0xdc>)
 800113c:	f001 fb93 	bl	8002866 <arm_pid_init_f32>

  Pos_PID.Kp = 7;
 8001140:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <main+0xe8>)
 8001142:	4a26      	ldr	r2, [pc, #152]	; (80011dc <main+0xec>)
 8001144:	619a      	str	r2, [r3, #24]
  Pos_PID.Ki = 5;
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <main+0xe8>)
 8001148:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <main+0xf0>)
 800114a:	61da      	str	r2, [r3, #28]
  Pos_PID.Kd = 0;
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <main+0xe8>)
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&Pos_PID, 0);
 8001154:	2100      	movs	r1, #0
 8001156:	4820      	ldr	r0, [pc, #128]	; (80011d8 <main+0xe8>)
 8001158:	f001 fb85 	bl	8002866 <arm_pid_init_f32>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800115c:	2100      	movs	r1, #0
 800115e:	4819      	ldr	r0, [pc, #100]	; (80011c4 <main+0xd4>)
 8001160:	f002 fca6 	bl	8003ab0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (t_CPU <= micros())
 8001164:	f000 fac2 	bl	80016ec <micros>
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <main+0xf4>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	4290      	cmp	r0, r2
 8001170:	eb71 0303 	sbcs.w	r3, r1, r3
 8001174:	d3f6      	bcc.n	8001164 <main+0x74>
	  {
		  t_CPU = micros() + 1000000/freq;
 8001176:	f000 fab9 	bl	80016ec <micros>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fdad 	bl	8000ce0 <__aeabi_ul2f>
 8001186:	ee06 0a10 	vmov	s12, r0
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <main+0xf8>)
 800118c:	ed93 7a00 	vldr	s14, [r3]
 8001190:	eddf 6a16 	vldr	s13, [pc, #88]	; 80011ec <main+0xfc>
 8001194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001198:	ee76 7a27 	vadd.f32	s15, s12, s15
 800119c:	ee17 0a90 	vmov	r0, s15
 80011a0:	f7ff fdfc 	bl	8000d9c <__aeabi_f2ulz>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	490e      	ldr	r1, [pc, #56]	; (80011e4 <main+0xf4>)
 80011aa:	e9c1 2300 	strd	r2, r3, [r1]
		  QEIEncoderPositionVelocity_Update();
 80011ae:	f000 fab7 	bl	8001720 <QEIEncoderPositionVelocity_Update>

		  ControllerState();
 80011b2:	f001 f84f 	bl	8002254 <ControllerState>
		  Pf_last = Pf;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <main+0x100>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <main+0x104>)
 80011bc:	6013      	str	r3, [r2, #0]
	  if (t_CPU <= micros())
 80011be:	e7d1      	b.n	8001164 <main+0x74>
 80011c0:	20000134 	.word	0x20000134
 80011c4:	200000a4 	.word	0x200000a4
 80011c8:	200000ec 	.word	0x200000ec
 80011cc:	20000204 	.word	0x20000204
 80011d0:	42480000 	.word	0x42480000
 80011d4:	42200000 	.word	0x42200000
 80011d8:	20000228 	.word	0x20000228
 80011dc:	40e00000 	.word	0x40e00000
 80011e0:	40a00000 	.word	0x40a00000
 80011e4:	20000250 	.word	0x20000250
 80011e8:	20000004 	.word	0x20000004
 80011ec:	49742400 	.word	0x49742400
 80011f0:	200001cc 	.word	0x200001cc
 80011f4:	200001d0 	.word	0x200001d0

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2230      	movs	r2, #48	; 0x30
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f003 ff7c 	bl	8005104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <SystemClock_Config+0xcc>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <SystemClock_Config+0xcc>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <SystemClock_Config+0xcc>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <SystemClock_Config+0xd0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <SystemClock_Config+0xd0>)
 8001242:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <SystemClock_Config+0xd0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001254:	2302      	movs	r3, #2
 8001256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001258:	2301      	movs	r3, #1
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800125c:	2310      	movs	r3, #16
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001260:	2302      	movs	r3, #2
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001264:	2300      	movs	r3, #0
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001268:	2310      	movs	r3, #16
 800126a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800126c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001270:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001272:	2304      	movs	r3, #4
 8001274:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001276:	2304      	movs	r3, #4
 8001278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fe7a 	bl	8002f78 <HAL_RCC_OscConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800128a:	f001 f929 	bl	80024e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	230f      	movs	r3, #15
 8001290:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001292:	2302      	movs	r3, #2
 8001294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2102      	movs	r1, #2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 f8dc 	bl	8003468 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012b6:	f001 f913 	bl	80024e0 <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3750      	adds	r7, #80	; 0x50
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40007000 	.word	0x40007000

080012cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b096      	sub	sp, #88	; 0x58
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
 80012fa:	615a      	str	r2, [r3, #20]
 80012fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2220      	movs	r2, #32
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fefd 	bl	8005104 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800130a:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <MX_TIM1_Init+0x13c>)
 800130c:	4a3f      	ldr	r2, [pc, #252]	; (800140c <MX_TIM1_Init+0x140>)
 800130e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001310:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <MX_TIM1_Init+0x13c>)
 8001312:	2253      	movs	r2, #83	; 0x53
 8001314:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <MX_TIM1_Init+0x13c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <MX_TIM1_Init+0x13c>)
 800131e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001322:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b38      	ldr	r3, [pc, #224]	; (8001408 <MX_TIM1_Init+0x13c>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800132a:	4b37      	ldr	r3, [pc, #220]	; (8001408 <MX_TIM1_Init+0x13c>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	4b35      	ldr	r3, [pc, #212]	; (8001408 <MX_TIM1_Init+0x13c>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001336:	4834      	ldr	r0, [pc, #208]	; (8001408 <MX_TIM1_Init+0x13c>)
 8001338:	f002 fab6 	bl	80038a8 <HAL_TIM_Base_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001342:	f001 f8cd 	bl	80024e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800134c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001350:	4619      	mov	r1, r3
 8001352:	482d      	ldr	r0, [pc, #180]	; (8001408 <MX_TIM1_Init+0x13c>)
 8001354:	f002 ff5a 	bl	800420c <HAL_TIM_ConfigClockSource>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800135e:	f001 f8bf 	bl	80024e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001362:	4829      	ldr	r0, [pc, #164]	; (8001408 <MX_TIM1_Init+0x13c>)
 8001364:	f002 fb4a 	bl	80039fc <HAL_TIM_PWM_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800136e:	f001 f8b7 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800137a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800137e:	4619      	mov	r1, r3
 8001380:	4821      	ldr	r0, [pc, #132]	; (8001408 <MX_TIM1_Init+0x13c>)
 8001382:	f003 faff 	bl	8004984 <HAL_TIMEx_MasterConfigSynchronization>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800138c:	f001 f8a8 	bl	80024e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001390:	2360      	movs	r3, #96	; 0x60
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 5000;
 8001394:	f241 3388 	movw	r3, #5000	; 0x1388
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800139e:	2300      	movs	r3, #0
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	2200      	movs	r2, #0
 80013b4:	4619      	mov	r1, r3
 80013b6:	4814      	ldr	r0, [pc, #80]	; (8001408 <MX_TIM1_Init+0x13c>)
 80013b8:	f002 fe66 	bl	8004088 <HAL_TIM_PWM_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80013c2:	f001 f88d 	bl	80024e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <MX_TIM1_Init+0x13c>)
 80013ea:	f003 fb39 	bl	8004a60 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80013f4:	f001 f874 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <MX_TIM1_Init+0x13c>)
 80013fa:	f001 f92d 	bl	8002658 <HAL_TIM_MspPostInit>

}
 80013fe:	bf00      	nop
 8001400:	3758      	adds	r7, #88	; 0x58
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200000a4 	.word	0x200000a4
 800140c:	40010000 	.word	0x40010000

08001410 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	2224      	movs	r2, #36	; 0x24
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fe70 	bl	8005104 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <MX_TIM3_Init+0xa0>)
 800142e:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <MX_TIM3_Init+0xa4>)
 8001430:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <MX_TIM3_Init+0xa0>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_TIM3_Init+0xa0>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD - 1;
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_TIM3_Init+0xa0>)
 8001440:	f645 72ff 	movw	r2, #24575	; 0x5fff
 8001444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM3_Init+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_TIM3_Init+0xa0>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001452:	2301      	movs	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800145a:	2301      	movs	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800146a:	2301      	movs	r3, #1
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <MX_TIM3_Init+0xa0>)
 800147e:	f002 fbc7 	bl	8003c10 <HAL_TIM_Encoder_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001488:	f001 f82a 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_TIM3_Init+0xa0>)
 800149a:	f003 fa73 	bl	8004984 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014a4:	f001 f81c 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200000ec 	.word	0x200000ec
 80014b4:	40000400 	.word	0x40000400

080014b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <MX_TIM5_Init+0x94>)
 80014d6:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <MX_TIM5_Init+0x98>)
 80014d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <MX_TIM5_Init+0x94>)
 80014dc:	2253      	movs	r2, #83	; 0x53
 80014de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_TIM5_Init+0x94>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <MX_TIM5_Init+0x94>)
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <MX_TIM5_Init+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <MX_TIM5_Init+0x94>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014fa:	4814      	ldr	r0, [pc, #80]	; (800154c <MX_TIM5_Init+0x94>)
 80014fc:	f002 f9d4 	bl	80038a8 <HAL_TIM_Base_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001506:	f000 ffeb 	bl	80024e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	4619      	mov	r1, r3
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <MX_TIM5_Init+0x94>)
 8001518:	f002 fe78 	bl	800420c <HAL_TIM_ConfigClockSource>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001522:	f000 ffdd 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800152e:	463b      	mov	r3, r7
 8001530:	4619      	mov	r1, r3
 8001532:	4806      	ldr	r0, [pc, #24]	; (800154c <MX_TIM5_Init+0x94>)
 8001534:	f003 fa26 	bl	8004984 <HAL_TIMEx_MasterConfigSynchronization>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800153e:	f000 ffcf 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000134 	.word	0x20000134
 8001550:	40000c00 	.word	0x40000c00

08001554 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <MX_USART2_UART_Init+0x50>)
 800155c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 800158c:	f003 face 	bl	8004b2c <HAL_UART_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001596:	f000 ffa3 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000017c 	.word	0x2000017c
 80015a4:	40004400 	.word	0x40004400

080015a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <MX_GPIO_Init+0x100>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a38      	ldr	r2, [pc, #224]	; (80016a8 <MX_GPIO_Init+0x100>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <MX_GPIO_Init+0x100>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <MX_GPIO_Init+0x100>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a31      	ldr	r2, [pc, #196]	; (80016a8 <MX_GPIO_Init+0x100>)
 80015e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <MX_GPIO_Init+0x100>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <MX_GPIO_Init+0x100>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a2a      	ldr	r2, [pc, #168]	; (80016a8 <MX_GPIO_Init+0x100>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <MX_GPIO_Init+0x100>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <MX_GPIO_Init+0x100>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a23      	ldr	r2, [pc, #140]	; (80016a8 <MX_GPIO_Init+0x100>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_GPIO_Init+0x100>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001634:	481d      	ldr	r0, [pc, #116]	; (80016ac <MX_GPIO_Init+0x104>)
 8001636:	f001 fc6d 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800163a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001640:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4817      	ldr	r0, [pc, #92]	; (80016b0 <MX_GPIO_Init+0x108>)
 8001652:	f001 fac3 	bl	8002bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 8001656:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	480f      	ldr	r0, [pc, #60]	; (80016ac <MX_GPIO_Init+0x104>)
 8001670:	f001 fab4 	bl	8002bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800167a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	480a      	ldr	r0, [pc, #40]	; (80016b4 <MX_GPIO_Init+0x10c>)
 800168c:	f001 faa6 	bl	8002bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	2028      	movs	r0, #40	; 0x28
 8001696:	f001 fa6a 	bl	8002b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800169a:	2028      	movs	r0, #40	; 0x28
 800169c:	f001 fa83 	bl	8002ba6 <HAL_NVIC_EnableIRQ>

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020400 	.word	0x40020400

080016b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b8:	b4b0      	push	{r4, r5, r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d108      	bne.n	80016da <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	1e54      	subs	r4, r2, #1
 80016d0:	f143 0500 	adc.w	r5, r3, #0
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016d6:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bcb0      	pop	{r4, r5, r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000134 	.word	0x20000134
 80016e8:	200001e0 	.word	0x200001e0

080016ec <micros>:

uint64_t micros()
{
 80016ec:	b4b0      	push	{r4, r5, r7}
 80016ee:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <micros+0x2c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	2200      	movs	r2, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	4611      	mov	r1, r2
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <micros+0x30>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	1884      	adds	r4, r0, r2
 8001704:	eb41 0503 	adc.w	r5, r1, r3
 8001708:	4622      	mov	r2, r4
 800170a:	462b      	mov	r3, r5
}
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	bcb0      	pop	{r4, r5, r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000134 	.word	0x20000134
 800171c:	200001e0 	.word	0x200001e0

08001720 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update()
{
 8001720:	b5b0      	push	{r4, r5, r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
	// collect data
	QEIData.timestamp[0] = micros();
 8001726:	f7ff ffe1 	bl	80016ec <micros>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4b52      	ldr	r3, [pc, #328]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 8001730:	609a      	str	r2, [r3, #8]
	uint32_t counterPosition = __HAL_TIM_GET_COUNTER(&htim3);
 8001732:	4b52      	ldr	r3, [pc, #328]	; (800187c <QEIEncoderPositionVelocity_Update+0x15c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	60bb      	str	r3, [r7, #8]
	QEIData.data[0] = counterPosition;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4a4e      	ldr	r2, [pc, #312]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 800173e:	6013      	str	r3, [r2, #0]
	if (counterPosition > ((QEI_PERIOD/2) - 1))
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001746:	d305      	bcc.n	8001754 <QEIEncoderPositionVelocity_Update+0x34>
	{
		QEIData.data[0] = counterPosition - QEI_PERIOD;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f5a3 43c0 	sub.w	r3, r3, #24576	; 0x6000
 800174e:	461a      	mov	r2, r3
 8001750:	4b49      	ldr	r3, [pc, #292]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 8001752:	601a      	str	r2, [r3, #0]
	}

	// position calculation
	QEIData.pos = QEIData.data[0] * PI *  pulley_dia/res;
 8001754:	4b48      	ldr	r3, [pc, #288]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001760:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001880 <QEIEncoderPositionVelocity_Update+0x160>
 8001764:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001768:	4b46      	ldr	r3, [pc, #280]	; (8001884 <QEIEncoderPositionVelocity_Update+0x164>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001772:	4b45      	ldr	r3, [pc, #276]	; (8001888 <QEIEncoderPositionVelocity_Update+0x168>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800177e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 8001784:	edc3 7a04 	vstr	s15, [r3, #16]

	int32_t diffPosition = QEIData.data[0] - QEIData.data[1];
 8001788:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	60fb      	str	r3, [r7, #12]
	float diffTime = QEIData.timestamp[0] - QEIData.timestamp[1];
 8001794:	4b38      	ldr	r3, [pc, #224]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	4b37      	ldr	r3, [pc, #220]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a6:	edc7 7a01 	vstr	s15, [r7, #4]

	// unwrap
	if (diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80017b0:	dd03      	ble.n	80017ba <QEIEncoderPositionVelocity_Update+0x9a>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f5a3 43c0 	sub.w	r3, r3, #24576	; 0x6000
 80017b8:	60fb      	str	r3, [r7, #12]
	if (diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f513 5f40 	cmn.w	r3, #12288	; 0x3000
 80017c0:	da03      	bge.n	80017ca <QEIEncoderPositionVelocity_Update+0xaa>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80017c8:	60fb      	str	r3, [r7, #12]

	// velocity calculation
	QEIData.vel = (diffPosition * 1000000.0 * PI * pulley_dia)/(res * diffTime);
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7fe fe56 	bl	800047c <__aeabi_i2d>
 80017d0:	a325      	add	r3, pc, #148	; (adr r3, 8001868 <QEIEncoderPositionVelocity_Update+0x148>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7fe febb 	bl	8000550 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	a323      	add	r3, pc, #140	; (adr r3, 8001870 <QEIEncoderPositionVelocity_Update+0x150>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe feb2 	bl	8000550 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4614      	mov	r4, r2
 80017f2:	461d      	mov	r5, r3
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <QEIEncoderPositionVelocity_Update+0x164>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe51 	bl	80004a0 <__aeabi_f2d>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	f7fe fea3 	bl	8000550 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4614      	mov	r4, r2
 8001810:	461d      	mov	r5, r3
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <QEIEncoderPositionVelocity_Update+0x168>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001826:	ee17 0a90 	vmov	r0, s15
 800182a:	f7fe fe39 	bl	80004a0 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f7fe ffb5 	bl	80007a4 <__aeabi_ddiv>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f935 	bl	8000ab0 <__aeabi_d2f>
 8001846:	4603      	mov	r3, r0
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 800184a:	6153      	str	r3, [r2, #20]

	QEIData.data[1] = QEIData.data[0];
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a09      	ldr	r2, [pc, #36]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 8001852:	6053      	str	r3, [r2, #4]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <QEIEncoderPositionVelocity_Update+0x158>)
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bdb0      	pop	{r4, r5, r7, pc}
 8001864:	f3af 8000 	nop.w
 8001868:	00000000 	.word	0x00000000
 800186c:	412e8480 	.word	0x412e8480
 8001870:	60000000 	.word	0x60000000
 8001874:	400921fb 	.word	0x400921fb
 8001878:	200001e8 	.word	0x200001e8
 800187c:	200000ec 	.word	0x200000ec
 8001880:	40490fdb 	.word	0x40490fdb
 8001884:	20000014 	.word	0x20000014
 8001888:	20000010 	.word	0x20000010
 800188c:	00000000 	.word	0x00000000

08001890 <TrapezoidalTraj_PreCal>:

void TrapezoidalTraj_PreCal(int16_t start_pos, int16_t final_pos)
{
 8001890:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	460a      	mov	r2, r1
 800189c:	80fb      	strh	r3, [r7, #6]
 800189e:	4613      	mov	r3, r2
 80018a0:	80bb      	strh	r3, [r7, #4]
	if (start_pos != final_pos)
 80018a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d05e      	beq.n	800196c <TrapezoidalTraj_PreCal+0xdc>
	{
		float s = final_pos - start_pos;
 80018ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c0:	edc7 7a03 	vstr	s15, [r7, #12]

		t_acc = v_max/a;
 80018c4:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <TrapezoidalTraj_PreCal+0xf0>)
 80018c6:	edd3 6a00 	vldr	s13, [r3]
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <TrapezoidalTraj_PreCal+0xf4>)
 80018cc:	ed93 7a00 	vldr	s14, [r3]
 80018d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d4:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <TrapezoidalTraj_PreCal+0xf8>)
 80018d6:	edc3 7a00 	vstr	s15, [r3]
		t_total = (pow(v_max,2)+a*fabs(s))/(a*v_max);
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <TrapezoidalTraj_PreCal+0xf0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fdde 	bl	80004a0 <__aeabi_f2d>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001978 <TrapezoidalTraj_PreCal+0xe8>
 80018ec:	ec43 2b10 	vmov	d0, r2, r3
 80018f0:	f003 fc10 	bl	8005114 <pow>
 80018f4:	ec59 8b10 	vmov	r8, r9, d0
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <TrapezoidalTraj_PreCal+0xf4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fdcf 	bl	80004a0 <__aeabi_f2d>
 8001902:	4604      	mov	r4, r0
 8001904:	460d      	mov	r5, r1
 8001906:	edd7 7a03 	vldr	s15, [r7, #12]
 800190a:	eef0 7ae7 	vabs.f32	s15, s15
 800190e:	ee17 0a90 	vmov	r0, s15
 8001912:	f7fe fdc5 	bl	80004a0 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4620      	mov	r0, r4
 800191c:	4629      	mov	r1, r5
 800191e:	f7fe fe17 	bl	8000550 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4640      	mov	r0, r8
 8001928:	4649      	mov	r1, r9
 800192a:	f7fe fc5b 	bl	80001e4 <__adddf3>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4614      	mov	r4, r2
 8001934:	461d      	mov	r5, r3
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <TrapezoidalTraj_PreCal+0xf4>)
 8001938:	ed93 7a00 	vldr	s14, [r3]
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <TrapezoidalTraj_PreCal+0xf0>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001946:	ee17 0a90 	vmov	r0, s15
 800194a:	f7fe fda9 	bl	80004a0 <__aeabi_f2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4620      	mov	r0, r4
 8001954:	4629      	mov	r1, r5
 8001956:	f7fe ff25 	bl	80007a4 <__aeabi_ddiv>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff f8a5 	bl	8000ab0 <__aeabi_d2f>
 8001966:	4603      	mov	r3, r0
 8001968:	4a08      	ldr	r2, [pc, #32]	; (800198c <TrapezoidalTraj_PreCal+0xfc>)
 800196a:	6013      	str	r3, [r2, #0]
	}
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001976:	bf00      	nop
 8001978:	00000000 	.word	0x00000000
 800197c:	40000000 	.word	0x40000000
 8001980:	20000008 	.word	0x20000008
 8001984:	2000000c 	.word	0x2000000c
 8001988:	200001c4 	.word	0x200001c4
 800198c:	200001c0 	.word	0x200001c0

08001990 <TrapezoidalTraj_GetState>:

void TrapezoidalTraj_GetState(int16_t start_pos, int16_t final_pos, uint32_t t_us)
{
 8001990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001994:	ed2d 8b02 	vpush	{d8}
 8001998:	b088      	sub	sp, #32
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	81fb      	strh	r3, [r7, #14]
 80019a2:	460b      	mov	r3, r1
 80019a4:	81bb      	strh	r3, [r7, #12]
	if (start_pos != final_pos)
 80019a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	f000 83b2 	beq.w	8002118 <TrapezoidalTraj_GetState+0x788>
	{
		float t = t_us/1000000.0;
 80019b4:	68b8      	ldr	r0, [r7, #8]
 80019b6:	f7fe fd51 	bl	800045c <__aeabi_ui2d>
 80019ba:	a3b0      	add	r3, pc, #704	; (adr r3, 8001c7c <TrapezoidalTraj_GetState+0x2ec>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fef0 	bl	80007a4 <__aeabi_ddiv>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff f870 	bl	8000ab0 <__aeabi_d2f>
 80019d0:	4603      	mov	r3, r0
 80019d2:	61bb      	str	r3, [r7, #24]

		float s = final_pos - start_pos;
 80019d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80019d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e6:	edc7 7a05 	vstr	s15, [r7, #20]
		int8_t dir = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	77fb      	strb	r3, [r7, #31]
		if (s < 0)
 80019ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fa:	d501      	bpl.n	8001a00 <TrapezoidalTraj_GetState+0x70>
		{
			dir = -1;
 80019fc:	23ff      	movs	r3, #255	; 0xff
 80019fe:	77fb      	strb	r3, [r7, #31]
		}

		if (2*t_acc < t_total) // General Case
 8001a00:	4b97      	ldr	r3, [pc, #604]	; (8001c60 <TrapezoidalTraj_GetState+0x2d0>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a0a:	4b96      	ldr	r3, [pc, #600]	; (8001c64 <TrapezoidalTraj_GetState+0x2d4>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	f140 81ff 	bpl.w	8001e1a <TrapezoidalTraj_GetState+0x48a>
		{
			if (t <= t_acc)
 8001a1c:	4b90      	ldr	r3, [pc, #576]	; (8001c60 <TrapezoidalTraj_GetState+0x2d0>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	d862      	bhi.n	8001af6 <TrapezoidalTraj_GetState+0x166>
			{
				qddot_des = dir*a;
 8001a30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3c:	4b8a      	ldr	r3, [pc, #552]	; (8001c68 <TrapezoidalTraj_GetState+0x2d8>)
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a46:	4b89      	ldr	r3, [pc, #548]	; (8001c6c <TrapezoidalTraj_GetState+0x2dc>)
 8001a48:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*t;
 8001a4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a58:	4b83      	ldr	r3, [pc, #524]	; (8001c68 <TrapezoidalTraj_GetState+0x2d8>)
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a62:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6a:	4b81      	ldr	r3, [pc, #516]	; (8001c70 <TrapezoidalTraj_GetState+0x2e0>)
 8001a6c:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t,2));
 8001a70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd01 	bl	800047c <__aeabi_i2d>
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	460d      	mov	r5, r1
 8001a7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fcfa 	bl	800047c <__aeabi_i2d>
 8001a88:	4680      	mov	r8, r0
 8001a8a:	4689      	mov	r9, r1
 8001a8c:	4b76      	ldr	r3, [pc, #472]	; (8001c68 <TrapezoidalTraj_GetState+0x2d8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd05 	bl	80004a0 <__aeabi_f2d>
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <TrapezoidalTraj_GetState+0x2e4>)
 8001a9c:	f7fe fd58 	bl	8000550 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4692      	mov	sl, r2
 8001aa6:	469b      	mov	fp, r3
 8001aa8:	69b8      	ldr	r0, [r7, #24]
 8001aaa:	f7fe fcf9 	bl	80004a0 <__aeabi_f2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8001c58 <TrapezoidalTraj_GetState+0x2c8>
 8001ab6:	ec43 2b10 	vmov	d0, r2, r3
 8001aba:	f003 fb2b 	bl	8005114 <pow>
 8001abe:	ec53 2b10 	vmov	r2, r3, d0
 8001ac2:	4650      	mov	r0, sl
 8001ac4:	4659      	mov	r1, fp
 8001ac6:	f7fe fd43 	bl	8000550 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4640      	mov	r0, r8
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	f7fe fd3d 	bl	8000550 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fb81 	bl	80001e4 <__adddf3>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7fe ffe1 	bl	8000ab0 <__aeabi_d2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a61      	ldr	r2, [pc, #388]	; (8001c78 <TrapezoidalTraj_GetState+0x2e8>)
 8001af2:	6013      	str	r3, [r2, #0]
				qdot_des = dir*a*(2*t_acc - t);
				q_des = start_pos + dir*(2*a*t_acc*t-0.5*a*pow(t,2)-a*pow(t_acc,2));
			}
		}
	}
}
 8001af4:	e310      	b.n	8002118 <TrapezoidalTraj_GetState+0x788>
			else if (t_acc < t && t < (t_total - t_acc))
 8001af6:	4b5a      	ldr	r3, [pc, #360]	; (8001c60 <TrapezoidalTraj_GetState+0x2d0>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b08:	f340 808a 	ble.w	8001c20 <TrapezoidalTraj_GetState+0x290>
 8001b0c:	4b55      	ldr	r3, [pc, #340]	; (8001c64 <TrapezoidalTraj_GetState+0x2d4>)
 8001b0e:	ed93 7a00 	vldr	s14, [r3]
 8001b12:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <TrapezoidalTraj_GetState+0x2d0>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	d57a      	bpl.n	8001c20 <TrapezoidalTraj_GetState+0x290>
				qddot_des = 0;
 8001b2a:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <TrapezoidalTraj_GetState+0x2dc>)
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
				qdot_des = dir*a*t_acc;
 8001b32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	; (8001c68 <TrapezoidalTraj_GetState+0x2d8>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b48:	4b45      	ldr	r3, [pc, #276]	; (8001c60 <TrapezoidalTraj_GetState+0x2d0>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b52:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <TrapezoidalTraj_GetState+0x2e0>)
 8001b54:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t_acc,2) + a*t_acc*(t - t_acc));
 8001b58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fc8d 	bl	800047c <__aeabi_i2d>
 8001b62:	4604      	mov	r4, r0
 8001b64:	460d      	mov	r5, r1
 8001b66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fc86 	bl	800047c <__aeabi_i2d>
 8001b70:	4680      	mov	r8, r0
 8001b72:	4689      	mov	r9, r1
 8001b74:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <TrapezoidalTraj_GetState+0x2d8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fc91 	bl	80004a0 <__aeabi_f2d>
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	4b3c      	ldr	r3, [pc, #240]	; (8001c74 <TrapezoidalTraj_GetState+0x2e4>)
 8001b84:	f7fe fce4 	bl	8000550 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4692      	mov	sl, r2
 8001b8e:	469b      	mov	fp, r3
 8001b90:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <TrapezoidalTraj_GetState+0x2d0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fc83 	bl	80004a0 <__aeabi_f2d>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8001c58 <TrapezoidalTraj_GetState+0x2c8>
 8001ba2:	ec43 2b10 	vmov	d0, r2, r3
 8001ba6:	f003 fab5 	bl	8005114 <pow>
 8001baa:	ec53 2b10 	vmov	r2, r3, d0
 8001bae:	4650      	mov	r0, sl
 8001bb0:	4659      	mov	r1, fp
 8001bb2:	f7fe fccd 	bl	8000550 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4692      	mov	sl, r2
 8001bbc:	469b      	mov	fp, r3
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <TrapezoidalTraj_GetState+0x2d8>)
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <TrapezoidalTraj_GetState+0x2d0>)
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <TrapezoidalTraj_GetState+0x2d0>)
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	edd7 6a06 	vldr	s13, [r7, #24]
 8001bd8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be0:	ee17 0a90 	vmov	r0, s15
 8001be4:	f7fe fc5c 	bl	80004a0 <__aeabi_f2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4650      	mov	r0, sl
 8001bee:	4659      	mov	r1, fp
 8001bf0:	f7fe faf8 	bl	80001e4 <__adddf3>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4640      	mov	r0, r8
 8001bfa:	4649      	mov	r1, r9
 8001bfc:	f7fe fca8 	bl	8000550 <__aeabi_dmul>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4620      	mov	r0, r4
 8001c06:	4629      	mov	r1, r5
 8001c08:	f7fe faec 	bl	80001e4 <__adddf3>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7fe ff4c 	bl	8000ab0 <__aeabi_d2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <TrapezoidalTraj_GetState+0x2e8>)
 8001c1c:	6013      	str	r3, [r2, #0]
}
 8001c1e:	e27b      	b.n	8002118 <TrapezoidalTraj_GetState+0x788>
			else if ((t_total - t_acc) <= t && t <= t_total)
 8001c20:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <TrapezoidalTraj_GetState+0x2d4>)
 8001c22:	ed93 7a00 	vldr	s14, [r3]
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <TrapezoidalTraj_GetState+0x2d0>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c30:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	da00      	bge.n	8001c40 <TrapezoidalTraj_GetState+0x2b0>
}
 8001c3e:	e26b      	b.n	8002118 <TrapezoidalTraj_GetState+0x788>
			else if ((t_total - t_acc) <= t && t <= t_total)
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <TrapezoidalTraj_GetState+0x2d4>)
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	d917      	bls.n	8001c84 <TrapezoidalTraj_GetState+0x2f4>
}
 8001c54:	e260      	b.n	8002118 <TrapezoidalTraj_GetState+0x788>
 8001c56:	bf00      	nop
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40000000 	.word	0x40000000
 8001c60:	200001c4 	.word	0x200001c4
 8001c64:	200001c0 	.word	0x200001c0
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	200001dc 	.word	0x200001dc
 8001c70:	200001d8 	.word	0x200001d8
 8001c74:	3fe00000 	.word	0x3fe00000
 8001c78:	200001d4 	.word	0x200001d4
 8001c7c:	00000000 	.word	0x00000000
 8001c80:	412e8480 	.word	0x412e8480
				qddot_des = -dir*a;
 8001c84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c88:	425b      	negs	r3, r3
 8001c8a:	ee07 3a90 	vmov	s15, r3
 8001c8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c92:	4bc5      	ldr	r3, [pc, #788]	; (8001fa8 <TrapezoidalTraj_GetState+0x618>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9c:	4bc3      	ldr	r3, [pc, #780]	; (8001fac <TrapezoidalTraj_GetState+0x61c>)
 8001c9e:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*(t_total - t);
 8001ca2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ca6:	ee07 3a90 	vmov	s15, r3
 8001caa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cae:	4bbe      	ldr	r3, [pc, #760]	; (8001fa8 <TrapezoidalTraj_GetState+0x618>)
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb8:	4bbd      	ldr	r3, [pc, #756]	; (8001fb0 <TrapezoidalTraj_GetState+0x620>)
 8001cba:	edd3 6a00 	vldr	s13, [r3]
 8001cbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cca:	4bba      	ldr	r3, [pc, #744]	; (8001fb4 <TrapezoidalTraj_GetState+0x624>)
 8001ccc:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(a*t_total*t+a*t_acc*t_total-a*pow(t_acc,2)-0.5*a*(pow(t,2)+pow(t_total,2)));
 8001cd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fbd1 	bl	800047c <__aeabi_i2d>
 8001cda:	4682      	mov	sl, r0
 8001cdc:	468b      	mov	fp, r1
 8001cde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fbca 	bl	800047c <__aeabi_i2d>
 8001ce8:	e9c7 0100 	strd	r0, r1, [r7]
 8001cec:	4bae      	ldr	r3, [pc, #696]	; (8001fa8 <TrapezoidalTraj_GetState+0x618>)
 8001cee:	ed93 7a00 	vldr	s14, [r3]
 8001cf2:	4baf      	ldr	r3, [pc, #700]	; (8001fb0 <TrapezoidalTraj_GetState+0x620>)
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d04:	4ba8      	ldr	r3, [pc, #672]	; (8001fa8 <TrapezoidalTraj_GetState+0x618>)
 8001d06:	edd3 6a00 	vldr	s13, [r3]
 8001d0a:	4bab      	ldr	r3, [pc, #684]	; (8001fb8 <TrapezoidalTraj_GetState+0x628>)
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d14:	4ba6      	ldr	r3, [pc, #664]	; (8001fb0 <TrapezoidalTraj_GetState+0x620>)
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d22:	ee17 0a90 	vmov	r0, s15
 8001d26:	f7fe fbbb 	bl	80004a0 <__aeabi_f2d>
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	460d      	mov	r5, r1
 8001d2e:	4b9e      	ldr	r3, [pc, #632]	; (8001fa8 <TrapezoidalTraj_GetState+0x618>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fbb4 	bl	80004a0 <__aeabi_f2d>
 8001d38:	4680      	mov	r8, r0
 8001d3a:	4689      	mov	r9, r1
 8001d3c:	4b9e      	ldr	r3, [pc, #632]	; (8001fb8 <TrapezoidalTraj_GetState+0x628>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fbad 	bl	80004a0 <__aeabi_f2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	ed9f 1b95 	vldr	d1, [pc, #596]	; 8001fa0 <TrapezoidalTraj_GetState+0x610>
 8001d4e:	ec43 2b10 	vmov	d0, r2, r3
 8001d52:	f003 f9df 	bl	8005114 <pow>
 8001d56:	ec53 2b10 	vmov	r2, r3, d0
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	4649      	mov	r1, r9
 8001d5e:	f7fe fbf7 	bl	8000550 <__aeabi_dmul>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4620      	mov	r0, r4
 8001d68:	4629      	mov	r1, r5
 8001d6a:	f7fe fa39 	bl	80001e0 <__aeabi_dsub>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4614      	mov	r4, r2
 8001d74:	461d      	mov	r5, r3
 8001d76:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <TrapezoidalTraj_GetState+0x618>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fb90 	bl	80004a0 <__aeabi_f2d>
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b8d      	ldr	r3, [pc, #564]	; (8001fbc <TrapezoidalTraj_GetState+0x62c>)
 8001d86:	f7fe fbe3 	bl	8000550 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4699      	mov	r9, r3
 8001d92:	69b8      	ldr	r0, [r7, #24]
 8001d94:	f7fe fb84 	bl	80004a0 <__aeabi_f2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	ed9f 1b80 	vldr	d1, [pc, #512]	; 8001fa0 <TrapezoidalTraj_GetState+0x610>
 8001da0:	ec43 2b10 	vmov	d0, r2, r3
 8001da4:	f003 f9b6 	bl	8005114 <pow>
 8001da8:	eeb0 8a40 	vmov.f32	s16, s0
 8001dac:	eef0 8a60 	vmov.f32	s17, s1
 8001db0:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <TrapezoidalTraj_GetState+0x620>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fb73 	bl	80004a0 <__aeabi_f2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8001fa0 <TrapezoidalTraj_GetState+0x610>
 8001dc2:	ec43 2b10 	vmov	d0, r2, r3
 8001dc6:	f003 f9a5 	bl	8005114 <pow>
 8001dca:	ec53 2b10 	vmov	r2, r3, d0
 8001dce:	ec51 0b18 	vmov	r0, r1, d8
 8001dd2:	f7fe fa07 	bl	80001e4 <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4640      	mov	r0, r8
 8001ddc:	4649      	mov	r1, r9
 8001dde:	f7fe fbb7 	bl	8000550 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4620      	mov	r0, r4
 8001de8:	4629      	mov	r1, r5
 8001dea:	f7fe f9f9 	bl	80001e0 <__aeabi_dsub>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001df6:	f7fe fbab 	bl	8000550 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4650      	mov	r0, sl
 8001e00:	4659      	mov	r1, fp
 8001e02:	f7fe f9ef 	bl	80001e4 <__adddf3>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe fe4f 	bl	8000ab0 <__aeabi_d2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a6a      	ldr	r2, [pc, #424]	; (8001fc0 <TrapezoidalTraj_GetState+0x630>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	e17e      	b.n	8002118 <TrapezoidalTraj_GetState+0x788>
			t_acc = 0.5*sqrt(4*fabs(s)/a);
 8001e1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e1e:	eef0 7ae7 	vabs.f32	s15, s15
 8001e22:	ee17 0a90 	vmov	r0, s15
 8001e26:	f7fe fb3b 	bl	80004a0 <__aeabi_f2d>
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	4b65      	ldr	r3, [pc, #404]	; (8001fc4 <TrapezoidalTraj_GetState+0x634>)
 8001e30:	f7fe fb8e 	bl	8000550 <__aeabi_dmul>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4614      	mov	r4, r2
 8001e3a:	461d      	mov	r5, r3
 8001e3c:	4b5a      	ldr	r3, [pc, #360]	; (8001fa8 <TrapezoidalTraj_GetState+0x618>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb2d 	bl	80004a0 <__aeabi_f2d>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f7fe fca9 	bl	80007a4 <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	ec43 2b17 	vmov	d7, r2, r3
 8001e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e5e:	eef0 0a67 	vmov.f32	s1, s15
 8001e62:	f003 f9c7 	bl	80051f4 <sqrt>
 8001e66:	ec51 0b10 	vmov	r0, r1, d0
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <TrapezoidalTraj_GetState+0x62c>)
 8001e70:	f7fe fb6e 	bl	8000550 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fe18 	bl	8000ab0 <__aeabi_d2f>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a4d      	ldr	r2, [pc, #308]	; (8001fb8 <TrapezoidalTraj_GetState+0x628>)
 8001e84:	6013      	str	r3, [r2, #0]
			t_total = 2*t_acc;
 8001e86:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <TrapezoidalTraj_GetState+0x628>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e90:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <TrapezoidalTraj_GetState+0x620>)
 8001e92:	edc3 7a00 	vstr	s15, [r3]
			if (t <= t_acc)
 8001e96:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <TrapezoidalTraj_GetState+0x628>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea8:	d862      	bhi.n	8001f70 <TrapezoidalTraj_GetState+0x5e0>
				qddot_des = dir*a;
 8001eaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb6:	4b3c      	ldr	r3, [pc, #240]	; (8001fa8 <TrapezoidalTraj_GetState+0x618>)
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec0:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <TrapezoidalTraj_GetState+0x61c>)
 8001ec2:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*t;
 8001ec6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed2:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <TrapezoidalTraj_GetState+0x618>)
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001edc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee4:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <TrapezoidalTraj_GetState+0x624>)
 8001ee6:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t,2));
 8001eea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fac4 	bl	800047c <__aeabi_i2d>
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	460d      	mov	r5, r1
 8001ef8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fabd 	bl	800047c <__aeabi_i2d>
 8001f02:	4680      	mov	r8, r0
 8001f04:	4689      	mov	r9, r1
 8001f06:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <TrapezoidalTraj_GetState+0x618>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fac8 	bl	80004a0 <__aeabi_f2d>
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <TrapezoidalTraj_GetState+0x62c>)
 8001f16:	f7fe fb1b 	bl	8000550 <__aeabi_dmul>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4692      	mov	sl, r2
 8001f20:	469b      	mov	fp, r3
 8001f22:	69b8      	ldr	r0, [r7, #24]
 8001f24:	f7fe fabc 	bl	80004a0 <__aeabi_f2d>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001fa0 <TrapezoidalTraj_GetState+0x610>
 8001f30:	ec43 2b10 	vmov	d0, r2, r3
 8001f34:	f003 f8ee 	bl	8005114 <pow>
 8001f38:	ec53 2b10 	vmov	r2, r3, d0
 8001f3c:	4650      	mov	r0, sl
 8001f3e:	4659      	mov	r1, fp
 8001f40:	f7fe fb06 	bl	8000550 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4640      	mov	r0, r8
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	f7fe fb00 	bl	8000550 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe f944 	bl	80001e4 <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7fe fda4 	bl	8000ab0 <__aeabi_d2f>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <TrapezoidalTraj_GetState+0x630>)
 8001f6c:	6013      	str	r3, [r2, #0]
}
 8001f6e:	e0d3      	b.n	8002118 <TrapezoidalTraj_GetState+0x788>
			else if (t_acc < t && t < t_total)
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <TrapezoidalTraj_GetState+0x628>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f82:	dc00      	bgt.n	8001f86 <TrapezoidalTraj_GetState+0x5f6>
}
 8001f84:	e0c8      	b.n	8002118 <TrapezoidalTraj_GetState+0x788>
			else if (t_acc < t && t < t_total)
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <TrapezoidalTraj_GetState+0x620>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f98:	d416      	bmi.n	8001fc8 <TrapezoidalTraj_GetState+0x638>
}
 8001f9a:	e0bd      	b.n	8002118 <TrapezoidalTraj_GetState+0x788>
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	00000000 	.word	0x00000000
 8001fa4:	40000000 	.word	0x40000000
 8001fa8:	2000000c 	.word	0x2000000c
 8001fac:	200001dc 	.word	0x200001dc
 8001fb0:	200001c0 	.word	0x200001c0
 8001fb4:	200001d8 	.word	0x200001d8
 8001fb8:	200001c4 	.word	0x200001c4
 8001fbc:	3fe00000 	.word	0x3fe00000
 8001fc0:	200001d4 	.word	0x200001d4
 8001fc4:	40100000 	.word	0x40100000
				qddot_des = -dir*a;
 8001fc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fcc:	425b      	negs	r3, r3
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd6:	4b56      	ldr	r3, [pc, #344]	; (8002130 <TrapezoidalTraj_GetState+0x7a0>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe0:	4b54      	ldr	r3, [pc, #336]	; (8002134 <TrapezoidalTraj_GetState+0x7a4>)
 8001fe2:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*(2*t_acc - t);
 8001fe6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff2:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <TrapezoidalTraj_GetState+0x7a0>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ffc:	4b4e      	ldr	r3, [pc, #312]	; (8002138 <TrapezoidalTraj_GetState+0x7a8>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002006:	edd7 7a06 	vldr	s15, [r7, #24]
 800200a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800200e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <TrapezoidalTraj_GetState+0x7ac>)
 8002014:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(2*a*t_acc*t-0.5*a*pow(t,2)-a*pow(t_acc,2));
 8002018:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fa2d 	bl	800047c <__aeabi_i2d>
 8002022:	4604      	mov	r4, r0
 8002024:	460d      	mov	r5, r1
 8002026:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fa26 	bl	800047c <__aeabi_i2d>
 8002030:	4680      	mov	r8, r0
 8002032:	4689      	mov	r9, r1
 8002034:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <TrapezoidalTraj_GetState+0x7a0>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800203e:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <TrapezoidalTraj_GetState+0x7a8>)
 8002040:	edd3 7a00 	vldr	s15, [r3]
 8002044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002048:	edd7 7a06 	vldr	s15, [r7, #24]
 800204c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002050:	ee17 0a90 	vmov	r0, s15
 8002054:	f7fe fa24 	bl	80004a0 <__aeabi_f2d>
 8002058:	4682      	mov	sl, r0
 800205a:	468b      	mov	fp, r1
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <TrapezoidalTraj_GetState+0x7a0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa1d 	bl	80004a0 <__aeabi_f2d>
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	4b35      	ldr	r3, [pc, #212]	; (8002140 <TrapezoidalTraj_GetState+0x7b0>)
 800206c:	f7fe fa70 	bl	8000550 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	e9c7 2300 	strd	r2, r3, [r7]
 8002078:	69b8      	ldr	r0, [r7, #24]
 800207a:	f7fe fa11 	bl	80004a0 <__aeabi_f2d>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8002128 <TrapezoidalTraj_GetState+0x798>
 8002086:	ec43 2b10 	vmov	d0, r2, r3
 800208a:	f003 f843 	bl	8005114 <pow>
 800208e:	ec53 2b10 	vmov	r2, r3, d0
 8002092:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002096:	f7fe fa5b 	bl	8000550 <__aeabi_dmul>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4650      	mov	r0, sl
 80020a0:	4659      	mov	r1, fp
 80020a2:	f7fe f89d 	bl	80001e0 <__aeabi_dsub>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	e9c7 2300 	strd	r2, r3, [r7]
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <TrapezoidalTraj_GetState+0x7a0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe f9f4 	bl	80004a0 <__aeabi_f2d>
 80020b8:	4682      	mov	sl, r0
 80020ba:	468b      	mov	fp, r1
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <TrapezoidalTraj_GetState+0x7a8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe f9ed 	bl	80004a0 <__aeabi_f2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8002128 <TrapezoidalTraj_GetState+0x798>
 80020ce:	ec43 2b10 	vmov	d0, r2, r3
 80020d2:	f003 f81f 	bl	8005114 <pow>
 80020d6:	ec53 2b10 	vmov	r2, r3, d0
 80020da:	4650      	mov	r0, sl
 80020dc:	4659      	mov	r1, fp
 80020de:	f7fe fa37 	bl	8000550 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020ea:	f7fe f879 	bl	80001e0 <__aeabi_dsub>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4640      	mov	r0, r8
 80020f4:	4649      	mov	r1, r9
 80020f6:	f7fe fa2b 	bl	8000550 <__aeabi_dmul>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4620      	mov	r0, r4
 8002100:	4629      	mov	r1, r5
 8002102:	f7fe f86f 	bl	80001e4 <__adddf3>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f7fe fccf 	bl	8000ab0 <__aeabi_d2f>
 8002112:	4603      	mov	r3, r0
 8002114:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <TrapezoidalTraj_GetState+0x7b4>)
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	ecbd 8b02 	vpop	{d8}
 8002122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002126:	bf00      	nop
 8002128:	00000000 	.word	0x00000000
 800212c:	40000000 	.word	0x40000000
 8002130:	2000000c 	.word	0x2000000c
 8002134:	200001dc 	.word	0x200001dc
 8002138:	200001c4 	.word	0x200001c4
 800213c:	200001d8 	.word	0x200001d8
 8002140:	3fe00000 	.word	0x3fe00000
 8002144:	200001d4 	.word	0x200001d4

08002148 <MotorDrive>:

void MotorDrive()
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	if(emer_pushed == 1){
 800214c:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <MotorDrive+0x88>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d13a      	bne.n	80021ca <MotorDrive+0x82>
		if (Duty >= 0)
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <MotorDrive+0x8c>)
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002162:	db13      	blt.n	800218c <MotorDrive+0x44>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002164:	2201      	movs	r2, #1
 8002166:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800216a:	481b      	ldr	r0, [pc, #108]	; (80021d8 <MotorDrive+0x90>)
 800216c:	f000 fed2 	bl	8002f14 <HAL_GPIO_WritePin>

			if (Duty > 9900)
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <MotorDrive+0x8c>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80021dc <MotorDrive+0x94>
 800217a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	dd16      	ble.n	80021b2 <MotorDrive+0x6a>
			{
				Duty = 9900;
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <MotorDrive+0x8c>)
 8002186:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <MotorDrive+0x98>)
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e012      	b.n	80021b2 <MotorDrive+0x6a>
			}
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002192:	4811      	ldr	r0, [pc, #68]	; (80021d8 <MotorDrive+0x90>)
 8002194:	f000 febe 	bl	8002f14 <HAL_GPIO_WritePin>

			if (Duty < -9900)
 8002198:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <MotorDrive+0x8c>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80021e4 <MotorDrive+0x9c>
 80021a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021aa:	d502      	bpl.n	80021b2 <MotorDrive+0x6a>
			{
				Duty = -9900;
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <MotorDrive+0x8c>)
 80021ae:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <MotorDrive+0xa0>)
 80021b0:	601a      	str	r2, [r3, #0]

//		if (fabs(Duty) < 1000)
//		{
//			Duty = 0;
//		}
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fabs(Duty));
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <MotorDrive+0x8c>)
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	eef0 7ae7 	vabs.f32	s15, s15
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MotorDrive+0xa4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021c4:	ee17 2a90 	vmov	r2, s15
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000200 	.word	0x20000200
 80021d8:	40020000 	.word	0x40020000
 80021dc:	461ab000 	.word	0x461ab000
 80021e0:	461ab000 	.word	0x461ab000
 80021e4:	c61ab000 	.word	0xc61ab000
 80021e8:	c61ab000 	.word	0xc61ab000
 80021ec:	200000a4 	.word	0x200000a4

080021f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0)
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002200:	d10e      	bne.n	8002220 <HAL_GPIO_EXTI_Callback+0x30>
 8002202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002206:	4810      	ldr	r0, [pc, #64]	; (8002248 <HAL_GPIO_EXTI_Callback+0x58>)
 8002208:	f000 fe6c 	bl	8002ee4 <HAL_GPIO_ReadPin>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_GPIO_EXTI_Callback+0x30>
	{
		emer_pushed = 0;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_GPIO_EXTI_Callback+0x60>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2200      	movs	r2, #0
 800221e:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1)
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002226:	d10a      	bne.n	800223e <HAL_GPIO_EXTI_Callback+0x4e>
 8002228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800222c:	4806      	ldr	r0, [pc, #24]	; (8002248 <HAL_GPIO_EXTI_Callback+0x58>)
 800222e:	f000 fe59 	bl	8002ee4 <HAL_GPIO_ReadPin>
 8002232:	4603      	mov	r3, r0
 8002234:	2b01      	cmp	r3, #1
 8002236:	d102      	bne.n	800223e <HAL_GPIO_EXTI_Callback+0x4e>
	{
		emer_pushed = 1;
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <HAL_GPIO_EXTI_Callback+0x5c>)
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
	}
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40020400 	.word	0x40020400
 800224c:	20000000 	.word	0x20000000
 8002250:	200000a4 	.word	0x200000a4

08002254 <ControllerState>:

void ControllerState()
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
	static enum {Idle, Follow} state = Idle;

	switch(state)
 800225a:	4b91      	ldr	r3, [pc, #580]	; (80024a0 <ControllerState+0x24c>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <ControllerState+0x14>
 8002262:	2b01      	cmp	r3, #1
 8002264:	d035      	beq.n	80022d2 <ControllerState+0x7e>
		}

	break;
	}

}
 8002266:	e117      	b.n	8002498 <ControllerState+0x244>
		Duty = 0;
 8002268:	4b8e      	ldr	r3, [pc, #568]	; (80024a4 <ControllerState+0x250>)
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8002270:	f7ff ff6a 	bl	8002148 <MotorDrive>
		Pi = QEIData.pos;
 8002274:	4b8c      	ldr	r3, [pc, #560]	; (80024a8 <ControllerState+0x254>)
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	4a8c      	ldr	r2, [pc, #560]	; (80024ac <ControllerState+0x258>)
 800227a:	6013      	str	r3, [r2, #0]
		if(Pf != Pf_last)
 800227c:	4b8c      	ldr	r3, [pc, #560]	; (80024b0 <ControllerState+0x25c>)
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <ControllerState+0x260>)
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	eeb4 7a67 	vcmp.f32	s14, s15
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	f000 8101 	beq.w	8002496 <ControllerState+0x242>
			TrapezoidalTraj_PreCal(Pi, Pf);
 8002294:	4b85      	ldr	r3, [pc, #532]	; (80024ac <ControllerState+0x258>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800229e:	ee17 3a90 	vmov	r3, s15
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	4a82      	ldr	r2, [pc, #520]	; (80024b0 <ControllerState+0x25c>)
 80022a6:	edd2 7a00 	vldr	s15, [r2]
 80022aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ae:	ee17 2a90 	vmov	r2, s15
 80022b2:	b212      	sxth	r2, r2
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff faea 	bl	8001890 <TrapezoidalTraj_PreCal>
			t = 0;
 80022bc:	497e      	ldr	r1, [pc, #504]	; (80024b8 <ControllerState+0x264>)
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	e9c1 2300 	strd	r2, r3, [r1]
			state = Follow;
 80022ca:	4b75      	ldr	r3, [pc, #468]	; (80024a0 <ControllerState+0x24c>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
	break;
 80022d0:	e0e1      	b.n	8002496 <ControllerState+0x242>
		t = t + 1000000/freq;
 80022d2:	4b79      	ldr	r3, [pc, #484]	; (80024b8 <ControllerState+0x264>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f7fe fd00 	bl	8000ce0 <__aeabi_ul2f>
 80022e0:	ee06 0a10 	vmov	s12, r0
 80022e4:	4b75      	ldr	r3, [pc, #468]	; (80024bc <ControllerState+0x268>)
 80022e6:	ed93 7a00 	vldr	s14, [r3]
 80022ea:	eddf 6a75 	vldr	s13, [pc, #468]	; 80024c0 <ControllerState+0x26c>
 80022ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80022f6:	ee17 0a90 	vmov	r0, s15
 80022fa:	f7fe fd4f 	bl	8000d9c <__aeabi_f2ulz>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	496d      	ldr	r1, [pc, #436]	; (80024b8 <ControllerState+0x264>)
 8002304:	e9c1 2300 	strd	r2, r3, [r1]
		if (t <= t_total * 1000000)
 8002308:	4b6b      	ldr	r3, [pc, #428]	; (80024b8 <ControllerState+0x264>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	f7fe fce5 	bl	8000ce0 <__aeabi_ul2f>
 8002316:	ee06 0a90 	vmov	s13, r0
 800231a:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <ControllerState+0x270>)
 800231c:	edd3 7a00 	vldr	s15, [r3]
 8002320:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80024c0 <ControllerState+0x26c>
 8002324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002328:	eef4 6ae7 	vcmpe.f32	s13, s15
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	d816      	bhi.n	8002360 <ControllerState+0x10c>
			TrapezoidalTraj_GetState(Pi, Pf, t);
 8002332:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <ControllerState+0x258>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800233c:	ee17 3a90 	vmov	r3, s15
 8002340:	b218      	sxth	r0, r3
 8002342:	4b5b      	ldr	r3, [pc, #364]	; (80024b0 <ControllerState+0x25c>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800234c:	ee17 3a90 	vmov	r3, s15
 8002350:	b219      	sxth	r1, r3
 8002352:	4b59      	ldr	r3, [pc, #356]	; (80024b8 <ControllerState+0x264>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	4613      	mov	r3, r2
 800235a:	461a      	mov	r2, r3
 800235c:	f7ff fb18 	bl	8001990 <TrapezoidalTraj_GetState>
		vel_des = arm_pid_f32(&Pos_PID, q_des - QEIData.pos);
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <ControllerState+0x274>)
 8002362:	ed93 7a00 	vldr	s14, [r3]
 8002366:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <ControllerState+0x254>)
 8002368:	edd3 7a04 	vldr	s15, [r3, #16]
 800236c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002370:	4b56      	ldr	r3, [pc, #344]	; (80024cc <ControllerState+0x278>)
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	edc7 7a01 	vstr	s15, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	ed93 7a00 	vldr	s14, [r3]
 800237e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002382:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	edd3 6a01 	vldr	s13, [r3, #4]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002392:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002396:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	edd3 6a02 	vldr	s13, [r3, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80023a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80023b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b8:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4a3f      	ldr	r2, [pc, #252]	; (80024d0 <ControllerState+0x27c>)
 80023d4:	6013      	str	r3, [r2, #0]
		Duty = arm_pid_f32(&Vel_PID, vel_des + qdot_des - QEIData.vel);
 80023d6:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <ControllerState+0x27c>)
 80023d8:	ed93 7a00 	vldr	s14, [r3]
 80023dc:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <ControllerState+0x280>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023e6:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <ControllerState+0x254>)
 80023e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80023ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f0:	4b39      	ldr	r3, [pc, #228]	; (80024d8 <ControllerState+0x284>)
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	edc7 7a04 	vstr	s15, [r7, #16]
    out = (S->A0 * in) +
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	ed93 7a00 	vldr	s14, [r3]
 80023fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002402:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	edd3 6a01 	vldr	s13, [r3, #4]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002412:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002416:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	edd3 7a04 	vldr	s15, [r3, #16]
 8002426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002438:	edc7 7a03 	vstr	s15, [r7, #12]
    S->state[1] = S->state[0];
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	615a      	str	r2, [r3, #20]
    return (out);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <ControllerState+0x250>)
 8002454:	6013      	str	r3, [r2, #0]
		MotorDrive();
 8002456:	f7ff fe77 	bl	8002148 <MotorDrive>
		if (t > (t_total * 1000000) + 10000)
 800245a:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <ControllerState+0x264>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fc3c 	bl	8000ce0 <__aeabi_ul2f>
 8002468:	ee06 0a90 	vmov	s13, r0
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <ControllerState+0x270>)
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80024c0 <ControllerState+0x26c>
 8002476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80024dc <ControllerState+0x288>
 800247e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002482:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	dc00      	bgt.n	800248e <ControllerState+0x23a>
	break;
 800248c:	e004      	b.n	8002498 <ControllerState+0x244>
			state = Idle;
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <ControllerState+0x24c>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
	break;
 8002494:	e000      	b.n	8002498 <ControllerState+0x244>
	break;
 8002496:	bf00      	nop
}
 8002498:	bf00      	nop
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000260 	.word	0x20000260
 80024a4:	20000200 	.word	0x20000200
 80024a8:	200001e8 	.word	0x200001e8
 80024ac:	200001c8 	.word	0x200001c8
 80024b0:	200001cc 	.word	0x200001cc
 80024b4:	200001d0 	.word	0x200001d0
 80024b8:	20000258 	.word	0x20000258
 80024bc:	20000004 	.word	0x20000004
 80024c0:	49742400 	.word	0x49742400
 80024c4:	200001c0 	.word	0x200001c0
 80024c8:	200001d4 	.word	0x200001d4
 80024cc:	20000228 	.word	0x20000228
 80024d0:	2000024c 	.word	0x2000024c
 80024d4:	200001d8 	.word	0x200001d8
 80024d8:	20000204 	.word	0x20000204
 80024dc:	461c4000 	.word	0x461c4000

080024e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e4:	b672      	cpsid	i
}
 80024e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <Error_Handler+0x8>
	...

080024ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_MspInit+0x4c>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <HAL_MspInit+0x4c>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_MspInit+0x4c>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_MspInit+0x4c>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_MspInit+0x4c>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_MspInit+0x4c>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800252a:	2007      	movs	r0, #7
 800252c:	f000 fb14 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40023800 	.word	0x40023800

0800253c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <HAL_TIM_Base_MspInit+0x70>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10e      	bne.n	800256c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800256a:	e01a      	b.n	80025a2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <HAL_TIM_Base_MspInit+0x78>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d115      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002580:	f043 0308 	orr.w	r3, r3, #8
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2032      	movs	r0, #50	; 0x32
 8002598:	f000 fae9 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800259c:	2032      	movs	r0, #50	; 0x32
 800259e:	f000 fb02 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40000c00 	.word	0x40000c00

080025b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	; 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1d      	ldr	r2, [pc, #116]	; (800264c <HAL_TIM_Encoder_MspInit+0x94>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d133      	bne.n	8002642 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <HAL_TIM_Encoder_MspInit+0x98>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <HAL_TIM_Encoder_MspInit+0x98>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_TIM_Encoder_MspInit+0x98>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_TIM_Encoder_MspInit+0x98>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a14      	ldr	r2, [pc, #80]	; (8002650 <HAL_TIM_Encoder_MspInit+0x98>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_TIM_Encoder_MspInit+0x98>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002612:	23c0      	movs	r3, #192	; 0xc0
 8002614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002622:	2302      	movs	r3, #2
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4619      	mov	r1, r3
 800262c:	4809      	ldr	r0, [pc, #36]	; (8002654 <HAL_TIM_Encoder_MspInit+0x9c>)
 800262e:	f000 fad5 	bl	8002bdc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	201d      	movs	r0, #29
 8002638:	f000 fa99 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800263c:	201d      	movs	r0, #29
 800263e:	f000 fab2 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002642:	bf00      	nop
 8002644:	3728      	adds	r7, #40	; 0x28
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40000400 	.word	0x40000400
 8002650:	40023800 	.word	0x40023800
 8002654:	40020000 	.word	0x40020000

08002658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 030c 	add.w	r3, r7, #12
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <HAL_TIM_MspPostInit+0x68>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d11e      	bne.n	80026b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_TIM_MspPostInit+0x6c>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <HAL_TIM_MspPostInit+0x6c>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_TIM_MspPostInit+0x6c>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800269a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026a8:	2301      	movs	r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	4619      	mov	r1, r3
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <HAL_TIM_MspPostInit+0x70>)
 80026b4:	f000 fa92 	bl	8002bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026b8:	bf00      	nop
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020000 	.word	0x40020000

080026cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a19      	ldr	r2, [pc, #100]	; (8002750 <HAL_UART_MspInit+0x84>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d12b      	bne.n	8002746 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_UART_MspInit+0x88>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a17      	ldr	r2, [pc, #92]	; (8002754 <HAL_UART_MspInit+0x88>)
 80026f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <HAL_UART_MspInit+0x88>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_UART_MspInit+0x88>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a10      	ldr	r2, [pc, #64]	; (8002754 <HAL_UART_MspInit+0x88>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_UART_MspInit+0x88>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002726:	230c      	movs	r3, #12
 8002728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002732:	2303      	movs	r3, #3
 8002734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002736:	2307      	movs	r3, #7
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	4805      	ldr	r0, [pc, #20]	; (8002758 <HAL_UART_MspInit+0x8c>)
 8002742:	f000 fa4b 	bl	8002bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40004400 	.word	0x40004400
 8002754:	40023800 	.word	0x40023800
 8002758:	40020000 	.word	0x40020000

0800275c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <NMI_Handler+0x4>

08002762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <HardFault_Handler+0x4>

08002768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <MemManage_Handler+0x4>

0800276e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002772:	e7fe      	b.n	8002772 <BusFault_Handler+0x4>

08002774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <UsageFault_Handler+0x4>

0800277a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a8:	f000 f8e6 	bl	8002978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <TIM3_IRQHandler+0x10>)
 80027b6:	f001 fb5f 	bl	8003e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200000ec 	.word	0x200000ec

080027c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80027c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80027cc:	f000 fbbc 	bl	8002f48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80027d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027d4:	f000 fbb8 	bl	8002f48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}

080027dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <TIM5_IRQHandler+0x10>)
 80027e2:	f001 fb49 	bl	8003e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000134 	.word	0x20000134

080027f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <SystemInit+0x20>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <SystemInit+0x20>)
 80027fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800284c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002818:	480d      	ldr	r0, [pc, #52]	; (8002850 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800281a:	490e      	ldr	r1, [pc, #56]	; (8002854 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800281c:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002820:	e002      	b.n	8002828 <LoopCopyDataInit>

08002822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002826:	3304      	adds	r3, #4

08002828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800282a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800282c:	d3f9      	bcc.n	8002822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002830:	4c0b      	ldr	r4, [pc, #44]	; (8002860 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002834:	e001      	b.n	800283a <LoopFillZerobss>

08002836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002838:	3204      	adds	r2, #4

0800283a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800283a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800283c:	d3fb      	bcc.n	8002836 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800283e:	f7ff ffd7 	bl	80027f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002842:	f002 fc3b 	bl	80050bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002846:	f7fe fc53 	bl	80010f0 <main>
  bx  lr    
 800284a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800284c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002854:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002858:	08006018 	.word	0x08006018
  ldr r2, =_sbss
 800285c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002860:	20000268 	.word	0x20000268

08002864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002864:	e7fe      	b.n	8002864 <ADC_IRQHandler>

08002866 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	ed93 7a06 	vldr	s14, [r3, #24]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	edd3 7a07 	vldr	s15, [r3, #28]
 800287c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	edd3 7a08 	vldr	s15, [r3, #32]
 8002886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	edd3 7a06 	vldr	s15, [r3, #24]
 8002896:	eeb1 7a67 	vneg.f32	s14, s15
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	edd3 7a08 	vldr	s15, [r3, #32]
 80028a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1a      	ldr	r2, [r3, #32]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	330c      	adds	r3, #12
 80028c0:	220c      	movs	r2, #12
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f002 fc1d 	bl	8005104 <memset>
  }

}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_Init+0x40>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <HAL_Init+0x40>)
 80028de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_Init+0x40>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <HAL_Init+0x40>)
 80028ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_Init+0x40>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <HAL_Init+0x40>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fc:	2003      	movs	r0, #3
 80028fe:	f000 f92b 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002902:	2000      	movs	r0, #0
 8002904:	f000 f808 	bl	8002918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002908:	f7ff fdf0 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023c00 	.word	0x40023c00

08002918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_InitTick+0x54>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_InitTick+0x58>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800292e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f943 	bl	8002bc2 <HAL_SYSTICK_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e00e      	b.n	8002964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b0f      	cmp	r3, #15
 800294a:	d80a      	bhi.n	8002962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294c:	2200      	movs	r2, #0
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f000 f90b 	bl	8002b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002958:	4a06      	ldr	r2, [pc, #24]	; (8002974 <HAL_InitTick+0x5c>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000018 	.word	0x20000018
 8002970:	20000020 	.word	0x20000020
 8002974:	2000001c 	.word	0x2000001c

08002978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_IncTick+0x20>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_IncTick+0x24>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4413      	add	r3, r2
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <HAL_IncTick+0x24>)
 800298a:	6013      	str	r3, [r2, #0]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000020 	.word	0x20000020
 800299c:	20000264 	.word	0x20000264

080029a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return uwTick;
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_GetTick+0x14>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000264 	.word	0x20000264

080029b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <__NVIC_SetPriorityGrouping+0x44>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d4:	4013      	ands	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ea:	4a04      	ldr	r2, [pc, #16]	; (80029fc <__NVIC_SetPriorityGrouping+0x44>)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	60d3      	str	r3, [r2, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a04:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <__NVIC_GetPriorityGrouping+0x18>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	f003 0307 	and.w	r3, r3, #7
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	db0b      	blt.n	8002a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	4907      	ldr	r1, [pc, #28]	; (8002a54 <__NVIC_EnableIRQ+0x38>)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db0a      	blt.n	8002a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	490c      	ldr	r1, [pc, #48]	; (8002aa4 <__NVIC_SetPriority+0x4c>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a80:	e00a      	b.n	8002a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4908      	ldr	r1, [pc, #32]	; (8002aa8 <__NVIC_SetPriority+0x50>)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	3b04      	subs	r3, #4
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	440b      	add	r3, r1
 8002a96:	761a      	strb	r2, [r3, #24]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e100 	.word	0xe000e100
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	; 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f1c3 0307 	rsb	r3, r3, #7
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	bf28      	it	cs
 8002aca:	2304      	movcs	r3, #4
 8002acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d902      	bls.n	8002adc <NVIC_EncodePriority+0x30>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3b03      	subs	r3, #3
 8002ada:	e000      	b.n	8002ade <NVIC_EncodePriority+0x32>
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	401a      	ands	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af4:	f04f 31ff 	mov.w	r1, #4294967295
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	4313      	orrs	r3, r2
         );
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3724      	adds	r7, #36	; 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b24:	d301      	bcc.n	8002b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00f      	b.n	8002b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <SysTick_Config+0x40>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b32:	210f      	movs	r1, #15
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	f7ff ff8e 	bl	8002a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <SysTick_Config+0x40>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b42:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <SysTick_Config+0x40>)
 8002b44:	2207      	movs	r2, #7
 8002b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	e000e010 	.word	0xe000e010

08002b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ff29 	bl	80029b8 <__NVIC_SetPriorityGrouping>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b80:	f7ff ff3e 	bl	8002a00 <__NVIC_GetPriorityGrouping>
 8002b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	6978      	ldr	r0, [r7, #20]
 8002b8c:	f7ff ff8e 	bl	8002aac <NVIC_EncodePriority>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff5d 	bl	8002a58 <__NVIC_SetPriority>
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff31 	bl	8002a1c <__NVIC_EnableIRQ>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ffa2 	bl	8002b14 <SysTick_Config>
 8002bd0:	4603      	mov	r3, r0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	; 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e159      	b.n	8002eac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	f040 8148 	bne.w	8002ea6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d005      	beq.n	8002c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d130      	bne.n	8002c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	2203      	movs	r2, #3
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c64:	2201      	movs	r2, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 0201 	and.w	r2, r3, #1
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d017      	beq.n	8002ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d123      	bne.n	8002d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	08da      	lsrs	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3208      	adds	r2, #8
 8002ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	220f      	movs	r2, #15
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	08da      	lsrs	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3208      	adds	r2, #8
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0203 	and.w	r2, r3, #3
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a2 	beq.w	8002ea6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <HAL_GPIO_Init+0x2e8>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	4a56      	ldr	r2, [pc, #344]	; (8002ec4 <HAL_GPIO_Init+0x2e8>)
 8002d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d70:	6453      	str	r3, [r2, #68]	; 0x44
 8002d72:	4b54      	ldr	r3, [pc, #336]	; (8002ec4 <HAL_GPIO_Init+0x2e8>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d7e:	4a52      	ldr	r2, [pc, #328]	; (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	3302      	adds	r3, #2
 8002d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	220f      	movs	r2, #15
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a49      	ldr	r2, [pc, #292]	; (8002ecc <HAL_GPIO_Init+0x2f0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d019      	beq.n	8002dde <HAL_GPIO_Init+0x202>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a48      	ldr	r2, [pc, #288]	; (8002ed0 <HAL_GPIO_Init+0x2f4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_GPIO_Init+0x1fe>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a47      	ldr	r2, [pc, #284]	; (8002ed4 <HAL_GPIO_Init+0x2f8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00d      	beq.n	8002dd6 <HAL_GPIO_Init+0x1fa>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a46      	ldr	r2, [pc, #280]	; (8002ed8 <HAL_GPIO_Init+0x2fc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <HAL_GPIO_Init+0x1f6>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a45      	ldr	r2, [pc, #276]	; (8002edc <HAL_GPIO_Init+0x300>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_GPIO_Init+0x1f2>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e008      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dce:	2307      	movs	r3, #7
 8002dd0:	e006      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e004      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e002      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dde:	2300      	movs	r3, #0
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f002 0203 	and.w	r2, r2, #3
 8002de6:	0092      	lsls	r2, r2, #2
 8002de8:	4093      	lsls	r3, r2
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df0:	4935      	ldr	r1, [pc, #212]	; (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfe:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e22:	4a2f      	ldr	r2, [pc, #188]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e28:	4b2d      	ldr	r3, [pc, #180]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e4c:	4a24      	ldr	r2, [pc, #144]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e52:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e76:	4a1a      	ldr	r2, [pc, #104]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7c:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea0:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b0f      	cmp	r3, #15
 8002eb0:	f67f aea2 	bls.w	8002bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3724      	adds	r7, #36	; 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40020800 	.word	0x40020800
 8002ed8:	40020c00 	.word	0x40020c00
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40013c00 	.word	0x40013c00

08002ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	887b      	ldrh	r3, [r7, #2]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	e001      	b.n	8002f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
 8002f20:	4613      	mov	r3, r2
 8002f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f24:	787b      	ldrb	r3, [r7, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2a:	887a      	ldrh	r2, [r7, #2]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f30:	e003      	b.n	8002f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f32:	887b      	ldrh	r3, [r7, #2]
 8002f34:	041a      	lsls	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	619a      	str	r2, [r3, #24]
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f5e:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f942 	bl	80021f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40013c00 	.word	0x40013c00

08002f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e267      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d075      	beq.n	8003082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f96:	4b88      	ldr	r3, [pc, #544]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d00c      	beq.n	8002fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fa2:	4b85      	ldr	r3, [pc, #532]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d112      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fae:	4b82      	ldr	r3, [pc, #520]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fba:	d10b      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	4b7e      	ldr	r3, [pc, #504]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d05b      	beq.n	8003080 <HAL_RCC_OscConfig+0x108>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d157      	bne.n	8003080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e242      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d106      	bne.n	8002fec <HAL_RCC_OscConfig+0x74>
 8002fde:	4b76      	ldr	r3, [pc, #472]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a75      	ldr	r2, [pc, #468]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e01d      	b.n	8003028 <HAL_RCC_OscConfig+0xb0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x98>
 8002ff6:	4b70      	ldr	r3, [pc, #448]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a6f      	ldr	r2, [pc, #444]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6c      	ldr	r2, [pc, #432]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0xb0>
 8003010:	4b69      	ldr	r3, [pc, #420]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a68      	ldr	r2, [pc, #416]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b66      	ldr	r3, [pc, #408]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a65      	ldr	r2, [pc, #404]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7ff fcb6 	bl	80029a0 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003038:	f7ff fcb2 	bl	80029a0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e207      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	4b5b      	ldr	r3, [pc, #364]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0xc0>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7ff fca2 	bl	80029a0 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003060:	f7ff fc9e 	bl	80029a0 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e1f3      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	4b51      	ldr	r3, [pc, #324]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0xe8>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d063      	beq.n	8003156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800308e:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309a:	4b47      	ldr	r3, [pc, #284]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d11c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a6:	4b44      	ldr	r3, [pc, #272]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d116      	bne.n	80030e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b2:	4b41      	ldr	r3, [pc, #260]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_RCC_OscConfig+0x152>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e1c7      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ca:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4937      	ldr	r1, [pc, #220]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	e03a      	b.n	8003156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e8:	4b34      	ldr	r3, [pc, #208]	; (80031bc <HAL_RCC_OscConfig+0x244>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7ff fc57 	bl	80029a0 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f6:	f7ff fc53 	bl	80029a0 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1a8      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003114:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4925      	ldr	r1, [pc, #148]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]
 8003128:	e015      	b.n	8003156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <HAL_RCC_OscConfig+0x244>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7ff fc36 	bl	80029a0 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003138:	f7ff fc32 	bl	80029a0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e187      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d036      	beq.n	80031d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <HAL_RCC_OscConfig+0x248>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003170:	f7ff fc16 	bl	80029a0 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003178:	f7ff fc12 	bl	80029a0 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e167      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_RCC_OscConfig+0x240>)
 800318c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x200>
 8003196:	e01b      	b.n	80031d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCC_OscConfig+0x248>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319e:	f7ff fbff 	bl	80029a0 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a4:	e00e      	b.n	80031c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a6:	f7ff fbfb 	bl	80029a0 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d907      	bls.n	80031c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e150      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
 80031b8:	40023800 	.word	0x40023800
 80031bc:	42470000 	.word	0x42470000
 80031c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c4:	4b88      	ldr	r3, [pc, #544]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 80031c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ea      	bne.n	80031a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8097 	beq.w	800330c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031de:	2300      	movs	r3, #0
 80031e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e2:	4b81      	ldr	r3, [pc, #516]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	4b7d      	ldr	r3, [pc, #500]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	4a7c      	ldr	r2, [pc, #496]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6413      	str	r3, [r2, #64]	; 0x40
 80031fe:	4b7a      	ldr	r3, [pc, #488]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320a:	2301      	movs	r3, #1
 800320c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320e:	4b77      	ldr	r3, [pc, #476]	; (80033ec <HAL_RCC_OscConfig+0x474>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d118      	bne.n	800324c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321a:	4b74      	ldr	r3, [pc, #464]	; (80033ec <HAL_RCC_OscConfig+0x474>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a73      	ldr	r2, [pc, #460]	; (80033ec <HAL_RCC_OscConfig+0x474>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003226:	f7ff fbbb 	bl	80029a0 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322e:	f7ff fbb7 	bl	80029a0 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e10c      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <HAL_RCC_OscConfig+0x474>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d106      	bne.n	8003262 <HAL_RCC_OscConfig+0x2ea>
 8003254:	4b64      	ldr	r3, [pc, #400]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	4a63      	ldr	r2, [pc, #396]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6713      	str	r3, [r2, #112]	; 0x70
 8003260:	e01c      	b.n	800329c <HAL_RCC_OscConfig+0x324>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b05      	cmp	r3, #5
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0x30c>
 800326a:	4b5f      	ldr	r3, [pc, #380]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4a5e      	ldr	r2, [pc, #376]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 8003270:	f043 0304 	orr.w	r3, r3, #4
 8003274:	6713      	str	r3, [r2, #112]	; 0x70
 8003276:	4b5c      	ldr	r3, [pc, #368]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a5b      	ldr	r2, [pc, #364]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0x324>
 8003284:	4b58      	ldr	r3, [pc, #352]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a57      	ldr	r2, [pc, #348]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
 8003290:	4b55      	ldr	r3, [pc, #340]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a54      	ldr	r2, [pc, #336]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d015      	beq.n	80032d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7ff fb7c 	bl	80029a0 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7ff fb78 	bl	80029a0 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e0cb      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c2:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ee      	beq.n	80032ac <HAL_RCC_OscConfig+0x334>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d0:	f7ff fb66 	bl	80029a0 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d8:	f7ff fb62 	bl	80029a0 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e0b5      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ee:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1ee      	bne.n	80032d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003300:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	4a38      	ldr	r2, [pc, #224]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 8003306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80a1 	beq.w	8003458 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003316:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b08      	cmp	r3, #8
 8003320:	d05c      	beq.n	80033dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d141      	bne.n	80033ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332a:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <HAL_RCC_OscConfig+0x478>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7ff fb36 	bl	80029a0 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003338:	f7ff fb32 	bl	80029a0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e087      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334a:	4b27      	ldr	r3, [pc, #156]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69da      	ldr	r2, [r3, #28]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	019b      	lsls	r3, r3, #6
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	3b01      	subs	r3, #1
 8003370:	041b      	lsls	r3, r3, #16
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	491b      	ldr	r1, [pc, #108]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 800337c:	4313      	orrs	r3, r2
 800337e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003380:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_RCC_OscConfig+0x478>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7ff fb0b 	bl	80029a0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800338e:	f7ff fb07 	bl	80029a0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e05c      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x416>
 80033ac:	e054      	b.n	8003458 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_RCC_OscConfig+0x478>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7ff faf4 	bl	80029a0 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033bc:	f7ff faf0 	bl	80029a0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e045      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_RCC_OscConfig+0x470>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x444>
 80033da:	e03d      	b.n	8003458 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e038      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40007000 	.word	0x40007000
 80033f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x4ec>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d028      	beq.n	8003454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d121      	bne.n	8003454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d11a      	bne.n	8003454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003424:	4013      	ands	r3, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800342a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800342c:	4293      	cmp	r3, r2
 800342e:	d111      	bne.n	8003454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	085b      	lsrs	r3, r3, #1
 800343c:	3b01      	subs	r3, #1
 800343e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d107      	bne.n	8003454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800

08003468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0cc      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800347c:	4b68      	ldr	r3, [pc, #416]	; (8003620 <HAL_RCC_ClockConfig+0x1b8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d90c      	bls.n	80034a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b65      	ldr	r3, [pc, #404]	; (8003620 <HAL_RCC_ClockConfig+0x1b8>)
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b63      	ldr	r3, [pc, #396]	; (8003620 <HAL_RCC_ClockConfig+0x1b8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0b8      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d020      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034bc:	4b59      	ldr	r3, [pc, #356]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4a58      	ldr	r2, [pc, #352]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d4:	4b53      	ldr	r3, [pc, #332]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	4a52      	ldr	r2, [pc, #328]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e0:	4b50      	ldr	r3, [pc, #320]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	494d      	ldr	r1, [pc, #308]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d044      	beq.n	8003588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d107      	bne.n	8003516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	4b47      	ldr	r3, [pc, #284]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d119      	bne.n	8003546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e07f      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d003      	beq.n	8003526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003522:	2b03      	cmp	r3, #3
 8003524:	d107      	bne.n	8003536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003526:	4b3f      	ldr	r3, [pc, #252]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e06f      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003536:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e067      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003546:	4b37      	ldr	r3, [pc, #220]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f023 0203 	bic.w	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4934      	ldr	r1, [pc, #208]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	4313      	orrs	r3, r2
 8003556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003558:	f7ff fa22 	bl	80029a0 <HAL_GetTick>
 800355c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355e:	e00a      	b.n	8003576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003560:	f7ff fa1e 	bl	80029a0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	; 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e04f      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003576:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 020c 	and.w	r2, r3, #12
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	429a      	cmp	r2, r3
 8003586:	d1eb      	bne.n	8003560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003588:	4b25      	ldr	r3, [pc, #148]	; (8003620 <HAL_RCC_ClockConfig+0x1b8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d20c      	bcs.n	80035b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b22      	ldr	r3, [pc, #136]	; (8003620 <HAL_RCC_ClockConfig+0x1b8>)
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359e:	4b20      	ldr	r3, [pc, #128]	; (8003620 <HAL_RCC_ClockConfig+0x1b8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e032      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035bc:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4916      	ldr	r1, [pc, #88]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	490e      	ldr	r1, [pc, #56]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ee:	f000 f821 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 80035f2:	4602      	mov	r2, r0
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	091b      	lsrs	r3, r3, #4
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	490a      	ldr	r1, [pc, #40]	; (8003628 <HAL_RCC_ClockConfig+0x1c0>)
 8003600:	5ccb      	ldrb	r3, [r1, r3]
 8003602:	fa22 f303 	lsr.w	r3, r2, r3
 8003606:	4a09      	ldr	r2, [pc, #36]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800360a:	4b09      	ldr	r3, [pc, #36]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff f982 	bl	8002918 <HAL_InitTick>

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023c00 	.word	0x40023c00
 8003624:	40023800 	.word	0x40023800
 8003628:	08005fc0 	.word	0x08005fc0
 800362c:	20000018 	.word	0x20000018
 8003630:	2000001c 	.word	0x2000001c

08003634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003638:	b094      	sub	sp, #80	; 0x50
 800363a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	647b      	str	r3, [r7, #68]	; 0x44
 8003640:	2300      	movs	r3, #0
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003644:	2300      	movs	r3, #0
 8003646:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800364c:	4b79      	ldr	r3, [pc, #484]	; (8003834 <HAL_RCC_GetSysClockFreq+0x200>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b08      	cmp	r3, #8
 8003656:	d00d      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x40>
 8003658:	2b08      	cmp	r3, #8
 800365a:	f200 80e1 	bhi.w	8003820 <HAL_RCC_GetSysClockFreq+0x1ec>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x34>
 8003662:	2b04      	cmp	r3, #4
 8003664:	d003      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x3a>
 8003666:	e0db      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003668:	4b73      	ldr	r3, [pc, #460]	; (8003838 <HAL_RCC_GetSysClockFreq+0x204>)
 800366a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800366c:	e0db      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800366e:	4b73      	ldr	r3, [pc, #460]	; (800383c <HAL_RCC_GetSysClockFreq+0x208>)
 8003670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003672:	e0d8      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003674:	4b6f      	ldr	r3, [pc, #444]	; (8003834 <HAL_RCC_GetSysClockFreq+0x200>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800367c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800367e:	4b6d      	ldr	r3, [pc, #436]	; (8003834 <HAL_RCC_GetSysClockFreq+0x200>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d063      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368a:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <HAL_RCC_GetSysClockFreq+0x200>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	099b      	lsrs	r3, r3, #6
 8003690:	2200      	movs	r2, #0
 8003692:	63bb      	str	r3, [r7, #56]	; 0x38
 8003694:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
 800369e:	2300      	movs	r3, #0
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
 80036a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036a6:	4622      	mov	r2, r4
 80036a8:	462b      	mov	r3, r5
 80036aa:	f04f 0000 	mov.w	r0, #0
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	0159      	lsls	r1, r3, #5
 80036b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b8:	0150      	lsls	r0, r2, #5
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4621      	mov	r1, r4
 80036c0:	1a51      	subs	r1, r2, r1
 80036c2:	6139      	str	r1, [r7, #16]
 80036c4:	4629      	mov	r1, r5
 80036c6:	eb63 0301 	sbc.w	r3, r3, r1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036d8:	4659      	mov	r1, fp
 80036da:	018b      	lsls	r3, r1, #6
 80036dc:	4651      	mov	r1, sl
 80036de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036e2:	4651      	mov	r1, sl
 80036e4:	018a      	lsls	r2, r1, #6
 80036e6:	4651      	mov	r1, sl
 80036e8:	ebb2 0801 	subs.w	r8, r2, r1
 80036ec:	4659      	mov	r1, fp
 80036ee:	eb63 0901 	sbc.w	r9, r3, r1
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003706:	4690      	mov	r8, r2
 8003708:	4699      	mov	r9, r3
 800370a:	4623      	mov	r3, r4
 800370c:	eb18 0303 	adds.w	r3, r8, r3
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	462b      	mov	r3, r5
 8003714:	eb49 0303 	adc.w	r3, r9, r3
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003726:	4629      	mov	r1, r5
 8003728:	024b      	lsls	r3, r1, #9
 800372a:	4621      	mov	r1, r4
 800372c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003730:	4621      	mov	r1, r4
 8003732:	024a      	lsls	r2, r1, #9
 8003734:	4610      	mov	r0, r2
 8003736:	4619      	mov	r1, r3
 8003738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373a:	2200      	movs	r2, #0
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
 800373e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003744:	f7fd fb12 	bl	8000d6c <__aeabi_uldivmod>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4613      	mov	r3, r2
 800374e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003750:	e058      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b38      	ldr	r3, [pc, #224]	; (8003834 <HAL_RCC_GetSysClockFreq+0x200>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	2200      	movs	r2, #0
 800375a:	4618      	mov	r0, r3
 800375c:	4611      	mov	r1, r2
 800375e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003762:	623b      	str	r3, [r7, #32]
 8003764:	2300      	movs	r3, #0
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
 8003768:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800376c:	4642      	mov	r2, r8
 800376e:	464b      	mov	r3, r9
 8003770:	f04f 0000 	mov.w	r0, #0
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	0159      	lsls	r1, r3, #5
 800377a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800377e:	0150      	lsls	r0, r2, #5
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4641      	mov	r1, r8
 8003786:	ebb2 0a01 	subs.w	sl, r2, r1
 800378a:	4649      	mov	r1, r9
 800378c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800379c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037a4:	ebb2 040a 	subs.w	r4, r2, sl
 80037a8:	eb63 050b 	sbc.w	r5, r3, fp
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	00eb      	lsls	r3, r5, #3
 80037b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ba:	00e2      	lsls	r2, r4, #3
 80037bc:	4614      	mov	r4, r2
 80037be:	461d      	mov	r5, r3
 80037c0:	4643      	mov	r3, r8
 80037c2:	18e3      	adds	r3, r4, r3
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	464b      	mov	r3, r9
 80037c8:	eb45 0303 	adc.w	r3, r5, r3
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037da:	4629      	mov	r1, r5
 80037dc:	028b      	lsls	r3, r1, #10
 80037de:	4621      	mov	r1, r4
 80037e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037e4:	4621      	mov	r1, r4
 80037e6:	028a      	lsls	r2, r1, #10
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ee:	2200      	movs	r2, #0
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	61fa      	str	r2, [r7, #28]
 80037f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f8:	f7fd fab8 	bl	8000d6c <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4613      	mov	r3, r2
 8003802:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_GetSysClockFreq+0x200>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	3301      	adds	r3, #1
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003814:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800381e:	e002      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetSysClockFreq+0x204>)
 8003822:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003828:	4618      	mov	r0, r3
 800382a:	3750      	adds	r7, #80	; 0x50
 800382c:	46bd      	mov	sp, r7
 800382e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	00f42400 	.word	0x00f42400
 800383c:	007a1200 	.word	0x007a1200

08003840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_RCC_GetHCLKFreq+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000018 	.word	0x20000018

08003858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800385c:	f7ff fff0 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003860:	4602      	mov	r2, r0
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	4903      	ldr	r1, [pc, #12]	; (800387c <HAL_RCC_GetPCLK1Freq+0x24>)
 800386e:	5ccb      	ldrb	r3, [r1, r3]
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40023800 	.word	0x40023800
 800387c:	08005fd0 	.word	0x08005fd0

08003880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003884:	f7ff ffdc 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0b5b      	lsrs	r3, r3, #13
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4903      	ldr	r1, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	08005fd0 	.word	0x08005fd0

080038a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e041      	b.n	800393e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fe fe34 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f000 fd80 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d001      	beq.n	8003960 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e03c      	b.n	80039da <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1e      	ldr	r2, [pc, #120]	; (80039e8 <HAL_TIM_Base_Start+0xa0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d018      	beq.n	80039a4 <HAL_TIM_Base_Start+0x5c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d013      	beq.n	80039a4 <HAL_TIM_Base_Start+0x5c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1a      	ldr	r2, [pc, #104]	; (80039ec <HAL_TIM_Base_Start+0xa4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00e      	beq.n	80039a4 <HAL_TIM_Base_Start+0x5c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a19      	ldr	r2, [pc, #100]	; (80039f0 <HAL_TIM_Base_Start+0xa8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d009      	beq.n	80039a4 <HAL_TIM_Base_Start+0x5c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a17      	ldr	r2, [pc, #92]	; (80039f4 <HAL_TIM_Base_Start+0xac>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_TIM_Base_Start+0x5c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <HAL_TIM_Base_Start+0xb0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d111      	bne.n	80039c8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d010      	beq.n	80039d8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0201 	orr.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c6:	e007      	b.n	80039d8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40000c00 	.word	0x40000c00
 80039f8:	40014000 	.word	0x40014000

080039fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e041      	b.n	8003a92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f839 	bl	8003a9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f000 fcd6 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_TIM_PWM_Start+0x24>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	bf14      	ite	ne
 8003acc:	2301      	movne	r3, #1
 8003ace:	2300      	moveq	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e022      	b.n	8003b1a <HAL_TIM_PWM_Start+0x6a>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d109      	bne.n	8003aee <HAL_TIM_PWM_Start+0x3e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	bf14      	ite	ne
 8003ae6:	2301      	movne	r3, #1
 8003ae8:	2300      	moveq	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	e015      	b.n	8003b1a <HAL_TIM_PWM_Start+0x6a>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d109      	bne.n	8003b08 <HAL_TIM_PWM_Start+0x58>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e008      	b.n	8003b1a <HAL_TIM_PWM_Start+0x6a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e068      	b.n	8003bf4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_PWM_Start+0x82>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b30:	e013      	b.n	8003b5a <HAL_TIM_PWM_Start+0xaa>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d104      	bne.n	8003b42 <HAL_TIM_PWM_Start+0x92>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b40:	e00b      	b.n	8003b5a <HAL_TIM_PWM_Start+0xaa>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d104      	bne.n	8003b52 <HAL_TIM_PWM_Start+0xa2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b50:	e003      	b.n	8003b5a <HAL_TIM_PWM_Start+0xaa>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2202      	movs	r2, #2
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	6839      	ldr	r1, [r7, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fee8 	bl	8004938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a23      	ldr	r2, [pc, #140]	; (8003bfc <HAL_TIM_PWM_Start+0x14c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d107      	bne.n	8003b82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1d      	ldr	r2, [pc, #116]	; (8003bfc <HAL_TIM_PWM_Start+0x14c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d018      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x10e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b94:	d013      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x10e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <HAL_TIM_PWM_Start+0x150>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00e      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x10e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <HAL_TIM_PWM_Start+0x154>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x10e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_TIM_PWM_Start+0x158>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x10e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a14      	ldr	r2, [pc, #80]	; (8003c0c <HAL_TIM_PWM_Start+0x15c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d111      	bne.n	8003be2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b06      	cmp	r3, #6
 8003bce:	d010      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be0:	e007      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40000c00 	.word	0x40000c00
 8003c0c:	40014000 	.word	0x40014000

08003c10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e097      	b.n	8003d54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fe fcbd 	bl	80025b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c54:	f023 0307 	bic.w	r3, r3, #7
 8003c58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	f000 fbc1 	bl	80043ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003cb0:	f023 030c 	bic.w	r3, r3, #12
 8003cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	011a      	lsls	r2, r3, #4
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	031b      	lsls	r3, r3, #12
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003cee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003cf6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	4313      	orrs	r3, r2
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d110      	bne.n	8003dae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d102      	bne.n	8003d98 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d92:	7b7b      	ldrb	r3, [r7, #13]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d001      	beq.n	8003d9c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e069      	b.n	8003e70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dac:	e031      	b.n	8003e12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d110      	bne.n	8003dd6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003db4:	7bbb      	ldrb	r3, [r7, #14]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d102      	bne.n	8003dc0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dba:	7b3b      	ldrb	r3, [r7, #12]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d001      	beq.n	8003dc4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e055      	b.n	8003e70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dd4:	e01d      	b.n	8003e12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d108      	bne.n	8003dee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ddc:	7bbb      	ldrb	r3, [r7, #14]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d105      	bne.n	8003dee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003de2:	7b7b      	ldrb	r3, [r7, #13]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d102      	bne.n	8003dee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003de8:	7b3b      	ldrb	r3, [r7, #12]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d001      	beq.n	8003df2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e03e      	b.n	8003e70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_TIM_Encoder_Start+0xc4>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d008      	beq.n	8003e30 <HAL_TIM_Encoder_Start+0xd4>
 8003e1e:	e00f      	b.n	8003e40 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2201      	movs	r2, #1
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fd85 	bl	8004938 <TIM_CCxChannelCmd>
      break;
 8003e2e:	e016      	b.n	8003e5e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2201      	movs	r2, #1
 8003e36:	2104      	movs	r1, #4
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fd7d 	bl	8004938 <TIM_CCxChannelCmd>
      break;
 8003e3e:	e00e      	b.n	8003e5e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2201      	movs	r2, #1
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fd75 	bl	8004938 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2201      	movs	r2, #1
 8003e54:	2104      	movs	r1, #4
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fd6e 	bl	8004938 <TIM_CCxChannelCmd>
      break;
 8003e5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d122      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d11b      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0202 	mvn.w	r2, #2
 8003ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fa77 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 8003ec0:	e005      	b.n	8003ece <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fa69 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fa7a 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d122      	bne.n	8003f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d11b      	bne.n	8003f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0204 	mvn.w	r2, #4
 8003ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2202      	movs	r2, #2
 8003efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa4d 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fa3f 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fa50 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d122      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d11b      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0208 	mvn.w	r2, #8
 8003f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2204      	movs	r2, #4
 8003f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fa23 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 8003f68:	e005      	b.n	8003f76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fa15 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fa26 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d122      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d11b      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0210 	mvn.w	r2, #16
 8003fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f9f9 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f9eb 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f9fc 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d10e      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d107      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0201 	mvn.w	r2, #1
 8003ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fd fb5e 	bl	80016b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004006:	2b80      	cmp	r3, #128	; 0x80
 8004008:	d10e      	bne.n	8004028 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004014:	2b80      	cmp	r3, #128	; 0x80
 8004016:	d107      	bne.n	8004028 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fd78 	bl	8004b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b40      	cmp	r3, #64	; 0x40
 8004034:	d10e      	bne.n	8004054 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d107      	bne.n	8004054 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f9c1 	bl	80043d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b20      	cmp	r3, #32
 8004060:	d10e      	bne.n	8004080 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b20      	cmp	r3, #32
 800406e:	d107      	bne.n	8004080 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0220 	mvn.w	r2, #32
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fd42 	bl	8004b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e0ae      	b.n	8004204 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b0c      	cmp	r3, #12
 80040b2:	f200 809f 	bhi.w	80041f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040b6:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	080040f1 	.word	0x080040f1
 80040c0:	080041f5 	.word	0x080041f5
 80040c4:	080041f5 	.word	0x080041f5
 80040c8:	080041f5 	.word	0x080041f5
 80040cc:	08004131 	.word	0x08004131
 80040d0:	080041f5 	.word	0x080041f5
 80040d4:	080041f5 	.word	0x080041f5
 80040d8:	080041f5 	.word	0x080041f5
 80040dc:	08004173 	.word	0x08004173
 80040e0:	080041f5 	.word	0x080041f5
 80040e4:	080041f5 	.word	0x080041f5
 80040e8:	080041f5 	.word	0x080041f5
 80040ec:	080041b3 	.word	0x080041b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 f9f8 	bl	80044ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0208 	orr.w	r2, r2, #8
 800410a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0204 	bic.w	r2, r2, #4
 800411a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6999      	ldr	r1, [r3, #24]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	619a      	str	r2, [r3, #24]
      break;
 800412e:	e064      	b.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fa3e 	bl	80045b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800414a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6999      	ldr	r1, [r3, #24]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	021a      	lsls	r2, r3, #8
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	619a      	str	r2, [r3, #24]
      break;
 8004170:	e043      	b.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fa89 	bl	8004690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0208 	orr.w	r2, r2, #8
 800418c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69da      	ldr	r2, [r3, #28]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0204 	bic.w	r2, r2, #4
 800419c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69d9      	ldr	r1, [r3, #28]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	61da      	str	r2, [r3, #28]
      break;
 80041b0:	e023      	b.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fad3 	bl	8004764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69d9      	ldr	r1, [r3, #28]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	021a      	lsls	r2, r3, #8
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	61da      	str	r2, [r3, #28]
      break;
 80041f2:	e002      	b.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	75fb      	strb	r3, [r7, #23]
      break;
 80041f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004202:	7dfb      	ldrb	r3, [r7, #23]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_TIM_ConfigClockSource+0x1c>
 8004224:	2302      	movs	r3, #2
 8004226:	e0b4      	b.n	8004392 <HAL_TIM_ConfigClockSource+0x186>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004260:	d03e      	beq.n	80042e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004266:	f200 8087 	bhi.w	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426e:	f000 8086 	beq.w	800437e <HAL_TIM_ConfigClockSource+0x172>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d87f      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 8004278:	2b70      	cmp	r3, #112	; 0x70
 800427a:	d01a      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0xa6>
 800427c:	2b70      	cmp	r3, #112	; 0x70
 800427e:	d87b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 8004280:	2b60      	cmp	r3, #96	; 0x60
 8004282:	d050      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x11a>
 8004284:	2b60      	cmp	r3, #96	; 0x60
 8004286:	d877      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 8004288:	2b50      	cmp	r3, #80	; 0x50
 800428a:	d03c      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0xfa>
 800428c:	2b50      	cmp	r3, #80	; 0x50
 800428e:	d873      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d058      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x13a>
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d86f      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 8004298:	2b30      	cmp	r3, #48	; 0x30
 800429a:	d064      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15a>
 800429c:	2b30      	cmp	r3, #48	; 0x30
 800429e:	d86b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d060      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15a>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d867      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05c      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15a>
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d05a      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15a>
 80042b0:	e062      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6899      	ldr	r1, [r3, #8]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f000 fb19 	bl	80048f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	609a      	str	r2, [r3, #8]
      break;
 80042de:	e04f      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6899      	ldr	r1, [r3, #8]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f000 fb02 	bl	80048f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004302:	609a      	str	r2, [r3, #8]
      break;
 8004304:	e03c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	461a      	mov	r2, r3
 8004314:	f000 fa76 	bl	8004804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2150      	movs	r1, #80	; 0x50
 800431e:	4618      	mov	r0, r3
 8004320:	f000 facf 	bl	80048c2 <TIM_ITRx_SetConfig>
      break;
 8004324:	e02c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	461a      	mov	r2, r3
 8004334:	f000 fa95 	bl	8004862 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2160      	movs	r1, #96	; 0x60
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fabf 	bl	80048c2 <TIM_ITRx_SetConfig>
      break;
 8004344:	e01c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	461a      	mov	r2, r3
 8004354:	f000 fa56 	bl	8004804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	4618      	mov	r0, r3
 8004360:	f000 faaf 	bl	80048c2 <TIM_ITRx_SetConfig>
      break;
 8004364:	e00c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f000 faa6 	bl	80048c2 <TIM_ITRx_SetConfig>
      break;
 8004376:	e003      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      break;
 800437c:	e000      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800437e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a34      	ldr	r2, [pc, #208]	; (80044d0 <TIM_Base_SetConfig+0xe4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00f      	beq.n	8004424 <TIM_Base_SetConfig+0x38>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440a:	d00b      	beq.n	8004424 <TIM_Base_SetConfig+0x38>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a31      	ldr	r2, [pc, #196]	; (80044d4 <TIM_Base_SetConfig+0xe8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d007      	beq.n	8004424 <TIM_Base_SetConfig+0x38>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a30      	ldr	r2, [pc, #192]	; (80044d8 <TIM_Base_SetConfig+0xec>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_Base_SetConfig+0x38>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a2f      	ldr	r2, [pc, #188]	; (80044dc <TIM_Base_SetConfig+0xf0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d108      	bne.n	8004436 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <TIM_Base_SetConfig+0xe4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01b      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004444:	d017      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a22      	ldr	r2, [pc, #136]	; (80044d4 <TIM_Base_SetConfig+0xe8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a21      	ldr	r2, [pc, #132]	; (80044d8 <TIM_Base_SetConfig+0xec>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00f      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a20      	ldr	r2, [pc, #128]	; (80044dc <TIM_Base_SetConfig+0xf0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00b      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <TIM_Base_SetConfig+0xf4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <TIM_Base_SetConfig+0xf8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <TIM_Base_SetConfig+0xfc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d108      	bne.n	8004488 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <TIM_Base_SetConfig+0xe4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d103      	bne.n	80044bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	615a      	str	r2, [r3, #20]
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40010000 	.word	0x40010000
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40000c00 	.word	0x40000c00
 80044e0:	40014000 	.word	0x40014000
 80044e4:	40014400 	.word	0x40014400
 80044e8:	40014800 	.word	0x40014800

080044ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f023 0201 	bic.w	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f023 0302 	bic.w	r3, r3, #2
 8004534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a1c      	ldr	r2, [pc, #112]	; (80045b4 <TIM_OC1_SetConfig+0xc8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d10c      	bne.n	8004562 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f023 0308 	bic.w	r3, r3, #8
 800454e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f023 0304 	bic.w	r3, r3, #4
 8004560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <TIM_OC1_SetConfig+0xc8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d111      	bne.n	800458e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	621a      	str	r2, [r3, #32]
}
 80045a8:	bf00      	nop
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	40010000 	.word	0x40010000

080045b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f023 0210 	bic.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f023 0320 	bic.w	r3, r3, #32
 8004602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a1e      	ldr	r2, [pc, #120]	; (800468c <TIM_OC2_SetConfig+0xd4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d10d      	bne.n	8004634 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800461e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004632:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a15      	ldr	r2, [pc, #84]	; (800468c <TIM_OC2_SetConfig+0xd4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d113      	bne.n	8004664 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800464a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40010000 	.word	0x40010000

08004690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0303 	bic.w	r3, r3, #3
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a1d      	ldr	r2, [pc, #116]	; (8004760 <TIM_OC3_SetConfig+0xd0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d10d      	bne.n	800470a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a14      	ldr	r2, [pc, #80]	; (8004760 <TIM_OC3_SetConfig+0xd0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d113      	bne.n	800473a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	621a      	str	r2, [r3, #32]
}
 8004754:	bf00      	nop
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	40010000 	.word	0x40010000

08004764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a10      	ldr	r2, [pc, #64]	; (8004800 <TIM_OC4_SetConfig+0x9c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d109      	bne.n	80047d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	019b      	lsls	r3, r3, #6
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40010000 	.word	0x40010000

08004804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f023 0201 	bic.w	r2, r3, #1
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800482e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f023 030a 	bic.w	r3, r3, #10
 8004840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004862:	b480      	push	{r7}
 8004864:	b087      	sub	sp, #28
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f023 0210 	bic.w	r2, r3, #16
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800488c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	031b      	lsls	r3, r3, #12
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800489e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	f043 0307 	orr.w	r3, r3, #7
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	609a      	str	r2, [r3, #8]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	021a      	lsls	r2, r3, #8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	431a      	orrs	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4313      	orrs	r3, r2
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	609a      	str	r2, [r3, #8]
}
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	2201      	movs	r2, #1
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a1a      	ldr	r2, [r3, #32]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	43db      	mvns	r3, r3
 800495a:	401a      	ands	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a1a      	ldr	r2, [r3, #32]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	fa01 f303 	lsl.w	r3, r1, r3
 8004970:	431a      	orrs	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004998:	2302      	movs	r3, #2
 800499a:	e050      	b.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1c      	ldr	r2, [pc, #112]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d018      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d013      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00e      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a16      	ldr	r2, [pc, #88]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10c      	bne.n	8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800
 8004a58:	40000c00 	.word	0x40000c00
 8004a5c:	40014000 	.word	0x40014000

08004a60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e03d      	b.n	8004af8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e03f      	b.n	8004bbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fd fdba 	bl	80026cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2224      	movs	r2, #36	; 0x24
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f829 	bl	8004bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695a      	ldr	r2, [r3, #20]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bcc:	b0c0      	sub	sp, #256	; 0x100
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be4:	68d9      	ldr	r1, [r3, #12]
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	ea40 0301 	orr.w	r3, r0, r1
 8004bf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c20:	f021 010c 	bic.w	r1, r1, #12
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c42:	6999      	ldr	r1, [r3, #24]
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	ea40 0301 	orr.w	r3, r0, r1
 8004c4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4b8f      	ldr	r3, [pc, #572]	; (8004e94 <UART_SetConfig+0x2cc>)
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d005      	beq.n	8004c68 <UART_SetConfig+0xa0>
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	4b8d      	ldr	r3, [pc, #564]	; (8004e98 <UART_SetConfig+0x2d0>)
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d104      	bne.n	8004c72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c68:	f7fe fe0a 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8004c6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c70:	e003      	b.n	8004c7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c72:	f7fe fdf1 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004c76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c84:	f040 810c 	bne.w	8004ea0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	462b      	mov	r3, r5
 8004c9e:	1891      	adds	r1, r2, r2
 8004ca0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ca2:	415b      	adcs	r3, r3
 8004ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004caa:	4621      	mov	r1, r4
 8004cac:	eb12 0801 	adds.w	r8, r2, r1
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	eb43 0901 	adc.w	r9, r3, r1
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cca:	4690      	mov	r8, r2
 8004ccc:	4699      	mov	r9, r3
 8004cce:	4623      	mov	r3, r4
 8004cd0:	eb18 0303 	adds.w	r3, r8, r3
 8004cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cd8:	462b      	mov	r3, r5
 8004cda:	eb49 0303 	adc.w	r3, r9, r3
 8004cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	18db      	adds	r3, r3, r3
 8004cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	eb42 0303 	adc.w	r3, r2, r3
 8004d02:	657b      	str	r3, [r7, #84]	; 0x54
 8004d04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d0c:	f7fc f82e 	bl	8000d6c <__aeabi_uldivmod>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4b61      	ldr	r3, [pc, #388]	; (8004e9c <UART_SetConfig+0x2d4>)
 8004d16:	fba3 2302 	umull	r2, r3, r3, r2
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	011c      	lsls	r4, r3, #4
 8004d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d30:	4642      	mov	r2, r8
 8004d32:	464b      	mov	r3, r9
 8004d34:	1891      	adds	r1, r2, r2
 8004d36:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d38:	415b      	adcs	r3, r3
 8004d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d40:	4641      	mov	r1, r8
 8004d42:	eb12 0a01 	adds.w	sl, r2, r1
 8004d46:	4649      	mov	r1, r9
 8004d48:	eb43 0b01 	adc.w	fp, r3, r1
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d60:	4692      	mov	sl, r2
 8004d62:	469b      	mov	fp, r3
 8004d64:	4643      	mov	r3, r8
 8004d66:	eb1a 0303 	adds.w	r3, sl, r3
 8004d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d6e:	464b      	mov	r3, r9
 8004d70:	eb4b 0303 	adc.w	r3, fp, r3
 8004d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	18db      	adds	r3, r3, r3
 8004d90:	643b      	str	r3, [r7, #64]	; 0x40
 8004d92:	4613      	mov	r3, r2
 8004d94:	eb42 0303 	adc.w	r3, r2, r3
 8004d98:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004da2:	f7fb ffe3 	bl	8000d6c <__aeabi_uldivmod>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4611      	mov	r1, r2
 8004dac:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <UART_SetConfig+0x2d4>)
 8004dae:	fba3 2301 	umull	r2, r3, r3, r1
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	2264      	movs	r2, #100	; 0x64
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	1acb      	subs	r3, r1, r3
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dc2:	4b36      	ldr	r3, [pc, #216]	; (8004e9c <UART_SetConfig+0x2d4>)
 8004dc4:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dd0:	441c      	add	r4, r3
 8004dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ddc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004de0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004de4:	4642      	mov	r2, r8
 8004de6:	464b      	mov	r3, r9
 8004de8:	1891      	adds	r1, r2, r2
 8004dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dec:	415b      	adcs	r3, r3
 8004dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004df4:	4641      	mov	r1, r8
 8004df6:	1851      	adds	r1, r2, r1
 8004df8:	6339      	str	r1, [r7, #48]	; 0x30
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	414b      	adcs	r3, r1
 8004dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e0c:	4659      	mov	r1, fp
 8004e0e:	00cb      	lsls	r3, r1, #3
 8004e10:	4651      	mov	r1, sl
 8004e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e16:	4651      	mov	r1, sl
 8004e18:	00ca      	lsls	r2, r1, #3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4642      	mov	r2, r8
 8004e22:	189b      	adds	r3, r3, r2
 8004e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e28:	464b      	mov	r3, r9
 8004e2a:	460a      	mov	r2, r1
 8004e2c:	eb42 0303 	adc.w	r3, r2, r3
 8004e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e48:	460b      	mov	r3, r1
 8004e4a:	18db      	adds	r3, r3, r3
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4e:	4613      	mov	r3, r2
 8004e50:	eb42 0303 	adc.w	r3, r2, r3
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e5e:	f7fb ff85 	bl	8000d6c <__aeabi_uldivmod>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <UART_SetConfig+0x2d4>)
 8004e68:	fba3 1302 	umull	r1, r3, r3, r2
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	2164      	movs	r1, #100	; 0x64
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	3332      	adds	r3, #50	; 0x32
 8004e7a:	4a08      	ldr	r2, [pc, #32]	; (8004e9c <UART_SetConfig+0x2d4>)
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	f003 0207 	and.w	r2, r3, #7
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4422      	add	r2, r4
 8004e8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e90:	e105      	b.n	800509e <UART_SetConfig+0x4d6>
 8004e92:	bf00      	nop
 8004e94:	40011000 	.word	0x40011000
 8004e98:	40011400 	.word	0x40011400
 8004e9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004eaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004eae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004eb2:	4642      	mov	r2, r8
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	1891      	adds	r1, r2, r2
 8004eb8:	6239      	str	r1, [r7, #32]
 8004eba:	415b      	adcs	r3, r3
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	1854      	adds	r4, r2, r1
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	eb43 0501 	adc.w	r5, r3, r1
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	00eb      	lsls	r3, r5, #3
 8004ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eda:	00e2      	lsls	r2, r4, #3
 8004edc:	4614      	mov	r4, r2
 8004ede:	461d      	mov	r5, r3
 8004ee0:	4643      	mov	r3, r8
 8004ee2:	18e3      	adds	r3, r4, r3
 8004ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ee8:	464b      	mov	r3, r9
 8004eea:	eb45 0303 	adc.w	r3, r5, r3
 8004eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004efe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f0e:	4629      	mov	r1, r5
 8004f10:	008b      	lsls	r3, r1, #2
 8004f12:	4621      	mov	r1, r4
 8004f14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f18:	4621      	mov	r1, r4
 8004f1a:	008a      	lsls	r2, r1, #2
 8004f1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f20:	f7fb ff24 	bl	8000d6c <__aeabi_uldivmod>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4b60      	ldr	r3, [pc, #384]	; (80050ac <UART_SetConfig+0x4e4>)
 8004f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	011c      	lsls	r4, r3, #4
 8004f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f44:	4642      	mov	r2, r8
 8004f46:	464b      	mov	r3, r9
 8004f48:	1891      	adds	r1, r2, r2
 8004f4a:	61b9      	str	r1, [r7, #24]
 8004f4c:	415b      	adcs	r3, r3
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f54:	4641      	mov	r1, r8
 8004f56:	1851      	adds	r1, r2, r1
 8004f58:	6139      	str	r1, [r7, #16]
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	414b      	adcs	r3, r1
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f6c:	4659      	mov	r1, fp
 8004f6e:	00cb      	lsls	r3, r1, #3
 8004f70:	4651      	mov	r1, sl
 8004f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f76:	4651      	mov	r1, sl
 8004f78:	00ca      	lsls	r2, r1, #3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4642      	mov	r2, r8
 8004f82:	189b      	adds	r3, r3, r2
 8004f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f88:	464b      	mov	r3, r9
 8004f8a:	460a      	mov	r2, r1
 8004f8c:	eb42 0303 	adc.w	r3, r2, r3
 8004f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fac:	4649      	mov	r1, r9
 8004fae:	008b      	lsls	r3, r1, #2
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	008a      	lsls	r2, r1, #2
 8004fba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fbe:	f7fb fed5 	bl	8000d6c <__aeabi_uldivmod>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4b39      	ldr	r3, [pc, #228]	; (80050ac <UART_SetConfig+0x4e4>)
 8004fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	2164      	movs	r1, #100	; 0x64
 8004fd0:	fb01 f303 	mul.w	r3, r1, r3
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	3332      	adds	r3, #50	; 0x32
 8004fda:	4a34      	ldr	r2, [pc, #208]	; (80050ac <UART_SetConfig+0x4e4>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe6:	441c      	add	r4, r3
 8004fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fec:	2200      	movs	r2, #0
 8004fee:	673b      	str	r3, [r7, #112]	; 0x70
 8004ff0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ff2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ff6:	4642      	mov	r2, r8
 8004ff8:	464b      	mov	r3, r9
 8004ffa:	1891      	adds	r1, r2, r2
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	415b      	adcs	r3, r3
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005006:	4641      	mov	r1, r8
 8005008:	1851      	adds	r1, r2, r1
 800500a:	6039      	str	r1, [r7, #0]
 800500c:	4649      	mov	r1, r9
 800500e:	414b      	adcs	r3, r1
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800501e:	4659      	mov	r1, fp
 8005020:	00cb      	lsls	r3, r1, #3
 8005022:	4651      	mov	r1, sl
 8005024:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005028:	4651      	mov	r1, sl
 800502a:	00ca      	lsls	r2, r1, #3
 800502c:	4610      	mov	r0, r2
 800502e:	4619      	mov	r1, r3
 8005030:	4603      	mov	r3, r0
 8005032:	4642      	mov	r2, r8
 8005034:	189b      	adds	r3, r3, r2
 8005036:	66bb      	str	r3, [r7, #104]	; 0x68
 8005038:	464b      	mov	r3, r9
 800503a:	460a      	mov	r2, r1
 800503c:	eb42 0303 	adc.w	r3, r2, r3
 8005040:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	663b      	str	r3, [r7, #96]	; 0x60
 800504c:	667a      	str	r2, [r7, #100]	; 0x64
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800505a:	4649      	mov	r1, r9
 800505c:	008b      	lsls	r3, r1, #2
 800505e:	4641      	mov	r1, r8
 8005060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005064:	4641      	mov	r1, r8
 8005066:	008a      	lsls	r2, r1, #2
 8005068:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800506c:	f7fb fe7e 	bl	8000d6c <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <UART_SetConfig+0x4e4>)
 8005076:	fba3 1302 	umull	r1, r3, r3, r2
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	2164      	movs	r1, #100	; 0x64
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	3332      	adds	r3, #50	; 0x32
 8005088:	4a08      	ldr	r2, [pc, #32]	; (80050ac <UART_SetConfig+0x4e4>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4422      	add	r2, r4
 800509c:	609a      	str	r2, [r3, #8]
}
 800509e:	bf00      	nop
 80050a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050a4:	46bd      	mov	sp, r7
 80050a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050aa:	bf00      	nop
 80050ac:	51eb851f 	.word	0x51eb851f

080050b0 <__errno>:
 80050b0:	4b01      	ldr	r3, [pc, #4]	; (80050b8 <__errno+0x8>)
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000024 	.word	0x20000024

080050bc <__libc_init_array>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	4d0d      	ldr	r5, [pc, #52]	; (80050f4 <__libc_init_array+0x38>)
 80050c0:	4c0d      	ldr	r4, [pc, #52]	; (80050f8 <__libc_init_array+0x3c>)
 80050c2:	1b64      	subs	r4, r4, r5
 80050c4:	10a4      	asrs	r4, r4, #2
 80050c6:	2600      	movs	r6, #0
 80050c8:	42a6      	cmp	r6, r4
 80050ca:	d109      	bne.n	80050e0 <__libc_init_array+0x24>
 80050cc:	4d0b      	ldr	r5, [pc, #44]	; (80050fc <__libc_init_array+0x40>)
 80050ce:	4c0c      	ldr	r4, [pc, #48]	; (8005100 <__libc_init_array+0x44>)
 80050d0:	f000 ff68 	bl	8005fa4 <_init>
 80050d4:	1b64      	subs	r4, r4, r5
 80050d6:	10a4      	asrs	r4, r4, #2
 80050d8:	2600      	movs	r6, #0
 80050da:	42a6      	cmp	r6, r4
 80050dc:	d105      	bne.n	80050ea <__libc_init_array+0x2e>
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e4:	4798      	blx	r3
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7ee      	b.n	80050c8 <__libc_init_array+0xc>
 80050ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ee:	4798      	blx	r3
 80050f0:	3601      	adds	r6, #1
 80050f2:	e7f2      	b.n	80050da <__libc_init_array+0x1e>
 80050f4:	08006010 	.word	0x08006010
 80050f8:	08006010 	.word	0x08006010
 80050fc:	08006010 	.word	0x08006010
 8005100:	08006014 	.word	0x08006014

08005104 <memset>:
 8005104:	4402      	add	r2, r0
 8005106:	4603      	mov	r3, r0
 8005108:	4293      	cmp	r3, r2
 800510a:	d100      	bne.n	800510e <memset+0xa>
 800510c:	4770      	bx	lr
 800510e:	f803 1b01 	strb.w	r1, [r3], #1
 8005112:	e7f9      	b.n	8005108 <memset+0x4>

08005114 <pow>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	ed2d 8b02 	vpush	{d8}
 800511a:	eeb0 8a40 	vmov.f32	s16, s0
 800511e:	eef0 8a60 	vmov.f32	s17, s1
 8005122:	ec55 4b11 	vmov	r4, r5, d1
 8005126:	f000 f893 	bl	8005250 <__ieee754_pow>
 800512a:	4622      	mov	r2, r4
 800512c:	462b      	mov	r3, r5
 800512e:	4620      	mov	r0, r4
 8005130:	4629      	mov	r1, r5
 8005132:	ec57 6b10 	vmov	r6, r7, d0
 8005136:	f7fb fca5 	bl	8000a84 <__aeabi_dcmpun>
 800513a:	2800      	cmp	r0, #0
 800513c:	d13b      	bne.n	80051b6 <pow+0xa2>
 800513e:	ec51 0b18 	vmov	r0, r1, d8
 8005142:	2200      	movs	r2, #0
 8005144:	2300      	movs	r3, #0
 8005146:	f7fb fc6b 	bl	8000a20 <__aeabi_dcmpeq>
 800514a:	b1b8      	cbz	r0, 800517c <pow+0x68>
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	4620      	mov	r0, r4
 8005152:	4629      	mov	r1, r5
 8005154:	f7fb fc64 	bl	8000a20 <__aeabi_dcmpeq>
 8005158:	2800      	cmp	r0, #0
 800515a:	d146      	bne.n	80051ea <pow+0xd6>
 800515c:	ec45 4b10 	vmov	d0, r4, r5
 8005160:	f000 fe8f 	bl	8005e82 <finite>
 8005164:	b338      	cbz	r0, 80051b6 <pow+0xa2>
 8005166:	2200      	movs	r2, #0
 8005168:	2300      	movs	r3, #0
 800516a:	4620      	mov	r0, r4
 800516c:	4629      	mov	r1, r5
 800516e:	f7fb fc61 	bl	8000a34 <__aeabi_dcmplt>
 8005172:	b300      	cbz	r0, 80051b6 <pow+0xa2>
 8005174:	f7ff ff9c 	bl	80050b0 <__errno>
 8005178:	2322      	movs	r3, #34	; 0x22
 800517a:	e01b      	b.n	80051b4 <pow+0xa0>
 800517c:	ec47 6b10 	vmov	d0, r6, r7
 8005180:	f000 fe7f 	bl	8005e82 <finite>
 8005184:	b9e0      	cbnz	r0, 80051c0 <pow+0xac>
 8005186:	eeb0 0a48 	vmov.f32	s0, s16
 800518a:	eef0 0a68 	vmov.f32	s1, s17
 800518e:	f000 fe78 	bl	8005e82 <finite>
 8005192:	b1a8      	cbz	r0, 80051c0 <pow+0xac>
 8005194:	ec45 4b10 	vmov	d0, r4, r5
 8005198:	f000 fe73 	bl	8005e82 <finite>
 800519c:	b180      	cbz	r0, 80051c0 <pow+0xac>
 800519e:	4632      	mov	r2, r6
 80051a0:	463b      	mov	r3, r7
 80051a2:	4630      	mov	r0, r6
 80051a4:	4639      	mov	r1, r7
 80051a6:	f7fb fc6d 	bl	8000a84 <__aeabi_dcmpun>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d0e2      	beq.n	8005174 <pow+0x60>
 80051ae:	f7ff ff7f 	bl	80050b0 <__errno>
 80051b2:	2321      	movs	r3, #33	; 0x21
 80051b4:	6003      	str	r3, [r0, #0]
 80051b6:	ecbd 8b02 	vpop	{d8}
 80051ba:	ec47 6b10 	vmov	d0, r6, r7
 80051be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c0:	2200      	movs	r2, #0
 80051c2:	2300      	movs	r3, #0
 80051c4:	4630      	mov	r0, r6
 80051c6:	4639      	mov	r1, r7
 80051c8:	f7fb fc2a 	bl	8000a20 <__aeabi_dcmpeq>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d0f2      	beq.n	80051b6 <pow+0xa2>
 80051d0:	eeb0 0a48 	vmov.f32	s0, s16
 80051d4:	eef0 0a68 	vmov.f32	s1, s17
 80051d8:	f000 fe53 	bl	8005e82 <finite>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d0ea      	beq.n	80051b6 <pow+0xa2>
 80051e0:	ec45 4b10 	vmov	d0, r4, r5
 80051e4:	f000 fe4d 	bl	8005e82 <finite>
 80051e8:	e7c3      	b.n	8005172 <pow+0x5e>
 80051ea:	4f01      	ldr	r7, [pc, #4]	; (80051f0 <pow+0xdc>)
 80051ec:	2600      	movs	r6, #0
 80051ee:	e7e2      	b.n	80051b6 <pow+0xa2>
 80051f0:	3ff00000 	.word	0x3ff00000

080051f4 <sqrt>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	ed2d 8b02 	vpush	{d8}
 80051fa:	ec55 4b10 	vmov	r4, r5, d0
 80051fe:	f000 fd55 	bl	8005cac <__ieee754_sqrt>
 8005202:	4622      	mov	r2, r4
 8005204:	462b      	mov	r3, r5
 8005206:	4620      	mov	r0, r4
 8005208:	4629      	mov	r1, r5
 800520a:	eeb0 8a40 	vmov.f32	s16, s0
 800520e:	eef0 8a60 	vmov.f32	s17, s1
 8005212:	f7fb fc37 	bl	8000a84 <__aeabi_dcmpun>
 8005216:	b990      	cbnz	r0, 800523e <sqrt+0x4a>
 8005218:	2200      	movs	r2, #0
 800521a:	2300      	movs	r3, #0
 800521c:	4620      	mov	r0, r4
 800521e:	4629      	mov	r1, r5
 8005220:	f7fb fc08 	bl	8000a34 <__aeabi_dcmplt>
 8005224:	b158      	cbz	r0, 800523e <sqrt+0x4a>
 8005226:	f7ff ff43 	bl	80050b0 <__errno>
 800522a:	2321      	movs	r3, #33	; 0x21
 800522c:	6003      	str	r3, [r0, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	2300      	movs	r3, #0
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	f7fb fab5 	bl	80007a4 <__aeabi_ddiv>
 800523a:	ec41 0b18 	vmov	d8, r0, r1
 800523e:	eeb0 0a48 	vmov.f32	s0, s16
 8005242:	eef0 0a68 	vmov.f32	s1, s17
 8005246:	ecbd 8b02 	vpop	{d8}
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	0000      	movs	r0, r0
	...

08005250 <__ieee754_pow>:
 8005250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005254:	ed2d 8b06 	vpush	{d8-d10}
 8005258:	b089      	sub	sp, #36	; 0x24
 800525a:	ed8d 1b00 	vstr	d1, [sp]
 800525e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005262:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005266:	ea58 0102 	orrs.w	r1, r8, r2
 800526a:	ec57 6b10 	vmov	r6, r7, d0
 800526e:	d115      	bne.n	800529c <__ieee754_pow+0x4c>
 8005270:	19b3      	adds	r3, r6, r6
 8005272:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005276:	4152      	adcs	r2, r2
 8005278:	4299      	cmp	r1, r3
 800527a:	4b89      	ldr	r3, [pc, #548]	; (80054a0 <__ieee754_pow+0x250>)
 800527c:	4193      	sbcs	r3, r2
 800527e:	f080 84d2 	bcs.w	8005c26 <__ieee754_pow+0x9d6>
 8005282:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005286:	4630      	mov	r0, r6
 8005288:	4639      	mov	r1, r7
 800528a:	f7fa ffab 	bl	80001e4 <__adddf3>
 800528e:	ec41 0b10 	vmov	d0, r0, r1
 8005292:	b009      	add	sp, #36	; 0x24
 8005294:	ecbd 8b06 	vpop	{d8-d10}
 8005298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529c:	4b81      	ldr	r3, [pc, #516]	; (80054a4 <__ieee754_pow+0x254>)
 800529e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80052a2:	429c      	cmp	r4, r3
 80052a4:	ee10 aa10 	vmov	sl, s0
 80052a8:	463d      	mov	r5, r7
 80052aa:	dc06      	bgt.n	80052ba <__ieee754_pow+0x6a>
 80052ac:	d101      	bne.n	80052b2 <__ieee754_pow+0x62>
 80052ae:	2e00      	cmp	r6, #0
 80052b0:	d1e7      	bne.n	8005282 <__ieee754_pow+0x32>
 80052b2:	4598      	cmp	r8, r3
 80052b4:	dc01      	bgt.n	80052ba <__ieee754_pow+0x6a>
 80052b6:	d10f      	bne.n	80052d8 <__ieee754_pow+0x88>
 80052b8:	b172      	cbz	r2, 80052d8 <__ieee754_pow+0x88>
 80052ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80052be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80052c2:	ea55 050a 	orrs.w	r5, r5, sl
 80052c6:	d1dc      	bne.n	8005282 <__ieee754_pow+0x32>
 80052c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80052cc:	18db      	adds	r3, r3, r3
 80052ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80052d2:	4152      	adcs	r2, r2
 80052d4:	429d      	cmp	r5, r3
 80052d6:	e7d0      	b.n	800527a <__ieee754_pow+0x2a>
 80052d8:	2d00      	cmp	r5, #0
 80052da:	da3b      	bge.n	8005354 <__ieee754_pow+0x104>
 80052dc:	4b72      	ldr	r3, [pc, #456]	; (80054a8 <__ieee754_pow+0x258>)
 80052de:	4598      	cmp	r8, r3
 80052e0:	dc51      	bgt.n	8005386 <__ieee754_pow+0x136>
 80052e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80052e6:	4598      	cmp	r8, r3
 80052e8:	f340 84ac 	ble.w	8005c44 <__ieee754_pow+0x9f4>
 80052ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80052f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80052f4:	2b14      	cmp	r3, #20
 80052f6:	dd0f      	ble.n	8005318 <__ieee754_pow+0xc8>
 80052f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80052fc:	fa22 f103 	lsr.w	r1, r2, r3
 8005300:	fa01 f303 	lsl.w	r3, r1, r3
 8005304:	4293      	cmp	r3, r2
 8005306:	f040 849d 	bne.w	8005c44 <__ieee754_pow+0x9f4>
 800530a:	f001 0101 	and.w	r1, r1, #1
 800530e:	f1c1 0302 	rsb	r3, r1, #2
 8005312:	9304      	str	r3, [sp, #16]
 8005314:	b182      	cbz	r2, 8005338 <__ieee754_pow+0xe8>
 8005316:	e05f      	b.n	80053d8 <__ieee754_pow+0x188>
 8005318:	2a00      	cmp	r2, #0
 800531a:	d15b      	bne.n	80053d4 <__ieee754_pow+0x184>
 800531c:	f1c3 0314 	rsb	r3, r3, #20
 8005320:	fa48 f103 	asr.w	r1, r8, r3
 8005324:	fa01 f303 	lsl.w	r3, r1, r3
 8005328:	4543      	cmp	r3, r8
 800532a:	f040 8488 	bne.w	8005c3e <__ieee754_pow+0x9ee>
 800532e:	f001 0101 	and.w	r1, r1, #1
 8005332:	f1c1 0302 	rsb	r3, r1, #2
 8005336:	9304      	str	r3, [sp, #16]
 8005338:	4b5c      	ldr	r3, [pc, #368]	; (80054ac <__ieee754_pow+0x25c>)
 800533a:	4598      	cmp	r8, r3
 800533c:	d132      	bne.n	80053a4 <__ieee754_pow+0x154>
 800533e:	f1b9 0f00 	cmp.w	r9, #0
 8005342:	f280 8478 	bge.w	8005c36 <__ieee754_pow+0x9e6>
 8005346:	4959      	ldr	r1, [pc, #356]	; (80054ac <__ieee754_pow+0x25c>)
 8005348:	4632      	mov	r2, r6
 800534a:	463b      	mov	r3, r7
 800534c:	2000      	movs	r0, #0
 800534e:	f7fb fa29 	bl	80007a4 <__aeabi_ddiv>
 8005352:	e79c      	b.n	800528e <__ieee754_pow+0x3e>
 8005354:	2300      	movs	r3, #0
 8005356:	9304      	str	r3, [sp, #16]
 8005358:	2a00      	cmp	r2, #0
 800535a:	d13d      	bne.n	80053d8 <__ieee754_pow+0x188>
 800535c:	4b51      	ldr	r3, [pc, #324]	; (80054a4 <__ieee754_pow+0x254>)
 800535e:	4598      	cmp	r8, r3
 8005360:	d1ea      	bne.n	8005338 <__ieee754_pow+0xe8>
 8005362:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005366:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800536a:	ea53 030a 	orrs.w	r3, r3, sl
 800536e:	f000 845a 	beq.w	8005c26 <__ieee754_pow+0x9d6>
 8005372:	4b4f      	ldr	r3, [pc, #316]	; (80054b0 <__ieee754_pow+0x260>)
 8005374:	429c      	cmp	r4, r3
 8005376:	dd08      	ble.n	800538a <__ieee754_pow+0x13a>
 8005378:	f1b9 0f00 	cmp.w	r9, #0
 800537c:	f2c0 8457 	blt.w	8005c2e <__ieee754_pow+0x9de>
 8005380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005384:	e783      	b.n	800528e <__ieee754_pow+0x3e>
 8005386:	2302      	movs	r3, #2
 8005388:	e7e5      	b.n	8005356 <__ieee754_pow+0x106>
 800538a:	f1b9 0f00 	cmp.w	r9, #0
 800538e:	f04f 0000 	mov.w	r0, #0
 8005392:	f04f 0100 	mov.w	r1, #0
 8005396:	f6bf af7a 	bge.w	800528e <__ieee754_pow+0x3e>
 800539a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800539e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80053a2:	e774      	b.n	800528e <__ieee754_pow+0x3e>
 80053a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80053a8:	d106      	bne.n	80053b8 <__ieee754_pow+0x168>
 80053aa:	4632      	mov	r2, r6
 80053ac:	463b      	mov	r3, r7
 80053ae:	4630      	mov	r0, r6
 80053b0:	4639      	mov	r1, r7
 80053b2:	f7fb f8cd 	bl	8000550 <__aeabi_dmul>
 80053b6:	e76a      	b.n	800528e <__ieee754_pow+0x3e>
 80053b8:	4b3e      	ldr	r3, [pc, #248]	; (80054b4 <__ieee754_pow+0x264>)
 80053ba:	4599      	cmp	r9, r3
 80053bc:	d10c      	bne.n	80053d8 <__ieee754_pow+0x188>
 80053be:	2d00      	cmp	r5, #0
 80053c0:	db0a      	blt.n	80053d8 <__ieee754_pow+0x188>
 80053c2:	ec47 6b10 	vmov	d0, r6, r7
 80053c6:	b009      	add	sp, #36	; 0x24
 80053c8:	ecbd 8b06 	vpop	{d8-d10}
 80053cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	f000 bc6c 	b.w	8005cac <__ieee754_sqrt>
 80053d4:	2300      	movs	r3, #0
 80053d6:	9304      	str	r3, [sp, #16]
 80053d8:	ec47 6b10 	vmov	d0, r6, r7
 80053dc:	f000 fd48 	bl	8005e70 <fabs>
 80053e0:	ec51 0b10 	vmov	r0, r1, d0
 80053e4:	f1ba 0f00 	cmp.w	sl, #0
 80053e8:	d129      	bne.n	800543e <__ieee754_pow+0x1ee>
 80053ea:	b124      	cbz	r4, 80053f6 <__ieee754_pow+0x1a6>
 80053ec:	4b2f      	ldr	r3, [pc, #188]	; (80054ac <__ieee754_pow+0x25c>)
 80053ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d123      	bne.n	800543e <__ieee754_pow+0x1ee>
 80053f6:	f1b9 0f00 	cmp.w	r9, #0
 80053fa:	da05      	bge.n	8005408 <__ieee754_pow+0x1b8>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	2000      	movs	r0, #0
 8005402:	492a      	ldr	r1, [pc, #168]	; (80054ac <__ieee754_pow+0x25c>)
 8005404:	f7fb f9ce 	bl	80007a4 <__aeabi_ddiv>
 8005408:	2d00      	cmp	r5, #0
 800540a:	f6bf af40 	bge.w	800528e <__ieee754_pow+0x3e>
 800540e:	9b04      	ldr	r3, [sp, #16]
 8005410:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005414:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005418:	4323      	orrs	r3, r4
 800541a:	d108      	bne.n	800542e <__ieee754_pow+0x1de>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	f7fa fedc 	bl	80001e0 <__aeabi_dsub>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	e78f      	b.n	800534e <__ieee754_pow+0xfe>
 800542e:	9b04      	ldr	r3, [sp, #16]
 8005430:	2b01      	cmp	r3, #1
 8005432:	f47f af2c 	bne.w	800528e <__ieee754_pow+0x3e>
 8005436:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800543a:	4619      	mov	r1, r3
 800543c:	e727      	b.n	800528e <__ieee754_pow+0x3e>
 800543e:	0feb      	lsrs	r3, r5, #31
 8005440:	3b01      	subs	r3, #1
 8005442:	9306      	str	r3, [sp, #24]
 8005444:	9a06      	ldr	r2, [sp, #24]
 8005446:	9b04      	ldr	r3, [sp, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	d102      	bne.n	8005452 <__ieee754_pow+0x202>
 800544c:	4632      	mov	r2, r6
 800544e:	463b      	mov	r3, r7
 8005450:	e7e6      	b.n	8005420 <__ieee754_pow+0x1d0>
 8005452:	4b19      	ldr	r3, [pc, #100]	; (80054b8 <__ieee754_pow+0x268>)
 8005454:	4598      	cmp	r8, r3
 8005456:	f340 80fb 	ble.w	8005650 <__ieee754_pow+0x400>
 800545a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800545e:	4598      	cmp	r8, r3
 8005460:	4b13      	ldr	r3, [pc, #76]	; (80054b0 <__ieee754_pow+0x260>)
 8005462:	dd0c      	ble.n	800547e <__ieee754_pow+0x22e>
 8005464:	429c      	cmp	r4, r3
 8005466:	dc0f      	bgt.n	8005488 <__ieee754_pow+0x238>
 8005468:	f1b9 0f00 	cmp.w	r9, #0
 800546c:	da0f      	bge.n	800548e <__ieee754_pow+0x23e>
 800546e:	2000      	movs	r0, #0
 8005470:	b009      	add	sp, #36	; 0x24
 8005472:	ecbd 8b06 	vpop	{d8-d10}
 8005476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547a:	f000 bcf0 	b.w	8005e5e <__math_oflow>
 800547e:	429c      	cmp	r4, r3
 8005480:	dbf2      	blt.n	8005468 <__ieee754_pow+0x218>
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <__ieee754_pow+0x25c>)
 8005484:	429c      	cmp	r4, r3
 8005486:	dd19      	ble.n	80054bc <__ieee754_pow+0x26c>
 8005488:	f1b9 0f00 	cmp.w	r9, #0
 800548c:	dcef      	bgt.n	800546e <__ieee754_pow+0x21e>
 800548e:	2000      	movs	r0, #0
 8005490:	b009      	add	sp, #36	; 0x24
 8005492:	ecbd 8b06 	vpop	{d8-d10}
 8005496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	f000 bcd7 	b.w	8005e4c <__math_uflow>
 800549e:	bf00      	nop
 80054a0:	fff00000 	.word	0xfff00000
 80054a4:	7ff00000 	.word	0x7ff00000
 80054a8:	433fffff 	.word	0x433fffff
 80054ac:	3ff00000 	.word	0x3ff00000
 80054b0:	3fefffff 	.word	0x3fefffff
 80054b4:	3fe00000 	.word	0x3fe00000
 80054b8:	41e00000 	.word	0x41e00000
 80054bc:	4b60      	ldr	r3, [pc, #384]	; (8005640 <__ieee754_pow+0x3f0>)
 80054be:	2200      	movs	r2, #0
 80054c0:	f7fa fe8e 	bl	80001e0 <__aeabi_dsub>
 80054c4:	a354      	add	r3, pc, #336	; (adr r3, 8005618 <__ieee754_pow+0x3c8>)
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	4604      	mov	r4, r0
 80054cc:	460d      	mov	r5, r1
 80054ce:	f7fb f83f 	bl	8000550 <__aeabi_dmul>
 80054d2:	a353      	add	r3, pc, #332	; (adr r3, 8005620 <__ieee754_pow+0x3d0>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	4606      	mov	r6, r0
 80054da:	460f      	mov	r7, r1
 80054dc:	4620      	mov	r0, r4
 80054de:	4629      	mov	r1, r5
 80054e0:	f7fb f836 	bl	8000550 <__aeabi_dmul>
 80054e4:	4b57      	ldr	r3, [pc, #348]	; (8005644 <__ieee754_pow+0x3f4>)
 80054e6:	4682      	mov	sl, r0
 80054e8:	468b      	mov	fp, r1
 80054ea:	2200      	movs	r2, #0
 80054ec:	4620      	mov	r0, r4
 80054ee:	4629      	mov	r1, r5
 80054f0:	f7fb f82e 	bl	8000550 <__aeabi_dmul>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	a14b      	add	r1, pc, #300	; (adr r1, 8005628 <__ieee754_pow+0x3d8>)
 80054fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054fe:	f7fa fe6f 	bl	80001e0 <__aeabi_dsub>
 8005502:	4622      	mov	r2, r4
 8005504:	462b      	mov	r3, r5
 8005506:	f7fb f823 	bl	8000550 <__aeabi_dmul>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	2000      	movs	r0, #0
 8005510:	494d      	ldr	r1, [pc, #308]	; (8005648 <__ieee754_pow+0x3f8>)
 8005512:	f7fa fe65 	bl	80001e0 <__aeabi_dsub>
 8005516:	4622      	mov	r2, r4
 8005518:	4680      	mov	r8, r0
 800551a:	4689      	mov	r9, r1
 800551c:	462b      	mov	r3, r5
 800551e:	4620      	mov	r0, r4
 8005520:	4629      	mov	r1, r5
 8005522:	f7fb f815 	bl	8000550 <__aeabi_dmul>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	4640      	mov	r0, r8
 800552c:	4649      	mov	r1, r9
 800552e:	f7fb f80f 	bl	8000550 <__aeabi_dmul>
 8005532:	a33f      	add	r3, pc, #252	; (adr r3, 8005630 <__ieee754_pow+0x3e0>)
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	f7fb f80a 	bl	8000550 <__aeabi_dmul>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4650      	mov	r0, sl
 8005542:	4659      	mov	r1, fp
 8005544:	f7fa fe4c 	bl	80001e0 <__aeabi_dsub>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4680      	mov	r8, r0
 800554e:	4689      	mov	r9, r1
 8005550:	4630      	mov	r0, r6
 8005552:	4639      	mov	r1, r7
 8005554:	f7fa fe46 	bl	80001e4 <__adddf3>
 8005558:	2000      	movs	r0, #0
 800555a:	4632      	mov	r2, r6
 800555c:	463b      	mov	r3, r7
 800555e:	4604      	mov	r4, r0
 8005560:	460d      	mov	r5, r1
 8005562:	f7fa fe3d 	bl	80001e0 <__aeabi_dsub>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4640      	mov	r0, r8
 800556c:	4649      	mov	r1, r9
 800556e:	f7fa fe37 	bl	80001e0 <__aeabi_dsub>
 8005572:	9b04      	ldr	r3, [sp, #16]
 8005574:	9a06      	ldr	r2, [sp, #24]
 8005576:	3b01      	subs	r3, #1
 8005578:	4313      	orrs	r3, r2
 800557a:	4682      	mov	sl, r0
 800557c:	468b      	mov	fp, r1
 800557e:	f040 81e7 	bne.w	8005950 <__ieee754_pow+0x700>
 8005582:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005638 <__ieee754_pow+0x3e8>
 8005586:	eeb0 8a47 	vmov.f32	s16, s14
 800558a:	eef0 8a67 	vmov.f32	s17, s15
 800558e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005592:	2600      	movs	r6, #0
 8005594:	4632      	mov	r2, r6
 8005596:	463b      	mov	r3, r7
 8005598:	e9dd 0100 	ldrd	r0, r1, [sp]
 800559c:	f7fa fe20 	bl	80001e0 <__aeabi_dsub>
 80055a0:	4622      	mov	r2, r4
 80055a2:	462b      	mov	r3, r5
 80055a4:	f7fa ffd4 	bl	8000550 <__aeabi_dmul>
 80055a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055ac:	4680      	mov	r8, r0
 80055ae:	4689      	mov	r9, r1
 80055b0:	4650      	mov	r0, sl
 80055b2:	4659      	mov	r1, fp
 80055b4:	f7fa ffcc 	bl	8000550 <__aeabi_dmul>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4640      	mov	r0, r8
 80055be:	4649      	mov	r1, r9
 80055c0:	f7fa fe10 	bl	80001e4 <__adddf3>
 80055c4:	4632      	mov	r2, r6
 80055c6:	463b      	mov	r3, r7
 80055c8:	4680      	mov	r8, r0
 80055ca:	4689      	mov	r9, r1
 80055cc:	4620      	mov	r0, r4
 80055ce:	4629      	mov	r1, r5
 80055d0:	f7fa ffbe 	bl	8000550 <__aeabi_dmul>
 80055d4:	460b      	mov	r3, r1
 80055d6:	4604      	mov	r4, r0
 80055d8:	460d      	mov	r5, r1
 80055da:	4602      	mov	r2, r0
 80055dc:	4649      	mov	r1, r9
 80055de:	4640      	mov	r0, r8
 80055e0:	f7fa fe00 	bl	80001e4 <__adddf3>
 80055e4:	4b19      	ldr	r3, [pc, #100]	; (800564c <__ieee754_pow+0x3fc>)
 80055e6:	4299      	cmp	r1, r3
 80055e8:	ec45 4b19 	vmov	d9, r4, r5
 80055ec:	4606      	mov	r6, r0
 80055ee:	460f      	mov	r7, r1
 80055f0:	468b      	mov	fp, r1
 80055f2:	f340 82f1 	ble.w	8005bd8 <__ieee754_pow+0x988>
 80055f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80055fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80055fe:	4303      	orrs	r3, r0
 8005600:	f000 81e4 	beq.w	80059cc <__ieee754_pow+0x77c>
 8005604:	ec51 0b18 	vmov	r0, r1, d8
 8005608:	2200      	movs	r2, #0
 800560a:	2300      	movs	r3, #0
 800560c:	f7fb fa12 	bl	8000a34 <__aeabi_dcmplt>
 8005610:	3800      	subs	r0, #0
 8005612:	bf18      	it	ne
 8005614:	2001      	movne	r0, #1
 8005616:	e72b      	b.n	8005470 <__ieee754_pow+0x220>
 8005618:	60000000 	.word	0x60000000
 800561c:	3ff71547 	.word	0x3ff71547
 8005620:	f85ddf44 	.word	0xf85ddf44
 8005624:	3e54ae0b 	.word	0x3e54ae0b
 8005628:	55555555 	.word	0x55555555
 800562c:	3fd55555 	.word	0x3fd55555
 8005630:	652b82fe 	.word	0x652b82fe
 8005634:	3ff71547 	.word	0x3ff71547
 8005638:	00000000 	.word	0x00000000
 800563c:	bff00000 	.word	0xbff00000
 8005640:	3ff00000 	.word	0x3ff00000
 8005644:	3fd00000 	.word	0x3fd00000
 8005648:	3fe00000 	.word	0x3fe00000
 800564c:	408fffff 	.word	0x408fffff
 8005650:	4bd5      	ldr	r3, [pc, #852]	; (80059a8 <__ieee754_pow+0x758>)
 8005652:	402b      	ands	r3, r5
 8005654:	2200      	movs	r2, #0
 8005656:	b92b      	cbnz	r3, 8005664 <__ieee754_pow+0x414>
 8005658:	4bd4      	ldr	r3, [pc, #848]	; (80059ac <__ieee754_pow+0x75c>)
 800565a:	f7fa ff79 	bl	8000550 <__aeabi_dmul>
 800565e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005662:	460c      	mov	r4, r1
 8005664:	1523      	asrs	r3, r4, #20
 8005666:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800566a:	4413      	add	r3, r2
 800566c:	9305      	str	r3, [sp, #20]
 800566e:	4bd0      	ldr	r3, [pc, #832]	; (80059b0 <__ieee754_pow+0x760>)
 8005670:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005674:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005678:	429c      	cmp	r4, r3
 800567a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800567e:	dd08      	ble.n	8005692 <__ieee754_pow+0x442>
 8005680:	4bcc      	ldr	r3, [pc, #816]	; (80059b4 <__ieee754_pow+0x764>)
 8005682:	429c      	cmp	r4, r3
 8005684:	f340 8162 	ble.w	800594c <__ieee754_pow+0x6fc>
 8005688:	9b05      	ldr	r3, [sp, #20]
 800568a:	3301      	adds	r3, #1
 800568c:	9305      	str	r3, [sp, #20]
 800568e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005692:	2400      	movs	r4, #0
 8005694:	00e3      	lsls	r3, r4, #3
 8005696:	9307      	str	r3, [sp, #28]
 8005698:	4bc7      	ldr	r3, [pc, #796]	; (80059b8 <__ieee754_pow+0x768>)
 800569a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800569e:	ed93 7b00 	vldr	d7, [r3]
 80056a2:	4629      	mov	r1, r5
 80056a4:	ec53 2b17 	vmov	r2, r3, d7
 80056a8:	eeb0 9a47 	vmov.f32	s18, s14
 80056ac:	eef0 9a67 	vmov.f32	s19, s15
 80056b0:	4682      	mov	sl, r0
 80056b2:	f7fa fd95 	bl	80001e0 <__aeabi_dsub>
 80056b6:	4652      	mov	r2, sl
 80056b8:	4606      	mov	r6, r0
 80056ba:	460f      	mov	r7, r1
 80056bc:	462b      	mov	r3, r5
 80056be:	ec51 0b19 	vmov	r0, r1, d9
 80056c2:	f7fa fd8f 	bl	80001e4 <__adddf3>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	2000      	movs	r0, #0
 80056cc:	49bb      	ldr	r1, [pc, #748]	; (80059bc <__ieee754_pow+0x76c>)
 80056ce:	f7fb f869 	bl	80007a4 <__aeabi_ddiv>
 80056d2:	ec41 0b1a 	vmov	d10, r0, r1
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4630      	mov	r0, r6
 80056dc:	4639      	mov	r1, r7
 80056de:	f7fa ff37 	bl	8000550 <__aeabi_dmul>
 80056e2:	2300      	movs	r3, #0
 80056e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056e8:	9302      	str	r3, [sp, #8]
 80056ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80056ee:	46ab      	mov	fp, r5
 80056f0:	106d      	asrs	r5, r5, #1
 80056f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80056f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80056fa:	ec41 0b18 	vmov	d8, r0, r1
 80056fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005702:	2200      	movs	r2, #0
 8005704:	4640      	mov	r0, r8
 8005706:	4649      	mov	r1, r9
 8005708:	4614      	mov	r4, r2
 800570a:	461d      	mov	r5, r3
 800570c:	f7fa ff20 	bl	8000550 <__aeabi_dmul>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4630      	mov	r0, r6
 8005716:	4639      	mov	r1, r7
 8005718:	f7fa fd62 	bl	80001e0 <__aeabi_dsub>
 800571c:	ec53 2b19 	vmov	r2, r3, d9
 8005720:	4606      	mov	r6, r0
 8005722:	460f      	mov	r7, r1
 8005724:	4620      	mov	r0, r4
 8005726:	4629      	mov	r1, r5
 8005728:	f7fa fd5a 	bl	80001e0 <__aeabi_dsub>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4650      	mov	r0, sl
 8005732:	4659      	mov	r1, fp
 8005734:	f7fa fd54 	bl	80001e0 <__aeabi_dsub>
 8005738:	4642      	mov	r2, r8
 800573a:	464b      	mov	r3, r9
 800573c:	f7fa ff08 	bl	8000550 <__aeabi_dmul>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4630      	mov	r0, r6
 8005746:	4639      	mov	r1, r7
 8005748:	f7fa fd4a 	bl	80001e0 <__aeabi_dsub>
 800574c:	ec53 2b1a 	vmov	r2, r3, d10
 8005750:	f7fa fefe 	bl	8000550 <__aeabi_dmul>
 8005754:	ec53 2b18 	vmov	r2, r3, d8
 8005758:	ec41 0b19 	vmov	d9, r0, r1
 800575c:	ec51 0b18 	vmov	r0, r1, d8
 8005760:	f7fa fef6 	bl	8000550 <__aeabi_dmul>
 8005764:	a37c      	add	r3, pc, #496	; (adr r3, 8005958 <__ieee754_pow+0x708>)
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	4604      	mov	r4, r0
 800576c:	460d      	mov	r5, r1
 800576e:	f7fa feef 	bl	8000550 <__aeabi_dmul>
 8005772:	a37b      	add	r3, pc, #492	; (adr r3, 8005960 <__ieee754_pow+0x710>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa fd34 	bl	80001e4 <__adddf3>
 800577c:	4622      	mov	r2, r4
 800577e:	462b      	mov	r3, r5
 8005780:	f7fa fee6 	bl	8000550 <__aeabi_dmul>
 8005784:	a378      	add	r3, pc, #480	; (adr r3, 8005968 <__ieee754_pow+0x718>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f7fa fd2b 	bl	80001e4 <__adddf3>
 800578e:	4622      	mov	r2, r4
 8005790:	462b      	mov	r3, r5
 8005792:	f7fa fedd 	bl	8000550 <__aeabi_dmul>
 8005796:	a376      	add	r3, pc, #472	; (adr r3, 8005970 <__ieee754_pow+0x720>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f7fa fd22 	bl	80001e4 <__adddf3>
 80057a0:	4622      	mov	r2, r4
 80057a2:	462b      	mov	r3, r5
 80057a4:	f7fa fed4 	bl	8000550 <__aeabi_dmul>
 80057a8:	a373      	add	r3, pc, #460	; (adr r3, 8005978 <__ieee754_pow+0x728>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f7fa fd19 	bl	80001e4 <__adddf3>
 80057b2:	4622      	mov	r2, r4
 80057b4:	462b      	mov	r3, r5
 80057b6:	f7fa fecb 	bl	8000550 <__aeabi_dmul>
 80057ba:	a371      	add	r3, pc, #452	; (adr r3, 8005980 <__ieee754_pow+0x730>)
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	f7fa fd10 	bl	80001e4 <__adddf3>
 80057c4:	4622      	mov	r2, r4
 80057c6:	4606      	mov	r6, r0
 80057c8:	460f      	mov	r7, r1
 80057ca:	462b      	mov	r3, r5
 80057cc:	4620      	mov	r0, r4
 80057ce:	4629      	mov	r1, r5
 80057d0:	f7fa febe 	bl	8000550 <__aeabi_dmul>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4630      	mov	r0, r6
 80057da:	4639      	mov	r1, r7
 80057dc:	f7fa feb8 	bl	8000550 <__aeabi_dmul>
 80057e0:	4642      	mov	r2, r8
 80057e2:	4604      	mov	r4, r0
 80057e4:	460d      	mov	r5, r1
 80057e6:	464b      	mov	r3, r9
 80057e8:	ec51 0b18 	vmov	r0, r1, d8
 80057ec:	f7fa fcfa 	bl	80001e4 <__adddf3>
 80057f0:	ec53 2b19 	vmov	r2, r3, d9
 80057f4:	f7fa feac 	bl	8000550 <__aeabi_dmul>
 80057f8:	4622      	mov	r2, r4
 80057fa:	462b      	mov	r3, r5
 80057fc:	f7fa fcf2 	bl	80001e4 <__adddf3>
 8005800:	4642      	mov	r2, r8
 8005802:	4682      	mov	sl, r0
 8005804:	468b      	mov	fp, r1
 8005806:	464b      	mov	r3, r9
 8005808:	4640      	mov	r0, r8
 800580a:	4649      	mov	r1, r9
 800580c:	f7fa fea0 	bl	8000550 <__aeabi_dmul>
 8005810:	4b6b      	ldr	r3, [pc, #428]	; (80059c0 <__ieee754_pow+0x770>)
 8005812:	2200      	movs	r2, #0
 8005814:	4606      	mov	r6, r0
 8005816:	460f      	mov	r7, r1
 8005818:	f7fa fce4 	bl	80001e4 <__adddf3>
 800581c:	4652      	mov	r2, sl
 800581e:	465b      	mov	r3, fp
 8005820:	f7fa fce0 	bl	80001e4 <__adddf3>
 8005824:	2000      	movs	r0, #0
 8005826:	4604      	mov	r4, r0
 8005828:	460d      	mov	r5, r1
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4640      	mov	r0, r8
 8005830:	4649      	mov	r1, r9
 8005832:	f7fa fe8d 	bl	8000550 <__aeabi_dmul>
 8005836:	4b62      	ldr	r3, [pc, #392]	; (80059c0 <__ieee754_pow+0x770>)
 8005838:	4680      	mov	r8, r0
 800583a:	4689      	mov	r9, r1
 800583c:	2200      	movs	r2, #0
 800583e:	4620      	mov	r0, r4
 8005840:	4629      	mov	r1, r5
 8005842:	f7fa fccd 	bl	80001e0 <__aeabi_dsub>
 8005846:	4632      	mov	r2, r6
 8005848:	463b      	mov	r3, r7
 800584a:	f7fa fcc9 	bl	80001e0 <__aeabi_dsub>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4650      	mov	r0, sl
 8005854:	4659      	mov	r1, fp
 8005856:	f7fa fcc3 	bl	80001e0 <__aeabi_dsub>
 800585a:	ec53 2b18 	vmov	r2, r3, d8
 800585e:	f7fa fe77 	bl	8000550 <__aeabi_dmul>
 8005862:	4622      	mov	r2, r4
 8005864:	4606      	mov	r6, r0
 8005866:	460f      	mov	r7, r1
 8005868:	462b      	mov	r3, r5
 800586a:	ec51 0b19 	vmov	r0, r1, d9
 800586e:	f7fa fe6f 	bl	8000550 <__aeabi_dmul>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4630      	mov	r0, r6
 8005878:	4639      	mov	r1, r7
 800587a:	f7fa fcb3 	bl	80001e4 <__adddf3>
 800587e:	4606      	mov	r6, r0
 8005880:	460f      	mov	r7, r1
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4640      	mov	r0, r8
 8005888:	4649      	mov	r1, r9
 800588a:	f7fa fcab 	bl	80001e4 <__adddf3>
 800588e:	a33e      	add	r3, pc, #248	; (adr r3, 8005988 <__ieee754_pow+0x738>)
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	2000      	movs	r0, #0
 8005896:	4604      	mov	r4, r0
 8005898:	460d      	mov	r5, r1
 800589a:	f7fa fe59 	bl	8000550 <__aeabi_dmul>
 800589e:	4642      	mov	r2, r8
 80058a0:	ec41 0b18 	vmov	d8, r0, r1
 80058a4:	464b      	mov	r3, r9
 80058a6:	4620      	mov	r0, r4
 80058a8:	4629      	mov	r1, r5
 80058aa:	f7fa fc99 	bl	80001e0 <__aeabi_dsub>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4630      	mov	r0, r6
 80058b4:	4639      	mov	r1, r7
 80058b6:	f7fa fc93 	bl	80001e0 <__aeabi_dsub>
 80058ba:	a335      	add	r3, pc, #212	; (adr r3, 8005990 <__ieee754_pow+0x740>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f7fa fe46 	bl	8000550 <__aeabi_dmul>
 80058c4:	a334      	add	r3, pc, #208	; (adr r3, 8005998 <__ieee754_pow+0x748>)
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	4606      	mov	r6, r0
 80058cc:	460f      	mov	r7, r1
 80058ce:	4620      	mov	r0, r4
 80058d0:	4629      	mov	r1, r5
 80058d2:	f7fa fe3d 	bl	8000550 <__aeabi_dmul>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4630      	mov	r0, r6
 80058dc:	4639      	mov	r1, r7
 80058de:	f7fa fc81 	bl	80001e4 <__adddf3>
 80058e2:	9a07      	ldr	r2, [sp, #28]
 80058e4:	4b37      	ldr	r3, [pc, #220]	; (80059c4 <__ieee754_pow+0x774>)
 80058e6:	4413      	add	r3, r2
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f7fa fc7a 	bl	80001e4 <__adddf3>
 80058f0:	4682      	mov	sl, r0
 80058f2:	9805      	ldr	r0, [sp, #20]
 80058f4:	468b      	mov	fp, r1
 80058f6:	f7fa fdc1 	bl	800047c <__aeabi_i2d>
 80058fa:	9a07      	ldr	r2, [sp, #28]
 80058fc:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <__ieee754_pow+0x778>)
 80058fe:	4413      	add	r3, r2
 8005900:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005904:	4606      	mov	r6, r0
 8005906:	460f      	mov	r7, r1
 8005908:	4652      	mov	r2, sl
 800590a:	465b      	mov	r3, fp
 800590c:	ec51 0b18 	vmov	r0, r1, d8
 8005910:	f7fa fc68 	bl	80001e4 <__adddf3>
 8005914:	4642      	mov	r2, r8
 8005916:	464b      	mov	r3, r9
 8005918:	f7fa fc64 	bl	80001e4 <__adddf3>
 800591c:	4632      	mov	r2, r6
 800591e:	463b      	mov	r3, r7
 8005920:	f7fa fc60 	bl	80001e4 <__adddf3>
 8005924:	2000      	movs	r0, #0
 8005926:	4632      	mov	r2, r6
 8005928:	463b      	mov	r3, r7
 800592a:	4604      	mov	r4, r0
 800592c:	460d      	mov	r5, r1
 800592e:	f7fa fc57 	bl	80001e0 <__aeabi_dsub>
 8005932:	4642      	mov	r2, r8
 8005934:	464b      	mov	r3, r9
 8005936:	f7fa fc53 	bl	80001e0 <__aeabi_dsub>
 800593a:	ec53 2b18 	vmov	r2, r3, d8
 800593e:	f7fa fc4f 	bl	80001e0 <__aeabi_dsub>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4650      	mov	r0, sl
 8005948:	4659      	mov	r1, fp
 800594a:	e610      	b.n	800556e <__ieee754_pow+0x31e>
 800594c:	2401      	movs	r4, #1
 800594e:	e6a1      	b.n	8005694 <__ieee754_pow+0x444>
 8005950:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80059a0 <__ieee754_pow+0x750>
 8005954:	e617      	b.n	8005586 <__ieee754_pow+0x336>
 8005956:	bf00      	nop
 8005958:	4a454eef 	.word	0x4a454eef
 800595c:	3fca7e28 	.word	0x3fca7e28
 8005960:	93c9db65 	.word	0x93c9db65
 8005964:	3fcd864a 	.word	0x3fcd864a
 8005968:	a91d4101 	.word	0xa91d4101
 800596c:	3fd17460 	.word	0x3fd17460
 8005970:	518f264d 	.word	0x518f264d
 8005974:	3fd55555 	.word	0x3fd55555
 8005978:	db6fabff 	.word	0xdb6fabff
 800597c:	3fdb6db6 	.word	0x3fdb6db6
 8005980:	33333303 	.word	0x33333303
 8005984:	3fe33333 	.word	0x3fe33333
 8005988:	e0000000 	.word	0xe0000000
 800598c:	3feec709 	.word	0x3feec709
 8005990:	dc3a03fd 	.word	0xdc3a03fd
 8005994:	3feec709 	.word	0x3feec709
 8005998:	145b01f5 	.word	0x145b01f5
 800599c:	be3e2fe0 	.word	0xbe3e2fe0
 80059a0:	00000000 	.word	0x00000000
 80059a4:	3ff00000 	.word	0x3ff00000
 80059a8:	7ff00000 	.word	0x7ff00000
 80059ac:	43400000 	.word	0x43400000
 80059b0:	0003988e 	.word	0x0003988e
 80059b4:	000bb679 	.word	0x000bb679
 80059b8:	08005fd8 	.word	0x08005fd8
 80059bc:	3ff00000 	.word	0x3ff00000
 80059c0:	40080000 	.word	0x40080000
 80059c4:	08005ff8 	.word	0x08005ff8
 80059c8:	08005fe8 	.word	0x08005fe8
 80059cc:	a3b5      	add	r3, pc, #724	; (adr r3, 8005ca4 <__ieee754_pow+0xa54>)
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	4640      	mov	r0, r8
 80059d4:	4649      	mov	r1, r9
 80059d6:	f7fa fc05 	bl	80001e4 <__adddf3>
 80059da:	4622      	mov	r2, r4
 80059dc:	ec41 0b1a 	vmov	d10, r0, r1
 80059e0:	462b      	mov	r3, r5
 80059e2:	4630      	mov	r0, r6
 80059e4:	4639      	mov	r1, r7
 80059e6:	f7fa fbfb 	bl	80001e0 <__aeabi_dsub>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	ec51 0b1a 	vmov	r0, r1, d10
 80059f2:	f7fb f83d 	bl	8000a70 <__aeabi_dcmpgt>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	f47f ae04 	bne.w	8005604 <__ieee754_pow+0x3b4>
 80059fc:	4aa4      	ldr	r2, [pc, #656]	; (8005c90 <__ieee754_pow+0xa40>)
 80059fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a02:	4293      	cmp	r3, r2
 8005a04:	f340 8108 	ble.w	8005c18 <__ieee754_pow+0x9c8>
 8005a08:	151b      	asrs	r3, r3, #20
 8005a0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005a0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005a12:	fa4a f303 	asr.w	r3, sl, r3
 8005a16:	445b      	add	r3, fp
 8005a18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005a1c:	4e9d      	ldr	r6, [pc, #628]	; (8005c94 <__ieee754_pow+0xa44>)
 8005a1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005a22:	4116      	asrs	r6, r2
 8005a24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005a28:	2000      	movs	r0, #0
 8005a2a:	ea23 0106 	bic.w	r1, r3, r6
 8005a2e:	f1c2 0214 	rsb	r2, r2, #20
 8005a32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005a36:	fa4a fa02 	asr.w	sl, sl, r2
 8005a3a:	f1bb 0f00 	cmp.w	fp, #0
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4620      	mov	r0, r4
 8005a44:	4629      	mov	r1, r5
 8005a46:	bfb8      	it	lt
 8005a48:	f1ca 0a00 	rsblt	sl, sl, #0
 8005a4c:	f7fa fbc8 	bl	80001e0 <__aeabi_dsub>
 8005a50:	ec41 0b19 	vmov	d9, r0, r1
 8005a54:	4642      	mov	r2, r8
 8005a56:	464b      	mov	r3, r9
 8005a58:	ec51 0b19 	vmov	r0, r1, d9
 8005a5c:	f7fa fbc2 	bl	80001e4 <__adddf3>
 8005a60:	a37b      	add	r3, pc, #492	; (adr r3, 8005c50 <__ieee754_pow+0xa00>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	2000      	movs	r0, #0
 8005a68:	4604      	mov	r4, r0
 8005a6a:	460d      	mov	r5, r1
 8005a6c:	f7fa fd70 	bl	8000550 <__aeabi_dmul>
 8005a70:	ec53 2b19 	vmov	r2, r3, d9
 8005a74:	4606      	mov	r6, r0
 8005a76:	460f      	mov	r7, r1
 8005a78:	4620      	mov	r0, r4
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	f7fa fbb0 	bl	80001e0 <__aeabi_dsub>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4640      	mov	r0, r8
 8005a86:	4649      	mov	r1, r9
 8005a88:	f7fa fbaa 	bl	80001e0 <__aeabi_dsub>
 8005a8c:	a372      	add	r3, pc, #456	; (adr r3, 8005c58 <__ieee754_pow+0xa08>)
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	f7fa fd5d 	bl	8000550 <__aeabi_dmul>
 8005a96:	a372      	add	r3, pc, #456	; (adr r3, 8005c60 <__ieee754_pow+0xa10>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	4680      	mov	r8, r0
 8005a9e:	4689      	mov	r9, r1
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	f7fa fd54 	bl	8000550 <__aeabi_dmul>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4640      	mov	r0, r8
 8005aae:	4649      	mov	r1, r9
 8005ab0:	f7fa fb98 	bl	80001e4 <__adddf3>
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	460d      	mov	r5, r1
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4630      	mov	r0, r6
 8005abe:	4639      	mov	r1, r7
 8005ac0:	f7fa fb90 	bl	80001e4 <__adddf3>
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	4680      	mov	r8, r0
 8005aca:	4689      	mov	r9, r1
 8005acc:	f7fa fb88 	bl	80001e0 <__aeabi_dsub>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	f7fa fb82 	bl	80001e0 <__aeabi_dsub>
 8005adc:	4642      	mov	r2, r8
 8005ade:	4606      	mov	r6, r0
 8005ae0:	460f      	mov	r7, r1
 8005ae2:	464b      	mov	r3, r9
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	f7fa fd32 	bl	8000550 <__aeabi_dmul>
 8005aec:	a35e      	add	r3, pc, #376	; (adr r3, 8005c68 <__ieee754_pow+0xa18>)
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	4604      	mov	r4, r0
 8005af4:	460d      	mov	r5, r1
 8005af6:	f7fa fd2b 	bl	8000550 <__aeabi_dmul>
 8005afa:	a35d      	add	r3, pc, #372	; (adr r3, 8005c70 <__ieee754_pow+0xa20>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f7fa fb6e 	bl	80001e0 <__aeabi_dsub>
 8005b04:	4622      	mov	r2, r4
 8005b06:	462b      	mov	r3, r5
 8005b08:	f7fa fd22 	bl	8000550 <__aeabi_dmul>
 8005b0c:	a35a      	add	r3, pc, #360	; (adr r3, 8005c78 <__ieee754_pow+0xa28>)
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f7fa fb67 	bl	80001e4 <__adddf3>
 8005b16:	4622      	mov	r2, r4
 8005b18:	462b      	mov	r3, r5
 8005b1a:	f7fa fd19 	bl	8000550 <__aeabi_dmul>
 8005b1e:	a358      	add	r3, pc, #352	; (adr r3, 8005c80 <__ieee754_pow+0xa30>)
 8005b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b24:	f7fa fb5c 	bl	80001e0 <__aeabi_dsub>
 8005b28:	4622      	mov	r2, r4
 8005b2a:	462b      	mov	r3, r5
 8005b2c:	f7fa fd10 	bl	8000550 <__aeabi_dmul>
 8005b30:	a355      	add	r3, pc, #340	; (adr r3, 8005c88 <__ieee754_pow+0xa38>)
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f7fa fb55 	bl	80001e4 <__adddf3>
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	462b      	mov	r3, r5
 8005b3e:	f7fa fd07 	bl	8000550 <__aeabi_dmul>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4640      	mov	r0, r8
 8005b48:	4649      	mov	r1, r9
 8005b4a:	f7fa fb49 	bl	80001e0 <__aeabi_dsub>
 8005b4e:	4604      	mov	r4, r0
 8005b50:	460d      	mov	r5, r1
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	4640      	mov	r0, r8
 8005b58:	4649      	mov	r1, r9
 8005b5a:	f7fa fcf9 	bl	8000550 <__aeabi_dmul>
 8005b5e:	2200      	movs	r2, #0
 8005b60:	ec41 0b19 	vmov	d9, r0, r1
 8005b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b68:	4620      	mov	r0, r4
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	f7fa fb38 	bl	80001e0 <__aeabi_dsub>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	ec51 0b19 	vmov	r0, r1, d9
 8005b78:	f7fa fe14 	bl	80007a4 <__aeabi_ddiv>
 8005b7c:	4632      	mov	r2, r6
 8005b7e:	4604      	mov	r4, r0
 8005b80:	460d      	mov	r5, r1
 8005b82:	463b      	mov	r3, r7
 8005b84:	4640      	mov	r0, r8
 8005b86:	4649      	mov	r1, r9
 8005b88:	f7fa fce2 	bl	8000550 <__aeabi_dmul>
 8005b8c:	4632      	mov	r2, r6
 8005b8e:	463b      	mov	r3, r7
 8005b90:	f7fa fb28 	bl	80001e4 <__adddf3>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4620      	mov	r0, r4
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	f7fa fb20 	bl	80001e0 <__aeabi_dsub>
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	f7fa fb1c 	bl	80001e0 <__aeabi_dsub>
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4602      	mov	r2, r0
 8005bac:	493a      	ldr	r1, [pc, #232]	; (8005c98 <__ieee754_pow+0xa48>)
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f7fa fb16 	bl	80001e0 <__aeabi_dsub>
 8005bb4:	ec41 0b10 	vmov	d0, r0, r1
 8005bb8:	ee10 3a90 	vmov	r3, s1
 8005bbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bc4:	da2b      	bge.n	8005c1e <__ieee754_pow+0x9ce>
 8005bc6:	4650      	mov	r0, sl
 8005bc8:	f000 f966 	bl	8005e98 <scalbn>
 8005bcc:	ec51 0b10 	vmov	r0, r1, d0
 8005bd0:	ec53 2b18 	vmov	r2, r3, d8
 8005bd4:	f7ff bbed 	b.w	80053b2 <__ieee754_pow+0x162>
 8005bd8:	4b30      	ldr	r3, [pc, #192]	; (8005c9c <__ieee754_pow+0xa4c>)
 8005bda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005bde:	429e      	cmp	r6, r3
 8005be0:	f77f af0c 	ble.w	80059fc <__ieee754_pow+0x7ac>
 8005be4:	4b2e      	ldr	r3, [pc, #184]	; (8005ca0 <__ieee754_pow+0xa50>)
 8005be6:	440b      	add	r3, r1
 8005be8:	4303      	orrs	r3, r0
 8005bea:	d009      	beq.n	8005c00 <__ieee754_pow+0x9b0>
 8005bec:	ec51 0b18 	vmov	r0, r1, d8
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f7fa ff1e 	bl	8000a34 <__aeabi_dcmplt>
 8005bf8:	3800      	subs	r0, #0
 8005bfa:	bf18      	it	ne
 8005bfc:	2001      	movne	r0, #1
 8005bfe:	e447      	b.n	8005490 <__ieee754_pow+0x240>
 8005c00:	4622      	mov	r2, r4
 8005c02:	462b      	mov	r3, r5
 8005c04:	f7fa faec 	bl	80001e0 <__aeabi_dsub>
 8005c08:	4642      	mov	r2, r8
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	f7fa ff26 	bl	8000a5c <__aeabi_dcmpge>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	f43f aef3 	beq.w	80059fc <__ieee754_pow+0x7ac>
 8005c16:	e7e9      	b.n	8005bec <__ieee754_pow+0x99c>
 8005c18:	f04f 0a00 	mov.w	sl, #0
 8005c1c:	e71a      	b.n	8005a54 <__ieee754_pow+0x804>
 8005c1e:	ec51 0b10 	vmov	r0, r1, d0
 8005c22:	4619      	mov	r1, r3
 8005c24:	e7d4      	b.n	8005bd0 <__ieee754_pow+0x980>
 8005c26:	491c      	ldr	r1, [pc, #112]	; (8005c98 <__ieee754_pow+0xa48>)
 8005c28:	2000      	movs	r0, #0
 8005c2a:	f7ff bb30 	b.w	800528e <__ieee754_pow+0x3e>
 8005c2e:	2000      	movs	r0, #0
 8005c30:	2100      	movs	r1, #0
 8005c32:	f7ff bb2c 	b.w	800528e <__ieee754_pow+0x3e>
 8005c36:	4630      	mov	r0, r6
 8005c38:	4639      	mov	r1, r7
 8005c3a:	f7ff bb28 	b.w	800528e <__ieee754_pow+0x3e>
 8005c3e:	9204      	str	r2, [sp, #16]
 8005c40:	f7ff bb7a 	b.w	8005338 <__ieee754_pow+0xe8>
 8005c44:	2300      	movs	r3, #0
 8005c46:	f7ff bb64 	b.w	8005312 <__ieee754_pow+0xc2>
 8005c4a:	bf00      	nop
 8005c4c:	f3af 8000 	nop.w
 8005c50:	00000000 	.word	0x00000000
 8005c54:	3fe62e43 	.word	0x3fe62e43
 8005c58:	fefa39ef 	.word	0xfefa39ef
 8005c5c:	3fe62e42 	.word	0x3fe62e42
 8005c60:	0ca86c39 	.word	0x0ca86c39
 8005c64:	be205c61 	.word	0xbe205c61
 8005c68:	72bea4d0 	.word	0x72bea4d0
 8005c6c:	3e663769 	.word	0x3e663769
 8005c70:	c5d26bf1 	.word	0xc5d26bf1
 8005c74:	3ebbbd41 	.word	0x3ebbbd41
 8005c78:	af25de2c 	.word	0xaf25de2c
 8005c7c:	3f11566a 	.word	0x3f11566a
 8005c80:	16bebd93 	.word	0x16bebd93
 8005c84:	3f66c16c 	.word	0x3f66c16c
 8005c88:	5555553e 	.word	0x5555553e
 8005c8c:	3fc55555 	.word	0x3fc55555
 8005c90:	3fe00000 	.word	0x3fe00000
 8005c94:	000fffff 	.word	0x000fffff
 8005c98:	3ff00000 	.word	0x3ff00000
 8005c9c:	4090cbff 	.word	0x4090cbff
 8005ca0:	3f6f3400 	.word	0x3f6f3400
 8005ca4:	652b82fe 	.word	0x652b82fe
 8005ca8:	3c971547 	.word	0x3c971547

08005cac <__ieee754_sqrt>:
 8005cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb0:	ec55 4b10 	vmov	r4, r5, d0
 8005cb4:	4e55      	ldr	r6, [pc, #340]	; (8005e0c <__ieee754_sqrt+0x160>)
 8005cb6:	43ae      	bics	r6, r5
 8005cb8:	ee10 0a10 	vmov	r0, s0
 8005cbc:	ee10 3a10 	vmov	r3, s0
 8005cc0:	462a      	mov	r2, r5
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	d110      	bne.n	8005ce8 <__ieee754_sqrt+0x3c>
 8005cc6:	ee10 2a10 	vmov	r2, s0
 8005cca:	462b      	mov	r3, r5
 8005ccc:	f7fa fc40 	bl	8000550 <__aeabi_dmul>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f7fa fa84 	bl	80001e4 <__adddf3>
 8005cdc:	4604      	mov	r4, r0
 8005cde:	460d      	mov	r5, r1
 8005ce0:	ec45 4b10 	vmov	d0, r4, r5
 8005ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ce8:	2d00      	cmp	r5, #0
 8005cea:	dc10      	bgt.n	8005d0e <__ieee754_sqrt+0x62>
 8005cec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005cf0:	4330      	orrs	r0, r6
 8005cf2:	d0f5      	beq.n	8005ce0 <__ieee754_sqrt+0x34>
 8005cf4:	b15d      	cbz	r5, 8005d0e <__ieee754_sqrt+0x62>
 8005cf6:	ee10 2a10 	vmov	r2, s0
 8005cfa:	462b      	mov	r3, r5
 8005cfc:	ee10 0a10 	vmov	r0, s0
 8005d00:	f7fa fa6e 	bl	80001e0 <__aeabi_dsub>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	f7fa fd4c 	bl	80007a4 <__aeabi_ddiv>
 8005d0c:	e7e6      	b.n	8005cdc <__ieee754_sqrt+0x30>
 8005d0e:	1512      	asrs	r2, r2, #20
 8005d10:	d074      	beq.n	8005dfc <__ieee754_sqrt+0x150>
 8005d12:	07d4      	lsls	r4, r2, #31
 8005d14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005d18:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005d1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005d20:	bf5e      	ittt	pl
 8005d22:	0fda      	lsrpl	r2, r3, #31
 8005d24:	005b      	lslpl	r3, r3, #1
 8005d26:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005d2a:	2400      	movs	r4, #0
 8005d2c:	0fda      	lsrs	r2, r3, #31
 8005d2e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005d32:	107f      	asrs	r7, r7, #1
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	2516      	movs	r5, #22
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005d3e:	1886      	adds	r6, r0, r2
 8005d40:	428e      	cmp	r6, r1
 8005d42:	bfde      	ittt	le
 8005d44:	1b89      	suble	r1, r1, r6
 8005d46:	18b0      	addle	r0, r6, r2
 8005d48:	18a4      	addle	r4, r4, r2
 8005d4a:	0049      	lsls	r1, r1, #1
 8005d4c:	3d01      	subs	r5, #1
 8005d4e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005d52:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005d56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d5a:	d1f0      	bne.n	8005d3e <__ieee754_sqrt+0x92>
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	f04f 0e20 	mov.w	lr, #32
 8005d62:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005d66:	4281      	cmp	r1, r0
 8005d68:	eb06 0c05 	add.w	ip, r6, r5
 8005d6c:	dc02      	bgt.n	8005d74 <__ieee754_sqrt+0xc8>
 8005d6e:	d113      	bne.n	8005d98 <__ieee754_sqrt+0xec>
 8005d70:	459c      	cmp	ip, r3
 8005d72:	d811      	bhi.n	8005d98 <__ieee754_sqrt+0xec>
 8005d74:	f1bc 0f00 	cmp.w	ip, #0
 8005d78:	eb0c 0506 	add.w	r5, ip, r6
 8005d7c:	da43      	bge.n	8005e06 <__ieee754_sqrt+0x15a>
 8005d7e:	2d00      	cmp	r5, #0
 8005d80:	db41      	blt.n	8005e06 <__ieee754_sqrt+0x15a>
 8005d82:	f100 0801 	add.w	r8, r0, #1
 8005d86:	1a09      	subs	r1, r1, r0
 8005d88:	459c      	cmp	ip, r3
 8005d8a:	bf88      	it	hi
 8005d8c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005d90:	eba3 030c 	sub.w	r3, r3, ip
 8005d94:	4432      	add	r2, r6
 8005d96:	4640      	mov	r0, r8
 8005d98:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005d9c:	f1be 0e01 	subs.w	lr, lr, #1
 8005da0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005da4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005da8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005dac:	d1db      	bne.n	8005d66 <__ieee754_sqrt+0xba>
 8005dae:	430b      	orrs	r3, r1
 8005db0:	d006      	beq.n	8005dc0 <__ieee754_sqrt+0x114>
 8005db2:	1c50      	adds	r0, r2, #1
 8005db4:	bf13      	iteet	ne
 8005db6:	3201      	addne	r2, #1
 8005db8:	3401      	addeq	r4, #1
 8005dba:	4672      	moveq	r2, lr
 8005dbc:	f022 0201 	bicne.w	r2, r2, #1
 8005dc0:	1063      	asrs	r3, r4, #1
 8005dc2:	0852      	lsrs	r2, r2, #1
 8005dc4:	07e1      	lsls	r1, r4, #31
 8005dc6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005dca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005dce:	bf48      	it	mi
 8005dd0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005dd4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005dd8:	4614      	mov	r4, r2
 8005dda:	e781      	b.n	8005ce0 <__ieee754_sqrt+0x34>
 8005ddc:	0ad9      	lsrs	r1, r3, #11
 8005dde:	3815      	subs	r0, #21
 8005de0:	055b      	lsls	r3, r3, #21
 8005de2:	2900      	cmp	r1, #0
 8005de4:	d0fa      	beq.n	8005ddc <__ieee754_sqrt+0x130>
 8005de6:	02cd      	lsls	r5, r1, #11
 8005de8:	d50a      	bpl.n	8005e00 <__ieee754_sqrt+0x154>
 8005dea:	f1c2 0420 	rsb	r4, r2, #32
 8005dee:	fa23 f404 	lsr.w	r4, r3, r4
 8005df2:	1e55      	subs	r5, r2, #1
 8005df4:	4093      	lsls	r3, r2
 8005df6:	4321      	orrs	r1, r4
 8005df8:	1b42      	subs	r2, r0, r5
 8005dfa:	e78a      	b.n	8005d12 <__ieee754_sqrt+0x66>
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	e7f0      	b.n	8005de2 <__ieee754_sqrt+0x136>
 8005e00:	0049      	lsls	r1, r1, #1
 8005e02:	3201      	adds	r2, #1
 8005e04:	e7ef      	b.n	8005de6 <__ieee754_sqrt+0x13a>
 8005e06:	4680      	mov	r8, r0
 8005e08:	e7bd      	b.n	8005d86 <__ieee754_sqrt+0xda>
 8005e0a:	bf00      	nop
 8005e0c:	7ff00000 	.word	0x7ff00000

08005e10 <with_errno>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	4604      	mov	r4, r0
 8005e14:	460d      	mov	r5, r1
 8005e16:	4616      	mov	r6, r2
 8005e18:	f7ff f94a 	bl	80050b0 <__errno>
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	6006      	str	r6, [r0, #0]
 8005e20:	4620      	mov	r0, r4
 8005e22:	bd70      	pop	{r4, r5, r6, pc}

08005e24 <xflow>:
 8005e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e26:	4614      	mov	r4, r2
 8005e28:	461d      	mov	r5, r3
 8005e2a:	b108      	cbz	r0, 8005e30 <xflow+0xc>
 8005e2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e30:	e9cd 2300 	strd	r2, r3, [sp]
 8005e34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e38:	4620      	mov	r0, r4
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	f7fa fb88 	bl	8000550 <__aeabi_dmul>
 8005e40:	2222      	movs	r2, #34	; 0x22
 8005e42:	b003      	add	sp, #12
 8005e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e48:	f7ff bfe2 	b.w	8005e10 <with_errno>

08005e4c <__math_uflow>:
 8005e4c:	b508      	push	{r3, lr}
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005e54:	f7ff ffe6 	bl	8005e24 <xflow>
 8005e58:	ec41 0b10 	vmov	d0, r0, r1
 8005e5c:	bd08      	pop	{r3, pc}

08005e5e <__math_oflow>:
 8005e5e:	b508      	push	{r3, lr}
 8005e60:	2200      	movs	r2, #0
 8005e62:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005e66:	f7ff ffdd 	bl	8005e24 <xflow>
 8005e6a:	ec41 0b10 	vmov	d0, r0, r1
 8005e6e:	bd08      	pop	{r3, pc}

08005e70 <fabs>:
 8005e70:	ec51 0b10 	vmov	r0, r1, d0
 8005e74:	ee10 2a10 	vmov	r2, s0
 8005e78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e7c:	ec43 2b10 	vmov	d0, r2, r3
 8005e80:	4770      	bx	lr

08005e82 <finite>:
 8005e82:	b082      	sub	sp, #8
 8005e84:	ed8d 0b00 	vstr	d0, [sp]
 8005e88:	9801      	ldr	r0, [sp, #4]
 8005e8a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005e8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005e92:	0fc0      	lsrs	r0, r0, #31
 8005e94:	b002      	add	sp, #8
 8005e96:	4770      	bx	lr

08005e98 <scalbn>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	ec55 4b10 	vmov	r4, r5, d0
 8005e9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	462b      	mov	r3, r5
 8005ea6:	b99a      	cbnz	r2, 8005ed0 <scalbn+0x38>
 8005ea8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005eac:	4323      	orrs	r3, r4
 8005eae:	d036      	beq.n	8005f1e <scalbn+0x86>
 8005eb0:	4b39      	ldr	r3, [pc, #228]	; (8005f98 <scalbn+0x100>)
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	ee10 0a10 	vmov	r0, s0
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f7fa fb49 	bl	8000550 <__aeabi_dmul>
 8005ebe:	4b37      	ldr	r3, [pc, #220]	; (8005f9c <scalbn+0x104>)
 8005ec0:	429e      	cmp	r6, r3
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	460d      	mov	r5, r1
 8005ec6:	da10      	bge.n	8005eea <scalbn+0x52>
 8005ec8:	a32b      	add	r3, pc, #172	; (adr r3, 8005f78 <scalbn+0xe0>)
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	e03a      	b.n	8005f46 <scalbn+0xae>
 8005ed0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005ed4:	428a      	cmp	r2, r1
 8005ed6:	d10c      	bne.n	8005ef2 <scalbn+0x5a>
 8005ed8:	ee10 2a10 	vmov	r2, s0
 8005edc:	4620      	mov	r0, r4
 8005ede:	4629      	mov	r1, r5
 8005ee0:	f7fa f980 	bl	80001e4 <__adddf3>
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	460d      	mov	r5, r1
 8005ee8:	e019      	b.n	8005f1e <scalbn+0x86>
 8005eea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005eee:	460b      	mov	r3, r1
 8005ef0:	3a36      	subs	r2, #54	; 0x36
 8005ef2:	4432      	add	r2, r6
 8005ef4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005ef8:	428a      	cmp	r2, r1
 8005efa:	dd08      	ble.n	8005f0e <scalbn+0x76>
 8005efc:	2d00      	cmp	r5, #0
 8005efe:	a120      	add	r1, pc, #128	; (adr r1, 8005f80 <scalbn+0xe8>)
 8005f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f04:	da1c      	bge.n	8005f40 <scalbn+0xa8>
 8005f06:	a120      	add	r1, pc, #128	; (adr r1, 8005f88 <scalbn+0xf0>)
 8005f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f0c:	e018      	b.n	8005f40 <scalbn+0xa8>
 8005f0e:	2a00      	cmp	r2, #0
 8005f10:	dd08      	ble.n	8005f24 <scalbn+0x8c>
 8005f12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005f1e:	ec45 4b10 	vmov	d0, r4, r5
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005f28:	da19      	bge.n	8005f5e <scalbn+0xc6>
 8005f2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005f2e:	429e      	cmp	r6, r3
 8005f30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005f34:	dd0a      	ble.n	8005f4c <scalbn+0xb4>
 8005f36:	a112      	add	r1, pc, #72	; (adr r1, 8005f80 <scalbn+0xe8>)
 8005f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e2      	bne.n	8005f06 <scalbn+0x6e>
 8005f40:	a30f      	add	r3, pc, #60	; (adr r3, 8005f80 <scalbn+0xe8>)
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f7fa fb03 	bl	8000550 <__aeabi_dmul>
 8005f4a:	e7cb      	b.n	8005ee4 <scalbn+0x4c>
 8005f4c:	a10a      	add	r1, pc, #40	; (adr r1, 8005f78 <scalbn+0xe0>)
 8005f4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0b8      	beq.n	8005ec8 <scalbn+0x30>
 8005f56:	a10e      	add	r1, pc, #56	; (adr r1, 8005f90 <scalbn+0xf8>)
 8005f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f5c:	e7b4      	b.n	8005ec8 <scalbn+0x30>
 8005f5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f62:	3236      	adds	r2, #54	; 0x36
 8005f64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <scalbn+0x108>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	e7e8      	b.n	8005f46 <scalbn+0xae>
 8005f74:	f3af 8000 	nop.w
 8005f78:	c2f8f359 	.word	0xc2f8f359
 8005f7c:	01a56e1f 	.word	0x01a56e1f
 8005f80:	8800759c 	.word	0x8800759c
 8005f84:	7e37e43c 	.word	0x7e37e43c
 8005f88:	8800759c 	.word	0x8800759c
 8005f8c:	fe37e43c 	.word	0xfe37e43c
 8005f90:	c2f8f359 	.word	0xc2f8f359
 8005f94:	81a56e1f 	.word	0x81a56e1f
 8005f98:	43500000 	.word	0x43500000
 8005f9c:	ffff3cb0 	.word	0xffff3cb0
 8005fa0:	3c900000 	.word	0x3c900000

08005fa4 <_init>:
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	bf00      	nop
 8005fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005faa:	bc08      	pop	{r3}
 8005fac:	469e      	mov	lr, r3
 8005fae:	4770      	bx	lr

08005fb0 <_fini>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	bf00      	nop
 8005fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb6:	bc08      	pop	{r3}
 8005fb8:	469e      	mov	lr, r3
 8005fba:	4770      	bx	lr
