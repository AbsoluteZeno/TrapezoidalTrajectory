
TrapezoidalTraj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdbc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  0800cf58  0800cf58  0001cf58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d820  0800d820  000202fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d820  0800d820  0001d820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d828  0800d828  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d828  0800d828  0001d828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d82c  0800d82c  0001d82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  0800d830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce0  20000300  0800db2c  00020300  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000fe0  0800db2c  00020fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab3f  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003561  00000000  00000000  0003ae6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0003e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  0003f718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b391  00000000  00000000  00040950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfcb  00000000  00000000  0005bce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0cbf  00000000  00000000  00078cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011996b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005580  00000000  00000000  001199bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000300 	.word	0x20000300
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800cf3c 	.word	0x0800cf3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000304 	.word	0x20000304
 80001d4:	0800cf3c 	.word	0x0800cf3c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b992 	b.w	80010a8 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f824 	bl	8000dd8 <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fbd3 	bl	8000550 <__aeabi_dmul>
 8000daa:	f000 f97f 	bl	80010ac <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fb54 	bl	800045c <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fbca 	bl	8000550 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa0c 	bl	80001e0 <__aeabi_dsub>
 8000dc8:	f000 f970 	bl	80010ac <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__aeabi_d2uiz>:
 80010ac:	004a      	lsls	r2, r1, #1
 80010ae:	d211      	bcs.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010b4:	d211      	bcs.n	80010da <__aeabi_d2uiz+0x2e>
 80010b6:	d50d      	bpl.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010c0:	d40e      	bmi.n	80010e0 <__aeabi_d2uiz+0x34>
 80010c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010ce:	fa23 f002 	lsr.w	r0, r3, r2
 80010d2:	4770      	bx	lr
 80010d4:	f04f 0000 	mov.w	r0, #0
 80010d8:	4770      	bx	lr
 80010da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80010de:	d102      	bne.n	80010e6 <__aeabi_d2uiz+0x3a>
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0000 	mov.w	r0, #0
 80010ea:	4770      	bx	lr

080010ec <BaseSystem_SetHome>:
int Pickopposite_last[2] = {0, 0};
int Placereference_last[2] = {0, 0};
int Placeopposite_last[2] = {0, 0};

void BaseSystem_SetHome()
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	static enum {idle, sethome} state = idle;

	if (SetHomeFlag)
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <BaseSystem_SetHome+0x74>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d02a      	beq.n	800114e <BaseSystem_SetHome+0x62>
	{
		switch(state)
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <BaseSystem_SetHome+0x78>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <BaseSystem_SetHome+0x1a>
 8001100:	2b01      	cmp	r3, #1
 8001102:	d011      	beq.n	8001128 <BaseSystem_SetHome+0x3c>
				registerFrame[16].U16 = 0b00000000;//bit 2 set home = 0 //y-axis moving status
			}
		break;
		}
	}
}
 8001104:	e026      	b.n	8001154 <BaseSystem_SetHome+0x68>
			registerFrame[1].U16 = 0b00000000; //bit 2 set home = 0 //base system status
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <BaseSystem_SetHome+0x7c>)
 8001108:	2200      	movs	r2, #0
 800110a:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b00000100; //bit 2 set home = 1 //y-axis moving status
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <BaseSystem_SetHome+0x7c>)
 800110e:	2204      	movs	r2, #4
 8001110:	841a      	strh	r2, [r3, #32]
			registerFrame[64].U16 = 0b00000001;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <BaseSystem_SetHome+0x7c>)
 8001114:	2201      	movs	r2, #1
 8001116:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			SetHomeYFlag = 1;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <BaseSystem_SetHome+0x80>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
			state = sethome;
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <BaseSystem_SetHome+0x78>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
		break;
 8001126:	e015      	b.n	8001154 <BaseSystem_SetHome+0x68>
			if((registerFrame[64].U16 == 0b00000000) && (SetHomeYFlag == 0))
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <BaseSystem_SetHome+0x7c>)
 800112a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10f      	bne.n	8001152 <BaseSystem_SetHome+0x66>
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <BaseSystem_SetHome+0x80>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <BaseSystem_SetHome+0x66>
				state = idle;
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <BaseSystem_SetHome+0x78>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
				SetHomeFlag = 0;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <BaseSystem_SetHome+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
				registerFrame[16].U16 = 0b00000000;//bit 2 set home = 0 //y-axis moving status
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <BaseSystem_SetHome+0x7c>)
 8001148:	2200      	movs	r2, #0
 800114a:	841a      	strh	r2, [r3, #32]
		break;
 800114c:	e001      	b.n	8001152 <BaseSystem_SetHome+0x66>
	}
 800114e:	bf00      	nop
 8001150:	e000      	b.n	8001154 <BaseSystem_SetHome+0x68>
		break;
 8001152:	bf00      	nop
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000fd6 	.word	0x20000fd6
 8001164:	20000340 	.word	0x20000340
 8001168:	20000f48 	.word	0x20000f48
 800116c:	20000259 	.word	0x20000259

08001170 <BaseSystem_RunPointMode>:

void BaseSystem_RunPointMode()
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	static enum {idle, RunPointMode} state = idle;

	if (RunPointFlag)
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <BaseSystem_RunPointMode+0xc8>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d057      	beq.n	800122c <BaseSystem_RunPointMode+0xbc>
	{
		switch(state)
 800117c:	4b2f      	ldr	r3, [pc, #188]	; (800123c <BaseSystem_RunPointMode+0xcc>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <BaseSystem_RunPointMode+0x1a>
 8001184:	2b01      	cmp	r3, #1
 8001186:	d00d      	beq.n	80011a4 <BaseSystem_RunPointMode+0x34>
				RunPointFlag = 0;
			}
		break;
		}
	}
}
 8001188:	e053      	b.n	8001232 <BaseSystem_RunPointMode+0xc2>
			registerFrame[1].U16 = 0b00000000; //bit 4 run point mode = 0 //base system status
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 800118c:	2200      	movs	r2, #0
 800118e:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b00100000; //bit 5 go point = 1 //y-axis moving status
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 8001192:	2220      	movs	r2, #32
 8001194:	841a      	strh	r2, [r3, #32]
			state = RunPointMode;
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <BaseSystem_RunPointMode+0xcc>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
			runXFlag = 1;
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <BaseSystem_RunPointMode+0xd4>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
		break;
 80011a2:	e046      	b.n	8001232 <BaseSystem_RunPointMode+0xc2>
			if (runXFlag)
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <BaseSystem_RunPointMode+0xd4>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d02a      	beq.n	8001202 <BaseSystem_RunPointMode+0x92>
				registerFrame[65].U16 = registerFrame[48].U16; //position -1400 to 1400
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 80011ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 80011b4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				registerFrame[66].U16 = 3000; //velocity max 3000
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 80011ba:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011be:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				registerFrame[67].U16 = 1; //acceleration 1 2 3
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
				registerFrame[64].U16 = 2; //Run
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				Pf = ((int16_t)registerFrame[49].U16)/10.0;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 80011d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f94e 	bl	800047c <__aeabi_i2d>
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <BaseSystem_RunPointMode+0xd8>)
 80011e6:	f7ff fadd 	bl	80007a4 <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fc5d 	bl	8000ab0 <__aeabi_d2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <BaseSystem_RunPointMode+0xdc>)
 80011fa:	6013      	str	r3, [r2, #0]
				runXFlag = 0;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <BaseSystem_RunPointMode+0xd4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
			ControllerState();
 8001202:	f002 ff9d 	bl	8004140 <ControllerState>
			if(ControllerFinishedFollowFlag && (registerFrame[64].U16 == 0))
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <BaseSystem_RunPointMode+0xe0>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d010      	beq.n	8001230 <BaseSystem_RunPointMode+0xc0>
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 8001210:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001214:	2b00      	cmp	r3, #0
 8001216:	d10b      	bne.n	8001230 <BaseSystem_RunPointMode+0xc0>
				state = idle;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <BaseSystem_RunPointMode+0xcc>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
				registerFrame[16].U16 = 0b00000000; //bit 5 go point = 0 //y-axis moving status
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <BaseSystem_RunPointMode+0xd0>)
 8001220:	2200      	movs	r2, #0
 8001222:	841a      	strh	r2, [r3, #32]
				RunPointFlag = 0;
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <BaseSystem_RunPointMode+0xc8>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
		break;
 800122a:	e001      	b.n	8001230 <BaseSystem_RunPointMode+0xc0>
	}
 800122c:	bf00      	nop
 800122e:	e000      	b.n	8001232 <BaseSystem_RunPointMode+0xc2>
		break;
 8001230:	bf00      	nop
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000fd8 	.word	0x20000fd8
 800123c:	20000341 	.word	0x20000341
 8001240:	20000f48 	.word	0x20000f48
 8001244:	2000031c 	.word	0x2000031c
 8001248:	40240000 	.word	0x40240000
 800124c:	200008b0 	.word	0x200008b0
 8001250:	200008e8 	.word	0x200008e8

08001254 <BaseSystem_SetPickTray>:

void BaseSystem_SetPickTray()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af02      	add	r7, sp, #8
	static enum {Prepare, GetFirstPoint, GetSecondPoint} SetPickTrayState = Prepare;

	if (SetPickTrayFlag)
 800125a:	4b87      	ldr	r3, [pc, #540]	; (8001478 <BaseSystem_SetPickTray+0x224>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8106 	beq.w	8001470 <BaseSystem_SetPickTray+0x21c>
	{
		switch(SetPickTrayState)
 8001264:	4b85      	ldr	r3, [pc, #532]	; (800147c <BaseSystem_SetPickTray+0x228>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d054      	beq.n	8001316 <BaseSystem_SetPickTray+0xc2>
 800126c:	2b02      	cmp	r3, #2
 800126e:	f300 80c0 	bgt.w	80013f2 <BaseSystem_SetPickTray+0x19e>
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <BaseSystem_SetPickTray+0x28>
 8001276:	2b01      	cmp	r3, #1
 8001278:	d027      	beq.n	80012ca <BaseSystem_SetPickTray+0x76>
 800127a:	e0ba      	b.n	80013f2 <BaseSystem_SetPickTray+0x19e>
		{
		case Prepare:
			registerFrame[1].U16 = 0b00000;
 800127c:	4b80      	ldr	r3, [pc, #512]	; (8001480 <BaseSystem_SetPickTray+0x22c>)
 800127e:	2200      	movs	r2, #0
 8001280:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b000001;
 8001282:	4b7f      	ldr	r3, [pc, #508]	; (8001480 <BaseSystem_SetPickTray+0x22c>)
 8001284:	2201      	movs	r2, #1
 8001286:	841a      	strh	r2, [r3, #32]
			SetPickTrayState = GetFirstPoint;
 8001288:	4b7c      	ldr	r3, [pc, #496]	; (800147c <BaseSystem_SetPickTray+0x228>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001294:	487b      	ldr	r0, [pc, #492]	; (8001484 <BaseSystem_SetPickTray+0x230>)
 8001296:	f005 f895 	bl	80063c4 <HAL_GPIO_WritePin>
			eff_write(testMode_cmd);
 800129a:	487b      	ldr	r0, [pc, #492]	; (8001488 <BaseSystem_SetPickTray+0x234>)
 800129c:	f000 fe5e 	bl	8001f5c <eff_write>
			memset(Pickreference, 0, sizeof(Pickreference));
 80012a0:	2208      	movs	r2, #8
 80012a2:	2100      	movs	r1, #0
 80012a4:	4879      	ldr	r0, [pc, #484]	; (800148c <BaseSystem_SetPickTray+0x238>)
 80012a6:	f00a fc8d 	bl	800bbc4 <memset>
			memset(Pickopposite, 0, sizeof(Pickopposite));
 80012aa:	2208      	movs	r2, #8
 80012ac:	2100      	movs	r1, #0
 80012ae:	4878      	ldr	r0, [pc, #480]	; (8001490 <BaseSystem_SetPickTray+0x23c>)
 80012b0:	f00a fc88 	bl	800bbc4 <memset>
			memset(Pickreference_last, 0, sizeof(Pickreference_last));
 80012b4:	2208      	movs	r2, #8
 80012b6:	2100      	movs	r1, #0
 80012b8:	4876      	ldr	r0, [pc, #472]	; (8001494 <BaseSystem_SetPickTray+0x240>)
 80012ba:	f00a fc83 	bl	800bbc4 <memset>
			memset(Pickopposite_last, 0, sizeof(Pickopposite_last));
 80012be:	2208      	movs	r2, #8
 80012c0:	2100      	movs	r1, #0
 80012c2:	4875      	ldr	r0, [pc, #468]	; (8001498 <BaseSystem_SetPickTray+0x244>)
 80012c4:	f00a fc7e 	bl	800bbc4 <memset>
		break;
 80012c8:	e093      	b.n	80013f2 <BaseSystem_SetPickTray+0x19e>
		case GetFirstPoint:
			GetJoystickXYaxisValue(&Pickreference[0], &Pickreference[1]);
 80012ca:	4974      	ldr	r1, [pc, #464]	; (800149c <BaseSystem_SetPickTray+0x248>)
 80012cc:	486f      	ldr	r0, [pc, #444]	; (800148c <BaseSystem_SetPickTray+0x238>)
 80012ce:	f002 f833 	bl	8003338 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 80012d2:	f002 f955 	bl	8003580 <JoyStickControlCartesian>

			if ((Pickreference_last[0] != Pickreference[0]) || (Pickreference_last[1] != Pickreference[1]))
 80012d6:	4b6f      	ldr	r3, [pc, #444]	; (8001494 <BaseSystem_SetPickTray+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e2:	4b6a      	ldr	r3, [pc, #424]	; (800148c <BaseSystem_SetPickTray+0x238>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	eeb4 7a67 	vcmp.f32	s14, s15
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	d10d      	bne.n	800130e <BaseSystem_SetPickTray+0xba>
 80012f2:	4b68      	ldr	r3, [pc, #416]	; (8001494 <BaseSystem_SetPickTray+0x240>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fe:	4b63      	ldr	r3, [pc, #396]	; (800148c <BaseSystem_SetPickTray+0x238>)
 8001300:	edd3 7a01 	vldr	s15, [r3, #4]
 8001304:	eeb4 7a67 	vcmp.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	d06e      	beq.n	80013ec <BaseSystem_SetPickTray+0x198>
			{
				SetPickTrayState = GetSecondPoint;
 800130e:	4b5b      	ldr	r3, [pc, #364]	; (800147c <BaseSystem_SetPickTray+0x228>)
 8001310:	2202      	movs	r2, #2
 8001312:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001314:	e06a      	b.n	80013ec <BaseSystem_SetPickTray+0x198>
		case GetSecondPoint:

			GetJoystickXYaxisValue(&Pickopposite[0], &Pickopposite[1]);
 8001316:	4962      	ldr	r1, [pc, #392]	; (80014a0 <BaseSystem_SetPickTray+0x24c>)
 8001318:	485d      	ldr	r0, [pc, #372]	; (8001490 <BaseSystem_SetPickTray+0x23c>)
 800131a:	f002 f80d 	bl	8003338 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 800131e:	f002 f92f 	bl	8003580 <JoyStickControlCartesian>

			if ((Pickopposite_last[0] != Pickopposite[0]) || (Pickopposite_last[1] != Pickopposite[1]))
 8001322:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <BaseSystem_SetPickTray+0x244>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800132e:	4b58      	ldr	r3, [pc, #352]	; (8001490 <BaseSystem_SetPickTray+0x23c>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	eeb4 7a67 	vcmp.f32	s14, s15
 8001338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133c:	d10d      	bne.n	800135a <BaseSystem_SetPickTray+0x106>
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <BaseSystem_SetPickTray+0x244>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134a:	4b51      	ldr	r3, [pc, #324]	; (8001490 <BaseSystem_SetPickTray+0x23c>)
 800134c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001350:	eeb4 7a67 	vcmp.f32	s14, s15
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	d04a      	beq.n	80013f0 <BaseSystem_SetPickTray+0x19c>
			{

				SetPickTrayState = Prepare;
 800135a:	4b48      	ldr	r3, [pc, #288]	; (800147c <BaseSystem_SetPickTray+0x228>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
				SetTwoPointsForCalibrate(Pickreference, Pickreference+1, Pickopposite, Pickopposite+1, 0);
 8001360:	494e      	ldr	r1, [pc, #312]	; (800149c <BaseSystem_SetPickTray+0x248>)
 8001362:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <BaseSystem_SetPickTray+0x24c>)
 8001364:	2300      	movs	r3, #0
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	4a49      	ldr	r2, [pc, #292]	; (8001490 <BaseSystem_SetPickTray+0x23c>)
 800136c:	4847      	ldr	r0, [pc, #284]	; (800148c <BaseSystem_SetPickTray+0x238>)
 800136e:	f001 fe07 	bl	8002f80 <SetTwoPointsForCalibrate>
				registerFrame[32].U16 = (int)(Pickreference[0]*10);
 8001372:	4b46      	ldr	r3, [pc, #280]	; (800148c <BaseSystem_SetPickTray+0x238>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800137c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001384:	ee17 3a90 	vmov	r3, s15
 8001388:	b29a      	uxth	r2, r3
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <BaseSystem_SetPickTray+0x22c>)
 800138c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				registerFrame[33].U16 = (int)(Pickreference[1]*10);
 8001390:	4b3e      	ldr	r3, [pc, #248]	; (800148c <BaseSystem_SetPickTray+0x238>)
 8001392:	edd3 7a01 	vldr	s15, [r3, #4]
 8001396:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800139a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a2:	ee17 3a90 	vmov	r3, s15
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b35      	ldr	r3, [pc, #212]	; (8001480 <BaseSystem_SetPickTray+0x22c>)
 80013aa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
				registerFrame[34].U16 = (int)(PickrotationAngleDegree*100);
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <BaseSystem_SetPickTray+0x250>)
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80014a8 <BaseSystem_SetPickTray+0x254>
 80013b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c0:	ee17 3a90 	vmov	r3, s15
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <BaseSystem_SetPickTray+0x22c>)
 80013c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				registerFrame[16].U16 = 0b000000;
 80013cc:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <BaseSystem_SetPickTray+0x22c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	841a      	strh	r2, [r3, #32]
				SetPickTrayFlag = 0;
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <BaseSystem_SetPickTray+0x224>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013de:	4829      	ldr	r0, [pc, #164]	; (8001484 <BaseSystem_SetPickTray+0x230>)
 80013e0:	f004 fff0 	bl	80063c4 <HAL_GPIO_WritePin>
				eff_write(exitTest_cmd);
 80013e4:	4831      	ldr	r0, [pc, #196]	; (80014ac <BaseSystem_SetPickTray+0x258>)
 80013e6:	f000 fdb9 	bl	8001f5c <eff_write>

			}
		break;
 80013ea:	e001      	b.n	80013f0 <BaseSystem_SetPickTray+0x19c>
		break;
 80013ec:	bf00      	nop
 80013ee:	e000      	b.n	80013f2 <BaseSystem_SetPickTray+0x19e>
		break;
 80013f0:	bf00      	nop
		}
		Pickreference_last[0] = Pickreference[0];
 80013f2:	4b26      	ldr	r3, [pc, #152]	; (800148c <BaseSystem_SetPickTray+0x238>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fc:	ee17 2a90 	vmov	r2, s15
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <BaseSystem_SetPickTray+0x240>)
 8001402:	601a      	str	r2, [r3, #0]
		Pickreference_last[1] = Pickreference[1];
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <BaseSystem_SetPickTray+0x238>)
 8001406:	edd3 7a01 	vldr	s15, [r3, #4]
 800140a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140e:	ee17 2a90 	vmov	r2, s15
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <BaseSystem_SetPickTray+0x240>)
 8001414:	605a      	str	r2, [r3, #4]
		Pickopposite_last[0] = Pickopposite[0];
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <BaseSystem_SetPickTray+0x23c>)
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001420:	ee17 2a90 	vmov	r2, s15
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <BaseSystem_SetPickTray+0x244>)
 8001426:	601a      	str	r2, [r3, #0]
		Pickopposite_last[1] = Pickopposite[1];
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <BaseSystem_SetPickTray+0x23c>)
 800142a:	edd3 7a01 	vldr	s15, [r3, #4]
 800142e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001432:	ee17 2a90 	vmov	r2, s15
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <BaseSystem_SetPickTray+0x244>)
 8001438:	605a      	str	r2, [r3, #4]

		if (SetHomeYFlag == 1)
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <BaseSystem_SetPickTray+0x25c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d116      	bne.n	8001470 <BaseSystem_SetPickTray+0x21c>
		{
			memset(Pickreference, 0, sizeof(Pickreference));
 8001442:	2208      	movs	r2, #8
 8001444:	2100      	movs	r1, #0
 8001446:	4811      	ldr	r0, [pc, #68]	; (800148c <BaseSystem_SetPickTray+0x238>)
 8001448:	f00a fbbc 	bl	800bbc4 <memset>
			memset(Pickopposite, 0, sizeof(Pickopposite));
 800144c:	2208      	movs	r2, #8
 800144e:	2100      	movs	r1, #0
 8001450:	480f      	ldr	r0, [pc, #60]	; (8001490 <BaseSystem_SetPickTray+0x23c>)
 8001452:	f00a fbb7 	bl	800bbc4 <memset>
			memset(Pickreference_last, 0, sizeof(Pickreference_last));
 8001456:	2208      	movs	r2, #8
 8001458:	2100      	movs	r1, #0
 800145a:	480e      	ldr	r0, [pc, #56]	; (8001494 <BaseSystem_SetPickTray+0x240>)
 800145c:	f00a fbb2 	bl	800bbc4 <memset>
			memset(Pickopposite_last, 0, sizeof(Pickopposite_last));
 8001460:	2208      	movs	r2, #8
 8001462:	2100      	movs	r1, #0
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <BaseSystem_SetPickTray+0x244>)
 8001466:	f00a fbad 	bl	800bbc4 <memset>
			SetPickTrayState = GetFirstPoint;
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <BaseSystem_SetPickTray+0x228>)
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000fd4 	.word	0x20000fd4
 800147c:	20000342 	.word	0x20000342
 8001480:	20000f48 	.word	0x20000f48
 8001484:	40020400 	.word	0x40020400
 8001488:	20000268 	.word	0x20000268
 800148c:	200009ac 	.word	0x200009ac
 8001490:	200009b4 	.word	0x200009b4
 8001494:	20000320 	.word	0x20000320
 8001498:	20000328 	.word	0x20000328
 800149c:	200009b0 	.word	0x200009b0
 80014a0:	200009b8 	.word	0x200009b8
 80014a4:	200009c0 	.word	0x200009c0
 80014a8:	42c80000 	.word	0x42c80000
 80014ac:	2000026c 	.word	0x2000026c
 80014b0:	20000259 	.word	0x20000259

080014b4 <BaseSystem_SetPlaceTray>:

void BaseSystem_SetPlaceTray()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af02      	add	r7, sp, #8
	static enum {Prepare, GetFirstPoint, GetSecondPoint} SetPlaceTrayState = Prepare;

	if(SetPlaceTrayFlag)
 80014ba:	4b87      	ldr	r3, [pc, #540]	; (80016d8 <BaseSystem_SetPlaceTray+0x224>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8106 	beq.w	80016d0 <BaseSystem_SetPlaceTray+0x21c>
	{
		switch(SetPlaceTrayState)
 80014c4:	4b85      	ldr	r3, [pc, #532]	; (80016dc <BaseSystem_SetPlaceTray+0x228>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d054      	beq.n	8001576 <BaseSystem_SetPlaceTray+0xc2>
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	f300 80c0 	bgt.w	8001652 <BaseSystem_SetPlaceTray+0x19e>
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <BaseSystem_SetPlaceTray+0x28>
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d027      	beq.n	800152a <BaseSystem_SetPlaceTray+0x76>
 80014da:	e0ba      	b.n	8001652 <BaseSystem_SetPlaceTray+0x19e>
		{
		case Prepare:
			registerFrame[1].U16 = 0b00000;
 80014dc:	4b80      	ldr	r3, [pc, #512]	; (80016e0 <BaseSystem_SetPlaceTray+0x22c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b000010;
 80014e2:	4b7f      	ldr	r3, [pc, #508]	; (80016e0 <BaseSystem_SetPlaceTray+0x22c>)
 80014e4:	2202      	movs	r2, #2
 80014e6:	841a      	strh	r2, [r3, #32]
			SetPlaceTrayState = GetFirstPoint;
 80014e8:	4b7c      	ldr	r3, [pc, #496]	; (80016dc <BaseSystem_SetPlaceTray+0x228>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f4:	487b      	ldr	r0, [pc, #492]	; (80016e4 <BaseSystem_SetPlaceTray+0x230>)
 80014f6:	f004 ff65 	bl	80063c4 <HAL_GPIO_WritePin>
			eff_write(testMode_cmd);
 80014fa:	487b      	ldr	r0, [pc, #492]	; (80016e8 <BaseSystem_SetPlaceTray+0x234>)
 80014fc:	f000 fd2e 	bl	8001f5c <eff_write>
			memset(Placereference, 0, sizeof(Placereference));
 8001500:	2208      	movs	r2, #8
 8001502:	2100      	movs	r1, #0
 8001504:	4879      	ldr	r0, [pc, #484]	; (80016ec <BaseSystem_SetPlaceTray+0x238>)
 8001506:	f00a fb5d 	bl	800bbc4 <memset>
			memset(Placeopposite, 0, sizeof(Placeopposite));
 800150a:	2208      	movs	r2, #8
 800150c:	2100      	movs	r1, #0
 800150e:	4878      	ldr	r0, [pc, #480]	; (80016f0 <BaseSystem_SetPlaceTray+0x23c>)
 8001510:	f00a fb58 	bl	800bbc4 <memset>
			memset(Placereference_last, 0, sizeof(Placereference_last));
 8001514:	2208      	movs	r2, #8
 8001516:	2100      	movs	r1, #0
 8001518:	4876      	ldr	r0, [pc, #472]	; (80016f4 <BaseSystem_SetPlaceTray+0x240>)
 800151a:	f00a fb53 	bl	800bbc4 <memset>
			memset(Placeopposite_last, 0, sizeof(Placeopposite_last));
 800151e:	2208      	movs	r2, #8
 8001520:	2100      	movs	r1, #0
 8001522:	4875      	ldr	r0, [pc, #468]	; (80016f8 <BaseSystem_SetPlaceTray+0x244>)
 8001524:	f00a fb4e 	bl	800bbc4 <memset>
		break;
 8001528:	e093      	b.n	8001652 <BaseSystem_SetPlaceTray+0x19e>
		case GetFirstPoint:
			GetJoystickXYaxisValue(&Placereference[0], &Placereference[1]);
 800152a:	4974      	ldr	r1, [pc, #464]	; (80016fc <BaseSystem_SetPlaceTray+0x248>)
 800152c:	486f      	ldr	r0, [pc, #444]	; (80016ec <BaseSystem_SetPlaceTray+0x238>)
 800152e:	f001 ff03 	bl	8003338 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 8001532:	f002 f825 	bl	8003580 <JoyStickControlCartesian>

			if ((Placereference_last[0] != Placereference[0]) || (Placereference_last[1] != Placereference[1]))
 8001536:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <BaseSystem_SetPlaceTray+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001542:	4b6a      	ldr	r3, [pc, #424]	; (80016ec <BaseSystem_SetPlaceTray+0x238>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	eeb4 7a67 	vcmp.f32	s14, s15
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	d10d      	bne.n	800156e <BaseSystem_SetPlaceTray+0xba>
 8001552:	4b68      	ldr	r3, [pc, #416]	; (80016f4 <BaseSystem_SetPlaceTray+0x240>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155e:	4b63      	ldr	r3, [pc, #396]	; (80016ec <BaseSystem_SetPlaceTray+0x238>)
 8001560:	edd3 7a01 	vldr	s15, [r3, #4]
 8001564:	eeb4 7a67 	vcmp.f32	s14, s15
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	d06e      	beq.n	800164c <BaseSystem_SetPlaceTray+0x198>
			{
				SetPlaceTrayState = GetSecondPoint;
 800156e:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <BaseSystem_SetPlaceTray+0x228>)
 8001570:	2202      	movs	r2, #2
 8001572:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001574:	e06a      	b.n	800164c <BaseSystem_SetPlaceTray+0x198>
		case GetSecondPoint:

			GetJoystickXYaxisValue(&Placeopposite[0], &Placeopposite[1]);
 8001576:	4962      	ldr	r1, [pc, #392]	; (8001700 <BaseSystem_SetPlaceTray+0x24c>)
 8001578:	485d      	ldr	r0, [pc, #372]	; (80016f0 <BaseSystem_SetPlaceTray+0x23c>)
 800157a:	f001 fedd 	bl	8003338 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 800157e:	f001 ffff 	bl	8003580 <JoyStickControlCartesian>

			if ((Placeopposite_last[0] != Placeopposite[0]) || (Placeopposite_last[1] != Placeopposite[1]))
 8001582:	4b5d      	ldr	r3, [pc, #372]	; (80016f8 <BaseSystem_SetPlaceTray+0x244>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800158e:	4b58      	ldr	r3, [pc, #352]	; (80016f0 <BaseSystem_SetPlaceTray+0x23c>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	eeb4 7a67 	vcmp.f32	s14, s15
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	d10d      	bne.n	80015ba <BaseSystem_SetPlaceTray+0x106>
 800159e:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <BaseSystem_SetPlaceTray+0x244>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015aa:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <BaseSystem_SetPlaceTray+0x23c>)
 80015ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80015b0:	eeb4 7a67 	vcmp.f32	s14, s15
 80015b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b8:	d04a      	beq.n	8001650 <BaseSystem_SetPlaceTray+0x19c>
			{

				SetPlaceTrayState = Prepare;
 80015ba:	4b48      	ldr	r3, [pc, #288]	; (80016dc <BaseSystem_SetPlaceTray+0x228>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
				SetTwoPointsForCalibrate(Placereference, Placereference+1, Placeopposite, Placeopposite+1, 1);
 80015c0:	494e      	ldr	r1, [pc, #312]	; (80016fc <BaseSystem_SetPlaceTray+0x248>)
 80015c2:	4a4f      	ldr	r2, [pc, #316]	; (8001700 <BaseSystem_SetPlaceTray+0x24c>)
 80015c4:	2301      	movs	r3, #1
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	4a49      	ldr	r2, [pc, #292]	; (80016f0 <BaseSystem_SetPlaceTray+0x23c>)
 80015cc:	4847      	ldr	r0, [pc, #284]	; (80016ec <BaseSystem_SetPlaceTray+0x238>)
 80015ce:	f001 fcd7 	bl	8002f80 <SetTwoPointsForCalibrate>
				registerFrame[35].U16 = (int)(Placereference[0]*10);
 80015d2:	4b46      	ldr	r3, [pc, #280]	; (80016ec <BaseSystem_SetPlaceTray+0x238>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e4:	ee17 3a90 	vmov	r3, s15
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <BaseSystem_SetPlaceTray+0x22c>)
 80015ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				registerFrame[36].U16 = (int)(Placereference[1]*10);
 80015f0:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <BaseSystem_SetPlaceTray+0x238>)
 80015f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80015f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001602:	ee17 3a90 	vmov	r3, s15
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b35      	ldr	r3, [pc, #212]	; (80016e0 <BaseSystem_SetPlaceTray+0x22c>)
 800160a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				registerFrame[37].U16 = (int)(PlacerotationAngleDegree*100);
 800160e:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <BaseSystem_SetPlaceTray+0x250>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001708 <BaseSystem_SetPlaceTray+0x254>
 8001618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001620:	ee17 3a90 	vmov	r3, s15
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b2e      	ldr	r3, [pc, #184]	; (80016e0 <BaseSystem_SetPlaceTray+0x22c>)
 8001628:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				registerFrame[16].U16 = 0b000000;
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <BaseSystem_SetPlaceTray+0x22c>)
 800162e:	2200      	movs	r2, #0
 8001630:	841a      	strh	r2, [r3, #32]
				SetPlaceTrayFlag = 0;
 8001632:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <BaseSystem_SetPlaceTray+0x224>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163e:	4829      	ldr	r0, [pc, #164]	; (80016e4 <BaseSystem_SetPlaceTray+0x230>)
 8001640:	f004 fec0 	bl	80063c4 <HAL_GPIO_WritePin>
				eff_write(exitTest_cmd);
 8001644:	4831      	ldr	r0, [pc, #196]	; (800170c <BaseSystem_SetPlaceTray+0x258>)
 8001646:	f000 fc89 	bl	8001f5c <eff_write>
			}
		break;
 800164a:	e001      	b.n	8001650 <BaseSystem_SetPlaceTray+0x19c>
		break;
 800164c:	bf00      	nop
 800164e:	e000      	b.n	8001652 <BaseSystem_SetPlaceTray+0x19e>
		break;
 8001650:	bf00      	nop
		}
		Placereference_last[0] = Placereference[0];
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <BaseSystem_SetPlaceTray+0x238>)
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165c:	ee17 2a90 	vmov	r2, s15
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <BaseSystem_SetPlaceTray+0x240>)
 8001662:	601a      	str	r2, [r3, #0]
		Placereference_last[1] = Placereference[1];
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <BaseSystem_SetPlaceTray+0x238>)
 8001666:	edd3 7a01 	vldr	s15, [r3, #4]
 800166a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800166e:	ee17 2a90 	vmov	r2, s15
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <BaseSystem_SetPlaceTray+0x240>)
 8001674:	605a      	str	r2, [r3, #4]
		Placeopposite_last[0] = Placeopposite[0];
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <BaseSystem_SetPlaceTray+0x23c>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001680:	ee17 2a90 	vmov	r2, s15
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <BaseSystem_SetPlaceTray+0x244>)
 8001686:	601a      	str	r2, [r3, #0]
		Placeopposite_last[1] = Placeopposite[1];
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <BaseSystem_SetPlaceTray+0x23c>)
 800168a:	edd3 7a01 	vldr	s15, [r3, #4]
 800168e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001692:	ee17 2a90 	vmov	r2, s15
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <BaseSystem_SetPlaceTray+0x244>)
 8001698:	605a      	str	r2, [r3, #4]

		if (SetHomeYFlag == 1)
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <BaseSystem_SetPlaceTray+0x25c>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d116      	bne.n	80016d0 <BaseSystem_SetPlaceTray+0x21c>
		{
			memset(Placereference, 0, sizeof(Placereference));
 80016a2:	2208      	movs	r2, #8
 80016a4:	2100      	movs	r1, #0
 80016a6:	4811      	ldr	r0, [pc, #68]	; (80016ec <BaseSystem_SetPlaceTray+0x238>)
 80016a8:	f00a fa8c 	bl	800bbc4 <memset>
			memset(Placeopposite, 0, sizeof(Placeopposite));
 80016ac:	2208      	movs	r2, #8
 80016ae:	2100      	movs	r1, #0
 80016b0:	480f      	ldr	r0, [pc, #60]	; (80016f0 <BaseSystem_SetPlaceTray+0x23c>)
 80016b2:	f00a fa87 	bl	800bbc4 <memset>
			memset(Placereference_last, 0, sizeof(Placereference_last));
 80016b6:	2208      	movs	r2, #8
 80016b8:	2100      	movs	r1, #0
 80016ba:	480e      	ldr	r0, [pc, #56]	; (80016f4 <BaseSystem_SetPlaceTray+0x240>)
 80016bc:	f00a fa82 	bl	800bbc4 <memset>
			memset(Placeopposite_last, 0, sizeof(Placeopposite_last));
 80016c0:	2208      	movs	r2, #8
 80016c2:	2100      	movs	r1, #0
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <BaseSystem_SetPlaceTray+0x244>)
 80016c6:	f00a fa7d 	bl	800bbc4 <memset>
			SetPlaceTrayState = GetFirstPoint;
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <BaseSystem_SetPlaceTray+0x228>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000fd5 	.word	0x20000fd5
 80016dc:	20000343 	.word	0x20000343
 80016e0:	20000f48 	.word	0x20000f48
 80016e4:	40020400 	.word	0x40020400
 80016e8:	20000268 	.word	0x20000268
 80016ec:	20000a0c 	.word	0x20000a0c
 80016f0:	20000a14 	.word	0x20000a14
 80016f4:	20000330 	.word	0x20000330
 80016f8:	20000338 	.word	0x20000338
 80016fc:	20000a10 	.word	0x20000a10
 8001700:	20000a18 	.word	0x20000a18
 8001704:	20000a20 	.word	0x20000a20
 8001708:	42c80000 	.word	0x42c80000
 800170c:	2000026c 	.word	0x2000026c
 8001710:	20000259 	.word	0x20000259

08001714 <BaseSystem_RuntrayMode>:

void BaseSystem_RuntrayMode()
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

	static uint8_t i = 0;
	static uint16_t PickDelay = 0;
	static uint16_t PlaceDelay = 0;

	if (RunTrayFlag)
 8001718:	4b87      	ldr	r3, [pc, #540]	; (8001938 <BaseSystem_RuntrayMode+0x224>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80fd 	beq.w	800191c <BaseSystem_RuntrayMode+0x208>
	{
		switch(RunTrayState)
 8001722:	4b86      	ldr	r3, [pc, #536]	; (800193c <BaseSystem_RuntrayMode+0x228>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b04      	cmp	r3, #4
 8001728:	f200 8103 	bhi.w	8001932 <BaseSystem_RuntrayMode+0x21e>
 800172c:	a201      	add	r2, pc, #4	; (adr r2, 8001734 <BaseSystem_RuntrayMode+0x20>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	08001749 	.word	0x08001749
 8001738:	0800177d 	.word	0x0800177d
 800173c:	0800180f 	.word	0x0800180f
 8001740:	08001839 	.word	0x08001839
 8001744:	080018d3 	.word	0x080018d3
			{
			case HolesCalculate:
				registerFrame[1].U16 = 0b00000;
 8001748:	4b7d      	ldr	r3, [pc, #500]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 800174a:	2200      	movs	r2, #0
 800174c:	805a      	strh	r2, [r3, #2]
				GoalReadyFlag = 0;
 800174e:	4b7d      	ldr	r3, [pc, #500]	; (8001944 <BaseSystem_RuntrayMode+0x230>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
				HolePositionsCartesian();
 8001754:	f001 fcc4 	bl	80030e0 <HolePositionsCartesian>
				if (GoalReadyFlag)
 8001758:	4b7a      	ldr	r3, [pc, #488]	; (8001944 <BaseSystem_RuntrayMode+0x230>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80df 	beq.w	8001920 <BaseSystem_RuntrayMode+0x20c>
				{
					RunTrayState = GoPick;
 8001762:	4b76      	ldr	r3, [pc, #472]	; (800193c <BaseSystem_RuntrayMode+0x228>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
					eff_write(runMode_cmd);
 8001768:	4877      	ldr	r0, [pc, #476]	; (8001948 <BaseSystem_RuntrayMode+0x234>)
 800176a:	f000 fbf7 	bl	8001f5c <eff_write>
					i = 0;
 800176e:	4b77      	ldr	r3, [pc, #476]	; (800194c <BaseSystem_RuntrayMode+0x238>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
					runXFlag = 1;
 8001774:	4b76      	ldr	r3, [pc, #472]	; (8001950 <BaseSystem_RuntrayMode+0x23c>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
				}
			break;
 800177a:	e0d1      	b.n	8001920 <BaseSystem_RuntrayMode+0x20c>
			case GoPick:
				if (runXFlag)
 800177c:	4b74      	ldr	r3, [pc, #464]	; (8001950 <BaseSystem_RuntrayMode+0x23c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d030      	beq.n	80017e6 <BaseSystem_RuntrayMode+0xd2>
				{
					// Run X
					registerFrame[65].U16 = (int)(PickTray9holes[2*i]*10); //position -1400 to 1400
 8001784:	4b71      	ldr	r3, [pc, #452]	; (800194c <BaseSystem_RuntrayMode+0x238>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4a72      	ldr	r2, [pc, #456]	; (8001954 <BaseSystem_RuntrayMode+0x240>)
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a0:	ee17 3a90 	vmov	r3, s15
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4b66      	ldr	r3, [pc, #408]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 80017a8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
					registerFrame[66].U16 = 3000; //velocity max 3000
 80017ac:	4b64      	ldr	r3, [pc, #400]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 80017ae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80017b2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
					registerFrame[67].U16 = 1; //acceleration 1 2 3
 80017b6:	4b62      	ldr	r3, [pc, #392]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					registerFrame[64].U16 = 2; //Run
 80017be:	4b60      	ldr	r3, [pc, #384]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 80017c0:	2202      	movs	r2, #2
 80017c2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

					// Run Y
					registerFrame[16].U16 = 0b001000;	// Y-Axis Moving status -> GoPick
 80017c6:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 80017c8:	2208      	movs	r2, #8
 80017ca:	841a      	strh	r2, [r3, #32]
					Pf = PickTray9holes[2*i + 1];
 80017cc:	4b5f      	ldr	r3, [pc, #380]	; (800194c <BaseSystem_RuntrayMode+0x238>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a5f      	ldr	r2, [pc, #380]	; (8001954 <BaseSystem_RuntrayMode+0x240>)
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a5e      	ldr	r2, [pc, #376]	; (8001958 <BaseSystem_RuntrayMode+0x244>)
 80017de:	6013      	str	r3, [r2, #0]

					runXFlag = 0;
 80017e0:	4b5b      	ldr	r3, [pc, #364]	; (8001950 <BaseSystem_RuntrayMode+0x23c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
				}
				ControllerState();
 80017e6:	f002 fcab 	bl	8004140 <ControllerState>

				if(ControllerFinishedFollowFlag && (registerFrame[64].U16 == 0))
 80017ea:	4b5c      	ldr	r3, [pc, #368]	; (800195c <BaseSystem_RuntrayMode+0x248>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8098 	beq.w	8001924 <BaseSystem_RuntrayMode+0x210>
 80017f4:	4b52      	ldr	r3, [pc, #328]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 80017f6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 8092 	bne.w	8001924 <BaseSystem_RuntrayMode+0x210>
				{
					RunTrayState = Pick;
 8001800:	4b4e      	ldr	r3, [pc, #312]	; (800193c <BaseSystem_RuntrayMode+0x228>)
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
					PickDelay = 0;
 8001806:	4b56      	ldr	r3, [pc, #344]	; (8001960 <BaseSystem_RuntrayMode+0x24c>)
 8001808:	2200      	movs	r2, #0
 800180a:	801a      	strh	r2, [r3, #0]
				}
			break;
 800180c:	e08a      	b.n	8001924 <BaseSystem_RuntrayMode+0x210>
			case Pick:
				eff_write(pickup_cmd);
 800180e:	4855      	ldr	r0, [pc, #340]	; (8001964 <BaseSystem_RuntrayMode+0x250>)
 8001810:	f000 fba4 	bl	8001f5c <eff_write>
				PickDelay++;
 8001814:	4b52      	ldr	r3, [pc, #328]	; (8001960 <BaseSystem_RuntrayMode+0x24c>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b50      	ldr	r3, [pc, #320]	; (8001960 <BaseSystem_RuntrayMode+0x24c>)
 800181e:	801a      	strh	r2, [r3, #0]

				if (PickDelay >= 2000)
 8001820:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <BaseSystem_RuntrayMode+0x24c>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001828:	d37e      	bcc.n	8001928 <BaseSystem_RuntrayMode+0x214>
				{
					RunTrayState = GoPlace;
 800182a:	4b44      	ldr	r3, [pc, #272]	; (800193c <BaseSystem_RuntrayMode+0x228>)
 800182c:	2203      	movs	r2, #3
 800182e:	701a      	strb	r2, [r3, #0]
					runXFlag = 1;
 8001830:	4b47      	ldr	r3, [pc, #284]	; (8001950 <BaseSystem_RuntrayMode+0x23c>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
				}
			break;
 8001836:	e077      	b.n	8001928 <BaseSystem_RuntrayMode+0x214>
			case GoPlace:
				if (runXFlag)
 8001838:	4b45      	ldr	r3, [pc, #276]	; (8001950 <BaseSystem_RuntrayMode+0x23c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d030      	beq.n	80018a2 <BaseSystem_RuntrayMode+0x18e>
				{
					// Run X
					registerFrame[65].U16 = (int)(PlaceTray9holes[2*i]*10); //position -1400 to 1400
 8001840:	4b42      	ldr	r3, [pc, #264]	; (800194c <BaseSystem_RuntrayMode+0x238>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4a48      	ldr	r2, [pc, #288]	; (8001968 <BaseSystem_RuntrayMode+0x254>)
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185c:	ee17 3a90 	vmov	r3, s15
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b37      	ldr	r3, [pc, #220]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 8001864:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
					registerFrame[66].U16 = 3000; //velocity max 3000
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 800186a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800186e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
					registerFrame[67].U16 = 1; //acceleration 1 2 3
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 8001874:	2201      	movs	r2, #1
 8001876:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					registerFrame[64].U16 = 2; //Run
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 800187c:	2202      	movs	r2, #2
 800187e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

					// Run Y
					registerFrame[16].U16 = 0b010000;	// Y-Axis Moving status -> GoPlace
 8001882:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 8001884:	2210      	movs	r2, #16
 8001886:	841a      	strh	r2, [r3, #32]
					Pf = PlaceTray9holes[2*i + 1];
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <BaseSystem_RuntrayMode+0x238>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	3301      	adds	r3, #1
 8001890:	4a35      	ldr	r2, [pc, #212]	; (8001968 <BaseSystem_RuntrayMode+0x254>)
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a2f      	ldr	r2, [pc, #188]	; (8001958 <BaseSystem_RuntrayMode+0x244>)
 800189a:	6013      	str	r3, [r2, #0]

					runXFlag = 0;
 800189c:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <BaseSystem_RuntrayMode+0x23c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
				}
				ControllerState();
 80018a2:	f002 fc4d 	bl	8004140 <ControllerState>

				if(ControllerFinishedFollowFlag && (registerFrame[64].U16 == 0))
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <BaseSystem_RuntrayMode+0x248>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d03e      	beq.n	800192c <BaseSystem_RuntrayMode+0x218>
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 80018b0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d139      	bne.n	800192c <BaseSystem_RuntrayMode+0x218>
				{
					RunTrayState = Place;
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <BaseSystem_RuntrayMode+0x228>)
 80018ba:	2204      	movs	r2, #4
 80018bc:	701a      	strb	r2, [r3, #0]
					PlaceDelay = 0;
 80018be:	4b2b      	ldr	r3, [pc, #172]	; (800196c <BaseSystem_RuntrayMode+0x258>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	801a      	strh	r2, [r3, #0]
					i++;
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <BaseSystem_RuntrayMode+0x238>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	4b1f      	ldr	r3, [pc, #124]	; (800194c <BaseSystem_RuntrayMode+0x238>)
 80018ce:	701a      	strb	r2, [r3, #0]
				}
			break;
 80018d0:	e02c      	b.n	800192c <BaseSystem_RuntrayMode+0x218>
			case Place:
				eff_write(place_cmd);
 80018d2:	4827      	ldr	r0, [pc, #156]	; (8001970 <BaseSystem_RuntrayMode+0x25c>)
 80018d4:	f000 fb42 	bl	8001f5c <eff_write>
				PlaceDelay++;
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <BaseSystem_RuntrayMode+0x258>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <BaseSystem_RuntrayMode+0x258>)
 80018e2:	801a      	strh	r2, [r3, #0]

				if (PlaceDelay >= 2000)
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <BaseSystem_RuntrayMode+0x258>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018ec:	d320      	bcc.n	8001930 <BaseSystem_RuntrayMode+0x21c>
				{
					RunTrayState = GoPick;
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <BaseSystem_RuntrayMode+0x228>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
					runXFlag = 1;
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <BaseSystem_RuntrayMode+0x23c>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
					if(i >= 9)
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <BaseSystem_RuntrayMode+0x238>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d916      	bls.n	8001930 <BaseSystem_RuntrayMode+0x21c>
					{
						RunTrayState = HolesCalculate;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <BaseSystem_RuntrayMode+0x228>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
						eff_write(exitRun_cmd);
 8001908:	481a      	ldr	r0, [pc, #104]	; (8001974 <BaseSystem_RuntrayMode+0x260>)
 800190a:	f000 fb27 	bl	8001f5c <eff_write>
						registerFrame[16].U16 = 0;
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <BaseSystem_RuntrayMode+0x22c>)
 8001910:	2200      	movs	r2, #0
 8001912:	841a      	strh	r2, [r3, #32]
						RunTrayFlag = 0;
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <BaseSystem_RuntrayMode+0x224>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
					}
				}
			break;
 800191a:	e009      	b.n	8001930 <BaseSystem_RuntrayMode+0x21c>
			}
	}
 800191c:	bf00      	nop
 800191e:	e008      	b.n	8001932 <BaseSystem_RuntrayMode+0x21e>
			break;
 8001920:	bf00      	nop
 8001922:	e006      	b.n	8001932 <BaseSystem_RuntrayMode+0x21e>
			break;
 8001924:	bf00      	nop
 8001926:	e004      	b.n	8001932 <BaseSystem_RuntrayMode+0x21e>
			break;
 8001928:	bf00      	nop
 800192a:	e002      	b.n	8001932 <BaseSystem_RuntrayMode+0x21e>
			break;
 800192c:	bf00      	nop
 800192e:	e000      	b.n	8001932 <BaseSystem_RuntrayMode+0x21e>
			break;
 8001930:	bf00      	nop
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000fd7 	.word	0x20000fd7
 800193c:	20000344 	.word	0x20000344
 8001940:	20000f48 	.word	0x20000f48
 8001944:	20000a6c 	.word	0x20000a6c
 8001948:	20000270 	.word	0x20000270
 800194c:	20000345 	.word	0x20000345
 8001950:	2000031c 	.word	0x2000031c
 8001954:	200009c4 	.word	0x200009c4
 8001958:	200008b0 	.word	0x200008b0
 800195c:	200008e8 	.word	0x200008e8
 8001960:	20000346 	.word	0x20000346
 8001964:	20000278 	.word	0x20000278
 8001968:	20000a24 	.word	0x20000a24
 800196c:	20000348 	.word	0x20000348
 8001970:	2000027c 	.word	0x2000027c
 8001974:	20000274 	.word	0x20000274

08001978 <BaseSystem_EffAllOff>:

void BaseSystem_EffAllOff(){
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	if(EffAllOff_Flag == 1 && eff_action == 1){
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <BaseSystem_EffAllOff+0x2c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10c      	bne.n	800199e <BaseSystem_EffAllOff+0x26>
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <BaseSystem_EffAllOff+0x30>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d108      	bne.n	800199e <BaseSystem_EffAllOff+0x26>
		eff_write2(AllOff_cmd);
 800198c:	4807      	ldr	r0, [pc, #28]	; (80019ac <BaseSystem_EffAllOff+0x34>)
 800198e:	f000 faf5 	bl	8001f7c <eff_write2>
		EffAllOff_Flag = 0;
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <BaseSystem_EffAllOff+0x2c>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
		eff_action = 0;
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <BaseSystem_EffAllOff+0x30>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
	}
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200008fe 	.word	0x200008fe
 80019a8:	20000903 	.word	0x20000903
 80019ac:	20000280 	.word	0x20000280

080019b0 <BaseSystem_EffLaserOn>:
void BaseSystem_EffLaserOn(){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	if(EffLaserOn_Flag == 1 && eff_action == 1){
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <BaseSystem_EffLaserOn+0x2c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d10c      	bne.n	80019d6 <BaseSystem_EffLaserOn+0x26>
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <BaseSystem_EffLaserOn+0x30>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d108      	bne.n	80019d6 <BaseSystem_EffLaserOn+0x26>
		eff_write(testMode_cmd);
 80019c4:	4807      	ldr	r0, [pc, #28]	; (80019e4 <BaseSystem_EffLaserOn+0x34>)
 80019c6:	f000 fac9 	bl	8001f5c <eff_write>
		EffLaserOn_Flag = 0;
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <BaseSystem_EffLaserOn+0x2c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
		eff_action = 0;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <BaseSystem_EffLaserOn+0x30>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
	}
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200008ff 	.word	0x200008ff
 80019e0:	20000903 	.word	0x20000903
 80019e4:	20000268 	.word	0x20000268

080019e8 <BaseSystem_EffGripperOn>:
void BaseSystem_EffGripperOn(){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	if(EffGripperOn_Flag == 1 && eff_action == 1){
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <BaseSystem_EffGripperOn+0x2c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d10c      	bne.n	8001a0e <BaseSystem_EffGripperOn+0x26>
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <BaseSystem_EffGripperOn+0x30>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d108      	bne.n	8001a0e <BaseSystem_EffGripperOn+0x26>
		eff_write(runMode_cmd);
 80019fc:	4807      	ldr	r0, [pc, #28]	; (8001a1c <BaseSystem_EffGripperOn+0x34>)
 80019fe:	f000 faad 	bl	8001f5c <eff_write>
		EffGripperOn_Flag = 0;
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <BaseSystem_EffGripperOn+0x2c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
		eff_action = 0;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <BaseSystem_EffGripperOn+0x30>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
	}
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000900 	.word	0x20000900
 8001a18:	20000903 	.word	0x20000903
 8001a1c:	20000270 	.word	0x20000270

08001a20 <BaseSystem_EffGripperPick>:
void BaseSystem_EffGripperPick(){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	if(EffGripperPick_Flag == 1 && eff_action == 1){
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <BaseSystem_EffGripperPick+0x30>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d10f      	bne.n	8001a4c <BaseSystem_EffGripperPick+0x2c>
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <BaseSystem_EffGripperPick+0x34>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d10b      	bne.n	8001a4c <BaseSystem_EffGripperPick+0x2c>
		eff_write(pickup_cmd);
 8001a34:	4808      	ldr	r0, [pc, #32]	; (8001a58 <BaseSystem_EffGripperPick+0x38>)
 8001a36:	f000 fa91 	bl	8001f5c <eff_write>
		EffGripperPick_Flag = 0;
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <BaseSystem_EffGripperPick+0x30>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
		registerFrame[2].U16 = 0b0010;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <BaseSystem_EffGripperPick+0x3c>)
 8001a42:	2202      	movs	r2, #2
 8001a44:	809a      	strh	r2, [r3, #4]
		eff_action = 0;
 8001a46:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <BaseSystem_EffGripperPick+0x34>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
	}
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000901 	.word	0x20000901
 8001a54:	20000903 	.word	0x20000903
 8001a58:	20000278 	.word	0x20000278
 8001a5c:	20000f48 	.word	0x20000f48

08001a60 <BaseSystem_EffGripperPlace>:
void BaseSystem_EffGripperPlace(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	if(EffGripperPlace_Flag == 1 && eff_action == 1){
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <BaseSystem_EffGripperPlace+0x30>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d10f      	bne.n	8001a8c <BaseSystem_EffGripperPlace+0x2c>
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <BaseSystem_EffGripperPlace+0x34>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10b      	bne.n	8001a8c <BaseSystem_EffGripperPlace+0x2c>
		eff_write(place_cmd);
 8001a74:	4808      	ldr	r0, [pc, #32]	; (8001a98 <BaseSystem_EffGripperPlace+0x38>)
 8001a76:	f000 fa71 	bl	8001f5c <eff_write>
		EffGripperPlace_Flag = 0;
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <BaseSystem_EffGripperPlace+0x30>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
		registerFrame[2].U16 = 0b0010;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <BaseSystem_EffGripperPlace+0x3c>)
 8001a82:	2202      	movs	r2, #2
 8001a84:	809a      	strh	r2, [r3, #4]
		eff_action = 0;
 8001a86:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <BaseSystem_EffGripperPlace+0x34>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000902 	.word	0x20000902
 8001a94:	20000903 	.word	0x20000903
 8001a98:	2000027c 	.word	0x2000027c
 8001a9c:	20000f48 	.word	0x20000f48

08001aa0 <PositionControlVelocityForm>:
float first_error = 0;
float second_error = 0;
float third_error = 0;

void PositionControlVelocityForm(PID* controller)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	first_error = q_des - QEIData.position;
 8001aa8:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <PositionControlVelocityForm+0xac>)
 8001aaa:	ed93 7a00 	vldr	s14, [r3]
 8001aae:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <PositionControlVelocityForm+0xb0>)
 8001ab0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab8:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <PositionControlVelocityForm+0xb4>)
 8001aba:	edc3 7a00 	vstr	s15, [r3]

	float kp_position = controller->Kp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	617b      	str	r3, [r7, #20]
	float ki_position = controller->Ki;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	613b      	str	r3, [r7, #16]
	float kd_position = controller->Kd;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	60fb      	str	r3, [r7, #12]

	PulseWidthModulation += ((kp_position + ki_position + kd_position) * first_error) - ((kp_position + (2 * kd_position)) * second_error) + (kd_position * third_error);
 8001ad0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001adc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <PositionControlVelocityForm+0xb4>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aee:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001af6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001afa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <PositionControlVelocityForm+0xb8>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b0c:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <PositionControlVelocityForm+0xbc>)
 8001b0e:	edd3 6a00 	vldr	s13, [r3]
 8001b12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <PositionControlVelocityForm+0xc0>)
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <PositionControlVelocityForm+0xc0>)
 8001b2a:	edc3 7a00 	vstr	s15, [r3]

	third_error = second_error;
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <PositionControlVelocityForm+0xb8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <PositionControlVelocityForm+0xbc>)
 8001b34:	6013      	str	r3, [r2, #0]
	second_error = first_error;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <PositionControlVelocityForm+0xb4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <PositionControlVelocityForm+0xb8>)
 8001b3c:	6013      	str	r3, [r2, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	371c      	adds	r7, #28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000898 	.word	0x20000898
 8001b50:	200008c8 	.word	0x200008c8
 8001b54:	2000034c 	.word	0x2000034c
 8001b58:	20000350 	.word	0x20000350
 8001b5c:	20000354 	.word	0x20000354
 8001b60:	200008e4 	.word	0x200008e4

08001b64 <eff_st>:

extern u16u8_t registerFrame[70];
extern uint8_t effstatus;
extern uint16_t effst_mb;

void eff_st(){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	//gripper on	0100	0010
	//pick			0101	0110
	//picked		0111	N/A
	//place			0110	1010

	eff_read();
 8001b68:	f000 fa18 	bl	8001f9c <eff_read>
	effstatus = effstatus & 0b00001111;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <eff_st+0x70>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <eff_st+0x70>)
 8001b78:	701a      	strb	r2, [r3, #0]
	if     (effstatus == 0b0000)	{effst_mb = 0b0000;}
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <eff_st+0x70>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d103      	bne.n	8001b8a <eff_st+0x26>
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <eff_st+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	801a      	strh	r2, [r3, #0]
 8001b88:	e01e      	b.n	8001bc8 <eff_st+0x64>
	else if(effstatus == 0b1000)	{effst_mb = 0b0001;}
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <eff_st+0x70>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d103      	bne.n	8001b9a <eff_st+0x36>
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <eff_st+0x74>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	801a      	strh	r2, [r3, #0]
 8001b98:	e016      	b.n	8001bc8 <eff_st+0x64>
	else if(effstatus == 0b0100)	{effst_mb = 0b0010;}
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <eff_st+0x70>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d103      	bne.n	8001baa <eff_st+0x46>
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <eff_st+0x74>)
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	801a      	strh	r2, [r3, #0]
 8001ba8:	e00e      	b.n	8001bc8 <eff_st+0x64>
	else if(effstatus == 0b0101)	{effst_mb = 0b0110;}
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <eff_st+0x70>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d103      	bne.n	8001bba <eff_st+0x56>
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <eff_st+0x74>)
 8001bb4:	2206      	movs	r2, #6
 8001bb6:	801a      	strh	r2, [r3, #0]
 8001bb8:	e006      	b.n	8001bc8 <eff_st+0x64>
	//else if(effstatus == 0b0111)	{effst_mb = }
	else if(effstatus == 0b0110)	{effst_mb = 0b1010;}
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <eff_st+0x70>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d102      	bne.n	8001bc8 <eff_st+0x64>
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <eff_st+0x74>)
 8001bc4:	220a      	movs	r2, #10
 8001bc6:	801a      	strh	r2, [r3, #0]

	registerFrame[2].U16 = effst_mb;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <eff_st+0x74>)
 8001bca:	881a      	ldrh	r2, [r3, #0]
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <eff_st+0x78>)
 8001bce:	809a      	strh	r2, [r3, #4]
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200008fa 	.word	0x200008fa
 8001bd8:	20000908 	.word	0x20000908
 8001bdc:	20000f48 	.word	0x20000f48

08001be0 <micros>:

uint16_t res = 8192;      	  // Resolution [pulse/revolution]
float pulley_dia = 30.558;	  // mm

uint64_t micros(TIM_HandleTypeDef* Timer_tim)
{
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(Timer_tim)*0.01 + _micros;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc34 	bl	800045c <__aeabi_ui2d>
 8001bf4:	a313      	add	r3, pc, #76	; (adr r3, 8001c44 <micros+0x64>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fca9 	bl	8000550 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4614      	mov	r4, r2
 8001c04:	461d      	mov	r5, r3
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <micros+0x60>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7fe fc68 	bl	80004e4 <__aeabi_ul2d>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4620      	mov	r0, r4
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	f7fe fae2 	bl	80001e4 <__adddf3>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7ff f8b8 	bl	8000d9c <__aeabi_d2ulz>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
}
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	f3af 8000 	nop.w
 8001c40:	200008c0 	.word	0x200008c0
 8001c44:	47ae147b 	.word	0x47ae147b
 8001c48:	3f847ae1 	.word	0x3f847ae1
 8001c4c:	00000000 	.word	0x00000000

08001c50 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* Timer_tim)
{
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
	QEIData.timestamp[0] = micros(Timer_tim);
 8001c5a:	6838      	ldr	r0, [r7, #0]
 8001c5c:	f7ff ffc0 	bl	8001be0 <micros>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4b7a      	ldr	r3, [pc, #488]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c66:	609a      	str	r2, [r3, #8]
	uint32_t lastposition = __HAL_TIM_GET_COUNTER(Encoder_tim);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	613b      	str	r3, [r7, #16]
	QEIData.pos[0] = lastposition;
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c76:	801a      	strh	r2, [r3, #0]
	QEIData.pos[0] = -QEIData.pos[0];
 8001c78:	4b75      	ldr	r3, [pc, #468]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	425b      	negs	r3, r3
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	b21a      	sxth	r2, r3
 8001c86:	4b72      	ldr	r3, [pc, #456]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c88:	801a      	strh	r2, [r3, #0]
//	{
//		QEIData.pos[0] = lastposition - QEI_PERIOD - 1;
//	}

	// position calculation
	QEIData.position = QEIData.pos[0] * PI *  pulley_dia/res;
 8001c8a:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c98:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001e54 <QEIEncoderPositionVelocity_Update+0x204>
 8001c9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ca0:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <QEIEncoderPositionVelocity_Update+0x208>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001caa:	4b6c      	ldr	r3, [pc, #432]	; (8001e5c <QEIEncoderPositionVelocity_Update+0x20c>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cba:	4b65      	ldr	r3, [pc, #404]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001cbc:	edc3 7a04 	vstr	s15, [r3, #16]

	int32_t diffPosition = QEIData.pos[0] - QEIData.pos[1];
 8001cc0:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001cca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
	float diffTime = QEIData.timestamp[0] - QEIData.timestamp[1];
 8001cd2:	4b5f      	ldr	r3, [pc, #380]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	4b5e      	ldr	r3, [pc, #376]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce4:	edc7 7a03 	vstr	s15, [r7, #12]

	// unwrap
	if (diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cee:	dd03      	ble.n	8001cf8 <QEIEncoderPositionVelocity_Update+0xa8>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001cf6:	617b      	str	r3, [r7, #20]
	if (diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001cfe:	da03      	bge.n	8001d08 <QEIEncoderPositionVelocity_Update+0xb8>
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d06:	617b      	str	r3, [r7, #20]

	// velocity calculation
	QEIData.velocity = (diffPosition * 1000000.0 * PI * pulley_dia)/(res * diffTime);
 8001d08:	6978      	ldr	r0, [r7, #20]
 8001d0a:	f7fe fbb7 	bl	800047c <__aeabi_i2d>
 8001d0e:	a34c      	add	r3, pc, #304	; (adr r3, 8001e40 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fc1c 	bl	8000550 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	a349      	add	r3, pc, #292	; (adr r3, 8001e48 <QEIEncoderPositionVelocity_Update+0x1f8>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fc13 	bl	8000550 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4614      	mov	r4, r2
 8001d30:	461d      	mov	r5, r3
 8001d32:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <QEIEncoderPositionVelocity_Update+0x208>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fbb2 	bl	80004a0 <__aeabi_f2d>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4620      	mov	r0, r4
 8001d42:	4629      	mov	r1, r5
 8001d44:	f7fe fc04 	bl	8000550 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4614      	mov	r4, r2
 8001d4e:	461d      	mov	r5, r3
 8001d50:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <QEIEncoderPositionVelocity_Update+0x20c>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	ee07 3a90 	vmov	s15, r3
 8001d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d64:	ee17 0a90 	vmov	r0, s15
 8001d68:	f7fe fb9a 	bl	80004a0 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4620      	mov	r0, r4
 8001d72:	4629      	mov	r1, r5
 8001d74:	f7fe fd16 	bl	80007a4 <__aeabi_ddiv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe fe96 	bl	8000ab0 <__aeabi_d2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a32      	ldr	r2, [pc, #200]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001d88:	6153      	str	r3, [r2, #20]
	QEIData.vel[0] = QEIData.velocity;
 8001d8a:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001d8c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001d9c:	809a      	strh	r2, [r3, #4]
	QEIData.accelaration = (QEIData.vel[0] - QEIData.vel[1])/diffTime;
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001da0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001da8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	ee07 3a90 	vmov	s15, r3
 8001db2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001db6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dc0:	edc3 7a06 	vstr	s15, [r3, #24]

	QEIData.pos[1] = QEIData.pos[0];
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dcc:	805a      	strh	r2, [r3, #2]
	QEIData.vel[1] = QEIData.vel[0];
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dd0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dd6:	80da      	strh	r2, [r3, #6]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dde:	60d3      	str	r3, [r2, #12]

	registerFrame[17].U16 = (int)(QEIData.position*10);
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001de2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001de6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df2:	ee17 3a90 	vmov	r3, s15
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x210>)
 8001dfa:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = (int)(QEIData.velocity*10);
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001dfe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e0e:	ee17 3a90 	vmov	r3, s15
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x210>)
 8001e16:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = (int)(QEIData.accelaration*10);
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <QEIEncoderPositionVelocity_Update+0x200>)
 8001e1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e1e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2a:	ee17 3a90 	vmov	r3, s15
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <QEIEncoderPositionVelocity_Update+0x210>)
 8001e32:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3c:	f3af 8000 	nop.w
 8001e40:	00000000 	.word	0x00000000
 8001e44:	412e8480 	.word	0x412e8480
 8001e48:	60000000 	.word	0x60000000
 8001e4c:	400921fb 	.word	0x400921fb
 8001e50:	200008c8 	.word	0x200008c8
 8001e54:	40490fdb 	.word	0x40490fdb
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000f48 	.word	0x20000f48

08001e64 <HAL_GPIO_EXTI_Callback>:
		}
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0){
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e74:	d123      	bne.n	8001ebe <HAL_GPIO_EXTI_Callback+0x5a>
 8001e76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7a:	481c      	ldr	r0, [pc, #112]	; (8001eec <HAL_GPIO_EXTI_Callback+0x88>)
 8001e7c:	f004 fa8a 	bl	8006394 <HAL_GPIO_ReadPin>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d11b      	bne.n	8001ebe <HAL_GPIO_EXTI_Callback+0x5a>
		emer_pushed = 0;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e92:	4816      	ldr	r0, [pc, #88]	; (8001eec <HAL_GPIO_EXTI_Callback+0x88>)
 8001e94:	f004 fa96 	bl	80063c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e9e:	4813      	ldr	r0, [pc, #76]	; (8001eec <HAL_GPIO_EXTI_Callback+0x88>)
 8001ea0:	f004 fa90 	bl	80063c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eaa:	4810      	ldr	r0, [pc, #64]	; (8001eec <HAL_GPIO_EXTI_Callback+0x88>)
 8001eac:	f004 fa8a 	bl	80063c4 <HAL_GPIO_WritePin>
		eff_write(emerMode_cmd);
 8001eb0:	4810      	ldr	r0, [pc, #64]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x90>)
 8001eb2:	f000 f853 	bl	8001f5c <eff_write>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_GPIO_EXTI_Callback+0x94>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec4:	d10d      	bne.n	8001ee2 <HAL_GPIO_EXTI_Callback+0x7e>
 8001ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eca:	4808      	ldr	r0, [pc, #32]	; (8001eec <HAL_GPIO_EXTI_Callback+0x88>)
 8001ecc:	f004 fa62 	bl	8006394 <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_GPIO_EXTI_Callback+0x7e>
		eff_write(exitEmer_cmd);
 8001ed6:	4809      	ldr	r0, [pc, #36]	; (8001efc <HAL_GPIO_EXTI_Callback+0x98>)
 8001ed8:	f000 f840 	bl	8001f5c <eff_write>
		emer_pushed = 1;
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
	}
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	20000289 	.word	0x20000289
 8001ef4:	20000260 	.word	0x20000260
 8001ef8:	200004e0 	.word	0x200004e0
 8001efc:	20000264 	.word	0x20000264

08001f00 <check_pe>:

void check_pe()
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	if(emer_pushed == 1)
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <check_pe+0x44>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d118      	bne.n	8001f3e <check_pe+0x3e>
	{
		pe1_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	480e      	ldr	r0, [pc, #56]	; (8001f48 <check_pe+0x48>)
 8001f10:	f004 fa40 	bl	8006394 <HAL_GPIO_ReadPin>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <check_pe+0x4c>)
 8001f1a:	701a      	strb	r2, [r3, #0]
		pe2_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	480a      	ldr	r0, [pc, #40]	; (8001f48 <check_pe+0x48>)
 8001f20:	f004 fa38 	bl	8006394 <HAL_GPIO_ReadPin>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <check_pe+0x50>)
 8001f2a:	701a      	strb	r2, [r3, #0]
		pe3_st = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f30:	4808      	ldr	r0, [pc, #32]	; (8001f54 <check_pe+0x54>)
 8001f32:	f004 fa2f 	bl	8006394 <HAL_GPIO_ReadPin>
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <check_pe+0x58>)
 8001f3c:	701a      	strb	r2, [r3, #0]
	}
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000289 	.word	0x20000289
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	2000090a 	.word	0x2000090a
 8001f50:	2000090b 	.word	0x2000090b
 8001f54:	40020000 	.word	0x40020000
 8001f58:	2000090c 	.word	0x2000090c

08001f5c <eff_write>:
		}

	}
}

void eff_write(uint8_t* cmd2){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x15 << 1, cmd2, 4);
 8001f64:	2304      	movs	r3, #4
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	212a      	movs	r1, #42	; 0x2a
 8001f6a:	4803      	ldr	r0, [pc, #12]	; (8001f78 <eff_write+0x1c>)
 8001f6c:	f004 fba0 	bl	80066b0 <HAL_I2C_Master_Transmit_IT>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000042c 	.word	0x2000042c

08001f7c <eff_write2>:

void eff_write2(uint8_t* cmd3){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x15 << 1, cmd3, 8);
 8001f84:	2308      	movs	r3, #8
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	212a      	movs	r1, #42	; 0x2a
 8001f8a:	4803      	ldr	r0, [pc, #12]	; (8001f98 <eff_write2+0x1c>)
 8001f8c:	f004 fb90 	bl	80066b0 <HAL_I2C_Master_Transmit_IT>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000042c 	.word	0x2000042c

08001f9c <eff_read>:

void eff_read(){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, effstatus, 1);
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	4a03      	ldr	r2, [pc, #12]	; (8001fb0 <eff_read+0x14>)
 8001fa4:	212a      	movs	r1, #42	; 0x2a
 8001fa6:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <eff_read+0x18>)
 8001fa8:	f004 fc28 	bl	80067fc <HAL_I2C_Master_Receive_IT>
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200008fa 	.word	0x200008fa
 8001fb4:	2000042c 	.word	0x2000042c

08001fb8 <MotorDrive>:
float Pcenter = 0;
float Ncenter = 0;
float Temp_pos = 0;

void MotorDrive(TIM_HandleTypeDef* PWM_tim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	if(emer_pushed == 1){
 8001fc0:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <MotorDrive+0xf0>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d16a      	bne.n	800209e <MotorDrive+0xe6>
		if (PulseWidthModulation >= 0)
 8001fc8:	4b38      	ldr	r3, [pc, #224]	; (80020ac <MotorDrive+0xf4>)
 8001fca:	edd3 7a00 	vldr	s15, [r3]
 8001fce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd6:	db29      	blt.n	800202c <MotorDrive+0x74>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fde:	4834      	ldr	r0, [pc, #208]	; (80020b0 <MotorDrive+0xf8>)
 8001fe0:	f004 f9f0 	bl	80063c4 <HAL_GPIO_WritePin>
			N_disallow = 0;
 8001fe4:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <MotorDrive+0xfc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation > 8000)
 8001fea:	4b30      	ldr	r3, [pc, #192]	; (80020ac <MotorDrive+0xf4>)
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80020b8 <MotorDrive+0x100>
 8001ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffc:	dd02      	ble.n	8002004 <MotorDrive+0x4c>
			{
				PulseWidthModulation = 8000;
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <MotorDrive+0xf4>)
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <MotorDrive+0x104>)
 8002002:	601a      	str	r2, [r3, #0]
			}

			if ((pe3_st && (SetHomeYFlag == 0)) || P_disallow)
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <MotorDrive+0x108>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <MotorDrive+0x5c>
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <MotorDrive+0x10c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <MotorDrive+0x64>
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <MotorDrive+0x110>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d030      	beq.n	800207e <MotorDrive+0xc6>
			{
				__HAL_TIM_SET_COMPARE(PWM_tim,TIM_CHANNEL_1,0);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
				P_disallow = 1;
 8002024:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <MotorDrive+0x110>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	e028      	b.n	800207e <MotorDrive+0xc6>
			}
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002032:	481f      	ldr	r0, [pc, #124]	; (80020b0 <MotorDrive+0xf8>)
 8002034:	f004 f9c6 	bl	80063c4 <HAL_GPIO_WritePin>
			P_disallow = 0;
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <MotorDrive+0x110>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation < -8000)
 800203e:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <MotorDrive+0xf4>)
 8002040:	edd3 7a00 	vldr	s15, [r3]
 8002044:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80020cc <MotorDrive+0x114>
 8002048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002050:	d502      	bpl.n	8002058 <MotorDrive+0xa0>
			{
				PulseWidthModulation = -8000;
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <MotorDrive+0xf4>)
 8002054:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <MotorDrive+0x118>)
 8002056:	601a      	str	r2, [r3, #0]
			}

			if ((pe2_st && (SetHomeYFlag == 0)) || N_disallow)
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <MotorDrive+0x11c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <MotorDrive+0xb0>
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <MotorDrive+0x10c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <MotorDrive+0xb8>
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <MotorDrive+0xfc>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <MotorDrive+0xc6>
			{
				__HAL_TIM_SET_COMPARE(PWM_tim,TIM_CHANNEL_1,0);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2200      	movs	r2, #0
 8002076:	635a      	str	r2, [r3, #52]	; 0x34
				N_disallow = 1;
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <MotorDrive+0xfc>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
			}
		}

		__HAL_TIM_SET_COMPARE(PWM_tim, TIM_CHANNEL_1, fabs(PulseWidthModulation*5));
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <MotorDrive+0xf4>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800208c:	eef0 7ae7 	vabs.f32	s15, s15
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002098:	ee17 2a90 	vmov	r2, s15
 800209c:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000289 	.word	0x20000289
 80020ac:	200008e4 	.word	0x200008e4
 80020b0:	40020000 	.word	0x40020000
 80020b4:	200008f9 	.word	0x200008f9
 80020b8:	45fa0000 	.word	0x45fa0000
 80020bc:	45fa0000 	.word	0x45fa0000
 80020c0:	2000090c 	.word	0x2000090c
 80020c4:	20000259 	.word	0x20000259
 80020c8:	200008f8 	.word	0x200008f8
 80020cc:	c5fa0000 	.word	0xc5fa0000
 80020d0:	c5fa0000 	.word	0xc5fa0000
 80020d4:	2000090b 	.word	0x2000090b

080020d8 <SetHome>:

void SetHome(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* PWM_tim)
{
 80020d8:	b5b0      	push	{r4, r5, r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
	static enum {Jog, Overcenter, PCenter, UnderCenter, NCenter, Center,  Recenter, Setcenter} SetHomeState = Jog;

	if (SetHomeYFlag)
 80020e2:	4b8d      	ldr	r3, [pc, #564]	; (8002318 <SetHome+0x240>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 810e 	beq.w	8002308 <SetHome+0x230>
	{
		switch (SetHomeState)
 80020ec:	4b8b      	ldr	r3, [pc, #556]	; (800231c <SetHome+0x244>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b07      	cmp	r3, #7
 80020f2:	f200 8106 	bhi.w	8002302 <SetHome+0x22a>
 80020f6:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <SetHome+0x24>)
 80020f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fc:	0800211d 	.word	0x0800211d
 8002100:	08002179 	.word	0x08002179
 8002104:	0800219d 	.word	0x0800219d
 8002108:	080021d1 	.word	0x080021d1
 800210c:	080021f7 	.word	0x080021f7
 8002110:	08002215 	.word	0x08002215
 8002114:	080022d5 	.word	0x080022d5
 8002118:	080022b3 	.word	0x080022b3
		{
		case Jog:
			Pcenter = 0;
 800211c:	4b80      	ldr	r3, [pc, #512]	; (8002320 <SetHome+0x248>)
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
			Ncenter = 0;
 8002124:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <SetHome+0x24c>)
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
			Temp_pos = 0;
 800212c:	4b7e      	ldr	r3, [pc, #504]	; (8002328 <SetHome+0x250>)
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
			PulseWidthModulation = 3000;
 8002134:	4b7d      	ldr	r3, [pc, #500]	; (800232c <SetHome+0x254>)
 8002136:	4a7e      	ldr	r2, [pc, #504]	; (8002330 <SetHome+0x258>)
 8002138:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800213a:	2201      	movs	r2, #1
 800213c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002140:	487c      	ldr	r0, [pc, #496]	; (8002334 <SetHome+0x25c>)
 8002142:	f004 f93f 	bl	80063c4 <HAL_GPIO_WritePin>

			if (pe1_st)
 8002146:	4b7c      	ldr	r3, [pc, #496]	; (8002338 <SetHome+0x260>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <SetHome+0x86>
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Overcenter;
 8002156:	4b71      	ldr	r3, [pc, #452]	; (800231c <SetHome+0x244>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
			else if (pe3_st)
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
				SetHomeState = Recenter;
			}
			break;
 800215c:	e0cc      	b.n	80022f8 <SetHome+0x220>
			else if (pe3_st)
 800215e:	4b77      	ldr	r3, [pc, #476]	; (800233c <SetHome+0x264>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 80c8 	beq.w	80022f8 <SetHome+0x220>
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2200      	movs	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Recenter;
 8002170:	4b6a      	ldr	r3, [pc, #424]	; (800231c <SetHome+0x244>)
 8002172:	2206      	movs	r2, #6
 8002174:	701a      	strb	r2, [r3, #0]
			break;
 8002176:	e0bf      	b.n	80022f8 <SetHome+0x220>
		case Overcenter:
			PulseWidthModulation = 3000;
 8002178:	4b6c      	ldr	r3, [pc, #432]	; (800232c <SetHome+0x254>)
 800217a:	4a6d      	ldr	r2, [pc, #436]	; (8002330 <SetHome+0x258>)
 800217c:	601a      	str	r2, [r3, #0]

			if (QEIData.position >= 30)
 800217e:	4b70      	ldr	r3, [pc, #448]	; (8002340 <SetHome+0x268>)
 8002180:	edd3 7a04 	vldr	s15, [r3, #16]
 8002184:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	da00      	bge.n	8002194 <SetHome+0xbc>
			{
				SetHomeState = PCenter;
			}
			break;
 8002192:	e0b6      	b.n	8002302 <SetHome+0x22a>
				SetHomeState = PCenter;
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <SetHome+0x244>)
 8002196:	2202      	movs	r2, #2
 8002198:	701a      	strb	r2, [r3, #0]
			break;
 800219a:	e0b2      	b.n	8002302 <SetHome+0x22a>
		case PCenter:
			PulseWidthModulation = -2500;
 800219c:	4b63      	ldr	r3, [pc, #396]	; (800232c <SetHome+0x254>)
 800219e:	4a69      	ldr	r2, [pc, #420]	; (8002344 <SetHome+0x26c>)
 80021a0:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 80021a2:	4b65      	ldr	r3, [pc, #404]	; (8002338 <SetHome+0x260>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80a8 	beq.w	80022fc <SetHome+0x224>
			{
				Pcenter = QEIData.position;
 80021ac:	4b64      	ldr	r3, [pc, #400]	; (8002340 <SetHome+0x268>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	4a5b      	ldr	r2, [pc, #364]	; (8002320 <SetHome+0x248>)
 80021b2:	6013      	str	r3, [r2, #0]
				Temp_pos = Pcenter - 30;
 80021b4:	4b5a      	ldr	r3, [pc, #360]	; (8002320 <SetHome+0x248>)
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021c2:	4b59      	ldr	r3, [pc, #356]	; (8002328 <SetHome+0x250>)
 80021c4:	edc3 7a00 	vstr	s15, [r3]
				SetHomeState = UnderCenter;
 80021c8:	4b54      	ldr	r3, [pc, #336]	; (800231c <SetHome+0x244>)
 80021ca:	2203      	movs	r2, #3
 80021cc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80021ce:	e095      	b.n	80022fc <SetHome+0x224>
		case UnderCenter:
			PulseWidthModulation = -3000;
 80021d0:	4b56      	ldr	r3, [pc, #344]	; (800232c <SetHome+0x254>)
 80021d2:	4a5d      	ldr	r2, [pc, #372]	; (8002348 <SetHome+0x270>)
 80021d4:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= Temp_pos)
 80021d6:	4b5a      	ldr	r3, [pc, #360]	; (8002340 <SetHome+0x268>)
 80021d8:	ed93 7a04 	vldr	s14, [r3, #16]
 80021dc:	4b52      	ldr	r3, [pc, #328]	; (8002328 <SetHome+0x250>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ea:	d900      	bls.n	80021ee <SetHome+0x116>
			{
				SetHomeState = NCenter;
			}
			break;
 80021ec:	e089      	b.n	8002302 <SetHome+0x22a>
				SetHomeState = NCenter;
 80021ee:	4b4b      	ldr	r3, [pc, #300]	; (800231c <SetHome+0x244>)
 80021f0:	2204      	movs	r2, #4
 80021f2:	701a      	strb	r2, [r3, #0]
			break;
 80021f4:	e085      	b.n	8002302 <SetHome+0x22a>
		case NCenter:
			PulseWidthModulation = 2500;
 80021f6:	4b4d      	ldr	r3, [pc, #308]	; (800232c <SetHome+0x254>)
 80021f8:	4a54      	ldr	r2, [pc, #336]	; (800234c <SetHome+0x274>)
 80021fa:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 80021fc:	4b4e      	ldr	r3, [pc, #312]	; (8002338 <SetHome+0x260>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d07d      	beq.n	8002300 <SetHome+0x228>
			{
				Ncenter = QEIData.position;
 8002204:	4b4e      	ldr	r3, [pc, #312]	; (8002340 <SetHome+0x268>)
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	4a46      	ldr	r2, [pc, #280]	; (8002324 <SetHome+0x24c>)
 800220a:	6013      	str	r3, [r2, #0]
				SetHomeState = Center;
 800220c:	4b43      	ldr	r3, [pc, #268]	; (800231c <SetHome+0x244>)
 800220e:	2205      	movs	r2, #5
 8002210:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002212:	e075      	b.n	8002300 <SetHome+0x228>
		case Center:
			q_des = ((Pcenter - Ncenter)/2.0) + Ncenter;
 8002214:	4b42      	ldr	r3, [pc, #264]	; (8002320 <SetHome+0x248>)
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	4b42      	ldr	r3, [pc, #264]	; (8002324 <SetHome+0x24c>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002224:	ee17 0a90 	vmov	r0, s15
 8002228:	f7fe f93a 	bl	80004a0 <__aeabi_f2d>
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002234:	f7fe fab6 	bl	80007a4 <__aeabi_ddiv>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4614      	mov	r4, r2
 800223e:	461d      	mov	r5, r3
 8002240:	4b38      	ldr	r3, [pc, #224]	; (8002324 <SetHome+0x24c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f92b 	bl	80004a0 <__aeabi_f2d>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4620      	mov	r0, r4
 8002250:	4629      	mov	r1, r5
 8002252:	f7fd ffc7 	bl	80001e4 <__adddf3>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe fc27 	bl	8000ab0 <__aeabi_d2f>
 8002262:	4603      	mov	r3, r0
 8002264:	4a3a      	ldr	r2, [pc, #232]	; (8002350 <SetHome+0x278>)
 8002266:	6013      	str	r3, [r2, #0]
			PositionControlVelocityForm(&Controller);
 8002268:	483a      	ldr	r0, [pc, #232]	; (8002354 <SetHome+0x27c>)
 800226a:	f7ff fc19 	bl	8001aa0 <PositionControlVelocityForm>

			if (0.03 > fabs(q_des - QEIData.position))
 800226e:	4b38      	ldr	r3, [pc, #224]	; (8002350 <SetHome+0x278>)
 8002270:	ed93 7a00 	vldr	s14, [r3]
 8002274:	4b32      	ldr	r3, [pc, #200]	; (8002340 <SetHome+0x268>)
 8002276:	edd3 7a04 	vldr	s15, [r3, #16]
 800227a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227e:	eef0 7ae7 	vabs.f32	s15, s15
 8002282:	ee17 0a90 	vmov	r0, s15
 8002286:	f7fe f90b 	bl	80004a0 <__aeabi_f2d>
 800228a:	a321      	add	r3, pc, #132	; (adr r3, 8002310 <SetHome+0x238>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	f7fe fbd0 	bl	8000a34 <__aeabi_dcmplt>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d100      	bne.n	800229c <SetHome+0x1c4>
			{
				PulseWidthModulation = 0;
				MotorDrive(PWM_tim);
				SetHomeState = Setcenter;
			}
			break;
 800229a:	e032      	b.n	8002302 <SetHome+0x22a>
				PulseWidthModulation = 0;
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <SetHome+0x254>)
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
				MotorDrive(PWM_tim);
 80022a4:	6838      	ldr	r0, [r7, #0]
 80022a6:	f7ff fe87 	bl	8001fb8 <MotorDrive>
				SetHomeState = Setcenter;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <SetHome+0x244>)
 80022ac:	2207      	movs	r2, #7
 80022ae:	701a      	strb	r2, [r3, #0]
			break;
 80022b0:	e027      	b.n	8002302 <SetHome+0x22a>
		case Setcenter:
			__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2200      	movs	r2, #0
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24
			SetHomeYFlag = 0;
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <SetHome+0x240>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
			SetHomeState = Jog;
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <SetHome+0x244>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022cc:	4819      	ldr	r0, [pc, #100]	; (8002334 <SetHome+0x25c>)
 80022ce:	f004 f879 	bl	80063c4 <HAL_GPIO_WritePin>

			break;
 80022d2:	e016      	b.n	8002302 <SetHome+0x22a>
		case Recenter:
			PulseWidthModulation = -3000;
 80022d4:	4b15      	ldr	r3, [pc, #84]	; (800232c <SetHome+0x254>)
 80022d6:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <SetHome+0x270>)
 80022d8:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= -320)
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <SetHome+0x268>)
 80022dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80022e0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002358 <SetHome+0x280>
 80022e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ec:	d900      	bls.n	80022f0 <SetHome+0x218>
			{
				SetHomeState = PCenter;
			}
			break;
 80022ee:	e008      	b.n	8002302 <SetHome+0x22a>
				SetHomeState = PCenter;
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <SetHome+0x244>)
 80022f2:	2202      	movs	r2, #2
 80022f4:	701a      	strb	r2, [r3, #0]
			break;
 80022f6:	e004      	b.n	8002302 <SetHome+0x22a>
			break;
 80022f8:	bf00      	nop
 80022fa:	e002      	b.n	8002302 <SetHome+0x22a>
			break;
 80022fc:	bf00      	nop
 80022fe:	e000      	b.n	8002302 <SetHome+0x22a>
			break;
 8002300:	bf00      	nop
		}
		MotorDrive(PWM_tim);
 8002302:	6838      	ldr	r0, [r7, #0]
 8002304:	f7ff fe58 	bl	8001fb8 <MotorDrive>
	}


}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bdb0      	pop	{r4, r5, r7, pc}
 8002310:	eb851eb8 	.word	0xeb851eb8
 8002314:	3f9eb851 	.word	0x3f9eb851
 8002318:	20000259 	.word	0x20000259
 800231c:	20000364 	.word	0x20000364
 8002320:	20000358 	.word	0x20000358
 8002324:	2000035c 	.word	0x2000035c
 8002328:	20000360 	.word	0x20000360
 800232c:	200008e4 	.word	0x200008e4
 8002330:	453b8000 	.word	0x453b8000
 8002334:	40020400 	.word	0x40020400
 8002338:	2000090a 	.word	0x2000090a
 800233c:	2000090c 	.word	0x2000090c
 8002340:	200008c8 	.word	0x200008c8
 8002344:	c51c4000 	.word	0xc51c4000
 8002348:	c53b8000 	.word	0xc53b8000
 800234c:	451c4000 	.word	0x451c4000
 8002350:	20000898 	.word	0x20000898
 8002354:	200008ec 	.word	0x200008ec
 8002358:	c3a00000 	.word	0xc3a00000

0800235c <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <modbus_1t5_Timeout+0x1c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2201      	movs	r2, #1
 800236a:	751a      	strb	r2, [r3, #20]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	20000368 	.word	0x20000368

0800237c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <modbus_3t5_Timeout+0x1c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2201      	movs	r2, #1
 800238a:	755a      	strb	r2, [r3, #21]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	20000368 	.word	0x20000368

0800239c <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <modbus_UART_Recived+0x60>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2201      	movs	r2, #1
 80023ac:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <modbus_UART_Recived+0x60>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80023b6:	1c59      	adds	r1, r3, #1
 80023b8:	b289      	uxth	r1, r1
 80023ba:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80023be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80023c2:	d210      	bcs.n	80023e6 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80023c4:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <modbus_UART_Recived+0x60>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68d8      	ldr	r0, [r3, #12]
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <modbus_UART_Recived+0x60>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <modbus_UART_Recived+0x60>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80023d6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80023da:	4413      	add	r3, r2
 80023dc:	3302      	adds	r3, #2
 80023de:	2201      	movs	r2, #1
 80023e0:	4619      	mov	r1, r3
 80023e2:	f008 fa1f 	bl	800a824 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <modbus_UART_Recived+0x60>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000368 	.word	0x20000368

08002400 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800240a:	4a24      	ldr	r2, [pc, #144]	; (800249c <Modbus_init+0x9c>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8002410:	4b22      	ldr	r3, [pc, #136]	; (800249c <Modbus_init+0x9c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8002418:	4b20      	ldr	r3, [pc, #128]	; (800249c <Modbus_init+0x9c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	4a20      	ldr	r2, [pc, #128]	; (80024a0 <Modbus_init+0xa0>)
 8002420:	2114      	movs	r1, #20
 8002422:	4618      	mov	r0, r3
 8002424:	f007 fbb0 	bl	8009b88 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8002428:	4b1c      	ldr	r3, [pc, #112]	; (800249c <Modbus_init+0x9c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <Modbus_init+0xa4>)
 8002430:	210e      	movs	r1, #14
 8002432:	4618      	mov	r0, r3
 8002434:	f007 fba8 	bl	8009b88 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8002438:	4b18      	ldr	r3, [pc, #96]	; (800249c <Modbus_init+0x9c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <Modbus_init+0xa8>)
 8002440:	2103      	movs	r1, #3
 8002442:	4618      	mov	r0, r3
 8002444:	f008 f946 	bl	800a6d4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <Modbus_init+0x9c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68d8      	ldr	r0, [r3, #12]
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <Modbus_init+0x9c>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <Modbus_init+0x9c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800245a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800245e:	4413      	add	r3, r2
 8002460:	3302      	adds	r3, #2
 8002462:	2201      	movs	r2, #1
 8002464:	4619      	mov	r1, r3
 8002466:	f008 f9dd 	bl	800a824 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <Modbus_init+0x9c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d10c      	bne.n	8002494 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <Modbus_init+0x9c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	4618      	mov	r0, r3
 8002482:	f006 fc93 	bl	8008dac <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <Modbus_init+0x9c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f006 fe6a 	bl	8009168 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000368 	.word	0x20000368
 80024a0:	0800235d 	.word	0x0800235d
 80024a4:	0800237d 	.word	0x0800237d
 80024a8:	0800239d 	.word	0x0800239d

080024ac <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80024b8:	23ff      	movs	r3, #255	; 0xff
 80024ba:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80024bc:	23ff      	movs	r3, #255	; 0xff
 80024be:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80024c0:	e013      	b.n	80024ea <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	7bbb      	ldrb	r3, [r7, #14]
 80024cc:	4053      	eors	r3, r2
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80024d2:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <CRC16+0x64>)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4413      	add	r3, r2
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	4053      	eors	r3, r2
 80024de:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80024e0:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <CRC16+0x68>)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	4413      	add	r3, r2
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80024ea:	883b      	ldrh	r3, [r7, #0]
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	803a      	strh	r2, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e6      	bne.n	80024c2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	7bbb      	ldrb	r3, [r7, #14]
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	b21b      	sxth	r3, r3
 8002502:	b29b      	uxth	r3, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	20000108 	.word	0x20000108
 8002514:	20000008 	.word	0x20000008

08002518 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800251e:	4b81      	ldr	r3, [pc, #516]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	7e1b      	ldrb	r3, [r3, #24]
 8002524:	3b01      	subs	r3, #1
 8002526:	2b03      	cmp	r3, #3
 8002528:	d80a      	bhi.n	8002540 <Modbus_Protocal_Worker+0x28>
 800252a:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <Modbus_Protocal_Worker+0x18>)
 800252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002530:	0800254b 	.word	0x0800254b
 8002534:	080026eb 	.word	0x080026eb
 8002538:	080025d7 	.word	0x080025d7
 800253c:	080025fd 	.word	0x080025fd
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002540:	4b78      	ldr	r3, [pc, #480]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	761a      	strb	r2, [r3, #24]
		break;
 8002548:	e0e8      	b.n	800271c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800254a:	4b76      	ldr	r3, [pc, #472]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8002556:	f000 f9d7 	bl	8002908 <Modbus_Emission>
 800255a:	e01c      	b.n	8002596 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 800255c:	4b71      	ldr	r3, [pc, #452]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	7d9b      	ldrb	r3, [r3, #22]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d017      	beq.n	8002596 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8002566:	4b6f      	ldr	r3, [pc, #444]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2200      	movs	r2, #0
 800256c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800256e:	4b6d      	ldr	r3, [pc, #436]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2200      	movs	r2, #0
 8002574:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8002576:	4b6b      	ldr	r3, [pc, #428]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b68      	ldr	r3, [pc, #416]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800258e:	4b65      	ldr	r3, [pc, #404]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2203      	movs	r2, #3
 8002594:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8002596:	4b63      	ldr	r3, [pc, #396]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	f040 80b3 	bne.w	800270e <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80025a8:	4b5e      	ldr	r3, [pc, #376]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80025b2:	4b5c      	ldr	r3, [pc, #368]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68d8      	ldr	r0, [r3, #12]
 80025b8:	4b5a      	ldr	r3, [pc, #360]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80025c4:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80025c8:	4413      	add	r3, r2
 80025ca:	3302      	adds	r3, #2
 80025cc:	2201      	movs	r2, #1
 80025ce:	4619      	mov	r1, r3
 80025d0:	f008 f928 	bl	800a824 <HAL_UART_Receive_IT>
		}
		break;
 80025d4:	e09b      	b.n	800270e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80025d6:	4b53      	ldr	r3, [pc, #332]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	7d1b      	ldrb	r3, [r3, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8098 	beq.w	8002712 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80025e2:	4b50      	ldr	r3, [pc, #320]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80025ea:	4b4e      	ldr	r3, [pc, #312]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	22fe      	movs	r2, #254	; 0xfe
 80025f0:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80025f2:	4b4c      	ldr	r3, [pc, #304]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2204      	movs	r2, #4
 80025f8:	761a      	strb	r2, [r3, #24]
		}
		break;
 80025fa:	e08a      	b.n	8002712 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80025fc:	4b49      	ldr	r3, [pc, #292]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	7d9b      	ldrb	r3, [r3, #22]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002612:	4b44      	ldr	r3, [pc, #272]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	22ff      	movs	r2, #255	; 0xff
 8002618:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800261a:	4b42      	ldr	r3, [pc, #264]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002622:	f113 0f02 	cmn.w	r3, #2
 8002626:	d150      	bne.n	80026ca <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002628:	4b3e      	ldr	r3, [pc, #248]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002630:	4b3c      	ldr	r3, [pc, #240]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f203 2272 	addw	r2, r3, #626	; 0x272
 8002638:	4b3a      	ldr	r3, [pc, #232]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002640:	3b02      	subs	r3, #2
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f7ff ff31 	bl	80024ac <CRC16>
 800264a:	4603      	mov	r3, r0
 800264c:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800264e:	793a      	ldrb	r2, [r7, #4]
 8002650:	4b34      	ldr	r3, [pc, #208]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002652:	6819      	ldr	r1, [r3, #0]
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800265c:	3b02      	subs	r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8002664:	429a      	cmp	r2, r3
 8002666:	d10c      	bne.n	8002682 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8002668:	797a      	ldrb	r2, [r7, #5]
 800266a:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 800266c:	6819      	ldr	r1, [r3, #0]
 800266e:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002676:	3b01      	subs	r3, #1
 8002678:	440b      	add	r3, r1
 800267a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800267e:	429a      	cmp	r2, r3
 8002680:	d004      	beq.n	800268c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002682:	4b28      	ldr	r3, [pc, #160]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	22ff      	movs	r2, #255	; 0xff
 8002688:	75da      	strb	r2, [r3, #23]
				break;
 800268a:	e047      	b.n	800271c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d113      	bne.n	80026c6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800269e:	4b21      	ldr	r3, [pc, #132]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80026a6:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80026ae:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80026b8:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80026ba:	461a      	mov	r2, r3
 80026bc:	f009 fa74 	bl	800bba8 <memcpy>

			//execute command
			Modbus_frame_response();
 80026c0:	f000 f90a 	bl	80028d8 <Modbus_frame_response>
 80026c4:	e001      	b.n	80026ca <Modbus_Protocal_Worker+0x1b2>
				break;
 80026c6:	bf00      	nop
					}
		break;


	}
}
 80026c8:	e028      	b.n	800271c <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	7d5b      	ldrb	r3, [r3, #21]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2201      	movs	r2, #1
 80026da:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f008 f94c 	bl	800a980 <HAL_UART_AbortReceive>
		break;
 80026e8:	e015      	b.n	8002716 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d10f      	bne.n	800271a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <Modbus_Protocal_Worker+0x20c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2201      	movs	r2, #1
 800270a:	761a      	strb	r2, [r3, #24]
		break;
 800270c:	e005      	b.n	800271a <Modbus_Protocal_Worker+0x202>
		break;
 800270e:	bf00      	nop
 8002710:	e004      	b.n	800271c <Modbus_Protocal_Worker+0x204>
		break;
 8002712:	bf00      	nop
 8002714:	e002      	b.n	800271c <Modbus_Protocal_Worker+0x204>
		break;
 8002716:	bf00      	nop
 8002718:	e000      	b.n	800271c <Modbus_Protocal_Worker+0x204>
		break;
 800271a:	bf00      	nop
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000368 	.word	0x20000368

08002728 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800272e:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <modbusWrite1Register+0x80>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	7e9b      	ldrb	r3, [r3, #26]
 8002734:	b29b      	uxth	r3, r3
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <modbusWrite1Register+0x80>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	7edb      	ldrb	r3, [r3, #27]
 8002740:	b29b      	uxth	r3, r3
 8002742:	4413      	add	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <modbusWrite1Register+0x80>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	d903      	bls.n	800275a <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002752:	2002      	movs	r0, #2
 8002754:	f000 f8a4 	bl	80028a0 <ModbusErrorReply>
			 return;
 8002758:	e023      	b.n	80027a2 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <modbusWrite1Register+0x80>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <modbusWrite1Register+0x80>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	440b      	add	r3, r1
 800276a:	7f12      	ldrb	r2, [r2, #28]
 800276c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <modbusWrite1Register+0x80>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <modbusWrite1Register+0x80>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	440b      	add	r3, r1
 800277e:	7f52      	ldrb	r2, [r2, #29]
 8002780:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <modbusWrite1Register+0x80>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <modbusWrite1Register+0x80>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8002790:	2208      	movs	r2, #8
 8002792:	4619      	mov	r1, r3
 8002794:	f009 fa08 	bl	800bba8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <modbusWrite1Register+0x80>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2205      	movs	r2, #5
 800279e:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000368 	.word	0x20000368

080027ac <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80027b2:	4b3a      	ldr	r3, [pc, #232]	; (800289c <modbusRead1Register+0xf0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	7f1b      	ldrb	r3, [r3, #28]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b29a      	uxth	r2, r3
 80027be:	4b37      	ldr	r3, [pc, #220]	; (800289c <modbusRead1Register+0xf0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	7f5b      	ldrb	r3, [r3, #29]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80027ca:	4b34      	ldr	r3, [pc, #208]	; (800289c <modbusRead1Register+0xf0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	7e9b      	ldrb	r3, [r3, #26]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b31      	ldr	r3, [pc, #196]	; (800289c <modbusRead1Register+0xf0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	7edb      	ldrb	r3, [r3, #27]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4413      	add	r3, r2
 80027e0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <modbusRead1Register+0x42>
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	2b7d      	cmp	r3, #125	; 0x7d
 80027ec:	d903      	bls.n	80027f6 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80027ee:	2003      	movs	r0, #3
 80027f0:	f000 f856 	bl	80028a0 <ModbusErrorReply>
		 return;
 80027f4:	e04e      	b.n	8002894 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80027f6:	88ba      	ldrh	r2, [r7, #4]
 80027f8:	4b28      	ldr	r3, [pc, #160]	; (800289c <modbusRead1Register+0xf0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d808      	bhi.n	8002814 <modbusRead1Register+0x68>
 8002802:	88ba      	ldrh	r2, [r7, #4]
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	4413      	add	r3, r2
 8002808:	461a      	mov	r2, r3
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <modbusRead1Register+0xf0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	429a      	cmp	r2, r3
 8002812:	d903      	bls.n	800281c <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002814:	2002      	movs	r0, #2
 8002816:	f000 f843 	bl	80028a0 <ModbusErrorReply>
		 return;
 800281a:	e03b      	b.n	8002894 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800281c:	4b1f      	ldr	r3, [pc, #124]	; (800289c <modbusRead1Register+0xf0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2203      	movs	r2, #3
 8002822:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <modbusRead1Register+0xf0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0052      	lsls	r2, r2, #1
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002836:	2400      	movs	r4, #0
 8002838:	e020      	b.n	800287c <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <modbusRead1Register+0xf0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	88bb      	ldrh	r3, [r7, #4]
 8002842:	4423      	add	r3, r4
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	18d1      	adds	r1, r2, r3
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <modbusRead1Register+0xf0>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	1c63      	adds	r3, r4, #1
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	7849      	ldrb	r1, [r1, #1]
 8002852:	4413      	add	r3, r2
 8002854:	460a      	mov	r2, r1
 8002856:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <modbusRead1Register+0xf0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	88bb      	ldrh	r3, [r7, #4]
 8002862:	4423      	add	r3, r4
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	18d1      	adds	r1, r2, r3
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <modbusRead1Register+0xf0>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	0063      	lsls	r3, r4, #1
 800286e:	3303      	adds	r3, #3
 8002870:	7809      	ldrb	r1, [r1, #0]
 8002872:	4413      	add	r3, r2
 8002874:	460a      	mov	r2, r1
 8002876:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800287a:	3401      	adds	r4, #1
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	429c      	cmp	r4, r3
 8002880:	dbdb      	blt.n	800283a <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	3301      	adds	r3, #1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <modbusRead1Register+0xf0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0052      	lsls	r2, r2, #1
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bd90      	pop	{r4, r7, pc}
 800289a:	bf00      	nop
 800289c:	20000368 	.word	0x20000368

080028a0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <ModbusErrorReply+0x34>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2283      	movs	r2, #131	; 0x83
 80028b0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 80028b4:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <ModbusErrorReply+0x34>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	79fa      	ldrb	r2, [r7, #7]
 80028ba:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <ModbusErrorReply+0x34>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	20000368 	.word	0x20000368

080028d8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <Modbus_frame_response+0x2c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	7e5b      	ldrb	r3, [r3, #25]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d004      	beq.n	80028f0 <Modbus_frame_response+0x18>
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d105      	bne.n	80028f6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80028ea:	f7ff ff1d 	bl	8002728 <modbusWrite1Register>
		break;
 80028ee:	e006      	b.n	80028fe <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80028f0:	f7ff ff5c 	bl	80027ac <modbusRead1Register>
		break;
 80028f4:	e003      	b.n	80028fe <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7ff ffd2 	bl	80028a0 <ModbusErrorReply>
		break;
 80028fc:	bf00      	nop

	}
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000368 	.word	0x20000368

08002908 <Modbus_Emission>:

void Modbus_Emission()
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <Modbus_Emission+0xfc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b20      	cmp	r3, #32
 800291c:	d15e      	bne.n	80029dc <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800291e:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <Modbus_Emission+0xfc>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <Modbus_Emission+0xfc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	7812      	ldrb	r2, [r2, #0]
 8002928:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800292c:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <Modbus_Emission+0xfc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8002934:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002936:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <Modbus_Emission+0xfc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 800293e:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <Modbus_Emission+0xfc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8002946:	461a      	mov	r2, r3
 8002948:	f009 f92e 	bl	800bba8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800294c:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <Modbus_Emission+0xfc>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8002954:	b29a      	uxth	r2, r3
 8002956:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <Modbus_Emission+0xfc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3203      	adds	r2, #3
 800295c:	b292      	uxth	r2, r2
 800295e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <Modbus_Emission+0xfc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <Modbus_Emission+0xfc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002972:	3b02      	subs	r3, #2
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f7ff fd98 	bl	80024ac <CRC16>
 800297c:	4603      	mov	r3, r0
 800297e:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <Modbus_Emission+0xfc>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <Modbus_Emission+0xfc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800298c:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800298e:	7939      	ldrb	r1, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	460a      	mov	r2, r1
 8002994:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <Modbus_Emission+0xfc>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <Modbus_Emission+0xfc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80029a4:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80029a6:	7979      	ldrb	r1, [r7, #5]
 80029a8:	4413      	add	r3, r2
 80029aa:	460a      	mov	r2, r1
 80029ac:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <Modbus_Emission+0xfc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d10d      	bne.n	80029dc <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80029c0:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <Modbus_Emission+0xfc>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <Modbus_Emission+0xfc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <Modbus_Emission+0xfc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80029d2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80029d6:	461a      	mov	r2, r3
 80029d8:	f007 ff54 	bl	800a884 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <Modbus_Emission+0xfc>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <Modbus_Emission+0xfc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2200      	movs	r2, #0
 80029ea:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <Modbus_Emission+0xfc>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2200      	movs	r2, #0
 80029f2:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <Modbus_Emission+0xfc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2202      	movs	r2, #2
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000368 	.word	0x20000368

08002a08 <QuinticTraj_PreCal>:
		}
	}
}

void QuinticTraj_PreCal(int16_t start_pos, int16_t final_pos, Traj* trajectory)
{
 8002a08:	b5b0      	push	{r4, r5, r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	603a      	str	r2, [r7, #0]
 8002a12:	80fb      	strh	r3, [r7, #6]
 8002a14:	460b      	mov	r3, r1
 8002a16:	80bb      	strh	r3, [r7, #4]
	if (start_pos != final_pos)
 8002a18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d07d      	beq.n	8002b20 <QuinticTraj_PreCal+0x118>
	{
		float s = final_pos - start_pos;
 8002a24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a36:	edc7 7a05 	vstr	s15, [r7, #20]

		trajectory->t_acc = 0;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	605a      	str	r2, [r3, #4]
		float t_total_v = (15.0*fabs(s))/v_max;
 8002a42:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a46:	eef0 7ae7 	vabs.f32	s15, s15
 8002a4a:	ee17 0a90 	vmov	r0, s15
 8002a4e:	f7fd fd27 	bl	80004a0 <__aeabi_f2d>
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <QuinticTraj_PreCal+0x128>)
 8002a58:	f7fd fd7a 	bl	8000550 <__aeabi_dmul>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4614      	mov	r4, r2
 8002a62:	461d      	mov	r5, r3
 8002a64:	4b33      	ldr	r3, [pc, #204]	; (8002b34 <QuinticTraj_PreCal+0x12c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd19 	bl	80004a0 <__aeabi_f2d>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4620      	mov	r0, r4
 8002a74:	4629      	mov	r1, r5
 8002a76:	f7fd fe95 	bl	80007a4 <__aeabi_ddiv>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f7fe f815 	bl	8000ab0 <__aeabi_d2f>
 8002a86:	4603      	mov	r3, r0
 8002a88:	613b      	str	r3, [r7, #16]
		float t_total_a = 0.5*sqrt((40*sqrt(3)*fabs(s))/(3*a));
 8002a8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a8e:	eef0 7ae7 	vabs.f32	s15, s15
 8002a92:	ee17 0a90 	vmov	r0, s15
 8002a96:	f7fd fd03 	bl	80004a0 <__aeabi_f2d>
 8002a9a:	a323      	add	r3, pc, #140	; (adr r3, 8002b28 <QuinticTraj_PreCal+0x120>)
 8002a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa0:	f7fd fd56 	bl	8000550 <__aeabi_dmul>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4614      	mov	r4, r2
 8002aaa:	461d      	mov	r5, r3
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <QuinticTraj_PreCal+0x130>)
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aba:	ee17 0a90 	vmov	r0, s15
 8002abe:	f7fd fcef 	bl	80004a0 <__aeabi_f2d>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	4629      	mov	r1, r5
 8002aca:	f7fd fe6b 	bl	80007a4 <__aeabi_ddiv>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	ec43 2b17 	vmov	d7, r2, r3
 8002ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8002ada:	eef0 0a67 	vmov.f32	s1, s15
 8002ade:	f009 f8eb 	bl	800bcb8 <sqrt>
 8002ae2:	ec51 0b10 	vmov	r0, r1, d0
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <QuinticTraj_PreCal+0x134>)
 8002aec:	f7fd fd30 	bl	8000550 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f7fd ffda 	bl	8000ab0 <__aeabi_d2f>
 8002afc:	4603      	mov	r3, r0
 8002afe:	60fb      	str	r3, [r7, #12]

		if(t_total_v > t_total_a)
 8002b00:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b04:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b10:	dd03      	ble.n	8002b1a <QuinticTraj_PreCal+0x112>
		{
			trajectory->t_total = t_total_v;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	601a      	str	r2, [r3, #0]
		else
		{
			trajectory->t_total = t_total_a;
		}
	}
}
 8002b18:	e002      	b.n	8002b20 <QuinticTraj_PreCal+0x118>
			trajectory->t_total = t_total_a;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	601a      	str	r2, [r3, #0]
}
 8002b20:	bf00      	nop
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bdb0      	pop	{r4, r5, r7, pc}
 8002b28:	d1372fea 	.word	0xd1372fea
 8002b2c:	4051520c 	.word	0x4051520c
 8002b30:	402e0000 	.word	0x402e0000
 8002b34:	20000208 	.word	0x20000208
 8002b38:	2000020c 	.word	0x2000020c
 8002b3c:	3fe00000 	.word	0x3fe00000

08002b40 <QuinticTraj_GetState>:

void QuinticTraj_GetState(int16_t start_pos, int16_t final_pos, Traj* trajectory, uint32_t t_us)
{
 8002b40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b44:	b08c      	sub	sp, #48	; 0x30
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60ba      	str	r2, [r7, #8]
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	81fb      	strh	r3, [r7, #14]
 8002b50:	460b      	mov	r3, r1
 8002b52:	81bb      	strh	r3, [r7, #12]
	if (start_pos != final_pos)
 8002b54:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	f000 81da 	beq.w	8002f16 <QuinticTraj_GetState+0x3d6>
	{
		float t = t_us/1000000.0;
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fd fc7a 	bl	800045c <__aeabi_ui2d>
 8002b68:	a3f8      	add	r3, pc, #992	; (adr r3, 8002f4c <QuinticTraj_GetState+0x40c>)
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	f7fd fe19 	bl	80007a4 <__aeabi_ddiv>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f7fd ff99 	bl	8000ab0 <__aeabi_d2f>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c

		float t_total = trajectory->t_total;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
		float s = final_pos - start_pos;
 8002b88:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		float C5 = 6*s/pow(t_total,5);
 8002b9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ba2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002baa:	ee17 0a90 	vmov	r0, s15
 8002bae:	f7fd fc77 	bl	80004a0 <__aeabi_f2d>
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	460d      	mov	r5, r1
 8002bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bb8:	f7fd fc72 	bl	80004a0 <__aeabi_f2d>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	ed9f 1bd7 	vldr	d1, [pc, #860]	; 8002f20 <QuinticTraj_GetState+0x3e0>
 8002bc4:	ec43 2b10 	vmov	d0, r2, r3
 8002bc8:	f009 f806 	bl	800bbd8 <pow>
 8002bcc:	ec53 2b10 	vmov	r2, r3, d0
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	f7fd fde6 	bl	80007a4 <__aeabi_ddiv>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f7fd ff66 	bl	8000ab0 <__aeabi_d2f>
 8002be4:	4603      	mov	r3, r0
 8002be6:	623b      	str	r3, [r7, #32]
		float C4 = -15*s/pow(t_total,4);
 8002be8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bec:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8002bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf4:	ee17 0a90 	vmov	r0, s15
 8002bf8:	f7fd fc52 	bl	80004a0 <__aeabi_f2d>
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	460d      	mov	r5, r1
 8002c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c02:	f7fd fc4d 	bl	80004a0 <__aeabi_f2d>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	ed9f 1bc7 	vldr	d1, [pc, #796]	; 8002f28 <QuinticTraj_GetState+0x3e8>
 8002c0e:	ec43 2b10 	vmov	d0, r2, r3
 8002c12:	f008 ffe1 	bl	800bbd8 <pow>
 8002c16:	ec53 2b10 	vmov	r2, r3, d0
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7fd fdc1 	bl	80007a4 <__aeabi_ddiv>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f7fd ff41 	bl	8000ab0 <__aeabi_d2f>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	61fb      	str	r3, [r7, #28]
		float C3 = 10*s/pow(t_total,3);
 8002c32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c36:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c3e:	ee17 0a90 	vmov	r0, s15
 8002c42:	f7fd fc2d 	bl	80004a0 <__aeabi_f2d>
 8002c46:	4604      	mov	r4, r0
 8002c48:	460d      	mov	r5, r1
 8002c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c4c:	f7fd fc28 	bl	80004a0 <__aeabi_f2d>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	ed9f 1bb6 	vldr	d1, [pc, #728]	; 8002f30 <QuinticTraj_GetState+0x3f0>
 8002c58:	ec43 2b10 	vmov	d0, r2, r3
 8002c5c:	f008 ffbc 	bl	800bbd8 <pow>
 8002c60:	ec53 2b10 	vmov	r2, r3, d0
 8002c64:	4620      	mov	r0, r4
 8002c66:	4629      	mov	r1, r5
 8002c68:	f7fd fd9c 	bl	80007a4 <__aeabi_ddiv>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7fd ff1c 	bl	8000ab0 <__aeabi_d2f>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	61bb      	str	r3, [r7, #24]
		float C0 = start_pos;
 8002c7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c80:	ee07 3a90 	vmov	s15, r3
 8002c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c88:	edc7 7a05 	vstr	s15, [r7, #20]

		q_des = C5*pow(t,5) + C4*pow(t,4) + C3*pow(t,3) + C0;
 8002c8c:	6a38      	ldr	r0, [r7, #32]
 8002c8e:	f7fd fc07 	bl	80004a0 <__aeabi_f2d>
 8002c92:	4604      	mov	r4, r0
 8002c94:	460d      	mov	r5, r1
 8002c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c98:	f7fd fc02 	bl	80004a0 <__aeabi_f2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	ed9f 1b9f 	vldr	d1, [pc, #636]	; 8002f20 <QuinticTraj_GetState+0x3e0>
 8002ca4:	ec43 2b10 	vmov	d0, r2, r3
 8002ca8:	f008 ff96 	bl	800bbd8 <pow>
 8002cac:	ec53 2b10 	vmov	r2, r3, d0
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f7fd fc4c 	bl	8000550 <__aeabi_dmul>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4690      	mov	r8, r2
 8002cbe:	4699      	mov	r9, r3
 8002cc0:	69f8      	ldr	r0, [r7, #28]
 8002cc2:	f7fd fbed 	bl	80004a0 <__aeabi_f2d>
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	460d      	mov	r5, r1
 8002cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ccc:	f7fd fbe8 	bl	80004a0 <__aeabi_f2d>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	ed9f 1b94 	vldr	d1, [pc, #592]	; 8002f28 <QuinticTraj_GetState+0x3e8>
 8002cd8:	ec43 2b10 	vmov	d0, r2, r3
 8002cdc:	f008 ff7c 	bl	800bbd8 <pow>
 8002ce0:	ec53 2b10 	vmov	r2, r3, d0
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	f7fd fc32 	bl	8000550 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4640      	mov	r0, r8
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	f7fd fa76 	bl	80001e4 <__adddf3>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4690      	mov	r8, r2
 8002cfe:	4699      	mov	r9, r3
 8002d00:	69b8      	ldr	r0, [r7, #24]
 8002d02:	f7fd fbcd 	bl	80004a0 <__aeabi_f2d>
 8002d06:	4604      	mov	r4, r0
 8002d08:	460d      	mov	r5, r1
 8002d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d0c:	f7fd fbc8 	bl	80004a0 <__aeabi_f2d>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8002f30 <QuinticTraj_GetState+0x3f0>
 8002d18:	ec43 2b10 	vmov	d0, r2, r3
 8002d1c:	f008 ff5c 	bl	800bbd8 <pow>
 8002d20:	ec53 2b10 	vmov	r2, r3, d0
 8002d24:	4620      	mov	r0, r4
 8002d26:	4629      	mov	r1, r5
 8002d28:	f7fd fc12 	bl	8000550 <__aeabi_dmul>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4640      	mov	r0, r8
 8002d32:	4649      	mov	r1, r9
 8002d34:	f7fd fa56 	bl	80001e4 <__adddf3>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4614      	mov	r4, r2
 8002d3e:	461d      	mov	r5, r3
 8002d40:	6978      	ldr	r0, [r7, #20]
 8002d42:	f7fd fbad 	bl	80004a0 <__aeabi_f2d>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	f7fd fa49 	bl	80001e4 <__adddf3>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7fd fea9 	bl	8000ab0 <__aeabi_d2f>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4a77      	ldr	r2, [pc, #476]	; (8002f40 <QuinticTraj_GetState+0x400>)
 8002d62:	6013      	str	r3, [r2, #0]
		qdot_des = 5*C5*pow(t,4) + 4*C4*pow(t,3) + 3*C3*pow(t,2);
 8002d64:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d68:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d70:	ee17 0a90 	vmov	r0, s15
 8002d74:	f7fd fb94 	bl	80004a0 <__aeabi_f2d>
 8002d78:	4604      	mov	r4, r0
 8002d7a:	460d      	mov	r5, r1
 8002d7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d7e:	f7fd fb8f 	bl	80004a0 <__aeabi_f2d>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8002f28 <QuinticTraj_GetState+0x3e8>
 8002d8a:	ec43 2b10 	vmov	d0, r2, r3
 8002d8e:	f008 ff23 	bl	800bbd8 <pow>
 8002d92:	ec53 2b10 	vmov	r2, r3, d0
 8002d96:	4620      	mov	r0, r4
 8002d98:	4629      	mov	r1, r5
 8002d9a:	f7fd fbd9 	bl	8000550 <__aeabi_dmul>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4690      	mov	r8, r2
 8002da4:	4699      	mov	r9, r3
 8002da6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002daa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db2:	ee17 0a90 	vmov	r0, s15
 8002db6:	f7fd fb73 	bl	80004a0 <__aeabi_f2d>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	460d      	mov	r5, r1
 8002dbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dc0:	f7fd fb6e 	bl	80004a0 <__aeabi_f2d>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8002f30 <QuinticTraj_GetState+0x3f0>
 8002dcc:	ec43 2b10 	vmov	d0, r2, r3
 8002dd0:	f008 ff02 	bl	800bbd8 <pow>
 8002dd4:	ec53 2b10 	vmov	r2, r3, d0
 8002dd8:	4620      	mov	r0, r4
 8002dda:	4629      	mov	r1, r5
 8002ddc:	f7fd fbb8 	bl	8000550 <__aeabi_dmul>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4640      	mov	r0, r8
 8002de6:	4649      	mov	r1, r9
 8002de8:	f7fd f9fc 	bl	80001e4 <__adddf3>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4690      	mov	r8, r2
 8002df2:	4699      	mov	r9, r3
 8002df4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002df8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e00:	ee17 0a90 	vmov	r0, s15
 8002e04:	f7fd fb4c 	bl	80004a0 <__aeabi_f2d>
 8002e08:	4604      	mov	r4, r0
 8002e0a:	460d      	mov	r5, r1
 8002e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e0e:	f7fd fb47 	bl	80004a0 <__aeabi_f2d>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8002f38 <QuinticTraj_GetState+0x3f8>
 8002e1a:	ec43 2b10 	vmov	d0, r2, r3
 8002e1e:	f008 fedb 	bl	800bbd8 <pow>
 8002e22:	ec53 2b10 	vmov	r2, r3, d0
 8002e26:	4620      	mov	r0, r4
 8002e28:	4629      	mov	r1, r5
 8002e2a:	f7fd fb91 	bl	8000550 <__aeabi_dmul>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4640      	mov	r0, r8
 8002e34:	4649      	mov	r1, r9
 8002e36:	f7fd f9d5 	bl	80001e4 <__adddf3>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	f7fd fe35 	bl	8000ab0 <__aeabi_d2f>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4a3e      	ldr	r2, [pc, #248]	; (8002f44 <QuinticTraj_GetState+0x404>)
 8002e4a:	6013      	str	r3, [r2, #0]
		qddot_des = 20*C5*pow(t,3) + 12*C4*pow(t,2) + 6*C3*t;
 8002e4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e50:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e58:	ee17 0a90 	vmov	r0, s15
 8002e5c:	f7fd fb20 	bl	80004a0 <__aeabi_f2d>
 8002e60:	4604      	mov	r4, r0
 8002e62:	460d      	mov	r5, r1
 8002e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e66:	f7fd fb1b 	bl	80004a0 <__aeabi_f2d>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8002f30 <QuinticTraj_GetState+0x3f0>
 8002e72:	ec43 2b10 	vmov	d0, r2, r3
 8002e76:	f008 feaf 	bl	800bbd8 <pow>
 8002e7a:	ec53 2b10 	vmov	r2, r3, d0
 8002e7e:	4620      	mov	r0, r4
 8002e80:	4629      	mov	r1, r5
 8002e82:	f7fd fb65 	bl	8000550 <__aeabi_dmul>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4690      	mov	r8, r2
 8002e8c:	4699      	mov	r9, r3
 8002e8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e92:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e9a:	ee17 0a90 	vmov	r0, s15
 8002e9e:	f7fd faff 	bl	80004a0 <__aeabi_f2d>
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	460d      	mov	r5, r1
 8002ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ea8:	f7fd fafa 	bl	80004a0 <__aeabi_f2d>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002f38 <QuinticTraj_GetState+0x3f8>
 8002eb4:	ec43 2b10 	vmov	d0, r2, r3
 8002eb8:	f008 fe8e 	bl	800bbd8 <pow>
 8002ebc:	ec53 2b10 	vmov	r2, r3, d0
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	f7fd fb44 	bl	8000550 <__aeabi_dmul>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4640      	mov	r0, r8
 8002ece:	4649      	mov	r1, r9
 8002ed0:	f7fd f988 	bl	80001e4 <__adddf3>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4614      	mov	r4, r2
 8002eda:	461d      	mov	r5, r3
 8002edc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ee0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002ee4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ee8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef0:	ee17 0a90 	vmov	r0, s15
 8002ef4:	f7fd fad4 	bl	80004a0 <__aeabi_f2d>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4620      	mov	r0, r4
 8002efe:	4629      	mov	r1, r5
 8002f00:	f7fd f970 	bl	80001e4 <__adddf3>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f7fd fdd0 	bl	8000ab0 <__aeabi_d2f>
 8002f10:	4603      	mov	r3, r0
 8002f12:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <QuinticTraj_GetState+0x408>)
 8002f14:	6013      	str	r3, [r2, #0]
	}
}
 8002f16:	bf00      	nop
 8002f18:	3730      	adds	r7, #48	; 0x30
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f20:	00000000 	.word	0x00000000
 8002f24:	40140000 	.word	0x40140000
 8002f28:	00000000 	.word	0x00000000
 8002f2c:	40100000 	.word	0x40100000
 8002f30:	00000000 	.word	0x00000000
 8002f34:	40080000 	.word	0x40080000
 8002f38:	00000000 	.word	0x00000000
 8002f3c:	40000000 	.word	0x40000000
 8002f40:	20000898 	.word	0x20000898
 8002f44:	2000089c 	.word	0x2000089c
 8002f48:	200008a0 	.word	0x200008a0
 8002f4c:	00000000 	.word	0x00000000
 8002f50:	412e8480 	.word	0x412e8480

08002f54 <swap>:
  30, 40,
  50, 40
};

void swap(float* a, float* b)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
	float temp = *a;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]
	*a = *b;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	601a      	str	r2, [r3, #0]
	*b = temp;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	601a      	str	r2, [r3, #0]
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <SetTwoPointsForCalibrate>:

void SetTwoPointsForCalibrate(float* x0, float* y0, float* x1, float* y1, uint8_t trayNumber) // 0->Pick, 1->Place
{
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
	if(*y0 > *y1){swap(x0, x1); swap(y0, y1);}
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	ed93 7a00 	vldr	s14, [r3]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa2:	dd08      	ble.n	8002fb6 <SetTwoPointsForCalibrate+0x36>
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff ffd4 	bl	8002f54 <swap>
 8002fac:	6839      	ldr	r1, [r7, #0]
 8002fae:	68b8      	ldr	r0, [r7, #8]
 8002fb0:	f7ff ffd0 	bl	8002f54 <swap>
 8002fb4:	e01d      	b.n	8002ff2 <SetTwoPointsForCalibrate+0x72>
	else if(*y0 == *y1)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	ed93 7a00 	vldr	s14, [r3]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	eeb4 7a67 	vcmp.f32	s14, s15
 8002fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fca:	d112      	bne.n	8002ff2 <SetTwoPointsForCalibrate+0x72>
	{
		if (*x0 > *x1){swap(x0, x1); swap(y0, y1);}
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	ed93 7a00 	vldr	s14, [r3]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	edd3 7a00 	vldr	s15, [r3]
 8002fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe0:	dd07      	ble.n	8002ff2 <SetTwoPointsForCalibrate+0x72>
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7ff ffb5 	bl	8002f54 <swap>
 8002fea:	6839      	ldr	r1, [r7, #0]
 8002fec:	68b8      	ldr	r0, [r7, #8]
 8002fee:	f7ff ffb1 	bl	8002f54 <swap>
	}

	rotationAngleRadian = atan2(50, 60) - atan2(*y1 - *y0, *x1 - *x0);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	ed93 7a00 	vldr	s14, [r3]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003002:	ee17 0a90 	vmov	r0, s15
 8003006:	f7fd fa4b 	bl	80004a0 <__aeabi_f2d>
 800300a:	4604      	mov	r4, r0
 800300c:	460d      	mov	r5, r1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	ed93 7a00 	vldr	s14, [r3]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301e:	ee17 0a90 	vmov	r0, s15
 8003022:	f7fd fa3d 	bl	80004a0 <__aeabi_f2d>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	ec43 2b11 	vmov	d1, r2, r3
 800302e:	ec45 4b10 	vmov	d0, r4, r5
 8003032:	f008 fdcf 	bl	800bbd4 <atan2>
 8003036:	ec53 2b10 	vmov	r2, r3, d0
 800303a:	a127      	add	r1, pc, #156	; (adr r1, 80030d8 <SetTwoPointsForCalibrate+0x158>)
 800303c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003040:	f7fd f8ce 	bl	80001e0 <__aeabi_dsub>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f7fd fd30 	bl	8000ab0 <__aeabi_d2f>
 8003050:	4603      	mov	r3, r0
 8003052:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <SetTwoPointsForCalibrate+0x140>)
 8003054:	6013      	str	r3, [r2, #0]
	Degrees = rotationAngleRadian * (180 / M_PI);
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <SetTwoPointsForCalibrate+0x140>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fa20 	bl	80004a0 <__aeabi_f2d>
 8003060:	a315      	add	r3, pc, #84	; (adr r3, 80030b8 <SetTwoPointsForCalibrate+0x138>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	f7fd fa73 	bl	8000550 <__aeabi_dmul>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4610      	mov	r0, r2
 8003070:	4619      	mov	r1, r3
 8003072:	f7fd fd1d 	bl	8000ab0 <__aeabi_d2f>
 8003076:	4603      	mov	r3, r0
 8003078:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <SetTwoPointsForCalibrate+0x144>)
 800307a:	6013      	str	r3, [r2, #0]

	if (trayNumber == 0)
 800307c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d108      	bne.n	8003096 <SetTwoPointsForCalibrate+0x116>
	{
		PickrotationAngleRadian = rotationAngleRadian;
 8003084:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <SetTwoPointsForCalibrate+0x140>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <SetTwoPointsForCalibrate+0x148>)
 800308a:	6013      	str	r3, [r2, #0]
		PickrotationAngleDegree = Degrees;
 800308c:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <SetTwoPointsForCalibrate+0x144>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <SetTwoPointsForCalibrate+0x14c>)
 8003092:	6013      	str	r3, [r2, #0]
	else if (trayNumber == 1)
	{
		PlacerotationAngleRadian = rotationAngleRadian;
		PlacerotationAngleDegree = Degrees;
	}
}
 8003094:	e00b      	b.n	80030ae <SetTwoPointsForCalibrate+0x12e>
	else if (trayNumber == 1)
 8003096:	f897 3020 	ldrb.w	r3, [r7, #32]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <SetTwoPointsForCalibrate+0x12e>
		PlacerotationAngleRadian = rotationAngleRadian;
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <SetTwoPointsForCalibrate+0x140>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <SetTwoPointsForCalibrate+0x150>)
 80030a4:	6013      	str	r3, [r2, #0]
		PlacerotationAngleDegree = Degrees;
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <SetTwoPointsForCalibrate+0x144>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <SetTwoPointsForCalibrate+0x154>)
 80030ac:	6013      	str	r3, [r2, #0]
}
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bdb0      	pop	{r4, r5, r7, pc}
 80030b6:	bf00      	nop
 80030b8:	1a63c1f8 	.word	0x1a63c1f8
 80030bc:	404ca5dc 	.word	0x404ca5dc
 80030c0:	2000036c 	.word	0x2000036c
 80030c4:	20000370 	.word	0x20000370
 80030c8:	200009bc 	.word	0x200009bc
 80030cc:	200009c0 	.word	0x200009c0
 80030d0:	20000a1c 	.word	0x20000a1c
 80030d4:	20000a20 	.word	0x20000a20
 80030d8:	c3f16a8a 	.word	0xc3f16a8a
 80030dc:	3fe63b4b 	.word	0x3fe63b4b

080030e0 <HolePositionsCartesian>:

void HolePositionsCartesian()
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
	if (GoalReadyFlag == 0)
 80030e6:	4b8b      	ldr	r3, [pc, #556]	; (8003314 <HolePositionsCartesian+0x234>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 810e 	bne.w	800330c <HolePositionsCartesian+0x22c>
	{
		float PickrotationMatrix[4] =
		{
			arm_cos_f32(PickrotationAngleRadian),  //0
 80030f0:	4b89      	ldr	r3, [pc, #548]	; (8003318 <HolePositionsCartesian+0x238>)
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	eeb0 0a67 	vmov.f32	s0, s15
 80030fa:	f001 fd1d 	bl	8004b38 <arm_cos_f32>
 80030fe:	eef0 7a40 	vmov.f32	s15, s0
		float PickrotationMatrix[4] =
 8003102:	edc7 7a04 	vstr	s15, [r7, #16]
			arm_sin_f32(PickrotationAngleRadian),  //1
 8003106:	4b84      	ldr	r3, [pc, #528]	; (8003318 <HolePositionsCartesian+0x238>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	eeb0 0a67 	vmov.f32	s0, s15
 8003110:	f001 fd98 	bl	8004c44 <arm_sin_f32>
 8003114:	eef0 7a40 	vmov.f32	s15, s0
		float PickrotationMatrix[4] =
 8003118:	edc7 7a05 	vstr	s15, [r7, #20]
			-arm_sin_f32(PickrotationAngleRadian), //2
 800311c:	4b7e      	ldr	r3, [pc, #504]	; (8003318 <HolePositionsCartesian+0x238>)
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	eeb0 0a67 	vmov.f32	s0, s15
 8003126:	f001 fd8d 	bl	8004c44 <arm_sin_f32>
 800312a:	eef0 7a40 	vmov.f32	s15, s0
 800312e:	eef1 7a67 	vneg.f32	s15, s15
		float PickrotationMatrix[4] =
 8003132:	edc7 7a06 	vstr	s15, [r7, #24]
			arm_cos_f32(PickrotationAngleRadian)   //3
 8003136:	4b78      	ldr	r3, [pc, #480]	; (8003318 <HolePositionsCartesian+0x238>)
 8003138:	edd3 7a00 	vldr	s15, [r3]
 800313c:	eeb0 0a67 	vmov.f32	s0, s15
 8003140:	f001 fcfa 	bl	8004b38 <arm_cos_f32>
 8003144:	eef0 7a40 	vmov.f32	s15, s0
		float PickrotationMatrix[4] =
 8003148:	edc7 7a07 	vstr	s15, [r7, #28]
		};

		float PlacerotationMatrix[4] =
		{
			arm_cos_f32(PlacerotationAngleRadian),  //0
 800314c:	4b73      	ldr	r3, [pc, #460]	; (800331c <HolePositionsCartesian+0x23c>)
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	eeb0 0a67 	vmov.f32	s0, s15
 8003156:	f001 fcef 	bl	8004b38 <arm_cos_f32>
 800315a:	eef0 7a40 	vmov.f32	s15, s0
		float PlacerotationMatrix[4] =
 800315e:	edc7 7a00 	vstr	s15, [r7]
			arm_sin_f32(PlacerotationAngleRadian),  //1
 8003162:	4b6e      	ldr	r3, [pc, #440]	; (800331c <HolePositionsCartesian+0x23c>)
 8003164:	edd3 7a00 	vldr	s15, [r3]
 8003168:	eeb0 0a67 	vmov.f32	s0, s15
 800316c:	f001 fd6a 	bl	8004c44 <arm_sin_f32>
 8003170:	eef0 7a40 	vmov.f32	s15, s0
		float PlacerotationMatrix[4] =
 8003174:	edc7 7a01 	vstr	s15, [r7, #4]
			-arm_sin_f32(PlacerotationAngleRadian), //2
 8003178:	4b68      	ldr	r3, [pc, #416]	; (800331c <HolePositionsCartesian+0x23c>)
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	eeb0 0a67 	vmov.f32	s0, s15
 8003182:	f001 fd5f 	bl	8004c44 <arm_sin_f32>
 8003186:	eef0 7a40 	vmov.f32	s15, s0
 800318a:	eef1 7a67 	vneg.f32	s15, s15
		float PlacerotationMatrix[4] =
 800318e:	edc7 7a02 	vstr	s15, [r7, #8]
			arm_cos_f32(PlacerotationAngleRadian)   //3
 8003192:	4b62      	ldr	r3, [pc, #392]	; (800331c <HolePositionsCartesian+0x23c>)
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	eeb0 0a67 	vmov.f32	s0, s15
 800319c:	f001 fccc 	bl	8004b38 <arm_cos_f32>
 80031a0:	eef0 7a40 	vmov.f32	s15, s0
		float PlacerotationMatrix[4] =
 80031a4:	edc7 7a03 	vstr	s15, [r7, #12]
		};

		static uint8_t i = 0;

		PickTray9holes[i*2] = (holePositionsRelativetoBottomLeft[i*2] * PickrotationMatrix[0]) + (holePositionsRelativetoBottomLeft[i*2+1] * PickrotationMatrix[2]) + Pickreference[0];
 80031a8:	4b5d      	ldr	r3, [pc, #372]	; (8003320 <HolePositionsCartesian+0x240>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4a5d      	ldr	r2, [pc, #372]	; (8003324 <HolePositionsCartesian+0x244>)
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	ed93 7a00 	vldr	s14, [r3]
 80031b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80031bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031c0:	4b57      	ldr	r3, [pc, #348]	; (8003320 <HolePositionsCartesian+0x240>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	3301      	adds	r3, #1
 80031c8:	4a56      	ldr	r2, [pc, #344]	; (8003324 <HolePositionsCartesian+0x244>)
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	edd3 6a00 	vldr	s13, [r3]
 80031d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80031d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031de:	4b52      	ldr	r3, [pc, #328]	; (8003328 <HolePositionsCartesian+0x248>)
 80031e0:	edd3 7a00 	vldr	s15, [r3]
 80031e4:	4b4e      	ldr	r3, [pc, #312]	; (8003320 <HolePositionsCartesian+0x240>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ee:	4a4f      	ldr	r2, [pc, #316]	; (800332c <HolePositionsCartesian+0x24c>)
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	edc3 7a00 	vstr	s15, [r3]
		PickTray9holes[i*2 + 1] = (holePositionsRelativetoBottomLeft[i*2] * PickrotationMatrix[1]) + (holePositionsRelativetoBottomLeft[i*2+1] * PickrotationMatrix[3]) + Pickreference[1];
 80031f8:	4b49      	ldr	r3, [pc, #292]	; (8003320 <HolePositionsCartesian+0x240>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4a49      	ldr	r2, [pc, #292]	; (8003324 <HolePositionsCartesian+0x244>)
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	ed93 7a00 	vldr	s14, [r3]
 8003208:	edd7 7a05 	vldr	s15, [r7, #20]
 800320c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003210:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HolePositionsCartesian+0x240>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	3301      	adds	r3, #1
 8003218:	4a42      	ldr	r2, [pc, #264]	; (8003324 <HolePositionsCartesian+0x244>)
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	edd3 6a00 	vldr	s13, [r3]
 8003222:	edd7 7a07 	vldr	s15, [r7, #28]
 8003226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800322a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800322e:	4b3e      	ldr	r3, [pc, #248]	; (8003328 <HolePositionsCartesian+0x248>)
 8003230:	edd3 7a01 	vldr	s15, [r3, #4]
 8003234:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <HolePositionsCartesian+0x240>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	3301      	adds	r3, #1
 800323c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003240:	4a3a      	ldr	r2, [pc, #232]	; (800332c <HolePositionsCartesian+0x24c>)
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	edc3 7a00 	vstr	s15, [r3]

		PlaceTray9holes[i*2] = (holePositionsRelativetoBottomLeft[i*2] * PlacerotationMatrix[0]) + (holePositionsRelativetoBottomLeft[i*2+1] * PlacerotationMatrix[2]) + Placereference[0];
 800324a:	4b35      	ldr	r3, [pc, #212]	; (8003320 <HolePositionsCartesian+0x240>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4a34      	ldr	r2, [pc, #208]	; (8003324 <HolePositionsCartesian+0x244>)
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	ed93 7a00 	vldr	s14, [r3]
 800325a:	edd7 7a00 	vldr	s15, [r7]
 800325e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003262:	4b2f      	ldr	r3, [pc, #188]	; (8003320 <HolePositionsCartesian+0x240>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	3301      	adds	r3, #1
 800326a:	4a2e      	ldr	r2, [pc, #184]	; (8003324 <HolePositionsCartesian+0x244>)
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	edd3 6a00 	vldr	s13, [r3]
 8003274:	edd7 7a02 	vldr	s15, [r7, #8]
 8003278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800327c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <HolePositionsCartesian+0x250>)
 8003282:	edd3 7a00 	vldr	s15, [r3]
 8003286:	4b26      	ldr	r3, [pc, #152]	; (8003320 <HolePositionsCartesian+0x240>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	4a28      	ldr	r2, [pc, #160]	; (8003334 <HolePositionsCartesian+0x254>)
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	edc3 7a00 	vstr	s15, [r3]
		PlaceTray9holes[i*2 + 1] = (holePositionsRelativetoBottomLeft[i*2] * PlacerotationMatrix[1]) + (holePositionsRelativetoBottomLeft[i*2+1] * PlacerotationMatrix[3]) + Placereference[1];
 800329a:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HolePositionsCartesian+0x240>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4a20      	ldr	r2, [pc, #128]	; (8003324 <HolePositionsCartesian+0x244>)
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	ed93 7a00 	vldr	s14, [r3]
 80032aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HolePositionsCartesian+0x240>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	3301      	adds	r3, #1
 80032ba:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <HolePositionsCartesian+0x244>)
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	edd3 6a00 	vldr	s13, [r3]
 80032c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80032c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HolePositionsCartesian+0x250>)
 80032d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HolePositionsCartesian+0x240>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	3301      	adds	r3, #1
 80032de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e2:	4a14      	ldr	r2, [pc, #80]	; (8003334 <HolePositionsCartesian+0x254>)
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	edc3 7a00 	vstr	s15, [r3]

		i++;
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <HolePositionsCartesian+0x240>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HolePositionsCartesian+0x240>)
 80032f6:	701a      	strb	r2, [r3, #0]
		if (i == 9)
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HolePositionsCartesian+0x240>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b09      	cmp	r3, #9
 80032fe:	d105      	bne.n	800330c <HolePositionsCartesian+0x22c>
		{
			GoalReadyFlag = 1;
 8003300:	4b04      	ldr	r3, [pc, #16]	; (8003314 <HolePositionsCartesian+0x234>)
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
			i = 0;
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HolePositionsCartesian+0x240>)
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800330c:	bf00      	nop
 800330e:	3720      	adds	r7, #32
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000a6c 	.word	0x20000a6c
 8003318:	200009bc 	.word	0x200009bc
 800331c:	20000a1c 	.word	0x20000a1c
 8003320:	20000374 	.word	0x20000374
 8003324:	20000210 	.word	0x20000210
 8003328:	200009ac 	.word	0x200009ac
 800332c:	200009c4 	.word	0x200009c4
 8003330:	20000a0c 	.word	0x20000a0c
 8003334:	20000a24 	.word	0x20000a24

08003338 <GetJoystickXYaxisValue>:

uint8_t JoyStickSwitch_last = 1;
uint64_t StartTime = 0;

void GetJoystickXYaxisValue(float* ptrx, float* ptry)
{
 8003338:	b5b0      	push	{r4, r5, r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
	JoyStickSwitch = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8003342:	2110      	movs	r1, #16
 8003344:	487a      	ldr	r0, [pc, #488]	; (8003530 <GetJoystickXYaxisValue+0x1f8>)
 8003346:	f003 f825 	bl	8006394 <HAL_GPIO_ReadPin>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	4b79      	ldr	r3, [pc, #484]	; (8003534 <GetJoystickXYaxisValue+0x1fc>)
 8003350:	701a      	strb	r2, [r3, #0]

	static uint8_t i = 0;
	if(i % 2 == 0)
 8003352:	4b79      	ldr	r3, [pc, #484]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d12a      	bne.n	80033b6 <GetJoystickXYaxisValue+0x7e>
	{
		IN1[i/2] = adcRawData[i];
 8003360:	4b75      	ldr	r3, [pc, #468]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4b75      	ldr	r3, [pc, #468]	; (800353c <GetJoystickXYaxisValue+0x204>)
 8003368:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800336c:	4b72      	ldr	r3, [pc, #456]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	4b72      	ldr	r3, [pc, #456]	; (8003540 <GetJoystickXYaxisValue+0x208>)
 8003378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		Y_axis += IN1[i/2];
 800337c:	4b6e      	ldr	r3, [pc, #440]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	4b6e      	ldr	r3, [pc, #440]	; (8003540 <GetJoystickXYaxisValue+0x208>)
 8003388:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800338c:	4b6d      	ldr	r3, [pc, #436]	; (8003544 <GetJoystickXYaxisValue+0x20c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4413      	add	r3, r2
 8003392:	4a6c      	ldr	r2, [pc, #432]	; (8003544 <GetJoystickXYaxisValue+0x20c>)
 8003394:	6013      	str	r3, [r2, #0]
		if(i == 18)
 8003396:	4b68      	ldr	r3, [pc, #416]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b12      	cmp	r3, #18
 800339c:	d143      	bne.n	8003426 <GetJoystickXYaxisValue+0xee>
		{
			joystickYaxis = Y_axis/10;
 800339e:	4b69      	ldr	r3, [pc, #420]	; (8003544 <GetJoystickXYaxisValue+0x20c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a69      	ldr	r2, [pc, #420]	; (8003548 <GetJoystickXYaxisValue+0x210>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	08db      	lsrs	r3, r3, #3
 80033aa:	4a68      	ldr	r2, [pc, #416]	; (800354c <GetJoystickXYaxisValue+0x214>)
 80033ac:	6013      	str	r3, [r2, #0]
			Y_axis = 0;
 80033ae:	4b65      	ldr	r3, [pc, #404]	; (8003544 <GetJoystickXYaxisValue+0x20c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e037      	b.n	8003426 <GetJoystickXYaxisValue+0xee>
		}
	}
	else if(i % 2 == 1)
 80033b6:	4b60      	ldr	r3, [pc, #384]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d030      	beq.n	8003426 <GetJoystickXYaxisValue+0xee>
	{
		IN0[(i-1)/2] = adcRawData[i];
 80033c4:	4b5c      	ldr	r3, [pc, #368]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b5c      	ldr	r3, [pc, #368]	; (800353c <GetJoystickXYaxisValue+0x204>)
 80033cc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80033d0:	4b59      	ldr	r3, [pc, #356]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	0fda      	lsrs	r2, r3, #31
 80033d8:	4413      	add	r3, r2
 80033da:	105b      	asrs	r3, r3, #1
 80033dc:	461a      	mov	r2, r3
 80033de:	4b5c      	ldr	r3, [pc, #368]	; (8003550 <GetJoystickXYaxisValue+0x218>)
 80033e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		X_axis += IN0[(i-1)/2];
 80033e4:	4b54      	ldr	r3, [pc, #336]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	0fda      	lsrs	r2, r3, #31
 80033ec:	4413      	add	r3, r2
 80033ee:	105b      	asrs	r3, r3, #1
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b57      	ldr	r3, [pc, #348]	; (8003550 <GetJoystickXYaxisValue+0x218>)
 80033f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033f8:	4b56      	ldr	r3, [pc, #344]	; (8003554 <GetJoystickXYaxisValue+0x21c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4413      	add	r3, r2
 80033fe:	4a55      	ldr	r2, [pc, #340]	; (8003554 <GetJoystickXYaxisValue+0x21c>)
 8003400:	6013      	str	r3, [r2, #0]
		if(i == 19)
 8003402:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b13      	cmp	r3, #19
 8003408:	d10d      	bne.n	8003426 <GetJoystickXYaxisValue+0xee>
		{
			joystickXaxis = X_axis/10;
 800340a:	4b52      	ldr	r3, [pc, #328]	; (8003554 <GetJoystickXYaxisValue+0x21c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a4e      	ldr	r2, [pc, #312]	; (8003548 <GetJoystickXYaxisValue+0x210>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	08db      	lsrs	r3, r3, #3
 8003416:	4a50      	ldr	r2, [pc, #320]	; (8003558 <GetJoystickXYaxisValue+0x220>)
 8003418:	6013      	str	r3, [r2, #0]
			X_axis = 0;
 800341a:	4b4e      	ldr	r3, [pc, #312]	; (8003554 <GetJoystickXYaxisValue+0x21c>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
			i = 0;
 8003420:	4b45      	ldr	r3, [pc, #276]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
		}
	}
	i = (i+1)%20;
 8003426:	4b44      	ldr	r3, [pc, #272]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	4b4b      	ldr	r3, [pc, #300]	; (800355c <GetJoystickXYaxisValue+0x224>)
 800342e:	fb83 1302 	smull	r1, r3, r3, r2
 8003432:	10d9      	asrs	r1, r3, #3
 8003434:	17d3      	asrs	r3, r2, #31
 8003436:	1ac9      	subs	r1, r1, r3
 8003438:	460b      	mov	r3, r1
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	1ad1      	subs	r1, r2, r3
 8003442:	b2ca      	uxtb	r2, r1
 8003444:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <GetJoystickXYaxisValue+0x200>)
 8003446:	701a      	strb	r2, [r3, #0]

	if ((JoyStickSwitch == 0) && (SetHomeYFlag == 0) && (joystickYaxis < 2500) && (joystickYaxis > 1400)&& (joystickXaxis < 2500) && (joystickXaxis > 1400))
 8003448:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <GetJoystickXYaxisValue+0x1fc>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d167      	bne.n	8003520 <GetJoystickXYaxisValue+0x1e8>
 8003450:	4b43      	ldr	r3, [pc, #268]	; (8003560 <GetJoystickXYaxisValue+0x228>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d163      	bne.n	8003520 <GetJoystickXYaxisValue+0x1e8>
 8003458:	4b3c      	ldr	r3, [pc, #240]	; (800354c <GetJoystickXYaxisValue+0x214>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003460:	4293      	cmp	r3, r2
 8003462:	d85d      	bhi.n	8003520 <GetJoystickXYaxisValue+0x1e8>
 8003464:	4b39      	ldr	r3, [pc, #228]	; (800354c <GetJoystickXYaxisValue+0x214>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800346c:	d958      	bls.n	8003520 <GetJoystickXYaxisValue+0x1e8>
 800346e:	4b3a      	ldr	r3, [pc, #232]	; (8003558 <GetJoystickXYaxisValue+0x220>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003476:	4293      	cmp	r3, r2
 8003478:	d852      	bhi.n	8003520 <GetJoystickXYaxisValue+0x1e8>
 800347a:	4b37      	ldr	r3, [pc, #220]	; (8003558 <GetJoystickXYaxisValue+0x220>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003482:	d94d      	bls.n	8003520 <GetJoystickXYaxisValue+0x1e8>
	{
		if (JoyStickSwitch_last == 1 && JoyStickSwitch == 0)
 8003484:	4b37      	ldr	r3, [pc, #220]	; (8003564 <GetJoystickXYaxisValue+0x22c>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d124      	bne.n	80034d6 <GetJoystickXYaxisValue+0x19e>
 800348c:	4b29      	ldr	r3, [pc, #164]	; (8003534 <GetJoystickXYaxisValue+0x1fc>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d120      	bne.n	80034d6 <GetJoystickXYaxisValue+0x19e>
		{
			StartTime = micros(&htim5);
 8003494:	4834      	ldr	r0, [pc, #208]	; (8003568 <GetJoystickXYaxisValue+0x230>)
 8003496:	f7fe fba3 	bl	8001be0 <micros>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4933      	ldr	r1, [pc, #204]	; (800356c <GetJoystickXYaxisValue+0x234>)
 80034a0:	e9c1 2300 	strd	r2, r3, [r1]
			// Keep encoder position xy
			*ptrx = registerFrame[68].U16/10.0; //encoderx
 80034a4:	4b32      	ldr	r3, [pc, #200]	; (8003570 <GetJoystickXYaxisValue+0x238>)
 80034a6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fc ffe6 	bl	800047c <__aeabi_i2d>
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <GetJoystickXYaxisValue+0x23c>)
 80034b6:	f7fd f975 	bl	80007a4 <__aeabi_ddiv>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	f7fd faf5 	bl	8000ab0 <__aeabi_d2f>
 80034c6:	4602      	mov	r2, r0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	601a      	str	r2, [r3, #0]
			*ptry = QEIData.position; //encodery25
 80034cc:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <GetJoystickXYaxisValue+0x240>)
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e024      	b.n	8003520 <GetJoystickXYaxisValue+0x1e8>
		}
		else if (JoyStickSwitch_last == 0 && JoyStickSwitch == 0)
 80034d6:	4b23      	ldr	r3, [pc, #140]	; (8003564 <GetJoystickXYaxisValue+0x22c>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d120      	bne.n	8003520 <GetJoystickXYaxisValue+0x1e8>
 80034de:	4b15      	ldr	r3, [pc, #84]	; (8003534 <GetJoystickXYaxisValue+0x1fc>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11c      	bne.n	8003520 <GetJoystickXYaxisValue+0x1e8>
		{
			if ((micros(&htim5) - StartTime) >= 2000000)
 80034e6:	4820      	ldr	r0, [pc, #128]	; (8003568 <GetJoystickXYaxisValue+0x230>)
 80034e8:	f7fe fb7a 	bl	8001be0 <micros>
 80034ec:	4b1f      	ldr	r3, [pc, #124]	; (800356c <GetJoystickXYaxisValue+0x234>)
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	1a84      	subs	r4, r0, r2
 80034f4:	eb61 0503 	sbc.w	r5, r1, r3
 80034f8:	4b20      	ldr	r3, [pc, #128]	; (800357c <GetJoystickXYaxisValue+0x244>)
 80034fa:	429c      	cmp	r4, r3
 80034fc:	f175 0300 	sbcs.w	r3, r5, #0
 8003500:	d30e      	bcc.n	8003520 <GetJoystickXYaxisValue+0x1e8>
			{
				//set home x-axis
				registerFrame[64].U16 = 1;
 8003502:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <GetJoystickXYaxisValue+0x238>)
 8003504:	2201      	movs	r2, #1
 8003506:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				//set home y-axis
				SetHomeYFlag = 1;
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <GetJoystickXYaxisValue+0x228>)
 800350c:	2201      	movs	r2, #1
 800350e:	701a      	strb	r2, [r3, #0]
				StartTime = micros(&htim5);
 8003510:	4815      	ldr	r0, [pc, #84]	; (8003568 <GetJoystickXYaxisValue+0x230>)
 8003512:	f7fe fb65 	bl	8001be0 <micros>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4914      	ldr	r1, [pc, #80]	; (800356c <GetJoystickXYaxisValue+0x234>)
 800351c:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
	}
	JoyStickSwitch_last = JoyStickSwitch;
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <GetJoystickXYaxisValue+0x1fc>)
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <GetJoystickXYaxisValue+0x22c>)
 8003526:	701a      	strb	r2, [r3, #0]
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bdb0      	pop	{r4, r5, r7, pc}
 8003530:	40020000 	.word	0x40020000
 8003534:	20000988 	.word	0x20000988
 8003538:	20000380 	.word	0x20000380
 800353c:	20000910 	.word	0x20000910
 8003540:	20000960 	.word	0x20000960
 8003544:	20000990 	.word	0x20000990
 8003548:	cccccccd 	.word	0xcccccccd
 800354c:	20000998 	.word	0x20000998
 8003550:	20000938 	.word	0x20000938
 8003554:	2000098c 	.word	0x2000098c
 8003558:	20000994 	.word	0x20000994
 800355c:	66666667 	.word	0x66666667
 8003560:	20000259 	.word	0x20000259
 8003564:	20000258 	.word	0x20000258
 8003568:	20000648 	.word	0x20000648
 800356c:	20000378 	.word	0x20000378
 8003570:	20000f48 	.word	0x20000f48
 8003574:	40240000 	.word	0x40240000
 8003578:	200008c8 	.word	0x200008c8
 800357c:	001e8480 	.word	0x001e8480

08003580 <JoyStickControlCartesian>:

void JoyStickControlCartesian()
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
	if (SetHomeYFlag == 0)
 8003584:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <JoyStickControlCartesian+0x78>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d132      	bne.n	80035f2 <JoyStickControlCartesian+0x72>
	{
		//X-axis
		if(joystickYaxis > 2500) //Left
 800358c:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <JoyStickControlCartesian+0x7c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003594:	4293      	cmp	r3, r2
 8003596:	d904      	bls.n	80035a2 <JoyStickControlCartesian+0x22>
		{registerFrame[64].U16 = 4;}
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <JoyStickControlCartesian+0x80>)
 800359a:	2204      	movs	r2, #4
 800359c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80035a0:	e00d      	b.n	80035be <JoyStickControlCartesian+0x3e>

		else if(joystickYaxis < 1400) //Right
 80035a2:	4b16      	ldr	r3, [pc, #88]	; (80035fc <JoyStickControlCartesian+0x7c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80035aa:	d204      	bcs.n	80035b6 <JoyStickControlCartesian+0x36>
		{registerFrame[64].U16 = 8;}
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <JoyStickControlCartesian+0x80>)
 80035ae:	2208      	movs	r2, #8
 80035b0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80035b4:	e003      	b.n	80035be <JoyStickControlCartesian+0x3e>

		else{registerFrame[64].U16 = 0;}
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <JoyStickControlCartesian+0x80>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		//Y-axis
		if(joystickXaxis < 1400) //Front
 80035be:	4b11      	ldr	r3, [pc, #68]	; (8003604 <JoyStickControlCartesian+0x84>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80035c6:	d203      	bcs.n	80035d0 <JoyStickControlCartesian+0x50>
		{PulseWidthModulation = 3000;}
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <JoyStickControlCartesian+0x88>)
 80035ca:	4a10      	ldr	r2, [pc, #64]	; (800360c <JoyStickControlCartesian+0x8c>)
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e00d      	b.n	80035ec <JoyStickControlCartesian+0x6c>

		else if(joystickXaxis > 2500) //Back
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <JoyStickControlCartesian+0x84>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80035d8:	4293      	cmp	r3, r2
 80035da:	d903      	bls.n	80035e4 <JoyStickControlCartesian+0x64>
		{PulseWidthModulation = -3000;}
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <JoyStickControlCartesian+0x88>)
 80035de:	4a0c      	ldr	r2, [pc, #48]	; (8003610 <JoyStickControlCartesian+0x90>)
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e003      	b.n	80035ec <JoyStickControlCartesian+0x6c>

		else{PulseWidthModulation = 0;}
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <JoyStickControlCartesian+0x88>)
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

		MotorDrive(&htim1);
 80035ec:	4809      	ldr	r0, [pc, #36]	; (8003614 <JoyStickControlCartesian+0x94>)
 80035ee:	f7fe fce3 	bl	8001fb8 <MotorDrive>
	}
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000259 	.word	0x20000259
 80035fc:	20000998 	.word	0x20000998
 8003600:	20000f48 	.word	0x20000f48
 8003604:	20000994 	.word	0x20000994
 8003608:	200008e4 	.word	0x200008e4
 800360c:	453b8000 	.word	0x453b8000
 8003610:	c53b8000 	.word	0xc53b8000
 8003614:	200004e0 	.word	0x200004e0

08003618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */	HAL_Init();
 800361c:	f001 fb94 	bl	8004d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003620:	f000 f858 	bl	80036d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003624:	f000 fb44 	bl	8003cb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003628:	f000 fb04 	bl	8003c34 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800362c:	f000 fad6 	bl	8003bdc <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8003630:	f000 fa3a 	bl	8003aa8 <MX_TIM5_Init>
  MX_TIM1_Init();
 8003634:	f000 f944 	bl	80038c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003638:	f000 f9e2 	bl	8003a00 <MX_TIM3_Init>
  MX_TIM11_Init();
 800363c:	f000 fa82 	bl	8003b44 <MX_TIM11_Init>
  MX_ADC1_Init();
 8003640:	f000 f8b0 	bl	80037a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003644:	f000 f90e 	bl	8003864 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8003648:	4816      	ldr	r0, [pc, #88]	; (80036a4 <main+0x8c>)
 800364a:	f005 fbaf 	bl	8008dac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 800364e:	4816      	ldr	r0, [pc, #88]	; (80036a8 <main+0x90>)
 8003650:	f005 fb52 	bl	8008cf8 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003654:	213c      	movs	r1, #60	; 0x3c
 8003656:	4815      	ldr	r0, [pc, #84]	; (80036ac <main+0x94>)
 8003658:	f005 fea0 	bl	800939c <HAL_TIM_Encoder_Start>

  //eff_write(testMode_cmd);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800365c:	2100      	movs	r1, #0
 800365e:	4812      	ldr	r0, [pc, #72]	; (80036a8 <main+0x90>)
 8003660:	f005 fcd2 	bl	8009008 <HAL_TIM_PWM_Start>

  Controller.Kp = 1100;
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <main+0x98>)
 8003666:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <main+0x9c>)
 8003668:	601a      	str	r2, [r3, #0]
  Controller.Ki = 9.25;
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <main+0x98>)
 800366c:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <main+0xa0>)
 800366e:	605a      	str	r2, [r3, #4]
  Controller.Kd = 0;
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <main+0x98>)
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	609a      	str	r2, [r3, #8]

  hmodbus.huart = &huart2;
 8003678:	4b10      	ldr	r3, [pc, #64]	; (80036bc <main+0xa4>)
 800367a:	4a11      	ldr	r2, [pc, #68]	; (80036c0 <main+0xa8>)
 800367c:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 800367e:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <main+0xa4>)
 8003680:	4a10      	ldr	r2, [pc, #64]	; (80036c4 <main+0xac>)
 8003682:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8003684:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <main+0xa4>)
 8003686:	2215      	movs	r2, #21
 8003688:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =70;
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <main+0xa4>)
 800368c:	2246      	movs	r2, #70	; 0x46
 800368e:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8003690:	490d      	ldr	r1, [pc, #52]	; (80036c8 <main+0xb0>)
 8003692:	480a      	ldr	r0, [pc, #40]	; (80036bc <main+0xa4>)
 8003694:	f7fe feb4 	bl	8002400 <Modbus_init>

  //joy stick--------------------------
  HAL_ADC_Start_DMA(&hadc1, adcRawData, 20);
 8003698:	2214      	movs	r2, #20
 800369a:	490c      	ldr	r1, [pc, #48]	; (80036cc <main+0xb4>)
 800369c:	480c      	ldr	r0, [pc, #48]	; (80036d0 <main+0xb8>)
 800369e:	f001 fc09 	bl	8004eb4 <HAL_ADC_Start_DMA>
//  PlacerotationAngleRadian = 2.845;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036a2:	e7fe      	b.n	80036a2 <main+0x8a>
 80036a4:	20000648 	.word	0x20000648
 80036a8:	200004e0 	.word	0x200004e0
 80036ac:	20000594 	.word	0x20000594
 80036b0:	200008ec 	.word	0x200008ec
 80036b4:	44898000 	.word	0x44898000
 80036b8:	41140000 	.word	0x41140000
 80036bc:	20000a70 	.word	0x20000a70
 80036c0:	200007b0 	.word	0x200007b0
 80036c4:	200006fc 	.word	0x200006fc
 80036c8:	20000f48 	.word	0x20000f48
 80036cc:	20000910 	.word	0x20000910
 80036d0:	20000384 	.word	0x20000384

080036d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b094      	sub	sp, #80	; 0x50
 80036d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036da:	f107 0320 	add.w	r3, r7, #32
 80036de:	2230      	movs	r2, #48	; 0x30
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f008 fa6e 	bl	800bbc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036e8:	f107 030c 	add.w	r3, r7, #12
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <SystemClock_Config+0xc8>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	4a26      	ldr	r2, [pc, #152]	; (800379c <SystemClock_Config+0xc8>)
 8003702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003706:	6413      	str	r3, [r2, #64]	; 0x40
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <SystemClock_Config+0xc8>)
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003714:	2300      	movs	r3, #0
 8003716:	607b      	str	r3, [r7, #4]
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <SystemClock_Config+0xcc>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a20      	ldr	r2, [pc, #128]	; (80037a0 <SystemClock_Config+0xcc>)
 800371e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <SystemClock_Config+0xcc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003730:	2302      	movs	r3, #2
 8003732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003734:	2301      	movs	r3, #1
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003738:	2310      	movs	r3, #16
 800373a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800373c:	2302      	movs	r3, #2
 800373e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003740:	2300      	movs	r3, #0
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003744:	2308      	movs	r3, #8
 8003746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003748:	2364      	movs	r3, #100	; 0x64
 800374a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800374c:	2302      	movs	r3, #2
 800374e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003750:	2304      	movs	r3, #4
 8003752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003754:	f107 0320 	add.w	r3, r7, #32
 8003758:	4618      	mov	r0, r3
 800375a:	f004 fdd9 	bl	8008310 <HAL_RCC_OscConfig>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003764:	f000 fe62 	bl	800442c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003768:	230f      	movs	r3, #15
 800376a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800376c:	2302      	movs	r3, #2
 800376e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800377e:	f107 030c 	add.w	r3, r7, #12
 8003782:	2103      	movs	r1, #3
 8003784:	4618      	mov	r0, r3
 8003786:	f005 f83b 	bl	8008800 <HAL_RCC_ClockConfig>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003790:	f000 fe4c 	bl	800442c <Error_Handler>
  }
}
 8003794:	bf00      	nop
 8003796:	3750      	adds	r7, #80	; 0x50
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	40007000 	.word	0x40007000

080037a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
//#define break while(1){}
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037aa:	463b      	mov	r3, r7
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80037b6:	4b28      	ldr	r3, [pc, #160]	; (8003858 <MX_ADC1_Init+0xb4>)
 80037b8:	4a28      	ldr	r2, [pc, #160]	; (800385c <MX_ADC1_Init+0xb8>)
 80037ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80037bc:	4b26      	ldr	r3, [pc, #152]	; (8003858 <MX_ADC1_Init+0xb4>)
 80037be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <MX_ADC1_Init+0xb4>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80037ca:	4b23      	ldr	r3, [pc, #140]	; (8003858 <MX_ADC1_Init+0xb4>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80037d0:	4b21      	ldr	r3, [pc, #132]	; (8003858 <MX_ADC1_Init+0xb4>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <MX_ADC1_Init+0xb4>)
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037de:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <MX_ADC1_Init+0xb4>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037e4:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <MX_ADC1_Init+0xb4>)
 80037e6:	4a1e      	ldr	r2, [pc, #120]	; (8003860 <MX_ADC1_Init+0xbc>)
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037ea:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <MX_ADC1_Init+0xb4>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <MX_ADC1_Init+0xb4>)
 80037f2:	2202      	movs	r2, #2
 80037f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80037f6:	4b18      	ldr	r3, [pc, #96]	; (8003858 <MX_ADC1_Init+0xb4>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037fe:	4b16      	ldr	r3, [pc, #88]	; (8003858 <MX_ADC1_Init+0xb4>)
 8003800:	2201      	movs	r2, #1
 8003802:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003804:	4814      	ldr	r0, [pc, #80]	; (8003858 <MX_ADC1_Init+0xb4>)
 8003806:	f001 fb11 	bl	8004e2c <HAL_ADC_Init>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003810:	f000 fe0c 	bl	800442c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003814:	2300      	movs	r3, #0
 8003816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003818:	2301      	movs	r3, #1
 800381a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800381c:	2303      	movs	r3, #3
 800381e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003820:	463b      	mov	r3, r7
 8003822:	4619      	mov	r1, r3
 8003824:	480c      	ldr	r0, [pc, #48]	; (8003858 <MX_ADC1_Init+0xb4>)
 8003826:	f001 fc53 	bl	80050d0 <HAL_ADC_ConfigChannel>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003830:	f000 fdfc 	bl	800442c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003834:	2301      	movs	r3, #1
 8003836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003838:	2302      	movs	r3, #2
 800383a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800383c:	463b      	mov	r3, r7
 800383e:	4619      	mov	r1, r3
 8003840:	4805      	ldr	r0, [pc, #20]	; (8003858 <MX_ADC1_Init+0xb4>)
 8003842:	f001 fc45 	bl	80050d0 <HAL_ADC_ConfigChannel>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800384c:	f000 fdee 	bl	800442c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000384 	.word	0x20000384
 800385c:	40012000 	.word	0x40012000
 8003860:	0f000001 	.word	0x0f000001

08003864 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <MX_I2C1_Init+0x50>)
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <MX_I2C1_Init+0x54>)
 800386c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <MX_I2C1_Init+0x50>)
 8003870:	4a12      	ldr	r2, [pc, #72]	; (80038bc <MX_I2C1_Init+0x58>)
 8003872:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <MX_I2C1_Init+0x50>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800387a:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <MX_I2C1_Init+0x50>)
 800387c:	2200      	movs	r2, #0
 800387e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <MX_I2C1_Init+0x50>)
 8003882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003886:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <MX_I2C1_Init+0x50>)
 800388a:	2200      	movs	r2, #0
 800388c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <MX_I2C1_Init+0x50>)
 8003890:	2200      	movs	r2, #0
 8003892:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003894:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <MX_I2C1_Init+0x50>)
 8003896:	2200      	movs	r2, #0
 8003898:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <MX_I2C1_Init+0x50>)
 800389c:	2200      	movs	r2, #0
 800389e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038a0:	4804      	ldr	r0, [pc, #16]	; (80038b4 <MX_I2C1_Init+0x50>)
 80038a2:	f002 fdc1 	bl	8006428 <HAL_I2C_Init>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80038ac:	f000 fdbe 	bl	800442c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038b0:	bf00      	nop
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	2000042c 	.word	0x2000042c
 80038b8:	40005400 	.word	0x40005400
 80038bc:	000186a0 	.word	0x000186a0

080038c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b096      	sub	sp, #88	; 0x58
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	609a      	str	r2, [r3, #8]
 80038ea:	60da      	str	r2, [r3, #12]
 80038ec:	611a      	str	r2, [r3, #16]
 80038ee:	615a      	str	r2, [r3, #20]
 80038f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038f2:	1d3b      	adds	r3, r7, #4
 80038f4:	2220      	movs	r2, #32
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f008 f963 	bl	800bbc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038fe:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <MX_TIM1_Init+0x138>)
 8003900:	4a3e      	ldr	r2, [pc, #248]	; (80039fc <MX_TIM1_Init+0x13c>)
 8003902:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003904:	4b3c      	ldr	r3, [pc, #240]	; (80039f8 <MX_TIM1_Init+0x138>)
 8003906:	2200      	movs	r2, #0
 8003908:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390a:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <MX_TIM1_Init+0x138>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8003910:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <MX_TIM1_Init+0x138>)
 8003912:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003916:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003918:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <MX_TIM1_Init+0x138>)
 800391a:	2200      	movs	r2, #0
 800391c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800391e:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <MX_TIM1_Init+0x138>)
 8003920:	2200      	movs	r2, #0
 8003922:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003924:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <MX_TIM1_Init+0x138>)
 8003926:	2200      	movs	r2, #0
 8003928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800392a:	4833      	ldr	r0, [pc, #204]	; (80039f8 <MX_TIM1_Init+0x138>)
 800392c:	f005 f988 	bl	8008c40 <HAL_TIM_Base_Init>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003936:	f000 fd79 	bl	800442c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800393a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800393e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003940:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003944:	4619      	mov	r1, r3
 8003946:	482c      	ldr	r0, [pc, #176]	; (80039f8 <MX_TIM1_Init+0x138>)
 8003948:	f005 fffc 	bl	8009944 <HAL_TIM_ConfigClockSource>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003952:	f000 fd6b 	bl	800442c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003956:	4828      	ldr	r0, [pc, #160]	; (80039f8 <MX_TIM1_Init+0x138>)
 8003958:	f005 faf0 	bl	8008f3c <HAL_TIM_PWM_Init>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003962:	f000 fd63 	bl	800442c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003966:	2300      	movs	r3, #0
 8003968:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800396a:	2300      	movs	r3, #0
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800396e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003972:	4619      	mov	r1, r3
 8003974:	4820      	ldr	r0, [pc, #128]	; (80039f8 <MX_TIM1_Init+0x138>)
 8003976:	f006 fd75 	bl	800a464 <HAL_TIMEx_MasterConfigSynchronization>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003980:	f000 fd54 	bl	800442c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003984:	2360      	movs	r3, #96	; 0x60
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800398c:	2300      	movs	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003990:	2300      	movs	r3, #0
 8003992:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003994:	2300      	movs	r3, #0
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003998:	2300      	movs	r3, #0
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800399c:	2300      	movs	r3, #0
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a4:	2200      	movs	r2, #0
 80039a6:	4619      	mov	r1, r3
 80039a8:	4813      	ldr	r0, [pc, #76]	; (80039f8 <MX_TIM1_Init+0x138>)
 80039aa:	f005 ff09 	bl	80097c0 <HAL_TIM_PWM_ConfigChannel>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80039b4:	f000 fd3a 	bl	800442c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039bc:	2300      	movs	r3, #0
 80039be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80039d6:	1d3b      	adds	r3, r7, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4807      	ldr	r0, [pc, #28]	; (80039f8 <MX_TIM1_Init+0x138>)
 80039dc:	f006 fdb0 	bl	800a540 <HAL_TIMEx_ConfigBreakDeadTime>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80039e6:	f000 fd21 	bl	800442c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80039ea:	4803      	ldr	r0, [pc, #12]	; (80039f8 <MX_TIM1_Init+0x138>)
 80039ec:	f000 ff02 	bl	80047f4 <HAL_TIM_MspPostInit>

}
 80039f0:	bf00      	nop
 80039f2:	3758      	adds	r7, #88	; 0x58
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200004e0 	.word	0x200004e0
 80039fc:	40010000 	.word	0x40010000

08003a00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08c      	sub	sp, #48	; 0x30
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a06:	f107 030c 	add.w	r3, r7, #12
 8003a0a:	2224      	movs	r2, #36	; 0x24
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f008 f8d8 	bl	800bbc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a14:	1d3b      	adds	r3, r7, #4
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a1c:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <MX_TIM3_Init+0xa0>)
 8003a1e:	4a21      	ldr	r2, [pc, #132]	; (8003aa4 <MX_TIM3_Init+0xa4>)
 8003a20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a22:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <MX_TIM3_Init+0xa0>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <MX_TIM3_Init+0xa0>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD - 1;
 8003a2e:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <MX_TIM3_Init+0xa0>)
 8003a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <MX_TIM3_Init+0xa0>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a3c:	4b18      	ldr	r3, [pc, #96]	; (8003aa0 <MX_TIM3_Init+0xa0>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a42:	2303      	movs	r3, #3
 8003a44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a56:	2300      	movs	r3, #0
 8003a58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	480c      	ldr	r0, [pc, #48]	; (8003aa0 <MX_TIM3_Init+0xa0>)
 8003a6e:	f005 fbe1 	bl	8009234 <HAL_TIM_Encoder_Init>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003a78:	f000 fcd8 	bl	800442c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <MX_TIM3_Init+0xa0>)
 8003a8a:	f006 fceb 	bl	800a464 <HAL_TIMEx_MasterConfigSynchronization>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003a94:	f000 fcca 	bl	800442c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a98:	bf00      	nop
 8003a9a:	3730      	adds	r7, #48	; 0x30
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000594 	.word	0x20000594
 8003aa4:	40000400 	.word	0x40000400

08003aa8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aae:	f107 0308 	add.w	r3, r7, #8
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003abc:	463b      	mov	r3, r7
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003ac4:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <MX_TIM5_Init+0x90>)
 8003ac6:	4a1d      	ldr	r2, [pc, #116]	; (8003b3c <MX_TIM5_Init+0x94>)
 8003ac8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003aca:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <MX_TIM5_Init+0x90>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <MX_TIM5_Init+0x90>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8003ad6:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <MX_TIM5_Init+0x90>)
 8003ad8:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <MX_TIM5_Init+0x98>)
 8003ada:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003adc:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <MX_TIM5_Init+0x90>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae2:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <MX_TIM5_Init+0x90>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003ae8:	4813      	ldr	r0, [pc, #76]	; (8003b38 <MX_TIM5_Init+0x90>)
 8003aea:	f005 f8a9 	bl	8008c40 <HAL_TIM_Base_Init>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8003af4:	f000 fc9a 	bl	800442c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003afc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003afe:	f107 0308 	add.w	r3, r7, #8
 8003b02:	4619      	mov	r1, r3
 8003b04:	480c      	ldr	r0, [pc, #48]	; (8003b38 <MX_TIM5_Init+0x90>)
 8003b06:	f005 ff1d 	bl	8009944 <HAL_TIM_ConfigClockSource>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8003b10:	f000 fc8c 	bl	800442c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b14:	2300      	movs	r3, #0
 8003b16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003b1c:	463b      	mov	r3, r7
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4805      	ldr	r0, [pc, #20]	; (8003b38 <MX_TIM5_Init+0x90>)
 8003b22:	f006 fc9f 	bl	800a464 <HAL_TIMEx_MasterConfigSynchronization>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8003b2c:	f000 fc7e 	bl	800442c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000648 	.word	0x20000648
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	0001869f 	.word	0x0001869f

08003b44 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b4a:	1d3b      	adds	r3, r7, #4
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]
 8003b58:	615a      	str	r2, [r3, #20]
 8003b5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <MX_TIM11_Init+0x90>)
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <MX_TIM11_Init+0x94>)
 8003b60:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <MX_TIM11_Init+0x90>)
 8003b64:	2263      	movs	r2, #99	; 0x63
 8003b66:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <MX_TIM11_Init+0x90>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <MX_TIM11_Init+0x90>)
 8003b70:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8003b74:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <MX_TIM11_Init+0x90>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b7c:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <MX_TIM11_Init+0x90>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003b82:	4814      	ldr	r0, [pc, #80]	; (8003bd4 <MX_TIM11_Init+0x90>)
 8003b84:	f005 f85c 	bl	8008c40 <HAL_TIM_Base_Init>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003b8e:	f000 fc4d 	bl	800442c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8003b92:	4810      	ldr	r0, [pc, #64]	; (8003bd4 <MX_TIM11_Init+0x90>)
 8003b94:	f005 f96c 	bl	8008e70 <HAL_TIM_OC_Init>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003b9e:	f000 fc45 	bl	800442c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003ba2:	2310      	movs	r3, #16
 8003ba4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8003ba6:	f240 5399 	movw	r3, #1433	; 0x599
 8003baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4806      	ldr	r0, [pc, #24]	; (8003bd4 <MX_TIM11_Init+0x90>)
 8003bbc:	f005 fda4 	bl	8009708 <HAL_TIM_OC_ConfigChannel>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8003bc6:	f000 fc31 	bl	800442c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003bca:	bf00      	nop
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	200006fc 	.word	0x200006fc
 8003bd8:	40014800 	.word	0x40014800

08003bdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003be0:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <MX_USART2_UART_Init+0x50>)
 8003be2:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <MX_USART2_UART_Init+0x54>)
 8003be4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <MX_USART2_UART_Init+0x50>)
 8003be8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003bec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003bee:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <MX_USART2_UART_Init+0x50>)
 8003bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bf4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <MX_USART2_UART_Init+0x50>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <MX_USART2_UART_Init+0x50>)
 8003bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <MX_USART2_UART_Init+0x50>)
 8003c06:	220c      	movs	r2, #12
 8003c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <MX_USART2_UART_Init+0x50>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <MX_USART2_UART_Init+0x50>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c16:	4805      	ldr	r0, [pc, #20]	; (8003c2c <MX_USART2_UART_Init+0x50>)
 8003c18:	f006 fd02 	bl	800a620 <HAL_UART_Init>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8003c22:	f000 fc03 	bl	800442c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200007b0 	.word	0x200007b0
 8003c30:	40004400 	.word	0x40004400

08003c34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <MX_DMA_Init+0x78>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4a1a      	ldr	r2, [pc, #104]	; (8003cac <MX_DMA_Init+0x78>)
 8003c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c48:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4a:	4b18      	ldr	r3, [pc, #96]	; (8003cac <MX_DMA_Init+0x78>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <MX_DMA_Init+0x78>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	4a13      	ldr	r2, [pc, #76]	; (8003cac <MX_DMA_Init+0x78>)
 8003c60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c64:	6313      	str	r3, [r2, #48]	; 0x30
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <MX_DMA_Init+0x78>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2100      	movs	r1, #0
 8003c76:	200b      	movs	r0, #11
 8003c78:	f001 fdb5 	bl	80057e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003c7c:	200b      	movs	r0, #11
 8003c7e:	f001 fdce 	bl	800581e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003c82:	2200      	movs	r2, #0
 8003c84:	2100      	movs	r1, #0
 8003c86:	2011      	movs	r0, #17
 8003c88:	f001 fdad 	bl	80057e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003c8c:	2011      	movs	r0, #17
 8003c8e:	f001 fdc6 	bl	800581e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003c92:	2200      	movs	r2, #0
 8003c94:	2100      	movs	r1, #0
 8003c96:	2038      	movs	r0, #56	; 0x38
 8003c98:	f001 fda5 	bl	80057e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003c9c:	2038      	movs	r0, #56	; 0x38
 8003c9e:	f001 fdbe 	bl	800581e <HAL_NVIC_EnableIRQ>

}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800

08003cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	; 0x28
 8003cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb6:	f107 0314 	add.w	r3, r7, #20
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	60da      	str	r2, [r3, #12]
 8003cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	4b63      	ldr	r3, [pc, #396]	; (8003e58 <MX_GPIO_Init+0x1a8>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	4a62      	ldr	r2, [pc, #392]	; (8003e58 <MX_GPIO_Init+0x1a8>)
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd6:	4b60      	ldr	r3, [pc, #384]	; (8003e58 <MX_GPIO_Init+0x1a8>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	4b5c      	ldr	r3, [pc, #368]	; (8003e58 <MX_GPIO_Init+0x1a8>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	4a5b      	ldr	r2, [pc, #364]	; (8003e58 <MX_GPIO_Init+0x1a8>)
 8003cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf2:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <MX_GPIO_Init+0x1a8>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	4b55      	ldr	r3, [pc, #340]	; (8003e58 <MX_GPIO_Init+0x1a8>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	4a54      	ldr	r2, [pc, #336]	; (8003e58 <MX_GPIO_Init+0x1a8>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0e:	4b52      	ldr	r3, [pc, #328]	; (8003e58 <MX_GPIO_Init+0x1a8>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	4b4e      	ldr	r3, [pc, #312]	; (8003e58 <MX_GPIO_Init+0x1a8>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4a4d      	ldr	r2, [pc, #308]	; (8003e58 <MX_GPIO_Init+0x1a8>)
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2a:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <MX_GPIO_Init+0x1a8>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8003d36:	2200      	movs	r2, #0
 8003d38:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8003d3c:	4847      	ldr	r0, [pc, #284]	; (8003e5c <MX_GPIO_Init+0x1ac>)
 8003d3e:	f002 fb41 	bl	80063c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003d42:	2200      	movs	r2, #0
 8003d44:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003d48:	4845      	ldr	r0, [pc, #276]	; (8003e60 <MX_GPIO_Init+0x1b0>)
 8003d4a:	f002 fb3b 	bl	80063c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d54:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d5e:	f107 0314 	add.w	r3, r7, #20
 8003d62:	4619      	mov	r1, r3
 8003d64:	483f      	ldr	r0, [pc, #252]	; (8003e64 <MX_GPIO_Init+0x1b4>)
 8003d66:	f002 f991 	bl	800608c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d76:	f107 0314 	add.w	r3, r7, #20
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4837      	ldr	r0, [pc, #220]	; (8003e5c <MX_GPIO_Init+0x1ac>)
 8003d7e:	f002 f985 	bl	800608c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 8003d82:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8003d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d90:	2300      	movs	r3, #0
 8003d92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d94:	f107 0314 	add.w	r3, r7, #20
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4830      	ldr	r0, [pc, #192]	; (8003e5c <MX_GPIO_Init+0x1ac>)
 8003d9c:	f002 f976 	bl	800608c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003da0:	2306      	movs	r3, #6
 8003da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003da4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dae:	f107 0314 	add.w	r3, r7, #20
 8003db2:	4619      	mov	r1, r3
 8003db4:	482a      	ldr	r0, [pc, #168]	; (8003e60 <MX_GPIO_Init+0x1b0>)
 8003db6:	f002 f969 	bl	800608c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003dc0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dca:	f107 0314 	add.w	r3, r7, #20
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4823      	ldr	r0, [pc, #140]	; (8003e60 <MX_GPIO_Init+0x1b0>)
 8003dd2:	f002 f95b 	bl	800608c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003dd6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de4:	2300      	movs	r3, #0
 8003de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de8:	f107 0314 	add.w	r3, r7, #20
 8003dec:	4619      	mov	r1, r3
 8003dee:	481c      	ldr	r0, [pc, #112]	; (8003e60 <MX_GPIO_Init+0x1b0>)
 8003df0:	f002 f94c 	bl	800608c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003dfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e00:	2301      	movs	r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e04:	f107 0314 	add.w	r3, r7, #20
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4814      	ldr	r0, [pc, #80]	; (8003e5c <MX_GPIO_Init+0x1ac>)
 8003e0c:	f002 f93e 	bl	800608c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003e10:	2200      	movs	r2, #0
 8003e12:	2100      	movs	r1, #0
 8003e14:	2007      	movs	r0, #7
 8003e16:	f001 fce6 	bl	80057e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003e1a:	2007      	movs	r0, #7
 8003e1c:	f001 fcff 	bl	800581e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003e20:	2200      	movs	r2, #0
 8003e22:	2100      	movs	r1, #0
 8003e24:	2008      	movs	r0, #8
 8003e26:	f001 fcde 	bl	80057e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003e2a:	2008      	movs	r0, #8
 8003e2c:	f001 fcf7 	bl	800581e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003e30:	2200      	movs	r2, #0
 8003e32:	2100      	movs	r1, #0
 8003e34:	2017      	movs	r0, #23
 8003e36:	f001 fcd6 	bl	80057e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e3a:	2017      	movs	r0, #23
 8003e3c:	f001 fcef 	bl	800581e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e40:	2200      	movs	r2, #0
 8003e42:	2100      	movs	r1, #0
 8003e44:	2028      	movs	r0, #40	; 0x28
 8003e46:	f001 fcce 	bl	80057e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e4a:	2028      	movs	r0, #40	; 0x28
 8003e4c:	f001 fce7 	bl	800581e <HAL_NVIC_EnableIRQ>

}
 8003e50:	bf00      	nop
 8003e52:	3728      	adds	r7, #40	; 0x28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40020000 	.word	0x40020000
 8003e60:	40020400 	.word	0x40020400
 8003e64:	40020800 	.word	0x40020800

08003e68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b5b0      	push	{r4, r5, r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a96      	ldr	r2, [pc, #600]	; (80040cc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	f040 8125 	bne.w	80040c4 <HAL_TIM_PeriodElapsedCallback+0x25c>
//		if(writeflag_ls == 9){
//			eff_st();
//			writeflag_ls = 0;
//		}

		_micros += 1000;
 8003e7a:	4b95      	ldr	r3, [pc, #596]	; (80040d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8003e84:	f143 0500 	adc.w	r5, r3, #0
 8003e88:	4b91      	ldr	r3, [pc, #580]	; (80040d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003e8a:	e9c3 4500 	strd	r4, r5, [r3]
		QEIEncoderPositionVelocity_Update(&htim3, &htim5);
 8003e8e:	498f      	ldr	r1, [pc, #572]	; (80040cc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003e90:	4890      	ldr	r0, [pc, #576]	; (80040d4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003e92:	f7fd fedd 	bl	8001c50 <QEIEncoderPositionVelocity_Update>

		check_pe();
 8003e96:	f7fe f833 	bl	8001f00 <check_pe>
		SetHome(&htim3, &htim1);
 8003e9a:	498f      	ldr	r1, [pc, #572]	; (80040d8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003e9c:	488d      	ldr	r0, [pc, #564]	; (80040d4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003e9e:	f7fe f91b 	bl	80020d8 <SetHome>

		if (EndEffectorSoftResetFlag)
 8003ea2:	4b8e      	ldr	r3, [pc, #568]	; (80040dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			eff_write(softReset_cmd);
 8003eaa:	488d      	ldr	r0, [pc, #564]	; (80040e0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003eac:	f7fe f856 	bl	8001f5c <eff_write>
			EndEffectorSoftResetFlag = 0;
 8003eb0:	4b8a      	ldr	r3, [pc, #552]	; (80040dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
		}

		eff_c = registerFrame[2].U16;
 8003eb6:	4b8b      	ldr	r3, [pc, #556]	; (80040e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003eb8:	889a      	ldrh	r2, [r3, #4]
 8003eba:	4b8b      	ldr	r3, [pc, #556]	; (80040e8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003ebc:	801a      	strh	r2, [r3, #0]
		if(eff_l != eff_c){
 8003ebe:	4b8b      	ldr	r3, [pc, #556]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003ec0:	881a      	ldrh	r2, [r3, #0]
 8003ec2:	4b89      	ldr	r3, [pc, #548]	; (80040e8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d002      	beq.n	8003ed0 <HAL_TIM_PeriodElapsedCallback+0x68>
			eff_action = 1;
 8003eca:	4b89      	ldr	r3, [pc, #548]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]
		}

		switch (registerFrame[1].U16)
 8003ed0:	4b84      	ldr	r3, [pc, #528]	; (80040e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003ed2:	885b      	ldrh	r3, [r3, #2]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	2b0f      	cmp	r3, #15
 8003ed8:	d836      	bhi.n	8003f48 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8003eda:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003f21 	.word	0x08003f21
 8003ee4:	08003f29 	.word	0x08003f29
 8003ee8:	08003f49 	.word	0x08003f49
 8003eec:	08003f31 	.word	0x08003f31
 8003ef0:	08003f49 	.word	0x08003f49
 8003ef4:	08003f49 	.word	0x08003f49
 8003ef8:	08003f49 	.word	0x08003f49
 8003efc:	08003f39 	.word	0x08003f39
 8003f00:	08003f49 	.word	0x08003f49
 8003f04:	08003f49 	.word	0x08003f49
 8003f08:	08003f49 	.word	0x08003f49
 8003f0c:	08003f49 	.word	0x08003f49
 8003f10:	08003f49 	.word	0x08003f49
 8003f14:	08003f49 	.word	0x08003f49
 8003f18:	08003f49 	.word	0x08003f49
 8003f1c:	08003f41 	.word	0x08003f41
		{
		case 0b00001:
			SetPickTrayFlag = 1;
 8003f20:	4b74      	ldr	r3, [pc, #464]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	701a      	strb	r2, [r3, #0]
		break;
 8003f26:	e00f      	b.n	8003f48 <HAL_TIM_PeriodElapsedCallback+0xe0>
		case 0b00010:
			SetPlaceTrayFlag = 1;
 8003f28:	4b73      	ldr	r3, [pc, #460]	; (80040f8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
		break;
 8003f2e:	e00b      	b.n	8003f48 <HAL_TIM_PeriodElapsedCallback+0xe0>
		case 0b00100:
			SetHomeFlag = 1;
 8003f30:	4b72      	ldr	r3, [pc, #456]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
		break;
 8003f36:	e007      	b.n	8003f48 <HAL_TIM_PeriodElapsedCallback+0xe0>
		case 0b01000:
			RunTrayFlag = 1;
 8003f38:	4b71      	ldr	r3, [pc, #452]	; (8004100 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	701a      	strb	r2, [r3, #0]
		break;
 8003f3e:	e003      	b.n	8003f48 <HAL_TIM_PeriodElapsedCallback+0xe0>
		case 0b10000:
			RunPointFlag = 1;
 8003f40:	4b70      	ldr	r3, [pc, #448]	; (8004104 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
		break;
 8003f46:	bf00      	nop
		}

		EffRegState = registerFrame[2].U16;
 8003f48:	4b66      	ldr	r3, [pc, #408]	; (80040e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003f4a:	889a      	ldrh	r2, [r3, #4]
 8003f4c:	4b6e      	ldr	r3, [pc, #440]	; (8004108 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003f4e:	801a      	strh	r2, [r3, #0]

		switch(EffRegState){
 8003f50:	4b6d      	ldr	r3, [pc, #436]	; (8004108 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	2b0a      	cmp	r3, #10
 8003f56:	d84a      	bhi.n	8003fee <HAL_TIM_PeriodElapsedCallback+0x186>
 8003f58:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5e:	bf00      	nop
 8003f60:	08003f8d 	.word	0x08003f8d
 8003f64:	08003f9d 	.word	0x08003f9d
 8003f68:	08003fad 	.word	0x08003fad
 8003f6c:	08003fef 	.word	0x08003fef
 8003f70:	08003fef 	.word	0x08003fef
 8003f74:	08003fef 	.word	0x08003fef
 8003f78:	08003fbd 	.word	0x08003fbd
 8003f7c:	08003fef 	.word	0x08003fef
 8003f80:	08003fef 	.word	0x08003fef
 8003f84:	08003fef 	.word	0x08003fef
 8003f88:	08003fcd 	.word	0x08003fcd
		case 0b0000:	//everything off
			if(eff_action == 1){
 8003f8c:	4b58      	ldr	r3, [pc, #352]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d123      	bne.n	8003fdc <HAL_TIM_PeriodElapsedCallback+0x174>
				EffAllOff_Flag = 1;
 8003f94:	4b5d      	ldr	r3, [pc, #372]	; (800410c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003f9a:	e01f      	b.n	8003fdc <HAL_TIM_PeriodElapsedCallback+0x174>
		case 0b0001:	//laser on
			if(eff_action == 1){
 8003f9c:	4b54      	ldr	r3, [pc, #336]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d11d      	bne.n	8003fe0 <HAL_TIM_PeriodElapsedCallback+0x178>
				EffLaserOn_Flag = 1;
 8003fa4:	4b5a      	ldr	r3, [pc, #360]	; (8004110 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003faa:	e019      	b.n	8003fe0 <HAL_TIM_PeriodElapsedCallback+0x178>
		case 0b0010:	//gripper on
			if(eff_action == 1){
 8003fac:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d117      	bne.n	8003fe4 <HAL_TIM_PeriodElapsedCallback+0x17c>
				EffGripperOn_Flag = 1;
 8003fb4:	4b57      	ldr	r3, [pc, #348]	; (8004114 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003fba:	e013      	b.n	8003fe4 <HAL_TIM_PeriodElapsedCallback+0x17c>
		case 0b0110:	//gripper picking
			if(eff_action == 1){
 8003fbc:	4b4c      	ldr	r3, [pc, #304]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d111      	bne.n	8003fe8 <HAL_TIM_PeriodElapsedCallback+0x180>
				EffGripperPick_Flag = 1;
 8003fc4:	4b54      	ldr	r3, [pc, #336]	; (8004118 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003fca:	e00d      	b.n	8003fe8 <HAL_TIM_PeriodElapsedCallback+0x180>
		case 0b1010:	//gripper placing
			if(eff_action == 1){
 8003fcc:	4b48      	ldr	r3, [pc, #288]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d10b      	bne.n	8003fec <HAL_TIM_PeriodElapsedCallback+0x184>
				EffGripperPlace_Flag = 1;
 8003fd4:	4b51      	ldr	r3, [pc, #324]	; (800411c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003fda:	e007      	b.n	8003fec <HAL_TIM_PeriodElapsedCallback+0x184>
			break;
 8003fdc:	bf00      	nop
 8003fde:	e006      	b.n	8003fee <HAL_TIM_PeriodElapsedCallback+0x186>
			break;
 8003fe0:	bf00      	nop
 8003fe2:	e004      	b.n	8003fee <HAL_TIM_PeriodElapsedCallback+0x186>
			break;
 8003fe4:	bf00      	nop
 8003fe6:	e002      	b.n	8003fee <HAL_TIM_PeriodElapsedCallback+0x186>
			break;
 8003fe8:	bf00      	nop
 8003fea:	e000      	b.n	8003fee <HAL_TIM_PeriodElapsedCallback+0x186>
			break;
 8003fec:	bf00      	nop
		}

		if (!(SetPickTrayFlag || SetPlaceTrayFlag || SetHomeFlag || RunTrayFlag || RunPointFlag || SetHomeYFlag))
 8003fee:	4b41      	ldr	r3, [pc, #260]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d119      	bne.n	800402a <HAL_TIM_PeriodElapsedCallback+0x1c2>
 8003ff6:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d115      	bne.n	800402a <HAL_TIM_PeriodElapsedCallback+0x1c2>
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d111      	bne.n	800402a <HAL_TIM_PeriodElapsedCallback+0x1c2>
 8004006:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10d      	bne.n	800402a <HAL_TIM_PeriodElapsedCallback+0x1c2>
 800400e:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <HAL_TIM_PeriodElapsedCallback+0x1c2>
 8004016:	4b42      	ldr	r3, [pc, #264]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d105      	bne.n	800402a <HAL_TIM_PeriodElapsedCallback+0x1c2>
		{
			GetJoystickXYaxisValue(&DummyA, &DummyB);
 800401e:	4941      	ldr	r1, [pc, #260]	; (8004124 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004020:	4841      	ldr	r0, [pc, #260]	; (8004128 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004022:	f7ff f989 	bl	8003338 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 8004026:	f7ff faab 	bl	8003580 <JoyStickControlCartesian>
		}

		if (emer_pushed)
 800402a:	4b40      	ldr	r3, [pc, #256]	; (800412c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d013      	beq.n	800405a <HAL_TIM_PeriodElapsedCallback+0x1f2>
		{
			BaseSystem_SetPickTray();
 8004032:	f7fd f90f 	bl	8001254 <BaseSystem_SetPickTray>
			BaseSystem_SetPlaceTray();
 8004036:	f7fd fa3d 	bl	80014b4 <BaseSystem_SetPlaceTray>
			BaseSystem_SetHome();
 800403a:	f7fd f857 	bl	80010ec <BaseSystem_SetHome>
			BaseSystem_RuntrayMode();
 800403e:	f7fd fb69 	bl	8001714 <BaseSystem_RuntrayMode>
			BaseSystem_RunPointMode();
 8004042:	f7fd f895 	bl	8001170 <BaseSystem_RunPointMode>

			BaseSystem_EffAllOff();
 8004046:	f7fd fc97 	bl	8001978 <BaseSystem_EffAllOff>
			BaseSystem_EffLaserOn();
 800404a:	f7fd fcb1 	bl	80019b0 <BaseSystem_EffLaserOn>
			BaseSystem_EffGripperOn();
 800404e:	f7fd fccb 	bl	80019e8 <BaseSystem_EffGripperOn>
			BaseSystem_EffGripperPick();
 8004052:	f7fd fce5 	bl	8001a20 <BaseSystem_EffGripperPick>
			BaseSystem_EffGripperPlace();
 8004056:	f7fd fd03 	bl	8001a60 <BaseSystem_EffGripperPlace>
		}

		static uint8_t j = 0;
		if (j == 0)
 800405a:	4b35      	ldr	r3, [pc, #212]	; (8004130 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_TIM_PeriodElapsedCallback+0x1fe>
		{
			eff_st();
 8004062:	f7fd fd7f 	bl	8001b64 <eff_st>
		}
		j = (j + 1) % 500;
 8004066:	4b32      	ldr	r3, [pc, #200]	; (8004130 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	3301      	adds	r3, #1
 800406c:	4a31      	ldr	r2, [pc, #196]	; (8004134 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800406e:	fb82 1203 	smull	r1, r2, r2, r3
 8004072:	1151      	asrs	r1, r2, #5
 8004074:	17da      	asrs	r2, r3, #31
 8004076:	1a8a      	subs	r2, r1, r2
 8004078:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800407c:	fb01 f202 	mul.w	r2, r1, r2
 8004080:	1a9a      	subs	r2, r3, r2
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	4b2a      	ldr	r3, [pc, #168]	; (8004130 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004086:	701a      	strb	r2, [r3, #0]

		eff_l = eff_c;
 8004088:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800408a:	881a      	ldrh	r2, [r3, #0]
 800408c:	4b17      	ldr	r3, [pc, #92]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 800408e:	801a      	strh	r2, [r3, #0]

		static uint8_t i = 0;
		if (i == 0)
 8004090:	4b29      	ldr	r3, [pc, #164]	; (8004138 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <HAL_TIM_PeriodElapsedCallback+0x23c>
		{
			registerFrame[0].U16 = 0b0101100101100001; //Ya 22881
 8004098:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800409a:	f645 1261 	movw	r2, #22881	; 0x5961
 800409e:	801a      	strh	r2, [r3, #0]
			Modbus_Protocal_Worker();
 80040a0:	f7fe fa3a 	bl	8002518 <Modbus_Protocal_Worker>
			//eff_st();
		}
		i = (i + 1) % 200;
 80040a4:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	3301      	adds	r3, #1
 80040aa:	4a24      	ldr	r2, [pc, #144]	; (800413c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80040ac:	fb82 1203 	smull	r1, r2, r2, r3
 80040b0:	1191      	asrs	r1, r2, #6
 80040b2:	17da      	asrs	r2, r3, #31
 80040b4:	1a8a      	subs	r2, r1, r2
 80040b6:	21c8      	movs	r1, #200	; 0xc8
 80040b8:	fb01 f202 	mul.w	r2, r1, r2
 80040bc:	1a9a      	subs	r2, r3, r2
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80040c2:	701a      	strb	r2, [r3, #0]

	}
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bdb0      	pop	{r4, r5, r7, pc}
 80040cc:	20000648 	.word	0x20000648
 80040d0:	200008c0 	.word	0x200008c0
 80040d4:	20000594 	.word	0x20000594
 80040d8:	200004e0 	.word	0x200004e0
 80040dc:	20000288 	.word	0x20000288
 80040e0:	2000025c 	.word	0x2000025c
 80040e4:	20000f48 	.word	0x20000f48
 80040e8:	20000906 	.word	0x20000906
 80040ec:	20000904 	.word	0x20000904
 80040f0:	20000903 	.word	0x20000903
 80040f4:	20000fd4 	.word	0x20000fd4
 80040f8:	20000fd5 	.word	0x20000fd5
 80040fc:	20000fd6 	.word	0x20000fd6
 8004100:	20000fd7 	.word	0x20000fd7
 8004104:	20000fd8 	.word	0x20000fd8
 8004108:	200008fc 	.word	0x200008fc
 800410c:	200008fe 	.word	0x200008fe
 8004110:	200008ff 	.word	0x200008ff
 8004114:	20000900 	.word	0x20000900
 8004118:	20000901 	.word	0x20000901
 800411c:	20000902 	.word	0x20000902
 8004120:	20000259 	.word	0x20000259
 8004124:	200009a0 	.word	0x200009a0
 8004128:	2000099c 	.word	0x2000099c
 800412c:	20000289 	.word	0x20000289
 8004130:	20000fd9 	.word	0x20000fd9
 8004134:	10624dd3 	.word	0x10624dd3
 8004138:	20000fda 	.word	0x20000fda
 800413c:	51eb851f 	.word	0x51eb851f

08004140 <ControllerState>:

void ControllerState()
{
 8004140:	b5b0      	push	{r4, r5, r7, lr}
 8004142:	af00      	add	r7, sp, #0
	static enum {Idle, Follow} state = Idle;

	if (SetHomeYFlag == 0)
 8004144:	4ba2      	ldr	r3, [pc, #648]	; (80043d0 <ControllerState+0x290>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 8135 	bne.w	80043b8 <ControllerState+0x278>
	{
		switch(state)
 800414e:	4ba1      	ldr	r3, [pc, #644]	; (80043d4 <ControllerState+0x294>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <ControllerState+0x1c>
 8004156:	2b01      	cmp	r3, #1
 8004158:	d045      	beq.n	80041e6 <ControllerState+0xa6>
 800415a:	e129      	b.n	80043b0 <ControllerState+0x270>
		{
		case Idle:
			ControllerFinishedFollowFlag = 1;
 800415c:	4b9e      	ldr	r3, [pc, #632]	; (80043d8 <ControllerState+0x298>)
 800415e:	2201      	movs	r2, #1
 8004160:	701a      	strb	r2, [r3, #0]
			PulseWidthModulation = 0;
 8004162:	4b9e      	ldr	r3, [pc, #632]	; (80043dc <ControllerState+0x29c>)
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
			MotorDrive(&htim1);
 800416a:	489d      	ldr	r0, [pc, #628]	; (80043e0 <ControllerState+0x2a0>)
 800416c:	f7fd ff24 	bl	8001fb8 <MotorDrive>
			Pi = QEIData.position;
 8004170:	4b9c      	ldr	r3, [pc, #624]	; (80043e4 <ControllerState+0x2a4>)
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	4a9c      	ldr	r2, [pc, #624]	; (80043e8 <ControllerState+0x2a8>)
 8004176:	6013      	str	r3, [r2, #0]

			if(Pf != Pf_last)
 8004178:	4b9c      	ldr	r3, [pc, #624]	; (80043ec <ControllerState+0x2ac>)
 800417a:	ed93 7a00 	vldr	s14, [r3]
 800417e:	4b9c      	ldr	r3, [pc, #624]	; (80043f0 <ControllerState+0x2b0>)
 8004180:	edd3 7a00 	vldr	s15, [r3]
 8004184:	eeb4 7a67 	vcmp.f32	s14, s15
 8004188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418c:	f000 810d 	beq.w	80043aa <ControllerState+0x26a>
			{
				t_traj = 0;
 8004190:	4998      	ldr	r1, [pc, #608]	; (80043f4 <ControllerState+0x2b4>)
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	e9c1 2300 	strd	r2, r3, [r1]
				SteadyStateFlag = 0;
 800419e:	4b96      	ldr	r3, [pc, #600]	; (80043f8 <ControllerState+0x2b8>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]
				QuinticTraj_PreCal(Pi, Pf, &traj);
 80041a4:	4b90      	ldr	r3, [pc, #576]	; (80043e8 <ControllerState+0x2a8>)
 80041a6:	edd3 7a00 	vldr	s15, [r3]
 80041aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041ae:	ee17 3a90 	vmov	r3, s15
 80041b2:	b21b      	sxth	r3, r3
 80041b4:	4a8d      	ldr	r2, [pc, #564]	; (80043ec <ControllerState+0x2ac>)
 80041b6:	edd2 7a00 	vldr	s15, [r2]
 80041ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041be:	ee17 2a90 	vmov	r2, s15
 80041c2:	b211      	sxth	r1, r2
 80041c4:	4a8d      	ldr	r2, [pc, #564]	; (80043fc <ControllerState+0x2bc>)
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe fc1e 	bl	8002a08 <QuinticTraj_PreCal>
				ControllerFinishedFollowFlag = 0;
 80041cc:	4b82      	ldr	r3, [pc, #520]	; (80043d8 <ControllerState+0x298>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
				state = Follow;
 80041d2:	4b80      	ldr	r3, [pc, #512]	; (80043d4 <ControllerState+0x294>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80041d8:	2201      	movs	r2, #1
 80041da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041de:	4888      	ldr	r0, [pc, #544]	; (8004400 <ControllerState+0x2c0>)
 80041e0:	f002 f8f0 	bl	80063c4 <HAL_GPIO_WritePin>
			}
		break;
 80041e4:	e0e1      	b.n	80043aa <ControllerState+0x26a>

		case Follow:
			t_traj = t_traj + 1000;
 80041e6:	4b83      	ldr	r3, [pc, #524]	; (80043f4 <ControllerState+0x2b4>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f512 707a 	adds.w	r0, r2, #1000	; 0x3e8
 80041f0:	f143 0100 	adc.w	r1, r3, #0
 80041f4:	4b7f      	ldr	r3, [pc, #508]	; (80043f4 <ControllerState+0x2b4>)
 80041f6:	e9c3 0100 	strd	r0, r1, [r3]
			if (t_traj <= traj.t_total * 1000000)
 80041fa:	4b7e      	ldr	r3, [pc, #504]	; (80043f4 <ControllerState+0x2b4>)
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	f7fc fd6c 	bl	8000ce0 <__aeabi_ul2f>
 8004208:	ee06 0a90 	vmov	s13, r0
 800420c:	4b7b      	ldr	r3, [pc, #492]	; (80043fc <ControllerState+0x2bc>)
 800420e:	edd3 7a00 	vldr	s15, [r3]
 8004212:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8004404 <ControllerState+0x2c4>
 8004216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800421a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800421e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004222:	d817      	bhi.n	8004254 <ControllerState+0x114>
			{
				QuinticTraj_GetState(Pi, Pf, &traj, t_traj);
 8004224:	4b70      	ldr	r3, [pc, #448]	; (80043e8 <ControllerState+0x2a8>)
 8004226:	edd3 7a00 	vldr	s15, [r3]
 800422a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800422e:	ee17 3a90 	vmov	r3, s15
 8004232:	b218      	sxth	r0, r3
 8004234:	4b6d      	ldr	r3, [pc, #436]	; (80043ec <ControllerState+0x2ac>)
 8004236:	edd3 7a00 	vldr	s15, [r3]
 800423a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800423e:	ee17 3a90 	vmov	r3, s15
 8004242:	b219      	sxth	r1, r3
 8004244:	4b6b      	ldr	r3, [pc, #428]	; (80043f4 <ControllerState+0x2b4>)
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	4613      	mov	r3, r2
 800424c:	4a6b      	ldr	r2, [pc, #428]	; (80043fc <ControllerState+0x2bc>)
 800424e:	f7fe fc77 	bl	8002b40 <QuinticTraj_GetState>
 8004252:	e003      	b.n	800425c <ControllerState+0x11c>
			}
			else
			{
				q_des = Pf;
 8004254:	4b65      	ldr	r3, [pc, #404]	; (80043ec <ControllerState+0x2ac>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a6b      	ldr	r2, [pc, #428]	; (8004408 <ControllerState+0x2c8>)
 800425a:	6013      	str	r3, [r2, #0]
			}

			PositionControlVelocityForm(&Controller);
 800425c:	486b      	ldr	r0, [pc, #428]	; (800440c <ControllerState+0x2cc>)
 800425e:	f7fd fc1f 	bl	8001aa0 <PositionControlVelocityForm>
			MotorDrive(&htim1);
 8004262:	485f      	ldr	r0, [pc, #380]	; (80043e0 <ControllerState+0x2a0>)
 8004264:	f7fd fea8 	bl	8001fb8 <MotorDrive>

			if(QEIData.position > max_pos)
 8004268:	4b5e      	ldr	r3, [pc, #376]	; (80043e4 <ControllerState+0x2a4>)
 800426a:	ed93 7a04 	vldr	s14, [r3, #16]
 800426e:	4b68      	ldr	r3, [pc, #416]	; (8004410 <ControllerState+0x2d0>)
 8004270:	edd3 7a00 	vldr	s15, [r3]
 8004274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427c:	dd03      	ble.n	8004286 <ControllerState+0x146>
			{
				max_pos = QEIData.position;
 800427e:	4b59      	ldr	r3, [pc, #356]	; (80043e4 <ControllerState+0x2a4>)
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	4a63      	ldr	r2, [pc, #396]	; (8004410 <ControllerState+0x2d0>)
 8004284:	6013      	str	r3, [r2, #0]
			}

			if (((t_traj > traj.t_total * 1000000) && (0.15 > fabs(q_des - QEIData.position)) && (SteadyStateFlag == 0)) || P_disallow || N_disallow)
 8004286:	4b5b      	ldr	r3, [pc, #364]	; (80043f4 <ControllerState+0x2b4>)
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	f7fc fd26 	bl	8000ce0 <__aeabi_ul2f>
 8004294:	ee06 0a90 	vmov	s13, r0
 8004298:	4b58      	ldr	r3, [pc, #352]	; (80043fc <ControllerState+0x2bc>)
 800429a:	edd3 7a00 	vldr	s15, [r3]
 800429e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004404 <ControllerState+0x2c4>
 80042a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042a6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80042aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ae:	dd19      	ble.n	80042e4 <ControllerState+0x1a4>
 80042b0:	4b55      	ldr	r3, [pc, #340]	; (8004408 <ControllerState+0x2c8>)
 80042b2:	ed93 7a00 	vldr	s14, [r3]
 80042b6:	4b4b      	ldr	r3, [pc, #300]	; (80043e4 <ControllerState+0x2a4>)
 80042b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80042bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042c0:	eef0 7ae7 	vabs.f32	s15, s15
 80042c4:	ee17 0a90 	vmov	r0, s15
 80042c8:	f7fc f8ea 	bl	80004a0 <__aeabi_f2d>
 80042cc:	a33c      	add	r3, pc, #240	; (adr r3, 80043c0 <ControllerState+0x280>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	f7fc fbaf 	bl	8000a34 <__aeabi_dcmplt>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <ControllerState+0x1a4>
 80042dc:	4b46      	ldr	r3, [pc, #280]	; (80043f8 <ControllerState+0x2b8>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <ControllerState+0x1b4>
 80042e4:	4b4b      	ldr	r3, [pc, #300]	; (8004414 <ControllerState+0x2d4>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d103      	bne.n	80042f4 <ControllerState+0x1b4>
 80042ec:	4b4a      	ldr	r3, [pc, #296]	; (8004418 <ControllerState+0x2d8>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00c      	beq.n	800430e <ControllerState+0x1ce>
			{
				t_total_actual = t_traj + 500000;
 80042f4:	4b3f      	ldr	r3, [pc, #252]	; (80043f4 <ControllerState+0x2b4>)
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	4948      	ldr	r1, [pc, #288]	; (800441c <ControllerState+0x2dc>)
 80042fc:	1854      	adds	r4, r2, r1
 80042fe:	f143 0500 	adc.w	r5, r3, #0
 8004302:	4b47      	ldr	r3, [pc, #284]	; (8004420 <ControllerState+0x2e0>)
 8004304:	e9c3 4500 	strd	r4, r5, [r3]
				SteadyStateFlag = 1;
 8004308:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <ControllerState+0x2b8>)
 800430a:	2201      	movs	r2, #1
 800430c:	701a      	strb	r2, [r3, #0]
			}

			if (SteadyStateFlag && (t_traj > t_total_actual) && (0.05 > fabs(q_des - QEIData.position)) || (P_disallow) || (N_disallow))
 800430e:	4b3a      	ldr	r3, [pc, #232]	; (80043f8 <ControllerState+0x2b8>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01f      	beq.n	8004356 <ControllerState+0x216>
 8004316:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <ControllerState+0x2b4>)
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	4940      	ldr	r1, [pc, #256]	; (8004420 <ControllerState+0x2e0>)
 800431e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004322:	4290      	cmp	r0, r2
 8004324:	eb71 0303 	sbcs.w	r3, r1, r3
 8004328:	d215      	bcs.n	8004356 <ControllerState+0x216>
 800432a:	4b37      	ldr	r3, [pc, #220]	; (8004408 <ControllerState+0x2c8>)
 800432c:	ed93 7a00 	vldr	s14, [r3]
 8004330:	4b2c      	ldr	r3, [pc, #176]	; (80043e4 <ControllerState+0x2a4>)
 8004332:	edd3 7a04 	vldr	s15, [r3, #16]
 8004336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800433a:	eef0 7ae7 	vabs.f32	s15, s15
 800433e:	ee17 0a90 	vmov	r0, s15
 8004342:	f7fc f8ad 	bl	80004a0 <__aeabi_f2d>
 8004346:	a320      	add	r3, pc, #128	; (adr r3, 80043c8 <ControllerState+0x288>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f7fc fb72 	bl	8000a34 <__aeabi_dcmplt>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d107      	bne.n	8004366 <ControllerState+0x226>
 8004356:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <ControllerState+0x2d4>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <ControllerState+0x226>
 800435e:	4b2e      	ldr	r3, [pc, #184]	; (8004418 <ControllerState+0x2d8>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d023      	beq.n	80043ae <ControllerState+0x26e>
			{
				state = Idle;
 8004366:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <ControllerState+0x294>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
				overshoot = max_pos * 100/(Pf - Pi);
 800436c:	4b28      	ldr	r3, [pc, #160]	; (8004410 <ControllerState+0x2d0>)
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004424 <ControllerState+0x2e4>
 8004376:	ee67 6a87 	vmul.f32	s13, s15, s14
 800437a:	4b1c      	ldr	r3, [pc, #112]	; (80043ec <ControllerState+0x2ac>)
 800437c:	ed93 7a00 	vldr	s14, [r3]
 8004380:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <ControllerState+0x2a8>)
 8004382:	edd3 7a00 	vldr	s15, [r3]
 8004386:	ee37 7a67 	vsub.f32	s14, s14, s15
 800438a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438e:	4b26      	ldr	r3, [pc, #152]	; (8004428 <ControllerState+0x2e8>)
 8004390:	edc3 7a00 	vstr	s15, [r3]
				max_pos = 0;
 8004394:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <ControllerState+0x2d0>)
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800439c:	2200      	movs	r2, #0
 800439e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043a2:	4817      	ldr	r0, [pc, #92]	; (8004400 <ControllerState+0x2c0>)
 80043a4:	f002 f80e 	bl	80063c4 <HAL_GPIO_WritePin>
			}
		break;
 80043a8:	e001      	b.n	80043ae <ControllerState+0x26e>
		break;
 80043aa:	bf00      	nop
 80043ac:	e000      	b.n	80043b0 <ControllerState+0x270>
		break;
 80043ae:	bf00      	nop
		}
		Pf_last = Pf;
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <ControllerState+0x2ac>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <ControllerState+0x2b0>)
 80043b6:	6013      	str	r3, [r2, #0]
	}
}
 80043b8:	bf00      	nop
 80043ba:	bdb0      	pop	{r4, r5, r7, pc}
 80043bc:	f3af 8000 	nop.w
 80043c0:	33333333 	.word	0x33333333
 80043c4:	3fc33333 	.word	0x3fc33333
 80043c8:	9999999a 	.word	0x9999999a
 80043cc:	3fa99999 	.word	0x3fa99999
 80043d0:	20000259 	.word	0x20000259
 80043d4:	20000fdb 	.word	0x20000fdb
 80043d8:	200008e8 	.word	0x200008e8
 80043dc:	200008e4 	.word	0x200008e4
 80043e0:	200004e0 	.word	0x200004e0
 80043e4:	200008c8 	.word	0x200008c8
 80043e8:	200008ac 	.word	0x200008ac
 80043ec:	200008b0 	.word	0x200008b0
 80043f0:	200008b4 	.word	0x200008b4
 80043f4:	20000888 	.word	0x20000888
 80043f8:	200008b8 	.word	0x200008b8
 80043fc:	200008a4 	.word	0x200008a4
 8004400:	40020400 	.word	0x40020400
 8004404:	49742400 	.word	0x49742400
 8004408:	20000898 	.word	0x20000898
 800440c:	200008ec 	.word	0x200008ec
 8004410:	200009a4 	.word	0x200009a4
 8004414:	200008f8 	.word	0x200008f8
 8004418:	200008f9 	.word	0x200008f9
 800441c:	0007a120 	.word	0x0007a120
 8004420:	20000890 	.word	0x20000890
 8004424:	42c80000 	.word	0x42c80000
 8004428:	200009a8 	.word	0x200009a8

0800442c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004430:	b672      	cpsid	i
}
 8004432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004434:	e7fe      	b.n	8004434 <Error_Handler+0x8>
	...

08004438 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	607b      	str	r3, [r7, #4]
 8004442:	4b10      	ldr	r3, [pc, #64]	; (8004484 <HAL_MspInit+0x4c>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	4a0f      	ldr	r2, [pc, #60]	; (8004484 <HAL_MspInit+0x4c>)
 8004448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800444c:	6453      	str	r3, [r2, #68]	; 0x44
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <HAL_MspInit+0x4c>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	4b09      	ldr	r3, [pc, #36]	; (8004484 <HAL_MspInit+0x4c>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4a08      	ldr	r2, [pc, #32]	; (8004484 <HAL_MspInit+0x4c>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	; 0x40
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_MspInit+0x4c>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004476:	2007      	movs	r0, #7
 8004478:	f001 f9aa 	bl	80057d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40023800 	.word	0x40023800

08004488 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004490:	f107 0314 	add.w	r3, r7, #20
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2f      	ldr	r2, [pc, #188]	; (8004564 <HAL_ADC_MspInit+0xdc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d157      	bne.n	800455a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	4b2e      	ldr	r3, [pc, #184]	; (8004568 <HAL_ADC_MspInit+0xe0>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	4a2d      	ldr	r2, [pc, #180]	; (8004568 <HAL_ADC_MspInit+0xe0>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6453      	str	r3, [r2, #68]	; 0x44
 80044ba:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <HAL_ADC_MspInit+0xe0>)
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	4b27      	ldr	r3, [pc, #156]	; (8004568 <HAL_ADC_MspInit+0xe0>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	4a26      	ldr	r2, [pc, #152]	; (8004568 <HAL_ADC_MspInit+0xe0>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6313      	str	r3, [r2, #48]	; 0x30
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_ADC_MspInit+0xe0>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044e2:	2303      	movs	r3, #3
 80044e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044e6:	2303      	movs	r3, #3
 80044e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ee:	f107 0314 	add.w	r3, r7, #20
 80044f2:	4619      	mov	r1, r3
 80044f4:	481d      	ldr	r0, [pc, #116]	; (800456c <HAL_ADC_MspInit+0xe4>)
 80044f6:	f001 fdc9 	bl	800608c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80044fa:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 80044fc:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_ADC_MspInit+0xec>)
 80044fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 8004502:	2200      	movs	r2, #0
 8004504:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004506:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 8004508:	2200      	movs	r2, #0
 800450a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800450c:	4b18      	ldr	r3, [pc, #96]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 800450e:	2200      	movs	r2, #0
 8004510:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 8004514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004518:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 800451c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004520:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004522:	4b13      	ldr	r3, [pc, #76]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 8004524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004528:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800452a:	4b11      	ldr	r3, [pc, #68]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 800452c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004530:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 8004534:	2200      	movs	r2, #0
 8004536:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004538:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 800453a:	2200      	movs	r2, #0
 800453c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800453e:	480c      	ldr	r0, [pc, #48]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 8004540:	f001 f988 	bl	8005854 <HAL_DMA_Init>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800454a:	f7ff ff6f 	bl	800442c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a07      	ldr	r2, [pc, #28]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 8004552:	639a      	str	r2, [r3, #56]	; 0x38
 8004554:	4a06      	ldr	r2, [pc, #24]	; (8004570 <HAL_ADC_MspInit+0xe8>)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800455a:	bf00      	nop
 800455c:	3728      	adds	r7, #40	; 0x28
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40012000 	.word	0x40012000
 8004568:	40023800 	.word	0x40023800
 800456c:	40020000 	.word	0x40020000
 8004570:	200003cc 	.word	0x200003cc
 8004574:	40026410 	.word	0x40026410

08004578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a38      	ldr	r2, [pc, #224]	; (8004678 <HAL_I2C_MspInit+0x100>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d16a      	bne.n	8004670 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	4b37      	ldr	r3, [pc, #220]	; (800467c <HAL_I2C_MspInit+0x104>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	4a36      	ldr	r2, [pc, #216]	; (800467c <HAL_I2C_MspInit+0x104>)
 80045a4:	f043 0302 	orr.w	r3, r3, #2
 80045a8:	6313      	str	r3, [r2, #48]	; 0x30
 80045aa:	4b34      	ldr	r3, [pc, #208]	; (800467c <HAL_I2C_MspInit+0x104>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045b6:	23c0      	movs	r3, #192	; 0xc0
 80045b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045ba:	2312      	movs	r3, #18
 80045bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c2:	2303      	movs	r3, #3
 80045c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045c6:	2304      	movs	r3, #4
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ca:	f107 0314 	add.w	r3, r7, #20
 80045ce:	4619      	mov	r1, r3
 80045d0:	482b      	ldr	r0, [pc, #172]	; (8004680 <HAL_I2C_MspInit+0x108>)
 80045d2:	f001 fd5b 	bl	800608c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	4b28      	ldr	r3, [pc, #160]	; (800467c <HAL_I2C_MspInit+0x104>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	4a27      	ldr	r2, [pc, #156]	; (800467c <HAL_I2C_MspInit+0x104>)
 80045e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045e4:	6413      	str	r3, [r2, #64]	; 0x40
 80045e6:	4b25      	ldr	r3, [pc, #148]	; (800467c <HAL_I2C_MspInit+0x104>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 80045f4:	4a24      	ldr	r2, [pc, #144]	; (8004688 <HAL_I2C_MspInit+0x110>)
 80045f6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80045f8:	4b22      	ldr	r3, [pc, #136]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 80045fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045fe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004600:	4b20      	ldr	r3, [pc, #128]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 8004602:	2200      	movs	r2, #0
 8004604:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004606:	4b1f      	ldr	r3, [pc, #124]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 8004608:	2200      	movs	r2, #0
 800460a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 800460e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004612:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004614:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 8004616:	2200      	movs	r2, #0
 8004618:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800461a:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 800461c:	2200      	movs	r2, #0
 800461e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8004620:	4b18      	ldr	r3, [pc, #96]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 8004622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004626:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004628:	4b16      	ldr	r3, [pc, #88]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 800462a:	2200      	movs	r2, #0
 800462c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800462e:	4b15      	ldr	r3, [pc, #84]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 8004630:	2200      	movs	r2, #0
 8004632:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004634:	4813      	ldr	r0, [pc, #76]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 8004636:	f001 f90d 	bl	8005854 <HAL_DMA_Init>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8004640:	f7ff fef4 	bl	800442c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a0f      	ldr	r2, [pc, #60]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
 800464a:	4a0e      	ldr	r2, [pc, #56]	; (8004684 <HAL_I2C_MspInit+0x10c>)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004650:	2200      	movs	r2, #0
 8004652:	2100      	movs	r1, #0
 8004654:	201f      	movs	r0, #31
 8004656:	f001 f8c6 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800465a:	201f      	movs	r0, #31
 800465c:	f001 f8df 	bl	800581e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004660:	2200      	movs	r2, #0
 8004662:	2100      	movs	r1, #0
 8004664:	2020      	movs	r0, #32
 8004666:	f001 f8be 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800466a:	2020      	movs	r0, #32
 800466c:	f001 f8d7 	bl	800581e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004670:	bf00      	nop
 8004672:	3728      	adds	r7, #40	; 0x28
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40005400 	.word	0x40005400
 800467c:	40023800 	.word	0x40023800
 8004680:	40020400 	.word	0x40020400
 8004684:	20000480 	.word	0x20000480
 8004688:	40026010 	.word	0x40026010

0800468c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2a      	ldr	r2, [pc, #168]	; (8004744 <HAL_TIM_Base_MspInit+0xb8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d116      	bne.n	80046cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	4b29      	ldr	r3, [pc, #164]	; (8004748 <HAL_TIM_Base_MspInit+0xbc>)
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	4a28      	ldr	r2, [pc, #160]	; (8004748 <HAL_TIM_Base_MspInit+0xbc>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6453      	str	r3, [r2, #68]	; 0x44
 80046ae:	4b26      	ldr	r3, [pc, #152]	; (8004748 <HAL_TIM_Base_MspInit+0xbc>)
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80046ba:	2200      	movs	r2, #0
 80046bc:	2100      	movs	r1, #0
 80046be:	201a      	movs	r0, #26
 80046c0:	f001 f891 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80046c4:	201a      	movs	r0, #26
 80046c6:	f001 f8aa 	bl	800581e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80046ca:	e036      	b.n	800473a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1e      	ldr	r2, [pc, #120]	; (800474c <HAL_TIM_Base_MspInit+0xc0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d116      	bne.n	8004704 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <HAL_TIM_Base_MspInit+0xbc>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <HAL_TIM_Base_MspInit+0xbc>)
 80046e0:	f043 0308 	orr.w	r3, r3, #8
 80046e4:	6413      	str	r3, [r2, #64]	; 0x40
 80046e6:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_TIM_Base_MspInit+0xbc>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80046f2:	2200      	movs	r2, #0
 80046f4:	2100      	movs	r1, #0
 80046f6:	2032      	movs	r0, #50	; 0x32
 80046f8:	f001 f875 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80046fc:	2032      	movs	r0, #50	; 0x32
 80046fe:	f001 f88e 	bl	800581e <HAL_NVIC_EnableIRQ>
}
 8004702:	e01a      	b.n	800473a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a11      	ldr	r2, [pc, #68]	; (8004750 <HAL_TIM_Base_MspInit+0xc4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d115      	bne.n	800473a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <HAL_TIM_Base_MspInit+0xbc>)
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	4a0c      	ldr	r2, [pc, #48]	; (8004748 <HAL_TIM_Base_MspInit+0xbc>)
 8004718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800471c:	6453      	str	r3, [r2, #68]	; 0x44
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <HAL_TIM_Base_MspInit+0xbc>)
 8004720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800472a:	2200      	movs	r2, #0
 800472c:	2100      	movs	r1, #0
 800472e:	201a      	movs	r0, #26
 8004730:	f001 f859 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004734:	201a      	movs	r0, #26
 8004736:	f001 f872 	bl	800581e <HAL_NVIC_EnableIRQ>
}
 800473a:	bf00      	nop
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40010000 	.word	0x40010000
 8004748:	40023800 	.word	0x40023800
 800474c:	40000c00 	.word	0x40000c00
 8004750:	40014800 	.word	0x40014800

08004754 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800475c:	f107 0314 	add.w	r3, r7, #20
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1d      	ldr	r2, [pc, #116]	; (80047e8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d133      	bne.n	80047de <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <HAL_TIM_Encoder_MspInit+0x98>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	4a1b      	ldr	r2, [pc, #108]	; (80047ec <HAL_TIM_Encoder_MspInit+0x98>)
 8004780:	f043 0302 	orr.w	r3, r3, #2
 8004784:	6413      	str	r3, [r2, #64]	; 0x40
 8004786:	4b19      	ldr	r3, [pc, #100]	; (80047ec <HAL_TIM_Encoder_MspInit+0x98>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	4b15      	ldr	r3, [pc, #84]	; (80047ec <HAL_TIM_Encoder_MspInit+0x98>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	4a14      	ldr	r2, [pc, #80]	; (80047ec <HAL_TIM_Encoder_MspInit+0x98>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	6313      	str	r3, [r2, #48]	; 0x30
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <HAL_TIM_Encoder_MspInit+0x98>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047ae:	23c0      	movs	r3, #192	; 0xc0
 80047b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b2:	2302      	movs	r3, #2
 80047b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ba:	2300      	movs	r3, #0
 80047bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047be:	2302      	movs	r3, #2
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c2:	f107 0314 	add.w	r3, r7, #20
 80047c6:	4619      	mov	r1, r3
 80047c8:	4809      	ldr	r0, [pc, #36]	; (80047f0 <HAL_TIM_Encoder_MspInit+0x9c>)
 80047ca:	f001 fc5f 	bl	800608c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80047ce:	2200      	movs	r2, #0
 80047d0:	2100      	movs	r1, #0
 80047d2:	201d      	movs	r0, #29
 80047d4:	f001 f807 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80047d8:	201d      	movs	r0, #29
 80047da:	f001 f820 	bl	800581e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80047de:	bf00      	nop
 80047e0:	3728      	adds	r7, #40	; 0x28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40020000 	.word	0x40020000

080047f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fc:	f107 030c 	add.w	r3, r7, #12
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a12      	ldr	r2, [pc, #72]	; (800485c <HAL_TIM_MspPostInit+0x68>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d11e      	bne.n	8004854 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	4b11      	ldr	r3, [pc, #68]	; (8004860 <HAL_TIM_MspPostInit+0x6c>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	4a10      	ldr	r2, [pc, #64]	; (8004860 <HAL_TIM_MspPostInit+0x6c>)
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	6313      	str	r3, [r2, #48]	; 0x30
 8004826:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <HAL_TIM_MspPostInit+0x6c>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004836:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004838:	2302      	movs	r3, #2
 800483a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004840:	2300      	movs	r3, #0
 8004842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004844:	2301      	movs	r3, #1
 8004846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004848:	f107 030c 	add.w	r3, r7, #12
 800484c:	4619      	mov	r1, r3
 800484e:	4805      	ldr	r0, [pc, #20]	; (8004864 <HAL_TIM_MspPostInit+0x70>)
 8004850:	f001 fc1c 	bl	800608c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004854:	bf00      	nop
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40010000 	.word	0x40010000
 8004860:	40023800 	.word	0x40023800
 8004864:	40020000 	.word	0x40020000

08004868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004870:	f107 0314 	add.w	r3, r7, #20
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	609a      	str	r2, [r3, #8]
 800487c:	60da      	str	r2, [r3, #12]
 800487e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a34      	ldr	r2, [pc, #208]	; (8004958 <HAL_UART_MspInit+0xf0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d161      	bne.n	800494e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	4b33      	ldr	r3, [pc, #204]	; (800495c <HAL_UART_MspInit+0xf4>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	4a32      	ldr	r2, [pc, #200]	; (800495c <HAL_UART_MspInit+0xf4>)
 8004894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004898:	6413      	str	r3, [r2, #64]	; 0x40
 800489a:	4b30      	ldr	r3, [pc, #192]	; (800495c <HAL_UART_MspInit+0xf4>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	4b2c      	ldr	r3, [pc, #176]	; (800495c <HAL_UART_MspInit+0xf4>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	4a2b      	ldr	r2, [pc, #172]	; (800495c <HAL_UART_MspInit+0xf4>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	6313      	str	r3, [r2, #48]	; 0x30
 80048b6:	4b29      	ldr	r3, [pc, #164]	; (800495c <HAL_UART_MspInit+0xf4>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80048c2:	230c      	movs	r3, #12
 80048c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c6:	2302      	movs	r3, #2
 80048c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ce:	2303      	movs	r3, #3
 80048d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048d2:	2307      	movs	r3, #7
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d6:	f107 0314 	add.w	r3, r7, #20
 80048da:	4619      	mov	r1, r3
 80048dc:	4820      	ldr	r0, [pc, #128]	; (8004960 <HAL_UART_MspInit+0xf8>)
 80048de:	f001 fbd5 	bl	800608c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_UART_MspInit+0xfc>)
 80048e4:	4a20      	ldr	r2, [pc, #128]	; (8004968 <HAL_UART_MspInit+0x100>)
 80048e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80048e8:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <HAL_UART_MspInit+0xfc>)
 80048ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048f0:	4b1c      	ldr	r3, [pc, #112]	; (8004964 <HAL_UART_MspInit+0xfc>)
 80048f2:	2240      	movs	r2, #64	; 0x40
 80048f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048f6:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <HAL_UART_MspInit+0xfc>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_UART_MspInit+0xfc>)
 80048fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004902:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004904:	4b17      	ldr	r3, [pc, #92]	; (8004964 <HAL_UART_MspInit+0xfc>)
 8004906:	2200      	movs	r2, #0
 8004908:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800490a:	4b16      	ldr	r3, [pc, #88]	; (8004964 <HAL_UART_MspInit+0xfc>)
 800490c:	2200      	movs	r2, #0
 800490e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004910:	4b14      	ldr	r3, [pc, #80]	; (8004964 <HAL_UART_MspInit+0xfc>)
 8004912:	2200      	movs	r2, #0
 8004914:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <HAL_UART_MspInit+0xfc>)
 8004918:	2200      	movs	r2, #0
 800491a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800491c:	4b11      	ldr	r3, [pc, #68]	; (8004964 <HAL_UART_MspInit+0xfc>)
 800491e:	2200      	movs	r2, #0
 8004920:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004922:	4810      	ldr	r0, [pc, #64]	; (8004964 <HAL_UART_MspInit+0xfc>)
 8004924:	f000 ff96 	bl	8005854 <HAL_DMA_Init>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800492e:	f7ff fd7d 	bl	800442c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <HAL_UART_MspInit+0xfc>)
 8004936:	635a      	str	r2, [r3, #52]	; 0x34
 8004938:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <HAL_UART_MspInit+0xfc>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800493e:	2200      	movs	r2, #0
 8004940:	2100      	movs	r1, #0
 8004942:	2026      	movs	r0, #38	; 0x26
 8004944:	f000 ff4f 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004948:	2026      	movs	r0, #38	; 0x26
 800494a:	f000 ff68 	bl	800581e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800494e:	bf00      	nop
 8004950:	3728      	adds	r7, #40	; 0x28
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40004400 	.word	0x40004400
 800495c:	40023800 	.word	0x40023800
 8004960:	40020000 	.word	0x40020000
 8004964:	20000824 	.word	0x20000824
 8004968:	400260a0 	.word	0x400260a0

0800496c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004970:	e7fe      	b.n	8004970 <NMI_Handler+0x4>

08004972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004972:	b480      	push	{r7}
 8004974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004976:	e7fe      	b.n	8004976 <HardFault_Handler+0x4>

08004978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800497c:	e7fe      	b.n	800497c <MemManage_Handler+0x4>

0800497e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800497e:	b480      	push	{r7}
 8004980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004982:	e7fe      	b.n	8004982 <BusFault_Handler+0x4>

08004984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004988:	e7fe      	b.n	8004988 <UsageFault_Handler+0x4>

0800498a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800498a:	b480      	push	{r7}
 800498c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800499c:	bf00      	nop
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049a6:	b480      	push	{r7}
 80049a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049aa:	bf00      	nop
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049b8:	f000 fa18 	bl	8004dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049bc:	bf00      	nop
 80049be:	bd80      	pop	{r7, pc}

080049c0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80049c4:	2002      	movs	r0, #2
 80049c6:	f001 fd17 	bl	80063f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}

080049ce <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80049d2:	2004      	movs	r0, #4
 80049d4:	f001 fd10 	bl	80063f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80049d8:	bf00      	nop
 80049da:	bd80      	pop	{r7, pc}

080049dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80049e0:	4802      	ldr	r0, [pc, #8]	; (80049ec <DMA1_Stream0_IRQHandler+0x10>)
 80049e2:	f001 f8cf 	bl	8005b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000480 	.word	0x20000480

080049f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80049f4:	4802      	ldr	r0, [pc, #8]	; (8004a00 <DMA1_Stream6_IRQHandler+0x10>)
 80049f6:	f001 f8c5 	bl	8005b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000824 	.word	0x20000824

08004a04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004a08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a0c:	f001 fcf4 	bl	80063f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a10:	bf00      	nop
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a18:	4803      	ldr	r0, [pc, #12]	; (8004a28 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004a1a:	f004 fd4d 	bl	80094b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004a1e:	4803      	ldr	r0, [pc, #12]	; (8004a2c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004a20:	f004 fd4a 	bl	80094b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004a24:	bf00      	nop
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	200004e0 	.word	0x200004e0
 8004a2c:	200006fc 	.word	0x200006fc

08004a30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a34:	4802      	ldr	r0, [pc, #8]	; (8004a40 <TIM3_IRQHandler+0x10>)
 8004a36:	f004 fd3f 	bl	80094b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000594 	.word	0x20000594

08004a44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004a48:	4802      	ldr	r0, [pc, #8]	; (8004a54 <I2C1_EV_IRQHandler+0x10>)
 8004a4a:	f001 ff85 	bl	8006958 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000042c 	.word	0x2000042c

08004a58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004a5c:	4802      	ldr	r0, [pc, #8]	; (8004a68 <I2C1_ER_IRQHandler+0x10>)
 8004a5e:	f002 f8ec 	bl	8006c3a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2000042c 	.word	0x2000042c

08004a6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a70:	4802      	ldr	r0, [pc, #8]	; (8004a7c <USART2_IRQHandler+0x10>)
 8004a72:	f006 f829 	bl	800aac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	200007b0 	.word	0x200007b0

08004a80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004a84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004a88:	f001 fcb6 	bl	80063f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004a8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004a90:	f001 fcb2 	bl	80063f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a94:	bf00      	nop
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a9c:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <TIM5_IRQHandler+0x10>)
 8004a9e:	f004 fd0b 	bl	80094b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000648 	.word	0x20000648

08004aac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ab0:	4802      	ldr	r0, [pc, #8]	; (8004abc <DMA2_Stream0_IRQHandler+0x10>)
 8004ab2:	f001 f867 	bl	8005b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200003cc 	.word	0x200003cc

08004ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <SystemInit+0x20>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	4a05      	ldr	r2, [pc, #20]	; (8004ae0 <SystemInit+0x20>)
 8004acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ad4:	bf00      	nop
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ae8:	480d      	ldr	r0, [pc, #52]	; (8004b20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004aea:	490e      	ldr	r1, [pc, #56]	; (8004b24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004aec:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004af0:	e002      	b.n	8004af8 <LoopCopyDataInit>

08004af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004af6:	3304      	adds	r3, #4

08004af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004afc:	d3f9      	bcc.n	8004af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004afe:	4a0b      	ldr	r2, [pc, #44]	; (8004b2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b00:	4c0b      	ldr	r4, [pc, #44]	; (8004b30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b04:	e001      	b.n	8004b0a <LoopFillZerobss>

08004b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b08:	3204      	adds	r2, #4

08004b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b0c:	d3fb      	bcc.n	8004b06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b0e:	f7ff ffd7 	bl	8004ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b12:	f007 f825 	bl	800bb60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b16:	f7fe fd7f 	bl	8003618 <main>
  bx  lr    
 8004b1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b24:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8004b28:	0800d830 	.word	0x0800d830
  ldr r2, =_sbss
 8004b2c:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8004b30:	20000fe0 	.word	0x20000fe0

08004b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b34:	e7fe      	b.n	8004b34 <ADC_IRQHandler>
	...

08004b38 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b08b      	sub	sp, #44	; 0x2c
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8004b42:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b46:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004c38 <arm_cos_f32+0x100>
 8004b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b4e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8004b52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b56:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8004b5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b62:	ee17 3a90 	vmov	r3, s15
 8004b66:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8004b68:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b74:	d502      	bpl.n	8004b7c <arm_cos_f32+0x44>
  {
    n--;
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b86:	ed97 7a06 	vldr	s14, [r7, #24]
 8004b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b8e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8004b92:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b96:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004c3c <arm_cos_f32+0x104>
 8004b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b9e:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8004ba2:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004baa:	ee17 3a90 	vmov	r3, s15
 8004bae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8004bb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb6:	d309      	bcc.n	8004bcc <arm_cos_f32+0x94>
    index = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8004bbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004bc0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004c3c <arm_cos_f32+0x104>
 8004bc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bc8:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8004bcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	ed97 7a07 	vldr	s14, [r7, #28]
 8004bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bde:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8004be2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004be4:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <arm_cos_f32+0x108>)
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8004bee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <arm_cos_f32+0x108>)
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8004bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c00:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c08:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c10:	edd7 6a05 	vldr	s13, [r7, #20]
 8004c14:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c20:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	ee07 3a90 	vmov	s15, r3
}
 8004c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c2e:	372c      	adds	r7, #44	; 0x2c
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	3e22f983 	.word	0x3e22f983
 8004c3c:	44000000 	.word	0x44000000
 8004c40:	0800cf70 	.word	0x0800cf70

08004c44 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b08b      	sub	sp, #44	; 0x2c
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8004c4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c52:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8004d3c <arm_sin_f32+0xf8>
 8004c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c5a:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8004c5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c66:	ee17 3a90 	vmov	r3, s15
 8004c6a:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8004c6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c78:	d502      	bpl.n	8004c80 <arm_sin_f32+0x3c>
  {
    n--;
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c8a:	ed97 7a06 	vldr	s14, [r7, #24]
 8004c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c92:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8004c96:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c9a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004d40 <arm_sin_f32+0xfc>
 8004c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ca2:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8004ca6:	edd7 7a07 	vldr	s15, [r7, #28]
 8004caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cae:	ee17 3a90 	vmov	r3, s15
 8004cb2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8004cb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cba:	d309      	bcc.n	8004cd0 <arm_sin_f32+0x8c>
    index = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8004cc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8004cc4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004d40 <arm_sin_f32+0xfc>
 8004cc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ccc:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8004cd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	ed97 7a07 	vldr	s14, [r7, #28]
 8004cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ce2:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8004ce6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ce8:	4a16      	ldr	r2, [pc, #88]	; (8004d44 <arm_sin_f32+0x100>)
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8004cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <arm_sin_f32+0x100>)
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8004d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d04:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d14:	edd7 6a05 	vldr	s13, [r7, #20]
 8004d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d24:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	ee07 3a90 	vmov	s15, r3
}
 8004d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d32:	372c      	adds	r7, #44	; 0x2c
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	3e22f983 	.word	0x3e22f983
 8004d40:	44000000 	.word	0x44000000
 8004d44:	0800cf70 	.word	0x0800cf70

08004d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <HAL_Init+0x40>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a0d      	ldr	r2, [pc, #52]	; (8004d88 <HAL_Init+0x40>)
 8004d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_Init+0x40>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <HAL_Init+0x40>)
 8004d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d64:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <HAL_Init+0x40>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a07      	ldr	r2, [pc, #28]	; (8004d88 <HAL_Init+0x40>)
 8004d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d70:	2003      	movs	r0, #3
 8004d72:	f000 fd2d 	bl	80057d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d76:	2000      	movs	r0, #0
 8004d78:	f000 f808 	bl	8004d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d7c:	f7ff fb5c 	bl	8004438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023c00 	.word	0x40023c00

08004d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d94:	4b12      	ldr	r3, [pc, #72]	; (8004de0 <HAL_InitTick+0x54>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <HAL_InitTick+0x58>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fd45 	bl	800583a <HAL_SYSTICK_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e00e      	b.n	8004dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b0f      	cmp	r3, #15
 8004dbe:	d80a      	bhi.n	8004dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	f000 fd0d 	bl	80057e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dcc:	4a06      	ldr	r2, [pc, #24]	; (8004de8 <HAL_InitTick+0x5c>)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e000      	b.n	8004dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	2000028c 	.word	0x2000028c
 8004de4:	20000294 	.word	0x20000294
 8004de8:	20000290 	.word	0x20000290

08004dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_IncTick+0x20>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_IncTick+0x24>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	4a04      	ldr	r2, [pc, #16]	; (8004e10 <HAL_IncTick+0x24>)
 8004dfe:	6013      	str	r3, [r2, #0]
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000294 	.word	0x20000294
 8004e10:	20000fdc 	.word	0x20000fdc

08004e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return uwTick;
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <HAL_GetTick+0x14>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000fdc 	.word	0x20000fdc

08004e2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e033      	b.n	8004eaa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d109      	bne.n	8004e5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff fb1c 	bl	8004488 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f003 0310 	and.w	r3, r3, #16
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d118      	bne.n	8004e9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e72:	f023 0302 	bic.w	r3, r3, #2
 8004e76:	f043 0202 	orr.w	r2, r3, #2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fa58 	bl	8005334 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	f043 0201 	orr.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
 8004e9a:	e001      	b.n	8004ea0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_ADC_Start_DMA+0x1e>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e0ce      	b.n	8005070 <HAL_ADC_Start_DMA+0x1bc>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d018      	beq.n	8004f1a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ef8:	4b5f      	ldr	r3, [pc, #380]	; (8005078 <HAL_ADC_Start_DMA+0x1c4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a5f      	ldr	r2, [pc, #380]	; (800507c <HAL_ADC_Start_DMA+0x1c8>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	0c9a      	lsrs	r2, r3, #18
 8004f04:	4613      	mov	r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	4413      	add	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004f0c:	e002      	b.n	8004f14 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f9      	bne.n	8004f0e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f28:	d107      	bne.n	8004f3a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f38:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	f040 8086 	bne.w	8005056 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f88:	d106      	bne.n	8004f98 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8e:	f023 0206 	bic.w	r2, r3, #6
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	645a      	str	r2, [r3, #68]	; 0x44
 8004f96:	e002      	b.n	8004f9e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fa6:	4b36      	ldr	r3, [pc, #216]	; (8005080 <HAL_ADC_Start_DMA+0x1cc>)
 8004fa8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	4a35      	ldr	r2, [pc, #212]	; (8005084 <HAL_ADC_Start_DMA+0x1d0>)
 8004fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	4a34      	ldr	r2, [pc, #208]	; (8005088 <HAL_ADC_Start_DMA+0x1d4>)
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	4a33      	ldr	r2, [pc, #204]	; (800508c <HAL_ADC_Start_DMA+0x1d8>)
 8004fc0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004fca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004fda:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	334c      	adds	r3, #76	; 0x4c
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f000 fcd8 	bl	80059b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10f      	bne.n	800502c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d129      	bne.n	800506e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005028:	609a      	str	r2, [r3, #8]
 800502a:	e020      	b.n	800506e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a17      	ldr	r2, [pc, #92]	; (8005090 <HAL_ADC_Start_DMA+0x1dc>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d11b      	bne.n	800506e <HAL_ADC_Start_DMA+0x1ba>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d114      	bne.n	800506e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	e00b      	b.n	800506e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f043 0210 	orr.w	r2, r3, #16
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	f043 0201 	orr.w	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	2000028c 	.word	0x2000028c
 800507c:	431bde83 	.word	0x431bde83
 8005080:	40012300 	.word	0x40012300
 8005084:	0800552d 	.word	0x0800552d
 8005088:	080055e7 	.word	0x080055e7
 800508c:	08005603 	.word	0x08005603
 8005090:	40012000 	.word	0x40012000

08005094 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x1c>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e113      	b.n	8005314 <HAL_ADC_ConfigChannel+0x244>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b09      	cmp	r3, #9
 80050fa:	d925      	bls.n	8005148 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68d9      	ldr	r1, [r3, #12]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	4613      	mov	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4413      	add	r3, r2
 8005110:	3b1e      	subs	r3, #30
 8005112:	2207      	movs	r2, #7
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43da      	mvns	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	400a      	ands	r2, r1
 8005120:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68d9      	ldr	r1, [r3, #12]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	b29b      	uxth	r3, r3
 8005132:	4618      	mov	r0, r3
 8005134:	4603      	mov	r3, r0
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	4403      	add	r3, r0
 800513a:	3b1e      	subs	r3, #30
 800513c:	409a      	lsls	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	60da      	str	r2, [r3, #12]
 8005146:	e022      	b.n	800518e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6919      	ldr	r1, [r3, #16]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	4613      	mov	r3, r2
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	4413      	add	r3, r2
 800515c:	2207      	movs	r2, #7
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43da      	mvns	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	400a      	ands	r2, r1
 800516a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6919      	ldr	r1, [r3, #16]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	4618      	mov	r0, r3
 800517e:	4603      	mov	r3, r0
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	4403      	add	r3, r0
 8005184:	409a      	lsls	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b06      	cmp	r3, #6
 8005194:	d824      	bhi.n	80051e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	3b05      	subs	r3, #5
 80051a8:	221f      	movs	r2, #31
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43da      	mvns	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	400a      	ands	r2, r1
 80051b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	4618      	mov	r0, r3
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	3b05      	subs	r3, #5
 80051d2:	fa00 f203 	lsl.w	r2, r0, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	635a      	str	r2, [r3, #52]	; 0x34
 80051de:	e04c      	b.n	800527a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b0c      	cmp	r3, #12
 80051e6:	d824      	bhi.n	8005232 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	3b23      	subs	r3, #35	; 0x23
 80051fa:	221f      	movs	r2, #31
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	43da      	mvns	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	400a      	ands	r2, r1
 8005208:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	4618      	mov	r0, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	3b23      	subs	r3, #35	; 0x23
 8005224:	fa00 f203 	lsl.w	r2, r0, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
 8005230:	e023      	b.n	800527a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	3b41      	subs	r3, #65	; 0x41
 8005244:	221f      	movs	r2, #31
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43da      	mvns	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	400a      	ands	r2, r1
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	4618      	mov	r0, r3
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	3b41      	subs	r3, #65	; 0x41
 800526e:	fa00 f203 	lsl.w	r2, r0, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800527a:	4b29      	ldr	r3, [pc, #164]	; (8005320 <HAL_ADC_ConfigChannel+0x250>)
 800527c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a28      	ldr	r2, [pc, #160]	; (8005324 <HAL_ADC_ConfigChannel+0x254>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d10f      	bne.n	80052a8 <HAL_ADC_ConfigChannel+0x1d8>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b12      	cmp	r3, #18
 800528e:	d10b      	bne.n	80052a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1d      	ldr	r2, [pc, #116]	; (8005324 <HAL_ADC_ConfigChannel+0x254>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d12b      	bne.n	800530a <HAL_ADC_ConfigChannel+0x23a>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1c      	ldr	r2, [pc, #112]	; (8005328 <HAL_ADC_ConfigChannel+0x258>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <HAL_ADC_ConfigChannel+0x1f4>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b11      	cmp	r3, #17
 80052c2:	d122      	bne.n	800530a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a11      	ldr	r2, [pc, #68]	; (8005328 <HAL_ADC_ConfigChannel+0x258>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d111      	bne.n	800530a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052e6:	4b11      	ldr	r3, [pc, #68]	; (800532c <HAL_ADC_ConfigChannel+0x25c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a11      	ldr	r2, [pc, #68]	; (8005330 <HAL_ADC_ConfigChannel+0x260>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	0c9a      	lsrs	r2, r3, #18
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80052fc:	e002      	b.n	8005304 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	3b01      	subs	r3, #1
 8005302:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f9      	bne.n	80052fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40012300 	.word	0x40012300
 8005324:	40012000 	.word	0x40012000
 8005328:	10000012 	.word	0x10000012
 800532c:	2000028c 	.word	0x2000028c
 8005330:	431bde83 	.word	0x431bde83

08005334 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800533c:	4b79      	ldr	r3, [pc, #484]	; (8005524 <ADC_Init+0x1f0>)
 800533e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	431a      	orrs	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005368:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6859      	ldr	r1, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	021a      	lsls	r2, r3, #8
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800538c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6859      	ldr	r1, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6899      	ldr	r1, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	4a58      	ldr	r2, [pc, #352]	; (8005528 <ADC_Init+0x1f4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d022      	beq.n	8005412 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6899      	ldr	r1, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6899      	ldr	r1, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	609a      	str	r2, [r3, #8]
 8005410:	e00f      	b.n	8005432 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005420:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005430:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0202 	bic.w	r2, r2, #2
 8005440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6899      	ldr	r1, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	7e1b      	ldrb	r3, [r3, #24]
 800544c:	005a      	lsls	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01b      	beq.n	8005498 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800546e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800547e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6859      	ldr	r1, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	3b01      	subs	r3, #1
 800548c:	035a      	lsls	r2, r3, #13
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
 8005496:	e007      	b.n	80054a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80054b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	051a      	lsls	r2, r3, #20
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6899      	ldr	r1, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054ea:	025a      	lsls	r2, r3, #9
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6899      	ldr	r1, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	029a      	lsls	r2, r3, #10
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	40012300 	.word	0x40012300
 8005528:	0f000001 	.word	0x0f000001

0800552c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005542:	2b00      	cmp	r3, #0
 8005544:	d13c      	bne.n	80055c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d12b      	bne.n	80055b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005564:	2b00      	cmp	r3, #0
 8005566:	d127      	bne.n	80055b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005572:	2b00      	cmp	r3, #0
 8005574:	d006      	beq.n	8005584 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005580:	2b00      	cmp	r3, #0
 8005582:	d119      	bne.n	80055b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0220 	bic.w	r2, r2, #32
 8005592:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d105      	bne.n	80055b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	f043 0201 	orr.w	r2, r3, #1
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff fd6b 	bl	8005094 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80055be:	e00e      	b.n	80055de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff fd75 	bl	80050bc <HAL_ADC_ErrorCallback>
}
 80055d2:	e004      	b.n	80055de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	4798      	blx	r3
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f7ff fd57 	bl	80050a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2240      	movs	r2, #64	; 0x40
 8005614:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	f043 0204 	orr.w	r2, r3, #4
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f7ff fd4a 	bl	80050bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005640:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <__NVIC_SetPriorityGrouping+0x44>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800564c:	4013      	ands	r3, r2
 800564e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800565c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005662:	4a04      	ldr	r2, [pc, #16]	; (8005674 <__NVIC_SetPriorityGrouping+0x44>)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	60d3      	str	r3, [r2, #12]
}
 8005668:	bf00      	nop
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	e000ed00 	.word	0xe000ed00

08005678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <__NVIC_GetPriorityGrouping+0x18>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	f003 0307 	and.w	r3, r3, #7
}
 8005686:	4618      	mov	r0, r3
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	e000ed00 	.word	0xe000ed00

08005694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800569e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	db0b      	blt.n	80056be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	f003 021f 	and.w	r2, r3, #31
 80056ac:	4907      	ldr	r1, [pc, #28]	; (80056cc <__NVIC_EnableIRQ+0x38>)
 80056ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	2001      	movs	r0, #1
 80056b6:	fa00 f202 	lsl.w	r2, r0, r2
 80056ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	e000e100 	.word	0xe000e100

080056d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	6039      	str	r1, [r7, #0]
 80056da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	db0a      	blt.n	80056fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	490c      	ldr	r1, [pc, #48]	; (800571c <__NVIC_SetPriority+0x4c>)
 80056ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ee:	0112      	lsls	r2, r2, #4
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	440b      	add	r3, r1
 80056f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056f8:	e00a      	b.n	8005710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	4908      	ldr	r1, [pc, #32]	; (8005720 <__NVIC_SetPriority+0x50>)
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	3b04      	subs	r3, #4
 8005708:	0112      	lsls	r2, r2, #4
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	440b      	add	r3, r1
 800570e:	761a      	strb	r2, [r3, #24]
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	e000e100 	.word	0xe000e100
 8005720:	e000ed00 	.word	0xe000ed00

08005724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005724:	b480      	push	{r7}
 8005726:	b089      	sub	sp, #36	; 0x24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f1c3 0307 	rsb	r3, r3, #7
 800573e:	2b04      	cmp	r3, #4
 8005740:	bf28      	it	cs
 8005742:	2304      	movcs	r3, #4
 8005744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	3304      	adds	r3, #4
 800574a:	2b06      	cmp	r3, #6
 800574c:	d902      	bls.n	8005754 <NVIC_EncodePriority+0x30>
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	3b03      	subs	r3, #3
 8005752:	e000      	b.n	8005756 <NVIC_EncodePriority+0x32>
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005758:	f04f 32ff 	mov.w	r2, #4294967295
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	43da      	mvns	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	401a      	ands	r2, r3
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800576c:	f04f 31ff 	mov.w	r1, #4294967295
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	fa01 f303 	lsl.w	r3, r1, r3
 8005776:	43d9      	mvns	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800577c:	4313      	orrs	r3, r2
         );
}
 800577e:	4618      	mov	r0, r3
 8005780:	3724      	adds	r7, #36	; 0x24
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3b01      	subs	r3, #1
 8005798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800579c:	d301      	bcc.n	80057a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800579e:	2301      	movs	r3, #1
 80057a0:	e00f      	b.n	80057c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057a2:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <SysTick_Config+0x40>)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057aa:	210f      	movs	r1, #15
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	f7ff ff8e 	bl	80056d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <SysTick_Config+0x40>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ba:	4b04      	ldr	r3, [pc, #16]	; (80057cc <SysTick_Config+0x40>)
 80057bc:	2207      	movs	r2, #7
 80057be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	e000e010 	.word	0xe000e010

080057d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff ff29 	bl	8005630 <__NVIC_SetPriorityGrouping>
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b086      	sub	sp, #24
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	4603      	mov	r3, r0
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057f8:	f7ff ff3e 	bl	8005678 <__NVIC_GetPriorityGrouping>
 80057fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	6978      	ldr	r0, [r7, #20]
 8005804:	f7ff ff8e 	bl	8005724 <NVIC_EncodePriority>
 8005808:	4602      	mov	r2, r0
 800580a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580e:	4611      	mov	r1, r2
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff ff5d 	bl	80056d0 <__NVIC_SetPriority>
}
 8005816:	bf00      	nop
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	4603      	mov	r3, r0
 8005826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff ff31 	bl	8005694 <__NVIC_EnableIRQ>
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff ffa2 	bl	800578c <SysTick_Config>
 8005848:	4603      	mov	r3, r0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005860:	f7ff fad8 	bl	8004e14 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e099      	b.n	80059a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0201 	bic.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005890:	e00f      	b.n	80058b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005892:	f7ff fabf 	bl	8004e14 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b05      	cmp	r3, #5
 800589e:	d908      	bls.n	80058b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2203      	movs	r2, #3
 80058aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e078      	b.n	80059a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e8      	bne.n	8005892 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4b38      	ldr	r3, [pc, #224]	; (80059ac <HAL_DMA_Init+0x158>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	2b04      	cmp	r3, #4
 800590a:	d107      	bne.n	800591c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	4313      	orrs	r3, r2
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f023 0307 	bic.w	r3, r3, #7
 8005932:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	2b04      	cmp	r3, #4
 8005944:	d117      	bne.n	8005976 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00e      	beq.n	8005976 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fb1b 	bl	8005f94 <DMA_CheckFifoParam>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2240      	movs	r2, #64	; 0x40
 8005968:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005972:	2301      	movs	r3, #1
 8005974:	e016      	b.n	80059a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fad2 	bl	8005f28 <DMA_CalcBaseAndBitshift>
 8005984:	4603      	mov	r3, r0
 8005986:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598c:	223f      	movs	r2, #63	; 0x3f
 800598e:	409a      	lsls	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	f010803f 	.word	0xf010803f

080059b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_DMA_Start_IT+0x26>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e040      	b.n	8005a58 <HAL_DMA_Start_IT+0xa8>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d12f      	bne.n	8005a4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fa64 	bl	8005ecc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a08:	223f      	movs	r2, #63	; 0x3f
 8005a0a:	409a      	lsls	r2, r3
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0216 	orr.w	r2, r2, #22
 8005a1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d007      	beq.n	8005a38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0208 	orr.w	r2, r2, #8
 8005a36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	e005      	b.n	8005a56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a52:	2302      	movs	r3, #2
 8005a54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a6e:	f7ff f9d1 	bl	8004e14 <HAL_GetTick>
 8005a72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d008      	beq.n	8005a92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2280      	movs	r2, #128	; 0x80
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e052      	b.n	8005b38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0216 	bic.w	r2, r2, #22
 8005aa0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ab0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d103      	bne.n	8005ac2 <HAL_DMA_Abort+0x62>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0208 	bic.w	r2, r2, #8
 8005ad0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ae2:	e013      	b.n	8005b0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ae4:	f7ff f996 	bl	8004e14 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	d90c      	bls.n	8005b0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2203      	movs	r2, #3
 8005afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e015      	b.n	8005b38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e4      	bne.n	8005ae4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1e:	223f      	movs	r2, #63	; 0x3f
 8005b20:	409a      	lsls	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d004      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2280      	movs	r2, #128	; 0x80
 8005b58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e00c      	b.n	8005b78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2205      	movs	r2, #5
 8005b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0201 	bic.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b90:	4b8e      	ldr	r3, [pc, #568]	; (8005dcc <HAL_DMA_IRQHandler+0x248>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a8e      	ldr	r2, [pc, #568]	; (8005dd0 <HAL_DMA_IRQHandler+0x24c>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	0a9b      	lsrs	r3, r3, #10
 8005b9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bae:	2208      	movs	r2, #8
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01a      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d013      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0204 	bic.w	r2, r2, #4
 8005bd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bdc:	2208      	movs	r2, #8
 8005bde:	409a      	lsls	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	409a      	lsls	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d012      	beq.n	8005c26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c12:	2201      	movs	r2, #1
 8005c14:	409a      	lsls	r2, r3
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	f043 0202 	orr.w	r2, r3, #2
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d012      	beq.n	8005c5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c48:	2204      	movs	r2, #4
 8005c4a:	409a      	lsls	r2, r3
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c54:	f043 0204 	orr.w	r2, r3, #4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c60:	2210      	movs	r2, #16
 8005c62:	409a      	lsls	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d043      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d03c      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7e:	2210      	movs	r2, #16
 8005c80:	409a      	lsls	r2, r3
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d018      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d108      	bne.n	8005cb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d024      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4798      	blx	r3
 8005cb2:	e01f      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01b      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
 8005cc4:	e016      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d107      	bne.n	8005ce4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0208 	bic.w	r2, r2, #8
 8005ce2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 808f 	beq.w	8005e24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8087 	beq.w	8005e24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	409a      	lsls	r2, r3
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b05      	cmp	r3, #5
 8005d2c:	d136      	bne.n	8005d9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0216 	bic.w	r2, r2, #22
 8005d3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <HAL_DMA_IRQHandler+0x1da>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0208 	bic.w	r2, r2, #8
 8005d6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d72:	223f      	movs	r2, #63	; 0x3f
 8005d74:	409a      	lsls	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d07e      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
        }
        return;
 8005d9a:	e079      	b.n	8005e90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01d      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10d      	bne.n	8005dd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d031      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
 8005dc8:	e02c      	b.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
 8005dca:	bf00      	nop
 8005dcc:	2000028c 	.word	0x2000028c
 8005dd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d023      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4798      	blx	r3
 8005de4:	e01e      	b.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10f      	bne.n	8005e14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0210 	bic.w	r2, r2, #16
 8005e02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d032      	beq.n	8005e92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d022      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2205      	movs	r2, #5
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0201 	bic.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3301      	adds	r3, #1
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d307      	bcc.n	8005e6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f2      	bne.n	8005e50 <HAL_DMA_IRQHandler+0x2cc>
 8005e6a:	e000      	b.n	8005e6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
 8005e8e:	e000      	b.n	8005e92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e90:	bf00      	nop
    }
  }
}
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ea6:	b2db      	uxtb	r3, r3
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ee8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b40      	cmp	r3, #64	; 0x40
 8005ef8:	d108      	bne.n	8005f0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005f0a:	e007      	b.n	8005f1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	60da      	str	r2, [r3, #12]
}
 8005f1c:	bf00      	nop
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	3b10      	subs	r3, #16
 8005f38:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <DMA_CalcBaseAndBitshift+0x64>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	091b      	lsrs	r3, r3, #4
 8005f40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f42:	4a13      	ldr	r2, [pc, #76]	; (8005f90 <DMA_CalcBaseAndBitshift+0x68>)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d909      	bls.n	8005f6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f5e:	f023 0303 	bic.w	r3, r3, #3
 8005f62:	1d1a      	adds	r2, r3, #4
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	659a      	str	r2, [r3, #88]	; 0x58
 8005f68:	e007      	b.n	8005f7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f72:	f023 0303 	bic.w	r3, r3, #3
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	aaaaaaab 	.word	0xaaaaaaab
 8005f90:	0800d774 	.word	0x0800d774

08005f94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d11f      	bne.n	8005fee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d856      	bhi.n	8006062 <DMA_CheckFifoParam+0xce>
 8005fb4:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <DMA_CheckFifoParam+0x28>)
 8005fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fba:	bf00      	nop
 8005fbc:	08005fcd 	.word	0x08005fcd
 8005fc0:	08005fdf 	.word	0x08005fdf
 8005fc4:	08005fcd 	.word	0x08005fcd
 8005fc8:	08006063 	.word	0x08006063
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d046      	beq.n	8006066 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fdc:	e043      	b.n	8006066 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fe6:	d140      	bne.n	800606a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fec:	e03d      	b.n	800606a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff6:	d121      	bne.n	800603c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d837      	bhi.n	800606e <DMA_CheckFifoParam+0xda>
 8005ffe:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <DMA_CheckFifoParam+0x70>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006015 	.word	0x08006015
 8006008:	0800601b 	.word	0x0800601b
 800600c:	08006015 	.word	0x08006015
 8006010:	0800602d 	.word	0x0800602d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
      break;
 8006018:	e030      	b.n	800607c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d025      	beq.n	8006072 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800602a:	e022      	b.n	8006072 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006034:	d11f      	bne.n	8006076 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800603a:	e01c      	b.n	8006076 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b02      	cmp	r3, #2
 8006040:	d903      	bls.n	800604a <DMA_CheckFifoParam+0xb6>
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b03      	cmp	r3, #3
 8006046:	d003      	beq.n	8006050 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006048:	e018      	b.n	800607c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
      break;
 800604e:	e015      	b.n	800607c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00e      	beq.n	800607a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
      break;
 8006060:	e00b      	b.n	800607a <DMA_CheckFifoParam+0xe6>
      break;
 8006062:	bf00      	nop
 8006064:	e00a      	b.n	800607c <DMA_CheckFifoParam+0xe8>
      break;
 8006066:	bf00      	nop
 8006068:	e008      	b.n	800607c <DMA_CheckFifoParam+0xe8>
      break;
 800606a:	bf00      	nop
 800606c:	e006      	b.n	800607c <DMA_CheckFifoParam+0xe8>
      break;
 800606e:	bf00      	nop
 8006070:	e004      	b.n	800607c <DMA_CheckFifoParam+0xe8>
      break;
 8006072:	bf00      	nop
 8006074:	e002      	b.n	800607c <DMA_CheckFifoParam+0xe8>
      break;   
 8006076:	bf00      	nop
 8006078:	e000      	b.n	800607c <DMA_CheckFifoParam+0xe8>
      break;
 800607a:	bf00      	nop
    }
  } 
  
  return status; 
 800607c:	7bfb      	ldrb	r3, [r7, #15]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop

0800608c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800608c:	b480      	push	{r7}
 800608e:	b089      	sub	sp, #36	; 0x24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800609e:	2300      	movs	r3, #0
 80060a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	e159      	b.n	800635c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060a8:	2201      	movs	r2, #1
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4013      	ands	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	f040 8148 	bne.w	8006356 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d005      	beq.n	80060de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d130      	bne.n	8006140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	2203      	movs	r2, #3
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	43db      	mvns	r3, r3
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4013      	ands	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	4313      	orrs	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006114:	2201      	movs	r2, #1
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	43db      	mvns	r3, r3
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	4013      	ands	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 0201 	and.w	r2, r3, #1
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	4313      	orrs	r3, r2
 8006138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f003 0303 	and.w	r3, r3, #3
 8006148:	2b03      	cmp	r3, #3
 800614a:	d017      	beq.n	800617c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	2203      	movs	r2, #3
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	43db      	mvns	r3, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4013      	ands	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	4313      	orrs	r3, r2
 8006174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f003 0303 	and.w	r3, r3, #3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d123      	bne.n	80061d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	08da      	lsrs	r2, r3, #3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3208      	adds	r2, #8
 8006190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	220f      	movs	r2, #15
 80061a0:	fa02 f303 	lsl.w	r3, r2, r3
 80061a4:	43db      	mvns	r3, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4013      	ands	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4313      	orrs	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	08da      	lsrs	r2, r3, #3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3208      	adds	r2, #8
 80061ca:	69b9      	ldr	r1, [r7, #24]
 80061cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	2203      	movs	r2, #3
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	43db      	mvns	r3, r3
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	4013      	ands	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f003 0203 	and.w	r2, r3, #3
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 80a2 	beq.w	8006356 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	4b57      	ldr	r3, [pc, #348]	; (8006374 <HAL_GPIO_Init+0x2e8>)
 8006218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621a:	4a56      	ldr	r2, [pc, #344]	; (8006374 <HAL_GPIO_Init+0x2e8>)
 800621c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006220:	6453      	str	r3, [r2, #68]	; 0x44
 8006222:	4b54      	ldr	r3, [pc, #336]	; (8006374 <HAL_GPIO_Init+0x2e8>)
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800622e:	4a52      	ldr	r2, [pc, #328]	; (8006378 <HAL_GPIO_Init+0x2ec>)
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	089b      	lsrs	r3, r3, #2
 8006234:	3302      	adds	r3, #2
 8006236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800623a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	220f      	movs	r2, #15
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	43db      	mvns	r3, r3
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	4013      	ands	r3, r2
 8006250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a49      	ldr	r2, [pc, #292]	; (800637c <HAL_GPIO_Init+0x2f0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d019      	beq.n	800628e <HAL_GPIO_Init+0x202>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a48      	ldr	r2, [pc, #288]	; (8006380 <HAL_GPIO_Init+0x2f4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d013      	beq.n	800628a <HAL_GPIO_Init+0x1fe>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a47      	ldr	r2, [pc, #284]	; (8006384 <HAL_GPIO_Init+0x2f8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00d      	beq.n	8006286 <HAL_GPIO_Init+0x1fa>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a46      	ldr	r2, [pc, #280]	; (8006388 <HAL_GPIO_Init+0x2fc>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <HAL_GPIO_Init+0x1f6>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a45      	ldr	r2, [pc, #276]	; (800638c <HAL_GPIO_Init+0x300>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d101      	bne.n	800627e <HAL_GPIO_Init+0x1f2>
 800627a:	2304      	movs	r3, #4
 800627c:	e008      	b.n	8006290 <HAL_GPIO_Init+0x204>
 800627e:	2307      	movs	r3, #7
 8006280:	e006      	b.n	8006290 <HAL_GPIO_Init+0x204>
 8006282:	2303      	movs	r3, #3
 8006284:	e004      	b.n	8006290 <HAL_GPIO_Init+0x204>
 8006286:	2302      	movs	r3, #2
 8006288:	e002      	b.n	8006290 <HAL_GPIO_Init+0x204>
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <HAL_GPIO_Init+0x204>
 800628e:	2300      	movs	r3, #0
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	f002 0203 	and.w	r2, r2, #3
 8006296:	0092      	lsls	r2, r2, #2
 8006298:	4093      	lsls	r3, r2
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4313      	orrs	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062a0:	4935      	ldr	r1, [pc, #212]	; (8006378 <HAL_GPIO_Init+0x2ec>)
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	089b      	lsrs	r3, r3, #2
 80062a6:	3302      	adds	r3, #2
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062ae:	4b38      	ldr	r3, [pc, #224]	; (8006390 <HAL_GPIO_Init+0x304>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	43db      	mvns	r3, r3
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	4013      	ands	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062d2:	4a2f      	ldr	r2, [pc, #188]	; (8006390 <HAL_GPIO_Init+0x304>)
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062d8:	4b2d      	ldr	r3, [pc, #180]	; (8006390 <HAL_GPIO_Init+0x304>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	43db      	mvns	r3, r3
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	4013      	ands	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062fc:	4a24      	ldr	r2, [pc, #144]	; (8006390 <HAL_GPIO_Init+0x304>)
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006302:	4b23      	ldr	r3, [pc, #140]	; (8006390 <HAL_GPIO_Init+0x304>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	43db      	mvns	r3, r3
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	4013      	ands	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006326:	4a1a      	ldr	r2, [pc, #104]	; (8006390 <HAL_GPIO_Init+0x304>)
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800632c:	4b18      	ldr	r3, [pc, #96]	; (8006390 <HAL_GPIO_Init+0x304>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	43db      	mvns	r3, r3
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4013      	ands	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006350:	4a0f      	ldr	r2, [pc, #60]	; (8006390 <HAL_GPIO_Init+0x304>)
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	3301      	adds	r3, #1
 800635a:	61fb      	str	r3, [r7, #28]
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b0f      	cmp	r3, #15
 8006360:	f67f aea2 	bls.w	80060a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop
 8006368:	3724      	adds	r7, #36	; 0x24
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	40023800 	.word	0x40023800
 8006378:	40013800 	.word	0x40013800
 800637c:	40020000 	.word	0x40020000
 8006380:	40020400 	.word	0x40020400
 8006384:	40020800 	.word	0x40020800
 8006388:	40020c00 	.word	0x40020c00
 800638c:	40021000 	.word	0x40021000
 8006390:	40013c00 	.word	0x40013c00

08006394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691a      	ldr	r2, [r3, #16]
 80063a4:	887b      	ldrh	r3, [r7, #2]
 80063a6:	4013      	ands	r3, r2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063ac:	2301      	movs	r3, #1
 80063ae:	73fb      	strb	r3, [r7, #15]
 80063b0:	e001      	b.n	80063b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	807b      	strh	r3, [r7, #2]
 80063d0:	4613      	mov	r3, r2
 80063d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063d4:	787b      	ldrb	r3, [r7, #1]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063da:	887a      	ldrh	r2, [r7, #2]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063e0:	e003      	b.n	80063ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063e2:	887b      	ldrh	r3, [r7, #2]
 80063e4:	041a      	lsls	r2, r3, #16
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	619a      	str	r2, [r3, #24]
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	4603      	mov	r3, r0
 8006400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006402:	4b08      	ldr	r3, [pc, #32]	; (8006424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006404:	695a      	ldr	r2, [r3, #20]
 8006406:	88fb      	ldrh	r3, [r7, #6]
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d006      	beq.n	800641c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800640e:	4a05      	ldr	r2, [pc, #20]	; (8006424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006410:	88fb      	ldrh	r3, [r7, #6]
 8006412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006414:	88fb      	ldrh	r3, [r7, #6]
 8006416:	4618      	mov	r0, r3
 8006418:	f7fb fd24 	bl	8001e64 <HAL_GPIO_EXTI_Callback>
  }
}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40013c00 	.word	0x40013c00

08006428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e12b      	b.n	8006692 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fe f892 	bl	8004578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2224      	movs	r2, #36	; 0x24
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800647a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800648a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800648c:	f002 fbb0 	bl	8008bf0 <HAL_RCC_GetPCLK1Freq>
 8006490:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4a81      	ldr	r2, [pc, #516]	; (800669c <HAL_I2C_Init+0x274>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d807      	bhi.n	80064ac <HAL_I2C_Init+0x84>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4a80      	ldr	r2, [pc, #512]	; (80066a0 <HAL_I2C_Init+0x278>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	bf94      	ite	ls
 80064a4:	2301      	movls	r3, #1
 80064a6:	2300      	movhi	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e006      	b.n	80064ba <HAL_I2C_Init+0x92>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a7d      	ldr	r2, [pc, #500]	; (80066a4 <HAL_I2C_Init+0x27c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	bf94      	ite	ls
 80064b4:	2301      	movls	r3, #1
 80064b6:	2300      	movhi	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e0e7      	b.n	8006692 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a78      	ldr	r2, [pc, #480]	; (80066a8 <HAL_I2C_Init+0x280>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	0c9b      	lsrs	r3, r3, #18
 80064cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	4a6a      	ldr	r2, [pc, #424]	; (800669c <HAL_I2C_Init+0x274>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d802      	bhi.n	80064fc <HAL_I2C_Init+0xd4>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	3301      	adds	r3, #1
 80064fa:	e009      	b.n	8006510 <HAL_I2C_Init+0xe8>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	4a69      	ldr	r2, [pc, #420]	; (80066ac <HAL_I2C_Init+0x284>)
 8006508:	fba2 2303 	umull	r2, r3, r2, r3
 800650c:	099b      	lsrs	r3, r3, #6
 800650e:	3301      	adds	r3, #1
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	430b      	orrs	r3, r1
 8006516:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006522:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	495c      	ldr	r1, [pc, #368]	; (800669c <HAL_I2C_Init+0x274>)
 800652c:	428b      	cmp	r3, r1
 800652e:	d819      	bhi.n	8006564 <HAL_I2C_Init+0x13c>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	1e59      	subs	r1, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	fbb1 f3f3 	udiv	r3, r1, r3
 800653e:	1c59      	adds	r1, r3, #1
 8006540:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006544:	400b      	ands	r3, r1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <HAL_I2C_Init+0x138>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1e59      	subs	r1, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	fbb1 f3f3 	udiv	r3, r1, r3
 8006558:	3301      	adds	r3, #1
 800655a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800655e:	e051      	b.n	8006604 <HAL_I2C_Init+0x1dc>
 8006560:	2304      	movs	r3, #4
 8006562:	e04f      	b.n	8006604 <HAL_I2C_Init+0x1dc>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d111      	bne.n	8006590 <HAL_I2C_Init+0x168>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	1e58      	subs	r0, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6859      	ldr	r1, [r3, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	440b      	add	r3, r1
 800657a:	fbb0 f3f3 	udiv	r3, r0, r3
 800657e:	3301      	adds	r3, #1
 8006580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006584:	2b00      	cmp	r3, #0
 8006586:	bf0c      	ite	eq
 8006588:	2301      	moveq	r3, #1
 800658a:	2300      	movne	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	e012      	b.n	80065b6 <HAL_I2C_Init+0x18e>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	1e58      	subs	r0, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6859      	ldr	r1, [r3, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	0099      	lsls	r1, r3, #2
 80065a0:	440b      	add	r3, r1
 80065a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065a6:	3301      	adds	r3, #1
 80065a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bf0c      	ite	eq
 80065b0:	2301      	moveq	r3, #1
 80065b2:	2300      	movne	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_I2C_Init+0x196>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e022      	b.n	8006604 <HAL_I2C_Init+0x1dc>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10e      	bne.n	80065e4 <HAL_I2C_Init+0x1bc>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1e58      	subs	r0, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6859      	ldr	r1, [r3, #4]
 80065ce:	460b      	mov	r3, r1
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	440b      	add	r3, r1
 80065d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80065d8:	3301      	adds	r3, #1
 80065da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e2:	e00f      	b.n	8006604 <HAL_I2C_Init+0x1dc>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	1e58      	subs	r0, r3, #1
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6859      	ldr	r1, [r3, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	0099      	lsls	r1, r3, #2
 80065f4:	440b      	add	r3, r1
 80065f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80065fa:	3301      	adds	r3, #1
 80065fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	6809      	ldr	r1, [r1, #0]
 8006608:	4313      	orrs	r3, r2
 800660a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69da      	ldr	r2, [r3, #28]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6911      	ldr	r1, [r2, #16]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	68d2      	ldr	r2, [r2, #12]
 800663e:	4311      	orrs	r1, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	430b      	orrs	r3, r1
 8006646:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695a      	ldr	r2, [r3, #20]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	000186a0 	.word	0x000186a0
 80066a0:	001e847f 	.word	0x001e847f
 80066a4:	003d08ff 	.word	0x003d08ff
 80066a8:	431bde83 	.word	0x431bde83
 80066ac:	10624dd3 	.word	0x10624dd3

080066b0 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	607a      	str	r2, [r7, #4]
 80066ba:	461a      	mov	r2, r3
 80066bc:	460b      	mov	r3, r1
 80066be:	817b      	strh	r3, [r7, #10]
 80066c0:	4613      	mov	r3, r2
 80066c2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	f040 8085 	bne.w	80067e0 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80066d6:	4b46      	ldr	r3, [pc, #280]	; (80067f0 <HAL_I2C_Master_Transmit_IT+0x140>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	08db      	lsrs	r3, r3, #3
 80066dc:	4a45      	ldr	r2, [pc, #276]	; (80067f4 <HAL_I2C_Master_Transmit_IT+0x144>)
 80066de:	fba2 2303 	umull	r2, r3, r2, r3
 80066e2:	0a1a      	lsrs	r2, r3, #8
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	009a      	lsls	r2, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d116      	bne.n	800672a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	f043 0220 	orr.w	r2, r3, #32
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e05b      	b.n	80067e2 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b02      	cmp	r3, #2
 8006736:	d0db      	beq.n	80066f0 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_I2C_Master_Transmit_IT+0x96>
 8006742:	2302      	movs	r3, #2
 8006744:	e04d      	b.n	80067e2 <HAL_I2C_Master_Transmit_IT+0x132>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b01      	cmp	r3, #1
 800675a:	d007      	beq.n	800676c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0201 	orr.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800677a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2221      	movs	r2, #33	; 0x21
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2210      	movs	r2, #16
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	893a      	ldrh	r2, [r7, #8]
 800679c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4a13      	ldr	r2, [pc, #76]	; (80067f8 <HAL_I2C_Master_Transmit_IT+0x148>)
 80067ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80067ae:	897a      	ldrh	r2, [r7, #10]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80067ca:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067da:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	e000      	b.n	80067e2 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80067e0:	2302      	movs	r3, #2
  }
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	2000028c 	.word	0x2000028c
 80067f4:	14f8b589 	.word	0x14f8b589
 80067f8:	ffff0000 	.word	0xffff0000

080067fc <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	607a      	str	r2, [r7, #4]
 8006806:	461a      	mov	r2, r3
 8006808:	460b      	mov	r3, r1
 800680a:	817b      	strh	r3, [r7, #10]
 800680c:	4613      	mov	r3, r2
 800680e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b20      	cmp	r3, #32
 800681e:	f040 808d 	bne.w	800693c <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006822:	4b4a      	ldr	r3, [pc, #296]	; (800694c <HAL_I2C_Master_Receive_IT+0x150>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	08db      	lsrs	r3, r3, #3
 8006828:	4a49      	ldr	r2, [pc, #292]	; (8006950 <HAL_I2C_Master_Receive_IT+0x154>)
 800682a:	fba2 2303 	umull	r2, r3, r2, r3
 800682e:	0a1a      	lsrs	r2, r3, #8
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009a      	lsls	r2, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	3b01      	subs	r3, #1
 8006840:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d116      	bne.n	8006876 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	f043 0220 	orr.w	r2, r3, #32
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e063      	b.n	800693e <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b02      	cmp	r3, #2
 8006882:	d0db      	beq.n	800683c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_I2C_Master_Receive_IT+0x96>
 800688e:	2302      	movs	r3, #2
 8006890:	e055      	b.n	800693e <HAL_I2C_Master_Receive_IT+0x142>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d007      	beq.n	80068b8 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0201 	orr.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2222      	movs	r2, #34	; 0x22
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2210      	movs	r2, #16
 80068d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	893a      	ldrh	r2, [r7, #8]
 80068e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4a17      	ldr	r2, [pc, #92]	; (8006954 <HAL_I2C_Master_Receive_IT+0x158>)
 80068f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80068fa:	897a      	ldrh	r2, [r7, #10]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006916:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006926:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006936:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	e000      	b.n	800693e <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800693c:	2302      	movs	r3, #2
  }
}
 800693e:	4618      	mov	r0, r3
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	2000028c 	.word	0x2000028c
 8006950:	14f8b589 	.word	0x14f8b589
 8006954:	ffff0000 	.word	0xffff0000

08006958 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006978:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006980:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	2b10      	cmp	r3, #16
 8006986:	d003      	beq.n	8006990 <HAL_I2C_EV_IRQHandler+0x38>
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	2b40      	cmp	r3, #64	; 0x40
 800698c:	f040 80c1 	bne.w	8006b12 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10d      	bne.n	80069c6 <HAL_I2C_EV_IRQHandler+0x6e>
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80069b0:	d003      	beq.n	80069ba <HAL_I2C_EV_IRQHandler+0x62>
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80069b8:	d101      	bne.n	80069be <HAL_I2C_EV_IRQHandler+0x66>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <HAL_I2C_EV_IRQHandler+0x68>
 80069be:	2300      	movs	r3, #0
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	f000 8132 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00c      	beq.n	80069ea <HAL_I2C_EV_IRQHandler+0x92>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	0a5b      	lsrs	r3, r3, #9
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d006      	beq.n	80069ea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 fc7b 	bl	80082d8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fd83 	bl	80074ee <I2C_Master_SB>
 80069e8:	e092      	b.n	8006b10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	08db      	lsrs	r3, r3, #3
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <HAL_I2C_EV_IRQHandler+0xb2>
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	0a5b      	lsrs	r3, r3, #9
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fdf9 	bl	80075fa <I2C_Master_ADD10>
 8006a08:	e082      	b.n	8006b10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d009      	beq.n	8006a2a <HAL_I2C_EV_IRQHandler+0xd2>
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	0a5b      	lsrs	r3, r3, #9
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fe13 	bl	800764e <I2C_Master_ADDR>
 8006a28:	e072      	b.n	8006b10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	089b      	lsrs	r3, r3, #2
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d03b      	beq.n	8006aae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a44:	f000 80f3 	beq.w	8006c2e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	09db      	lsrs	r3, r3, #7
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00f      	beq.n	8006a74 <HAL_I2C_EV_IRQHandler+0x11c>
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	0a9b      	lsrs	r3, r3, #10
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d009      	beq.n	8006a74 <HAL_I2C_EV_IRQHandler+0x11c>
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	089b      	lsrs	r3, r3, #2
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d103      	bne.n	8006a74 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f9f3 	bl	8006e58 <I2C_MasterTransmit_TXE>
 8006a72:	e04d      	b.n	8006b10 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	089b      	lsrs	r3, r3, #2
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80d6 	beq.w	8006c2e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	0a5b      	lsrs	r3, r3, #9
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 80cf 	beq.w	8006c2e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	2b21      	cmp	r3, #33	; 0x21
 8006a94:	d103      	bne.n	8006a9e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa7a 	bl	8006f90 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a9c:	e0c7      	b.n	8006c2e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	2b40      	cmp	r3, #64	; 0x40
 8006aa2:	f040 80c4 	bne.w	8006c2e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fae8 	bl	800707c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aac:	e0bf      	b.n	8006c2e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006abc:	f000 80b7 	beq.w	8006c2e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	099b      	lsrs	r3, r3, #6
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00f      	beq.n	8006aec <HAL_I2C_EV_IRQHandler+0x194>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	0a9b      	lsrs	r3, r3, #10
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d009      	beq.n	8006aec <HAL_I2C_EV_IRQHandler+0x194>
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	089b      	lsrs	r3, r3, #2
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d103      	bne.n	8006aec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fb5d 	bl	80071a4 <I2C_MasterReceive_RXNE>
 8006aea:	e011      	b.n	8006b10 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	089b      	lsrs	r3, r3, #2
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 809a 	beq.w	8006c2e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	0a5b      	lsrs	r3, r3, #9
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8093 	beq.w	8006c2e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fc06 	bl	800731a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b0e:	e08e      	b.n	8006c2e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006b10:	e08d      	b.n	8006c2e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d004      	beq.n	8006b24 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	e007      	b.n	8006b34 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d012      	beq.n	8006b66 <HAL_I2C_EV_IRQHandler+0x20e>
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	0a5b      	lsrs	r3, r3, #9
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006b5c:	69b9      	ldr	r1, [r7, #24]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 ffc4 	bl	8007aec <I2C_Slave_ADDR>
 8006b64:	e066      	b.n	8006c34 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	091b      	lsrs	r3, r3, #4
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <HAL_I2C_EV_IRQHandler+0x22e>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	0a5b      	lsrs	r3, r3, #9
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fffe 	bl	8007b80 <I2C_Slave_STOPF>
 8006b84:	e056      	b.n	8006c34 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	2b21      	cmp	r3, #33	; 0x21
 8006b8a:	d002      	beq.n	8006b92 <HAL_I2C_EV_IRQHandler+0x23a>
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	2b29      	cmp	r3, #41	; 0x29
 8006b90:	d125      	bne.n	8006bde <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	09db      	lsrs	r3, r3, #7
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00f      	beq.n	8006bbe <HAL_I2C_EV_IRQHandler+0x266>
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	0a9b      	lsrs	r3, r3, #10
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <HAL_I2C_EV_IRQHandler+0x266>
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	089b      	lsrs	r3, r3, #2
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d103      	bne.n	8006bbe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 feda 	bl	8007970 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bbc:	e039      	b.n	8006c32 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	089b      	lsrs	r3, r3, #2
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d033      	beq.n	8006c32 <HAL_I2C_EV_IRQHandler+0x2da>
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	0a5b      	lsrs	r3, r3, #9
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02d      	beq.n	8006c32 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 ff07 	bl	80079ea <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bdc:	e029      	b.n	8006c32 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	099b      	lsrs	r3, r3, #6
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00f      	beq.n	8006c0a <HAL_I2C_EV_IRQHandler+0x2b2>
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	0a9b      	lsrs	r3, r3, #10
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <HAL_I2C_EV_IRQHandler+0x2b2>
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	089b      	lsrs	r3, r3, #2
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d103      	bne.n	8006c0a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 ff12 	bl	8007a2c <I2C_SlaveReceive_RXNE>
 8006c08:	e014      	b.n	8006c34 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	089b      	lsrs	r3, r3, #2
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00e      	beq.n	8006c34 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	0a5b      	lsrs	r3, r3, #9
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d008      	beq.n	8006c34 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 ff40 	bl	8007aa8 <I2C_SlaveReceive_BTF>
 8006c28:	e004      	b.n	8006c34 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006c2a:	bf00      	nop
 8006c2c:	e002      	b.n	8006c34 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c2e:	bf00      	nop
 8006c30:	e000      	b.n	8006c34 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c32:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006c34:	3720      	adds	r7, #32
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b08a      	sub	sp, #40	; 0x28
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006c52:	2300      	movs	r3, #0
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c5c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	0a1b      	lsrs	r3, r3, #8
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00e      	beq.n	8006c88 <HAL_I2C_ER_IRQHandler+0x4e>
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	0a1b      	lsrs	r3, r3, #8
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d008      	beq.n	8006c88 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	f043 0301 	orr.w	r3, r3, #1
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c86:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	0a5b      	lsrs	r3, r3, #9
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00e      	beq.n	8006cb2 <HAL_I2C_ER_IRQHandler+0x78>
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	0a1b      	lsrs	r3, r3, #8
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	f043 0302 	orr.w	r3, r3, #2
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006cb0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	0a9b      	lsrs	r3, r3, #10
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d03f      	beq.n	8006d3e <HAL_I2C_ER_IRQHandler+0x104>
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	0a1b      	lsrs	r3, r3, #8
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d039      	beq.n	8006d3e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006cca:	7efb      	ldrb	r3, [r7, #27]
 8006ccc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cdc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006ce4:	7ebb      	ldrb	r3, [r7, #26]
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d112      	bne.n	8006d10 <HAL_I2C_ER_IRQHandler+0xd6>
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10f      	bne.n	8006d10 <HAL_I2C_ER_IRQHandler+0xd6>
 8006cf0:	7cfb      	ldrb	r3, [r7, #19]
 8006cf2:	2b21      	cmp	r3, #33	; 0x21
 8006cf4:	d008      	beq.n	8006d08 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006cf6:	7cfb      	ldrb	r3, [r7, #19]
 8006cf8:	2b29      	cmp	r3, #41	; 0x29
 8006cfa:	d005      	beq.n	8006d08 <HAL_I2C_ER_IRQHandler+0xce>
 8006cfc:	7cfb      	ldrb	r3, [r7, #19]
 8006cfe:	2b28      	cmp	r3, #40	; 0x28
 8006d00:	d106      	bne.n	8006d10 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b21      	cmp	r3, #33	; 0x21
 8006d06:	d103      	bne.n	8006d10 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 f869 	bl	8007de0 <I2C_Slave_AF>
 8006d0e:	e016      	b.n	8006d3e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d18:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	f043 0304 	orr.w	r3, r3, #4
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d22:	7efb      	ldrb	r3, [r7, #27]
 8006d24:	2b10      	cmp	r3, #16
 8006d26:	d002      	beq.n	8006d2e <HAL_I2C_ER_IRQHandler+0xf4>
 8006d28:	7efb      	ldrb	r3, [r7, #27]
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d107      	bne.n	8006d3e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d3c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	0adb      	lsrs	r3, r3, #11
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00e      	beq.n	8006d68 <HAL_I2C_ER_IRQHandler+0x12e>
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	0a1b      	lsrs	r3, r3, #8
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d008      	beq.n	8006d68 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	f043 0308 	orr.w	r3, r3, #8
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006d66:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d008      	beq.n	8006d80 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 f8a0 	bl	8007ec0 <I2C_ITError>
  }
}
 8006d80:	bf00      	nop
 8006d82:	3728      	adds	r7, #40	; 0x28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
 8006de4:	4613      	mov	r3, r2
 8006de6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d150      	bne.n	8006f20 <I2C_MasterTransmit_TXE+0xc8>
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	2b21      	cmp	r3, #33	; 0x21
 8006e82:	d14d      	bne.n	8006f20 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d01d      	beq.n	8006ec6 <I2C_MasterTransmit_TXE+0x6e>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d01a      	beq.n	8006ec6 <I2C_MasterTransmit_TXE+0x6e>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e96:	d016      	beq.n	8006ec6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ea6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2211      	movs	r2, #17
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff ff62 	bl	8006d88 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ec4:	e060      	b.n	8006f88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ed4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b40      	cmp	r3, #64	; 0x40
 8006efe:	d107      	bne.n	8006f10 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff ff7d 	bl	8006e08 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f0e:	e03b      	b.n	8006f88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff ff35 	bl	8006d88 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f1e:	e033      	b.n	8006f88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
 8006f22:	2b21      	cmp	r3, #33	; 0x21
 8006f24:	d005      	beq.n	8006f32 <I2C_MasterTransmit_TXE+0xda>
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d12d      	bne.n	8006f88 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	2b22      	cmp	r3, #34	; 0x22
 8006f30:	d12a      	bne.n	8006f88 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d108      	bne.n	8006f4e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f4a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006f4c:	e01c      	b.n	8006f88 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d103      	bne.n	8006f62 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f88e 	bl	800707c <I2C_MemoryTransmit_TXE_BTF>
}
 8006f60:	e012      	b.n	8006f88 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f86:	e7ff      	b.n	8006f88 <I2C_MasterTransmit_TXE+0x130>
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b21      	cmp	r3, #33	; 0x21
 8006fa8:	d164      	bne.n	8007074 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d012      	beq.n	8006fda <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	781a      	ldrb	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006fd8:	e04c      	b.n	8007074 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d01d      	beq.n	800701c <I2C_MasterTransmit_BTF+0x8c>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b20      	cmp	r3, #32
 8006fe4:	d01a      	beq.n	800701c <I2C_MasterTransmit_BTF+0x8c>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fec:	d016      	beq.n	800701c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ffc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2211      	movs	r2, #17
 8007002:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff feb7 	bl	8006d88 <HAL_I2C_MasterTxCpltCallback>
}
 800701a:	e02b      	b.n	8007074 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800702a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800703a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d107      	bne.n	8007066 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff fed2 	bl	8006e08 <HAL_I2C_MemTxCpltCallback>
}
 8007064:	e006      	b.n	8007074 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff fe8a 	bl	8006d88 <HAL_I2C_MasterTxCpltCallback>
}
 8007074:	bf00      	nop
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007090:	2b00      	cmp	r3, #0
 8007092:	d11d      	bne.n	80070d0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007098:	2b01      	cmp	r3, #1
 800709a:	d10b      	bne.n	80070b4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ac:	1c9a      	adds	r2, r3, #2
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80070b2:	e073      	b.n	800719c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	121b      	asrs	r3, r3, #8
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070ce:	e065      	b.n	800719c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d10b      	bne.n	80070f0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070ee:	e055      	b.n	800719c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d151      	bne.n	800719c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	2b22      	cmp	r3, #34	; 0x22
 80070fc:	d10d      	bne.n	800711a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800710c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007118:	e040      	b.n	800719c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d015      	beq.n	8007150 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	2b21      	cmp	r3, #33	; 0x21
 8007128:	d112      	bne.n	8007150 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	781a      	ldrb	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800714e:	e025      	b.n	800719c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d120      	bne.n	800719c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2b21      	cmp	r3, #33	; 0x21
 800715e:	d11d      	bne.n	800719c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800716e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800717e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff fe36 	bl	8006e08 <HAL_I2C_MemTxCpltCallback>
}
 800719c:	bf00      	nop
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b22      	cmp	r3, #34	; 0x22
 80071b6:	f040 80ac 	bne.w	8007312 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071be:	b29b      	uxth	r3, r3
 80071c0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d921      	bls.n	800720c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	691a      	ldr	r2, [r3, #16]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	f040 808c 	bne.w	8007312 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007208:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800720a:	e082      	b.n	8007312 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	2b02      	cmp	r3, #2
 8007212:	d075      	beq.n	8007300 <I2C_MasterReceive_RXNE+0x15c>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d002      	beq.n	8007220 <I2C_MasterReceive_RXNE+0x7c>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d16f      	bne.n	8007300 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 f827 	bl	8008274 <I2C_WaitOnSTOPRequestThroughIT>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d142      	bne.n	80072b2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800723a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800724a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691a      	ldr	r2, [r3, #16]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	d10a      	bne.n	800729c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff fdc1 	bl	8006e1c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800729a:	e03a      	b.n	8007312 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2212      	movs	r2, #18
 80072a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff fd76 	bl	8006d9c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072b0:	e02f      	b.n	8007312 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072de:	b29b      	uxth	r3, r3
 80072e0:	3b01      	subs	r3, #1
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff fd99 	bl	8006e30 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072fe:	e008      	b.n	8007312 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800730e:	605a      	str	r2, [r3, #4]
}
 8007310:	e7ff      	b.n	8007312 <I2C_MasterReceive_RXNE+0x16e>
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732c:	b29b      	uxth	r3, r3
 800732e:	2b04      	cmp	r3, #4
 8007330:	d11b      	bne.n	800736a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007340:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735e:	b29b      	uxth	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	b29a      	uxth	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007368:	e0bd      	b.n	80074e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b03      	cmp	r3, #3
 8007372:	d129      	bne.n	80073c8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007382:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b04      	cmp	r3, #4
 8007388:	d00a      	beq.n	80073a0 <I2C_MasterReceive_BTF+0x86>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b02      	cmp	r3, #2
 800738e:	d007      	beq.n	80073a0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691a      	ldr	r2, [r3, #16]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073bc:	b29b      	uxth	r3, r3
 80073be:	3b01      	subs	r3, #1
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80073c6:	e08e      	b.n	80074e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d176      	bne.n	80074c0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d002      	beq.n	80073de <I2C_MasterReceive_BTF+0xc4>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b10      	cmp	r3, #16
 80073dc:	d108      	bne.n	80073f0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e019      	b.n	8007424 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d002      	beq.n	80073fc <I2C_MasterReceive_BTF+0xe2>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d108      	bne.n	800740e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	e00a      	b.n	8007424 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b10      	cmp	r3, #16
 8007412:	d007      	beq.n	8007424 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007422:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691a      	ldr	r2, [r3, #16]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691a      	ldr	r2, [r3, #16]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	b2d2      	uxtb	r2, r2
 8007456:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007466:	b29b      	uxth	r3, r3
 8007468:	3b01      	subs	r3, #1
 800746a:	b29a      	uxth	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800747e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	d10a      	bne.n	80074aa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7ff fcba 	bl	8006e1c <HAL_I2C_MemRxCpltCallback>
}
 80074a8:	e01d      	b.n	80074e6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2212      	movs	r2, #18
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff fc6f 	bl	8006d9c <HAL_I2C_MasterRxCpltCallback>
}
 80074be:	e012      	b.n	80074e6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691a      	ldr	r2, [r3, #16]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80074e6:	bf00      	nop
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b40      	cmp	r3, #64	; 0x40
 8007500:	d117      	bne.n	8007532 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007506:	2b00      	cmp	r3, #0
 8007508:	d109      	bne.n	800751e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750e:	b2db      	uxtb	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800751a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800751c:	e067      	b.n	80075ee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	b2db      	uxtb	r3, r3
 8007524:	f043 0301 	orr.w	r3, r3, #1
 8007528:	b2da      	uxtb	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	611a      	str	r2, [r3, #16]
}
 8007530:	e05d      	b.n	80075ee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800753a:	d133      	bne.n	80075a4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b21      	cmp	r3, #33	; 0x21
 8007546:	d109      	bne.n	800755c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754c:	b2db      	uxtb	r3, r3
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007558:	611a      	str	r2, [r3, #16]
 800755a:	e008      	b.n	800756e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f043 0301 	orr.w	r3, r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <I2C_Master_SB+0x92>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d108      	bne.n	8007592 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007584:	2b00      	cmp	r3, #0
 8007586:	d032      	beq.n	80075ee <I2C_Master_SB+0x100>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d02d      	beq.n	80075ee <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075a0:	605a      	str	r2, [r3, #4]
}
 80075a2:	e024      	b.n	80075ee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10e      	bne.n	80075ca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	11db      	asrs	r3, r3, #7
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	f003 0306 	and.w	r3, r3, #6
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	f063 030f 	orn	r3, r3, #15
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	611a      	str	r2, [r3, #16]
}
 80075c8:	e011      	b.n	80075ee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d10d      	bne.n	80075ee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	11db      	asrs	r3, r3, #7
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f003 0306 	and.w	r3, r3, #6
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	f063 030e 	orn	r3, r3, #14
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	611a      	str	r2, [r3, #16]
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007606:	b2da      	uxtb	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <I2C_Master_ADD10+0x26>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d108      	bne.n	8007632 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00c      	beq.n	8007642 <I2C_Master_ADD10+0x48>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d007      	beq.n	8007642 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007640:	605a      	str	r2, [r3, #4]
  }
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800764e:	b480      	push	{r7}
 8007650:	b091      	sub	sp, #68	; 0x44
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800765c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b22      	cmp	r3, #34	; 0x22
 8007676:	f040 8169 	bne.w	800794c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10f      	bne.n	80076a2 <I2C_Master_ADDR+0x54>
 8007682:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007686:	2b40      	cmp	r3, #64	; 0x40
 8007688:	d10b      	bne.n	80076a2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800768a:	2300      	movs	r3, #0
 800768c:	633b      	str	r3, [r7, #48]	; 0x30
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	633b      	str	r3, [r7, #48]	; 0x30
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	633b      	str	r3, [r7, #48]	; 0x30
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	e160      	b.n	8007964 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d11d      	bne.n	80076e6 <I2C_Master_ADDR+0x98>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80076b2:	d118      	bne.n	80076e6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076b4:	2300      	movs	r3, #0
 80076b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076d8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	651a      	str	r2, [r3, #80]	; 0x50
 80076e4:	e13e      	b.n	8007964 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d113      	bne.n	8007718 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076f0:	2300      	movs	r3, #0
 80076f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	e115      	b.n	8007944 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b01      	cmp	r3, #1
 8007720:	f040 808a 	bne.w	8007838 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800772a:	d137      	bne.n	800779c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800773a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800774a:	d113      	bne.n	8007774 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800775a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800775c:	2300      	movs	r3, #0
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	e0e7      	b.n	8007944 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007774:	2300      	movs	r3, #0
 8007776:	623b      	str	r3, [r7, #32]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	623b      	str	r3, [r7, #32]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	623b      	str	r3, [r7, #32]
 8007788:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	e0d3      	b.n	8007944 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800779c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779e:	2b08      	cmp	r3, #8
 80077a0:	d02e      	beq.n	8007800 <I2C_Master_ADDR+0x1b2>
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d02b      	beq.n	8007800 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80077a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077aa:	2b12      	cmp	r3, #18
 80077ac:	d102      	bne.n	80077b4 <I2C_Master_ADDR+0x166>
 80077ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d125      	bne.n	8007800 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80077b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d00e      	beq.n	80077d8 <I2C_Master_ADDR+0x18a>
 80077ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d00b      	beq.n	80077d8 <I2C_Master_ADDR+0x18a>
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d008      	beq.n	80077d8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	e007      	b.n	80077e8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077e6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e8:	2300      	movs	r3, #0
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	61fb      	str	r3, [r7, #28]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	61fb      	str	r3, [r7, #28]
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	e0a1      	b.n	8007944 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800780e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007810:	2300      	movs	r3, #0
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	61bb      	str	r3, [r7, #24]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	61bb      	str	r3, [r7, #24]
 8007824:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	e085      	b.n	8007944 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d14d      	bne.n	80078de <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	2b04      	cmp	r3, #4
 8007846:	d016      	beq.n	8007876 <I2C_Master_ADDR+0x228>
 8007848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784a:	2b02      	cmp	r3, #2
 800784c:	d013      	beq.n	8007876 <I2C_Master_ADDR+0x228>
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	2b10      	cmp	r3, #16
 8007852:	d010      	beq.n	8007876 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007862:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	e007      	b.n	8007886 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007884:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007894:	d117      	bne.n	80078c6 <I2C_Master_ADDR+0x278>
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800789c:	d00b      	beq.n	80078b6 <I2C_Master_ADDR+0x268>
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d008      	beq.n	80078b6 <I2C_Master_ADDR+0x268>
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	2b08      	cmp	r3, #8
 80078a8:	d005      	beq.n	80078b6 <I2C_Master_ADDR+0x268>
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	2b10      	cmp	r3, #16
 80078ae:	d002      	beq.n	80078b6 <I2C_Master_ADDR+0x268>
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d107      	bne.n	80078c6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078c6:	2300      	movs	r3, #0
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	617b      	str	r3, [r7, #20]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	617b      	str	r3, [r7, #20]
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	e032      	b.n	8007944 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078ec:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078fc:	d117      	bne.n	800792e <I2C_Master_ADDR+0x2e0>
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007904:	d00b      	beq.n	800791e <I2C_Master_ADDR+0x2d0>
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	2b01      	cmp	r3, #1
 800790a:	d008      	beq.n	800791e <I2C_Master_ADDR+0x2d0>
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	2b08      	cmp	r3, #8
 8007910:	d005      	beq.n	800791e <I2C_Master_ADDR+0x2d0>
 8007912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007914:	2b10      	cmp	r3, #16
 8007916:	d002      	beq.n	800791e <I2C_Master_ADDR+0x2d0>
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	2b20      	cmp	r3, #32
 800791c:	d107      	bne.n	800792e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800792c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800792e:	2300      	movs	r3, #0
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	613b      	str	r3, [r7, #16]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800794a:	e00b      	b.n	8007964 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
}
 8007962:	e7ff      	b.n	8007964 <I2C_Master_ADDR+0x316>
 8007964:	bf00      	nop
 8007966:	3744      	adds	r7, #68	; 0x44
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800797e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d02b      	beq.n	80079e2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d114      	bne.n	80079e2 <I2C_SlaveTransmit_TXE+0x72>
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	2b29      	cmp	r3, #41	; 0x29
 80079bc:	d111      	bne.n	80079e2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2221      	movs	r2, #33	; 0x21
 80079d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2228      	movs	r2, #40	; 0x28
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff f9e7 	bl	8006db0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80079e2:	bf00      	nop
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d011      	beq.n	8007a20 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d02c      	beq.n	8007aa0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	3b01      	subs	r3, #1
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d114      	bne.n	8007aa0 <I2C_SlaveReceive_RXNE+0x74>
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	2b2a      	cmp	r3, #42	; 0x2a
 8007a7a:	d111      	bne.n	8007aa0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2222      	movs	r2, #34	; 0x22
 8007a90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2228      	movs	r2, #40	; 0x28
 8007a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7ff f992 	bl	8006dc4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007aa0:	bf00      	nop
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d012      	beq.n	8007ae0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	b2d2      	uxtb	r2, r2
 8007ac6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b06:	2b28      	cmp	r3, #40	; 0x28
 8007b08:	d127      	bne.n	8007b5a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b18:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	089b      	lsrs	r3, r3, #2
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007b26:	2301      	movs	r3, #1
 8007b28:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	09db      	lsrs	r3, r3, #7
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d103      	bne.n	8007b3e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	81bb      	strh	r3, [r7, #12]
 8007b3c:	e002      	b.n	8007b44 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007b4c:	89ba      	ldrh	r2, [r7, #12]
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff f940 	bl	8006dd8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007b58:	e00e      	b.n	8007b78 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	60bb      	str	r3, [r7, #8]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	60bb      	str	r3, [r7, #8]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b9e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60bb      	str	r3, [r7, #8]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	60bb      	str	r3, [r7, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0201 	orr.w	r2, r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bcc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bdc:	d172      	bne.n	8007cc4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	2b22      	cmp	r3, #34	; 0x22
 8007be2:	d002      	beq.n	8007bea <I2C_Slave_STOPF+0x6a>
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	2b2a      	cmp	r3, #42	; 0x2a
 8007be8:	d135      	bne.n	8007c56 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d005      	beq.n	8007c0e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	f043 0204 	orr.w	r2, r3, #4
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c1c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fe f938 	bl	8005e98 <HAL_DMA_GetState>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d049      	beq.n	8007cc2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c32:	4a69      	ldr	r2, [pc, #420]	; (8007dd8 <I2C_Slave_STOPF+0x258>)
 8007c34:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fd ff80 	bl	8005b40 <HAL_DMA_Abort_IT>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d03d      	beq.n	8007cc2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c50:	4610      	mov	r0, r2
 8007c52:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c54:	e035      	b.n	8007cc2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c72:	f043 0204 	orr.w	r2, r3, #4
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe f902 	bl	8005e98 <HAL_DMA_GetState>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d014      	beq.n	8007cc4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9e:	4a4e      	ldr	r2, [pc, #312]	; (8007dd8 <I2C_Slave_STOPF+0x258>)
 8007ca0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fd ff4a 	bl	8005b40 <HAL_DMA_Abort_IT>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d008      	beq.n	8007cc4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	e000      	b.n	8007cc4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cc2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d03e      	beq.n	8007d4c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d112      	bne.n	8007d02 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce6:	b2d2      	uxtb	r2, r2
 8007ce8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0c:	2b40      	cmp	r3, #64	; 0x40
 8007d0e:	d112      	bne.n	8007d36 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	691a      	ldr	r2, [r3, #16]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d44:	f043 0204 	orr.w	r2, r3, #4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f8b3 	bl	8007ec0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007d5a:	e039      	b.n	8007dd0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d60:	d109      	bne.n	8007d76 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2228      	movs	r2, #40	; 0x28
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff f827 	bl	8006dc4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b28      	cmp	r3, #40	; 0x28
 8007d80:	d111      	bne.n	8007da6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <I2C_Slave_STOPF+0x25c>)
 8007d86:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff f828 	bl	8006df4 <HAL_I2C_ListenCpltCallback>
}
 8007da4:	e014      	b.n	8007dd0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007daa:	2b22      	cmp	r3, #34	; 0x22
 8007dac:	d002      	beq.n	8007db4 <I2C_Slave_STOPF+0x234>
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	2b22      	cmp	r3, #34	; 0x22
 8007db2:	d10d      	bne.n	8007dd0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fe fffa 	bl	8006dc4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007dd0:	bf00      	nop
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	08008125 	.word	0x08008125
 8007ddc:	ffff0000 	.word	0xffff0000

08007de0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d002      	beq.n	8007e02 <I2C_Slave_AF+0x22>
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d129      	bne.n	8007e56 <I2C_Slave_AF+0x76>
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	2b28      	cmp	r3, #40	; 0x28
 8007e06:	d126      	bne.n	8007e56 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a2c      	ldr	r2, [pc, #176]	; (8007ebc <I2C_Slave_AF+0xdc>)
 8007e0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e1c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e26:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e36:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fe ffd0 	bl	8006df4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007e54:	e02e      	b.n	8007eb4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
 8007e58:	2b21      	cmp	r3, #33	; 0x21
 8007e5a:	d126      	bne.n	8007eaa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a17      	ldr	r2, [pc, #92]	; (8007ebc <I2C_Slave_AF+0xdc>)
 8007e60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2221      	movs	r2, #33	; 0x21
 8007e66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e86:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e90:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ea0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fe ff84 	bl	8006db0 <HAL_I2C_SlaveTxCpltCallback>
}
 8007ea8:	e004      	b.n	8007eb4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007eb2:	615a      	str	r2, [r3, #20]
}
 8007eb4:	bf00      	nop
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	ffff0000 	.word	0xffff0000

08007ec0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ece:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ed6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	2b10      	cmp	r3, #16
 8007edc:	d002      	beq.n	8007ee4 <I2C_ITError+0x24>
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	2b40      	cmp	r3, #64	; 0x40
 8007ee2:	d10a      	bne.n	8007efa <I2C_ITError+0x3a>
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	2b22      	cmp	r3, #34	; 0x22
 8007ee8:	d107      	bne.n	8007efa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ef8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f00:	2b28      	cmp	r3, #40	; 0x28
 8007f02:	d107      	bne.n	8007f14 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2228      	movs	r2, #40	; 0x28
 8007f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f12:	e015      	b.n	8007f40 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f22:	d00a      	beq.n	8007f3a <I2C_ITError+0x7a>
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b60      	cmp	r3, #96	; 0x60
 8007f28:	d007      	beq.n	8007f3a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f4e:	d162      	bne.n	8008016 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f5e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d020      	beq.n	8007fb0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f72:	4a6a      	ldr	r2, [pc, #424]	; (800811c <I2C_ITError+0x25c>)
 8007f74:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fd fde0 	bl	8005b40 <HAL_DMA_Abort_IT>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 8089 	beq.w	800809a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0201 	bic.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007faa:	4610      	mov	r0, r2
 8007fac:	4798      	blx	r3
 8007fae:	e074      	b.n	800809a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	4a59      	ldr	r2, [pc, #356]	; (800811c <I2C_ITError+0x25c>)
 8007fb6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fd fdbf 	bl	8005b40 <HAL_DMA_Abort_IT>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d068      	beq.n	800809a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b40      	cmp	r3, #64	; 0x40
 8007fd4:	d10b      	bne.n	8007fee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	691a      	ldr	r2, [r3, #16]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	b2d2      	uxtb	r2, r2
 8007fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0201 	bic.w	r2, r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008010:	4610      	mov	r0, r2
 8008012:	4798      	blx	r3
 8008014:	e041      	b.n	800809a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b60      	cmp	r3, #96	; 0x60
 8008020:	d125      	bne.n	800806e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803a:	2b40      	cmp	r3, #64	; 0x40
 800803c:	d10b      	bne.n	8008056 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	b2d2      	uxtb	r2, r2
 800804a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0201 	bic.w	r2, r2, #1
 8008064:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7fe feec 	bl	8006e44 <HAL_I2C_AbortCpltCallback>
 800806c:	e015      	b.n	800809a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d10b      	bne.n	8008094 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7fe fecb 	bl	8006e30 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10e      	bne.n	80080c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d109      	bne.n	80080c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d104      	bne.n	80080c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d007      	beq.n	80080d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	d113      	bne.n	8008114 <I2C_ITError+0x254>
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	2b28      	cmp	r3, #40	; 0x28
 80080f0:	d110      	bne.n	8008114 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a0a      	ldr	r2, [pc, #40]	; (8008120 <I2C_ITError+0x260>)
 80080f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7fe fe70 	bl	8006df4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	08008125 	.word	0x08008125
 8008120:	ffff0000 	.word	0xffff0000

08008124 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008134:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800813c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800813e:	4b4b      	ldr	r3, [pc, #300]	; (800826c <I2C_DMAAbort+0x148>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	08db      	lsrs	r3, r3, #3
 8008144:	4a4a      	ldr	r2, [pc, #296]	; (8008270 <I2C_DMAAbort+0x14c>)
 8008146:	fba2 2303 	umull	r2, r3, r2, r3
 800814a:	0a1a      	lsrs	r2, r3, #8
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	00da      	lsls	r2, r3, #3
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d106      	bne.n	800816c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008162:	f043 0220 	orr.w	r2, r3, #32
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800816a:	e00a      	b.n	8008182 <I2C_DMAAbort+0x5e>
    }
    count--;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3b01      	subs	r3, #1
 8008170:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800817c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008180:	d0ea      	beq.n	8008158 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818e:	2200      	movs	r2, #0
 8008190:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	2200      	movs	r2, #0
 80081a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2200      	movs	r2, #0
 80081b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d003      	beq.n	80081c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c4:	2200      	movs	r2, #0
 80081c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	2200      	movs	r2, #0
 80081d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0201 	bic.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b60      	cmp	r3, #96	; 0x60
 80081f2:	d10e      	bne.n	8008212 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2200      	movs	r2, #0
 8008208:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800820a:	6978      	ldr	r0, [r7, #20]
 800820c:	f7fe fe1a 	bl	8006e44 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008210:	e027      	b.n	8008262 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008212:	7cfb      	ldrb	r3, [r7, #19]
 8008214:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008218:	2b28      	cmp	r3, #40	; 0x28
 800821a:	d117      	bne.n	800824c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0201 	orr.w	r2, r2, #1
 800822a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800823a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2200      	movs	r2, #0
 8008240:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2228      	movs	r2, #40	; 0x28
 8008246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800824a:	e007      	b.n	800825c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800825c:	6978      	ldr	r0, [r7, #20]
 800825e:	f7fe fde7 	bl	8006e30 <HAL_I2C_ErrorCallback>
}
 8008262:	bf00      	nop
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	2000028c 	.word	0x2000028c
 8008270:	14f8b589 	.word	0x14f8b589

08008274 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008280:	4b13      	ldr	r3, [pc, #76]	; (80082d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	08db      	lsrs	r3, r3, #3
 8008286:	4a13      	ldr	r2, [pc, #76]	; (80082d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008288:	fba2 2303 	umull	r2, r3, r2, r3
 800828c:	0a1a      	lsrs	r2, r3, #8
 800828e:	4613      	mov	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3b01      	subs	r3, #1
 800829a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d107      	bne.n	80082b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	f043 0220 	orr.w	r2, r3, #32
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e008      	b.n	80082c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082c0:	d0e9      	beq.n	8008296 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	2000028c 	.word	0x2000028c
 80082d4:	14f8b589 	.word	0x14f8b589

080082d8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80082e8:	d103      	bne.n	80082f2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80082f0:	e007      	b.n	8008302 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80082fa:	d102      	bne.n	8008302 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2208      	movs	r2, #8
 8008300:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
	...

08008310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e267      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d075      	beq.n	800841a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800832e:	4b88      	ldr	r3, [pc, #544]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f003 030c 	and.w	r3, r3, #12
 8008336:	2b04      	cmp	r3, #4
 8008338:	d00c      	beq.n	8008354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800833a:	4b85      	ldr	r3, [pc, #532]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008342:	2b08      	cmp	r3, #8
 8008344:	d112      	bne.n	800836c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008346:	4b82      	ldr	r3, [pc, #520]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800834e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008352:	d10b      	bne.n	800836c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008354:	4b7e      	ldr	r3, [pc, #504]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d05b      	beq.n	8008418 <HAL_RCC_OscConfig+0x108>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d157      	bne.n	8008418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e242      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008374:	d106      	bne.n	8008384 <HAL_RCC_OscConfig+0x74>
 8008376:	4b76      	ldr	r3, [pc, #472]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a75      	ldr	r2, [pc, #468]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 800837c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008380:	6013      	str	r3, [r2, #0]
 8008382:	e01d      	b.n	80083c0 <HAL_RCC_OscConfig+0xb0>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800838c:	d10c      	bne.n	80083a8 <HAL_RCC_OscConfig+0x98>
 800838e:	4b70      	ldr	r3, [pc, #448]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a6f      	ldr	r2, [pc, #444]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 8008394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	4b6d      	ldr	r3, [pc, #436]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a6c      	ldr	r2, [pc, #432]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 80083a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	e00b      	b.n	80083c0 <HAL_RCC_OscConfig+0xb0>
 80083a8:	4b69      	ldr	r3, [pc, #420]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a68      	ldr	r2, [pc, #416]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 80083ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	4b66      	ldr	r3, [pc, #408]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a65      	ldr	r2, [pc, #404]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 80083ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d013      	beq.n	80083f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083c8:	f7fc fd24 	bl	8004e14 <HAL_GetTick>
 80083cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083ce:	e008      	b.n	80083e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083d0:	f7fc fd20 	bl	8004e14 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b64      	cmp	r3, #100	; 0x64
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e207      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083e2:	4b5b      	ldr	r3, [pc, #364]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0f0      	beq.n	80083d0 <HAL_RCC_OscConfig+0xc0>
 80083ee:	e014      	b.n	800841a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083f0:	f7fc fd10 	bl	8004e14 <HAL_GetTick>
 80083f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083f6:	e008      	b.n	800840a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083f8:	f7fc fd0c 	bl	8004e14 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b64      	cmp	r3, #100	; 0x64
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e1f3      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800840a:	4b51      	ldr	r3, [pc, #324]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1f0      	bne.n	80083f8 <HAL_RCC_OscConfig+0xe8>
 8008416:	e000      	b.n	800841a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d063      	beq.n	80084ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008426:	4b4a      	ldr	r3, [pc, #296]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f003 030c 	and.w	r3, r3, #12
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00b      	beq.n	800844a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008432:	4b47      	ldr	r3, [pc, #284]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800843a:	2b08      	cmp	r3, #8
 800843c:	d11c      	bne.n	8008478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800843e:	4b44      	ldr	r3, [pc, #272]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d116      	bne.n	8008478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800844a:	4b41      	ldr	r3, [pc, #260]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0302 	and.w	r3, r3, #2
 8008452:	2b00      	cmp	r3, #0
 8008454:	d005      	beq.n	8008462 <HAL_RCC_OscConfig+0x152>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d001      	beq.n	8008462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e1c7      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008462:	4b3b      	ldr	r3, [pc, #236]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	4937      	ldr	r1, [pc, #220]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 8008472:	4313      	orrs	r3, r2
 8008474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008476:	e03a      	b.n	80084ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d020      	beq.n	80084c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008480:	4b34      	ldr	r3, [pc, #208]	; (8008554 <HAL_RCC_OscConfig+0x244>)
 8008482:	2201      	movs	r2, #1
 8008484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008486:	f7fc fcc5 	bl	8004e14 <HAL_GetTick>
 800848a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800848c:	e008      	b.n	80084a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800848e:	f7fc fcc1 	bl	8004e14 <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	2b02      	cmp	r3, #2
 800849a:	d901      	bls.n	80084a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e1a8      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084a0:	4b2b      	ldr	r3, [pc, #172]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0f0      	beq.n	800848e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ac:	4b28      	ldr	r3, [pc, #160]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	4925      	ldr	r1, [pc, #148]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	600b      	str	r3, [r1, #0]
 80084c0:	e015      	b.n	80084ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084c2:	4b24      	ldr	r3, [pc, #144]	; (8008554 <HAL_RCC_OscConfig+0x244>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c8:	f7fc fca4 	bl	8004e14 <HAL_GetTick>
 80084cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084ce:	e008      	b.n	80084e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084d0:	f7fc fca0 	bl	8004e14 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e187      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084e2:	4b1b      	ldr	r3, [pc, #108]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1f0      	bne.n	80084d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0308 	and.w	r3, r3, #8
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d036      	beq.n	8008568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d016      	beq.n	8008530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008502:	4b15      	ldr	r3, [pc, #84]	; (8008558 <HAL_RCC_OscConfig+0x248>)
 8008504:	2201      	movs	r2, #1
 8008506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008508:	f7fc fc84 	bl	8004e14 <HAL_GetTick>
 800850c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800850e:	e008      	b.n	8008522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008510:	f7fc fc80 	bl	8004e14 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b02      	cmp	r3, #2
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e167      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008522:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <HAL_RCC_OscConfig+0x240>)
 8008524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0f0      	beq.n	8008510 <HAL_RCC_OscConfig+0x200>
 800852e:	e01b      	b.n	8008568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008530:	4b09      	ldr	r3, [pc, #36]	; (8008558 <HAL_RCC_OscConfig+0x248>)
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008536:	f7fc fc6d 	bl	8004e14 <HAL_GetTick>
 800853a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800853c:	e00e      	b.n	800855c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800853e:	f7fc fc69 	bl	8004e14 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	2b02      	cmp	r3, #2
 800854a:	d907      	bls.n	800855c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e150      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
 8008550:	40023800 	.word	0x40023800
 8008554:	42470000 	.word	0x42470000
 8008558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800855c:	4b88      	ldr	r3, [pc, #544]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 800855e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1ea      	bne.n	800853e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 8097 	beq.w	80086a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008576:	2300      	movs	r3, #0
 8008578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800857a:	4b81      	ldr	r3, [pc, #516]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10f      	bne.n	80085a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008586:	2300      	movs	r3, #0
 8008588:	60bb      	str	r3, [r7, #8]
 800858a:	4b7d      	ldr	r3, [pc, #500]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	4a7c      	ldr	r2, [pc, #496]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 8008590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008594:	6413      	str	r3, [r2, #64]	; 0x40
 8008596:	4b7a      	ldr	r3, [pc, #488]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800859e:	60bb      	str	r3, [r7, #8]
 80085a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085a2:	2301      	movs	r3, #1
 80085a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085a6:	4b77      	ldr	r3, [pc, #476]	; (8008784 <HAL_RCC_OscConfig+0x474>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d118      	bne.n	80085e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085b2:	4b74      	ldr	r3, [pc, #464]	; (8008784 <HAL_RCC_OscConfig+0x474>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a73      	ldr	r2, [pc, #460]	; (8008784 <HAL_RCC_OscConfig+0x474>)
 80085b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085be:	f7fc fc29 	bl	8004e14 <HAL_GetTick>
 80085c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085c4:	e008      	b.n	80085d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085c6:	f7fc fc25 	bl	8004e14 <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d901      	bls.n	80085d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e10c      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085d8:	4b6a      	ldr	r3, [pc, #424]	; (8008784 <HAL_RCC_OscConfig+0x474>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0f0      	beq.n	80085c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d106      	bne.n	80085fa <HAL_RCC_OscConfig+0x2ea>
 80085ec:	4b64      	ldr	r3, [pc, #400]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 80085ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f0:	4a63      	ldr	r2, [pc, #396]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 80085f2:	f043 0301 	orr.w	r3, r3, #1
 80085f6:	6713      	str	r3, [r2, #112]	; 0x70
 80085f8:	e01c      	b.n	8008634 <HAL_RCC_OscConfig+0x324>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	2b05      	cmp	r3, #5
 8008600:	d10c      	bne.n	800861c <HAL_RCC_OscConfig+0x30c>
 8008602:	4b5f      	ldr	r3, [pc, #380]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 8008604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008606:	4a5e      	ldr	r2, [pc, #376]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 8008608:	f043 0304 	orr.w	r3, r3, #4
 800860c:	6713      	str	r3, [r2, #112]	; 0x70
 800860e:	4b5c      	ldr	r3, [pc, #368]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 8008610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008612:	4a5b      	ldr	r2, [pc, #364]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 8008614:	f043 0301 	orr.w	r3, r3, #1
 8008618:	6713      	str	r3, [r2, #112]	; 0x70
 800861a:	e00b      	b.n	8008634 <HAL_RCC_OscConfig+0x324>
 800861c:	4b58      	ldr	r3, [pc, #352]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 800861e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008620:	4a57      	ldr	r2, [pc, #348]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 8008622:	f023 0301 	bic.w	r3, r3, #1
 8008626:	6713      	str	r3, [r2, #112]	; 0x70
 8008628:	4b55      	ldr	r3, [pc, #340]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 800862a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862c:	4a54      	ldr	r2, [pc, #336]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 800862e:	f023 0304 	bic.w	r3, r3, #4
 8008632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d015      	beq.n	8008668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800863c:	f7fc fbea 	bl	8004e14 <HAL_GetTick>
 8008640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008642:	e00a      	b.n	800865a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008644:	f7fc fbe6 	bl	8004e14 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008652:	4293      	cmp	r3, r2
 8008654:	d901      	bls.n	800865a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e0cb      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800865a:	4b49      	ldr	r3, [pc, #292]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 800865c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0ee      	beq.n	8008644 <HAL_RCC_OscConfig+0x334>
 8008666:	e014      	b.n	8008692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008668:	f7fc fbd4 	bl	8004e14 <HAL_GetTick>
 800866c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800866e:	e00a      	b.n	8008686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008670:	f7fc fbd0 	bl	8004e14 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	f241 3288 	movw	r2, #5000	; 0x1388
 800867e:	4293      	cmp	r3, r2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e0b5      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008686:	4b3e      	ldr	r3, [pc, #248]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 8008688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1ee      	bne.n	8008670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d105      	bne.n	80086a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008698:	4b39      	ldr	r3, [pc, #228]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	4a38      	ldr	r2, [pc, #224]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 800869e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 80a1 	beq.w	80087f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80086ae:	4b34      	ldr	r3, [pc, #208]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 030c 	and.w	r3, r3, #12
 80086b6:	2b08      	cmp	r3, #8
 80086b8:	d05c      	beq.n	8008774 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d141      	bne.n	8008746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086c2:	4b31      	ldr	r3, [pc, #196]	; (8008788 <HAL_RCC_OscConfig+0x478>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c8:	f7fc fba4 	bl	8004e14 <HAL_GetTick>
 80086cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ce:	e008      	b.n	80086e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086d0:	f7fc fba0 	bl	8004e14 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d901      	bls.n	80086e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e087      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086e2:	4b27      	ldr	r3, [pc, #156]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1f0      	bne.n	80086d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	69da      	ldr	r2, [r3, #28]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	431a      	orrs	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fc:	019b      	lsls	r3, r3, #6
 80086fe:	431a      	orrs	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008704:	085b      	lsrs	r3, r3, #1
 8008706:	3b01      	subs	r3, #1
 8008708:	041b      	lsls	r3, r3, #16
 800870a:	431a      	orrs	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	061b      	lsls	r3, r3, #24
 8008712:	491b      	ldr	r1, [pc, #108]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 8008714:	4313      	orrs	r3, r2
 8008716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008718:	4b1b      	ldr	r3, [pc, #108]	; (8008788 <HAL_RCC_OscConfig+0x478>)
 800871a:	2201      	movs	r2, #1
 800871c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800871e:	f7fc fb79 	bl	8004e14 <HAL_GetTick>
 8008722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008724:	e008      	b.n	8008738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008726:	f7fc fb75 	bl	8004e14 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d901      	bls.n	8008738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e05c      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008738:	4b11      	ldr	r3, [pc, #68]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0f0      	beq.n	8008726 <HAL_RCC_OscConfig+0x416>
 8008744:	e054      	b.n	80087f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008746:	4b10      	ldr	r3, [pc, #64]	; (8008788 <HAL_RCC_OscConfig+0x478>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800874c:	f7fc fb62 	bl	8004e14 <HAL_GetTick>
 8008750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008752:	e008      	b.n	8008766 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008754:	f7fc fb5e 	bl	8004e14 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d901      	bls.n	8008766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e045      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008766:	4b06      	ldr	r3, [pc, #24]	; (8008780 <HAL_RCC_OscConfig+0x470>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1f0      	bne.n	8008754 <HAL_RCC_OscConfig+0x444>
 8008772:	e03d      	b.n	80087f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d107      	bne.n	800878c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e038      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
 8008780:	40023800 	.word	0x40023800
 8008784:	40007000 	.word	0x40007000
 8008788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800878c:	4b1b      	ldr	r3, [pc, #108]	; (80087fc <HAL_RCC_OscConfig+0x4ec>)
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d028      	beq.n	80087ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d121      	bne.n	80087ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d11a      	bne.n	80087ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087bc:	4013      	ands	r3, r2
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80087c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d111      	bne.n	80087ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	3b01      	subs	r3, #1
 80087d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087d8:	429a      	cmp	r2, r3
 80087da:	d107      	bne.n	80087ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d001      	beq.n	80087f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e000      	b.n	80087f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3718      	adds	r7, #24
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	40023800 	.word	0x40023800

08008800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e0cc      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008814:	4b68      	ldr	r3, [pc, #416]	; (80089b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d90c      	bls.n	800883c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008822:	4b65      	ldr	r3, [pc, #404]	; (80089b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	b2d2      	uxtb	r2, r2
 8008828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800882a:	4b63      	ldr	r3, [pc, #396]	; (80089b8 <HAL_RCC_ClockConfig+0x1b8>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	429a      	cmp	r2, r3
 8008836:	d001      	beq.n	800883c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e0b8      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d020      	beq.n	800888a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d005      	beq.n	8008860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008854:	4b59      	ldr	r3, [pc, #356]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	4a58      	ldr	r2, [pc, #352]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 800885a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800885e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0308 	and.w	r3, r3, #8
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800886c:	4b53      	ldr	r3, [pc, #332]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	4a52      	ldr	r2, [pc, #328]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 8008872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008878:	4b50      	ldr	r3, [pc, #320]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	494d      	ldr	r1, [pc, #308]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 8008886:	4313      	orrs	r3, r2
 8008888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d044      	beq.n	8008920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d107      	bne.n	80088ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800889e:	4b47      	ldr	r3, [pc, #284]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d119      	bne.n	80088de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e07f      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d003      	beq.n	80088be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d107      	bne.n	80088ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088be:	4b3f      	ldr	r3, [pc, #252]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d109      	bne.n	80088de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e06f      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088ce:	4b3b      	ldr	r3, [pc, #236]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e067      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088de:	4b37      	ldr	r3, [pc, #220]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f023 0203 	bic.w	r2, r3, #3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	4934      	ldr	r1, [pc, #208]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088f0:	f7fc fa90 	bl	8004e14 <HAL_GetTick>
 80088f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088f6:	e00a      	b.n	800890e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088f8:	f7fc fa8c 	bl	8004e14 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	f241 3288 	movw	r2, #5000	; 0x1388
 8008906:	4293      	cmp	r3, r2
 8008908:	d901      	bls.n	800890e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e04f      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800890e:	4b2b      	ldr	r3, [pc, #172]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f003 020c 	and.w	r2, r3, #12
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	429a      	cmp	r2, r3
 800891e:	d1eb      	bne.n	80088f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008920:	4b25      	ldr	r3, [pc, #148]	; (80089b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0307 	and.w	r3, r3, #7
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	429a      	cmp	r2, r3
 800892c:	d20c      	bcs.n	8008948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800892e:	4b22      	ldr	r3, [pc, #136]	; (80089b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	b2d2      	uxtb	r2, r2
 8008934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008936:	4b20      	ldr	r3, [pc, #128]	; (80089b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	429a      	cmp	r2, r3
 8008942:	d001      	beq.n	8008948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e032      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	d008      	beq.n	8008966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008954:	4b19      	ldr	r3, [pc, #100]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	4916      	ldr	r1, [pc, #88]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 8008962:	4313      	orrs	r3, r2
 8008964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0308 	and.w	r3, r3, #8
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008972:	4b12      	ldr	r3, [pc, #72]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	490e      	ldr	r1, [pc, #56]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 8008982:	4313      	orrs	r3, r2
 8008984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008986:	f000 f821 	bl	80089cc <HAL_RCC_GetSysClockFreq>
 800898a:	4602      	mov	r2, r0
 800898c:	4b0b      	ldr	r3, [pc, #44]	; (80089bc <HAL_RCC_ClockConfig+0x1bc>)
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	091b      	lsrs	r3, r3, #4
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	490a      	ldr	r1, [pc, #40]	; (80089c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008998:	5ccb      	ldrb	r3, [r1, r3]
 800899a:	fa22 f303 	lsr.w	r3, r2, r3
 800899e:	4a09      	ldr	r2, [pc, #36]	; (80089c4 <HAL_RCC_ClockConfig+0x1c4>)
 80089a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80089a2:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <HAL_RCC_ClockConfig+0x1c8>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fc f9f0 	bl	8004d8c <HAL_InitTick>

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	40023c00 	.word	0x40023c00
 80089bc:	40023800 	.word	0x40023800
 80089c0:	0800cf58 	.word	0x0800cf58
 80089c4:	2000028c 	.word	0x2000028c
 80089c8:	20000290 	.word	0x20000290

080089cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089d0:	b094      	sub	sp, #80	; 0x50
 80089d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	647b      	str	r3, [r7, #68]	; 0x44
 80089d8:	2300      	movs	r3, #0
 80089da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089dc:	2300      	movs	r3, #0
 80089de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089e4:	4b79      	ldr	r3, [pc, #484]	; (8008bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f003 030c 	and.w	r3, r3, #12
 80089ec:	2b08      	cmp	r3, #8
 80089ee:	d00d      	beq.n	8008a0c <HAL_RCC_GetSysClockFreq+0x40>
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	f200 80e1 	bhi.w	8008bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <HAL_RCC_GetSysClockFreq+0x34>
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d003      	beq.n	8008a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80089fe:	e0db      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a00:	4b73      	ldr	r3, [pc, #460]	; (8008bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008a02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008a04:	e0db      	b.n	8008bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a06:	4b73      	ldr	r3, [pc, #460]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a0a:	e0d8      	b.n	8008bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a0c:	4b6f      	ldr	r3, [pc, #444]	; (8008bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a16:	4b6d      	ldr	r3, [pc, #436]	; (8008bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d063      	beq.n	8008aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a22:	4b6a      	ldr	r3, [pc, #424]	; (8008bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	099b      	lsrs	r3, r3, #6
 8008a28:	2200      	movs	r2, #0
 8008a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a34:	633b      	str	r3, [r7, #48]	; 0x30
 8008a36:	2300      	movs	r3, #0
 8008a38:	637b      	str	r3, [r7, #52]	; 0x34
 8008a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008a3e:	4622      	mov	r2, r4
 8008a40:	462b      	mov	r3, r5
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f04f 0100 	mov.w	r1, #0
 8008a4a:	0159      	lsls	r1, r3, #5
 8008a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a50:	0150      	lsls	r0, r2, #5
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4621      	mov	r1, r4
 8008a58:	1a51      	subs	r1, r2, r1
 8008a5a:	6139      	str	r1, [r7, #16]
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8008a62:	617b      	str	r3, [r7, #20]
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	f04f 0300 	mov.w	r3, #0
 8008a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a70:	4659      	mov	r1, fp
 8008a72:	018b      	lsls	r3, r1, #6
 8008a74:	4651      	mov	r1, sl
 8008a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008a7a:	4651      	mov	r1, sl
 8008a7c:	018a      	lsls	r2, r1, #6
 8008a7e:	4651      	mov	r1, sl
 8008a80:	ebb2 0801 	subs.w	r8, r2, r1
 8008a84:	4659      	mov	r1, fp
 8008a86:	eb63 0901 	sbc.w	r9, r3, r1
 8008a8a:	f04f 0200 	mov.w	r2, #0
 8008a8e:	f04f 0300 	mov.w	r3, #0
 8008a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a9e:	4690      	mov	r8, r2
 8008aa0:	4699      	mov	r9, r3
 8008aa2:	4623      	mov	r3, r4
 8008aa4:	eb18 0303 	adds.w	r3, r8, r3
 8008aa8:	60bb      	str	r3, [r7, #8]
 8008aaa:	462b      	mov	r3, r5
 8008aac:	eb49 0303 	adc.w	r3, r9, r3
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	f04f 0200 	mov.w	r2, #0
 8008ab6:	f04f 0300 	mov.w	r3, #0
 8008aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008abe:	4629      	mov	r1, r5
 8008ac0:	024b      	lsls	r3, r1, #9
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008ac8:	4621      	mov	r1, r4
 8008aca:	024a      	lsls	r2, r1, #9
 8008acc:	4610      	mov	r0, r2
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008adc:	f7f8 f946 	bl	8000d6c <__aeabi_uldivmod>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ae8:	e058      	b.n	8008b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008aea:	4b38      	ldr	r3, [pc, #224]	; (8008bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	099b      	lsrs	r3, r3, #6
 8008af0:	2200      	movs	r2, #0
 8008af2:	4618      	mov	r0, r3
 8008af4:	4611      	mov	r1, r2
 8008af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008afa:	623b      	str	r3, [r7, #32]
 8008afc:	2300      	movs	r3, #0
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24
 8008b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008b04:	4642      	mov	r2, r8
 8008b06:	464b      	mov	r3, r9
 8008b08:	f04f 0000 	mov.w	r0, #0
 8008b0c:	f04f 0100 	mov.w	r1, #0
 8008b10:	0159      	lsls	r1, r3, #5
 8008b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b16:	0150      	lsls	r0, r2, #5
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4641      	mov	r1, r8
 8008b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008b22:	4649      	mov	r1, r9
 8008b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8008b28:	f04f 0200 	mov.w	r2, #0
 8008b2c:	f04f 0300 	mov.w	r3, #0
 8008b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8008b40:	eb63 050b 	sbc.w	r5, r3, fp
 8008b44:	f04f 0200 	mov.w	r2, #0
 8008b48:	f04f 0300 	mov.w	r3, #0
 8008b4c:	00eb      	lsls	r3, r5, #3
 8008b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b52:	00e2      	lsls	r2, r4, #3
 8008b54:	4614      	mov	r4, r2
 8008b56:	461d      	mov	r5, r3
 8008b58:	4643      	mov	r3, r8
 8008b5a:	18e3      	adds	r3, r4, r3
 8008b5c:	603b      	str	r3, [r7, #0]
 8008b5e:	464b      	mov	r3, r9
 8008b60:	eb45 0303 	adc.w	r3, r5, r3
 8008b64:	607b      	str	r3, [r7, #4]
 8008b66:	f04f 0200 	mov.w	r2, #0
 8008b6a:	f04f 0300 	mov.w	r3, #0
 8008b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b72:	4629      	mov	r1, r5
 8008b74:	028b      	lsls	r3, r1, #10
 8008b76:	4621      	mov	r1, r4
 8008b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	028a      	lsls	r2, r1, #10
 8008b80:	4610      	mov	r0, r2
 8008b82:	4619      	mov	r1, r3
 8008b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b86:	2200      	movs	r2, #0
 8008b88:	61bb      	str	r3, [r7, #24]
 8008b8a:	61fa      	str	r2, [r7, #28]
 8008b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b90:	f7f8 f8ec 	bl	8000d6c <__aeabi_uldivmod>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4613      	mov	r3, r2
 8008b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b9c:	4b0b      	ldr	r3, [pc, #44]	; (8008bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	0c1b      	lsrs	r3, r3, #16
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bb6:	e002      	b.n	8008bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008bb8:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3750      	adds	r7, #80	; 0x50
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bca:	bf00      	nop
 8008bcc:	40023800 	.word	0x40023800
 8008bd0:	00f42400 	.word	0x00f42400
 8008bd4:	007a1200 	.word	0x007a1200

08008bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bdc:	4b03      	ldr	r3, [pc, #12]	; (8008bec <HAL_RCC_GetHCLKFreq+0x14>)
 8008bde:	681b      	ldr	r3, [r3, #0]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	2000028c 	.word	0x2000028c

08008bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008bf4:	f7ff fff0 	bl	8008bd8 <HAL_RCC_GetHCLKFreq>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	4b05      	ldr	r3, [pc, #20]	; (8008c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	0a9b      	lsrs	r3, r3, #10
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	4903      	ldr	r1, [pc, #12]	; (8008c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c06:	5ccb      	ldrb	r3, [r1, r3]
 8008c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	40023800 	.word	0x40023800
 8008c14:	0800cf68 	.word	0x0800cf68

08008c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c1c:	f7ff ffdc 	bl	8008bd8 <HAL_RCC_GetHCLKFreq>
 8008c20:	4602      	mov	r2, r0
 8008c22:	4b05      	ldr	r3, [pc, #20]	; (8008c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	0b5b      	lsrs	r3, r3, #13
 8008c28:	f003 0307 	and.w	r3, r3, #7
 8008c2c:	4903      	ldr	r1, [pc, #12]	; (8008c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c2e:	5ccb      	ldrb	r3, [r1, r3]
 8008c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	40023800 	.word	0x40023800
 8008c3c:	0800cf68 	.word	0x0800cf68

08008c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e04c      	b.n	8008cec <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d111      	bne.n	8008c82 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 fba4 	bl	800a3b4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a1f      	ldr	r2, [pc, #124]	; (8008cf4 <HAL_TIM_Base_Init+0xb4>)
 8008c78:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2202      	movs	r2, #2
 8008c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3304      	adds	r3, #4
 8008c92:	4619      	mov	r1, r3
 8008c94:	4610      	mov	r0, r2
 8008c96:	f001 f8c1 	bl	8009e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	0800468d 	.word	0x0800468d

08008cf8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d001      	beq.n	8008d10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e03c      	b.n	8008d8a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a1e      	ldr	r2, [pc, #120]	; (8008d98 <HAL_TIM_Base_Start+0xa0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d018      	beq.n	8008d54 <HAL_TIM_Base_Start+0x5c>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d2a:	d013      	beq.n	8008d54 <HAL_TIM_Base_Start+0x5c>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a1a      	ldr	r2, [pc, #104]	; (8008d9c <HAL_TIM_Base_Start+0xa4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00e      	beq.n	8008d54 <HAL_TIM_Base_Start+0x5c>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a19      	ldr	r2, [pc, #100]	; (8008da0 <HAL_TIM_Base_Start+0xa8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d009      	beq.n	8008d54 <HAL_TIM_Base_Start+0x5c>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a17      	ldr	r2, [pc, #92]	; (8008da4 <HAL_TIM_Base_Start+0xac>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d004      	beq.n	8008d54 <HAL_TIM_Base_Start+0x5c>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a16      	ldr	r2, [pc, #88]	; (8008da8 <HAL_TIM_Base_Start+0xb0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d111      	bne.n	8008d78 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b06      	cmp	r3, #6
 8008d64:	d010      	beq.n	8008d88 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0201 	orr.w	r2, r2, #1
 8008d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d76:	e007      	b.n	8008d88 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0201 	orr.w	r2, r2, #1
 8008d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	40010000 	.word	0x40010000
 8008d9c:	40000400 	.word	0x40000400
 8008da0:	40000800 	.word	0x40000800
 8008da4:	40000c00 	.word	0x40000c00
 8008da8:	40014000 	.word	0x40014000

08008dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d001      	beq.n	8008dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e044      	b.n	8008e4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0201 	orr.w	r2, r2, #1
 8008dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a1e      	ldr	r2, [pc, #120]	; (8008e5c <HAL_TIM_Base_Start_IT+0xb0>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d018      	beq.n	8008e18 <HAL_TIM_Base_Start_IT+0x6c>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dee:	d013      	beq.n	8008e18 <HAL_TIM_Base_Start_IT+0x6c>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a1a      	ldr	r2, [pc, #104]	; (8008e60 <HAL_TIM_Base_Start_IT+0xb4>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00e      	beq.n	8008e18 <HAL_TIM_Base_Start_IT+0x6c>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a19      	ldr	r2, [pc, #100]	; (8008e64 <HAL_TIM_Base_Start_IT+0xb8>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d009      	beq.n	8008e18 <HAL_TIM_Base_Start_IT+0x6c>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a17      	ldr	r2, [pc, #92]	; (8008e68 <HAL_TIM_Base_Start_IT+0xbc>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d004      	beq.n	8008e18 <HAL_TIM_Base_Start_IT+0x6c>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a16      	ldr	r2, [pc, #88]	; (8008e6c <HAL_TIM_Base_Start_IT+0xc0>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d111      	bne.n	8008e3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f003 0307 	and.w	r3, r3, #7
 8008e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b06      	cmp	r3, #6
 8008e28:	d010      	beq.n	8008e4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f042 0201 	orr.w	r2, r2, #1
 8008e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e3a:	e007      	b.n	8008e4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f042 0201 	orr.w	r2, r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	40010000 	.word	0x40010000
 8008e60:	40000400 	.word	0x40000400
 8008e64:	40000800 	.word	0x40000800
 8008e68:	40000c00 	.word	0x40000c00
 8008e6c:	40014000 	.word	0x40014000

08008e70 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e04c      	b.n	8008f1c <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d111      	bne.n	8008eb2 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f001 fa8c 	bl	800a3b4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d102      	bne.n	8008eaa <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a1f      	ldr	r2, [pc, #124]	; (8008f24 <HAL_TIM_OC_Init+0xb4>)
 8008ea8:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	f000 ffa9 	bl	8009e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	08008f29 	.word	0x08008f29

08008f28 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e04c      	b.n	8008fe8 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d111      	bne.n	8008f7e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 fa26 	bl	800a3b4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a1f      	ldr	r2, [pc, #124]	; (8008ff0 <HAL_TIM_PWM_Init+0xb4>)
 8008f74:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2202      	movs	r2, #2
 8008f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4610      	mov	r0, r2
 8008f92:	f000 ff43 	bl	8009e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	08008ff5 	.word	0x08008ff5

08008ff4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d109      	bne.n	800902c <HAL_TIM_PWM_Start+0x24>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	bf14      	ite	ne
 8009024:	2301      	movne	r3, #1
 8009026:	2300      	moveq	r3, #0
 8009028:	b2db      	uxtb	r3, r3
 800902a:	e022      	b.n	8009072 <HAL_TIM_PWM_Start+0x6a>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b04      	cmp	r3, #4
 8009030:	d109      	bne.n	8009046 <HAL_TIM_PWM_Start+0x3e>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b01      	cmp	r3, #1
 800903c:	bf14      	ite	ne
 800903e:	2301      	movne	r3, #1
 8009040:	2300      	moveq	r3, #0
 8009042:	b2db      	uxtb	r3, r3
 8009044:	e015      	b.n	8009072 <HAL_TIM_PWM_Start+0x6a>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b08      	cmp	r3, #8
 800904a:	d109      	bne.n	8009060 <HAL_TIM_PWM_Start+0x58>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b01      	cmp	r3, #1
 8009056:	bf14      	ite	ne
 8009058:	2301      	movne	r3, #1
 800905a:	2300      	moveq	r3, #0
 800905c:	b2db      	uxtb	r3, r3
 800905e:	e008      	b.n	8009072 <HAL_TIM_PWM_Start+0x6a>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b01      	cmp	r3, #1
 800906a:	bf14      	ite	ne
 800906c:	2301      	movne	r3, #1
 800906e:	2300      	moveq	r3, #0
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e068      	b.n	800914c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d104      	bne.n	800908a <HAL_TIM_PWM_Start+0x82>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009088:	e013      	b.n	80090b2 <HAL_TIM_PWM_Start+0xaa>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b04      	cmp	r3, #4
 800908e:	d104      	bne.n	800909a <HAL_TIM_PWM_Start+0x92>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009098:	e00b      	b.n	80090b2 <HAL_TIM_PWM_Start+0xaa>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b08      	cmp	r3, #8
 800909e:	d104      	bne.n	80090aa <HAL_TIM_PWM_Start+0xa2>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090a8:	e003      	b.n	80090b2 <HAL_TIM_PWM_Start+0xaa>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2202      	movs	r2, #2
 80090ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2201      	movs	r2, #1
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f001 f954 	bl	800a368 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a23      	ldr	r2, [pc, #140]	; (8009154 <HAL_TIM_PWM_Start+0x14c>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d107      	bne.n	80090da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a1d      	ldr	r2, [pc, #116]	; (8009154 <HAL_TIM_PWM_Start+0x14c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d018      	beq.n	8009116 <HAL_TIM_PWM_Start+0x10e>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ec:	d013      	beq.n	8009116 <HAL_TIM_PWM_Start+0x10e>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a19      	ldr	r2, [pc, #100]	; (8009158 <HAL_TIM_PWM_Start+0x150>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d00e      	beq.n	8009116 <HAL_TIM_PWM_Start+0x10e>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a17      	ldr	r2, [pc, #92]	; (800915c <HAL_TIM_PWM_Start+0x154>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d009      	beq.n	8009116 <HAL_TIM_PWM_Start+0x10e>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a16      	ldr	r2, [pc, #88]	; (8009160 <HAL_TIM_PWM_Start+0x158>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d004      	beq.n	8009116 <HAL_TIM_PWM_Start+0x10e>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a14      	ldr	r2, [pc, #80]	; (8009164 <HAL_TIM_PWM_Start+0x15c>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d111      	bne.n	800913a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f003 0307 	and.w	r3, r3, #7
 8009120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2b06      	cmp	r3, #6
 8009126:	d010      	beq.n	800914a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0201 	orr.w	r2, r2, #1
 8009136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009138:	e007      	b.n	800914a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0201 	orr.w	r2, r2, #1
 8009148:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	40010000 	.word	0x40010000
 8009158:	40000400 	.word	0x40000400
 800915c:	40000800 	.word	0x40000800
 8009160:	40000c00 	.word	0x40000c00
 8009164:	40014000 	.word	0x40014000

08009168 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009178:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009180:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009188:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009190:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009192:	7bfb      	ldrb	r3, [r7, #15]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d108      	bne.n	80091aa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d105      	bne.n	80091aa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800919e:	7b7b      	ldrb	r3, [r7, #13]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d102      	bne.n	80091aa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80091a4:	7b3b      	ldrb	r3, [r7, #12]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d001      	beq.n	80091ae <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e03b      	b.n	8009226 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2202      	movs	r2, #2
 80091b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2202      	movs	r2, #2
 80091ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2202      	movs	r2, #2
 80091c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2202      	movs	r2, #2
 80091ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f042 0202 	orr.w	r2, r2, #2
 80091dc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f042 0204 	orr.w	r2, r2, #4
 80091ec:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2201      	movs	r2, #1
 80091f4:	2100      	movs	r1, #0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f001 f8b6 	bl	800a368 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2201      	movs	r2, #1
 8009202:	2104      	movs	r1, #4
 8009204:	4618      	mov	r0, r3
 8009206:	f001 f8af 	bl	800a368 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a08      	ldr	r2, [pc, #32]	; (8009230 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d107      	bne.n	8009224 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009222:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40010000 	.word	0x40010000

08009234 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e0a2      	b.n	800938e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b00      	cmp	r3, #0
 8009252:	d111      	bne.n	8009278 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f001 f8a9 	bl	800a3b4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009266:	2b00      	cmp	r3, #0
 8009268:	d102      	bne.n	8009270 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a4a      	ldr	r2, [pc, #296]	; (8009398 <HAL_TIM_Encoder_Init+0x164>)
 800926e:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2202      	movs	r2, #2
 800927c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	6812      	ldr	r2, [r2, #0]
 800928a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800928e:	f023 0307 	bic.w	r3, r3, #7
 8009292:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3304      	adds	r3, #4
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	f000 fdbc 	bl	8009e1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	697a      	ldr	r2, [r7, #20]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092cc:	f023 0303 	bic.w	r3, r3, #3
 80092d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	021b      	lsls	r3, r3, #8
 80092dc:	4313      	orrs	r3, r2
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80092ea:	f023 030c 	bic.w	r3, r3, #12
 80092ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	68da      	ldr	r2, [r3, #12]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	4313      	orrs	r3, r2
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	4313      	orrs	r3, r2
 800930c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	011a      	lsls	r2, r3, #4
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	6a1b      	ldr	r3, [r3, #32]
 8009318:	031b      	lsls	r3, r3, #12
 800931a:	4313      	orrs	r3, r2
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	4313      	orrs	r3, r2
 8009320:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009328:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009330:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	011b      	lsls	r3, r3, #4
 800933c:	4313      	orrs	r3, r2
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	4313      	orrs	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	08004755 	.word	0x08004755

0800939c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d110      	bne.n	80093ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d102      	bne.n	80093d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80093d2:	7b7b      	ldrb	r3, [r7, #13]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d001      	beq.n	80093dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e069      	b.n	80094b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2202      	movs	r2, #2
 80093e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093ec:	e031      	b.n	8009452 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b04      	cmp	r3, #4
 80093f2:	d110      	bne.n	8009416 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80093f4:	7bbb      	ldrb	r3, [r7, #14]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d102      	bne.n	8009400 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80093fa:	7b3b      	ldrb	r3, [r7, #12]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d001      	beq.n	8009404 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e055      	b.n	80094b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2202      	movs	r2, #2
 8009408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009414:	e01d      	b.n	8009452 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d108      	bne.n	800942e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800941c:	7bbb      	ldrb	r3, [r7, #14]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d105      	bne.n	800942e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009422:	7b7b      	ldrb	r3, [r7, #13]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d102      	bne.n	800942e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009428:	7b3b      	ldrb	r3, [r7, #12]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d001      	beq.n	8009432 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e03e      	b.n	80094b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2202      	movs	r2, #2
 8009436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2202      	movs	r2, #2
 800943e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2202      	movs	r2, #2
 8009446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2202      	movs	r2, #2
 800944e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_TIM_Encoder_Start+0xc4>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b04      	cmp	r3, #4
 800945c:	d008      	beq.n	8009470 <HAL_TIM_Encoder_Start+0xd4>
 800945e:	e00f      	b.n	8009480 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2201      	movs	r2, #1
 8009466:	2100      	movs	r1, #0
 8009468:	4618      	mov	r0, r3
 800946a:	f000 ff7d 	bl	800a368 <TIM_CCxChannelCmd>
      break;
 800946e:	e016      	b.n	800949e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2201      	movs	r2, #1
 8009476:	2104      	movs	r1, #4
 8009478:	4618      	mov	r0, r3
 800947a:	f000 ff75 	bl	800a368 <TIM_CCxChannelCmd>
      break;
 800947e:	e00e      	b.n	800949e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2201      	movs	r2, #1
 8009486:	2100      	movs	r1, #0
 8009488:	4618      	mov	r0, r3
 800948a:	f000 ff6d 	bl	800a368 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2201      	movs	r2, #1
 8009494:	2104      	movs	r1, #4
 8009496:	4618      	mov	r0, r3
 8009498:	f000 ff66 	bl	800a368 <TIM_CCxChannelCmd>
      break;
 800949c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f042 0201 	orr.w	r2, r2, #1
 80094ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	f003 0302 	and.w	r3, r3, #2
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d128      	bne.n	8009520 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f003 0302 	and.w	r3, r3, #2
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d121      	bne.n	8009520 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f06f 0202 	mvn.w	r2, #2
 80094e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d005      	beq.n	8009506 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	4798      	blx	r3
 8009504:	e009      	b.n	800951a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	f003 0304 	and.w	r3, r3, #4
 800952a:	2b04      	cmp	r3, #4
 800952c:	d128      	bne.n	8009580 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b04      	cmp	r3, #4
 800953a:	d121      	bne.n	8009580 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f06f 0204 	mvn.w	r2, #4
 8009544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2202      	movs	r2, #2
 800954a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009556:	2b00      	cmp	r3, #0
 8009558:	d005      	beq.n	8009566 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	4798      	blx	r3
 8009564:	e009      	b.n	800957a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	f003 0308 	and.w	r3, r3, #8
 800958a:	2b08      	cmp	r3, #8
 800958c:	d128      	bne.n	80095e0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f003 0308 	and.w	r3, r3, #8
 8009598:	2b08      	cmp	r3, #8
 800959a:	d121      	bne.n	80095e0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f06f 0208 	mvn.w	r2, #8
 80095a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2204      	movs	r2, #4
 80095aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	f003 0303 	and.w	r3, r3, #3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d005      	beq.n	80095c6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	4798      	blx	r3
 80095c4:	e009      	b.n	80095da <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f003 0310 	and.w	r3, r3, #16
 80095ea:	2b10      	cmp	r3, #16
 80095ec:	d128      	bne.n	8009640 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	f003 0310 	and.w	r3, r3, #16
 80095f8:	2b10      	cmp	r3, #16
 80095fa:	d121      	bne.n	8009640 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f06f 0210 	mvn.w	r2, #16
 8009604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2208      	movs	r2, #8
 800960a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009616:	2b00      	cmp	r3, #0
 8009618:	d005      	beq.n	8009626 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	4798      	blx	r3
 8009624:	e009      	b.n	800963a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b01      	cmp	r3, #1
 800964c:	d110      	bne.n	8009670 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	2b01      	cmp	r3, #1
 800965a:	d109      	bne.n	8009670 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f06f 0201 	mvn.w	r2, #1
 8009664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800967a:	2b80      	cmp	r3, #128	; 0x80
 800967c:	d110      	bne.n	80096a0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009688:	2b80      	cmp	r3, #128	; 0x80
 800968a:	d109      	bne.n	80096a0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096aa:	2b40      	cmp	r3, #64	; 0x40
 80096ac:	d110      	bne.n	80096d0 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b8:	2b40      	cmp	r3, #64	; 0x40
 80096ba:	d109      	bne.n	80096d0 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	f003 0320 	and.w	r3, r3, #32
 80096da:	2b20      	cmp	r3, #32
 80096dc:	d110      	bne.n	8009700 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	f003 0320 	and.w	r3, r3, #32
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	d109      	bne.n	8009700 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f06f 0220 	mvn.w	r2, #32
 80096f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800971e:	2b01      	cmp	r3, #1
 8009720:	d101      	bne.n	8009726 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009722:	2302      	movs	r3, #2
 8009724:	e048      	b.n	80097b8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2201      	movs	r2, #1
 800972a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b0c      	cmp	r3, #12
 8009732:	d839      	bhi.n	80097a8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009734:	a201      	add	r2, pc, #4	; (adr r2, 800973c <HAL_TIM_OC_ConfigChannel+0x34>)
 8009736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973a:	bf00      	nop
 800973c:	08009771 	.word	0x08009771
 8009740:	080097a9 	.word	0x080097a9
 8009744:	080097a9 	.word	0x080097a9
 8009748:	080097a9 	.word	0x080097a9
 800974c:	0800977f 	.word	0x0800977f
 8009750:	080097a9 	.word	0x080097a9
 8009754:	080097a9 	.word	0x080097a9
 8009758:	080097a9 	.word	0x080097a9
 800975c:	0800978d 	.word	0x0800978d
 8009760:	080097a9 	.word	0x080097a9
 8009764:	080097a9 	.word	0x080097a9
 8009768:	080097a9 	.word	0x080097a9
 800976c:	0800979b 	.word	0x0800979b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68b9      	ldr	r1, [r7, #8]
 8009776:	4618      	mov	r0, r3
 8009778:	f000 fbd0 	bl	8009f1c <TIM_OC1_SetConfig>
      break;
 800977c:	e017      	b.n	80097ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68b9      	ldr	r1, [r7, #8]
 8009784:	4618      	mov	r0, r3
 8009786:	f000 fc2f 	bl	8009fe8 <TIM_OC2_SetConfig>
      break;
 800978a:	e010      	b.n	80097ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	4618      	mov	r0, r3
 8009794:	f000 fc94 	bl	800a0c0 <TIM_OC3_SetConfig>
      break;
 8009798:	e009      	b.n	80097ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fcf7 	bl	800a194 <TIM_OC4_SetConfig>
      break;
 80097a6:	e002      	b.n	80097ae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	75fb      	strb	r3, [r7, #23]
      break;
 80097ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d101      	bne.n	80097de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80097da:	2302      	movs	r3, #2
 80097dc:	e0ae      	b.n	800993c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b0c      	cmp	r3, #12
 80097ea:	f200 809f 	bhi.w	800992c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80097ee:	a201      	add	r2, pc, #4	; (adr r2, 80097f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80097f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f4:	08009829 	.word	0x08009829
 80097f8:	0800992d 	.word	0x0800992d
 80097fc:	0800992d 	.word	0x0800992d
 8009800:	0800992d 	.word	0x0800992d
 8009804:	08009869 	.word	0x08009869
 8009808:	0800992d 	.word	0x0800992d
 800980c:	0800992d 	.word	0x0800992d
 8009810:	0800992d 	.word	0x0800992d
 8009814:	080098ab 	.word	0x080098ab
 8009818:	0800992d 	.word	0x0800992d
 800981c:	0800992d 	.word	0x0800992d
 8009820:	0800992d 	.word	0x0800992d
 8009824:	080098eb 	.word	0x080098eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68b9      	ldr	r1, [r7, #8]
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fb74 	bl	8009f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	699a      	ldr	r2, [r3, #24]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0208 	orr.w	r2, r2, #8
 8009842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	699a      	ldr	r2, [r3, #24]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f022 0204 	bic.w	r2, r2, #4
 8009852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6999      	ldr	r1, [r3, #24]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	691a      	ldr	r2, [r3, #16]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	619a      	str	r2, [r3, #24]
      break;
 8009866:	e064      	b.n	8009932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fbba 	bl	8009fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	699a      	ldr	r2, [r3, #24]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	699a      	ldr	r2, [r3, #24]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6999      	ldr	r1, [r3, #24]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	021a      	lsls	r2, r3, #8
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	619a      	str	r2, [r3, #24]
      break;
 80098a8:	e043      	b.n	8009932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fc05 	bl	800a0c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	69da      	ldr	r2, [r3, #28]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f042 0208 	orr.w	r2, r2, #8
 80098c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	69da      	ldr	r2, [r3, #28]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 0204 	bic.w	r2, r2, #4
 80098d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	69d9      	ldr	r1, [r3, #28]
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	691a      	ldr	r2, [r3, #16]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	430a      	orrs	r2, r1
 80098e6:	61da      	str	r2, [r3, #28]
      break;
 80098e8:	e023      	b.n	8009932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68b9      	ldr	r1, [r7, #8]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fc4f 	bl	800a194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	69da      	ldr	r2, [r3, #28]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	69da      	ldr	r2, [r3, #28]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69d9      	ldr	r1, [r3, #28]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	021a      	lsls	r2, r3, #8
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	61da      	str	r2, [r3, #28]
      break;
 800992a:	e002      	b.n	8009932 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	75fb      	strb	r3, [r7, #23]
      break;
 8009930:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800993a:	7dfb      	ldrb	r3, [r7, #23]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009958:	2b01      	cmp	r3, #1
 800995a:	d101      	bne.n	8009960 <HAL_TIM_ConfigClockSource+0x1c>
 800995c:	2302      	movs	r3, #2
 800995e:	e0b4      	b.n	8009aca <HAL_TIM_ConfigClockSource+0x186>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800997e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009998:	d03e      	beq.n	8009a18 <HAL_TIM_ConfigClockSource+0xd4>
 800999a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800999e:	f200 8087 	bhi.w	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a6:	f000 8086 	beq.w	8009ab6 <HAL_TIM_ConfigClockSource+0x172>
 80099aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ae:	d87f      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099b0:	2b70      	cmp	r3, #112	; 0x70
 80099b2:	d01a      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0xa6>
 80099b4:	2b70      	cmp	r3, #112	; 0x70
 80099b6:	d87b      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099b8:	2b60      	cmp	r3, #96	; 0x60
 80099ba:	d050      	beq.n	8009a5e <HAL_TIM_ConfigClockSource+0x11a>
 80099bc:	2b60      	cmp	r3, #96	; 0x60
 80099be:	d877      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099c0:	2b50      	cmp	r3, #80	; 0x50
 80099c2:	d03c      	beq.n	8009a3e <HAL_TIM_ConfigClockSource+0xfa>
 80099c4:	2b50      	cmp	r3, #80	; 0x50
 80099c6:	d873      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099c8:	2b40      	cmp	r3, #64	; 0x40
 80099ca:	d058      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x13a>
 80099cc:	2b40      	cmp	r3, #64	; 0x40
 80099ce:	d86f      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099d0:	2b30      	cmp	r3, #48	; 0x30
 80099d2:	d064      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x15a>
 80099d4:	2b30      	cmp	r3, #48	; 0x30
 80099d6:	d86b      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099d8:	2b20      	cmp	r3, #32
 80099da:	d060      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x15a>
 80099dc:	2b20      	cmp	r3, #32
 80099de:	d867      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d05c      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x15a>
 80099e4:	2b10      	cmp	r3, #16
 80099e6:	d05a      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x15a>
 80099e8:	e062      	b.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6818      	ldr	r0, [r3, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	6899      	ldr	r1, [r3, #8]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	f000 fc95 	bl	800a328 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	609a      	str	r2, [r3, #8]
      break;
 8009a16:	e04f      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6818      	ldr	r0, [r3, #0]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	6899      	ldr	r1, [r3, #8]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	f000 fc7e 	bl	800a328 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	689a      	ldr	r2, [r3, #8]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a3a:	609a      	str	r2, [r3, #8]
      break;
 8009a3c:	e03c      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	6859      	ldr	r1, [r3, #4]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f000 fbf2 	bl	800a234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2150      	movs	r1, #80	; 0x50
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fc4b 	bl	800a2f2 <TIM_ITRx_SetConfig>
      break;
 8009a5c:	e02c      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	6859      	ldr	r1, [r3, #4]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f000 fc11 	bl	800a292 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2160      	movs	r1, #96	; 0x60
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fc3b 	bl	800a2f2 <TIM_ITRx_SetConfig>
      break;
 8009a7c:	e01c      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6818      	ldr	r0, [r3, #0]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	6859      	ldr	r1, [r3, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f000 fbd2 	bl	800a234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2140      	movs	r1, #64	; 0x40
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 fc2b 	bl	800a2f2 <TIM_ITRx_SetConfig>
      break;
 8009a9c:	e00c      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	f000 fc22 	bl	800a2f2 <TIM_ITRx_SetConfig>
      break;
 8009aae:	e003      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab4:	e000      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009ada:	bf00      	nop
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b083      	sub	sp, #12
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009aee:	bf00      	nop
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b02:	bf00      	nop
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b083      	sub	sp, #12
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009b16:	bf00      	nop
 8009b18:	370c      	adds	r7, #12
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b083      	sub	sp, #12
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b2a:	bf00      	nop
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b083      	sub	sp, #12
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009b3e:	bf00      	nop
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b083      	sub	sp, #12
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b52:	bf00      	nop
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b083      	sub	sp, #12
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009b66:	bf00      	nop
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009b7a:	bf00      	nop
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
	...

08009b88 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	460b      	mov	r3, r1
 8009b92:	607a      	str	r2, [r7, #4]
 8009b94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e135      	b.n	8009e10 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d101      	bne.n	8009bb2 <HAL_TIM_RegisterCallback+0x2a>
 8009bae:	2302      	movs	r3, #2
 8009bb0:	e12e      	b.n	8009e10 <HAL_TIM_RegisterCallback+0x288>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	f040 80ba 	bne.w	8009d3c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009bc8:	7afb      	ldrb	r3, [r7, #11]
 8009bca:	2b1a      	cmp	r3, #26
 8009bcc:	f200 80b3 	bhi.w	8009d36 <HAL_TIM_RegisterCallback+0x1ae>
 8009bd0:	a201      	add	r2, pc, #4	; (adr r2, 8009bd8 <HAL_TIM_RegisterCallback+0x50>)
 8009bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd6:	bf00      	nop
 8009bd8:	08009c45 	.word	0x08009c45
 8009bdc:	08009c4d 	.word	0x08009c4d
 8009be0:	08009c55 	.word	0x08009c55
 8009be4:	08009c5d 	.word	0x08009c5d
 8009be8:	08009c65 	.word	0x08009c65
 8009bec:	08009c6d 	.word	0x08009c6d
 8009bf0:	08009c75 	.word	0x08009c75
 8009bf4:	08009c7d 	.word	0x08009c7d
 8009bf8:	08009c85 	.word	0x08009c85
 8009bfc:	08009c8d 	.word	0x08009c8d
 8009c00:	08009c95 	.word	0x08009c95
 8009c04:	08009c9d 	.word	0x08009c9d
 8009c08:	08009ca5 	.word	0x08009ca5
 8009c0c:	08009cad 	.word	0x08009cad
 8009c10:	08009cb5 	.word	0x08009cb5
 8009c14:	08009cbf 	.word	0x08009cbf
 8009c18:	08009cc9 	.word	0x08009cc9
 8009c1c:	08009cd3 	.word	0x08009cd3
 8009c20:	08009cdd 	.word	0x08009cdd
 8009c24:	08009ce7 	.word	0x08009ce7
 8009c28:	08009cf1 	.word	0x08009cf1
 8009c2c:	08009cfb 	.word	0x08009cfb
 8009c30:	08009d05 	.word	0x08009d05
 8009c34:	08009d0f 	.word	0x08009d0f
 8009c38:	08009d19 	.word	0x08009d19
 8009c3c:	08009d23 	.word	0x08009d23
 8009c40:	08009d2d 	.word	0x08009d2d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009c4a:	e0dc      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009c52:	e0d8      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009c5a:	e0d4      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009c62:	e0d0      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009c6a:	e0cc      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009c72:	e0c8      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009c7a:	e0c4      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009c82:	e0c0      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009c8a:	e0bc      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009c92:	e0b8      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009c9a:	e0b4      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009ca2:	e0b0      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009caa:	e0ac      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009cb2:	e0a8      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009cbc:	e0a3      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009cc6:	e09e      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009cd0:	e099      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009cda:	e094      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009ce4:	e08f      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009cee:	e08a      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009cf8:	e085      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009d02:	e080      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009d0c:	e07b      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009d16:	e076      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009d20:	e071      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009d2a:	e06c      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009d34:	e067      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	75fb      	strb	r3, [r7, #23]
        break;
 8009d3a:	e064      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d15c      	bne.n	8009e02 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8009d48:	7afb      	ldrb	r3, [r7, #11]
 8009d4a:	2b0d      	cmp	r3, #13
 8009d4c:	d856      	bhi.n	8009dfc <HAL_TIM_RegisterCallback+0x274>
 8009d4e:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <HAL_TIM_RegisterCallback+0x1cc>)
 8009d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d54:	08009d8d 	.word	0x08009d8d
 8009d58:	08009d95 	.word	0x08009d95
 8009d5c:	08009d9d 	.word	0x08009d9d
 8009d60:	08009da5 	.word	0x08009da5
 8009d64:	08009dad 	.word	0x08009dad
 8009d68:	08009db5 	.word	0x08009db5
 8009d6c:	08009dbd 	.word	0x08009dbd
 8009d70:	08009dc5 	.word	0x08009dc5
 8009d74:	08009dcd 	.word	0x08009dcd
 8009d78:	08009dd5 	.word	0x08009dd5
 8009d7c:	08009ddd 	.word	0x08009ddd
 8009d80:	08009de5 	.word	0x08009de5
 8009d84:	08009ded 	.word	0x08009ded
 8009d88:	08009df5 	.word	0x08009df5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009d92:	e038      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009d9a:	e034      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009da2:	e030      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009daa:	e02c      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009db2:	e028      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009dba:	e024      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009dc2:	e020      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009dca:	e01c      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009dd2:	e018      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009dda:	e014      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009de2:	e010      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009dea:	e00c      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009df2:	e008      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009dfa:	e004      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	75fb      	strb	r3, [r7, #23]
        break;
 8009e00:	e001      	b.n	8009e06 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	371c      	adds	r7, #28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a34      	ldr	r2, [pc, #208]	; (8009f00 <TIM_Base_SetConfig+0xe4>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d00f      	beq.n	8009e54 <TIM_Base_SetConfig+0x38>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e3a:	d00b      	beq.n	8009e54 <TIM_Base_SetConfig+0x38>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a31      	ldr	r2, [pc, #196]	; (8009f04 <TIM_Base_SetConfig+0xe8>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d007      	beq.n	8009e54 <TIM_Base_SetConfig+0x38>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a30      	ldr	r2, [pc, #192]	; (8009f08 <TIM_Base_SetConfig+0xec>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d003      	beq.n	8009e54 <TIM_Base_SetConfig+0x38>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a2f      	ldr	r2, [pc, #188]	; (8009f0c <TIM_Base_SetConfig+0xf0>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d108      	bne.n	8009e66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a25      	ldr	r2, [pc, #148]	; (8009f00 <TIM_Base_SetConfig+0xe4>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d01b      	beq.n	8009ea6 <TIM_Base_SetConfig+0x8a>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e74:	d017      	beq.n	8009ea6 <TIM_Base_SetConfig+0x8a>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a22      	ldr	r2, [pc, #136]	; (8009f04 <TIM_Base_SetConfig+0xe8>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d013      	beq.n	8009ea6 <TIM_Base_SetConfig+0x8a>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a21      	ldr	r2, [pc, #132]	; (8009f08 <TIM_Base_SetConfig+0xec>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d00f      	beq.n	8009ea6 <TIM_Base_SetConfig+0x8a>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a20      	ldr	r2, [pc, #128]	; (8009f0c <TIM_Base_SetConfig+0xf0>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d00b      	beq.n	8009ea6 <TIM_Base_SetConfig+0x8a>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a1f      	ldr	r2, [pc, #124]	; (8009f10 <TIM_Base_SetConfig+0xf4>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d007      	beq.n	8009ea6 <TIM_Base_SetConfig+0x8a>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a1e      	ldr	r2, [pc, #120]	; (8009f14 <TIM_Base_SetConfig+0xf8>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d003      	beq.n	8009ea6 <TIM_Base_SetConfig+0x8a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a1d      	ldr	r2, [pc, #116]	; (8009f18 <TIM_Base_SetConfig+0xfc>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d108      	bne.n	8009eb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	689a      	ldr	r2, [r3, #8]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a08      	ldr	r2, [pc, #32]	; (8009f00 <TIM_Base_SetConfig+0xe4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d103      	bne.n	8009eec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	691a      	ldr	r2, [r3, #16]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	615a      	str	r2, [r3, #20]
}
 8009ef2:	bf00      	nop
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	40010000 	.word	0x40010000
 8009f04:	40000400 	.word	0x40000400
 8009f08:	40000800 	.word	0x40000800
 8009f0c:	40000c00 	.word	0x40000c00
 8009f10:	40014000 	.word	0x40014000
 8009f14:	40014400 	.word	0x40014400
 8009f18:	40014800 	.word	0x40014800

08009f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	f023 0201 	bic.w	r2, r3, #1
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 0303 	bic.w	r3, r3, #3
 8009f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	f023 0302 	bic.w	r3, r3, #2
 8009f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a1c      	ldr	r2, [pc, #112]	; (8009fe4 <TIM_OC1_SetConfig+0xc8>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d10c      	bne.n	8009f92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f023 0308 	bic.w	r3, r3, #8
 8009f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	697a      	ldr	r2, [r7, #20]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f023 0304 	bic.w	r3, r3, #4
 8009f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a13      	ldr	r2, [pc, #76]	; (8009fe4 <TIM_OC1_SetConfig+0xc8>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d111      	bne.n	8009fbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	621a      	str	r2, [r3, #32]
}
 8009fd8:	bf00      	nop
 8009fda:	371c      	adds	r7, #28
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	40010000 	.word	0x40010000

08009fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	f023 0210 	bic.w	r2, r3, #16
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	021b      	lsls	r3, r3, #8
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4313      	orrs	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	f023 0320 	bic.w	r3, r3, #32
 800a032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	011b      	lsls	r3, r3, #4
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a1e      	ldr	r2, [pc, #120]	; (800a0bc <TIM_OC2_SetConfig+0xd4>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d10d      	bne.n	800a064 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a04e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	011b      	lsls	r3, r3, #4
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	4313      	orrs	r3, r2
 800a05a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a062:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a15      	ldr	r2, [pc, #84]	; (800a0bc <TIM_OC2_SetConfig+0xd4>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d113      	bne.n	800a094 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a07a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	4313      	orrs	r3, r2
 800a086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	4313      	orrs	r3, r2
 800a092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	621a      	str	r2, [r3, #32]
}
 800a0ae:	bf00      	nop
 800a0b0:	371c      	adds	r7, #28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	40010000 	.word	0x40010000

0800a0c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	69db      	ldr	r3, [r3, #28]
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f023 0303 	bic.w	r3, r3, #3
 800a0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	021b      	lsls	r3, r3, #8
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	4313      	orrs	r3, r2
 800a114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a1d      	ldr	r2, [pc, #116]	; (800a190 <TIM_OC3_SetConfig+0xd0>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d10d      	bne.n	800a13a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	021b      	lsls	r3, r3, #8
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	4313      	orrs	r3, r2
 800a130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a14      	ldr	r2, [pc, #80]	; (800a190 <TIM_OC3_SetConfig+0xd0>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d113      	bne.n	800a16a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	011b      	lsls	r3, r3, #4
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	011b      	lsls	r3, r3, #4
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	4313      	orrs	r3, r2
 800a168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	621a      	str	r2, [r3, #32]
}
 800a184:	bf00      	nop
 800a186:	371c      	adds	r7, #28
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	40010000 	.word	0x40010000

0800a194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a1b      	ldr	r3, [r3, #32]
 800a1ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	69db      	ldr	r3, [r3, #28]
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	021b      	lsls	r3, r3, #8
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	031b      	lsls	r3, r3, #12
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a10      	ldr	r2, [pc, #64]	; (800a230 <TIM_OC4_SetConfig+0x9c>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d109      	bne.n	800a208 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	019b      	lsls	r3, r3, #6
 800a202:	697a      	ldr	r2, [r7, #20]
 800a204:	4313      	orrs	r3, r2
 800a206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	621a      	str	r2, [r3, #32]
}
 800a222:	bf00      	nop
 800a224:	371c      	adds	r7, #28
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	40010000 	.word	0x40010000

0800a234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	f023 0201 	bic.w	r2, r3, #1
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a25e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	4313      	orrs	r3, r2
 800a268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f023 030a 	bic.w	r3, r3, #10
 800a270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	4313      	orrs	r3, r2
 800a278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	693a      	ldr	r2, [r7, #16]
 800a27e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	621a      	str	r2, [r3, #32]
}
 800a286:	bf00      	nop
 800a288:	371c      	adds	r7, #28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a292:	b480      	push	{r7}
 800a294:	b087      	sub	sp, #28
 800a296:	af00      	add	r7, sp, #0
 800a298:	60f8      	str	r0, [r7, #12]
 800a29a:	60b9      	str	r1, [r7, #8]
 800a29c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	f023 0210 	bic.w	r2, r3, #16
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6a1b      	ldr	r3, [r3, #32]
 800a2b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	031b      	lsls	r3, r3, #12
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a2ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	621a      	str	r2, [r3, #32]
}
 800a2e6:	bf00      	nop
 800a2e8:	371c      	adds	r7, #28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b085      	sub	sp, #20
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4313      	orrs	r3, r2
 800a310:	f043 0307 	orr.w	r3, r3, #7
 800a314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	609a      	str	r2, [r3, #8]
}
 800a31c:	bf00      	nop
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a328:	b480      	push	{r7}
 800a32a:	b087      	sub	sp, #28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
 800a334:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a342:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	021a      	lsls	r2, r3, #8
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	431a      	orrs	r2, r3
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	4313      	orrs	r3, r2
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	4313      	orrs	r3, r2
 800a354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	609a      	str	r2, [r3, #8]
}
 800a35c:	bf00      	nop
 800a35e:	371c      	adds	r7, #28
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a368:	b480      	push	{r7}
 800a36a:	b087      	sub	sp, #28
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	f003 031f 	and.w	r3, r3, #31
 800a37a:	2201      	movs	r2, #1
 800a37c:	fa02 f303 	lsl.w	r3, r2, r3
 800a380:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6a1a      	ldr	r2, [r3, #32]
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	43db      	mvns	r3, r3
 800a38a:	401a      	ands	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6a1a      	ldr	r2, [r3, #32]
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	f003 031f 	and.w	r3, r3, #31
 800a39a:	6879      	ldr	r1, [r7, #4]
 800a39c:	fa01 f303 	lsl.w	r3, r1, r3
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	621a      	str	r2, [r3, #32]
}
 800a3a6:	bf00      	nop
 800a3a8:	371c      	adds	r7, #28
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
	...

0800a3b4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a1c      	ldr	r2, [pc, #112]	; (800a430 <TIM_ResetCallback+0x7c>)
 800a3c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a1b      	ldr	r2, [pc, #108]	; (800a434 <TIM_ResetCallback+0x80>)
 800a3c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a1a      	ldr	r2, [pc, #104]	; (800a438 <TIM_ResetCallback+0x84>)
 800a3d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a19      	ldr	r2, [pc, #100]	; (800a43c <TIM_ResetCallback+0x88>)
 800a3d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a18      	ldr	r2, [pc, #96]	; (800a440 <TIM_ResetCallback+0x8c>)
 800a3e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a17      	ldr	r2, [pc, #92]	; (800a444 <TIM_ResetCallback+0x90>)
 800a3e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a16      	ldr	r2, [pc, #88]	; (800a448 <TIM_ResetCallback+0x94>)
 800a3f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a15      	ldr	r2, [pc, #84]	; (800a44c <TIM_ResetCallback+0x98>)
 800a3f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a14      	ldr	r2, [pc, #80]	; (800a450 <TIM_ResetCallback+0x9c>)
 800a400:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a13      	ldr	r2, [pc, #76]	; (800a454 <TIM_ResetCallback+0xa0>)
 800a408:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a12      	ldr	r2, [pc, #72]	; (800a458 <TIM_ResetCallback+0xa4>)
 800a410:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a11      	ldr	r2, [pc, #68]	; (800a45c <TIM_ResetCallback+0xa8>)
 800a418:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a10      	ldr	r2, [pc, #64]	; (800a460 <TIM_ResetCallback+0xac>)
 800a420:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	08003e69 	.word	0x08003e69
 800a434:	08009ad3 	.word	0x08009ad3
 800a438:	08009b4b 	.word	0x08009b4b
 800a43c:	08009b5f 	.word	0x08009b5f
 800a440:	08009afb 	.word	0x08009afb
 800a444:	08009b0f 	.word	0x08009b0f
 800a448:	08009ae7 	.word	0x08009ae7
 800a44c:	08009b23 	.word	0x08009b23
 800a450:	08009b37 	.word	0x08009b37
 800a454:	08009b73 	.word	0x08009b73
 800a458:	0800a5e5 	.word	0x0800a5e5
 800a45c:	0800a5f9 	.word	0x0800a5f9
 800a460:	0800a60d 	.word	0x0800a60d

0800a464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a474:	2b01      	cmp	r3, #1
 800a476:	d101      	bne.n	800a47c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a478:	2302      	movs	r3, #2
 800a47a:	e050      	b.n	800a51e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2202      	movs	r2, #2
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a1c      	ldr	r2, [pc, #112]	; (800a52c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d018      	beq.n	800a4f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4c8:	d013      	beq.n	800a4f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a18      	ldr	r2, [pc, #96]	; (800a530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d00e      	beq.n	800a4f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a16      	ldr	r2, [pc, #88]	; (800a534 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d009      	beq.n	800a4f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a15      	ldr	r2, [pc, #84]	; (800a538 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d004      	beq.n	800a4f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a13      	ldr	r2, [pc, #76]	; (800a53c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d10c      	bne.n	800a50c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	4313      	orrs	r3, r2
 800a502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3714      	adds	r7, #20
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	40010000 	.word	0x40010000
 800a530:	40000400 	.word	0x40000400
 800a534:	40000800 	.word	0x40000800
 800a538:	40000c00 	.word	0x40000c00
 800a53c:	40014000 	.word	0x40014000

0800a540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a54a:	2300      	movs	r3, #0
 800a54c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a554:	2b01      	cmp	r3, #1
 800a556:	d101      	bne.n	800a55c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a558:	2302      	movs	r3, #2
 800a55a:	e03d      	b.n	800a5d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	4313      	orrs	r3, r2
 800a570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4313      	orrs	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	695b      	ldr	r3, [r3, #20]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	69db      	ldr	r3, [r3, #28]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e04a      	b.n	800a6c8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d111      	bne.n	800a662 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fd2c 	bl	800b0a4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a650:	2b00      	cmp	r3, #0
 800a652:	d102      	bne.n	800a65a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a1e      	ldr	r2, [pc, #120]	; (800a6d0 <HAL_UART_Init+0xb0>)
 800a658:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2224      	movs	r2, #36	; 0x24
 800a666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68da      	ldr	r2, [r3, #12]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a678:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fff6 	bl	800b66c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	691a      	ldr	r2, [r3, #16]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a68e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	695a      	ldr	r2, [r3, #20]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a69e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68da      	ldr	r2, [r3, #12]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	08004869 	.word	0x08004869

0800a6d4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b087      	sub	sp, #28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d107      	bne.n	800a6fc <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f0:	f043 0220 	orr.w	r2, r3, #32
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e08c      	b.n	800a816 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a702:	2b01      	cmp	r3, #1
 800a704:	d101      	bne.n	800a70a <HAL_UART_RegisterCallback+0x36>
 800a706:	2302      	movs	r3, #2
 800a708:	e085      	b.n	800a816 <HAL_UART_RegisterCallback+0x142>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b20      	cmp	r3, #32
 800a71c:	d151      	bne.n	800a7c2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a71e:	7afb      	ldrb	r3, [r7, #11]
 800a720:	2b0c      	cmp	r3, #12
 800a722:	d845      	bhi.n	800a7b0 <HAL_UART_RegisterCallback+0xdc>
 800a724:	a201      	add	r2, pc, #4	; (adr r2, 800a72c <HAL_UART_RegisterCallback+0x58>)
 800a726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72a:	bf00      	nop
 800a72c:	0800a761 	.word	0x0800a761
 800a730:	0800a769 	.word	0x0800a769
 800a734:	0800a771 	.word	0x0800a771
 800a738:	0800a779 	.word	0x0800a779
 800a73c:	0800a781 	.word	0x0800a781
 800a740:	0800a789 	.word	0x0800a789
 800a744:	0800a791 	.word	0x0800a791
 800a748:	0800a799 	.word	0x0800a799
 800a74c:	0800a7b1 	.word	0x0800a7b1
 800a750:	0800a7b1 	.word	0x0800a7b1
 800a754:	0800a7b1 	.word	0x0800a7b1
 800a758:	0800a7a1 	.word	0x0800a7a1
 800a75c:	0800a7a9 	.word	0x0800a7a9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800a766:	e051      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a76e:	e04d      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a776:	e049      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a77e:	e045      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a786:	e041      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a78e:	e03d      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a796:	e039      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a79e:	e035      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a7a6:	e031      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a7ae:	e02d      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	f043 0220 	orr.w	r2, r3, #32
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	75fb      	strb	r3, [r7, #23]
        break;
 800a7c0:	e024      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d116      	bne.n	800a7fc <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a7ce:	7afb      	ldrb	r3, [r7, #11]
 800a7d0:	2b0b      	cmp	r3, #11
 800a7d2:	d002      	beq.n	800a7da <HAL_UART_RegisterCallback+0x106>
 800a7d4:	2b0c      	cmp	r3, #12
 800a7d6:	d004      	beq.n	800a7e2 <HAL_UART_RegisterCallback+0x10e>
 800a7d8:	e007      	b.n	800a7ea <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a7e0:	e014      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a7e8:	e010      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ee:	f043 0220 	orr.w	r2, r3, #32
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	75fb      	strb	r3, [r7, #23]
        break;
 800a7fa:	e007      	b.n	800a80c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a800:	f043 0220 	orr.w	r2, r3, #32
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a814:	7dfb      	ldrb	r3, [r7, #23]
}
 800a816:	4618      	mov	r0, r3
 800a818:	371c      	adds	r7, #28
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop

0800a824 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	4613      	mov	r3, r2
 800a830:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b20      	cmp	r3, #32
 800a83c:	d11d      	bne.n	800a87a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <HAL_UART_Receive_IT+0x26>
 800a844:	88fb      	ldrh	r3, [r7, #6]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e016      	b.n	800a87c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a854:	2b01      	cmp	r3, #1
 800a856:	d101      	bne.n	800a85c <HAL_UART_Receive_IT+0x38>
 800a858:	2302      	movs	r3, #2
 800a85a:	e00f      	b.n	800a87c <HAL_UART_Receive_IT+0x58>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a86a:	88fb      	ldrh	r3, [r7, #6]
 800a86c:	461a      	mov	r2, r3
 800a86e:	68b9      	ldr	r1, [r7, #8]
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f000 fcf7 	bl	800b264 <UART_Start_Receive_IT>
 800a876:	4603      	mov	r3, r0
 800a878:	e000      	b.n	800a87c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a87a:	2302      	movs	r3, #2
  }
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b08c      	sub	sp, #48	; 0x30
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	4613      	mov	r3, r2
 800a890:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b20      	cmp	r3, #32
 800a89c:	d165      	bne.n	800a96a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d002      	beq.n	800a8aa <HAL_UART_Transmit_DMA+0x26>
 800a8a4:	88fb      	ldrh	r3, [r7, #6]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e05e      	b.n	800a96c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d101      	bne.n	800a8bc <HAL_UART_Transmit_DMA+0x38>
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	e057      	b.n	800a96c <HAL_UART_Transmit_DMA+0xe8>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	88fa      	ldrh	r2, [r7, #6]
 800a8ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	88fa      	ldrh	r2, [r7, #6]
 800a8d4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2221      	movs	r2, #33	; 0x21
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e8:	4a22      	ldr	r2, [pc, #136]	; (800a974 <HAL_UART_Transmit_DMA+0xf0>)
 800a8ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f0:	4a21      	ldr	r2, [pc, #132]	; (800a978 <HAL_UART_Transmit_DMA+0xf4>)
 800a8f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f8:	4a20      	ldr	r2, [pc, #128]	; (800a97c <HAL_UART_Transmit_DMA+0xf8>)
 800a8fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a900:	2200      	movs	r2, #0
 800a902:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a904:	f107 0308 	add.w	r3, r7, #8
 800a908:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a910:	6819      	ldr	r1, [r3, #0]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3304      	adds	r3, #4
 800a918:	461a      	mov	r2, r3
 800a91a:	88fb      	ldrh	r3, [r7, #6]
 800a91c:	f7fb f848 	bl	80059b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a928:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3314      	adds	r3, #20
 800a938:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	e853 3f00 	ldrex	r3, [r3]
 800a940:	617b      	str	r3, [r7, #20]
   return(result);
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a948:	62bb      	str	r3, [r7, #40]	; 0x28
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3314      	adds	r3, #20
 800a950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a952:	627a      	str	r2, [r7, #36]	; 0x24
 800a954:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a956:	6a39      	ldr	r1, [r7, #32]
 800a958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a95a:	e841 2300 	strex	r3, r2, [r1]
 800a95e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1e5      	bne.n	800a932 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a966:	2300      	movs	r3, #0
 800a968:	e000      	b.n	800a96c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a96a:	2302      	movs	r3, #2
  }
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3730      	adds	r7, #48	; 0x30
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	0800b115 	.word	0x0800b115
 800a978:	0800b1b1 	.word	0x0800b1b1
 800a97c:	0800b1cf 	.word	0x0800b1cf

0800a980 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b09a      	sub	sp, #104	; 0x68
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	330c      	adds	r3, #12
 800a98e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a992:	e853 3f00 	ldrex	r3, [r3]
 800a996:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a99a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a99e:	667b      	str	r3, [r7, #100]	; 0x64
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	330c      	adds	r3, #12
 800a9a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a9a8:	657a      	str	r2, [r7, #84]	; 0x54
 800a9aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a9ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9b0:	e841 2300 	strex	r3, r2, [r1]
 800a9b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1e5      	bne.n	800a988 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3314      	adds	r3, #20
 800a9c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c6:	e853 3f00 	ldrex	r3, [r3]
 800a9ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ce:	f023 0301 	bic.w	r3, r3, #1
 800a9d2:	663b      	str	r3, [r7, #96]	; 0x60
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3314      	adds	r3, #20
 800a9da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9dc:	643a      	str	r2, [r7, #64]	; 0x40
 800a9de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9e4:	e841 2300 	strex	r3, r2, [r1]
 800a9e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1e5      	bne.n	800a9bc <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d119      	bne.n	800aa2c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	330c      	adds	r3, #12
 800a9fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa00:	6a3b      	ldr	r3, [r7, #32]
 800aa02:	e853 3f00 	ldrex	r3, [r3]
 800aa06:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	f023 0310 	bic.w	r3, r3, #16
 800aa0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	330c      	adds	r3, #12
 800aa16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa18:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa20:	e841 2300 	strex	r3, r2, [r1]
 800aa24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e5      	bne.n	800a9f8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa36:	2b40      	cmp	r3, #64	; 0x40
 800aa38:	d136      	bne.n	800aaa8 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	3314      	adds	r3, #20
 800aa40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	e853 3f00 	ldrex	r3, [r3]
 800aa48:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa50:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3314      	adds	r3, #20
 800aa58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa5a:	61ba      	str	r2, [r7, #24]
 800aa5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5e:	6979      	ldr	r1, [r7, #20]
 800aa60:	69ba      	ldr	r2, [r7, #24]
 800aa62:	e841 2300 	strex	r3, r2, [r1]
 800aa66:	613b      	str	r3, [r7, #16]
   return(result);
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1e5      	bne.n	800aa3a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d018      	beq.n	800aaa8 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fa ffec 	bl	8005a60 <HAL_DMA_Abort>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00c      	beq.n	800aaa8 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fb fa0e 	bl	8005eb4 <HAL_DMA_GetError>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b20      	cmp	r3, #32
 800aa9c:	d104      	bne.n	800aaa8 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2210      	movs	r2, #16
 800aaa2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e00a      	b.n	800aabe <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2220      	movs	r2, #32
 800aab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3768      	adds	r7, #104	; 0x68
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b0ba      	sub	sp, #232	; 0xe8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aafa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aafe:	f003 030f 	and.w	r3, r3, #15
 800ab02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ab06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10f      	bne.n	800ab2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab12:	f003 0320 	and.w	r3, r3, #32
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d009      	beq.n	800ab2e <HAL_UART_IRQHandler+0x66>
 800ab1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab1e:	f003 0320 	and.w	r3, r3, #32
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d003      	beq.n	800ab2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fce3 	bl	800b4f2 <UART_Receive_IT>
      return;
 800ab2c:	e25b      	b.n	800afe6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ab2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f000 80e1 	beq.w	800acfa <HAL_UART_IRQHandler+0x232>
 800ab38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d106      	bne.n	800ab52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ab44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 80d4 	beq.w	800acfa <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ab52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00b      	beq.n	800ab76 <HAL_UART_IRQHandler+0xae>
 800ab5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d005      	beq.n	800ab76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6e:	f043 0201 	orr.w	r2, r3, #1
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab7a:	f003 0304 	and.w	r3, r3, #4
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00b      	beq.n	800ab9a <HAL_UART_IRQHandler+0xd2>
 800ab82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d005      	beq.n	800ab9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab92:	f043 0202 	orr.w	r2, r3, #2
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab9e:	f003 0302 	and.w	r3, r3, #2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00b      	beq.n	800abbe <HAL_UART_IRQHandler+0xf6>
 800aba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d005      	beq.n	800abbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb6:	f043 0204 	orr.w	r2, r3, #4
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800abbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abc2:	f003 0308 	and.w	r3, r3, #8
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d011      	beq.n	800abee <HAL_UART_IRQHandler+0x126>
 800abca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abce:	f003 0320 	and.w	r3, r3, #32
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d105      	bne.n	800abe2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800abd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d005      	beq.n	800abee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe6:	f043 0208 	orr.w	r2, r3, #8
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f000 81f2 	beq.w	800afdc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800abf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abfc:	f003 0320 	and.w	r3, r3, #32
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d008      	beq.n	800ac16 <HAL_UART_IRQHandler+0x14e>
 800ac04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac08:	f003 0320 	and.w	r3, r3, #32
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fc6e 	bl	800b4f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac20:	2b40      	cmp	r3, #64	; 0x40
 800ac22:	bf0c      	ite	eq
 800ac24:	2301      	moveq	r3, #1
 800ac26:	2300      	movne	r3, #0
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac32:	f003 0308 	and.w	r3, r3, #8
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d103      	bne.n	800ac42 <HAL_UART_IRQHandler+0x17a>
 800ac3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d051      	beq.n	800ace6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fb74 	bl	800b330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac52:	2b40      	cmp	r3, #64	; 0x40
 800ac54:	d142      	bne.n	800acdc <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3314      	adds	r3, #20
 800ac5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac64:	e853 3f00 	ldrex	r3, [r3]
 800ac68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ac6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3314      	adds	r3, #20
 800ac7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ac82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ac86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ac8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac92:	e841 2300 	strex	r3, r2, [r1]
 800ac96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ac9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1d9      	bne.n	800ac56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d013      	beq.n	800acd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	4a7f      	ldr	r2, [pc, #508]	; (800aeac <HAL_UART_IRQHandler+0x3e4>)
 800acb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fa ff42 	bl	8005b40 <HAL_DMA_Abort_IT>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d019      	beq.n	800acf6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800accc:	4610      	mov	r0, r2
 800acce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acd0:	e011      	b.n	800acf6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acda:	e00c      	b.n	800acf6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ace4:	e007      	b.n	800acf6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800acf4:	e172      	b.n	800afdc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf6:	bf00      	nop
    return;
 800acf8:	e170      	b.n	800afdc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	f040 814c 	bne.w	800af9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ad04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad08:	f003 0310 	and.w	r3, r3, #16
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f000 8145 	beq.w	800af9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ad12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad16:	f003 0310 	and.w	r3, r3, #16
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 813e 	beq.w	800af9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad20:	2300      	movs	r3, #0
 800ad22:	60bb      	str	r3, [r7, #8]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	60bb      	str	r3, [r7, #8]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	60bb      	str	r3, [r7, #8]
 800ad34:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	695b      	ldr	r3, [r3, #20]
 800ad3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad40:	2b40      	cmp	r3, #64	; 0x40
 800ad42:	f040 80b5 	bne.w	800aeb0 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f000 8142 	beq.w	800afe0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad64:	429a      	cmp	r2, r3
 800ad66:	f080 813b 	bcs.w	800afe0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad70:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad7c:	f000 8088 	beq.w	800ae90 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	330c      	adds	r3, #12
 800ad86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad8e:	e853 3f00 	ldrex	r3, [r3]
 800ad92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ad96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	330c      	adds	r3, #12
 800ada8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800adac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800adb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800adb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800adbc:	e841 2300 	strex	r3, r2, [r1]
 800adc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800adc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1d9      	bne.n	800ad80 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	3314      	adds	r3, #20
 800add2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800add6:	e853 3f00 	ldrex	r3, [r3]
 800adda:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800addc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800adde:	f023 0301 	bic.w	r3, r3, #1
 800ade2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	3314      	adds	r3, #20
 800adec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800adf0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800adf4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800adf8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800adfc:	e841 2300 	strex	r3, r2, [r1]
 800ae00:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ae02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1e1      	bne.n	800adcc <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	3314      	adds	r3, #20
 800ae0e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae12:	e853 3f00 	ldrex	r3, [r3]
 800ae16:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ae18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3314      	adds	r3, #20
 800ae28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ae2c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ae2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae30:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ae32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ae34:	e841 2300 	strex	r3, r2, [r1]
 800ae38:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ae3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1e3      	bne.n	800ae08 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2220      	movs	r2, #32
 800ae44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	330c      	adds	r3, #12
 800ae54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae58:	e853 3f00 	ldrex	r3, [r3]
 800ae5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ae5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae60:	f023 0310 	bic.w	r3, r3, #16
 800ae64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	330c      	adds	r3, #12
 800ae6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ae72:	65ba      	str	r2, [r7, #88]	; 0x58
 800ae74:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae7a:	e841 2300 	strex	r3, r2, [r1]
 800ae7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1e3      	bne.n	800ae4e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fa fde8 	bl	8005a60 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800ae9c:	b292      	uxth	r2, r2
 800ae9e:	1a8a      	subs	r2, r1, r2
 800aea0:	b292      	uxth	r2, r2
 800aea2:	4611      	mov	r1, r2
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aea8:	e09a      	b.n	800afe0 <HAL_UART_IRQHandler+0x518>
 800aeaa:	bf00      	nop
 800aeac:	0800b3f7 	.word	0x0800b3f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 808c 	beq.w	800afe4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800aecc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 8087 	beq.w	800afe4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	330c      	adds	r3, #12
 800aedc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aeec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	330c      	adds	r3, #12
 800aef6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aefa:	647a      	str	r2, [r7, #68]	; 0x44
 800aefc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af02:	e841 2300 	strex	r3, r2, [r1]
 800af06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1e3      	bne.n	800aed6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3314      	adds	r3, #20
 800af14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	e853 3f00 	ldrex	r3, [r3]
 800af1c:	623b      	str	r3, [r7, #32]
   return(result);
 800af1e:	6a3b      	ldr	r3, [r7, #32]
 800af20:	f023 0301 	bic.w	r3, r3, #1
 800af24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3314      	adds	r3, #20
 800af2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800af32:	633a      	str	r2, [r7, #48]	; 0x30
 800af34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af3a:	e841 2300 	strex	r3, r2, [r1]
 800af3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1e3      	bne.n	800af0e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2220      	movs	r2, #32
 800af4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	330c      	adds	r3, #12
 800af5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	e853 3f00 	ldrex	r3, [r3]
 800af62:	60fb      	str	r3, [r7, #12]
   return(result);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f023 0310 	bic.w	r3, r3, #16
 800af6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	330c      	adds	r3, #12
 800af74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800af78:	61fa      	str	r2, [r7, #28]
 800af7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7c:	69b9      	ldr	r1, [r7, #24]
 800af7e:	69fa      	ldr	r2, [r7, #28]
 800af80:	e841 2300 	strex	r3, r2, [r1]
 800af84:	617b      	str	r3, [r7, #20]
   return(result);
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1e3      	bne.n	800af54 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af90:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800af94:	4611      	mov	r1, r2
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800af9a:	e023      	b.n	800afe4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800af9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d009      	beq.n	800afbc <HAL_UART_IRQHandler+0x4f4>
 800afa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d003      	beq.n	800afbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fa33 	bl	800b420 <UART_Transmit_IT>
    return;
 800afba:	e014      	b.n	800afe6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800afbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00e      	beq.n	800afe6 <HAL_UART_IRQHandler+0x51e>
 800afc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d008      	beq.n	800afe6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 fa73 	bl	800b4c0 <UART_EndTransmit_IT>
    return;
 800afda:	e004      	b.n	800afe6 <HAL_UART_IRQHandler+0x51e>
    return;
 800afdc:	bf00      	nop
 800afde:	e002      	b.n	800afe6 <HAL_UART_IRQHandler+0x51e>
      return;
 800afe0:	bf00      	nop
 800afe2:	e000      	b.n	800afe6 <HAL_UART_IRQHandler+0x51e>
      return;
 800afe4:	bf00      	nop
  }
}
 800afe6:	37e8      	adds	r7, #232	; 0xe8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a10      	ldr	r2, [pc, #64]	; (800b0f0 <UART_InitCallbacksToDefault+0x4c>)
 800b0b0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a0f      	ldr	r2, [pc, #60]	; (800b0f4 <UART_InitCallbacksToDefault+0x50>)
 800b0b6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a0f      	ldr	r2, [pc, #60]	; (800b0f8 <UART_InitCallbacksToDefault+0x54>)
 800b0bc:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a0e      	ldr	r2, [pc, #56]	; (800b0fc <UART_InitCallbacksToDefault+0x58>)
 800b0c2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a0e      	ldr	r2, [pc, #56]	; (800b100 <UART_InitCallbacksToDefault+0x5c>)
 800b0c8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a0d      	ldr	r2, [pc, #52]	; (800b104 <UART_InitCallbacksToDefault+0x60>)
 800b0ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4a0d      	ldr	r2, [pc, #52]	; (800b108 <UART_InitCallbacksToDefault+0x64>)
 800b0d4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a0c      	ldr	r2, [pc, #48]	; (800b10c <UART_InitCallbacksToDefault+0x68>)
 800b0da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a0c      	ldr	r2, [pc, #48]	; (800b110 <UART_InitCallbacksToDefault+0x6c>)
 800b0e0:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b0e2:	bf00      	nop
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	0800b001 	.word	0x0800b001
 800b0f4:	0800afed 	.word	0x0800afed
 800b0f8:	0800b029 	.word	0x0800b029
 800b0fc:	0800b015 	.word	0x0800b015
 800b100:	0800b03d 	.word	0x0800b03d
 800b104:	0800b051 	.word	0x0800b051
 800b108:	0800b065 	.word	0x0800b065
 800b10c:	0800b079 	.word	0x0800b079
 800b110:	0800b08d 	.word	0x0800b08d

0800b114 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b090      	sub	sp, #64	; 0x40
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b120:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d137      	bne.n	800b1a0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b132:	2200      	movs	r2, #0
 800b134:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	3314      	adds	r3, #20
 800b13c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b140:	e853 3f00 	ldrex	r3, [r3]
 800b144:	623b      	str	r3, [r7, #32]
   return(result);
 800b146:	6a3b      	ldr	r3, [r7, #32]
 800b148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b14c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3314      	adds	r3, #20
 800b154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b156:	633a      	str	r2, [r7, #48]	; 0x30
 800b158:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b15c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b15e:	e841 2300 	strex	r3, r2, [r1]
 800b162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1e5      	bne.n	800b136 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	330c      	adds	r3, #12
 800b170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	e853 3f00 	ldrex	r3, [r3]
 800b178:	60fb      	str	r3, [r7, #12]
   return(result);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b180:	637b      	str	r3, [r7, #52]	; 0x34
 800b182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	330c      	adds	r3, #12
 800b188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b18a:	61fa      	str	r2, [r7, #28]
 800b18c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18e:	69b9      	ldr	r1, [r7, #24]
 800b190:	69fa      	ldr	r2, [r7, #28]
 800b192:	e841 2300 	strex	r3, r2, [r1]
 800b196:	617b      	str	r3, [r7, #20]
   return(result);
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1e5      	bne.n	800b16a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b19e:	e003      	b.n	800b1a8 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800b1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b1a6:	4798      	blx	r3
}
 800b1a8:	bf00      	nop
 800b1aa:	3740      	adds	r7, #64	; 0x40
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1c6:	bf00      	nop
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b084      	sub	sp, #16
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	695b      	ldr	r3, [r3, #20]
 800b1e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ea:	2b80      	cmp	r3, #128	; 0x80
 800b1ec:	bf0c      	ite	eq
 800b1ee:	2301      	moveq	r3, #1
 800b1f0:	2300      	movne	r3, #0
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b21      	cmp	r3, #33	; 0x21
 800b200:	d108      	bne.n	800b214 <UART_DMAError+0x46>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d005      	beq.n	800b214 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2200      	movs	r2, #0
 800b20c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b20e:	68b8      	ldr	r0, [r7, #8]
 800b210:	f000 f866 	bl	800b2e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b21e:	2b40      	cmp	r3, #64	; 0x40
 800b220:	bf0c      	ite	eq
 800b222:	2301      	moveq	r3, #1
 800b224:	2300      	movne	r3, #0
 800b226:	b2db      	uxtb	r3, r3
 800b228:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b230:	b2db      	uxtb	r3, r3
 800b232:	2b22      	cmp	r3, #34	; 0x22
 800b234:	d108      	bne.n	800b248 <UART_DMAError+0x7a>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d005      	beq.n	800b248 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	2200      	movs	r2, #0
 800b240:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b242:	68b8      	ldr	r0, [r7, #8]
 800b244:	f000 f874 	bl	800b330 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24c:	f043 0210 	orr.w	r2, r3, #16
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b258:	68b8      	ldr	r0, [r7, #8]
 800b25a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b25c:	bf00      	nop
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	4613      	mov	r3, r2
 800b270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	88fa      	ldrh	r2, [r7, #6]
 800b27c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	88fa      	ldrh	r2, [r7, #6]
 800b282:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2200      	movs	r2, #0
 800b288:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2222      	movs	r2, #34	; 0x22
 800b28e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d007      	beq.n	800b2b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68da      	ldr	r2, [r3, #12]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	695a      	ldr	r2, [r3, #20]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f042 0201 	orr.w	r2, r2, #1
 800b2c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68da      	ldr	r2, [r3, #12]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f042 0220 	orr.w	r2, r2, #32
 800b2d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3714      	adds	r7, #20
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b089      	sub	sp, #36	; 0x24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	330c      	adds	r3, #12
 800b2ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	e853 3f00 	ldrex	r3, [r3]
 800b2f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b2fe:	61fb      	str	r3, [r7, #28]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	330c      	adds	r3, #12
 800b306:	69fa      	ldr	r2, [r7, #28]
 800b308:	61ba      	str	r2, [r7, #24]
 800b30a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30c:	6979      	ldr	r1, [r7, #20]
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	e841 2300 	strex	r3, r2, [r1]
 800b314:	613b      	str	r3, [r7, #16]
   return(result);
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1e5      	bne.n	800b2e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2220      	movs	r2, #32
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b324:	bf00      	nop
 800b326:	3724      	adds	r7, #36	; 0x24
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b330:	b480      	push	{r7}
 800b332:	b095      	sub	sp, #84	; 0x54
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	330c      	adds	r3, #12
 800b33e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b342:	e853 3f00 	ldrex	r3, [r3]
 800b346:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b34e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	330c      	adds	r3, #12
 800b356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b358:	643a      	str	r2, [r7, #64]	; 0x40
 800b35a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b35e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b360:	e841 2300 	strex	r3, r2, [r1]
 800b364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1e5      	bne.n	800b338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3314      	adds	r3, #20
 800b372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b374:	6a3b      	ldr	r3, [r7, #32]
 800b376:	e853 3f00 	ldrex	r3, [r3]
 800b37a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	f023 0301 	bic.w	r3, r3, #1
 800b382:	64bb      	str	r3, [r7, #72]	; 0x48
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3314      	adds	r3, #20
 800b38a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b38c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b38e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b394:	e841 2300 	strex	r3, r2, [r1]
 800b398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1e5      	bne.n	800b36c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d119      	bne.n	800b3dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	330c      	adds	r3, #12
 800b3ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	e853 3f00 	ldrex	r3, [r3]
 800b3b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f023 0310 	bic.w	r3, r3, #16
 800b3be:	647b      	str	r3, [r7, #68]	; 0x44
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	330c      	adds	r3, #12
 800b3c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3c8:	61ba      	str	r2, [r7, #24]
 800b3ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3cc:	6979      	ldr	r1, [r7, #20]
 800b3ce:	69ba      	ldr	r2, [r7, #24]
 800b3d0:	e841 2300 	strex	r3, r2, [r1]
 800b3d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1e5      	bne.n	800b3a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2220      	movs	r2, #32
 800b3e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b3ea:	bf00      	nop
 800b3ec:	3754      	adds	r7, #84	; 0x54
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b084      	sub	sp, #16
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b402:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2200      	movs	r2, #0
 800b40e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b418:	bf00      	nop
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b21      	cmp	r3, #33	; 0x21
 800b432:	d13e      	bne.n	800b4b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b43c:	d114      	bne.n	800b468 <UART_Transmit_IT+0x48>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d110      	bne.n	800b468 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	881b      	ldrh	r3, [r3, #0]
 800b450:	461a      	mov	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b45a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a1b      	ldr	r3, [r3, #32]
 800b460:	1c9a      	adds	r2, r3, #2
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	621a      	str	r2, [r3, #32]
 800b466:	e008      	b.n	800b47a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a1b      	ldr	r3, [r3, #32]
 800b46c:	1c59      	adds	r1, r3, #1
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	6211      	str	r1, [r2, #32]
 800b472:	781a      	ldrb	r2, [r3, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b47e:	b29b      	uxth	r3, r3
 800b480:	3b01      	subs	r3, #1
 800b482:	b29b      	uxth	r3, r3
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	4619      	mov	r1, r3
 800b488:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d10f      	bne.n	800b4ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68da      	ldr	r2, [r3, #12]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b49c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	68da      	ldr	r2, [r3, #12]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	e000      	b.n	800b4b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4b2:	2302      	movs	r3, #2
  }
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68da      	ldr	r2, [r3, #12]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2220      	movs	r2, #32
 800b4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b08c      	sub	sp, #48	; 0x30
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b22      	cmp	r3, #34	; 0x22
 800b504:	f040 80ad 	bne.w	800b662 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b510:	d117      	bne.n	800b542 <UART_Receive_IT+0x50>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d113      	bne.n	800b542 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b51a:	2300      	movs	r3, #0
 800b51c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b522:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b530:	b29a      	uxth	r2, r3
 800b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b534:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b53a:	1c9a      	adds	r2, r3, #2
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	629a      	str	r2, [r3, #40]	; 0x28
 800b540:	e026      	b.n	800b590 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b546:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b548:	2300      	movs	r3, #0
 800b54a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b554:	d007      	beq.n	800b566 <UART_Receive_IT+0x74>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <UART_Receive_IT+0x82>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d106      	bne.n	800b574 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	b2da      	uxtb	r2, r3
 800b56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b570:	701a      	strb	r2, [r3, #0]
 800b572:	e008      	b.n	800b586 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b580:	b2da      	uxtb	r2, r3
 800b582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b584:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b594:	b29b      	uxth	r3, r3
 800b596:	3b01      	subs	r3, #1
 800b598:	b29b      	uxth	r3, r3
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	4619      	mov	r1, r3
 800b59e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d15c      	bne.n	800b65e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68da      	ldr	r2, [r3, #12]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f022 0220 	bic.w	r2, r2, #32
 800b5b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68da      	ldr	r2, [r3, #12]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	695a      	ldr	r2, [r3, #20]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f022 0201 	bic.w	r2, r2, #1
 800b5d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d136      	bne.n	800b652 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	330c      	adds	r3, #12
 800b5f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	e853 3f00 	ldrex	r3, [r3]
 800b5f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	f023 0310 	bic.w	r3, r3, #16
 800b600:	627b      	str	r3, [r7, #36]	; 0x24
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	330c      	adds	r3, #12
 800b608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b60a:	623a      	str	r2, [r7, #32]
 800b60c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60e:	69f9      	ldr	r1, [r7, #28]
 800b610:	6a3a      	ldr	r2, [r7, #32]
 800b612:	e841 2300 	strex	r3, r2, [r1]
 800b616:	61bb      	str	r3, [r7, #24]
   return(result);
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1e5      	bne.n	800b5ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 0310 	and.w	r3, r3, #16
 800b628:	2b10      	cmp	r3, #16
 800b62a:	d10a      	bne.n	800b642 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b62c:	2300      	movs	r3, #0
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	60fb      	str	r3, [r7, #12]
 800b640:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b64a:	4611      	mov	r1, r2
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	4798      	blx	r3
 800b650:	e003      	b.n	800b65a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b65a:	2300      	movs	r3, #0
 800b65c:	e002      	b.n	800b664 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	e000      	b.n	800b664 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b662:	2302      	movs	r3, #2
  }
}
 800b664:	4618      	mov	r0, r3
 800b666:	3730      	adds	r7, #48	; 0x30
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b66c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b670:	b0c0      	sub	sp, #256	; 0x100
 800b672:	af00      	add	r7, sp, #0
 800b674:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b688:	68d9      	ldr	r1, [r3, #12]
 800b68a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	ea40 0301 	orr.w	r3, r0, r1
 800b694:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b69a:	689a      	ldr	r2, [r3, #8]
 800b69c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	431a      	orrs	r2, r3
 800b6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b0:	69db      	ldr	r3, [r3, #28]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b6b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b6c4:	f021 010c 	bic.w	r1, r1, #12
 800b6c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6d2:	430b      	orrs	r3, r1
 800b6d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b6d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b6e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e6:	6999      	ldr	r1, [r3, #24]
 800b6e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	ea40 0301 	orr.w	r3, r0, r1
 800b6f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b6f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	4b8f      	ldr	r3, [pc, #572]	; (800b938 <UART_SetConfig+0x2cc>)
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d005      	beq.n	800b70c <UART_SetConfig+0xa0>
 800b700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	4b8d      	ldr	r3, [pc, #564]	; (800b93c <UART_SetConfig+0x2d0>)
 800b708:	429a      	cmp	r2, r3
 800b70a:	d104      	bne.n	800b716 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b70c:	f7fd fa84 	bl	8008c18 <HAL_RCC_GetPCLK2Freq>
 800b710:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b714:	e003      	b.n	800b71e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b716:	f7fd fa6b 	bl	8008bf0 <HAL_RCC_GetPCLK1Freq>
 800b71a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b71e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b722:	69db      	ldr	r3, [r3, #28]
 800b724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b728:	f040 810c 	bne.w	800b944 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b72c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b730:	2200      	movs	r2, #0
 800b732:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b736:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b73a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b73e:	4622      	mov	r2, r4
 800b740:	462b      	mov	r3, r5
 800b742:	1891      	adds	r1, r2, r2
 800b744:	65b9      	str	r1, [r7, #88]	; 0x58
 800b746:	415b      	adcs	r3, r3
 800b748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b74a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b74e:	4621      	mov	r1, r4
 800b750:	eb12 0801 	adds.w	r8, r2, r1
 800b754:	4629      	mov	r1, r5
 800b756:	eb43 0901 	adc.w	r9, r3, r1
 800b75a:	f04f 0200 	mov.w	r2, #0
 800b75e:	f04f 0300 	mov.w	r3, #0
 800b762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b76a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b76e:	4690      	mov	r8, r2
 800b770:	4699      	mov	r9, r3
 800b772:	4623      	mov	r3, r4
 800b774:	eb18 0303 	adds.w	r3, r8, r3
 800b778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b77c:	462b      	mov	r3, r5
 800b77e:	eb49 0303 	adc.w	r3, r9, r3
 800b782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b792:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b796:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b79a:	460b      	mov	r3, r1
 800b79c:	18db      	adds	r3, r3, r3
 800b79e:	653b      	str	r3, [r7, #80]	; 0x50
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	eb42 0303 	adc.w	r3, r2, r3
 800b7a6:	657b      	str	r3, [r7, #84]	; 0x54
 800b7a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b7ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b7b0:	f7f5 fadc 	bl	8000d6c <__aeabi_uldivmod>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4b61      	ldr	r3, [pc, #388]	; (800b940 <UART_SetConfig+0x2d4>)
 800b7ba:	fba3 2302 	umull	r2, r3, r3, r2
 800b7be:	095b      	lsrs	r3, r3, #5
 800b7c0:	011c      	lsls	r4, r3, #4
 800b7c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b7d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b7d4:	4642      	mov	r2, r8
 800b7d6:	464b      	mov	r3, r9
 800b7d8:	1891      	adds	r1, r2, r2
 800b7da:	64b9      	str	r1, [r7, #72]	; 0x48
 800b7dc:	415b      	adcs	r3, r3
 800b7de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b7e4:	4641      	mov	r1, r8
 800b7e6:	eb12 0a01 	adds.w	sl, r2, r1
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	eb43 0b01 	adc.w	fp, r3, r1
 800b7f0:	f04f 0200 	mov.w	r2, #0
 800b7f4:	f04f 0300 	mov.w	r3, #0
 800b7f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b7fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b804:	4692      	mov	sl, r2
 800b806:	469b      	mov	fp, r3
 800b808:	4643      	mov	r3, r8
 800b80a:	eb1a 0303 	adds.w	r3, sl, r3
 800b80e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b812:	464b      	mov	r3, r9
 800b814:	eb4b 0303 	adc.w	r3, fp, r3
 800b818:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b828:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b82c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b830:	460b      	mov	r3, r1
 800b832:	18db      	adds	r3, r3, r3
 800b834:	643b      	str	r3, [r7, #64]	; 0x40
 800b836:	4613      	mov	r3, r2
 800b838:	eb42 0303 	adc.w	r3, r2, r3
 800b83c:	647b      	str	r3, [r7, #68]	; 0x44
 800b83e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b842:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b846:	f7f5 fa91 	bl	8000d6c <__aeabi_uldivmod>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4611      	mov	r1, r2
 800b850:	4b3b      	ldr	r3, [pc, #236]	; (800b940 <UART_SetConfig+0x2d4>)
 800b852:	fba3 2301 	umull	r2, r3, r3, r1
 800b856:	095b      	lsrs	r3, r3, #5
 800b858:	2264      	movs	r2, #100	; 0x64
 800b85a:	fb02 f303 	mul.w	r3, r2, r3
 800b85e:	1acb      	subs	r3, r1, r3
 800b860:	00db      	lsls	r3, r3, #3
 800b862:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b866:	4b36      	ldr	r3, [pc, #216]	; (800b940 <UART_SetConfig+0x2d4>)
 800b868:	fba3 2302 	umull	r2, r3, r3, r2
 800b86c:	095b      	lsrs	r3, r3, #5
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b874:	441c      	add	r4, r3
 800b876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b87a:	2200      	movs	r2, #0
 800b87c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b880:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b884:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b888:	4642      	mov	r2, r8
 800b88a:	464b      	mov	r3, r9
 800b88c:	1891      	adds	r1, r2, r2
 800b88e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b890:	415b      	adcs	r3, r3
 800b892:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b898:	4641      	mov	r1, r8
 800b89a:	1851      	adds	r1, r2, r1
 800b89c:	6339      	str	r1, [r7, #48]	; 0x30
 800b89e:	4649      	mov	r1, r9
 800b8a0:	414b      	adcs	r3, r1
 800b8a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b8a4:	f04f 0200 	mov.w	r2, #0
 800b8a8:	f04f 0300 	mov.w	r3, #0
 800b8ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b8b0:	4659      	mov	r1, fp
 800b8b2:	00cb      	lsls	r3, r1, #3
 800b8b4:	4651      	mov	r1, sl
 800b8b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8ba:	4651      	mov	r1, sl
 800b8bc:	00ca      	lsls	r2, r1, #3
 800b8be:	4610      	mov	r0, r2
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	4642      	mov	r2, r8
 800b8c6:	189b      	adds	r3, r3, r2
 800b8c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8cc:	464b      	mov	r3, r9
 800b8ce:	460a      	mov	r2, r1
 800b8d0:	eb42 0303 	adc.w	r3, r2, r3
 800b8d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b8e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b8e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	18db      	adds	r3, r3, r3
 800b8f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	eb42 0303 	adc.w	r3, r2, r3
 800b8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b8fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b902:	f7f5 fa33 	bl	8000d6c <__aeabi_uldivmod>
 800b906:	4602      	mov	r2, r0
 800b908:	460b      	mov	r3, r1
 800b90a:	4b0d      	ldr	r3, [pc, #52]	; (800b940 <UART_SetConfig+0x2d4>)
 800b90c:	fba3 1302 	umull	r1, r3, r3, r2
 800b910:	095b      	lsrs	r3, r3, #5
 800b912:	2164      	movs	r1, #100	; 0x64
 800b914:	fb01 f303 	mul.w	r3, r1, r3
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	00db      	lsls	r3, r3, #3
 800b91c:	3332      	adds	r3, #50	; 0x32
 800b91e:	4a08      	ldr	r2, [pc, #32]	; (800b940 <UART_SetConfig+0x2d4>)
 800b920:	fba2 2303 	umull	r2, r3, r2, r3
 800b924:	095b      	lsrs	r3, r3, #5
 800b926:	f003 0207 	and.w	r2, r3, #7
 800b92a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4422      	add	r2, r4
 800b932:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b934:	e105      	b.n	800bb42 <UART_SetConfig+0x4d6>
 800b936:	bf00      	nop
 800b938:	40011000 	.word	0x40011000
 800b93c:	40011400 	.word	0x40011400
 800b940:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b948:	2200      	movs	r2, #0
 800b94a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b94e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b952:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b956:	4642      	mov	r2, r8
 800b958:	464b      	mov	r3, r9
 800b95a:	1891      	adds	r1, r2, r2
 800b95c:	6239      	str	r1, [r7, #32]
 800b95e:	415b      	adcs	r3, r3
 800b960:	627b      	str	r3, [r7, #36]	; 0x24
 800b962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b966:	4641      	mov	r1, r8
 800b968:	1854      	adds	r4, r2, r1
 800b96a:	4649      	mov	r1, r9
 800b96c:	eb43 0501 	adc.w	r5, r3, r1
 800b970:	f04f 0200 	mov.w	r2, #0
 800b974:	f04f 0300 	mov.w	r3, #0
 800b978:	00eb      	lsls	r3, r5, #3
 800b97a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b97e:	00e2      	lsls	r2, r4, #3
 800b980:	4614      	mov	r4, r2
 800b982:	461d      	mov	r5, r3
 800b984:	4643      	mov	r3, r8
 800b986:	18e3      	adds	r3, r4, r3
 800b988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b98c:	464b      	mov	r3, r9
 800b98e:	eb45 0303 	adc.w	r3, r5, r3
 800b992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b9a6:	f04f 0200 	mov.w	r2, #0
 800b9aa:	f04f 0300 	mov.w	r3, #0
 800b9ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	008b      	lsls	r3, r1, #2
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9bc:	4621      	mov	r1, r4
 800b9be:	008a      	lsls	r2, r1, #2
 800b9c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b9c4:	f7f5 f9d2 	bl	8000d6c <__aeabi_uldivmod>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	4b60      	ldr	r3, [pc, #384]	; (800bb50 <UART_SetConfig+0x4e4>)
 800b9ce:	fba3 2302 	umull	r2, r3, r3, r2
 800b9d2:	095b      	lsrs	r3, r3, #5
 800b9d4:	011c      	lsls	r4, r3, #4
 800b9d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b9e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b9e8:	4642      	mov	r2, r8
 800b9ea:	464b      	mov	r3, r9
 800b9ec:	1891      	adds	r1, r2, r2
 800b9ee:	61b9      	str	r1, [r7, #24]
 800b9f0:	415b      	adcs	r3, r3
 800b9f2:	61fb      	str	r3, [r7, #28]
 800b9f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9f8:	4641      	mov	r1, r8
 800b9fa:	1851      	adds	r1, r2, r1
 800b9fc:	6139      	str	r1, [r7, #16]
 800b9fe:	4649      	mov	r1, r9
 800ba00:	414b      	adcs	r3, r1
 800ba02:	617b      	str	r3, [r7, #20]
 800ba04:	f04f 0200 	mov.w	r2, #0
 800ba08:	f04f 0300 	mov.w	r3, #0
 800ba0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba10:	4659      	mov	r1, fp
 800ba12:	00cb      	lsls	r3, r1, #3
 800ba14:	4651      	mov	r1, sl
 800ba16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba1a:	4651      	mov	r1, sl
 800ba1c:	00ca      	lsls	r2, r1, #3
 800ba1e:	4610      	mov	r0, r2
 800ba20:	4619      	mov	r1, r3
 800ba22:	4603      	mov	r3, r0
 800ba24:	4642      	mov	r2, r8
 800ba26:	189b      	adds	r3, r3, r2
 800ba28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba2c:	464b      	mov	r3, r9
 800ba2e:	460a      	mov	r2, r1
 800ba30:	eb42 0303 	adc.w	r3, r2, r3
 800ba34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba42:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ba44:	f04f 0200 	mov.w	r2, #0
 800ba48:	f04f 0300 	mov.w	r3, #0
 800ba4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba50:	4649      	mov	r1, r9
 800ba52:	008b      	lsls	r3, r1, #2
 800ba54:	4641      	mov	r1, r8
 800ba56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba5a:	4641      	mov	r1, r8
 800ba5c:	008a      	lsls	r2, r1, #2
 800ba5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba62:	f7f5 f983 	bl	8000d6c <__aeabi_uldivmod>
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	4b39      	ldr	r3, [pc, #228]	; (800bb50 <UART_SetConfig+0x4e4>)
 800ba6c:	fba3 1302 	umull	r1, r3, r3, r2
 800ba70:	095b      	lsrs	r3, r3, #5
 800ba72:	2164      	movs	r1, #100	; 0x64
 800ba74:	fb01 f303 	mul.w	r3, r1, r3
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	011b      	lsls	r3, r3, #4
 800ba7c:	3332      	adds	r3, #50	; 0x32
 800ba7e:	4a34      	ldr	r2, [pc, #208]	; (800bb50 <UART_SetConfig+0x4e4>)
 800ba80:	fba2 2303 	umull	r2, r3, r2, r3
 800ba84:	095b      	lsrs	r3, r3, #5
 800ba86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba8a:	441c      	add	r4, r3
 800ba8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba90:	2200      	movs	r2, #0
 800ba92:	673b      	str	r3, [r7, #112]	; 0x70
 800ba94:	677a      	str	r2, [r7, #116]	; 0x74
 800ba96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ba9a:	4642      	mov	r2, r8
 800ba9c:	464b      	mov	r3, r9
 800ba9e:	1891      	adds	r1, r2, r2
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	415b      	adcs	r3, r3
 800baa4:	60fb      	str	r3, [r7, #12]
 800baa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800baaa:	4641      	mov	r1, r8
 800baac:	1851      	adds	r1, r2, r1
 800baae:	6039      	str	r1, [r7, #0]
 800bab0:	4649      	mov	r1, r9
 800bab2:	414b      	adcs	r3, r1
 800bab4:	607b      	str	r3, [r7, #4]
 800bab6:	f04f 0200 	mov.w	r2, #0
 800baba:	f04f 0300 	mov.w	r3, #0
 800babe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bac2:	4659      	mov	r1, fp
 800bac4:	00cb      	lsls	r3, r1, #3
 800bac6:	4651      	mov	r1, sl
 800bac8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bacc:	4651      	mov	r1, sl
 800bace:	00ca      	lsls	r2, r1, #3
 800bad0:	4610      	mov	r0, r2
 800bad2:	4619      	mov	r1, r3
 800bad4:	4603      	mov	r3, r0
 800bad6:	4642      	mov	r2, r8
 800bad8:	189b      	adds	r3, r3, r2
 800bada:	66bb      	str	r3, [r7, #104]	; 0x68
 800badc:	464b      	mov	r3, r9
 800bade:	460a      	mov	r2, r1
 800bae0:	eb42 0303 	adc.w	r3, r2, r3
 800bae4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	663b      	str	r3, [r7, #96]	; 0x60
 800baf0:	667a      	str	r2, [r7, #100]	; 0x64
 800baf2:	f04f 0200 	mov.w	r2, #0
 800baf6:	f04f 0300 	mov.w	r3, #0
 800bafa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bafe:	4649      	mov	r1, r9
 800bb00:	008b      	lsls	r3, r1, #2
 800bb02:	4641      	mov	r1, r8
 800bb04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb08:	4641      	mov	r1, r8
 800bb0a:	008a      	lsls	r2, r1, #2
 800bb0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bb10:	f7f5 f92c 	bl	8000d6c <__aeabi_uldivmod>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4b0d      	ldr	r3, [pc, #52]	; (800bb50 <UART_SetConfig+0x4e4>)
 800bb1a:	fba3 1302 	umull	r1, r3, r3, r2
 800bb1e:	095b      	lsrs	r3, r3, #5
 800bb20:	2164      	movs	r1, #100	; 0x64
 800bb22:	fb01 f303 	mul.w	r3, r1, r3
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	011b      	lsls	r3, r3, #4
 800bb2a:	3332      	adds	r3, #50	; 0x32
 800bb2c:	4a08      	ldr	r2, [pc, #32]	; (800bb50 <UART_SetConfig+0x4e4>)
 800bb2e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb32:	095b      	lsrs	r3, r3, #5
 800bb34:	f003 020f 	and.w	r2, r3, #15
 800bb38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4422      	add	r2, r4
 800bb40:	609a      	str	r2, [r3, #8]
}
 800bb42:	bf00      	nop
 800bb44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb4e:	bf00      	nop
 800bb50:	51eb851f 	.word	0x51eb851f

0800bb54 <__errno>:
 800bb54:	4b01      	ldr	r3, [pc, #4]	; (800bb5c <__errno+0x8>)
 800bb56:	6818      	ldr	r0, [r3, #0]
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	20000298 	.word	0x20000298

0800bb60 <__libc_init_array>:
 800bb60:	b570      	push	{r4, r5, r6, lr}
 800bb62:	4d0d      	ldr	r5, [pc, #52]	; (800bb98 <__libc_init_array+0x38>)
 800bb64:	4c0d      	ldr	r4, [pc, #52]	; (800bb9c <__libc_init_array+0x3c>)
 800bb66:	1b64      	subs	r4, r4, r5
 800bb68:	10a4      	asrs	r4, r4, #2
 800bb6a:	2600      	movs	r6, #0
 800bb6c:	42a6      	cmp	r6, r4
 800bb6e:	d109      	bne.n	800bb84 <__libc_init_array+0x24>
 800bb70:	4d0b      	ldr	r5, [pc, #44]	; (800bba0 <__libc_init_array+0x40>)
 800bb72:	4c0c      	ldr	r4, [pc, #48]	; (800bba4 <__libc_init_array+0x44>)
 800bb74:	f001 f9e2 	bl	800cf3c <_init>
 800bb78:	1b64      	subs	r4, r4, r5
 800bb7a:	10a4      	asrs	r4, r4, #2
 800bb7c:	2600      	movs	r6, #0
 800bb7e:	42a6      	cmp	r6, r4
 800bb80:	d105      	bne.n	800bb8e <__libc_init_array+0x2e>
 800bb82:	bd70      	pop	{r4, r5, r6, pc}
 800bb84:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb88:	4798      	blx	r3
 800bb8a:	3601      	adds	r6, #1
 800bb8c:	e7ee      	b.n	800bb6c <__libc_init_array+0xc>
 800bb8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb92:	4798      	blx	r3
 800bb94:	3601      	adds	r6, #1
 800bb96:	e7f2      	b.n	800bb7e <__libc_init_array+0x1e>
 800bb98:	0800d828 	.word	0x0800d828
 800bb9c:	0800d828 	.word	0x0800d828
 800bba0:	0800d828 	.word	0x0800d828
 800bba4:	0800d82c 	.word	0x0800d82c

0800bba8 <memcpy>:
 800bba8:	440a      	add	r2, r1
 800bbaa:	4291      	cmp	r1, r2
 800bbac:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbb0:	d100      	bne.n	800bbb4 <memcpy+0xc>
 800bbb2:	4770      	bx	lr
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbbe:	4291      	cmp	r1, r2
 800bbc0:	d1f9      	bne.n	800bbb6 <memcpy+0xe>
 800bbc2:	bd10      	pop	{r4, pc}

0800bbc4 <memset>:
 800bbc4:	4402      	add	r2, r0
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d100      	bne.n	800bbce <memset+0xa>
 800bbcc:	4770      	bx	lr
 800bbce:	f803 1b01 	strb.w	r1, [r3], #1
 800bbd2:	e7f9      	b.n	800bbc8 <memset+0x4>

0800bbd4 <atan2>:
 800bbd4:	f000 b89c 	b.w	800bd10 <__ieee754_atan2>

0800bbd8 <pow>:
 800bbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbda:	ed2d 8b02 	vpush	{d8}
 800bbde:	eeb0 8a40 	vmov.f32	s16, s0
 800bbe2:	eef0 8a60 	vmov.f32	s17, s1
 800bbe6:	ec55 4b11 	vmov	r4, r5, d1
 800bbea:	f000 f95d 	bl	800bea8 <__ieee754_pow>
 800bbee:	4622      	mov	r2, r4
 800bbf0:	462b      	mov	r3, r5
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	ec57 6b10 	vmov	r6, r7, d0
 800bbfa:	f7f4 ff43 	bl	8000a84 <__aeabi_dcmpun>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d13b      	bne.n	800bc7a <pow+0xa2>
 800bc02:	ec51 0b18 	vmov	r0, r1, d8
 800bc06:	2200      	movs	r2, #0
 800bc08:	2300      	movs	r3, #0
 800bc0a:	f7f4 ff09 	bl	8000a20 <__aeabi_dcmpeq>
 800bc0e:	b1b8      	cbz	r0, 800bc40 <pow+0x68>
 800bc10:	2200      	movs	r2, #0
 800bc12:	2300      	movs	r3, #0
 800bc14:	4620      	mov	r0, r4
 800bc16:	4629      	mov	r1, r5
 800bc18:	f7f4 ff02 	bl	8000a20 <__aeabi_dcmpeq>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d146      	bne.n	800bcae <pow+0xd6>
 800bc20:	ec45 4b10 	vmov	d0, r4, r5
 800bc24:	f001 f8f9 	bl	800ce1a <finite>
 800bc28:	b338      	cbz	r0, 800bc7a <pow+0xa2>
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	4620      	mov	r0, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	f7f4 feff 	bl	8000a34 <__aeabi_dcmplt>
 800bc36:	b300      	cbz	r0, 800bc7a <pow+0xa2>
 800bc38:	f7ff ff8c 	bl	800bb54 <__errno>
 800bc3c:	2322      	movs	r3, #34	; 0x22
 800bc3e:	e01b      	b.n	800bc78 <pow+0xa0>
 800bc40:	ec47 6b10 	vmov	d0, r6, r7
 800bc44:	f001 f8e9 	bl	800ce1a <finite>
 800bc48:	b9e0      	cbnz	r0, 800bc84 <pow+0xac>
 800bc4a:	eeb0 0a48 	vmov.f32	s0, s16
 800bc4e:	eef0 0a68 	vmov.f32	s1, s17
 800bc52:	f001 f8e2 	bl	800ce1a <finite>
 800bc56:	b1a8      	cbz	r0, 800bc84 <pow+0xac>
 800bc58:	ec45 4b10 	vmov	d0, r4, r5
 800bc5c:	f001 f8dd 	bl	800ce1a <finite>
 800bc60:	b180      	cbz	r0, 800bc84 <pow+0xac>
 800bc62:	4632      	mov	r2, r6
 800bc64:	463b      	mov	r3, r7
 800bc66:	4630      	mov	r0, r6
 800bc68:	4639      	mov	r1, r7
 800bc6a:	f7f4 ff0b 	bl	8000a84 <__aeabi_dcmpun>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d0e2      	beq.n	800bc38 <pow+0x60>
 800bc72:	f7ff ff6f 	bl	800bb54 <__errno>
 800bc76:	2321      	movs	r3, #33	; 0x21
 800bc78:	6003      	str	r3, [r0, #0]
 800bc7a:	ecbd 8b02 	vpop	{d8}
 800bc7e:	ec47 6b10 	vmov	d0, r6, r7
 800bc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc84:	2200      	movs	r2, #0
 800bc86:	2300      	movs	r3, #0
 800bc88:	4630      	mov	r0, r6
 800bc8a:	4639      	mov	r1, r7
 800bc8c:	f7f4 fec8 	bl	8000a20 <__aeabi_dcmpeq>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d0f2      	beq.n	800bc7a <pow+0xa2>
 800bc94:	eeb0 0a48 	vmov.f32	s0, s16
 800bc98:	eef0 0a68 	vmov.f32	s1, s17
 800bc9c:	f001 f8bd 	bl	800ce1a <finite>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d0ea      	beq.n	800bc7a <pow+0xa2>
 800bca4:	ec45 4b10 	vmov	d0, r4, r5
 800bca8:	f001 f8b7 	bl	800ce1a <finite>
 800bcac:	e7c3      	b.n	800bc36 <pow+0x5e>
 800bcae:	4f01      	ldr	r7, [pc, #4]	; (800bcb4 <pow+0xdc>)
 800bcb0:	2600      	movs	r6, #0
 800bcb2:	e7e2      	b.n	800bc7a <pow+0xa2>
 800bcb4:	3ff00000 	.word	0x3ff00000

0800bcb8 <sqrt>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	ed2d 8b02 	vpush	{d8}
 800bcbe:	ec55 4b10 	vmov	r4, r5, d0
 800bcc2:	f000 fe1f 	bl	800c904 <__ieee754_sqrt>
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	462b      	mov	r3, r5
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	eeb0 8a40 	vmov.f32	s16, s0
 800bcd2:	eef0 8a60 	vmov.f32	s17, s1
 800bcd6:	f7f4 fed5 	bl	8000a84 <__aeabi_dcmpun>
 800bcda:	b990      	cbnz	r0, 800bd02 <sqrt+0x4a>
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2300      	movs	r3, #0
 800bce0:	4620      	mov	r0, r4
 800bce2:	4629      	mov	r1, r5
 800bce4:	f7f4 fea6 	bl	8000a34 <__aeabi_dcmplt>
 800bce8:	b158      	cbz	r0, 800bd02 <sqrt+0x4a>
 800bcea:	f7ff ff33 	bl	800bb54 <__errno>
 800bcee:	2321      	movs	r3, #33	; 0x21
 800bcf0:	6003      	str	r3, [r0, #0]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	4610      	mov	r0, r2
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	f7f4 fd53 	bl	80007a4 <__aeabi_ddiv>
 800bcfe:	ec41 0b18 	vmov	d8, r0, r1
 800bd02:	eeb0 0a48 	vmov.f32	s0, s16
 800bd06:	eef0 0a68 	vmov.f32	s1, s17
 800bd0a:	ecbd 8b02 	vpop	{d8}
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}

0800bd10 <__ieee754_atan2>:
 800bd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd14:	ec57 6b11 	vmov	r6, r7, d1
 800bd18:	4273      	negs	r3, r6
 800bd1a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bea0 <__ieee754_atan2+0x190>
 800bd1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bd22:	4333      	orrs	r3, r6
 800bd24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bd28:	4573      	cmp	r3, lr
 800bd2a:	ec51 0b10 	vmov	r0, r1, d0
 800bd2e:	ee11 8a10 	vmov	r8, s2
 800bd32:	d80a      	bhi.n	800bd4a <__ieee754_atan2+0x3a>
 800bd34:	4244      	negs	r4, r0
 800bd36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd3a:	4304      	orrs	r4, r0
 800bd3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bd40:	4574      	cmp	r4, lr
 800bd42:	ee10 9a10 	vmov	r9, s0
 800bd46:	468c      	mov	ip, r1
 800bd48:	d907      	bls.n	800bd5a <__ieee754_atan2+0x4a>
 800bd4a:	4632      	mov	r2, r6
 800bd4c:	463b      	mov	r3, r7
 800bd4e:	f7f4 fa49 	bl	80001e4 <__adddf3>
 800bd52:	ec41 0b10 	vmov	d0, r0, r1
 800bd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bd5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bd62:	4334      	orrs	r4, r6
 800bd64:	d103      	bne.n	800bd6e <__ieee754_atan2+0x5e>
 800bd66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd6a:	f000 bead 	b.w	800cac8 <atan>
 800bd6e:	17bc      	asrs	r4, r7, #30
 800bd70:	f004 0402 	and.w	r4, r4, #2
 800bd74:	ea53 0909 	orrs.w	r9, r3, r9
 800bd78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bd7c:	d107      	bne.n	800bd8e <__ieee754_atan2+0x7e>
 800bd7e:	2c02      	cmp	r4, #2
 800bd80:	d060      	beq.n	800be44 <__ieee754_atan2+0x134>
 800bd82:	2c03      	cmp	r4, #3
 800bd84:	d1e5      	bne.n	800bd52 <__ieee754_atan2+0x42>
 800bd86:	a142      	add	r1, pc, #264	; (adr r1, 800be90 <__ieee754_atan2+0x180>)
 800bd88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd8c:	e7e1      	b.n	800bd52 <__ieee754_atan2+0x42>
 800bd8e:	ea52 0808 	orrs.w	r8, r2, r8
 800bd92:	d106      	bne.n	800bda2 <__ieee754_atan2+0x92>
 800bd94:	f1bc 0f00 	cmp.w	ip, #0
 800bd98:	da5f      	bge.n	800be5a <__ieee754_atan2+0x14a>
 800bd9a:	a13f      	add	r1, pc, #252	; (adr r1, 800be98 <__ieee754_atan2+0x188>)
 800bd9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bda0:	e7d7      	b.n	800bd52 <__ieee754_atan2+0x42>
 800bda2:	4572      	cmp	r2, lr
 800bda4:	d10f      	bne.n	800bdc6 <__ieee754_atan2+0xb6>
 800bda6:	4293      	cmp	r3, r2
 800bda8:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdac:	d107      	bne.n	800bdbe <__ieee754_atan2+0xae>
 800bdae:	2c02      	cmp	r4, #2
 800bdb0:	d84c      	bhi.n	800be4c <__ieee754_atan2+0x13c>
 800bdb2:	4b35      	ldr	r3, [pc, #212]	; (800be88 <__ieee754_atan2+0x178>)
 800bdb4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bdb8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bdbc:	e7c9      	b.n	800bd52 <__ieee754_atan2+0x42>
 800bdbe:	2c02      	cmp	r4, #2
 800bdc0:	d848      	bhi.n	800be54 <__ieee754_atan2+0x144>
 800bdc2:	4b32      	ldr	r3, [pc, #200]	; (800be8c <__ieee754_atan2+0x17c>)
 800bdc4:	e7f6      	b.n	800bdb4 <__ieee754_atan2+0xa4>
 800bdc6:	4573      	cmp	r3, lr
 800bdc8:	d0e4      	beq.n	800bd94 <__ieee754_atan2+0x84>
 800bdca:	1a9b      	subs	r3, r3, r2
 800bdcc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bdd0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bdd4:	da1e      	bge.n	800be14 <__ieee754_atan2+0x104>
 800bdd6:	2f00      	cmp	r7, #0
 800bdd8:	da01      	bge.n	800bdde <__ieee754_atan2+0xce>
 800bdda:	323c      	adds	r2, #60	; 0x3c
 800bddc:	db1e      	blt.n	800be1c <__ieee754_atan2+0x10c>
 800bdde:	4632      	mov	r2, r6
 800bde0:	463b      	mov	r3, r7
 800bde2:	f7f4 fcdf 	bl	80007a4 <__aeabi_ddiv>
 800bde6:	ec41 0b10 	vmov	d0, r0, r1
 800bdea:	f001 f80d 	bl	800ce08 <fabs>
 800bdee:	f000 fe6b 	bl	800cac8 <atan>
 800bdf2:	ec51 0b10 	vmov	r0, r1, d0
 800bdf6:	2c01      	cmp	r4, #1
 800bdf8:	d013      	beq.n	800be22 <__ieee754_atan2+0x112>
 800bdfa:	2c02      	cmp	r4, #2
 800bdfc:	d015      	beq.n	800be2a <__ieee754_atan2+0x11a>
 800bdfe:	2c00      	cmp	r4, #0
 800be00:	d0a7      	beq.n	800bd52 <__ieee754_atan2+0x42>
 800be02:	a319      	add	r3, pc, #100	; (adr r3, 800be68 <__ieee754_atan2+0x158>)
 800be04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be08:	f7f4 f9ea 	bl	80001e0 <__aeabi_dsub>
 800be0c:	a318      	add	r3, pc, #96	; (adr r3, 800be70 <__ieee754_atan2+0x160>)
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	e014      	b.n	800be3e <__ieee754_atan2+0x12e>
 800be14:	a118      	add	r1, pc, #96	; (adr r1, 800be78 <__ieee754_atan2+0x168>)
 800be16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be1a:	e7ec      	b.n	800bdf6 <__ieee754_atan2+0xe6>
 800be1c:	2000      	movs	r0, #0
 800be1e:	2100      	movs	r1, #0
 800be20:	e7e9      	b.n	800bdf6 <__ieee754_atan2+0xe6>
 800be22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be26:	4619      	mov	r1, r3
 800be28:	e793      	b.n	800bd52 <__ieee754_atan2+0x42>
 800be2a:	a30f      	add	r3, pc, #60	; (adr r3, 800be68 <__ieee754_atan2+0x158>)
 800be2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be30:	f7f4 f9d6 	bl	80001e0 <__aeabi_dsub>
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	a10d      	add	r1, pc, #52	; (adr r1, 800be70 <__ieee754_atan2+0x160>)
 800be3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be3e:	f7f4 f9cf 	bl	80001e0 <__aeabi_dsub>
 800be42:	e786      	b.n	800bd52 <__ieee754_atan2+0x42>
 800be44:	a10a      	add	r1, pc, #40	; (adr r1, 800be70 <__ieee754_atan2+0x160>)
 800be46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be4a:	e782      	b.n	800bd52 <__ieee754_atan2+0x42>
 800be4c:	a10c      	add	r1, pc, #48	; (adr r1, 800be80 <__ieee754_atan2+0x170>)
 800be4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be52:	e77e      	b.n	800bd52 <__ieee754_atan2+0x42>
 800be54:	2000      	movs	r0, #0
 800be56:	2100      	movs	r1, #0
 800be58:	e77b      	b.n	800bd52 <__ieee754_atan2+0x42>
 800be5a:	a107      	add	r1, pc, #28	; (adr r1, 800be78 <__ieee754_atan2+0x168>)
 800be5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be60:	e777      	b.n	800bd52 <__ieee754_atan2+0x42>
 800be62:	bf00      	nop
 800be64:	f3af 8000 	nop.w
 800be68:	33145c07 	.word	0x33145c07
 800be6c:	3ca1a626 	.word	0x3ca1a626
 800be70:	54442d18 	.word	0x54442d18
 800be74:	400921fb 	.word	0x400921fb
 800be78:	54442d18 	.word	0x54442d18
 800be7c:	3ff921fb 	.word	0x3ff921fb
 800be80:	54442d18 	.word	0x54442d18
 800be84:	3fe921fb 	.word	0x3fe921fb
 800be88:	0800d780 	.word	0x0800d780
 800be8c:	0800d798 	.word	0x0800d798
 800be90:	54442d18 	.word	0x54442d18
 800be94:	c00921fb 	.word	0xc00921fb
 800be98:	54442d18 	.word	0x54442d18
 800be9c:	bff921fb 	.word	0xbff921fb
 800bea0:	7ff00000 	.word	0x7ff00000
 800bea4:	00000000 	.word	0x00000000

0800bea8 <__ieee754_pow>:
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	ed2d 8b06 	vpush	{d8-d10}
 800beb0:	b089      	sub	sp, #36	; 0x24
 800beb2:	ed8d 1b00 	vstr	d1, [sp]
 800beb6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800beba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bebe:	ea58 0102 	orrs.w	r1, r8, r2
 800bec2:	ec57 6b10 	vmov	r6, r7, d0
 800bec6:	d115      	bne.n	800bef4 <__ieee754_pow+0x4c>
 800bec8:	19b3      	adds	r3, r6, r6
 800beca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bece:	4152      	adcs	r2, r2
 800bed0:	4299      	cmp	r1, r3
 800bed2:	4b89      	ldr	r3, [pc, #548]	; (800c0f8 <__ieee754_pow+0x250>)
 800bed4:	4193      	sbcs	r3, r2
 800bed6:	f080 84d2 	bcs.w	800c87e <__ieee754_pow+0x9d6>
 800beda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bede:	4630      	mov	r0, r6
 800bee0:	4639      	mov	r1, r7
 800bee2:	f7f4 f97f 	bl	80001e4 <__adddf3>
 800bee6:	ec41 0b10 	vmov	d0, r0, r1
 800beea:	b009      	add	sp, #36	; 0x24
 800beec:	ecbd 8b06 	vpop	{d8-d10}
 800bef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef4:	4b81      	ldr	r3, [pc, #516]	; (800c0fc <__ieee754_pow+0x254>)
 800bef6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800befa:	429c      	cmp	r4, r3
 800befc:	ee10 aa10 	vmov	sl, s0
 800bf00:	463d      	mov	r5, r7
 800bf02:	dc06      	bgt.n	800bf12 <__ieee754_pow+0x6a>
 800bf04:	d101      	bne.n	800bf0a <__ieee754_pow+0x62>
 800bf06:	2e00      	cmp	r6, #0
 800bf08:	d1e7      	bne.n	800beda <__ieee754_pow+0x32>
 800bf0a:	4598      	cmp	r8, r3
 800bf0c:	dc01      	bgt.n	800bf12 <__ieee754_pow+0x6a>
 800bf0e:	d10f      	bne.n	800bf30 <__ieee754_pow+0x88>
 800bf10:	b172      	cbz	r2, 800bf30 <__ieee754_pow+0x88>
 800bf12:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bf16:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bf1a:	ea55 050a 	orrs.w	r5, r5, sl
 800bf1e:	d1dc      	bne.n	800beda <__ieee754_pow+0x32>
 800bf20:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf24:	18db      	adds	r3, r3, r3
 800bf26:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bf2a:	4152      	adcs	r2, r2
 800bf2c:	429d      	cmp	r5, r3
 800bf2e:	e7d0      	b.n	800bed2 <__ieee754_pow+0x2a>
 800bf30:	2d00      	cmp	r5, #0
 800bf32:	da3b      	bge.n	800bfac <__ieee754_pow+0x104>
 800bf34:	4b72      	ldr	r3, [pc, #456]	; (800c100 <__ieee754_pow+0x258>)
 800bf36:	4598      	cmp	r8, r3
 800bf38:	dc51      	bgt.n	800bfde <__ieee754_pow+0x136>
 800bf3a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bf3e:	4598      	cmp	r8, r3
 800bf40:	f340 84ac 	ble.w	800c89c <__ieee754_pow+0x9f4>
 800bf44:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bf48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bf4c:	2b14      	cmp	r3, #20
 800bf4e:	dd0f      	ble.n	800bf70 <__ieee754_pow+0xc8>
 800bf50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bf54:	fa22 f103 	lsr.w	r1, r2, r3
 800bf58:	fa01 f303 	lsl.w	r3, r1, r3
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	f040 849d 	bne.w	800c89c <__ieee754_pow+0x9f4>
 800bf62:	f001 0101 	and.w	r1, r1, #1
 800bf66:	f1c1 0302 	rsb	r3, r1, #2
 800bf6a:	9304      	str	r3, [sp, #16]
 800bf6c:	b182      	cbz	r2, 800bf90 <__ieee754_pow+0xe8>
 800bf6e:	e05f      	b.n	800c030 <__ieee754_pow+0x188>
 800bf70:	2a00      	cmp	r2, #0
 800bf72:	d15b      	bne.n	800c02c <__ieee754_pow+0x184>
 800bf74:	f1c3 0314 	rsb	r3, r3, #20
 800bf78:	fa48 f103 	asr.w	r1, r8, r3
 800bf7c:	fa01 f303 	lsl.w	r3, r1, r3
 800bf80:	4543      	cmp	r3, r8
 800bf82:	f040 8488 	bne.w	800c896 <__ieee754_pow+0x9ee>
 800bf86:	f001 0101 	and.w	r1, r1, #1
 800bf8a:	f1c1 0302 	rsb	r3, r1, #2
 800bf8e:	9304      	str	r3, [sp, #16]
 800bf90:	4b5c      	ldr	r3, [pc, #368]	; (800c104 <__ieee754_pow+0x25c>)
 800bf92:	4598      	cmp	r8, r3
 800bf94:	d132      	bne.n	800bffc <__ieee754_pow+0x154>
 800bf96:	f1b9 0f00 	cmp.w	r9, #0
 800bf9a:	f280 8478 	bge.w	800c88e <__ieee754_pow+0x9e6>
 800bf9e:	4959      	ldr	r1, [pc, #356]	; (800c104 <__ieee754_pow+0x25c>)
 800bfa0:	4632      	mov	r2, r6
 800bfa2:	463b      	mov	r3, r7
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	f7f4 fbfd 	bl	80007a4 <__aeabi_ddiv>
 800bfaa:	e79c      	b.n	800bee6 <__ieee754_pow+0x3e>
 800bfac:	2300      	movs	r3, #0
 800bfae:	9304      	str	r3, [sp, #16]
 800bfb0:	2a00      	cmp	r2, #0
 800bfb2:	d13d      	bne.n	800c030 <__ieee754_pow+0x188>
 800bfb4:	4b51      	ldr	r3, [pc, #324]	; (800c0fc <__ieee754_pow+0x254>)
 800bfb6:	4598      	cmp	r8, r3
 800bfb8:	d1ea      	bne.n	800bf90 <__ieee754_pow+0xe8>
 800bfba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bfbe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bfc2:	ea53 030a 	orrs.w	r3, r3, sl
 800bfc6:	f000 845a 	beq.w	800c87e <__ieee754_pow+0x9d6>
 800bfca:	4b4f      	ldr	r3, [pc, #316]	; (800c108 <__ieee754_pow+0x260>)
 800bfcc:	429c      	cmp	r4, r3
 800bfce:	dd08      	ble.n	800bfe2 <__ieee754_pow+0x13a>
 800bfd0:	f1b9 0f00 	cmp.w	r9, #0
 800bfd4:	f2c0 8457 	blt.w	800c886 <__ieee754_pow+0x9de>
 800bfd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfdc:	e783      	b.n	800bee6 <__ieee754_pow+0x3e>
 800bfde:	2302      	movs	r3, #2
 800bfe0:	e7e5      	b.n	800bfae <__ieee754_pow+0x106>
 800bfe2:	f1b9 0f00 	cmp.w	r9, #0
 800bfe6:	f04f 0000 	mov.w	r0, #0
 800bfea:	f04f 0100 	mov.w	r1, #0
 800bfee:	f6bf af7a 	bge.w	800bee6 <__ieee754_pow+0x3e>
 800bff2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bff6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bffa:	e774      	b.n	800bee6 <__ieee754_pow+0x3e>
 800bffc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c000:	d106      	bne.n	800c010 <__ieee754_pow+0x168>
 800c002:	4632      	mov	r2, r6
 800c004:	463b      	mov	r3, r7
 800c006:	4630      	mov	r0, r6
 800c008:	4639      	mov	r1, r7
 800c00a:	f7f4 faa1 	bl	8000550 <__aeabi_dmul>
 800c00e:	e76a      	b.n	800bee6 <__ieee754_pow+0x3e>
 800c010:	4b3e      	ldr	r3, [pc, #248]	; (800c10c <__ieee754_pow+0x264>)
 800c012:	4599      	cmp	r9, r3
 800c014:	d10c      	bne.n	800c030 <__ieee754_pow+0x188>
 800c016:	2d00      	cmp	r5, #0
 800c018:	db0a      	blt.n	800c030 <__ieee754_pow+0x188>
 800c01a:	ec47 6b10 	vmov	d0, r6, r7
 800c01e:	b009      	add	sp, #36	; 0x24
 800c020:	ecbd 8b06 	vpop	{d8-d10}
 800c024:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c028:	f000 bc6c 	b.w	800c904 <__ieee754_sqrt>
 800c02c:	2300      	movs	r3, #0
 800c02e:	9304      	str	r3, [sp, #16]
 800c030:	ec47 6b10 	vmov	d0, r6, r7
 800c034:	f000 fee8 	bl	800ce08 <fabs>
 800c038:	ec51 0b10 	vmov	r0, r1, d0
 800c03c:	f1ba 0f00 	cmp.w	sl, #0
 800c040:	d129      	bne.n	800c096 <__ieee754_pow+0x1ee>
 800c042:	b124      	cbz	r4, 800c04e <__ieee754_pow+0x1a6>
 800c044:	4b2f      	ldr	r3, [pc, #188]	; (800c104 <__ieee754_pow+0x25c>)
 800c046:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d123      	bne.n	800c096 <__ieee754_pow+0x1ee>
 800c04e:	f1b9 0f00 	cmp.w	r9, #0
 800c052:	da05      	bge.n	800c060 <__ieee754_pow+0x1b8>
 800c054:	4602      	mov	r2, r0
 800c056:	460b      	mov	r3, r1
 800c058:	2000      	movs	r0, #0
 800c05a:	492a      	ldr	r1, [pc, #168]	; (800c104 <__ieee754_pow+0x25c>)
 800c05c:	f7f4 fba2 	bl	80007a4 <__aeabi_ddiv>
 800c060:	2d00      	cmp	r5, #0
 800c062:	f6bf af40 	bge.w	800bee6 <__ieee754_pow+0x3e>
 800c066:	9b04      	ldr	r3, [sp, #16]
 800c068:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c06c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c070:	4323      	orrs	r3, r4
 800c072:	d108      	bne.n	800c086 <__ieee754_pow+0x1de>
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	4610      	mov	r0, r2
 800c07a:	4619      	mov	r1, r3
 800c07c:	f7f4 f8b0 	bl	80001e0 <__aeabi_dsub>
 800c080:	4602      	mov	r2, r0
 800c082:	460b      	mov	r3, r1
 800c084:	e78f      	b.n	800bfa6 <__ieee754_pow+0xfe>
 800c086:	9b04      	ldr	r3, [sp, #16]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	f47f af2c 	bne.w	800bee6 <__ieee754_pow+0x3e>
 800c08e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c092:	4619      	mov	r1, r3
 800c094:	e727      	b.n	800bee6 <__ieee754_pow+0x3e>
 800c096:	0feb      	lsrs	r3, r5, #31
 800c098:	3b01      	subs	r3, #1
 800c09a:	9306      	str	r3, [sp, #24]
 800c09c:	9a06      	ldr	r2, [sp, #24]
 800c09e:	9b04      	ldr	r3, [sp, #16]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	d102      	bne.n	800c0aa <__ieee754_pow+0x202>
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	463b      	mov	r3, r7
 800c0a8:	e7e6      	b.n	800c078 <__ieee754_pow+0x1d0>
 800c0aa:	4b19      	ldr	r3, [pc, #100]	; (800c110 <__ieee754_pow+0x268>)
 800c0ac:	4598      	cmp	r8, r3
 800c0ae:	f340 80fb 	ble.w	800c2a8 <__ieee754_pow+0x400>
 800c0b2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c0b6:	4598      	cmp	r8, r3
 800c0b8:	4b13      	ldr	r3, [pc, #76]	; (800c108 <__ieee754_pow+0x260>)
 800c0ba:	dd0c      	ble.n	800c0d6 <__ieee754_pow+0x22e>
 800c0bc:	429c      	cmp	r4, r3
 800c0be:	dc0f      	bgt.n	800c0e0 <__ieee754_pow+0x238>
 800c0c0:	f1b9 0f00 	cmp.w	r9, #0
 800c0c4:	da0f      	bge.n	800c0e6 <__ieee754_pow+0x23e>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	b009      	add	sp, #36	; 0x24
 800c0ca:	ecbd 8b06 	vpop	{d8-d10}
 800c0ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d2:	f000 bcf0 	b.w	800cab6 <__math_oflow>
 800c0d6:	429c      	cmp	r4, r3
 800c0d8:	dbf2      	blt.n	800c0c0 <__ieee754_pow+0x218>
 800c0da:	4b0a      	ldr	r3, [pc, #40]	; (800c104 <__ieee754_pow+0x25c>)
 800c0dc:	429c      	cmp	r4, r3
 800c0de:	dd19      	ble.n	800c114 <__ieee754_pow+0x26c>
 800c0e0:	f1b9 0f00 	cmp.w	r9, #0
 800c0e4:	dcef      	bgt.n	800c0c6 <__ieee754_pow+0x21e>
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	b009      	add	sp, #36	; 0x24
 800c0ea:	ecbd 8b06 	vpop	{d8-d10}
 800c0ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f2:	f000 bcd7 	b.w	800caa4 <__math_uflow>
 800c0f6:	bf00      	nop
 800c0f8:	fff00000 	.word	0xfff00000
 800c0fc:	7ff00000 	.word	0x7ff00000
 800c100:	433fffff 	.word	0x433fffff
 800c104:	3ff00000 	.word	0x3ff00000
 800c108:	3fefffff 	.word	0x3fefffff
 800c10c:	3fe00000 	.word	0x3fe00000
 800c110:	41e00000 	.word	0x41e00000
 800c114:	4b60      	ldr	r3, [pc, #384]	; (800c298 <__ieee754_pow+0x3f0>)
 800c116:	2200      	movs	r2, #0
 800c118:	f7f4 f862 	bl	80001e0 <__aeabi_dsub>
 800c11c:	a354      	add	r3, pc, #336	; (adr r3, 800c270 <__ieee754_pow+0x3c8>)
 800c11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c122:	4604      	mov	r4, r0
 800c124:	460d      	mov	r5, r1
 800c126:	f7f4 fa13 	bl	8000550 <__aeabi_dmul>
 800c12a:	a353      	add	r3, pc, #332	; (adr r3, 800c278 <__ieee754_pow+0x3d0>)
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	4606      	mov	r6, r0
 800c132:	460f      	mov	r7, r1
 800c134:	4620      	mov	r0, r4
 800c136:	4629      	mov	r1, r5
 800c138:	f7f4 fa0a 	bl	8000550 <__aeabi_dmul>
 800c13c:	4b57      	ldr	r3, [pc, #348]	; (800c29c <__ieee754_pow+0x3f4>)
 800c13e:	4682      	mov	sl, r0
 800c140:	468b      	mov	fp, r1
 800c142:	2200      	movs	r2, #0
 800c144:	4620      	mov	r0, r4
 800c146:	4629      	mov	r1, r5
 800c148:	f7f4 fa02 	bl	8000550 <__aeabi_dmul>
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	a14b      	add	r1, pc, #300	; (adr r1, 800c280 <__ieee754_pow+0x3d8>)
 800c152:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c156:	f7f4 f843 	bl	80001e0 <__aeabi_dsub>
 800c15a:	4622      	mov	r2, r4
 800c15c:	462b      	mov	r3, r5
 800c15e:	f7f4 f9f7 	bl	8000550 <__aeabi_dmul>
 800c162:	4602      	mov	r2, r0
 800c164:	460b      	mov	r3, r1
 800c166:	2000      	movs	r0, #0
 800c168:	494d      	ldr	r1, [pc, #308]	; (800c2a0 <__ieee754_pow+0x3f8>)
 800c16a:	f7f4 f839 	bl	80001e0 <__aeabi_dsub>
 800c16e:	4622      	mov	r2, r4
 800c170:	4680      	mov	r8, r0
 800c172:	4689      	mov	r9, r1
 800c174:	462b      	mov	r3, r5
 800c176:	4620      	mov	r0, r4
 800c178:	4629      	mov	r1, r5
 800c17a:	f7f4 f9e9 	bl	8000550 <__aeabi_dmul>
 800c17e:	4602      	mov	r2, r0
 800c180:	460b      	mov	r3, r1
 800c182:	4640      	mov	r0, r8
 800c184:	4649      	mov	r1, r9
 800c186:	f7f4 f9e3 	bl	8000550 <__aeabi_dmul>
 800c18a:	a33f      	add	r3, pc, #252	; (adr r3, 800c288 <__ieee754_pow+0x3e0>)
 800c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c190:	f7f4 f9de 	bl	8000550 <__aeabi_dmul>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	4650      	mov	r0, sl
 800c19a:	4659      	mov	r1, fp
 800c19c:	f7f4 f820 	bl	80001e0 <__aeabi_dsub>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4680      	mov	r8, r0
 800c1a6:	4689      	mov	r9, r1
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	4639      	mov	r1, r7
 800c1ac:	f7f4 f81a 	bl	80001e4 <__adddf3>
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	4632      	mov	r2, r6
 800c1b4:	463b      	mov	r3, r7
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	460d      	mov	r5, r1
 800c1ba:	f7f4 f811 	bl	80001e0 <__aeabi_dsub>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	4649      	mov	r1, r9
 800c1c6:	f7f4 f80b 	bl	80001e0 <__aeabi_dsub>
 800c1ca:	9b04      	ldr	r3, [sp, #16]
 800c1cc:	9a06      	ldr	r2, [sp, #24]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	4682      	mov	sl, r0
 800c1d4:	468b      	mov	fp, r1
 800c1d6:	f040 81e7 	bne.w	800c5a8 <__ieee754_pow+0x700>
 800c1da:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c290 <__ieee754_pow+0x3e8>
 800c1de:	eeb0 8a47 	vmov.f32	s16, s14
 800c1e2:	eef0 8a67 	vmov.f32	s17, s15
 800c1e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c1ea:	2600      	movs	r6, #0
 800c1ec:	4632      	mov	r2, r6
 800c1ee:	463b      	mov	r3, r7
 800c1f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1f4:	f7f3 fff4 	bl	80001e0 <__aeabi_dsub>
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	462b      	mov	r3, r5
 800c1fc:	f7f4 f9a8 	bl	8000550 <__aeabi_dmul>
 800c200:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c204:	4680      	mov	r8, r0
 800c206:	4689      	mov	r9, r1
 800c208:	4650      	mov	r0, sl
 800c20a:	4659      	mov	r1, fp
 800c20c:	f7f4 f9a0 	bl	8000550 <__aeabi_dmul>
 800c210:	4602      	mov	r2, r0
 800c212:	460b      	mov	r3, r1
 800c214:	4640      	mov	r0, r8
 800c216:	4649      	mov	r1, r9
 800c218:	f7f3 ffe4 	bl	80001e4 <__adddf3>
 800c21c:	4632      	mov	r2, r6
 800c21e:	463b      	mov	r3, r7
 800c220:	4680      	mov	r8, r0
 800c222:	4689      	mov	r9, r1
 800c224:	4620      	mov	r0, r4
 800c226:	4629      	mov	r1, r5
 800c228:	f7f4 f992 	bl	8000550 <__aeabi_dmul>
 800c22c:	460b      	mov	r3, r1
 800c22e:	4604      	mov	r4, r0
 800c230:	460d      	mov	r5, r1
 800c232:	4602      	mov	r2, r0
 800c234:	4649      	mov	r1, r9
 800c236:	4640      	mov	r0, r8
 800c238:	f7f3 ffd4 	bl	80001e4 <__adddf3>
 800c23c:	4b19      	ldr	r3, [pc, #100]	; (800c2a4 <__ieee754_pow+0x3fc>)
 800c23e:	4299      	cmp	r1, r3
 800c240:	ec45 4b19 	vmov	d9, r4, r5
 800c244:	4606      	mov	r6, r0
 800c246:	460f      	mov	r7, r1
 800c248:	468b      	mov	fp, r1
 800c24a:	f340 82f1 	ble.w	800c830 <__ieee754_pow+0x988>
 800c24e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c252:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c256:	4303      	orrs	r3, r0
 800c258:	f000 81e4 	beq.w	800c624 <__ieee754_pow+0x77c>
 800c25c:	ec51 0b18 	vmov	r0, r1, d8
 800c260:	2200      	movs	r2, #0
 800c262:	2300      	movs	r3, #0
 800c264:	f7f4 fbe6 	bl	8000a34 <__aeabi_dcmplt>
 800c268:	3800      	subs	r0, #0
 800c26a:	bf18      	it	ne
 800c26c:	2001      	movne	r0, #1
 800c26e:	e72b      	b.n	800c0c8 <__ieee754_pow+0x220>
 800c270:	60000000 	.word	0x60000000
 800c274:	3ff71547 	.word	0x3ff71547
 800c278:	f85ddf44 	.word	0xf85ddf44
 800c27c:	3e54ae0b 	.word	0x3e54ae0b
 800c280:	55555555 	.word	0x55555555
 800c284:	3fd55555 	.word	0x3fd55555
 800c288:	652b82fe 	.word	0x652b82fe
 800c28c:	3ff71547 	.word	0x3ff71547
 800c290:	00000000 	.word	0x00000000
 800c294:	bff00000 	.word	0xbff00000
 800c298:	3ff00000 	.word	0x3ff00000
 800c29c:	3fd00000 	.word	0x3fd00000
 800c2a0:	3fe00000 	.word	0x3fe00000
 800c2a4:	408fffff 	.word	0x408fffff
 800c2a8:	4bd5      	ldr	r3, [pc, #852]	; (800c600 <__ieee754_pow+0x758>)
 800c2aa:	402b      	ands	r3, r5
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	b92b      	cbnz	r3, 800c2bc <__ieee754_pow+0x414>
 800c2b0:	4bd4      	ldr	r3, [pc, #848]	; (800c604 <__ieee754_pow+0x75c>)
 800c2b2:	f7f4 f94d 	bl	8000550 <__aeabi_dmul>
 800c2b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	1523      	asrs	r3, r4, #20
 800c2be:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c2c2:	4413      	add	r3, r2
 800c2c4:	9305      	str	r3, [sp, #20]
 800c2c6:	4bd0      	ldr	r3, [pc, #832]	; (800c608 <__ieee754_pow+0x760>)
 800c2c8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c2cc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c2d0:	429c      	cmp	r4, r3
 800c2d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c2d6:	dd08      	ble.n	800c2ea <__ieee754_pow+0x442>
 800c2d8:	4bcc      	ldr	r3, [pc, #816]	; (800c60c <__ieee754_pow+0x764>)
 800c2da:	429c      	cmp	r4, r3
 800c2dc:	f340 8162 	ble.w	800c5a4 <__ieee754_pow+0x6fc>
 800c2e0:	9b05      	ldr	r3, [sp, #20]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	9305      	str	r3, [sp, #20]
 800c2e6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c2ea:	2400      	movs	r4, #0
 800c2ec:	00e3      	lsls	r3, r4, #3
 800c2ee:	9307      	str	r3, [sp, #28]
 800c2f0:	4bc7      	ldr	r3, [pc, #796]	; (800c610 <__ieee754_pow+0x768>)
 800c2f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c2f6:	ed93 7b00 	vldr	d7, [r3]
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	ec53 2b17 	vmov	r2, r3, d7
 800c300:	eeb0 9a47 	vmov.f32	s18, s14
 800c304:	eef0 9a67 	vmov.f32	s19, s15
 800c308:	4682      	mov	sl, r0
 800c30a:	f7f3 ff69 	bl	80001e0 <__aeabi_dsub>
 800c30e:	4652      	mov	r2, sl
 800c310:	4606      	mov	r6, r0
 800c312:	460f      	mov	r7, r1
 800c314:	462b      	mov	r3, r5
 800c316:	ec51 0b19 	vmov	r0, r1, d9
 800c31a:	f7f3 ff63 	bl	80001e4 <__adddf3>
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	2000      	movs	r0, #0
 800c324:	49bb      	ldr	r1, [pc, #748]	; (800c614 <__ieee754_pow+0x76c>)
 800c326:	f7f4 fa3d 	bl	80007a4 <__aeabi_ddiv>
 800c32a:	ec41 0b1a 	vmov	d10, r0, r1
 800c32e:	4602      	mov	r2, r0
 800c330:	460b      	mov	r3, r1
 800c332:	4630      	mov	r0, r6
 800c334:	4639      	mov	r1, r7
 800c336:	f7f4 f90b 	bl	8000550 <__aeabi_dmul>
 800c33a:	2300      	movs	r3, #0
 800c33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c340:	9302      	str	r3, [sp, #8]
 800c342:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c346:	46ab      	mov	fp, r5
 800c348:	106d      	asrs	r5, r5, #1
 800c34a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c34e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c352:	ec41 0b18 	vmov	d8, r0, r1
 800c356:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c35a:	2200      	movs	r2, #0
 800c35c:	4640      	mov	r0, r8
 800c35e:	4649      	mov	r1, r9
 800c360:	4614      	mov	r4, r2
 800c362:	461d      	mov	r5, r3
 800c364:	f7f4 f8f4 	bl	8000550 <__aeabi_dmul>
 800c368:	4602      	mov	r2, r0
 800c36a:	460b      	mov	r3, r1
 800c36c:	4630      	mov	r0, r6
 800c36e:	4639      	mov	r1, r7
 800c370:	f7f3 ff36 	bl	80001e0 <__aeabi_dsub>
 800c374:	ec53 2b19 	vmov	r2, r3, d9
 800c378:	4606      	mov	r6, r0
 800c37a:	460f      	mov	r7, r1
 800c37c:	4620      	mov	r0, r4
 800c37e:	4629      	mov	r1, r5
 800c380:	f7f3 ff2e 	bl	80001e0 <__aeabi_dsub>
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	4650      	mov	r0, sl
 800c38a:	4659      	mov	r1, fp
 800c38c:	f7f3 ff28 	bl	80001e0 <__aeabi_dsub>
 800c390:	4642      	mov	r2, r8
 800c392:	464b      	mov	r3, r9
 800c394:	f7f4 f8dc 	bl	8000550 <__aeabi_dmul>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4630      	mov	r0, r6
 800c39e:	4639      	mov	r1, r7
 800c3a0:	f7f3 ff1e 	bl	80001e0 <__aeabi_dsub>
 800c3a4:	ec53 2b1a 	vmov	r2, r3, d10
 800c3a8:	f7f4 f8d2 	bl	8000550 <__aeabi_dmul>
 800c3ac:	ec53 2b18 	vmov	r2, r3, d8
 800c3b0:	ec41 0b19 	vmov	d9, r0, r1
 800c3b4:	ec51 0b18 	vmov	r0, r1, d8
 800c3b8:	f7f4 f8ca 	bl	8000550 <__aeabi_dmul>
 800c3bc:	a37c      	add	r3, pc, #496	; (adr r3, 800c5b0 <__ieee754_pow+0x708>)
 800c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	460d      	mov	r5, r1
 800c3c6:	f7f4 f8c3 	bl	8000550 <__aeabi_dmul>
 800c3ca:	a37b      	add	r3, pc, #492	; (adr r3, 800c5b8 <__ieee754_pow+0x710>)
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	f7f3 ff08 	bl	80001e4 <__adddf3>
 800c3d4:	4622      	mov	r2, r4
 800c3d6:	462b      	mov	r3, r5
 800c3d8:	f7f4 f8ba 	bl	8000550 <__aeabi_dmul>
 800c3dc:	a378      	add	r3, pc, #480	; (adr r3, 800c5c0 <__ieee754_pow+0x718>)
 800c3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e2:	f7f3 feff 	bl	80001e4 <__adddf3>
 800c3e6:	4622      	mov	r2, r4
 800c3e8:	462b      	mov	r3, r5
 800c3ea:	f7f4 f8b1 	bl	8000550 <__aeabi_dmul>
 800c3ee:	a376      	add	r3, pc, #472	; (adr r3, 800c5c8 <__ieee754_pow+0x720>)
 800c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f4:	f7f3 fef6 	bl	80001e4 <__adddf3>
 800c3f8:	4622      	mov	r2, r4
 800c3fa:	462b      	mov	r3, r5
 800c3fc:	f7f4 f8a8 	bl	8000550 <__aeabi_dmul>
 800c400:	a373      	add	r3, pc, #460	; (adr r3, 800c5d0 <__ieee754_pow+0x728>)
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	f7f3 feed 	bl	80001e4 <__adddf3>
 800c40a:	4622      	mov	r2, r4
 800c40c:	462b      	mov	r3, r5
 800c40e:	f7f4 f89f 	bl	8000550 <__aeabi_dmul>
 800c412:	a371      	add	r3, pc, #452	; (adr r3, 800c5d8 <__ieee754_pow+0x730>)
 800c414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c418:	f7f3 fee4 	bl	80001e4 <__adddf3>
 800c41c:	4622      	mov	r2, r4
 800c41e:	4606      	mov	r6, r0
 800c420:	460f      	mov	r7, r1
 800c422:	462b      	mov	r3, r5
 800c424:	4620      	mov	r0, r4
 800c426:	4629      	mov	r1, r5
 800c428:	f7f4 f892 	bl	8000550 <__aeabi_dmul>
 800c42c:	4602      	mov	r2, r0
 800c42e:	460b      	mov	r3, r1
 800c430:	4630      	mov	r0, r6
 800c432:	4639      	mov	r1, r7
 800c434:	f7f4 f88c 	bl	8000550 <__aeabi_dmul>
 800c438:	4642      	mov	r2, r8
 800c43a:	4604      	mov	r4, r0
 800c43c:	460d      	mov	r5, r1
 800c43e:	464b      	mov	r3, r9
 800c440:	ec51 0b18 	vmov	r0, r1, d8
 800c444:	f7f3 fece 	bl	80001e4 <__adddf3>
 800c448:	ec53 2b19 	vmov	r2, r3, d9
 800c44c:	f7f4 f880 	bl	8000550 <__aeabi_dmul>
 800c450:	4622      	mov	r2, r4
 800c452:	462b      	mov	r3, r5
 800c454:	f7f3 fec6 	bl	80001e4 <__adddf3>
 800c458:	4642      	mov	r2, r8
 800c45a:	4682      	mov	sl, r0
 800c45c:	468b      	mov	fp, r1
 800c45e:	464b      	mov	r3, r9
 800c460:	4640      	mov	r0, r8
 800c462:	4649      	mov	r1, r9
 800c464:	f7f4 f874 	bl	8000550 <__aeabi_dmul>
 800c468:	4b6b      	ldr	r3, [pc, #428]	; (800c618 <__ieee754_pow+0x770>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	4606      	mov	r6, r0
 800c46e:	460f      	mov	r7, r1
 800c470:	f7f3 feb8 	bl	80001e4 <__adddf3>
 800c474:	4652      	mov	r2, sl
 800c476:	465b      	mov	r3, fp
 800c478:	f7f3 feb4 	bl	80001e4 <__adddf3>
 800c47c:	2000      	movs	r0, #0
 800c47e:	4604      	mov	r4, r0
 800c480:	460d      	mov	r5, r1
 800c482:	4602      	mov	r2, r0
 800c484:	460b      	mov	r3, r1
 800c486:	4640      	mov	r0, r8
 800c488:	4649      	mov	r1, r9
 800c48a:	f7f4 f861 	bl	8000550 <__aeabi_dmul>
 800c48e:	4b62      	ldr	r3, [pc, #392]	; (800c618 <__ieee754_pow+0x770>)
 800c490:	4680      	mov	r8, r0
 800c492:	4689      	mov	r9, r1
 800c494:	2200      	movs	r2, #0
 800c496:	4620      	mov	r0, r4
 800c498:	4629      	mov	r1, r5
 800c49a:	f7f3 fea1 	bl	80001e0 <__aeabi_dsub>
 800c49e:	4632      	mov	r2, r6
 800c4a0:	463b      	mov	r3, r7
 800c4a2:	f7f3 fe9d 	bl	80001e0 <__aeabi_dsub>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	4650      	mov	r0, sl
 800c4ac:	4659      	mov	r1, fp
 800c4ae:	f7f3 fe97 	bl	80001e0 <__aeabi_dsub>
 800c4b2:	ec53 2b18 	vmov	r2, r3, d8
 800c4b6:	f7f4 f84b 	bl	8000550 <__aeabi_dmul>
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	4606      	mov	r6, r0
 800c4be:	460f      	mov	r7, r1
 800c4c0:	462b      	mov	r3, r5
 800c4c2:	ec51 0b19 	vmov	r0, r1, d9
 800c4c6:	f7f4 f843 	bl	8000550 <__aeabi_dmul>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	4639      	mov	r1, r7
 800c4d2:	f7f3 fe87 	bl	80001e4 <__adddf3>
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	460f      	mov	r7, r1
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4640      	mov	r0, r8
 800c4e0:	4649      	mov	r1, r9
 800c4e2:	f7f3 fe7f 	bl	80001e4 <__adddf3>
 800c4e6:	a33e      	add	r3, pc, #248	; (adr r3, 800c5e0 <__ieee754_pow+0x738>)
 800c4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	460d      	mov	r5, r1
 800c4f2:	f7f4 f82d 	bl	8000550 <__aeabi_dmul>
 800c4f6:	4642      	mov	r2, r8
 800c4f8:	ec41 0b18 	vmov	d8, r0, r1
 800c4fc:	464b      	mov	r3, r9
 800c4fe:	4620      	mov	r0, r4
 800c500:	4629      	mov	r1, r5
 800c502:	f7f3 fe6d 	bl	80001e0 <__aeabi_dsub>
 800c506:	4602      	mov	r2, r0
 800c508:	460b      	mov	r3, r1
 800c50a:	4630      	mov	r0, r6
 800c50c:	4639      	mov	r1, r7
 800c50e:	f7f3 fe67 	bl	80001e0 <__aeabi_dsub>
 800c512:	a335      	add	r3, pc, #212	; (adr r3, 800c5e8 <__ieee754_pow+0x740>)
 800c514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c518:	f7f4 f81a 	bl	8000550 <__aeabi_dmul>
 800c51c:	a334      	add	r3, pc, #208	; (adr r3, 800c5f0 <__ieee754_pow+0x748>)
 800c51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c522:	4606      	mov	r6, r0
 800c524:	460f      	mov	r7, r1
 800c526:	4620      	mov	r0, r4
 800c528:	4629      	mov	r1, r5
 800c52a:	f7f4 f811 	bl	8000550 <__aeabi_dmul>
 800c52e:	4602      	mov	r2, r0
 800c530:	460b      	mov	r3, r1
 800c532:	4630      	mov	r0, r6
 800c534:	4639      	mov	r1, r7
 800c536:	f7f3 fe55 	bl	80001e4 <__adddf3>
 800c53a:	9a07      	ldr	r2, [sp, #28]
 800c53c:	4b37      	ldr	r3, [pc, #220]	; (800c61c <__ieee754_pow+0x774>)
 800c53e:	4413      	add	r3, r2
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	f7f3 fe4e 	bl	80001e4 <__adddf3>
 800c548:	4682      	mov	sl, r0
 800c54a:	9805      	ldr	r0, [sp, #20]
 800c54c:	468b      	mov	fp, r1
 800c54e:	f7f3 ff95 	bl	800047c <__aeabi_i2d>
 800c552:	9a07      	ldr	r2, [sp, #28]
 800c554:	4b32      	ldr	r3, [pc, #200]	; (800c620 <__ieee754_pow+0x778>)
 800c556:	4413      	add	r3, r2
 800c558:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c55c:	4606      	mov	r6, r0
 800c55e:	460f      	mov	r7, r1
 800c560:	4652      	mov	r2, sl
 800c562:	465b      	mov	r3, fp
 800c564:	ec51 0b18 	vmov	r0, r1, d8
 800c568:	f7f3 fe3c 	bl	80001e4 <__adddf3>
 800c56c:	4642      	mov	r2, r8
 800c56e:	464b      	mov	r3, r9
 800c570:	f7f3 fe38 	bl	80001e4 <__adddf3>
 800c574:	4632      	mov	r2, r6
 800c576:	463b      	mov	r3, r7
 800c578:	f7f3 fe34 	bl	80001e4 <__adddf3>
 800c57c:	2000      	movs	r0, #0
 800c57e:	4632      	mov	r2, r6
 800c580:	463b      	mov	r3, r7
 800c582:	4604      	mov	r4, r0
 800c584:	460d      	mov	r5, r1
 800c586:	f7f3 fe2b 	bl	80001e0 <__aeabi_dsub>
 800c58a:	4642      	mov	r2, r8
 800c58c:	464b      	mov	r3, r9
 800c58e:	f7f3 fe27 	bl	80001e0 <__aeabi_dsub>
 800c592:	ec53 2b18 	vmov	r2, r3, d8
 800c596:	f7f3 fe23 	bl	80001e0 <__aeabi_dsub>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4650      	mov	r0, sl
 800c5a0:	4659      	mov	r1, fp
 800c5a2:	e610      	b.n	800c1c6 <__ieee754_pow+0x31e>
 800c5a4:	2401      	movs	r4, #1
 800c5a6:	e6a1      	b.n	800c2ec <__ieee754_pow+0x444>
 800c5a8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c5f8 <__ieee754_pow+0x750>
 800c5ac:	e617      	b.n	800c1de <__ieee754_pow+0x336>
 800c5ae:	bf00      	nop
 800c5b0:	4a454eef 	.word	0x4a454eef
 800c5b4:	3fca7e28 	.word	0x3fca7e28
 800c5b8:	93c9db65 	.word	0x93c9db65
 800c5bc:	3fcd864a 	.word	0x3fcd864a
 800c5c0:	a91d4101 	.word	0xa91d4101
 800c5c4:	3fd17460 	.word	0x3fd17460
 800c5c8:	518f264d 	.word	0x518f264d
 800c5cc:	3fd55555 	.word	0x3fd55555
 800c5d0:	db6fabff 	.word	0xdb6fabff
 800c5d4:	3fdb6db6 	.word	0x3fdb6db6
 800c5d8:	33333303 	.word	0x33333303
 800c5dc:	3fe33333 	.word	0x3fe33333
 800c5e0:	e0000000 	.word	0xe0000000
 800c5e4:	3feec709 	.word	0x3feec709
 800c5e8:	dc3a03fd 	.word	0xdc3a03fd
 800c5ec:	3feec709 	.word	0x3feec709
 800c5f0:	145b01f5 	.word	0x145b01f5
 800c5f4:	be3e2fe0 	.word	0xbe3e2fe0
 800c5f8:	00000000 	.word	0x00000000
 800c5fc:	3ff00000 	.word	0x3ff00000
 800c600:	7ff00000 	.word	0x7ff00000
 800c604:	43400000 	.word	0x43400000
 800c608:	0003988e 	.word	0x0003988e
 800c60c:	000bb679 	.word	0x000bb679
 800c610:	0800d7b0 	.word	0x0800d7b0
 800c614:	3ff00000 	.word	0x3ff00000
 800c618:	40080000 	.word	0x40080000
 800c61c:	0800d7d0 	.word	0x0800d7d0
 800c620:	0800d7c0 	.word	0x0800d7c0
 800c624:	a3b5      	add	r3, pc, #724	; (adr r3, 800c8fc <__ieee754_pow+0xa54>)
 800c626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62a:	4640      	mov	r0, r8
 800c62c:	4649      	mov	r1, r9
 800c62e:	f7f3 fdd9 	bl	80001e4 <__adddf3>
 800c632:	4622      	mov	r2, r4
 800c634:	ec41 0b1a 	vmov	d10, r0, r1
 800c638:	462b      	mov	r3, r5
 800c63a:	4630      	mov	r0, r6
 800c63c:	4639      	mov	r1, r7
 800c63e:	f7f3 fdcf 	bl	80001e0 <__aeabi_dsub>
 800c642:	4602      	mov	r2, r0
 800c644:	460b      	mov	r3, r1
 800c646:	ec51 0b1a 	vmov	r0, r1, d10
 800c64a:	f7f4 fa11 	bl	8000a70 <__aeabi_dcmpgt>
 800c64e:	2800      	cmp	r0, #0
 800c650:	f47f ae04 	bne.w	800c25c <__ieee754_pow+0x3b4>
 800c654:	4aa4      	ldr	r2, [pc, #656]	; (800c8e8 <__ieee754_pow+0xa40>)
 800c656:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c65a:	4293      	cmp	r3, r2
 800c65c:	f340 8108 	ble.w	800c870 <__ieee754_pow+0x9c8>
 800c660:	151b      	asrs	r3, r3, #20
 800c662:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c666:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c66a:	fa4a f303 	asr.w	r3, sl, r3
 800c66e:	445b      	add	r3, fp
 800c670:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c674:	4e9d      	ldr	r6, [pc, #628]	; (800c8ec <__ieee754_pow+0xa44>)
 800c676:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c67a:	4116      	asrs	r6, r2
 800c67c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c680:	2000      	movs	r0, #0
 800c682:	ea23 0106 	bic.w	r1, r3, r6
 800c686:	f1c2 0214 	rsb	r2, r2, #20
 800c68a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c68e:	fa4a fa02 	asr.w	sl, sl, r2
 800c692:	f1bb 0f00 	cmp.w	fp, #0
 800c696:	4602      	mov	r2, r0
 800c698:	460b      	mov	r3, r1
 800c69a:	4620      	mov	r0, r4
 800c69c:	4629      	mov	r1, r5
 800c69e:	bfb8      	it	lt
 800c6a0:	f1ca 0a00 	rsblt	sl, sl, #0
 800c6a4:	f7f3 fd9c 	bl	80001e0 <__aeabi_dsub>
 800c6a8:	ec41 0b19 	vmov	d9, r0, r1
 800c6ac:	4642      	mov	r2, r8
 800c6ae:	464b      	mov	r3, r9
 800c6b0:	ec51 0b19 	vmov	r0, r1, d9
 800c6b4:	f7f3 fd96 	bl	80001e4 <__adddf3>
 800c6b8:	a37b      	add	r3, pc, #492	; (adr r3, 800c8a8 <__ieee754_pow+0xa00>)
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	2000      	movs	r0, #0
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	460d      	mov	r5, r1
 800c6c4:	f7f3 ff44 	bl	8000550 <__aeabi_dmul>
 800c6c8:	ec53 2b19 	vmov	r2, r3, d9
 800c6cc:	4606      	mov	r6, r0
 800c6ce:	460f      	mov	r7, r1
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	4629      	mov	r1, r5
 800c6d4:	f7f3 fd84 	bl	80001e0 <__aeabi_dsub>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4640      	mov	r0, r8
 800c6de:	4649      	mov	r1, r9
 800c6e0:	f7f3 fd7e 	bl	80001e0 <__aeabi_dsub>
 800c6e4:	a372      	add	r3, pc, #456	; (adr r3, 800c8b0 <__ieee754_pow+0xa08>)
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	f7f3 ff31 	bl	8000550 <__aeabi_dmul>
 800c6ee:	a372      	add	r3, pc, #456	; (adr r3, 800c8b8 <__ieee754_pow+0xa10>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	4680      	mov	r8, r0
 800c6f6:	4689      	mov	r9, r1
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	f7f3 ff28 	bl	8000550 <__aeabi_dmul>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	4640      	mov	r0, r8
 800c706:	4649      	mov	r1, r9
 800c708:	f7f3 fd6c 	bl	80001e4 <__adddf3>
 800c70c:	4604      	mov	r4, r0
 800c70e:	460d      	mov	r5, r1
 800c710:	4602      	mov	r2, r0
 800c712:	460b      	mov	r3, r1
 800c714:	4630      	mov	r0, r6
 800c716:	4639      	mov	r1, r7
 800c718:	f7f3 fd64 	bl	80001e4 <__adddf3>
 800c71c:	4632      	mov	r2, r6
 800c71e:	463b      	mov	r3, r7
 800c720:	4680      	mov	r8, r0
 800c722:	4689      	mov	r9, r1
 800c724:	f7f3 fd5c 	bl	80001e0 <__aeabi_dsub>
 800c728:	4602      	mov	r2, r0
 800c72a:	460b      	mov	r3, r1
 800c72c:	4620      	mov	r0, r4
 800c72e:	4629      	mov	r1, r5
 800c730:	f7f3 fd56 	bl	80001e0 <__aeabi_dsub>
 800c734:	4642      	mov	r2, r8
 800c736:	4606      	mov	r6, r0
 800c738:	460f      	mov	r7, r1
 800c73a:	464b      	mov	r3, r9
 800c73c:	4640      	mov	r0, r8
 800c73e:	4649      	mov	r1, r9
 800c740:	f7f3 ff06 	bl	8000550 <__aeabi_dmul>
 800c744:	a35e      	add	r3, pc, #376	; (adr r3, 800c8c0 <__ieee754_pow+0xa18>)
 800c746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74a:	4604      	mov	r4, r0
 800c74c:	460d      	mov	r5, r1
 800c74e:	f7f3 feff 	bl	8000550 <__aeabi_dmul>
 800c752:	a35d      	add	r3, pc, #372	; (adr r3, 800c8c8 <__ieee754_pow+0xa20>)
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	f7f3 fd42 	bl	80001e0 <__aeabi_dsub>
 800c75c:	4622      	mov	r2, r4
 800c75e:	462b      	mov	r3, r5
 800c760:	f7f3 fef6 	bl	8000550 <__aeabi_dmul>
 800c764:	a35a      	add	r3, pc, #360	; (adr r3, 800c8d0 <__ieee754_pow+0xa28>)
 800c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76a:	f7f3 fd3b 	bl	80001e4 <__adddf3>
 800c76e:	4622      	mov	r2, r4
 800c770:	462b      	mov	r3, r5
 800c772:	f7f3 feed 	bl	8000550 <__aeabi_dmul>
 800c776:	a358      	add	r3, pc, #352	; (adr r3, 800c8d8 <__ieee754_pow+0xa30>)
 800c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77c:	f7f3 fd30 	bl	80001e0 <__aeabi_dsub>
 800c780:	4622      	mov	r2, r4
 800c782:	462b      	mov	r3, r5
 800c784:	f7f3 fee4 	bl	8000550 <__aeabi_dmul>
 800c788:	a355      	add	r3, pc, #340	; (adr r3, 800c8e0 <__ieee754_pow+0xa38>)
 800c78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78e:	f7f3 fd29 	bl	80001e4 <__adddf3>
 800c792:	4622      	mov	r2, r4
 800c794:	462b      	mov	r3, r5
 800c796:	f7f3 fedb 	bl	8000550 <__aeabi_dmul>
 800c79a:	4602      	mov	r2, r0
 800c79c:	460b      	mov	r3, r1
 800c79e:	4640      	mov	r0, r8
 800c7a0:	4649      	mov	r1, r9
 800c7a2:	f7f3 fd1d 	bl	80001e0 <__aeabi_dsub>
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	460d      	mov	r5, r1
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	4649      	mov	r1, r9
 800c7b2:	f7f3 fecd 	bl	8000550 <__aeabi_dmul>
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	ec41 0b19 	vmov	d9, r0, r1
 800c7bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	4629      	mov	r1, r5
 800c7c4:	f7f3 fd0c 	bl	80001e0 <__aeabi_dsub>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	ec51 0b19 	vmov	r0, r1, d9
 800c7d0:	f7f3 ffe8 	bl	80007a4 <__aeabi_ddiv>
 800c7d4:	4632      	mov	r2, r6
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	460d      	mov	r5, r1
 800c7da:	463b      	mov	r3, r7
 800c7dc:	4640      	mov	r0, r8
 800c7de:	4649      	mov	r1, r9
 800c7e0:	f7f3 feb6 	bl	8000550 <__aeabi_dmul>
 800c7e4:	4632      	mov	r2, r6
 800c7e6:	463b      	mov	r3, r7
 800c7e8:	f7f3 fcfc 	bl	80001e4 <__adddf3>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	f7f3 fcf4 	bl	80001e0 <__aeabi_dsub>
 800c7f8:	4642      	mov	r2, r8
 800c7fa:	464b      	mov	r3, r9
 800c7fc:	f7f3 fcf0 	bl	80001e0 <__aeabi_dsub>
 800c800:	460b      	mov	r3, r1
 800c802:	4602      	mov	r2, r0
 800c804:	493a      	ldr	r1, [pc, #232]	; (800c8f0 <__ieee754_pow+0xa48>)
 800c806:	2000      	movs	r0, #0
 800c808:	f7f3 fcea 	bl	80001e0 <__aeabi_dsub>
 800c80c:	ec41 0b10 	vmov	d0, r0, r1
 800c810:	ee10 3a90 	vmov	r3, s1
 800c814:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c81c:	da2b      	bge.n	800c876 <__ieee754_pow+0x9ce>
 800c81e:	4650      	mov	r0, sl
 800c820:	f000 fb06 	bl	800ce30 <scalbn>
 800c824:	ec51 0b10 	vmov	r0, r1, d0
 800c828:	ec53 2b18 	vmov	r2, r3, d8
 800c82c:	f7ff bbed 	b.w	800c00a <__ieee754_pow+0x162>
 800c830:	4b30      	ldr	r3, [pc, #192]	; (800c8f4 <__ieee754_pow+0xa4c>)
 800c832:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c836:	429e      	cmp	r6, r3
 800c838:	f77f af0c 	ble.w	800c654 <__ieee754_pow+0x7ac>
 800c83c:	4b2e      	ldr	r3, [pc, #184]	; (800c8f8 <__ieee754_pow+0xa50>)
 800c83e:	440b      	add	r3, r1
 800c840:	4303      	orrs	r3, r0
 800c842:	d009      	beq.n	800c858 <__ieee754_pow+0x9b0>
 800c844:	ec51 0b18 	vmov	r0, r1, d8
 800c848:	2200      	movs	r2, #0
 800c84a:	2300      	movs	r3, #0
 800c84c:	f7f4 f8f2 	bl	8000a34 <__aeabi_dcmplt>
 800c850:	3800      	subs	r0, #0
 800c852:	bf18      	it	ne
 800c854:	2001      	movne	r0, #1
 800c856:	e447      	b.n	800c0e8 <__ieee754_pow+0x240>
 800c858:	4622      	mov	r2, r4
 800c85a:	462b      	mov	r3, r5
 800c85c:	f7f3 fcc0 	bl	80001e0 <__aeabi_dsub>
 800c860:	4642      	mov	r2, r8
 800c862:	464b      	mov	r3, r9
 800c864:	f7f4 f8fa 	bl	8000a5c <__aeabi_dcmpge>
 800c868:	2800      	cmp	r0, #0
 800c86a:	f43f aef3 	beq.w	800c654 <__ieee754_pow+0x7ac>
 800c86e:	e7e9      	b.n	800c844 <__ieee754_pow+0x99c>
 800c870:	f04f 0a00 	mov.w	sl, #0
 800c874:	e71a      	b.n	800c6ac <__ieee754_pow+0x804>
 800c876:	ec51 0b10 	vmov	r0, r1, d0
 800c87a:	4619      	mov	r1, r3
 800c87c:	e7d4      	b.n	800c828 <__ieee754_pow+0x980>
 800c87e:	491c      	ldr	r1, [pc, #112]	; (800c8f0 <__ieee754_pow+0xa48>)
 800c880:	2000      	movs	r0, #0
 800c882:	f7ff bb30 	b.w	800bee6 <__ieee754_pow+0x3e>
 800c886:	2000      	movs	r0, #0
 800c888:	2100      	movs	r1, #0
 800c88a:	f7ff bb2c 	b.w	800bee6 <__ieee754_pow+0x3e>
 800c88e:	4630      	mov	r0, r6
 800c890:	4639      	mov	r1, r7
 800c892:	f7ff bb28 	b.w	800bee6 <__ieee754_pow+0x3e>
 800c896:	9204      	str	r2, [sp, #16]
 800c898:	f7ff bb7a 	b.w	800bf90 <__ieee754_pow+0xe8>
 800c89c:	2300      	movs	r3, #0
 800c89e:	f7ff bb64 	b.w	800bf6a <__ieee754_pow+0xc2>
 800c8a2:	bf00      	nop
 800c8a4:	f3af 8000 	nop.w
 800c8a8:	00000000 	.word	0x00000000
 800c8ac:	3fe62e43 	.word	0x3fe62e43
 800c8b0:	fefa39ef 	.word	0xfefa39ef
 800c8b4:	3fe62e42 	.word	0x3fe62e42
 800c8b8:	0ca86c39 	.word	0x0ca86c39
 800c8bc:	be205c61 	.word	0xbe205c61
 800c8c0:	72bea4d0 	.word	0x72bea4d0
 800c8c4:	3e663769 	.word	0x3e663769
 800c8c8:	c5d26bf1 	.word	0xc5d26bf1
 800c8cc:	3ebbbd41 	.word	0x3ebbbd41
 800c8d0:	af25de2c 	.word	0xaf25de2c
 800c8d4:	3f11566a 	.word	0x3f11566a
 800c8d8:	16bebd93 	.word	0x16bebd93
 800c8dc:	3f66c16c 	.word	0x3f66c16c
 800c8e0:	5555553e 	.word	0x5555553e
 800c8e4:	3fc55555 	.word	0x3fc55555
 800c8e8:	3fe00000 	.word	0x3fe00000
 800c8ec:	000fffff 	.word	0x000fffff
 800c8f0:	3ff00000 	.word	0x3ff00000
 800c8f4:	4090cbff 	.word	0x4090cbff
 800c8f8:	3f6f3400 	.word	0x3f6f3400
 800c8fc:	652b82fe 	.word	0x652b82fe
 800c900:	3c971547 	.word	0x3c971547

0800c904 <__ieee754_sqrt>:
 800c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c908:	ec55 4b10 	vmov	r4, r5, d0
 800c90c:	4e55      	ldr	r6, [pc, #340]	; (800ca64 <__ieee754_sqrt+0x160>)
 800c90e:	43ae      	bics	r6, r5
 800c910:	ee10 0a10 	vmov	r0, s0
 800c914:	ee10 3a10 	vmov	r3, s0
 800c918:	462a      	mov	r2, r5
 800c91a:	4629      	mov	r1, r5
 800c91c:	d110      	bne.n	800c940 <__ieee754_sqrt+0x3c>
 800c91e:	ee10 2a10 	vmov	r2, s0
 800c922:	462b      	mov	r3, r5
 800c924:	f7f3 fe14 	bl	8000550 <__aeabi_dmul>
 800c928:	4602      	mov	r2, r0
 800c92a:	460b      	mov	r3, r1
 800c92c:	4620      	mov	r0, r4
 800c92e:	4629      	mov	r1, r5
 800c930:	f7f3 fc58 	bl	80001e4 <__adddf3>
 800c934:	4604      	mov	r4, r0
 800c936:	460d      	mov	r5, r1
 800c938:	ec45 4b10 	vmov	d0, r4, r5
 800c93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c940:	2d00      	cmp	r5, #0
 800c942:	dc10      	bgt.n	800c966 <__ieee754_sqrt+0x62>
 800c944:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c948:	4330      	orrs	r0, r6
 800c94a:	d0f5      	beq.n	800c938 <__ieee754_sqrt+0x34>
 800c94c:	b15d      	cbz	r5, 800c966 <__ieee754_sqrt+0x62>
 800c94e:	ee10 2a10 	vmov	r2, s0
 800c952:	462b      	mov	r3, r5
 800c954:	ee10 0a10 	vmov	r0, s0
 800c958:	f7f3 fc42 	bl	80001e0 <__aeabi_dsub>
 800c95c:	4602      	mov	r2, r0
 800c95e:	460b      	mov	r3, r1
 800c960:	f7f3 ff20 	bl	80007a4 <__aeabi_ddiv>
 800c964:	e7e6      	b.n	800c934 <__ieee754_sqrt+0x30>
 800c966:	1512      	asrs	r2, r2, #20
 800c968:	d074      	beq.n	800ca54 <__ieee754_sqrt+0x150>
 800c96a:	07d4      	lsls	r4, r2, #31
 800c96c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c970:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c978:	bf5e      	ittt	pl
 800c97a:	0fda      	lsrpl	r2, r3, #31
 800c97c:	005b      	lslpl	r3, r3, #1
 800c97e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c982:	2400      	movs	r4, #0
 800c984:	0fda      	lsrs	r2, r3, #31
 800c986:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c98a:	107f      	asrs	r7, r7, #1
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	2516      	movs	r5, #22
 800c990:	4620      	mov	r0, r4
 800c992:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c996:	1886      	adds	r6, r0, r2
 800c998:	428e      	cmp	r6, r1
 800c99a:	bfde      	ittt	le
 800c99c:	1b89      	suble	r1, r1, r6
 800c99e:	18b0      	addle	r0, r6, r2
 800c9a0:	18a4      	addle	r4, r4, r2
 800c9a2:	0049      	lsls	r1, r1, #1
 800c9a4:	3d01      	subs	r5, #1
 800c9a6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c9aa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c9ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c9b2:	d1f0      	bne.n	800c996 <__ieee754_sqrt+0x92>
 800c9b4:	462a      	mov	r2, r5
 800c9b6:	f04f 0e20 	mov.w	lr, #32
 800c9ba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c9be:	4281      	cmp	r1, r0
 800c9c0:	eb06 0c05 	add.w	ip, r6, r5
 800c9c4:	dc02      	bgt.n	800c9cc <__ieee754_sqrt+0xc8>
 800c9c6:	d113      	bne.n	800c9f0 <__ieee754_sqrt+0xec>
 800c9c8:	459c      	cmp	ip, r3
 800c9ca:	d811      	bhi.n	800c9f0 <__ieee754_sqrt+0xec>
 800c9cc:	f1bc 0f00 	cmp.w	ip, #0
 800c9d0:	eb0c 0506 	add.w	r5, ip, r6
 800c9d4:	da43      	bge.n	800ca5e <__ieee754_sqrt+0x15a>
 800c9d6:	2d00      	cmp	r5, #0
 800c9d8:	db41      	blt.n	800ca5e <__ieee754_sqrt+0x15a>
 800c9da:	f100 0801 	add.w	r8, r0, #1
 800c9de:	1a09      	subs	r1, r1, r0
 800c9e0:	459c      	cmp	ip, r3
 800c9e2:	bf88      	it	hi
 800c9e4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c9e8:	eba3 030c 	sub.w	r3, r3, ip
 800c9ec:	4432      	add	r2, r6
 800c9ee:	4640      	mov	r0, r8
 800c9f0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c9f4:	f1be 0e01 	subs.w	lr, lr, #1
 800c9f8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c9fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca00:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ca04:	d1db      	bne.n	800c9be <__ieee754_sqrt+0xba>
 800ca06:	430b      	orrs	r3, r1
 800ca08:	d006      	beq.n	800ca18 <__ieee754_sqrt+0x114>
 800ca0a:	1c50      	adds	r0, r2, #1
 800ca0c:	bf13      	iteet	ne
 800ca0e:	3201      	addne	r2, #1
 800ca10:	3401      	addeq	r4, #1
 800ca12:	4672      	moveq	r2, lr
 800ca14:	f022 0201 	bicne.w	r2, r2, #1
 800ca18:	1063      	asrs	r3, r4, #1
 800ca1a:	0852      	lsrs	r2, r2, #1
 800ca1c:	07e1      	lsls	r1, r4, #31
 800ca1e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ca22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ca26:	bf48      	it	mi
 800ca28:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ca2c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ca30:	4614      	mov	r4, r2
 800ca32:	e781      	b.n	800c938 <__ieee754_sqrt+0x34>
 800ca34:	0ad9      	lsrs	r1, r3, #11
 800ca36:	3815      	subs	r0, #21
 800ca38:	055b      	lsls	r3, r3, #21
 800ca3a:	2900      	cmp	r1, #0
 800ca3c:	d0fa      	beq.n	800ca34 <__ieee754_sqrt+0x130>
 800ca3e:	02cd      	lsls	r5, r1, #11
 800ca40:	d50a      	bpl.n	800ca58 <__ieee754_sqrt+0x154>
 800ca42:	f1c2 0420 	rsb	r4, r2, #32
 800ca46:	fa23 f404 	lsr.w	r4, r3, r4
 800ca4a:	1e55      	subs	r5, r2, #1
 800ca4c:	4093      	lsls	r3, r2
 800ca4e:	4321      	orrs	r1, r4
 800ca50:	1b42      	subs	r2, r0, r5
 800ca52:	e78a      	b.n	800c96a <__ieee754_sqrt+0x66>
 800ca54:	4610      	mov	r0, r2
 800ca56:	e7f0      	b.n	800ca3a <__ieee754_sqrt+0x136>
 800ca58:	0049      	lsls	r1, r1, #1
 800ca5a:	3201      	adds	r2, #1
 800ca5c:	e7ef      	b.n	800ca3e <__ieee754_sqrt+0x13a>
 800ca5e:	4680      	mov	r8, r0
 800ca60:	e7bd      	b.n	800c9de <__ieee754_sqrt+0xda>
 800ca62:	bf00      	nop
 800ca64:	7ff00000 	.word	0x7ff00000

0800ca68 <with_errno>:
 800ca68:	b570      	push	{r4, r5, r6, lr}
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	460d      	mov	r5, r1
 800ca6e:	4616      	mov	r6, r2
 800ca70:	f7ff f870 	bl	800bb54 <__errno>
 800ca74:	4629      	mov	r1, r5
 800ca76:	6006      	str	r6, [r0, #0]
 800ca78:	4620      	mov	r0, r4
 800ca7a:	bd70      	pop	{r4, r5, r6, pc}

0800ca7c <xflow>:
 800ca7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca7e:	4614      	mov	r4, r2
 800ca80:	461d      	mov	r5, r3
 800ca82:	b108      	cbz	r0, 800ca88 <xflow+0xc>
 800ca84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ca88:	e9cd 2300 	strd	r2, r3, [sp]
 800ca8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca90:	4620      	mov	r0, r4
 800ca92:	4629      	mov	r1, r5
 800ca94:	f7f3 fd5c 	bl	8000550 <__aeabi_dmul>
 800ca98:	2222      	movs	r2, #34	; 0x22
 800ca9a:	b003      	add	sp, #12
 800ca9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800caa0:	f7ff bfe2 	b.w	800ca68 <with_errno>

0800caa4 <__math_uflow>:
 800caa4:	b508      	push	{r3, lr}
 800caa6:	2200      	movs	r2, #0
 800caa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800caac:	f7ff ffe6 	bl	800ca7c <xflow>
 800cab0:	ec41 0b10 	vmov	d0, r0, r1
 800cab4:	bd08      	pop	{r3, pc}

0800cab6 <__math_oflow>:
 800cab6:	b508      	push	{r3, lr}
 800cab8:	2200      	movs	r2, #0
 800caba:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cabe:	f7ff ffdd 	bl	800ca7c <xflow>
 800cac2:	ec41 0b10 	vmov	d0, r0, r1
 800cac6:	bd08      	pop	{r3, pc}

0800cac8 <atan>:
 800cac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	ec55 4b10 	vmov	r4, r5, d0
 800cad0:	4bc3      	ldr	r3, [pc, #780]	; (800cde0 <atan+0x318>)
 800cad2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cad6:	429e      	cmp	r6, r3
 800cad8:	46ab      	mov	fp, r5
 800cada:	dd18      	ble.n	800cb0e <atan+0x46>
 800cadc:	4bc1      	ldr	r3, [pc, #772]	; (800cde4 <atan+0x31c>)
 800cade:	429e      	cmp	r6, r3
 800cae0:	dc01      	bgt.n	800cae6 <atan+0x1e>
 800cae2:	d109      	bne.n	800caf8 <atan+0x30>
 800cae4:	b144      	cbz	r4, 800caf8 <atan+0x30>
 800cae6:	4622      	mov	r2, r4
 800cae8:	462b      	mov	r3, r5
 800caea:	4620      	mov	r0, r4
 800caec:	4629      	mov	r1, r5
 800caee:	f7f3 fb79 	bl	80001e4 <__adddf3>
 800caf2:	4604      	mov	r4, r0
 800caf4:	460d      	mov	r5, r1
 800caf6:	e006      	b.n	800cb06 <atan+0x3e>
 800caf8:	f1bb 0f00 	cmp.w	fp, #0
 800cafc:	f300 8131 	bgt.w	800cd62 <atan+0x29a>
 800cb00:	a59b      	add	r5, pc, #620	; (adr r5, 800cd70 <atan+0x2a8>)
 800cb02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb06:	ec45 4b10 	vmov	d0, r4, r5
 800cb0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0e:	4bb6      	ldr	r3, [pc, #728]	; (800cde8 <atan+0x320>)
 800cb10:	429e      	cmp	r6, r3
 800cb12:	dc14      	bgt.n	800cb3e <atan+0x76>
 800cb14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cb18:	429e      	cmp	r6, r3
 800cb1a:	dc0d      	bgt.n	800cb38 <atan+0x70>
 800cb1c:	a396      	add	r3, pc, #600	; (adr r3, 800cd78 <atan+0x2b0>)
 800cb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb22:	ee10 0a10 	vmov	r0, s0
 800cb26:	4629      	mov	r1, r5
 800cb28:	f7f3 fb5c 	bl	80001e4 <__adddf3>
 800cb2c:	4baf      	ldr	r3, [pc, #700]	; (800cdec <atan+0x324>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f7f3 ff9e 	bl	8000a70 <__aeabi_dcmpgt>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d1e6      	bne.n	800cb06 <atan+0x3e>
 800cb38:	f04f 3aff 	mov.w	sl, #4294967295
 800cb3c:	e02b      	b.n	800cb96 <atan+0xce>
 800cb3e:	f000 f963 	bl	800ce08 <fabs>
 800cb42:	4bab      	ldr	r3, [pc, #684]	; (800cdf0 <atan+0x328>)
 800cb44:	429e      	cmp	r6, r3
 800cb46:	ec55 4b10 	vmov	r4, r5, d0
 800cb4a:	f300 80bf 	bgt.w	800cccc <atan+0x204>
 800cb4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cb52:	429e      	cmp	r6, r3
 800cb54:	f300 80a0 	bgt.w	800cc98 <atan+0x1d0>
 800cb58:	ee10 2a10 	vmov	r2, s0
 800cb5c:	ee10 0a10 	vmov	r0, s0
 800cb60:	462b      	mov	r3, r5
 800cb62:	4629      	mov	r1, r5
 800cb64:	f7f3 fb3e 	bl	80001e4 <__adddf3>
 800cb68:	4ba0      	ldr	r3, [pc, #640]	; (800cdec <atan+0x324>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f7f3 fb38 	bl	80001e0 <__aeabi_dsub>
 800cb70:	2200      	movs	r2, #0
 800cb72:	4606      	mov	r6, r0
 800cb74:	460f      	mov	r7, r1
 800cb76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	f7f3 fb31 	bl	80001e4 <__adddf3>
 800cb82:	4602      	mov	r2, r0
 800cb84:	460b      	mov	r3, r1
 800cb86:	4630      	mov	r0, r6
 800cb88:	4639      	mov	r1, r7
 800cb8a:	f7f3 fe0b 	bl	80007a4 <__aeabi_ddiv>
 800cb8e:	f04f 0a00 	mov.w	sl, #0
 800cb92:	4604      	mov	r4, r0
 800cb94:	460d      	mov	r5, r1
 800cb96:	4622      	mov	r2, r4
 800cb98:	462b      	mov	r3, r5
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	f7f3 fcd7 	bl	8000550 <__aeabi_dmul>
 800cba2:	4602      	mov	r2, r0
 800cba4:	460b      	mov	r3, r1
 800cba6:	4680      	mov	r8, r0
 800cba8:	4689      	mov	r9, r1
 800cbaa:	f7f3 fcd1 	bl	8000550 <__aeabi_dmul>
 800cbae:	a374      	add	r3, pc, #464	; (adr r3, 800cd80 <atan+0x2b8>)
 800cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	460f      	mov	r7, r1
 800cbb8:	f7f3 fcca 	bl	8000550 <__aeabi_dmul>
 800cbbc:	a372      	add	r3, pc, #456	; (adr r3, 800cd88 <atan+0x2c0>)
 800cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc2:	f7f3 fb0f 	bl	80001e4 <__adddf3>
 800cbc6:	4632      	mov	r2, r6
 800cbc8:	463b      	mov	r3, r7
 800cbca:	f7f3 fcc1 	bl	8000550 <__aeabi_dmul>
 800cbce:	a370      	add	r3, pc, #448	; (adr r3, 800cd90 <atan+0x2c8>)
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	f7f3 fb06 	bl	80001e4 <__adddf3>
 800cbd8:	4632      	mov	r2, r6
 800cbda:	463b      	mov	r3, r7
 800cbdc:	f7f3 fcb8 	bl	8000550 <__aeabi_dmul>
 800cbe0:	a36d      	add	r3, pc, #436	; (adr r3, 800cd98 <atan+0x2d0>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	f7f3 fafd 	bl	80001e4 <__adddf3>
 800cbea:	4632      	mov	r2, r6
 800cbec:	463b      	mov	r3, r7
 800cbee:	f7f3 fcaf 	bl	8000550 <__aeabi_dmul>
 800cbf2:	a36b      	add	r3, pc, #428	; (adr r3, 800cda0 <atan+0x2d8>)
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f7f3 faf4 	bl	80001e4 <__adddf3>
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	463b      	mov	r3, r7
 800cc00:	f7f3 fca6 	bl	8000550 <__aeabi_dmul>
 800cc04:	a368      	add	r3, pc, #416	; (adr r3, 800cda8 <atan+0x2e0>)
 800cc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0a:	f7f3 faeb 	bl	80001e4 <__adddf3>
 800cc0e:	4642      	mov	r2, r8
 800cc10:	464b      	mov	r3, r9
 800cc12:	f7f3 fc9d 	bl	8000550 <__aeabi_dmul>
 800cc16:	a366      	add	r3, pc, #408	; (adr r3, 800cdb0 <atan+0x2e8>)
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	4680      	mov	r8, r0
 800cc1e:	4689      	mov	r9, r1
 800cc20:	4630      	mov	r0, r6
 800cc22:	4639      	mov	r1, r7
 800cc24:	f7f3 fc94 	bl	8000550 <__aeabi_dmul>
 800cc28:	a363      	add	r3, pc, #396	; (adr r3, 800cdb8 <atan+0x2f0>)
 800cc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2e:	f7f3 fad7 	bl	80001e0 <__aeabi_dsub>
 800cc32:	4632      	mov	r2, r6
 800cc34:	463b      	mov	r3, r7
 800cc36:	f7f3 fc8b 	bl	8000550 <__aeabi_dmul>
 800cc3a:	a361      	add	r3, pc, #388	; (adr r3, 800cdc0 <atan+0x2f8>)
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	f7f3 face 	bl	80001e0 <__aeabi_dsub>
 800cc44:	4632      	mov	r2, r6
 800cc46:	463b      	mov	r3, r7
 800cc48:	f7f3 fc82 	bl	8000550 <__aeabi_dmul>
 800cc4c:	a35e      	add	r3, pc, #376	; (adr r3, 800cdc8 <atan+0x300>)
 800cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc52:	f7f3 fac5 	bl	80001e0 <__aeabi_dsub>
 800cc56:	4632      	mov	r2, r6
 800cc58:	463b      	mov	r3, r7
 800cc5a:	f7f3 fc79 	bl	8000550 <__aeabi_dmul>
 800cc5e:	a35c      	add	r3, pc, #368	; (adr r3, 800cdd0 <atan+0x308>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	f7f3 fabc 	bl	80001e0 <__aeabi_dsub>
 800cc68:	4632      	mov	r2, r6
 800cc6a:	463b      	mov	r3, r7
 800cc6c:	f7f3 fc70 	bl	8000550 <__aeabi_dmul>
 800cc70:	4602      	mov	r2, r0
 800cc72:	460b      	mov	r3, r1
 800cc74:	4640      	mov	r0, r8
 800cc76:	4649      	mov	r1, r9
 800cc78:	f7f3 fab4 	bl	80001e4 <__adddf3>
 800cc7c:	4622      	mov	r2, r4
 800cc7e:	462b      	mov	r3, r5
 800cc80:	f7f3 fc66 	bl	8000550 <__aeabi_dmul>
 800cc84:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cc88:	4602      	mov	r2, r0
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	d14b      	bne.n	800cd26 <atan+0x25e>
 800cc8e:	4620      	mov	r0, r4
 800cc90:	4629      	mov	r1, r5
 800cc92:	f7f3 faa5 	bl	80001e0 <__aeabi_dsub>
 800cc96:	e72c      	b.n	800caf2 <atan+0x2a>
 800cc98:	ee10 0a10 	vmov	r0, s0
 800cc9c:	4b53      	ldr	r3, [pc, #332]	; (800cdec <atan+0x324>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	4629      	mov	r1, r5
 800cca2:	f7f3 fa9d 	bl	80001e0 <__aeabi_dsub>
 800cca6:	4b51      	ldr	r3, [pc, #324]	; (800cdec <atan+0x324>)
 800cca8:	4606      	mov	r6, r0
 800ccaa:	460f      	mov	r7, r1
 800ccac:	2200      	movs	r2, #0
 800ccae:	4620      	mov	r0, r4
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	f7f3 fa97 	bl	80001e4 <__adddf3>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	460b      	mov	r3, r1
 800ccba:	4630      	mov	r0, r6
 800ccbc:	4639      	mov	r1, r7
 800ccbe:	f7f3 fd71 	bl	80007a4 <__aeabi_ddiv>
 800ccc2:	f04f 0a01 	mov.w	sl, #1
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	460d      	mov	r5, r1
 800ccca:	e764      	b.n	800cb96 <atan+0xce>
 800cccc:	4b49      	ldr	r3, [pc, #292]	; (800cdf4 <atan+0x32c>)
 800ccce:	429e      	cmp	r6, r3
 800ccd0:	da1d      	bge.n	800cd0e <atan+0x246>
 800ccd2:	ee10 0a10 	vmov	r0, s0
 800ccd6:	4b48      	ldr	r3, [pc, #288]	; (800cdf8 <atan+0x330>)
 800ccd8:	2200      	movs	r2, #0
 800ccda:	4629      	mov	r1, r5
 800ccdc:	f7f3 fa80 	bl	80001e0 <__aeabi_dsub>
 800cce0:	4b45      	ldr	r3, [pc, #276]	; (800cdf8 <atan+0x330>)
 800cce2:	4606      	mov	r6, r0
 800cce4:	460f      	mov	r7, r1
 800cce6:	2200      	movs	r2, #0
 800cce8:	4620      	mov	r0, r4
 800ccea:	4629      	mov	r1, r5
 800ccec:	f7f3 fc30 	bl	8000550 <__aeabi_dmul>
 800ccf0:	4b3e      	ldr	r3, [pc, #248]	; (800cdec <atan+0x324>)
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f7f3 fa76 	bl	80001e4 <__adddf3>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	4639      	mov	r1, r7
 800cd00:	f7f3 fd50 	bl	80007a4 <__aeabi_ddiv>
 800cd04:	f04f 0a02 	mov.w	sl, #2
 800cd08:	4604      	mov	r4, r0
 800cd0a:	460d      	mov	r5, r1
 800cd0c:	e743      	b.n	800cb96 <atan+0xce>
 800cd0e:	462b      	mov	r3, r5
 800cd10:	ee10 2a10 	vmov	r2, s0
 800cd14:	4939      	ldr	r1, [pc, #228]	; (800cdfc <atan+0x334>)
 800cd16:	2000      	movs	r0, #0
 800cd18:	f7f3 fd44 	bl	80007a4 <__aeabi_ddiv>
 800cd1c:	f04f 0a03 	mov.w	sl, #3
 800cd20:	4604      	mov	r4, r0
 800cd22:	460d      	mov	r5, r1
 800cd24:	e737      	b.n	800cb96 <atan+0xce>
 800cd26:	4b36      	ldr	r3, [pc, #216]	; (800ce00 <atan+0x338>)
 800cd28:	4e36      	ldr	r6, [pc, #216]	; (800ce04 <atan+0x33c>)
 800cd2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cd2e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cd32:	e9da 2300 	ldrd	r2, r3, [sl]
 800cd36:	f7f3 fa53 	bl	80001e0 <__aeabi_dsub>
 800cd3a:	4622      	mov	r2, r4
 800cd3c:	462b      	mov	r3, r5
 800cd3e:	f7f3 fa4f 	bl	80001e0 <__aeabi_dsub>
 800cd42:	4602      	mov	r2, r0
 800cd44:	460b      	mov	r3, r1
 800cd46:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cd4a:	f7f3 fa49 	bl	80001e0 <__aeabi_dsub>
 800cd4e:	f1bb 0f00 	cmp.w	fp, #0
 800cd52:	4604      	mov	r4, r0
 800cd54:	460d      	mov	r5, r1
 800cd56:	f6bf aed6 	bge.w	800cb06 <atan+0x3e>
 800cd5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd5e:	461d      	mov	r5, r3
 800cd60:	e6d1      	b.n	800cb06 <atan+0x3e>
 800cd62:	a51d      	add	r5, pc, #116	; (adr r5, 800cdd8 <atan+0x310>)
 800cd64:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd68:	e6cd      	b.n	800cb06 <atan+0x3e>
 800cd6a:	bf00      	nop
 800cd6c:	f3af 8000 	nop.w
 800cd70:	54442d18 	.word	0x54442d18
 800cd74:	bff921fb 	.word	0xbff921fb
 800cd78:	8800759c 	.word	0x8800759c
 800cd7c:	7e37e43c 	.word	0x7e37e43c
 800cd80:	e322da11 	.word	0xe322da11
 800cd84:	3f90ad3a 	.word	0x3f90ad3a
 800cd88:	24760deb 	.word	0x24760deb
 800cd8c:	3fa97b4b 	.word	0x3fa97b4b
 800cd90:	a0d03d51 	.word	0xa0d03d51
 800cd94:	3fb10d66 	.word	0x3fb10d66
 800cd98:	c54c206e 	.word	0xc54c206e
 800cd9c:	3fb745cd 	.word	0x3fb745cd
 800cda0:	920083ff 	.word	0x920083ff
 800cda4:	3fc24924 	.word	0x3fc24924
 800cda8:	5555550d 	.word	0x5555550d
 800cdac:	3fd55555 	.word	0x3fd55555
 800cdb0:	2c6a6c2f 	.word	0x2c6a6c2f
 800cdb4:	bfa2b444 	.word	0xbfa2b444
 800cdb8:	52defd9a 	.word	0x52defd9a
 800cdbc:	3fadde2d 	.word	0x3fadde2d
 800cdc0:	af749a6d 	.word	0xaf749a6d
 800cdc4:	3fb3b0f2 	.word	0x3fb3b0f2
 800cdc8:	fe231671 	.word	0xfe231671
 800cdcc:	3fbc71c6 	.word	0x3fbc71c6
 800cdd0:	9998ebc4 	.word	0x9998ebc4
 800cdd4:	3fc99999 	.word	0x3fc99999
 800cdd8:	54442d18 	.word	0x54442d18
 800cddc:	3ff921fb 	.word	0x3ff921fb
 800cde0:	440fffff 	.word	0x440fffff
 800cde4:	7ff00000 	.word	0x7ff00000
 800cde8:	3fdbffff 	.word	0x3fdbffff
 800cdec:	3ff00000 	.word	0x3ff00000
 800cdf0:	3ff2ffff 	.word	0x3ff2ffff
 800cdf4:	40038000 	.word	0x40038000
 800cdf8:	3ff80000 	.word	0x3ff80000
 800cdfc:	bff00000 	.word	0xbff00000
 800ce00:	0800d800 	.word	0x0800d800
 800ce04:	0800d7e0 	.word	0x0800d7e0

0800ce08 <fabs>:
 800ce08:	ec51 0b10 	vmov	r0, r1, d0
 800ce0c:	ee10 2a10 	vmov	r2, s0
 800ce10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce14:	ec43 2b10 	vmov	d0, r2, r3
 800ce18:	4770      	bx	lr

0800ce1a <finite>:
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	ed8d 0b00 	vstr	d0, [sp]
 800ce20:	9801      	ldr	r0, [sp, #4]
 800ce22:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ce26:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ce2a:	0fc0      	lsrs	r0, r0, #31
 800ce2c:	b002      	add	sp, #8
 800ce2e:	4770      	bx	lr

0800ce30 <scalbn>:
 800ce30:	b570      	push	{r4, r5, r6, lr}
 800ce32:	ec55 4b10 	vmov	r4, r5, d0
 800ce36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	462b      	mov	r3, r5
 800ce3e:	b99a      	cbnz	r2, 800ce68 <scalbn+0x38>
 800ce40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ce44:	4323      	orrs	r3, r4
 800ce46:	d036      	beq.n	800ceb6 <scalbn+0x86>
 800ce48:	4b39      	ldr	r3, [pc, #228]	; (800cf30 <scalbn+0x100>)
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	ee10 0a10 	vmov	r0, s0
 800ce50:	2200      	movs	r2, #0
 800ce52:	f7f3 fb7d 	bl	8000550 <__aeabi_dmul>
 800ce56:	4b37      	ldr	r3, [pc, #220]	; (800cf34 <scalbn+0x104>)
 800ce58:	429e      	cmp	r6, r3
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	460d      	mov	r5, r1
 800ce5e:	da10      	bge.n	800ce82 <scalbn+0x52>
 800ce60:	a32b      	add	r3, pc, #172	; (adr r3, 800cf10 <scalbn+0xe0>)
 800ce62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce66:	e03a      	b.n	800cede <scalbn+0xae>
 800ce68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ce6c:	428a      	cmp	r2, r1
 800ce6e:	d10c      	bne.n	800ce8a <scalbn+0x5a>
 800ce70:	ee10 2a10 	vmov	r2, s0
 800ce74:	4620      	mov	r0, r4
 800ce76:	4629      	mov	r1, r5
 800ce78:	f7f3 f9b4 	bl	80001e4 <__adddf3>
 800ce7c:	4604      	mov	r4, r0
 800ce7e:	460d      	mov	r5, r1
 800ce80:	e019      	b.n	800ceb6 <scalbn+0x86>
 800ce82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce86:	460b      	mov	r3, r1
 800ce88:	3a36      	subs	r2, #54	; 0x36
 800ce8a:	4432      	add	r2, r6
 800ce8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce90:	428a      	cmp	r2, r1
 800ce92:	dd08      	ble.n	800cea6 <scalbn+0x76>
 800ce94:	2d00      	cmp	r5, #0
 800ce96:	a120      	add	r1, pc, #128	; (adr r1, 800cf18 <scalbn+0xe8>)
 800ce98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce9c:	da1c      	bge.n	800ced8 <scalbn+0xa8>
 800ce9e:	a120      	add	r1, pc, #128	; (adr r1, 800cf20 <scalbn+0xf0>)
 800cea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cea4:	e018      	b.n	800ced8 <scalbn+0xa8>
 800cea6:	2a00      	cmp	r2, #0
 800cea8:	dd08      	ble.n	800cebc <scalbn+0x8c>
 800ceaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ceae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ceb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ceb6:	ec45 4b10 	vmov	d0, r4, r5
 800ceba:	bd70      	pop	{r4, r5, r6, pc}
 800cebc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cec0:	da19      	bge.n	800cef6 <scalbn+0xc6>
 800cec2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cec6:	429e      	cmp	r6, r3
 800cec8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cecc:	dd0a      	ble.n	800cee4 <scalbn+0xb4>
 800cece:	a112      	add	r1, pc, #72	; (adr r1, 800cf18 <scalbn+0xe8>)
 800ced0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1e2      	bne.n	800ce9e <scalbn+0x6e>
 800ced8:	a30f      	add	r3, pc, #60	; (adr r3, 800cf18 <scalbn+0xe8>)
 800ceda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cede:	f7f3 fb37 	bl	8000550 <__aeabi_dmul>
 800cee2:	e7cb      	b.n	800ce7c <scalbn+0x4c>
 800cee4:	a10a      	add	r1, pc, #40	; (adr r1, 800cf10 <scalbn+0xe0>)
 800cee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d0b8      	beq.n	800ce60 <scalbn+0x30>
 800ceee:	a10e      	add	r1, pc, #56	; (adr r1, 800cf28 <scalbn+0xf8>)
 800cef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cef4:	e7b4      	b.n	800ce60 <scalbn+0x30>
 800cef6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cefa:	3236      	adds	r2, #54	; 0x36
 800cefc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cf04:	4620      	mov	r0, r4
 800cf06:	4b0c      	ldr	r3, [pc, #48]	; (800cf38 <scalbn+0x108>)
 800cf08:	2200      	movs	r2, #0
 800cf0a:	e7e8      	b.n	800cede <scalbn+0xae>
 800cf0c:	f3af 8000 	nop.w
 800cf10:	c2f8f359 	.word	0xc2f8f359
 800cf14:	01a56e1f 	.word	0x01a56e1f
 800cf18:	8800759c 	.word	0x8800759c
 800cf1c:	7e37e43c 	.word	0x7e37e43c
 800cf20:	8800759c 	.word	0x8800759c
 800cf24:	fe37e43c 	.word	0xfe37e43c
 800cf28:	c2f8f359 	.word	0xc2f8f359
 800cf2c:	81a56e1f 	.word	0x81a56e1f
 800cf30:	43500000 	.word	0x43500000
 800cf34:	ffff3cb0 	.word	0xffff3cb0
 800cf38:	3c900000 	.word	0x3c900000

0800cf3c <_init>:
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3e:	bf00      	nop
 800cf40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf42:	bc08      	pop	{r3}
 800cf44:	469e      	mov	lr, r3
 800cf46:	4770      	bx	lr

0800cf48 <_fini>:
 800cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4a:	bf00      	nop
 800cf4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf4e:	bc08      	pop	{r3}
 800cf50:	469e      	mov	lr, r3
 800cf52:	4770      	bx	lr
