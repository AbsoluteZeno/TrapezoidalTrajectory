
TrapezoidalTraj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c79c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  0800c938  0800c938  0001c938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d200  0800d200  000202f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d200  0800d200  0001d200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d208  0800d208  000202f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d208  0800d208  0001d208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d20c  0800d20c  0001d20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  0800d210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d08  200002f8  0800d504  000202f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001000  0800d504  00021000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a73d  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346d  00000000  00000000  0003aa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0003ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0003f1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b074  00000000  00000000  000403c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c41c  00000000  00000000  0005b434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b81  00000000  00000000  00077850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001183d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000549c  00000000  00000000  00118424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002f8 	.word	0x200002f8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c91c 	.word	0x0800c91c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002fc 	.word	0x200002fc
 80001d4:	0800c91c 	.word	0x0800c91c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b992 	b.w	80010a8 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f824 	bl	8000dd8 <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fbd3 	bl	8000550 <__aeabi_dmul>
 8000daa:	f000 f97f 	bl	80010ac <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fb54 	bl	800045c <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fbca 	bl	8000550 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa0c 	bl	80001e0 <__aeabi_dsub>
 8000dc8:	f000 f970 	bl	80010ac <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__aeabi_d2uiz>:
 80010ac:	004a      	lsls	r2, r1, #1
 80010ae:	d211      	bcs.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010b4:	d211      	bcs.n	80010da <__aeabi_d2uiz+0x2e>
 80010b6:	d50d      	bpl.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010c0:	d40e      	bmi.n	80010e0 <__aeabi_d2uiz+0x34>
 80010c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010ce:	fa23 f002 	lsr.w	r0, r3, r2
 80010d2:	4770      	bx	lr
 80010d4:	f04f 0000 	mov.w	r0, #0
 80010d8:	4770      	bx	lr
 80010da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80010de:	d102      	bne.n	80010e6 <__aeabi_d2uiz+0x3a>
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0000 	mov.w	r0, #0
 80010ea:	4770      	bx	lr

080010ec <BaseSystem_SetHome>:
int Pickopposite_last[2] = {0, 0};
int Placereference_last[2] = {0, 0};
int Placeopposite_last[2] = {0, 0};

void BaseSystem_SetHome()
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	static enum {idle, sethome} state = idle;

	if (SetHomeFlag)
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <BaseSystem_SetHome+0x6c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d026      	beq.n	8001146 <BaseSystem_SetHome+0x5a>
	{
		switch(state)
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <BaseSystem_SetHome+0x70>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <BaseSystem_SetHome+0x1a>
 8001100:	2b01      	cmp	r3, #1
 8001102:	d00a      	beq.n	800111a <BaseSystem_SetHome+0x2e>
				SetHomeFlag = 0;
			}
		break;
		}
	}
}
 8001104:	e022      	b.n	800114c <BaseSystem_SetHome+0x60>
			registerFrame[1].U16 = 0b00000000; //bit 2 set home = 0 //base system status
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <BaseSystem_SetHome+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b00000100; //bit 2 set home = 1 //y-axis moving status
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <BaseSystem_SetHome+0x74>)
 800110e:	2204      	movs	r2, #4
 8001110:	841a      	strh	r2, [r3, #32]
			state = sethome;
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <BaseSystem_SetHome+0x70>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
		break;
 8001118:	e018      	b.n	800114c <BaseSystem_SetHome+0x60>
			registerFrame[65].U16 = 0b00000001;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <BaseSystem_SetHome+0x74>)
 800111c:	2201      	movs	r2, #1
 800111e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			SetHomeYFlag = 1;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <BaseSystem_SetHome+0x78>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
			registerFrame[16].U16 = 0b00000000;//bit 2 set home = 0 //y-axis moving status
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <BaseSystem_SetHome+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	841a      	strh	r2, [r3, #32]
			if(registerFrame[64].U16 == 0b00000000)
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <BaseSystem_SetHome+0x74>)
 8001130:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001134:	2b00      	cmp	r3, #0
 8001136:	d108      	bne.n	800114a <BaseSystem_SetHome+0x5e>
				state = idle;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <BaseSystem_SetHome+0x70>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
				SetHomeFlag = 0;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <BaseSystem_SetHome+0x6c>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
		break;
 8001144:	e001      	b.n	800114a <BaseSystem_SetHome+0x5e>
	}
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <BaseSystem_SetHome+0x60>
		break;
 800114a:	bf00      	nop
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000ff6 	.word	0x20000ff6
 800115c:	20000338 	.word	0x20000338
 8001160:	20000f68 	.word	0x20000f68
 8001164:	20000259 	.word	0x20000259

08001168 <BaseSystem_RunPointMode>:

void BaseSystem_RunPointMode()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	static enum {idle, RunPointMode} state = idle;

	if (RunPointFlag)
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <BaseSystem_RunPointMode+0xbc>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d052      	beq.n	800121a <BaseSystem_RunPointMode+0xb2>
	{
		switch(state)
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <BaseSystem_RunPointMode+0xc0>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <BaseSystem_RunPointMode+0x1a>
 800117c:	2b01      	cmp	r3, #1
 800117e:	d00d      	beq.n	800119c <BaseSystem_RunPointMode+0x34>
				RunPointFlag = 0;
			}
		break;
		}
	}
}
 8001180:	e04e      	b.n	8001220 <BaseSystem_RunPointMode+0xb8>
			registerFrame[1].U16 = 0b00000000; //bit 4 run point mode = 0 //base system status
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <BaseSystem_RunPointMode+0xc4>)
 8001184:	2200      	movs	r2, #0
 8001186:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b00100000; //bit 5 go point = 1 //y-axis moving status
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <BaseSystem_RunPointMode+0xc4>)
 800118a:	2220      	movs	r2, #32
 800118c:	841a      	strh	r2, [r3, #32]
			state = RunPointMode;
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <BaseSystem_RunPointMode+0xc0>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
			runpointXFlag = 1;
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <BaseSystem_RunPointMode+0xc8>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
		break;
 800119a:	e041      	b.n	8001220 <BaseSystem_RunPointMode+0xb8>
			if (runpointXFlag)
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <BaseSystem_RunPointMode+0xc8>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d025      	beq.n	80011f0 <BaseSystem_RunPointMode+0x88>
				registerFrame[65].U16 = registerFrame[48].U16; //position -1400 to 1400
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <BaseSystem_RunPointMode+0xc4>)
 80011a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <BaseSystem_RunPointMode+0xc4>)
 80011ac:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				registerFrame[66].U16 = 2500; //velocity max 3000
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <BaseSystem_RunPointMode+0xc4>)
 80011b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80011b6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				registerFrame[67].U16 = 1; //acceleration 1 2 3
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <BaseSystem_RunPointMode+0xc4>)
 80011bc:	2201      	movs	r2, #1
 80011be:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
				Pf = registerFrame[49].U16/10.0;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <BaseSystem_RunPointMode+0xc4>)
 80011c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f957 	bl	800047c <__aeabi_i2d>
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <BaseSystem_RunPointMode+0xcc>)
 80011d4:	f7ff fae6 	bl	80007a4 <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fc66 	bl	8000ab0 <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <BaseSystem_RunPointMode+0xd0>)
 80011e8:	6013      	str	r3, [r2, #0]
				runpointXFlag = 0;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <BaseSystem_RunPointMode+0xc8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
			ControllerState();
 80011f0:	f002 fd72 	bl	8003cd8 <ControllerState>
			if(ControllerFinishedFollowFlag && (registerFrame[64].U16 == 0))
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <BaseSystem_RunPointMode+0xd4>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d010      	beq.n	800121e <BaseSystem_RunPointMode+0xb6>
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <BaseSystem_RunPointMode+0xc4>)
 80011fe:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10b      	bne.n	800121e <BaseSystem_RunPointMode+0xb6>
				state = idle;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <BaseSystem_RunPointMode+0xc0>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
				registerFrame[16].U16 = 0b00000000; //bit 5 go point = 0 //y-axis moving status
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <BaseSystem_RunPointMode+0xc4>)
 800120e:	2200      	movs	r2, #0
 8001210:	841a      	strh	r2, [r3, #32]
				RunPointFlag = 0;
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <BaseSystem_RunPointMode+0xbc>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
		break;
 8001218:	e001      	b.n	800121e <BaseSystem_RunPointMode+0xb6>
	}
 800121a:	bf00      	nop
 800121c:	e000      	b.n	8001220 <BaseSystem_RunPointMode+0xb8>
		break;
 800121e:	bf00      	nop
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000ff8 	.word	0x20000ff8
 8001228:	20000339 	.word	0x20000339
 800122c:	20000f68 	.word	0x20000f68
 8001230:	20000314 	.word	0x20000314
 8001234:	40240000 	.word	0x40240000
 8001238:	200008f0 	.word	0x200008f0
 800123c:	20000928 	.word	0x20000928

08001240 <BaseSystem_SetPickTray>:

void BaseSystem_SetPickTray()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af02      	add	r7, sp, #8
	static enum {Prepare, GetFirstPoint, GetSecondPoint} SetPickTrayState = Prepare;

	if (SetPickTrayFlag)
 8001246:	4b87      	ldr	r3, [pc, #540]	; (8001464 <BaseSystem_SetPickTray+0x224>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 8106 	beq.w	800145c <BaseSystem_SetPickTray+0x21c>
	{
		switch(SetPickTrayState)
 8001250:	4b85      	ldr	r3, [pc, #532]	; (8001468 <BaseSystem_SetPickTray+0x228>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d054      	beq.n	8001302 <BaseSystem_SetPickTray+0xc2>
 8001258:	2b02      	cmp	r3, #2
 800125a:	f300 80c0 	bgt.w	80013de <BaseSystem_SetPickTray+0x19e>
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <BaseSystem_SetPickTray+0x28>
 8001262:	2b01      	cmp	r3, #1
 8001264:	d027      	beq.n	80012b6 <BaseSystem_SetPickTray+0x76>
 8001266:	e0ba      	b.n	80013de <BaseSystem_SetPickTray+0x19e>
		{
		case Prepare:
			registerFrame[1].U16 = 0b00000;
 8001268:	4b80      	ldr	r3, [pc, #512]	; (800146c <BaseSystem_SetPickTray+0x22c>)
 800126a:	2200      	movs	r2, #0
 800126c:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b000001;
 800126e:	4b7f      	ldr	r3, [pc, #508]	; (800146c <BaseSystem_SetPickTray+0x22c>)
 8001270:	2201      	movs	r2, #1
 8001272:	841a      	strh	r2, [r3, #32]
			SetPickTrayState = GetFirstPoint;
 8001274:	4b7c      	ldr	r3, [pc, #496]	; (8001468 <BaseSystem_SetPickTray+0x228>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001280:	487b      	ldr	r0, [pc, #492]	; (8001470 <BaseSystem_SetPickTray+0x230>)
 8001282:	f004 fe3d 	bl	8005f00 <HAL_GPIO_WritePin>
			eff_write(testMode_cmd);
 8001286:	487b      	ldr	r0, [pc, #492]	; (8001474 <BaseSystem_SetPickTray+0x234>)
 8001288:	f000 fd80 	bl	8001d8c <eff_write>
			memset(Pickreference, 0, sizeof(Pickreference));
 800128c:	2208      	movs	r2, #8
 800128e:	2100      	movs	r1, #0
 8001290:	4879      	ldr	r0, [pc, #484]	; (8001478 <BaseSystem_SetPickTray+0x238>)
 8001292:	f00a f987 	bl	800b5a4 <memset>
			memset(Pickopposite, 0, sizeof(Pickopposite));
 8001296:	2208      	movs	r2, #8
 8001298:	2100      	movs	r1, #0
 800129a:	4878      	ldr	r0, [pc, #480]	; (800147c <BaseSystem_SetPickTray+0x23c>)
 800129c:	f00a f982 	bl	800b5a4 <memset>
			memset(Pickreference_last, 0, sizeof(Pickreference_last));
 80012a0:	2208      	movs	r2, #8
 80012a2:	2100      	movs	r1, #0
 80012a4:	4876      	ldr	r0, [pc, #472]	; (8001480 <BaseSystem_SetPickTray+0x240>)
 80012a6:	f00a f97d 	bl	800b5a4 <memset>
			memset(Pickopposite_last, 0, sizeof(Pickopposite_last));
 80012aa:	2208      	movs	r2, #8
 80012ac:	2100      	movs	r1, #0
 80012ae:	4875      	ldr	r0, [pc, #468]	; (8001484 <BaseSystem_SetPickTray+0x244>)
 80012b0:	f00a f978 	bl	800b5a4 <memset>
		break;
 80012b4:	e093      	b.n	80013de <BaseSystem_SetPickTray+0x19e>
		case GetFirstPoint:
			GetJoystickXYaxisValue(&Pickreference[0], &Pickreference[1]);
 80012b6:	4974      	ldr	r1, [pc, #464]	; (8001488 <BaseSystem_SetPickTray+0x248>)
 80012b8:	486f      	ldr	r0, [pc, #444]	; (8001478 <BaseSystem_SetPickTray+0x238>)
 80012ba:	f001 fec5 	bl	8003048 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 80012be:	f001 ffe7 	bl	8003290 <JoyStickControlCartesian>

			if ((Pickreference_last[0] != Pickreference[0]) || (Pickreference_last[1] != Pickreference[1]))
 80012c2:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <BaseSystem_SetPickTray+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ce:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <BaseSystem_SetPickTray+0x238>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	d10d      	bne.n	80012fa <BaseSystem_SetPickTray+0xba>
 80012de:	4b68      	ldr	r3, [pc, #416]	; (8001480 <BaseSystem_SetPickTray+0x240>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ea:	4b63      	ldr	r3, [pc, #396]	; (8001478 <BaseSystem_SetPickTray+0x238>)
 80012ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80012f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	d06e      	beq.n	80013d8 <BaseSystem_SetPickTray+0x198>
			{
				SetPickTrayState = GetSecondPoint;
 80012fa:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <BaseSystem_SetPickTray+0x228>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001300:	e06a      	b.n	80013d8 <BaseSystem_SetPickTray+0x198>
		case GetSecondPoint:

			GetJoystickXYaxisValue(&Pickopposite[0], &Pickopposite[1]);
 8001302:	4962      	ldr	r1, [pc, #392]	; (800148c <BaseSystem_SetPickTray+0x24c>)
 8001304:	485d      	ldr	r0, [pc, #372]	; (800147c <BaseSystem_SetPickTray+0x23c>)
 8001306:	f001 fe9f 	bl	8003048 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 800130a:	f001 ffc1 	bl	8003290 <JoyStickControlCartesian>

			if ((Pickopposite_last[0] != Pickopposite[0]) || (Pickopposite_last[1] != Pickopposite[1]))
 800130e:	4b5d      	ldr	r3, [pc, #372]	; (8001484 <BaseSystem_SetPickTray+0x244>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	4b58      	ldr	r3, [pc, #352]	; (800147c <BaseSystem_SetPickTray+0x23c>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	eeb4 7a67 	vcmp.f32	s14, s15
 8001324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001328:	d10d      	bne.n	8001346 <BaseSystem_SetPickTray+0x106>
 800132a:	4b56      	ldr	r3, [pc, #344]	; (8001484 <BaseSystem_SetPickTray+0x244>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001336:	4b51      	ldr	r3, [pc, #324]	; (800147c <BaseSystem_SetPickTray+0x23c>)
 8001338:	edd3 7a01 	vldr	s15, [r3, #4]
 800133c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	d04a      	beq.n	80013dc <BaseSystem_SetPickTray+0x19c>
			{

				SetPickTrayState = Prepare;
 8001346:	4b48      	ldr	r3, [pc, #288]	; (8001468 <BaseSystem_SetPickTray+0x228>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
				SetTwoPointsForCalibrate(Pickreference, Pickreference+1, Pickopposite, Pickopposite+1, 0);
 800134c:	494e      	ldr	r1, [pc, #312]	; (8001488 <BaseSystem_SetPickTray+0x248>)
 800134e:	4a4f      	ldr	r2, [pc, #316]	; (800148c <BaseSystem_SetPickTray+0x24c>)
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	4613      	mov	r3, r2
 8001356:	4a49      	ldr	r2, [pc, #292]	; (800147c <BaseSystem_SetPickTray+0x23c>)
 8001358:	4847      	ldr	r0, [pc, #284]	; (8001478 <BaseSystem_SetPickTray+0x238>)
 800135a:	f001 fd09 	bl	8002d70 <SetTwoPointsForCalibrate>
				registerFrame[32].U16 = (int)(Pickreference[0]*10);
 800135e:	4b46      	ldr	r3, [pc, #280]	; (8001478 <BaseSystem_SetPickTray+0x238>)
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001370:	ee17 3a90 	vmov	r3, s15
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <BaseSystem_SetPickTray+0x22c>)
 8001378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				registerFrame[33].U16 = (int)(Pickreference[1]*10);
 800137c:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <BaseSystem_SetPickTray+0x238>)
 800137e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001382:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138e:	ee17 3a90 	vmov	r3, s15
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b35      	ldr	r3, [pc, #212]	; (800146c <BaseSystem_SetPickTray+0x22c>)
 8001396:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
				registerFrame[34].U16 = (int)(PickrotationAngleDegree*100);
 800139a:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <BaseSystem_SetPickTray+0x250>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001494 <BaseSystem_SetPickTray+0x254>
 80013a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ac:	ee17 3a90 	vmov	r3, s15
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <BaseSystem_SetPickTray+0x22c>)
 80013b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				registerFrame[16].U16 = 0b000000;
 80013b8:	4b2c      	ldr	r3, [pc, #176]	; (800146c <BaseSystem_SetPickTray+0x22c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	841a      	strh	r2, [r3, #32]
				SetPickTrayFlag = 0;
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <BaseSystem_SetPickTray+0x224>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ca:	4829      	ldr	r0, [pc, #164]	; (8001470 <BaseSystem_SetPickTray+0x230>)
 80013cc:	f004 fd98 	bl	8005f00 <HAL_GPIO_WritePin>
				eff_write(exitTest_cmd);
 80013d0:	4831      	ldr	r0, [pc, #196]	; (8001498 <BaseSystem_SetPickTray+0x258>)
 80013d2:	f000 fcdb 	bl	8001d8c <eff_write>

			}
		break;
 80013d6:	e001      	b.n	80013dc <BaseSystem_SetPickTray+0x19c>
		break;
 80013d8:	bf00      	nop
 80013da:	e000      	b.n	80013de <BaseSystem_SetPickTray+0x19e>
		break;
 80013dc:	bf00      	nop
		}
		Pickreference_last[0] = Pickreference[0];
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <BaseSystem_SetPickTray+0x238>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e8:	ee17 2a90 	vmov	r2, s15
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <BaseSystem_SetPickTray+0x240>)
 80013ee:	601a      	str	r2, [r3, #0]
		Pickreference_last[1] = Pickreference[1];
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <BaseSystem_SetPickTray+0x238>)
 80013f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fa:	ee17 2a90 	vmov	r2, s15
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <BaseSystem_SetPickTray+0x240>)
 8001400:	605a      	str	r2, [r3, #4]
		Pickopposite_last[0] = Pickopposite[0];
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <BaseSystem_SetPickTray+0x23c>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140c:	ee17 2a90 	vmov	r2, s15
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <BaseSystem_SetPickTray+0x244>)
 8001412:	601a      	str	r2, [r3, #0]
		Pickopposite_last[1] = Pickopposite[1];
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <BaseSystem_SetPickTray+0x23c>)
 8001416:	edd3 7a01 	vldr	s15, [r3, #4]
 800141a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141e:	ee17 2a90 	vmov	r2, s15
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <BaseSystem_SetPickTray+0x244>)
 8001424:	605a      	str	r2, [r3, #4]

		if (SetHomeYFlag == 1)
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <BaseSystem_SetPickTray+0x25c>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d116      	bne.n	800145c <BaseSystem_SetPickTray+0x21c>
		{
			memset(Pickreference, 0, sizeof(Pickreference));
 800142e:	2208      	movs	r2, #8
 8001430:	2100      	movs	r1, #0
 8001432:	4811      	ldr	r0, [pc, #68]	; (8001478 <BaseSystem_SetPickTray+0x238>)
 8001434:	f00a f8b6 	bl	800b5a4 <memset>
			memset(Pickopposite, 0, sizeof(Pickopposite));
 8001438:	2208      	movs	r2, #8
 800143a:	2100      	movs	r1, #0
 800143c:	480f      	ldr	r0, [pc, #60]	; (800147c <BaseSystem_SetPickTray+0x23c>)
 800143e:	f00a f8b1 	bl	800b5a4 <memset>
			memset(Pickreference_last, 0, sizeof(Pickreference_last));
 8001442:	2208      	movs	r2, #8
 8001444:	2100      	movs	r1, #0
 8001446:	480e      	ldr	r0, [pc, #56]	; (8001480 <BaseSystem_SetPickTray+0x240>)
 8001448:	f00a f8ac 	bl	800b5a4 <memset>
			memset(Pickopposite_last, 0, sizeof(Pickopposite_last));
 800144c:	2208      	movs	r2, #8
 800144e:	2100      	movs	r1, #0
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <BaseSystem_SetPickTray+0x244>)
 8001452:	f00a f8a7 	bl	800b5a4 <memset>
			SetPickTrayState = GetFirstPoint;
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <BaseSystem_SetPickTray+0x228>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000ff4 	.word	0x20000ff4
 8001468:	2000033a 	.word	0x2000033a
 800146c:	20000f68 	.word	0x20000f68
 8001470:	40020400 	.word	0x40020400
 8001474:	20000268 	.word	0x20000268
 8001478:	200009cc 	.word	0x200009cc
 800147c:	200009d4 	.word	0x200009d4
 8001480:	20000318 	.word	0x20000318
 8001484:	20000320 	.word	0x20000320
 8001488:	200009d0 	.word	0x200009d0
 800148c:	200009d8 	.word	0x200009d8
 8001490:	200009e0 	.word	0x200009e0
 8001494:	42c80000 	.word	0x42c80000
 8001498:	2000026c 	.word	0x2000026c
 800149c:	20000259 	.word	0x20000259

080014a0 <BaseSystem_SetPlaceTray>:

void BaseSystem_SetPlaceTray()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af02      	add	r7, sp, #8
	static enum {Prepare, GetFirstPoint, GetSecondPoint} SetPlaceTrayState = Prepare;

	if(SetPlaceTrayFlag)
 80014a6:	4b87      	ldr	r3, [pc, #540]	; (80016c4 <BaseSystem_SetPlaceTray+0x224>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8106 	beq.w	80016bc <BaseSystem_SetPlaceTray+0x21c>
	{
		switch(SetPlaceTrayState)
 80014b0:	4b85      	ldr	r3, [pc, #532]	; (80016c8 <BaseSystem_SetPlaceTray+0x228>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d054      	beq.n	8001562 <BaseSystem_SetPlaceTray+0xc2>
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	f300 80c0 	bgt.w	800163e <BaseSystem_SetPlaceTray+0x19e>
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <BaseSystem_SetPlaceTray+0x28>
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d027      	beq.n	8001516 <BaseSystem_SetPlaceTray+0x76>
 80014c6:	e0ba      	b.n	800163e <BaseSystem_SetPlaceTray+0x19e>
		{
		case Prepare:
			registerFrame[1].U16 = 0b00000;
 80014c8:	4b80      	ldr	r3, [pc, #512]	; (80016cc <BaseSystem_SetPlaceTray+0x22c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	805a      	strh	r2, [r3, #2]
			registerFrame[16].U16 = 0b000010;
 80014ce:	4b7f      	ldr	r3, [pc, #508]	; (80016cc <BaseSystem_SetPlaceTray+0x22c>)
 80014d0:	2202      	movs	r2, #2
 80014d2:	841a      	strh	r2, [r3, #32]
			SetPlaceTrayState = GetFirstPoint;
 80014d4:	4b7c      	ldr	r3, [pc, #496]	; (80016c8 <BaseSystem_SetPlaceTray+0x228>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e0:	487b      	ldr	r0, [pc, #492]	; (80016d0 <BaseSystem_SetPlaceTray+0x230>)
 80014e2:	f004 fd0d 	bl	8005f00 <HAL_GPIO_WritePin>
			eff_write(testMode_cmd);
 80014e6:	487b      	ldr	r0, [pc, #492]	; (80016d4 <BaseSystem_SetPlaceTray+0x234>)
 80014e8:	f000 fc50 	bl	8001d8c <eff_write>
			memset(Placereference, 0, sizeof(Placereference));
 80014ec:	2208      	movs	r2, #8
 80014ee:	2100      	movs	r1, #0
 80014f0:	4879      	ldr	r0, [pc, #484]	; (80016d8 <BaseSystem_SetPlaceTray+0x238>)
 80014f2:	f00a f857 	bl	800b5a4 <memset>
			memset(Placeopposite, 0, sizeof(Placeopposite));
 80014f6:	2208      	movs	r2, #8
 80014f8:	2100      	movs	r1, #0
 80014fa:	4878      	ldr	r0, [pc, #480]	; (80016dc <BaseSystem_SetPlaceTray+0x23c>)
 80014fc:	f00a f852 	bl	800b5a4 <memset>
			memset(Placereference_last, 0, sizeof(Placereference_last));
 8001500:	2208      	movs	r2, #8
 8001502:	2100      	movs	r1, #0
 8001504:	4876      	ldr	r0, [pc, #472]	; (80016e0 <BaseSystem_SetPlaceTray+0x240>)
 8001506:	f00a f84d 	bl	800b5a4 <memset>
			memset(Placeopposite_last, 0, sizeof(Placeopposite_last));
 800150a:	2208      	movs	r2, #8
 800150c:	2100      	movs	r1, #0
 800150e:	4875      	ldr	r0, [pc, #468]	; (80016e4 <BaseSystem_SetPlaceTray+0x244>)
 8001510:	f00a f848 	bl	800b5a4 <memset>
		break;
 8001514:	e093      	b.n	800163e <BaseSystem_SetPlaceTray+0x19e>
		case GetFirstPoint:
			GetJoystickXYaxisValue(&Placereference[0], &Placereference[1]);
 8001516:	4974      	ldr	r1, [pc, #464]	; (80016e8 <BaseSystem_SetPlaceTray+0x248>)
 8001518:	486f      	ldr	r0, [pc, #444]	; (80016d8 <BaseSystem_SetPlaceTray+0x238>)
 800151a:	f001 fd95 	bl	8003048 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 800151e:	f001 feb7 	bl	8003290 <JoyStickControlCartesian>

			if ((Placereference_last[0] != Placereference[0]) || (Placereference_last[1] != Placereference[1]))
 8001522:	4b6f      	ldr	r3, [pc, #444]	; (80016e0 <BaseSystem_SetPlaceTray+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152e:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <BaseSystem_SetPlaceTray+0x238>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eeb4 7a67 	vcmp.f32	s14, s15
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	d10d      	bne.n	800155a <BaseSystem_SetPlaceTray+0xba>
 800153e:	4b68      	ldr	r3, [pc, #416]	; (80016e0 <BaseSystem_SetPlaceTray+0x240>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154a:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <BaseSystem_SetPlaceTray+0x238>)
 800154c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001550:	eeb4 7a67 	vcmp.f32	s14, s15
 8001554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001558:	d06e      	beq.n	8001638 <BaseSystem_SetPlaceTray+0x198>
			{
				SetPlaceTrayState = GetSecondPoint;
 800155a:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <BaseSystem_SetPlaceTray+0x228>)
 800155c:	2202      	movs	r2, #2
 800155e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001560:	e06a      	b.n	8001638 <BaseSystem_SetPlaceTray+0x198>
		case GetSecondPoint:

			GetJoystickXYaxisValue(&Placeopposite[0], &Placeopposite[1]);
 8001562:	4962      	ldr	r1, [pc, #392]	; (80016ec <BaseSystem_SetPlaceTray+0x24c>)
 8001564:	485d      	ldr	r0, [pc, #372]	; (80016dc <BaseSystem_SetPlaceTray+0x23c>)
 8001566:	f001 fd6f 	bl	8003048 <GetJoystickXYaxisValue>
			JoyStickControlCartesian();
 800156a:	f001 fe91 	bl	8003290 <JoyStickControlCartesian>

			if ((Placeopposite_last[0] != Placeopposite[0]) || (Placeopposite_last[1] != Placeopposite[1]))
 800156e:	4b5d      	ldr	r3, [pc, #372]	; (80016e4 <BaseSystem_SetPlaceTray+0x244>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157a:	4b58      	ldr	r3, [pc, #352]	; (80016dc <BaseSystem_SetPlaceTray+0x23c>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	eeb4 7a67 	vcmp.f32	s14, s15
 8001584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001588:	d10d      	bne.n	80015a6 <BaseSystem_SetPlaceTray+0x106>
 800158a:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <BaseSystem_SetPlaceTray+0x244>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001596:	4b51      	ldr	r3, [pc, #324]	; (80016dc <BaseSystem_SetPlaceTray+0x23c>)
 8001598:	edd3 7a01 	vldr	s15, [r3, #4]
 800159c:	eeb4 7a67 	vcmp.f32	s14, s15
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	d04a      	beq.n	800163c <BaseSystem_SetPlaceTray+0x19c>
			{

				SetPlaceTrayState = Prepare;
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <BaseSystem_SetPlaceTray+0x228>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
				SetTwoPointsForCalibrate(Placereference, Placereference+1, Placeopposite, Placeopposite+1, 1);
 80015ac:	494e      	ldr	r1, [pc, #312]	; (80016e8 <BaseSystem_SetPlaceTray+0x248>)
 80015ae:	4a4f      	ldr	r2, [pc, #316]	; (80016ec <BaseSystem_SetPlaceTray+0x24c>)
 80015b0:	2301      	movs	r3, #1
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4613      	mov	r3, r2
 80015b6:	4a49      	ldr	r2, [pc, #292]	; (80016dc <BaseSystem_SetPlaceTray+0x23c>)
 80015b8:	4847      	ldr	r0, [pc, #284]	; (80016d8 <BaseSystem_SetPlaceTray+0x238>)
 80015ba:	f001 fbd9 	bl	8002d70 <SetTwoPointsForCalibrate>
				registerFrame[35].U16 = (int)(Placereference[0]*10);
 80015be:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <BaseSystem_SetPlaceTray+0x238>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d0:	ee17 3a90 	vmov	r3, s15
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <BaseSystem_SetPlaceTray+0x22c>)
 80015d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				registerFrame[36].U16 = (int)(Placereference[1]*10);
 80015dc:	4b3e      	ldr	r3, [pc, #248]	; (80016d8 <BaseSystem_SetPlaceTray+0x238>)
 80015de:	edd3 7a01 	vldr	s15, [r3, #4]
 80015e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ee:	ee17 3a90 	vmov	r3, s15
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b35      	ldr	r3, [pc, #212]	; (80016cc <BaseSystem_SetPlaceTray+0x22c>)
 80015f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				registerFrame[37].U16 = (int)(PlacerotationAngleDegree*100);
 80015fa:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <BaseSystem_SetPlaceTray+0x250>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80016f4 <BaseSystem_SetPlaceTray+0x254>
 8001604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160c:	ee17 3a90 	vmov	r3, s15
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <BaseSystem_SetPlaceTray+0x22c>)
 8001614:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				registerFrame[16].U16 = 0b000000;
 8001618:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <BaseSystem_SetPlaceTray+0x22c>)
 800161a:	2200      	movs	r2, #0
 800161c:	841a      	strh	r2, [r3, #32]
				SetPlaceTrayFlag = 0;
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <BaseSystem_SetPlaceTray+0x224>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162a:	4829      	ldr	r0, [pc, #164]	; (80016d0 <BaseSystem_SetPlaceTray+0x230>)
 800162c:	f004 fc68 	bl	8005f00 <HAL_GPIO_WritePin>
				eff_write(exitTest_cmd);
 8001630:	4831      	ldr	r0, [pc, #196]	; (80016f8 <BaseSystem_SetPlaceTray+0x258>)
 8001632:	f000 fbab 	bl	8001d8c <eff_write>
			}
		break;
 8001636:	e001      	b.n	800163c <BaseSystem_SetPlaceTray+0x19c>
		break;
 8001638:	bf00      	nop
 800163a:	e000      	b.n	800163e <BaseSystem_SetPlaceTray+0x19e>
		break;
 800163c:	bf00      	nop
		}
		Placereference_last[0] = Placereference[0];
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <BaseSystem_SetPlaceTray+0x238>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001648:	ee17 2a90 	vmov	r2, s15
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <BaseSystem_SetPlaceTray+0x240>)
 800164e:	601a      	str	r2, [r3, #0]
		Placereference_last[1] = Placereference[1];
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <BaseSystem_SetPlaceTray+0x238>)
 8001652:	edd3 7a01 	vldr	s15, [r3, #4]
 8001656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165a:	ee17 2a90 	vmov	r2, s15
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <BaseSystem_SetPlaceTray+0x240>)
 8001660:	605a      	str	r2, [r3, #4]
		Placeopposite_last[0] = Placeopposite[0];
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <BaseSystem_SetPlaceTray+0x23c>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800166c:	ee17 2a90 	vmov	r2, s15
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <BaseSystem_SetPlaceTray+0x244>)
 8001672:	601a      	str	r2, [r3, #0]
		Placeopposite_last[1] = Placeopposite[1];
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <BaseSystem_SetPlaceTray+0x23c>)
 8001676:	edd3 7a01 	vldr	s15, [r3, #4]
 800167a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800167e:	ee17 2a90 	vmov	r2, s15
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <BaseSystem_SetPlaceTray+0x244>)
 8001684:	605a      	str	r2, [r3, #4]

		if (SetHomeYFlag == 1)
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <BaseSystem_SetPlaceTray+0x25c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d116      	bne.n	80016bc <BaseSystem_SetPlaceTray+0x21c>
		{
			memset(Placereference, 0, sizeof(Placereference));
 800168e:	2208      	movs	r2, #8
 8001690:	2100      	movs	r1, #0
 8001692:	4811      	ldr	r0, [pc, #68]	; (80016d8 <BaseSystem_SetPlaceTray+0x238>)
 8001694:	f009 ff86 	bl	800b5a4 <memset>
			memset(Placeopposite, 0, sizeof(Placeopposite));
 8001698:	2208      	movs	r2, #8
 800169a:	2100      	movs	r1, #0
 800169c:	480f      	ldr	r0, [pc, #60]	; (80016dc <BaseSystem_SetPlaceTray+0x23c>)
 800169e:	f009 ff81 	bl	800b5a4 <memset>
			memset(Placereference_last, 0, sizeof(Placereference_last));
 80016a2:	2208      	movs	r2, #8
 80016a4:	2100      	movs	r1, #0
 80016a6:	480e      	ldr	r0, [pc, #56]	; (80016e0 <BaseSystem_SetPlaceTray+0x240>)
 80016a8:	f009 ff7c 	bl	800b5a4 <memset>
			memset(Placeopposite_last, 0, sizeof(Placeopposite_last));
 80016ac:	2208      	movs	r2, #8
 80016ae:	2100      	movs	r1, #0
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <BaseSystem_SetPlaceTray+0x244>)
 80016b2:	f009 ff77 	bl	800b5a4 <memset>
			SetPlaceTrayState = GetFirstPoint;
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <BaseSystem_SetPlaceTray+0x228>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000ff5 	.word	0x20000ff5
 80016c8:	2000033b 	.word	0x2000033b
 80016cc:	20000f68 	.word	0x20000f68
 80016d0:	40020400 	.word	0x40020400
 80016d4:	20000268 	.word	0x20000268
 80016d8:	20000a2c 	.word	0x20000a2c
 80016dc:	20000a34 	.word	0x20000a34
 80016e0:	20000328 	.word	0x20000328
 80016e4:	20000330 	.word	0x20000330
 80016e8:	20000a30 	.word	0x20000a30
 80016ec:	20000a38 	.word	0x20000a38
 80016f0:	20000a40 	.word	0x20000a40
 80016f4:	42c80000 	.word	0x42c80000
 80016f8:	2000026c 	.word	0x2000026c
 80016fc:	20000259 	.word	0x20000259

08001700 <BaseSystem_RuntrayMode>:

void BaseSystem_RuntrayMode()
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

	static uint8_t i = 0;
	static uint16_t PickDelay = 0;
	static uint16_t PlaceDelay = 0;

	if (RunTrayFlag)
 8001704:	4b7d      	ldr	r3, [pc, #500]	; (80018fc <BaseSystem_RuntrayMode+0x1fc>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 80ea 	beq.w	80018e2 <BaseSystem_RuntrayMode+0x1e2>
	{
		switch(RunTrayState)
 800170e:	4b7c      	ldr	r3, [pc, #496]	; (8001900 <BaseSystem_RuntrayMode+0x200>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b04      	cmp	r3, #4
 8001714:	f200 80f0 	bhi.w	80018f8 <BaseSystem_RuntrayMode+0x1f8>
 8001718:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <BaseSystem_RuntrayMode+0x20>)
 800171a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171e:	bf00      	nop
 8001720:	08001735 	.word	0x08001735
 8001724:	08001783 	.word	0x08001783
 8001728:	080017fd 	.word	0x080017fd
 800172c:	08001821 	.word	0x08001821
 8001730:	080018a5 	.word	0x080018a5
			{
			case HolesCalculate:
				registerFrame[1].U16 = 0b00000;
 8001734:	4b73      	ldr	r3, [pc, #460]	; (8001904 <BaseSystem_RuntrayMode+0x204>)
 8001736:	2200      	movs	r2, #0
 8001738:	805a      	strh	r2, [r3, #2]
				GoalReadyFlag = 0;
 800173a:	4b73      	ldr	r3, [pc, #460]	; (8001908 <BaseSystem_RuntrayMode+0x208>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
				HolePositionsCartesian(Pickreference, PickrotationAngleRadian, PickTray9holes);
 8001740:	4b72      	ldr	r3, [pc, #456]	; (800190c <BaseSystem_RuntrayMode+0x20c>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	4972      	ldr	r1, [pc, #456]	; (8001910 <BaseSystem_RuntrayMode+0x210>)
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	4871      	ldr	r0, [pc, #452]	; (8001914 <BaseSystem_RuntrayMode+0x214>)
 800174e:	f001 fbbf 	bl	8002ed0 <HolePositionsCartesian>
				HolePositionsCartesian(Placereference, PlacerotationAngleRadian, PlaceTray9holes);
 8001752:	4b71      	ldr	r3, [pc, #452]	; (8001918 <BaseSystem_RuntrayMode+0x218>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	4970      	ldr	r1, [pc, #448]	; (800191c <BaseSystem_RuntrayMode+0x21c>)
 800175a:	eeb0 0a67 	vmov.f32	s0, s15
 800175e:	4870      	ldr	r0, [pc, #448]	; (8001920 <BaseSystem_RuntrayMode+0x220>)
 8001760:	f001 fbb6 	bl	8002ed0 <HolePositionsCartesian>
				if (GoalReadyFlag)
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <BaseSystem_RuntrayMode+0x208>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80bc 	beq.w	80018e6 <BaseSystem_RuntrayMode+0x1e6>
				{
					RunTrayState = GoPick;
 800176e:	4b64      	ldr	r3, [pc, #400]	; (8001900 <BaseSystem_RuntrayMode+0x200>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
					eff_write(runMode_cmd);
 8001774:	486b      	ldr	r0, [pc, #428]	; (8001924 <BaseSystem_RuntrayMode+0x224>)
 8001776:	f000 fb09 	bl	8001d8c <eff_write>
					i = 0;
 800177a:	4b6b      	ldr	r3, [pc, #428]	; (8001928 <BaseSystem_RuntrayMode+0x228>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
				}
			break;
 8001780:	e0b1      	b.n	80018e6 <BaseSystem_RuntrayMode+0x1e6>
			case GoPick:
				// Run X-Axis to Pick Tray
				registerFrame[65].U16 = (int)(PickTray9holes[2*i]*10); //position -1400 to 1400
 8001782:	4b69      	ldr	r3, [pc, #420]	; (8001928 <BaseSystem_RuntrayMode+0x228>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4a61      	ldr	r2, [pc, #388]	; (8001910 <BaseSystem_RuntrayMode+0x210>)
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800179e:	ee17 3a90 	vmov	r3, s15
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b57      	ldr	r3, [pc, #348]	; (8001904 <BaseSystem_RuntrayMode+0x204>)
 80017a6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				registerFrame[66].U16 = 3000; //velocity max 3000
 80017aa:	4b56      	ldr	r3, [pc, #344]	; (8001904 <BaseSystem_RuntrayMode+0x204>)
 80017ac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80017b0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				registerFrame[67].U16 = 1; //acceleration 1 2 3
 80017b4:	4b53      	ldr	r3, [pc, #332]	; (8001904 <BaseSystem_RuntrayMode+0x204>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

				// Run Y-Axis to Pick Tray
				registerFrame[16].U16 = 0b001000;	// Y-Axis Moving status -> GoPick
 80017bc:	4b51      	ldr	r3, [pc, #324]	; (8001904 <BaseSystem_RuntrayMode+0x204>)
 80017be:	2208      	movs	r2, #8
 80017c0:	841a      	strh	r2, [r3, #32]
				Pf = PickTray9holes[2*i + 1];
 80017c2:	4b59      	ldr	r3, [pc, #356]	; (8001928 <BaseSystem_RuntrayMode+0x228>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a51      	ldr	r2, [pc, #324]	; (8001910 <BaseSystem_RuntrayMode+0x210>)
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a56      	ldr	r2, [pc, #344]	; (800192c <BaseSystem_RuntrayMode+0x22c>)
 80017d4:	6013      	str	r3, [r2, #0]
				ControllerState();
 80017d6:	f002 fa7f 	bl	8003cd8 <ControllerState>

				if(ControllerFinishedFollowFlag && (registerFrame[64].U16 == 0))
 80017da:	4b55      	ldr	r3, [pc, #340]	; (8001930 <BaseSystem_RuntrayMode+0x230>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8083 	beq.w	80018ea <BaseSystem_RuntrayMode+0x1ea>
 80017e4:	4b47      	ldr	r3, [pc, #284]	; (8001904 <BaseSystem_RuntrayMode+0x204>)
 80017e6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d17d      	bne.n	80018ea <BaseSystem_RuntrayMode+0x1ea>
				{
					RunTrayState = Pick;
 80017ee:	4b44      	ldr	r3, [pc, #272]	; (8001900 <BaseSystem_RuntrayMode+0x200>)
 80017f0:	2202      	movs	r2, #2
 80017f2:	701a      	strb	r2, [r3, #0]
					PickDelay = 0;
 80017f4:	4b4f      	ldr	r3, [pc, #316]	; (8001934 <BaseSystem_RuntrayMode+0x234>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	801a      	strh	r2, [r3, #0]
				}
			break;
 80017fa:	e076      	b.n	80018ea <BaseSystem_RuntrayMode+0x1ea>
			case Pick:
				eff_write(pickup_cmd);
 80017fc:	484e      	ldr	r0, [pc, #312]	; (8001938 <BaseSystem_RuntrayMode+0x238>)
 80017fe:	f000 fac5 	bl	8001d8c <eff_write>
				PickDelay++;
 8001802:	4b4c      	ldr	r3, [pc, #304]	; (8001934 <BaseSystem_RuntrayMode+0x234>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b4a      	ldr	r3, [pc, #296]	; (8001934 <BaseSystem_RuntrayMode+0x234>)
 800180c:	801a      	strh	r2, [r3, #0]

				if (PickDelay >= 2000)
 800180e:	4b49      	ldr	r3, [pc, #292]	; (8001934 <BaseSystem_RuntrayMode+0x234>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001816:	d36a      	bcc.n	80018ee <BaseSystem_RuntrayMode+0x1ee>
				{
					RunTrayState = GoPlace;
 8001818:	4b39      	ldr	r3, [pc, #228]	; (8001900 <BaseSystem_RuntrayMode+0x200>)
 800181a:	2203      	movs	r2, #3
 800181c:	701a      	strb	r2, [r3, #0]
				}
			break;
 800181e:	e066      	b.n	80018ee <BaseSystem_RuntrayMode+0x1ee>
			case GoPlace:
				// Run X-Axis to Pick Tray
				registerFrame[65].U16 = (int)(PlaceTray9holes[2*i]*10); //position -1400 to 1400
 8001820:	4b41      	ldr	r3, [pc, #260]	; (8001928 <BaseSystem_RuntrayMode+0x228>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4a3d      	ldr	r2, [pc, #244]	; (800191c <BaseSystem_RuntrayMode+0x21c>)
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800183c:	ee17 3a90 	vmov	r3, s15
 8001840:	b29a      	uxth	r2, r3
 8001842:	4b30      	ldr	r3, [pc, #192]	; (8001904 <BaseSystem_RuntrayMode+0x204>)
 8001844:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				registerFrame[66].U16 = 3000; //velocity max 3000
 8001848:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <BaseSystem_RuntrayMode+0x204>)
 800184a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800184e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				registerFrame[67].U16 = 1; //acceleration 1 2 3
 8001852:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <BaseSystem_RuntrayMode+0x204>)
 8001854:	2201      	movs	r2, #1
 8001856:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

				// Run Y-Axis to Pick Tray
				registerFrame[16].U16 = 0b010000;	// Y-Axis Moving status -> GoPlace
 800185a:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <BaseSystem_RuntrayMode+0x204>)
 800185c:	2210      	movs	r2, #16
 800185e:	841a      	strh	r2, [r3, #32]
				Pf = PlaceTray9holes[2*i + 1];
 8001860:	4b31      	ldr	r3, [pc, #196]	; (8001928 <BaseSystem_RuntrayMode+0x228>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	3301      	adds	r3, #1
 8001868:	4a2c      	ldr	r2, [pc, #176]	; (800191c <BaseSystem_RuntrayMode+0x21c>)
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a2e      	ldr	r2, [pc, #184]	; (800192c <BaseSystem_RuntrayMode+0x22c>)
 8001872:	6013      	str	r3, [r2, #0]
				ControllerState();
 8001874:	f002 fa30 	bl	8003cd8 <ControllerState>

				if(ControllerFinishedFollowFlag && (registerFrame[64].U16 == 0))
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <BaseSystem_RuntrayMode+0x230>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d038      	beq.n	80018f2 <BaseSystem_RuntrayMode+0x1f2>
 8001880:	4b20      	ldr	r3, [pc, #128]	; (8001904 <BaseSystem_RuntrayMode+0x204>)
 8001882:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001886:	2b00      	cmp	r3, #0
 8001888:	d133      	bne.n	80018f2 <BaseSystem_RuntrayMode+0x1f2>
				{
					RunTrayState = Place;
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <BaseSystem_RuntrayMode+0x200>)
 800188c:	2204      	movs	r2, #4
 800188e:	701a      	strb	r2, [r3, #0]
					PlaceDelay = 0;
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <BaseSystem_RuntrayMode+0x23c>)
 8001892:	2200      	movs	r2, #0
 8001894:	801a      	strh	r2, [r3, #0]
					i++;
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <BaseSystem_RuntrayMode+0x228>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <BaseSystem_RuntrayMode+0x228>)
 80018a0:	701a      	strb	r2, [r3, #0]
				}
			break;
 80018a2:	e026      	b.n	80018f2 <BaseSystem_RuntrayMode+0x1f2>
			case Place:
				eff_write(place_cmd);
 80018a4:	4826      	ldr	r0, [pc, #152]	; (8001940 <BaseSystem_RuntrayMode+0x240>)
 80018a6:	f000 fa71 	bl	8001d8c <eff_write>
				PlaceDelay++;
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <BaseSystem_RuntrayMode+0x23c>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <BaseSystem_RuntrayMode+0x23c>)
 80018b4:	801a      	strh	r2, [r3, #0]

				if (PlaceDelay >= 2000)
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <BaseSystem_RuntrayMode+0x23c>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018be:	d31a      	bcc.n	80018f6 <BaseSystem_RuntrayMode+0x1f6>
				{
					RunTrayState = GoPick;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <BaseSystem_RuntrayMode+0x200>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
					if(i >= 9)
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <BaseSystem_RuntrayMode+0x228>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d913      	bls.n	80018f6 <BaseSystem_RuntrayMode+0x1f6>
					{
						RunTrayState = HolesCalculate;
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <BaseSystem_RuntrayMode+0x200>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
						eff_write(exitRun_cmd);
 80018d4:	481b      	ldr	r0, [pc, #108]	; (8001944 <BaseSystem_RuntrayMode+0x244>)
 80018d6:	f000 fa59 	bl	8001d8c <eff_write>
						RunTrayFlag = 0;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <BaseSystem_RuntrayMode+0x1fc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
					}
				}
			break;
 80018e0:	e009      	b.n	80018f6 <BaseSystem_RuntrayMode+0x1f6>
			}
	}
 80018e2:	bf00      	nop
 80018e4:	e008      	b.n	80018f8 <BaseSystem_RuntrayMode+0x1f8>
			break;
 80018e6:	bf00      	nop
 80018e8:	e006      	b.n	80018f8 <BaseSystem_RuntrayMode+0x1f8>
			break;
 80018ea:	bf00      	nop
 80018ec:	e004      	b.n	80018f8 <BaseSystem_RuntrayMode+0x1f8>
			break;
 80018ee:	bf00      	nop
 80018f0:	e002      	b.n	80018f8 <BaseSystem_RuntrayMode+0x1f8>
			break;
 80018f2:	bf00      	nop
 80018f4:	e000      	b.n	80018f8 <BaseSystem_RuntrayMode+0x1f8>
			break;
 80018f6:	bf00      	nop
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000ff7 	.word	0x20000ff7
 8001900:	2000033c 	.word	0x2000033c
 8001904:	20000f68 	.word	0x20000f68
 8001908:	20000a8c 	.word	0x20000a8c
 800190c:	200009dc 	.word	0x200009dc
 8001910:	200009e4 	.word	0x200009e4
 8001914:	200009cc 	.word	0x200009cc
 8001918:	20000a3c 	.word	0x20000a3c
 800191c:	20000a44 	.word	0x20000a44
 8001920:	20000a2c 	.word	0x20000a2c
 8001924:	20000270 	.word	0x20000270
 8001928:	2000033d 	.word	0x2000033d
 800192c:	200008f0 	.word	0x200008f0
 8001930:	20000928 	.word	0x20000928
 8001934:	2000033e 	.word	0x2000033e
 8001938:	20000278 	.word	0x20000278
 800193c:	20000340 	.word	0x20000340
 8001940:	2000027c 	.word	0x2000027c
 8001944:	20000274 	.word	0x20000274

08001948 <PositionControlVelocityForm>:
float first_error = 0;
float second_error = 0;
float third_error = 0;

void PositionControlVelocityForm(PID* controller)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	first_error = q_des - QEIData.position;
 8001950:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <PositionControlVelocityForm+0xac>)
 8001952:	ed93 7a00 	vldr	s14, [r3]
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <PositionControlVelocityForm+0xb0>)
 8001958:	edd3 7a04 	vldr	s15, [r3, #16]
 800195c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <PositionControlVelocityForm+0xb4>)
 8001962:	edc3 7a00 	vstr	s15, [r3]

	float kp_position = controller->Kp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	617b      	str	r3, [r7, #20]
	float ki_position = controller->Ki;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	613b      	str	r3, [r7, #16]
	float kd_position = controller->Kd;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	60fb      	str	r3, [r7, #12]

	PulseWidthModulation += ((kp_position + ki_position + kd_position) * first_error) - ((kp_position + (2 * kd_position)) * second_error) + (kd_position * third_error);
 8001978:	ed97 7a05 	vldr	s14, [r7, #20]
 800197c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001980:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001984:	edd7 7a03 	vldr	s15, [r7, #12]
 8001988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <PositionControlVelocityForm+0xb4>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001996:	edd7 7a03 	vldr	s15, [r7, #12]
 800199a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800199e:	edd7 7a05 	vldr	s15, [r7, #20]
 80019a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <PositionControlVelocityForm+0xb8>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <PositionControlVelocityForm+0xbc>)
 80019b6:	edd3 6a00 	vldr	s13, [r3]
 80019ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80019be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <PositionControlVelocityForm+0xc0>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <PositionControlVelocityForm+0xc0>)
 80019d2:	edc3 7a00 	vstr	s15, [r3]

	third_error = second_error;
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <PositionControlVelocityForm+0xb8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <PositionControlVelocityForm+0xbc>)
 80019dc:	6013      	str	r3, [r2, #0]
	second_error = first_error;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <PositionControlVelocityForm+0xb4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <PositionControlVelocityForm+0xb8>)
 80019e4:	6013      	str	r3, [r2, #0]
}
 80019e6:	bf00      	nop
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200008d8 	.word	0x200008d8
 80019f8:	20000908 	.word	0x20000908
 80019fc:	20000344 	.word	0x20000344
 8001a00:	20000348 	.word	0x20000348
 8001a04:	2000034c 	.word	0x2000034c
 8001a08:	20000924 	.word	0x20000924
 8001a0c:	00000000 	.word	0x00000000

08001a10 <micros>:

uint16_t res = 8192;      	  // Resolution [pulse/revolution]
float pulley_dia = 30.558;	  // mm

uint64_t micros(TIM_HandleTypeDef* Timer_tim)
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(Timer_tim)*0.01 + _micros;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fd1c 	bl	800045c <__aeabi_ui2d>
 8001a24:	a313      	add	r3, pc, #76	; (adr r3, 8001a74 <micros+0x64>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	f7fe fd91 	bl	8000550 <__aeabi_dmul>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4614      	mov	r4, r2
 8001a34:	461d      	mov	r5, r3
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <micros+0x60>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7fe fd50 	bl	80004e4 <__aeabi_ul2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4620      	mov	r0, r4
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	f7fe fbca 	bl	80001e4 <__adddf3>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff f9a0 	bl	8000d9c <__aeabi_d2ulz>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
}
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bdb0      	pop	{r4, r5, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	f3af 8000 	nop.w
 8001a70:	20000900 	.word	0x20000900
 8001a74:	47ae147b 	.word	0x47ae147b
 8001a78:	3f847ae1 	.word	0x3f847ae1
 8001a7c:	00000000 	.word	0x00000000

08001a80 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* Timer_tim)
{
 8001a80:	b5b0      	push	{r4, r5, r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	QEIData.timestamp[0] = micros(Timer_tim);
 8001a8a:	6838      	ldr	r0, [r7, #0]
 8001a8c:	f7ff ffc0 	bl	8001a10 <micros>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4b7a      	ldr	r3, [pc, #488]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001a96:	609a      	str	r2, [r3, #8]
	uint32_t lastposition = __HAL_TIM_GET_COUNTER(Encoder_tim);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	613b      	str	r3, [r7, #16]
	QEIData.pos[0] = lastposition;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	4b76      	ldr	r3, [pc, #472]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001aa6:	801a      	strh	r2, [r3, #0]
	QEIData.pos[0] = -QEIData.pos[0];
 8001aa8:	4b75      	ldr	r3, [pc, #468]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	425b      	negs	r3, r3
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	4b72      	ldr	r3, [pc, #456]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001ab8:	801a      	strh	r2, [r3, #0]
//	{
//		QEIData.pos[0] = lastposition - QEI_PERIOD - 1;
//	}

	// position calculation
	QEIData.position = QEIData.pos[0] * PI *  pulley_dia/res;
 8001aba:	4b71      	ldr	r3, [pc, #452]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac8:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001c84 <QEIEncoderPositionVelocity_Update+0x204>
 8001acc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ad0:	4b6d      	ldr	r3, [pc, #436]	; (8001c88 <QEIEncoderPositionVelocity_Update+0x208>)
 8001ad2:	edd3 7a00 	vldr	s15, [r3]
 8001ad6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ada:	4b6c      	ldr	r3, [pc, #432]	; (8001c8c <QEIEncoderPositionVelocity_Update+0x20c>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aea:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001aec:	edc3 7a04 	vstr	s15, [r3, #16]

	int32_t diffPosition = QEIData.pos[0] - QEIData.pos[1];
 8001af0:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b61      	ldr	r3, [pc, #388]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001afa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
	float diffTime = QEIData.timestamp[0] - QEIData.timestamp[1];
 8001b02:	4b5f      	ldr	r3, [pc, #380]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	4b5e      	ldr	r3, [pc, #376]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b14:	edc7 7a03 	vstr	s15, [r7, #12]

	// unwrap
	if (diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b1e:	dd03      	ble.n	8001b28 <QEIEncoderPositionVelocity_Update+0xa8>
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001b26:	617b      	str	r3, [r7, #20]
	if (diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001b2e:	da03      	bge.n	8001b38 <QEIEncoderPositionVelocity_Update+0xb8>
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001b36:	617b      	str	r3, [r7, #20]

	// velocity calculation
	QEIData.velocity = (diffPosition * 1000000.0 * PI * pulley_dia)/(res * diffTime);
 8001b38:	6978      	ldr	r0, [r7, #20]
 8001b3a:	f7fe fc9f 	bl	800047c <__aeabi_i2d>
 8001b3e:	a34c      	add	r3, pc, #304	; (adr r3, 8001c70 <QEIEncoderPositionVelocity_Update+0x1f0>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fd04 	bl	8000550 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	a349      	add	r3, pc, #292	; (adr r3, 8001c78 <QEIEncoderPositionVelocity_Update+0x1f8>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	f7fe fcfb 	bl	8000550 <__aeabi_dmul>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4614      	mov	r4, r2
 8001b60:	461d      	mov	r5, r3
 8001b62:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <QEIEncoderPositionVelocity_Update+0x208>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fc9a 	bl	80004a0 <__aeabi_f2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4620      	mov	r0, r4
 8001b72:	4629      	mov	r1, r5
 8001b74:	f7fe fcec 	bl	8000550 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4614      	mov	r4, r2
 8001b7e:	461d      	mov	r5, r3
 8001b80:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <QEIEncoderPositionVelocity_Update+0x20c>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b94:	ee17 0a90 	vmov	r0, s15
 8001b98:	f7fe fc82 	bl	80004a0 <__aeabi_f2d>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7fe fdfe 	bl	80007a4 <__aeabi_ddiv>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7fe ff7e 	bl	8000ab0 <__aeabi_d2f>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001bb8:	6153      	str	r3, [r2, #20]
	QEIData.vel[0] = QEIData.velocity;
 8001bba:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001bbc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc4:	ee17 3a90 	vmov	r3, s15
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001bcc:	809a      	strh	r2, [r3, #4]
	QEIData.accelaration = (QEIData.vel[0] - QEIData.vel[1])/diffTime;
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001bd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001bd8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	ee07 3a90 	vmov	s15, r3
 8001be2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001be6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001bf0:	edc3 7a06 	vstr	s15, [r3, #24]

	QEIData.pos[1] = QEIData.pos[0];
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001bf6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001bfc:	805a      	strh	r2, [r3, #2]
	QEIData.vel[1] = QEIData.vel[0];
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c00:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c06:	80da      	strh	r2, [r3, #6]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c0e:	60d3      	str	r3, [r2, #12]

	registerFrame[17].U16 = (int)(QEIData.position*10);
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c12:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c22:	ee17 3a90 	vmov	r3, s15
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <QEIEncoderPositionVelocity_Update+0x210>)
 8001c2a:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = (int)(QEIData.velocity*10);
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c2e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c3e:	ee17 3a90 	vmov	r3, s15
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <QEIEncoderPositionVelocity_Update+0x210>)
 8001c46:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = (int)(QEIData.accelaration*10);
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <QEIEncoderPositionVelocity_Update+0x200>)
 8001c4a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c5a:	ee17 3a90 	vmov	r3, s15
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <QEIEncoderPositionVelocity_Update+0x210>)
 8001c62:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8001c64:	bf00      	nop
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6c:	f3af 8000 	nop.w
 8001c70:	00000000 	.word	0x00000000
 8001c74:	412e8480 	.word	0x412e8480
 8001c78:	60000000 	.word	0x60000000
 8001c7c:	400921fb 	.word	0x400921fb
 8001c80:	20000908 	.word	0x20000908
 8001c84:	40490fdb 	.word	0x40490fdb
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000f68 	.word	0x20000f68

08001c94 <HAL_GPIO_EXTI_Callback>:
		}
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0){
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca4:	d123      	bne.n	8001cee <HAL_GPIO_EXTI_Callback+0x5a>
 8001ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001caa:	481c      	ldr	r0, [pc, #112]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x88>)
 8001cac:	f004 f910 	bl	8005ed0 <HAL_GPIO_ReadPin>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d11b      	bne.n	8001cee <HAL_GPIO_EXTI_Callback+0x5a>
		emer_pushed = 0;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc2:	4816      	ldr	r0, [pc, #88]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x88>)
 8001cc4:	f004 f91c 	bl	8005f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cce:	4813      	ldr	r0, [pc, #76]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x88>)
 8001cd0:	f004 f916 	bl	8005f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cda:	4810      	ldr	r0, [pc, #64]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x88>)
 8001cdc:	f004 f910 	bl	8005f00 <HAL_GPIO_WritePin>
		eff_write(emerMode_cmd);
 8001ce0:	4810      	ldr	r0, [pc, #64]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x90>)
 8001ce2:	f000 f853 	bl	8001d8c <eff_write>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_GPIO_EXTI_Callback+0x94>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf4:	d10d      	bne.n	8001d12 <HAL_GPIO_EXTI_Callback+0x7e>
 8001cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfa:	4808      	ldr	r0, [pc, #32]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x88>)
 8001cfc:	f004 f8e8 	bl	8005ed0 <HAL_GPIO_ReadPin>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d105      	bne.n	8001d12 <HAL_GPIO_EXTI_Callback+0x7e>
		eff_write(exitEmer_cmd);
 8001d06:	4809      	ldr	r0, [pc, #36]	; (8001d2c <HAL_GPIO_EXTI_Callback+0x98>)
 8001d08:	f000 f840 	bl	8001d8c <eff_write>
		emer_pushed = 1;
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
	}
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	20000281 	.word	0x20000281
 8001d24:	20000260 	.word	0x20000260
 8001d28:	20000520 	.word	0x20000520
 8001d2c:	20000264 	.word	0x20000264

08001d30 <check_pe>:

void check_pe()
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	if(emer_pushed == 1)
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <check_pe+0x44>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d118      	bne.n	8001d6e <check_pe+0x3e>
	{
		pe1_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	480e      	ldr	r0, [pc, #56]	; (8001d78 <check_pe+0x48>)
 8001d40:	f004 f8c6 	bl	8005ed0 <HAL_GPIO_ReadPin>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <check_pe+0x4c>)
 8001d4a:	701a      	strb	r2, [r3, #0]
		pe2_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	480a      	ldr	r0, [pc, #40]	; (8001d78 <check_pe+0x48>)
 8001d50:	f004 f8be 	bl	8005ed0 <HAL_GPIO_ReadPin>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <check_pe+0x50>)
 8001d5a:	701a      	strb	r2, [r3, #0]
		pe3_st = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001d5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d60:	4808      	ldr	r0, [pc, #32]	; (8001d84 <check_pe+0x54>)
 8001d62:	f004 f8b5 	bl	8005ed0 <HAL_GPIO_ReadPin>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <check_pe+0x58>)
 8001d6c:	701a      	strb	r2, [r3, #0]
	}
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000281 	.word	0x20000281
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	2000093a 	.word	0x2000093a
 8001d80:	2000093b 	.word	0x2000093b
 8001d84:	40020000 	.word	0x40020000
 8001d88:	2000093c 	.word	0x2000093c

08001d8c <eff_write>:
		}

	}
}

void eff_write(uint8_t* cmd2){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x15 << 1, cmd2, 4);
 8001d94:	2304      	movs	r3, #4
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	212a      	movs	r1, #42	; 0x2a
 8001d9a:	4803      	ldr	r0, [pc, #12]	; (8001da8 <eff_write+0x1c>)
 8001d9c:	f004 fa26 	bl	80061ec <HAL_I2C_Master_Transmit_IT>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	2000046c 	.word	0x2000046c

08001dac <MotorDrive>:
float Pcenter = 0;
float Ncenter = 0;
float Temp_pos = 0;

void MotorDrive(TIM_HandleTypeDef* PWM_tim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	if(emer_pushed == 1){
 8001db4:	4b37      	ldr	r3, [pc, #220]	; (8001e94 <MotorDrive+0xe8>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d166      	bne.n	8001e8a <MotorDrive+0xde>
		if (PulseWidthModulation >= 0)
 8001dbc:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <MotorDrive+0xec>)
 8001dbe:	edd3 7a00 	vldr	s15, [r3]
 8001dc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	db25      	blt.n	8001e18 <MotorDrive+0x6c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd2:	4832      	ldr	r0, [pc, #200]	; (8001e9c <MotorDrive+0xf0>)
 8001dd4:	f004 f894 	bl	8005f00 <HAL_GPIO_WritePin>
			N_disallow = 0;
 8001dd8:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <MotorDrive+0xf4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation > 8000)
 8001dde:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <MotorDrive+0xec>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ea4 <MotorDrive+0xf8>
 8001de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df0:	dd03      	ble.n	8001dfa <MotorDrive+0x4e>
			{
				PulseWidthModulation = 8000;
 8001df2:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <MotorDrive+0xec>)
 8001df4:	4a2c      	ldr	r2, [pc, #176]	; (8001ea8 <MotorDrive+0xfc>)
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e037      	b.n	8001e6a <MotorDrive+0xbe>
			}
			else if (PulseWidthModulation < 1000)
 8001dfa:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <MotorDrive+0xec>)
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001eac <MotorDrive+0x100>
 8001e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	d52d      	bpl.n	8001e6a <MotorDrive+0xbe>
			{
				PulseWidthModulation = 0;
 8001e0e:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <MotorDrive+0xec>)
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e028      	b.n	8001e6a <MotorDrive+0xbe>
			}
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e1e:	481f      	ldr	r0, [pc, #124]	; (8001e9c <MotorDrive+0xf0>)
 8001e20:	f004 f86e 	bl	8005f00 <HAL_GPIO_WritePin>
			P_disallow = 0;
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <MotorDrive+0x104>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation < -8000)
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <MotorDrive+0xec>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001eb4 <MotorDrive+0x108>
 8001e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3c:	d502      	bpl.n	8001e44 <MotorDrive+0x98>
			{
				PulseWidthModulation = -8000;
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <MotorDrive+0xec>)
 8001e40:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <MotorDrive+0x10c>)
 8001e42:	601a      	str	r2, [r3, #0]
			}

			if ((pe3_st && (SetHomeYFlag == 0)) || N_disallow)
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <MotorDrive+0x110>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <MotorDrive+0xa8>
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <MotorDrive+0x114>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <MotorDrive+0xb0>
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <MotorDrive+0xf4>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <MotorDrive+0xbe>
			{
				__HAL_TIM_SET_COMPARE(PWM_tim,TIM_CHANNEL_1,0);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2200      	movs	r2, #0
 8001e62:	635a      	str	r2, [r3, #52]	; 0x34
				N_disallow = 1;
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MotorDrive+0xf4>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
			}
		}

		__HAL_TIM_SET_COMPARE(PWM_tim, TIM_CHANNEL_1, fabs(PulseWidthModulation*5));
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <MotorDrive+0xec>)
 8001e6c:	edd3 7a00 	vldr	s15, [r3]
 8001e70:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001e74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e78:	eef0 7ae7 	vabs.f32	s15, s15
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e84:	ee17 2a90 	vmov	r2, s15
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000281 	.word	0x20000281
 8001e98:	20000924 	.word	0x20000924
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	20000939 	.word	0x20000939
 8001ea4:	45fa0000 	.word	0x45fa0000
 8001ea8:	45fa0000 	.word	0x45fa0000
 8001eac:	447a0000 	.word	0x447a0000
 8001eb0:	20000938 	.word	0x20000938
 8001eb4:	c5fa0000 	.word	0xc5fa0000
 8001eb8:	c5fa0000 	.word	0xc5fa0000
 8001ebc:	2000093c 	.word	0x2000093c
 8001ec0:	20000259 	.word	0x20000259
 8001ec4:	00000000 	.word	0x00000000

08001ec8 <SetHome>:

void SetHome(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* PWM_tim)
{
 8001ec8:	b5b0      	push	{r4, r5, r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
	static enum {Jog, Overcenter, PCenter, UnderCenter, NCenter, Center,  Recenter, Setcenter} SetHomeState = Jog;

	if (SetHomeYFlag)
 8001ed2:	4b8d      	ldr	r3, [pc, #564]	; (8002108 <SetHome+0x240>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 810e 	beq.w	80020f8 <SetHome+0x230>
	{
		switch (SetHomeState)
 8001edc:	4b8b      	ldr	r3, [pc, #556]	; (800210c <SetHome+0x244>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b07      	cmp	r3, #7
 8001ee2:	f200 8106 	bhi.w	80020f2 <SetHome+0x22a>
 8001ee6:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <SetHome+0x24>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f0d 	.word	0x08001f0d
 8001ef0:	08001f69 	.word	0x08001f69
 8001ef4:	08001f8d 	.word	0x08001f8d
 8001ef8:	08001fc1 	.word	0x08001fc1
 8001efc:	08001fe7 	.word	0x08001fe7
 8001f00:	08002005 	.word	0x08002005
 8001f04:	080020c5 	.word	0x080020c5
 8001f08:	080020a3 	.word	0x080020a3
		{
		case Jog:
			Pcenter = 0;
 8001f0c:	4b80      	ldr	r3, [pc, #512]	; (8002110 <SetHome+0x248>)
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
			Ncenter = 0;
 8001f14:	4b7f      	ldr	r3, [pc, #508]	; (8002114 <SetHome+0x24c>)
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
			Temp_pos = 0;
 8001f1c:	4b7e      	ldr	r3, [pc, #504]	; (8002118 <SetHome+0x250>)
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
			PulseWidthModulation = 3000;
 8001f24:	4b7d      	ldr	r3, [pc, #500]	; (800211c <SetHome+0x254>)
 8001f26:	4a7e      	ldr	r2, [pc, #504]	; (8002120 <SetHome+0x258>)
 8001f28:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f30:	487c      	ldr	r0, [pc, #496]	; (8002124 <SetHome+0x25c>)
 8001f32:	f003 ffe5 	bl	8005f00 <HAL_GPIO_WritePin>

			if (pe1_st)
 8001f36:	4b7c      	ldr	r3, [pc, #496]	; (8002128 <SetHome+0x260>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <SetHome+0x86>
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Overcenter;
 8001f46:	4b71      	ldr	r3, [pc, #452]	; (800210c <SetHome+0x244>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
			else if (pe3_st)
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
				SetHomeState = Recenter;
			}
			break;
 8001f4c:	e0cc      	b.n	80020e8 <SetHome+0x220>
			else if (pe3_st)
 8001f4e:	4b77      	ldr	r3, [pc, #476]	; (800212c <SetHome+0x264>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80c8 	beq.w	80020e8 <SetHome+0x220>
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Recenter;
 8001f60:	4b6a      	ldr	r3, [pc, #424]	; (800210c <SetHome+0x244>)
 8001f62:	2206      	movs	r2, #6
 8001f64:	701a      	strb	r2, [r3, #0]
			break;
 8001f66:	e0bf      	b.n	80020e8 <SetHome+0x220>
		case Overcenter:
			PulseWidthModulation = 3000;
 8001f68:	4b6c      	ldr	r3, [pc, #432]	; (800211c <SetHome+0x254>)
 8001f6a:	4a6d      	ldr	r2, [pc, #436]	; (8002120 <SetHome+0x258>)
 8001f6c:	601a      	str	r2, [r3, #0]

			if (QEIData.position >= 30)
 8001f6e:	4b70      	ldr	r3, [pc, #448]	; (8002130 <SetHome+0x268>)
 8001f70:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f74:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	da00      	bge.n	8001f84 <SetHome+0xbc>
			{
				SetHomeState = PCenter;
			}
			break;
 8001f82:	e0b6      	b.n	80020f2 <SetHome+0x22a>
				SetHomeState = PCenter;
 8001f84:	4b61      	ldr	r3, [pc, #388]	; (800210c <SetHome+0x244>)
 8001f86:	2202      	movs	r2, #2
 8001f88:	701a      	strb	r2, [r3, #0]
			break;
 8001f8a:	e0b2      	b.n	80020f2 <SetHome+0x22a>
		case PCenter:
			PulseWidthModulation = -2500;
 8001f8c:	4b63      	ldr	r3, [pc, #396]	; (800211c <SetHome+0x254>)
 8001f8e:	4a69      	ldr	r2, [pc, #420]	; (8002134 <SetHome+0x26c>)
 8001f90:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 8001f92:	4b65      	ldr	r3, [pc, #404]	; (8002128 <SetHome+0x260>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80a8 	beq.w	80020ec <SetHome+0x224>
			{
				Pcenter = QEIData.position;
 8001f9c:	4b64      	ldr	r3, [pc, #400]	; (8002130 <SetHome+0x268>)
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	4a5b      	ldr	r2, [pc, #364]	; (8002110 <SetHome+0x248>)
 8001fa2:	6013      	str	r3, [r2, #0]
				Temp_pos = Pcenter - 30;
 8001fa4:	4b5a      	ldr	r3, [pc, #360]	; (8002110 <SetHome+0x248>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001fae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fb2:	4b59      	ldr	r3, [pc, #356]	; (8002118 <SetHome+0x250>)
 8001fb4:	edc3 7a00 	vstr	s15, [r3]
				SetHomeState = UnderCenter;
 8001fb8:	4b54      	ldr	r3, [pc, #336]	; (800210c <SetHome+0x244>)
 8001fba:	2203      	movs	r2, #3
 8001fbc:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001fbe:	e095      	b.n	80020ec <SetHome+0x224>
		case UnderCenter:
			PulseWidthModulation = -3000;
 8001fc0:	4b56      	ldr	r3, [pc, #344]	; (800211c <SetHome+0x254>)
 8001fc2:	4a5d      	ldr	r2, [pc, #372]	; (8002138 <SetHome+0x270>)
 8001fc4:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= Temp_pos)
 8001fc6:	4b5a      	ldr	r3, [pc, #360]	; (8002130 <SetHome+0x268>)
 8001fc8:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fcc:	4b52      	ldr	r3, [pc, #328]	; (8002118 <SetHome+0x250>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fda:	d900      	bls.n	8001fde <SetHome+0x116>
			{
				SetHomeState = NCenter;
			}
			break;
 8001fdc:	e089      	b.n	80020f2 <SetHome+0x22a>
				SetHomeState = NCenter;
 8001fde:	4b4b      	ldr	r3, [pc, #300]	; (800210c <SetHome+0x244>)
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	701a      	strb	r2, [r3, #0]
			break;
 8001fe4:	e085      	b.n	80020f2 <SetHome+0x22a>
		case NCenter:
			PulseWidthModulation = 2500;
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	; (800211c <SetHome+0x254>)
 8001fe8:	4a54      	ldr	r2, [pc, #336]	; (800213c <SetHome+0x274>)
 8001fea:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 8001fec:	4b4e      	ldr	r3, [pc, #312]	; (8002128 <SetHome+0x260>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d07d      	beq.n	80020f0 <SetHome+0x228>
			{
				Ncenter = QEIData.position;
 8001ff4:	4b4e      	ldr	r3, [pc, #312]	; (8002130 <SetHome+0x268>)
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	4a46      	ldr	r2, [pc, #280]	; (8002114 <SetHome+0x24c>)
 8001ffa:	6013      	str	r3, [r2, #0]
				SetHomeState = Center;
 8001ffc:	4b43      	ldr	r3, [pc, #268]	; (800210c <SetHome+0x244>)
 8001ffe:	2205      	movs	r2, #5
 8002000:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002002:	e075      	b.n	80020f0 <SetHome+0x228>
		case Center:
			q_des = ((Pcenter - Ncenter)/2.0) + Ncenter;
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <SetHome+0x248>)
 8002006:	ed93 7a00 	vldr	s14, [r3]
 800200a:	4b42      	ldr	r3, [pc, #264]	; (8002114 <SetHome+0x24c>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002014:	ee17 0a90 	vmov	r0, s15
 8002018:	f7fe fa42 	bl	80004a0 <__aeabi_f2d>
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002024:	f7fe fbbe 	bl	80007a4 <__aeabi_ddiv>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4614      	mov	r4, r2
 800202e:	461d      	mov	r5, r3
 8002030:	4b38      	ldr	r3, [pc, #224]	; (8002114 <SetHome+0x24c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa33 	bl	80004a0 <__aeabi_f2d>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4620      	mov	r0, r4
 8002040:	4629      	mov	r1, r5
 8002042:	f7fe f8cf 	bl	80001e4 <__adddf3>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fd2f 	bl	8000ab0 <__aeabi_d2f>
 8002052:	4603      	mov	r3, r0
 8002054:	4a3a      	ldr	r2, [pc, #232]	; (8002140 <SetHome+0x278>)
 8002056:	6013      	str	r3, [r2, #0]
			PositionControlVelocityForm(&Controller);
 8002058:	483a      	ldr	r0, [pc, #232]	; (8002144 <SetHome+0x27c>)
 800205a:	f7ff fc75 	bl	8001948 <PositionControlVelocityForm>

			if (0.03 > fabs(q_des - QEIData.position))
 800205e:	4b38      	ldr	r3, [pc, #224]	; (8002140 <SetHome+0x278>)
 8002060:	ed93 7a00 	vldr	s14, [r3]
 8002064:	4b32      	ldr	r3, [pc, #200]	; (8002130 <SetHome+0x268>)
 8002066:	edd3 7a04 	vldr	s15, [r3, #16]
 800206a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206e:	eef0 7ae7 	vabs.f32	s15, s15
 8002072:	ee17 0a90 	vmov	r0, s15
 8002076:	f7fe fa13 	bl	80004a0 <__aeabi_f2d>
 800207a:	a321      	add	r3, pc, #132	; (adr r3, 8002100 <SetHome+0x238>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe fcd8 	bl	8000a34 <__aeabi_dcmplt>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d100      	bne.n	800208c <SetHome+0x1c4>
			{
				PulseWidthModulation = 0;
				MotorDrive(PWM_tim);
				SetHomeState = Setcenter;
			}
			break;
 800208a:	e032      	b.n	80020f2 <SetHome+0x22a>
				PulseWidthModulation = 0;
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <SetHome+0x254>)
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
				MotorDrive(PWM_tim);
 8002094:	6838      	ldr	r0, [r7, #0]
 8002096:	f7ff fe89 	bl	8001dac <MotorDrive>
				SetHomeState = Setcenter;
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <SetHome+0x244>)
 800209c:	2207      	movs	r2, #7
 800209e:	701a      	strb	r2, [r3, #0]
			break;
 80020a0:	e027      	b.n	80020f2 <SetHome+0x22a>
		case Setcenter:
			__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
			SetHomeYFlag = 0;
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <SetHome+0x240>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
			SetHomeState = Jog;
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <SetHome+0x244>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80020b6:	2200      	movs	r2, #0
 80020b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020bc:	4819      	ldr	r0, [pc, #100]	; (8002124 <SetHome+0x25c>)
 80020be:	f003 ff1f 	bl	8005f00 <HAL_GPIO_WritePin>

			break;
 80020c2:	e016      	b.n	80020f2 <SetHome+0x22a>
		case Recenter:
			PulseWidthModulation = -3000;
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <SetHome+0x254>)
 80020c6:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <SetHome+0x270>)
 80020c8:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= -320)
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <SetHome+0x268>)
 80020cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80020d0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002148 <SetHome+0x280>
 80020d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020dc:	d900      	bls.n	80020e0 <SetHome+0x218>
			{
				SetHomeState = PCenter;
			}
			break;
 80020de:	e008      	b.n	80020f2 <SetHome+0x22a>
				SetHomeState = PCenter;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <SetHome+0x244>)
 80020e2:	2202      	movs	r2, #2
 80020e4:	701a      	strb	r2, [r3, #0]
			break;
 80020e6:	e004      	b.n	80020f2 <SetHome+0x22a>
			break;
 80020e8:	bf00      	nop
 80020ea:	e002      	b.n	80020f2 <SetHome+0x22a>
			break;
 80020ec:	bf00      	nop
 80020ee:	e000      	b.n	80020f2 <SetHome+0x22a>
			break;
 80020f0:	bf00      	nop
		}
		MotorDrive(PWM_tim);
 80020f2:	6838      	ldr	r0, [r7, #0]
 80020f4:	f7ff fe5a 	bl	8001dac <MotorDrive>
	}


}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002100:	eb851eb8 	.word	0xeb851eb8
 8002104:	3f9eb851 	.word	0x3f9eb851
 8002108:	20000259 	.word	0x20000259
 800210c:	2000035c 	.word	0x2000035c
 8002110:	20000350 	.word	0x20000350
 8002114:	20000354 	.word	0x20000354
 8002118:	20000358 	.word	0x20000358
 800211c:	20000924 	.word	0x20000924
 8002120:	453b8000 	.word	0x453b8000
 8002124:	40020400 	.word	0x40020400
 8002128:	2000093a 	.word	0x2000093a
 800212c:	2000093c 	.word	0x2000093c
 8002130:	20000908 	.word	0x20000908
 8002134:	c51c4000 	.word	0xc51c4000
 8002138:	c53b8000 	.word	0xc53b8000
 800213c:	451c4000 	.word	0x451c4000
 8002140:	200008d8 	.word	0x200008d8
 8002144:	2000092c 	.word	0x2000092c
 8002148:	c3a00000 	.word	0xc3a00000

0800214c <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <modbus_1t5_Timeout+0x1c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2201      	movs	r2, #1
 800215a:	751a      	strb	r2, [r3, #20]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	20000360 	.word	0x20000360

0800216c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <modbus_3t5_Timeout+0x1c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2201      	movs	r2, #1
 800217a:	755a      	strb	r2, [r3, #21]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	20000360 	.word	0x20000360

0800218c <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <modbus_UART_Recived+0x60>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <modbus_UART_Recived+0x60>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80021a6:	1c59      	adds	r1, r3, #1
 80021a8:	b289      	uxth	r1, r1
 80021aa:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80021ae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80021b2:	d210      	bcs.n	80021d6 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <modbus_UART_Recived+0x60>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68d8      	ldr	r0, [r3, #12]
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <modbus_UART_Recived+0x60>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <modbus_UART_Recived+0x60>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80021c6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80021ca:	4413      	add	r3, r2
 80021cc:	3302      	adds	r3, #2
 80021ce:	2201      	movs	r2, #1
 80021d0:	4619      	mov	r1, r3
 80021d2:	f008 f817 	bl	800a204 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <modbus_UART_Recived+0x60>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2200      	movs	r2, #0
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000360 	.word	0x20000360

080021f0 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80021fa:	4a24      	ldr	r2, [pc, #144]	; (800228c <Modbus_init+0x9c>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <Modbus_init+0x9c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <Modbus_init+0x9c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	4a20      	ldr	r2, [pc, #128]	; (8002290 <Modbus_init+0xa0>)
 8002210:	2114      	movs	r1, #20
 8002212:	4618      	mov	r0, r3
 8002214:	f007 f9a8 	bl	8009568 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8002218:	4b1c      	ldr	r3, [pc, #112]	; (800228c <Modbus_init+0x9c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <Modbus_init+0xa4>)
 8002220:	210e      	movs	r1, #14
 8002222:	4618      	mov	r0, r3
 8002224:	f007 f9a0 	bl	8009568 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <Modbus_init+0x9c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	4a1a      	ldr	r2, [pc, #104]	; (8002298 <Modbus_init+0xa8>)
 8002230:	2103      	movs	r1, #3
 8002232:	4618      	mov	r0, r3
 8002234:	f007 ff3e 	bl	800a0b4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <Modbus_init+0x9c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68d8      	ldr	r0, [r3, #12]
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <Modbus_init+0x9c>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <Modbus_init+0x9c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800224a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800224e:	4413      	add	r3, r2
 8002250:	3302      	adds	r3, #2
 8002252:	2201      	movs	r2, #1
 8002254:	4619      	mov	r1, r3
 8002256:	f007 ffd5 	bl	800a204 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <Modbus_init+0x9c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10c      	bne.n	8002284 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <Modbus_init+0x9c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	4618      	mov	r0, r3
 8002272:	f006 fa8b 	bl	800878c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <Modbus_init+0x9c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f006 fc62 	bl	8008b48 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000360 	.word	0x20000360
 8002290:	0800214d 	.word	0x0800214d
 8002294:	0800216d 	.word	0x0800216d
 8002298:	0800218d 	.word	0x0800218d

0800229c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80022a8:	23ff      	movs	r3, #255	; 0xff
 80022aa:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80022ac:	23ff      	movs	r3, #255	; 0xff
 80022ae:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80022b0:	e013      	b.n	80022da <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	7bbb      	ldrb	r3, [r7, #14]
 80022bc:	4053      	eors	r3, r2
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80022c2:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <CRC16+0x64>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4413      	add	r3, r2
 80022c8:	781a      	ldrb	r2, [r3, #0]
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	4053      	eors	r3, r2
 80022ce:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80022d0:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <CRC16+0x68>)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4413      	add	r3, r2
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80022da:	883b      	ldrh	r3, [r7, #0]
 80022dc:	1e5a      	subs	r2, r3, #1
 80022de:	803a      	strh	r2, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e6      	bne.n	80022b2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	b21a      	sxth	r2, r3
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	4313      	orrs	r3, r2
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	b29b      	uxth	r3, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	20000108 	.word	0x20000108
 8002304:	20000008 	.word	0x20000008

08002308 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800230e:	4b81      	ldr	r3, [pc, #516]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	7e1b      	ldrb	r3, [r3, #24]
 8002314:	3b01      	subs	r3, #1
 8002316:	2b03      	cmp	r3, #3
 8002318:	d80a      	bhi.n	8002330 <Modbus_Protocal_Worker+0x28>
 800231a:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <Modbus_Protocal_Worker+0x18>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	0800233b 	.word	0x0800233b
 8002324:	080024db 	.word	0x080024db
 8002328:	080023c7 	.word	0x080023c7
 800232c:	080023ed 	.word	0x080023ed
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002330:	4b78      	ldr	r3, [pc, #480]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2201      	movs	r2, #1
 8002336:	761a      	strb	r2, [r3, #24]
		break;
 8002338:	e0e8      	b.n	800250c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8002346:	f000 f9d7 	bl	80026f8 <Modbus_Emission>
 800234a:	e01c      	b.n	8002386 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 800234c:	4b71      	ldr	r3, [pc, #452]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	7d9b      	ldrb	r3, [r3, #22]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d017      	beq.n	8002386 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8002356:	4b6f      	ldr	r3, [pc, #444]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2200      	movs	r2, #0
 800235c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8002366:	4b6b      	ldr	r3, [pc, #428]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b68      	ldr	r3, [pc, #416]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0201 	orr.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800237e:	4b65      	ldr	r3, [pc, #404]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2203      	movs	r2, #3
 8002384:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b20      	cmp	r3, #32
 8002394:	f040 80b3 	bne.w	80024fe <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8002398:	4b5e      	ldr	r3, [pc, #376]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2200      	movs	r2, #0
 800239e:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80023a2:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68d8      	ldr	r0, [r3, #12]
 80023a8:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80023b4:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80023b8:	4413      	add	r3, r2
 80023ba:	3302      	adds	r3, #2
 80023bc:	2201      	movs	r2, #1
 80023be:	4619      	mov	r1, r3
 80023c0:	f007 ff20 	bl	800a204 <HAL_UART_Receive_IT>
		}
		break;
 80023c4:	e09b      	b.n	80024fe <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80023c6:	4b53      	ldr	r3, [pc, #332]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	7d1b      	ldrb	r3, [r3, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80023d2:	4b50      	ldr	r3, [pc, #320]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80023da:	4b4e      	ldr	r3, [pc, #312]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	22fe      	movs	r2, #254	; 0xfe
 80023e0:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80023e2:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2204      	movs	r2, #4
 80023e8:	761a      	strb	r2, [r3, #24]
		}
		break;
 80023ea:	e08a      	b.n	8002502 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80023ec:	4b49      	ldr	r3, [pc, #292]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	7d9b      	ldrb	r3, [r3, #22]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d103      	bne.n	800240a <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002402:	4b44      	ldr	r3, [pc, #272]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	22ff      	movs	r2, #255	; 0xff
 8002408:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800240a:	4b42      	ldr	r3, [pc, #264]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002412:	f113 0f02 	cmn.w	r3, #2
 8002416:	d150      	bne.n	80024ba <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002418:	4b3e      	ldr	r3, [pc, #248]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002420:	4b3c      	ldr	r3, [pc, #240]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f203 2272 	addw	r2, r3, #626	; 0x272
 8002428:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002430:	3b02      	subs	r3, #2
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f7ff ff31 	bl	800229c <CRC16>
 800243a:	4603      	mov	r3, r0
 800243c:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800243e:	793a      	ldrb	r2, [r7, #4]
 8002440:	4b34      	ldr	r3, [pc, #208]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	4b33      	ldr	r3, [pc, #204]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800244c:	3b02      	subs	r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8002454:	429a      	cmp	r2, r3
 8002456:	d10c      	bne.n	8002472 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8002458:	797a      	ldrb	r2, [r7, #5]
 800245a:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002466:	3b01      	subs	r3, #1
 8002468:	440b      	add	r3, r1
 800246a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800246e:	429a      	cmp	r2, r3
 8002470:	d004      	beq.n	800247c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002472:	4b28      	ldr	r3, [pc, #160]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	22ff      	movs	r2, #255	; 0xff
 8002478:	75da      	strb	r2, [r3, #23]
				break;
 800247a:	e047      	b.n	800250c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8002484:	4b23      	ldr	r3, [pc, #140]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d113      	bne.n	80024b6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800248e:	4b21      	ldr	r3, [pc, #132]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8002496:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800249e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80024a8:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80024aa:	461a      	mov	r2, r3
 80024ac:	f009 f86c 	bl	800b588 <memcpy>

			//execute command
			Modbus_frame_response();
 80024b0:	f000 f90a 	bl	80026c8 <Modbus_frame_response>
 80024b4:	e001      	b.n	80024ba <Modbus_Protocal_Worker+0x1b2>
				break;
 80024b6:	bf00      	nop
					}
		break;


	}
}
 80024b8:	e028      	b.n	800250c <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	7d5b      	ldrb	r3, [r3, #21]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f007 ff44 	bl	800a360 <HAL_UART_AbortReceive>
		break;
 80024d8:	e015      	b.n	8002506 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d10f      	bne.n	800250a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <Modbus_Protocal_Worker+0x20c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2201      	movs	r2, #1
 80024fa:	761a      	strb	r2, [r3, #24]
		break;
 80024fc:	e005      	b.n	800250a <Modbus_Protocal_Worker+0x202>
		break;
 80024fe:	bf00      	nop
 8002500:	e004      	b.n	800250c <Modbus_Protocal_Worker+0x204>
		break;
 8002502:	bf00      	nop
 8002504:	e002      	b.n	800250c <Modbus_Protocal_Worker+0x204>
		break;
 8002506:	bf00      	nop
 8002508:	e000      	b.n	800250c <Modbus_Protocal_Worker+0x204>
		break;
 800250a:	bf00      	nop
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000360 	.word	0x20000360

08002518 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <modbusWrite1Register+0x80>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	7e9b      	ldrb	r3, [r3, #26]
 8002524:	b29b      	uxth	r3, r3
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	b29a      	uxth	r2, r3
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <modbusWrite1Register+0x80>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	7edb      	ldrb	r3, [r3, #27]
 8002530:	b29b      	uxth	r3, r3
 8002532:	4413      	add	r3, r2
 8002534:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <modbusWrite1Register+0x80>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	429a      	cmp	r2, r3
 8002540:	d903      	bls.n	800254a <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002542:	2002      	movs	r0, #2
 8002544:	f000 f8a4 	bl	8002690 <ModbusErrorReply>
			 return;
 8002548:	e023      	b.n	8002592 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <modbusWrite1Register+0x80>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <modbusWrite1Register+0x80>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	440b      	add	r3, r1
 800255a:	7f12      	ldrb	r2, [r2, #28]
 800255c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <modbusWrite1Register+0x80>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <modbusWrite1Register+0x80>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	440b      	add	r3, r1
 800256e:	7f52      	ldrb	r2, [r2, #29]
 8002570:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <modbusWrite1Register+0x80>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <modbusWrite1Register+0x80>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8002580:	2208      	movs	r2, #8
 8002582:	4619      	mov	r1, r3
 8002584:	f009 f800 	bl	800b588 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <modbusWrite1Register+0x80>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2205      	movs	r2, #5
 800258e:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000360 	.word	0x20000360

0800259c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80025a2:	4b3a      	ldr	r3, [pc, #232]	; (800268c <modbusRead1Register+0xf0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	7f1b      	ldrb	r3, [r3, #28]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <modbusRead1Register+0xf0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	7f5b      	ldrb	r3, [r3, #29]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80025ba:	4b34      	ldr	r3, [pc, #208]	; (800268c <modbusRead1Register+0xf0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	7e9b      	ldrb	r3, [r3, #26]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <modbusRead1Register+0xf0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	7edb      	ldrb	r3, [r3, #27]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <modbusRead1Register+0x42>
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	2b7d      	cmp	r3, #125	; 0x7d
 80025dc:	d903      	bls.n	80025e6 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80025de:	2003      	movs	r0, #3
 80025e0:	f000 f856 	bl	8002690 <ModbusErrorReply>
		 return;
 80025e4:	e04e      	b.n	8002684 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80025e6:	88ba      	ldrh	r2, [r7, #4]
 80025e8:	4b28      	ldr	r3, [pc, #160]	; (800268c <modbusRead1Register+0xf0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d808      	bhi.n	8002604 <modbusRead1Register+0x68>
 80025f2:	88ba      	ldrh	r2, [r7, #4]
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	4413      	add	r3, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <modbusRead1Register+0xf0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	429a      	cmp	r2, r3
 8002602:	d903      	bls.n	800260c <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002604:	2002      	movs	r0, #2
 8002606:	f000 f843 	bl	8002690 <ModbusErrorReply>
		 return;
 800260a:	e03b      	b.n	8002684 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800260c:	4b1f      	ldr	r3, [pc, #124]	; (800268c <modbusRead1Register+0xf0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2203      	movs	r2, #3
 8002612:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <modbusRead1Register+0xf0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	0052      	lsls	r2, r2, #1
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002626:	2400      	movs	r4, #0
 8002628:	e020      	b.n	800266c <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <modbusRead1Register+0xf0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	88bb      	ldrh	r3, [r7, #4]
 8002632:	4423      	add	r3, r4
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	18d1      	adds	r1, r2, r3
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <modbusRead1Register+0xf0>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	1c63      	adds	r3, r4, #1
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	7849      	ldrb	r1, [r1, #1]
 8002642:	4413      	add	r3, r2
 8002644:	460a      	mov	r2, r1
 8002646:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <modbusRead1Register+0xf0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	88bb      	ldrh	r3, [r7, #4]
 8002652:	4423      	add	r3, r4
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	18d1      	adds	r1, r2, r3
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <modbusRead1Register+0xf0>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	0063      	lsls	r3, r4, #1
 800265e:	3303      	adds	r3, #3
 8002660:	7809      	ldrb	r1, [r1, #0]
 8002662:	4413      	add	r3, r2
 8002664:	460a      	mov	r2, r1
 8002666:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800266a:	3401      	adds	r4, #1
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	429c      	cmp	r4, r3
 8002670:	dbdb      	blt.n	800262a <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	3301      	adds	r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <modbusRead1Register+0xf0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0052      	lsls	r2, r2, #1
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}
 800268a:	bf00      	nop
 800268c:	20000360 	.word	0x20000360

08002690 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <ModbusErrorReply+0x34>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2283      	movs	r2, #131	; 0x83
 80026a0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 80026a4:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <ModbusErrorReply+0x34>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <ModbusErrorReply+0x34>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	20000360 	.word	0x20000360

080026c8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <Modbus_frame_response+0x2c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	7e5b      	ldrb	r3, [r3, #25]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d004      	beq.n	80026e0 <Modbus_frame_response+0x18>
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d105      	bne.n	80026e6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80026da:	f7ff ff1d 	bl	8002518 <modbusWrite1Register>
		break;
 80026de:	e006      	b.n	80026ee <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80026e0:	f7ff ff5c 	bl	800259c <modbusRead1Register>
		break;
 80026e4:	e003      	b.n	80026ee <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7ff ffd2 	bl	8002690 <ModbusErrorReply>
		break;
 80026ec:	bf00      	nop

	}
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000360 	.word	0x20000360

080026f8 <Modbus_Emission>:

void Modbus_Emission()
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80026fe:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <Modbus_Emission+0xfc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b20      	cmp	r3, #32
 800270c:	d15e      	bne.n	80027cc <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <Modbus_Emission+0xfc>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <Modbus_Emission+0xfc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	7812      	ldrb	r2, [r2, #0]
 8002718:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800271c:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <Modbus_Emission+0xfc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8002724:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002726:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <Modbus_Emission+0xfc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 800272e:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <Modbus_Emission+0xfc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8002736:	461a      	mov	r2, r3
 8002738:	f008 ff26 	bl	800b588 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800273c:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <Modbus_Emission+0xfc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8002744:	b29a      	uxth	r2, r3
 8002746:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <Modbus_Emission+0xfc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3203      	adds	r2, #3
 800274c:	b292      	uxth	r2, r2
 800274e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <Modbus_Emission+0xfc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800275a:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <Modbus_Emission+0xfc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002762:	3b02      	subs	r3, #2
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f7ff fd98 	bl	800229c <CRC16>
 800276c:	4603      	mov	r3, r0
 800276e:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <Modbus_Emission+0xfc>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <Modbus_Emission+0xfc>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800277c:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800277e:	7939      	ldrb	r1, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	460a      	mov	r2, r1
 8002784:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <Modbus_Emission+0xfc>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <Modbus_Emission+0xfc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8002794:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002796:	7979      	ldrb	r1, [r7, #5]
 8002798:	4413      	add	r3, r2
 800279a:	460a      	mov	r2, r1
 800279c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80027a0:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <Modbus_Emission+0xfc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d10d      	bne.n	80027cc <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80027b0:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <Modbus_Emission+0xfc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <Modbus_Emission+0xfc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <Modbus_Emission+0xfc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80027c2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80027c6:	461a      	mov	r2, r3
 80027c8:	f007 fd4c 	bl	800a264 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <Modbus_Emission+0xfc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2200      	movs	r2, #0
 80027d2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80027d4:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <Modbus_Emission+0xfc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <Modbus_Emission+0xfc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2200      	movs	r2, #0
 80027e2:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <Modbus_Emission+0xfc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2202      	movs	r2, #2
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000360 	.word	0x20000360

080027f8 <QuinticTraj_PreCal>:
		}
	}
}

void QuinticTraj_PreCal(int16_t start_pos, int16_t final_pos, Traj* trajectory)
{
 80027f8:	b5b0      	push	{r4, r5, r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	603a      	str	r2, [r7, #0]
 8002802:	80fb      	strh	r3, [r7, #6]
 8002804:	460b      	mov	r3, r1
 8002806:	80bb      	strh	r3, [r7, #4]
	if (start_pos != final_pos)
 8002808:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800280c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002810:	429a      	cmp	r2, r3
 8002812:	d07d      	beq.n	8002910 <QuinticTraj_PreCal+0x118>
	{
		float s = final_pos - start_pos;
 8002814:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002826:	edc7 7a05 	vstr	s15, [r7, #20]

		trajectory->t_acc = 0;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	605a      	str	r2, [r3, #4]
		float t_total_v = (15.0*fabs(s))/v_max;
 8002832:	edd7 7a05 	vldr	s15, [r7, #20]
 8002836:	eef0 7ae7 	vabs.f32	s15, s15
 800283a:	ee17 0a90 	vmov	r0, s15
 800283e:	f7fd fe2f 	bl	80004a0 <__aeabi_f2d>
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	4b36      	ldr	r3, [pc, #216]	; (8002920 <QuinticTraj_PreCal+0x128>)
 8002848:	f7fd fe82 	bl	8000550 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4614      	mov	r4, r2
 8002852:	461d      	mov	r5, r3
 8002854:	4b33      	ldr	r3, [pc, #204]	; (8002924 <QuinticTraj_PreCal+0x12c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe21 	bl	80004a0 <__aeabi_f2d>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4620      	mov	r0, r4
 8002864:	4629      	mov	r1, r5
 8002866:	f7fd ff9d 	bl	80007a4 <__aeabi_ddiv>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f7fe f91d 	bl	8000ab0 <__aeabi_d2f>
 8002876:	4603      	mov	r3, r0
 8002878:	613b      	str	r3, [r7, #16]
		float t_total_a = 0.5*sqrt((40*sqrt(3)*fabs(s))/(3*a));
 800287a:	edd7 7a05 	vldr	s15, [r7, #20]
 800287e:	eef0 7ae7 	vabs.f32	s15, s15
 8002882:	ee17 0a90 	vmov	r0, s15
 8002886:	f7fd fe0b 	bl	80004a0 <__aeabi_f2d>
 800288a:	a323      	add	r3, pc, #140	; (adr r3, 8002918 <QuinticTraj_PreCal+0x120>)
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	f7fd fe5e 	bl	8000550 <__aeabi_dmul>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4614      	mov	r4, r2
 800289a:	461d      	mov	r5, r3
 800289c:	4b22      	ldr	r3, [pc, #136]	; (8002928 <QuinticTraj_PreCal+0x130>)
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80028a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028aa:	ee17 0a90 	vmov	r0, s15
 80028ae:	f7fd fdf7 	bl	80004a0 <__aeabi_f2d>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4620      	mov	r0, r4
 80028b8:	4629      	mov	r1, r5
 80028ba:	f7fd ff73 	bl	80007a4 <__aeabi_ddiv>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	ec43 2b17 	vmov	d7, r2, r3
 80028c6:	eeb0 0a47 	vmov.f32	s0, s14
 80028ca:	eef0 0a67 	vmov.f32	s1, s15
 80028ce:	f008 fee3 	bl	800b698 <sqrt>
 80028d2:	ec51 0b10 	vmov	r0, r1, d0
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	4b14      	ldr	r3, [pc, #80]	; (800292c <QuinticTraj_PreCal+0x134>)
 80028dc:	f7fd fe38 	bl	8000550 <__aeabi_dmul>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f8e2 	bl	8000ab0 <__aeabi_d2f>
 80028ec:	4603      	mov	r3, r0
 80028ee:	60fb      	str	r3, [r7, #12]

		if(t_total_v > t_total_a)
 80028f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80028f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002900:	dd03      	ble.n	800290a <QuinticTraj_PreCal+0x112>
		{
			trajectory->t_total = t_total_v;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	601a      	str	r2, [r3, #0]
		else
		{
			trajectory->t_total = t_total_a;
		}
	}
}
 8002908:	e002      	b.n	8002910 <QuinticTraj_PreCal+0x118>
			trajectory->t_total = t_total_a;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	601a      	str	r2, [r3, #0]
}
 8002910:	bf00      	nop
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bdb0      	pop	{r4, r5, r7, pc}
 8002918:	d1372fea 	.word	0xd1372fea
 800291c:	4051520c 	.word	0x4051520c
 8002920:	402e0000 	.word	0x402e0000
 8002924:	20000208 	.word	0x20000208
 8002928:	2000020c 	.word	0x2000020c
 800292c:	3fe00000 	.word	0x3fe00000

08002930 <QuinticTraj_GetState>:

void QuinticTraj_GetState(int16_t start_pos, int16_t final_pos, Traj* trajectory, uint32_t t_us)
{
 8002930:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002934:	b08c      	sub	sp, #48	; 0x30
 8002936:	af00      	add	r7, sp, #0
 8002938:	60ba      	str	r2, [r7, #8]
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	4603      	mov	r3, r0
 800293e:	81fb      	strh	r3, [r7, #14]
 8002940:	460b      	mov	r3, r1
 8002942:	81bb      	strh	r3, [r7, #12]
	if (start_pos != final_pos)
 8002944:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002948:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	f000 81da 	beq.w	8002d06 <QuinticTraj_GetState+0x3d6>
	{
		float t = t_us/1000000.0;
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fd fd82 	bl	800045c <__aeabi_ui2d>
 8002958:	a3f8      	add	r3, pc, #992	; (adr r3, 8002d3c <QuinticTraj_GetState+0x40c>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	f7fd ff21 	bl	80007a4 <__aeabi_ddiv>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f7fe f8a1 	bl	8000ab0 <__aeabi_d2f>
 800296e:	4603      	mov	r3, r0
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c

		float t_total = trajectory->t_total;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
		float s = final_pos - start_pos;
 8002978:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800297c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800298a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		float C5 = 6*s/pow(t_total,5);
 800298e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002992:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299a:	ee17 0a90 	vmov	r0, s15
 800299e:	f7fd fd7f 	bl	80004a0 <__aeabi_f2d>
 80029a2:	4604      	mov	r4, r0
 80029a4:	460d      	mov	r5, r1
 80029a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029a8:	f7fd fd7a 	bl	80004a0 <__aeabi_f2d>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	ed9f 1bd7 	vldr	d1, [pc, #860]	; 8002d10 <QuinticTraj_GetState+0x3e0>
 80029b4:	ec43 2b10 	vmov	d0, r2, r3
 80029b8:	f008 fdfe 	bl	800b5b8 <pow>
 80029bc:	ec53 2b10 	vmov	r2, r3, d0
 80029c0:	4620      	mov	r0, r4
 80029c2:	4629      	mov	r1, r5
 80029c4:	f7fd feee 	bl	80007a4 <__aeabi_ddiv>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	f7fe f86e 	bl	8000ab0 <__aeabi_d2f>
 80029d4:	4603      	mov	r3, r0
 80029d6:	623b      	str	r3, [r7, #32]
		float C4 = -15*s/pow(t_total,4);
 80029d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029dc:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 80029e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e4:	ee17 0a90 	vmov	r0, s15
 80029e8:	f7fd fd5a 	bl	80004a0 <__aeabi_f2d>
 80029ec:	4604      	mov	r4, r0
 80029ee:	460d      	mov	r5, r1
 80029f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029f2:	f7fd fd55 	bl	80004a0 <__aeabi_f2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	ed9f 1bc7 	vldr	d1, [pc, #796]	; 8002d18 <QuinticTraj_GetState+0x3e8>
 80029fe:	ec43 2b10 	vmov	d0, r2, r3
 8002a02:	f008 fdd9 	bl	800b5b8 <pow>
 8002a06:	ec53 2b10 	vmov	r2, r3, d0
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	f7fd fec9 	bl	80007a4 <__aeabi_ddiv>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7fe f849 	bl	8000ab0 <__aeabi_d2f>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	61fb      	str	r3, [r7, #28]
		float C3 = 10*s/pow(t_total,3);
 8002a22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a26:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2e:	ee17 0a90 	vmov	r0, s15
 8002a32:	f7fd fd35 	bl	80004a0 <__aeabi_f2d>
 8002a36:	4604      	mov	r4, r0
 8002a38:	460d      	mov	r5, r1
 8002a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a3c:	f7fd fd30 	bl	80004a0 <__aeabi_f2d>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	ed9f 1bb6 	vldr	d1, [pc, #728]	; 8002d20 <QuinticTraj_GetState+0x3f0>
 8002a48:	ec43 2b10 	vmov	d0, r2, r3
 8002a4c:	f008 fdb4 	bl	800b5b8 <pow>
 8002a50:	ec53 2b10 	vmov	r2, r3, d0
 8002a54:	4620      	mov	r0, r4
 8002a56:	4629      	mov	r1, r5
 8002a58:	f7fd fea4 	bl	80007a4 <__aeabi_ddiv>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7fe f824 	bl	8000ab0 <__aeabi_d2f>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	61bb      	str	r3, [r7, #24]
		float C0 = start_pos;
 8002a6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a78:	edc7 7a05 	vstr	s15, [r7, #20]

		q_des = C5*pow(t,5) + C4*pow(t,4) + C3*pow(t,3) + C0;
 8002a7c:	6a38      	ldr	r0, [r7, #32]
 8002a7e:	f7fd fd0f 	bl	80004a0 <__aeabi_f2d>
 8002a82:	4604      	mov	r4, r0
 8002a84:	460d      	mov	r5, r1
 8002a86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a88:	f7fd fd0a 	bl	80004a0 <__aeabi_f2d>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	ed9f 1b9f 	vldr	d1, [pc, #636]	; 8002d10 <QuinticTraj_GetState+0x3e0>
 8002a94:	ec43 2b10 	vmov	d0, r2, r3
 8002a98:	f008 fd8e 	bl	800b5b8 <pow>
 8002a9c:	ec53 2b10 	vmov	r2, r3, d0
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	f7fd fd54 	bl	8000550 <__aeabi_dmul>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4690      	mov	r8, r2
 8002aae:	4699      	mov	r9, r3
 8002ab0:	69f8      	ldr	r0, [r7, #28]
 8002ab2:	f7fd fcf5 	bl	80004a0 <__aeabi_f2d>
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	460d      	mov	r5, r1
 8002aba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002abc:	f7fd fcf0 	bl	80004a0 <__aeabi_f2d>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	ed9f 1b94 	vldr	d1, [pc, #592]	; 8002d18 <QuinticTraj_GetState+0x3e8>
 8002ac8:	ec43 2b10 	vmov	d0, r2, r3
 8002acc:	f008 fd74 	bl	800b5b8 <pow>
 8002ad0:	ec53 2b10 	vmov	r2, r3, d0
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	f7fd fd3a 	bl	8000550 <__aeabi_dmul>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4640      	mov	r0, r8
 8002ae2:	4649      	mov	r1, r9
 8002ae4:	f7fd fb7e 	bl	80001e4 <__adddf3>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4690      	mov	r8, r2
 8002aee:	4699      	mov	r9, r3
 8002af0:	69b8      	ldr	r0, [r7, #24]
 8002af2:	f7fd fcd5 	bl	80004a0 <__aeabi_f2d>
 8002af6:	4604      	mov	r4, r0
 8002af8:	460d      	mov	r5, r1
 8002afa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002afc:	f7fd fcd0 	bl	80004a0 <__aeabi_f2d>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8002d20 <QuinticTraj_GetState+0x3f0>
 8002b08:	ec43 2b10 	vmov	d0, r2, r3
 8002b0c:	f008 fd54 	bl	800b5b8 <pow>
 8002b10:	ec53 2b10 	vmov	r2, r3, d0
 8002b14:	4620      	mov	r0, r4
 8002b16:	4629      	mov	r1, r5
 8002b18:	f7fd fd1a 	bl	8000550 <__aeabi_dmul>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4640      	mov	r0, r8
 8002b22:	4649      	mov	r1, r9
 8002b24:	f7fd fb5e 	bl	80001e4 <__adddf3>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	461d      	mov	r5, r3
 8002b30:	6978      	ldr	r0, [r7, #20]
 8002b32:	f7fd fcb5 	bl	80004a0 <__aeabi_f2d>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	f7fd fb51 	bl	80001e4 <__adddf3>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f7fd ffb1 	bl	8000ab0 <__aeabi_d2f>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4a77      	ldr	r2, [pc, #476]	; (8002d30 <QuinticTraj_GetState+0x400>)
 8002b52:	6013      	str	r3, [r2, #0]
		qdot_des = 5*C5*pow(t,4) + 4*C4*pow(t,3) + 3*C3*pow(t,2);
 8002b54:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b58:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b60:	ee17 0a90 	vmov	r0, s15
 8002b64:	f7fd fc9c 	bl	80004a0 <__aeabi_f2d>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	460d      	mov	r5, r1
 8002b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b6e:	f7fd fc97 	bl	80004a0 <__aeabi_f2d>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8002d18 <QuinticTraj_GetState+0x3e8>
 8002b7a:	ec43 2b10 	vmov	d0, r2, r3
 8002b7e:	f008 fd1b 	bl	800b5b8 <pow>
 8002b82:	ec53 2b10 	vmov	r2, r3, d0
 8002b86:	4620      	mov	r0, r4
 8002b88:	4629      	mov	r1, r5
 8002b8a:	f7fd fce1 	bl	8000550 <__aeabi_dmul>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4690      	mov	r8, r2
 8002b94:	4699      	mov	r9, r3
 8002b96:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b9a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba2:	ee17 0a90 	vmov	r0, s15
 8002ba6:	f7fd fc7b 	bl	80004a0 <__aeabi_f2d>
 8002baa:	4604      	mov	r4, r0
 8002bac:	460d      	mov	r5, r1
 8002bae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bb0:	f7fd fc76 	bl	80004a0 <__aeabi_f2d>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8002d20 <QuinticTraj_GetState+0x3f0>
 8002bbc:	ec43 2b10 	vmov	d0, r2, r3
 8002bc0:	f008 fcfa 	bl	800b5b8 <pow>
 8002bc4:	ec53 2b10 	vmov	r2, r3, d0
 8002bc8:	4620      	mov	r0, r4
 8002bca:	4629      	mov	r1, r5
 8002bcc:	f7fd fcc0 	bl	8000550 <__aeabi_dmul>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4640      	mov	r0, r8
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	f7fd fb04 	bl	80001e4 <__adddf3>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4690      	mov	r8, r2
 8002be2:	4699      	mov	r9, r3
 8002be4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002be8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf0:	ee17 0a90 	vmov	r0, s15
 8002bf4:	f7fd fc54 	bl	80004a0 <__aeabi_f2d>
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	460d      	mov	r5, r1
 8002bfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bfe:	f7fd fc4f 	bl	80004a0 <__aeabi_f2d>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8002d28 <QuinticTraj_GetState+0x3f8>
 8002c0a:	ec43 2b10 	vmov	d0, r2, r3
 8002c0e:	f008 fcd3 	bl	800b5b8 <pow>
 8002c12:	ec53 2b10 	vmov	r2, r3, d0
 8002c16:	4620      	mov	r0, r4
 8002c18:	4629      	mov	r1, r5
 8002c1a:	f7fd fc99 	bl	8000550 <__aeabi_dmul>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4640      	mov	r0, r8
 8002c24:	4649      	mov	r1, r9
 8002c26:	f7fd fadd 	bl	80001e4 <__adddf3>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f7fd ff3d 	bl	8000ab0 <__aeabi_d2f>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4a3e      	ldr	r2, [pc, #248]	; (8002d34 <QuinticTraj_GetState+0x404>)
 8002c3a:	6013      	str	r3, [r2, #0]
		qddot_des = 20*C5*pow(t,3) + 12*C4*pow(t,2) + 6*C3*t;
 8002c3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c40:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c48:	ee17 0a90 	vmov	r0, s15
 8002c4c:	f7fd fc28 	bl	80004a0 <__aeabi_f2d>
 8002c50:	4604      	mov	r4, r0
 8002c52:	460d      	mov	r5, r1
 8002c54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c56:	f7fd fc23 	bl	80004a0 <__aeabi_f2d>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8002d20 <QuinticTraj_GetState+0x3f0>
 8002c62:	ec43 2b10 	vmov	d0, r2, r3
 8002c66:	f008 fca7 	bl	800b5b8 <pow>
 8002c6a:	ec53 2b10 	vmov	r2, r3, d0
 8002c6e:	4620      	mov	r0, r4
 8002c70:	4629      	mov	r1, r5
 8002c72:	f7fd fc6d 	bl	8000550 <__aeabi_dmul>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4690      	mov	r8, r2
 8002c7c:	4699      	mov	r9, r3
 8002c7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c82:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c8a:	ee17 0a90 	vmov	r0, s15
 8002c8e:	f7fd fc07 	bl	80004a0 <__aeabi_f2d>
 8002c92:	4604      	mov	r4, r0
 8002c94:	460d      	mov	r5, r1
 8002c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c98:	f7fd fc02 	bl	80004a0 <__aeabi_f2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002d28 <QuinticTraj_GetState+0x3f8>
 8002ca4:	ec43 2b10 	vmov	d0, r2, r3
 8002ca8:	f008 fc86 	bl	800b5b8 <pow>
 8002cac:	ec53 2b10 	vmov	r2, r3, d0
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f7fd fc4c 	bl	8000550 <__aeabi_dmul>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4640      	mov	r0, r8
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	f7fd fa90 	bl	80001e4 <__adddf3>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4614      	mov	r4, r2
 8002cca:	461d      	mov	r5, r3
 8002ccc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cd0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002cd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cd8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce0:	ee17 0a90 	vmov	r0, s15
 8002ce4:	f7fd fbdc 	bl	80004a0 <__aeabi_f2d>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4620      	mov	r0, r4
 8002cee:	4629      	mov	r1, r5
 8002cf0:	f7fd fa78 	bl	80001e4 <__adddf3>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f7fd fed8 	bl	8000ab0 <__aeabi_d2f>
 8002d00:	4603      	mov	r3, r0
 8002d02:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <QuinticTraj_GetState+0x408>)
 8002d04:	6013      	str	r3, [r2, #0]
	}
}
 8002d06:	bf00      	nop
 8002d08:	3730      	adds	r7, #48	; 0x30
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d10:	00000000 	.word	0x00000000
 8002d14:	40140000 	.word	0x40140000
 8002d18:	00000000 	.word	0x00000000
 8002d1c:	40100000 	.word	0x40100000
 8002d20:	00000000 	.word	0x00000000
 8002d24:	40080000 	.word	0x40080000
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	40000000 	.word	0x40000000
 8002d30:	200008d8 	.word	0x200008d8
 8002d34:	200008dc 	.word	0x200008dc
 8002d38:	200008e0 	.word	0x200008e0
 8002d3c:	00000000 	.word	0x00000000
 8002d40:	412e8480 	.word	0x412e8480

08002d44 <swap>:
  30, 40,
  50, 40
};

void swap(float* a, float* b)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
	float temp = *a;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60fb      	str	r3, [r7, #12]
	*a = *b;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	601a      	str	r2, [r3, #0]
	*b = temp;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	601a      	str	r2, [r3, #0]
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <SetTwoPointsForCalibrate>:

void SetTwoPointsForCalibrate(float* x0, float* y0, float* x1, float* y1, uint8_t trayNumber) // 0->Pick, 1->Place
{
 8002d70:	b5b0      	push	{r4, r5, r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
	if(*y0 > *y1){swap(x0, x1); swap(y0, y1);}
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	ed93 7a00 	vldr	s14, [r3]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d92:	dd08      	ble.n	8002da6 <SetTwoPointsForCalibrate+0x36>
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f7ff ffd4 	bl	8002d44 <swap>
 8002d9c:	6839      	ldr	r1, [r7, #0]
 8002d9e:	68b8      	ldr	r0, [r7, #8]
 8002da0:	f7ff ffd0 	bl	8002d44 <swap>
 8002da4:	e01d      	b.n	8002de2 <SetTwoPointsForCalibrate+0x72>
	else if(*y0 == *y1)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	ed93 7a00 	vldr	s14, [r3]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	eeb4 7a67 	vcmp.f32	s14, s15
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	d112      	bne.n	8002de2 <SetTwoPointsForCalibrate+0x72>
	{
		if (*x0 > *x1){swap(x0, x1); swap(y0, y1);}
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	ed93 7a00 	vldr	s14, [r3]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd0:	dd07      	ble.n	8002de2 <SetTwoPointsForCalibrate+0x72>
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f7ff ffb5 	bl	8002d44 <swap>
 8002dda:	6839      	ldr	r1, [r7, #0]
 8002ddc:	68b8      	ldr	r0, [r7, #8]
 8002dde:	f7ff ffb1 	bl	8002d44 <swap>
	}

	rotationAngleRadian = atan2(*y1 - *y0, *x1 - *x0) - atan2(50, 60);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	ed93 7a00 	vldr	s14, [r3]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df2:	ee17 0a90 	vmov	r0, s15
 8002df6:	f7fd fb53 	bl	80004a0 <__aeabi_f2d>
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	460d      	mov	r5, r1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	ed93 7a00 	vldr	s14, [r3]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0e:	ee17 0a90 	vmov	r0, s15
 8002e12:	f7fd fb45 	bl	80004a0 <__aeabi_f2d>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	ec43 2b11 	vmov	d1, r2, r3
 8002e1e:	ec45 4b10 	vmov	d0, r4, r5
 8002e22:	f008 fbc7 	bl	800b5b4 <atan2>
 8002e26:	ec51 0b10 	vmov	r0, r1, d0
 8002e2a:	a327      	add	r3, pc, #156	; (adr r3, 8002ec8 <SetTwoPointsForCalibrate+0x158>)
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	f7fd f9d6 	bl	80001e0 <__aeabi_dsub>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f7fd fe38 	bl	8000ab0 <__aeabi_d2f>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <SetTwoPointsForCalibrate+0x140>)
 8002e44:	6013      	str	r3, [r2, #0]
	Degrees = rotationAngleRadian * (180 / M_PI);
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <SetTwoPointsForCalibrate+0x140>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fb28 	bl	80004a0 <__aeabi_f2d>
 8002e50:	a315      	add	r3, pc, #84	; (adr r3, 8002ea8 <SetTwoPointsForCalibrate+0x138>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd fb7b 	bl	8000550 <__aeabi_dmul>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	f7fd fe25 	bl	8000ab0 <__aeabi_d2f>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <SetTwoPointsForCalibrate+0x144>)
 8002e6a:	6013      	str	r3, [r2, #0]

	if (trayNumber == 0)
 8002e6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d108      	bne.n	8002e86 <SetTwoPointsForCalibrate+0x116>
	{
		PickrotationAngleRadian = rotationAngleRadian;
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <SetTwoPointsForCalibrate+0x140>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0f      	ldr	r2, [pc, #60]	; (8002eb8 <SetTwoPointsForCalibrate+0x148>)
 8002e7a:	6013      	str	r3, [r2, #0]
		PickrotationAngleDegree = Degrees;
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <SetTwoPointsForCalibrate+0x144>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <SetTwoPointsForCalibrate+0x14c>)
 8002e82:	6013      	str	r3, [r2, #0]
	else if (trayNumber == 1)
	{
		PlacerotationAngleRadian = rotationAngleRadian;
		PlacerotationAngleDegree = Degrees;
	}
}
 8002e84:	e00b      	b.n	8002e9e <SetTwoPointsForCalibrate+0x12e>
	else if (trayNumber == 1)
 8002e86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d107      	bne.n	8002e9e <SetTwoPointsForCalibrate+0x12e>
		PlacerotationAngleRadian = rotationAngleRadian;
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <SetTwoPointsForCalibrate+0x140>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <SetTwoPointsForCalibrate+0x150>)
 8002e94:	6013      	str	r3, [r2, #0]
		PlacerotationAngleDegree = Degrees;
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <SetTwoPointsForCalibrate+0x144>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <SetTwoPointsForCalibrate+0x154>)
 8002e9c:	6013      	str	r3, [r2, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	1a63c1f8 	.word	0x1a63c1f8
 8002eac:	404ca5dc 	.word	0x404ca5dc
 8002eb0:	200003ac 	.word	0x200003ac
 8002eb4:	200003b0 	.word	0x200003b0
 8002eb8:	200009dc 	.word	0x200009dc
 8002ebc:	200009e0 	.word	0x200009e0
 8002ec0:	20000a3c 	.word	0x20000a3c
 8002ec4:	20000a40 	.word	0x20000a40
 8002ec8:	c3f16a8a 	.word	0xc3f16a8a
 8002ecc:	3fe63b4b 	.word	0x3fe63b4b

08002ed0 <HolePositionsCartesian>:

void HolePositionsCartesian(float32_t* bottomleft, float32_t rotationAngleRadian, float* holePositionsCartesian)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002edc:	6079      	str	r1, [r7, #4]
	if (GoalReadyFlag == 0)
 8002ede:	4b56      	ldr	r3, [pc, #344]	; (8003038 <HolePositionsCartesian+0x168>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 80a4 	bne.w	8003030 <HolePositionsCartesian+0x160>
	{
		float32_t rotationMatrix[4] =
		{
			arm_cos_f32(rotationAngleRadian),  //0
 8002ee8:	ed97 0a02 	vldr	s0, [r7, #8]
 8002eec:	f001 fbc2 	bl	8004674 <arm_cos_f32>
 8002ef0:	eef0 7a40 	vmov.f32	s15, s0
		float32_t rotationMatrix[4] =
 8002ef4:	edc7 7a04 	vstr	s15, [r7, #16]
			arm_sin_f32(rotationAngleRadian),  //1
 8002ef8:	ed97 0a02 	vldr	s0, [r7, #8]
 8002efc:	f001 fc40 	bl	8004780 <arm_sin_f32>
 8002f00:	eef0 7a40 	vmov.f32	s15, s0
		float32_t rotationMatrix[4] =
 8002f04:	edc7 7a05 	vstr	s15, [r7, #20]
			-arm_sin_f32(rotationAngleRadian), //2
 8002f08:	ed97 0a02 	vldr	s0, [r7, #8]
 8002f0c:	f001 fc38 	bl	8004780 <arm_sin_f32>
 8002f10:	eef0 7a40 	vmov.f32	s15, s0
 8002f14:	eef1 7a67 	vneg.f32	s15, s15
		float32_t rotationMatrix[4] =
 8002f18:	edc7 7a06 	vstr	s15, [r7, #24]
			arm_cos_f32(rotationAngleRadian)   //3
 8002f1c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002f20:	f001 fba8 	bl	8004674 <arm_cos_f32>
 8002f24:	eef0 7a40 	vmov.f32	s15, s0
		float32_t rotationMatrix[4] =
 8002f28:	edc7 7a07 	vstr	s15, [r7, #28]
		};

		static uint8_t i = 0;
		//rotation
		holePositionsCartesianrotation[i*2] = (holePositionsRelativetoBottomLeft[i*2] * rotationMatrix[0]) + (holePositionsRelativetoBottomLeft[i*2+1] * rotationMatrix[2]);
 8002f2c:	4b43      	ldr	r3, [pc, #268]	; (800303c <HolePositionsCartesian+0x16c>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4a43      	ldr	r2, [pc, #268]	; (8003040 <HolePositionsCartesian+0x170>)
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	ed93 7a00 	vldr	s14, [r3]
 8002f3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f44:	4b3d      	ldr	r3, [pc, #244]	; (800303c <HolePositionsCartesian+0x16c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	4a3c      	ldr	r2, [pc, #240]	; (8003040 <HolePositionsCartesian+0x170>)
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	edd3 6a00 	vldr	s13, [r3]
 8002f56:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <HolePositionsCartesian+0x16c>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f68:	4a36      	ldr	r2, [pc, #216]	; (8003044 <HolePositionsCartesian+0x174>)
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	edc3 7a00 	vstr	s15, [r3]
		holePositionsCartesianrotation[i*2+1] = (holePositionsRelativetoBottomLeft[i*2] * rotationMatrix[1]) + (holePositionsRelativetoBottomLeft[i*2+1] * rotationMatrix[3]);
 8002f72:	4b32      	ldr	r3, [pc, #200]	; (800303c <HolePositionsCartesian+0x16c>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4a31      	ldr	r2, [pc, #196]	; (8003040 <HolePositionsCartesian+0x170>)
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	ed93 7a00 	vldr	s14, [r3]
 8002f82:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f8a:	4b2c      	ldr	r3, [pc, #176]	; (800303c <HolePositionsCartesian+0x16c>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	3301      	adds	r3, #1
 8002f92:	4a2b      	ldr	r2, [pc, #172]	; (8003040 <HolePositionsCartesian+0x170>)
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	edd3 6a00 	vldr	s13, [r3]
 8002f9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <HolePositionsCartesian+0x16c>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	3301      	adds	r3, #1
 8002fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb0:	4a24      	ldr	r2, [pc, #144]	; (8003044 <HolePositionsCartesian+0x174>)
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	edc3 7a00 	vstr	s15, [r3]

		//translation
		*(holePositionsCartesian + (i*2)) = holePositionsCartesianrotation[i*2] + bottomleft[0];
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <HolePositionsCartesian+0x16c>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4a20      	ldr	r2, [pc, #128]	; (8003044 <HolePositionsCartesian+0x174>)
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	ed93 7a00 	vldr	s14, [r3]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	edd3 7a00 	vldr	s15, [r3]
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HolePositionsCartesian+0x16c>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fde:	edc3 7a00 	vstr	s15, [r3]
		*(holePositionsCartesian + (i*2 + 1)) = holePositionsCartesianrotation[i*2+1] + bottomleft[1];
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <HolePositionsCartesian+0x16c>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	3301      	adds	r3, #1
 8002fea:	4a16      	ldr	r2, [pc, #88]	; (8003044 <HolePositionsCartesian+0x174>)
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	ed93 7a00 	vldr	s14, [r3]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <HolePositionsCartesian+0x16c>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	3304      	adds	r3, #4
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300c:	edc3 7a00 	vstr	s15, [r3]

		i++;
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HolePositionsCartesian+0x16c>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	b2da      	uxtb	r2, r3
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <HolePositionsCartesian+0x16c>)
 800301a:	701a      	strb	r2, [r3, #0]
		if (i == 9)
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <HolePositionsCartesian+0x16c>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b09      	cmp	r3, #9
 8003022:	d105      	bne.n	8003030 <HolePositionsCartesian+0x160>
		{
			GoalReadyFlag = 1;
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <HolePositionsCartesian+0x168>)
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
			i = 0;
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <HolePositionsCartesian+0x16c>)
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003030:	bf00      	nop
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000a8c 	.word	0x20000a8c
 800303c:	200003b4 	.word	0x200003b4
 8003040:	20000210 	.word	0x20000210
 8003044:	20000364 	.word	0x20000364

08003048 <GetJoystickXYaxisValue>:

uint8_t JoyStickSwitch_last = 1;
uint64_t StartTime = 0;

void GetJoystickXYaxisValue(float* ptrx, float* ptry)
{
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
	JoyStickSwitch = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8003052:	2110      	movs	r1, #16
 8003054:	487a      	ldr	r0, [pc, #488]	; (8003240 <GetJoystickXYaxisValue+0x1f8>)
 8003056:	f002 ff3b 	bl	8005ed0 <HAL_GPIO_ReadPin>
 800305a:	4603      	mov	r3, r0
 800305c:	461a      	mov	r2, r3
 800305e:	4b79      	ldr	r3, [pc, #484]	; (8003244 <GetJoystickXYaxisValue+0x1fc>)
 8003060:	701a      	strb	r2, [r3, #0]

	static uint8_t i = 0;
	if(i % 2 == 0)
 8003062:	4b79      	ldr	r3, [pc, #484]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d12a      	bne.n	80030c6 <GetJoystickXYaxisValue+0x7e>
	{
		IN1[i/2] = adcRawData[i];
 8003070:	4b75      	ldr	r3, [pc, #468]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	4b75      	ldr	r3, [pc, #468]	; (800324c <GetJoystickXYaxisValue+0x204>)
 8003078:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800307c:	4b72      	ldr	r3, [pc, #456]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	b2db      	uxtb	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	4b72      	ldr	r3, [pc, #456]	; (8003250 <GetJoystickXYaxisValue+0x208>)
 8003088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		Y_axis += IN1[i/2];
 800308c:	4b6e      	ldr	r3, [pc, #440]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	4b6e      	ldr	r3, [pc, #440]	; (8003250 <GetJoystickXYaxisValue+0x208>)
 8003098:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800309c:	4b6d      	ldr	r3, [pc, #436]	; (8003254 <GetJoystickXYaxisValue+0x20c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4413      	add	r3, r2
 80030a2:	4a6c      	ldr	r2, [pc, #432]	; (8003254 <GetJoystickXYaxisValue+0x20c>)
 80030a4:	6013      	str	r3, [r2, #0]
		if(i == 18)
 80030a6:	4b68      	ldr	r3, [pc, #416]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b12      	cmp	r3, #18
 80030ac:	d143      	bne.n	8003136 <GetJoystickXYaxisValue+0xee>
		{
			joystickYaxis = Y_axis/10;
 80030ae:	4b69      	ldr	r3, [pc, #420]	; (8003254 <GetJoystickXYaxisValue+0x20c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a69      	ldr	r2, [pc, #420]	; (8003258 <GetJoystickXYaxisValue+0x210>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	08db      	lsrs	r3, r3, #3
 80030ba:	4a68      	ldr	r2, [pc, #416]	; (800325c <GetJoystickXYaxisValue+0x214>)
 80030bc:	6013      	str	r3, [r2, #0]
			Y_axis = 0;
 80030be:	4b65      	ldr	r3, [pc, #404]	; (8003254 <GetJoystickXYaxisValue+0x20c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e037      	b.n	8003136 <GetJoystickXYaxisValue+0xee>
		}
	}
	else if(i % 2 == 1)
 80030c6:	4b60      	ldr	r3, [pc, #384]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d030      	beq.n	8003136 <GetJoystickXYaxisValue+0xee>
	{
		IN0[(i-1)/2] = adcRawData[i];
 80030d4:	4b5c      	ldr	r3, [pc, #368]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	4b5c      	ldr	r3, [pc, #368]	; (800324c <GetJoystickXYaxisValue+0x204>)
 80030dc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80030e0:	4b59      	ldr	r3, [pc, #356]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	0fda      	lsrs	r2, r3, #31
 80030e8:	4413      	add	r3, r2
 80030ea:	105b      	asrs	r3, r3, #1
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b5c      	ldr	r3, [pc, #368]	; (8003260 <GetJoystickXYaxisValue+0x218>)
 80030f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		X_axis += IN0[(i-1)/2];
 80030f4:	4b54      	ldr	r3, [pc, #336]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	0fda      	lsrs	r2, r3, #31
 80030fc:	4413      	add	r3, r2
 80030fe:	105b      	asrs	r3, r3, #1
 8003100:	461a      	mov	r2, r3
 8003102:	4b57      	ldr	r3, [pc, #348]	; (8003260 <GetJoystickXYaxisValue+0x218>)
 8003104:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003108:	4b56      	ldr	r3, [pc, #344]	; (8003264 <GetJoystickXYaxisValue+0x21c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4413      	add	r3, r2
 800310e:	4a55      	ldr	r2, [pc, #340]	; (8003264 <GetJoystickXYaxisValue+0x21c>)
 8003110:	6013      	str	r3, [r2, #0]
		if(i == 19)
 8003112:	4b4d      	ldr	r3, [pc, #308]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b13      	cmp	r3, #19
 8003118:	d10d      	bne.n	8003136 <GetJoystickXYaxisValue+0xee>
		{
			joystickXaxis = X_axis/10;
 800311a:	4b52      	ldr	r3, [pc, #328]	; (8003264 <GetJoystickXYaxisValue+0x21c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a4e      	ldr	r2, [pc, #312]	; (8003258 <GetJoystickXYaxisValue+0x210>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	08db      	lsrs	r3, r3, #3
 8003126:	4a50      	ldr	r2, [pc, #320]	; (8003268 <GetJoystickXYaxisValue+0x220>)
 8003128:	6013      	str	r3, [r2, #0]
			X_axis = 0;
 800312a:	4b4e      	ldr	r3, [pc, #312]	; (8003264 <GetJoystickXYaxisValue+0x21c>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
			i = 0;
 8003130:	4b45      	ldr	r3, [pc, #276]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
		}
	}
	i = (i+1)%20;
 8003136:	4b44      	ldr	r3, [pc, #272]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	4b4b      	ldr	r3, [pc, #300]	; (800326c <GetJoystickXYaxisValue+0x224>)
 800313e:	fb83 1302 	smull	r1, r3, r3, r2
 8003142:	10d9      	asrs	r1, r3, #3
 8003144:	17d3      	asrs	r3, r2, #31
 8003146:	1ac9      	subs	r1, r1, r3
 8003148:	460b      	mov	r3, r1
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	1ad1      	subs	r1, r2, r3
 8003152:	b2ca      	uxtb	r2, r1
 8003154:	4b3c      	ldr	r3, [pc, #240]	; (8003248 <GetJoystickXYaxisValue+0x200>)
 8003156:	701a      	strb	r2, [r3, #0]

	if ((JoyStickSwitch == 0) && (SetHomeYFlag == 0) && (joystickYaxis < 2500) && (joystickYaxis > 1400)&& (joystickXaxis < 2500) && (joystickXaxis > 1400))
 8003158:	4b3a      	ldr	r3, [pc, #232]	; (8003244 <GetJoystickXYaxisValue+0x1fc>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d167      	bne.n	8003230 <GetJoystickXYaxisValue+0x1e8>
 8003160:	4b43      	ldr	r3, [pc, #268]	; (8003270 <GetJoystickXYaxisValue+0x228>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d163      	bne.n	8003230 <GetJoystickXYaxisValue+0x1e8>
 8003168:	4b3c      	ldr	r3, [pc, #240]	; (800325c <GetJoystickXYaxisValue+0x214>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003170:	4293      	cmp	r3, r2
 8003172:	d85d      	bhi.n	8003230 <GetJoystickXYaxisValue+0x1e8>
 8003174:	4b39      	ldr	r3, [pc, #228]	; (800325c <GetJoystickXYaxisValue+0x214>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800317c:	d958      	bls.n	8003230 <GetJoystickXYaxisValue+0x1e8>
 800317e:	4b3a      	ldr	r3, [pc, #232]	; (8003268 <GetJoystickXYaxisValue+0x220>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003186:	4293      	cmp	r3, r2
 8003188:	d852      	bhi.n	8003230 <GetJoystickXYaxisValue+0x1e8>
 800318a:	4b37      	ldr	r3, [pc, #220]	; (8003268 <GetJoystickXYaxisValue+0x220>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003192:	d94d      	bls.n	8003230 <GetJoystickXYaxisValue+0x1e8>
	{
		if (JoyStickSwitch_last == 1 && JoyStickSwitch == 0)
 8003194:	4b37      	ldr	r3, [pc, #220]	; (8003274 <GetJoystickXYaxisValue+0x22c>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d124      	bne.n	80031e6 <GetJoystickXYaxisValue+0x19e>
 800319c:	4b29      	ldr	r3, [pc, #164]	; (8003244 <GetJoystickXYaxisValue+0x1fc>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d120      	bne.n	80031e6 <GetJoystickXYaxisValue+0x19e>
		{
			StartTime = micros(&htim5);
 80031a4:	4834      	ldr	r0, [pc, #208]	; (8003278 <GetJoystickXYaxisValue+0x230>)
 80031a6:	f7fe fc33 	bl	8001a10 <micros>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4933      	ldr	r1, [pc, #204]	; (800327c <GetJoystickXYaxisValue+0x234>)
 80031b0:	e9c1 2300 	strd	r2, r3, [r1]
			// Keep encoder position xy
			*ptrx = registerFrame[68].U16/10.0; //encoderx
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <GetJoystickXYaxisValue+0x238>)
 80031b6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f95e 	bl	800047c <__aeabi_i2d>
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <GetJoystickXYaxisValue+0x23c>)
 80031c6:	f7fd faed 	bl	80007a4 <__aeabi_ddiv>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7fd fc6d 	bl	8000ab0 <__aeabi_d2f>
 80031d6:	4602      	mov	r2, r0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	601a      	str	r2, [r3, #0]
			*ptry = QEIData.position; //encodery25
 80031dc:	4b2a      	ldr	r3, [pc, #168]	; (8003288 <GetJoystickXYaxisValue+0x240>)
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e024      	b.n	8003230 <GetJoystickXYaxisValue+0x1e8>
		}
		else if (JoyStickSwitch_last == 0 && JoyStickSwitch == 0)
 80031e6:	4b23      	ldr	r3, [pc, #140]	; (8003274 <GetJoystickXYaxisValue+0x22c>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d120      	bne.n	8003230 <GetJoystickXYaxisValue+0x1e8>
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <GetJoystickXYaxisValue+0x1fc>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d11c      	bne.n	8003230 <GetJoystickXYaxisValue+0x1e8>
		{
			if ((micros(&htim5) - StartTime) >= 2000000)
 80031f6:	4820      	ldr	r0, [pc, #128]	; (8003278 <GetJoystickXYaxisValue+0x230>)
 80031f8:	f7fe fc0a 	bl	8001a10 <micros>
 80031fc:	4b1f      	ldr	r3, [pc, #124]	; (800327c <GetJoystickXYaxisValue+0x234>)
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	1a84      	subs	r4, r0, r2
 8003204:	eb61 0503 	sbc.w	r5, r1, r3
 8003208:	4b20      	ldr	r3, [pc, #128]	; (800328c <GetJoystickXYaxisValue+0x244>)
 800320a:	429c      	cmp	r4, r3
 800320c:	f175 0300 	sbcs.w	r3, r5, #0
 8003210:	d30e      	bcc.n	8003230 <GetJoystickXYaxisValue+0x1e8>
			{
				//set home x-axis
				registerFrame[64].U16 = 1;
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <GetJoystickXYaxisValue+0x238>)
 8003214:	2201      	movs	r2, #1
 8003216:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				//set home y-axis
				SetHomeYFlag = 1;
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <GetJoystickXYaxisValue+0x228>)
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
				StartTime = micros(&htim5);
 8003220:	4815      	ldr	r0, [pc, #84]	; (8003278 <GetJoystickXYaxisValue+0x230>)
 8003222:	f7fe fbf5 	bl	8001a10 <micros>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4914      	ldr	r1, [pc, #80]	; (800327c <GetJoystickXYaxisValue+0x234>)
 800322c:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
	}
	JoyStickSwitch_last = JoyStickSwitch;
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <GetJoystickXYaxisValue+0x1fc>)
 8003232:	781a      	ldrb	r2, [r3, #0]
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <GetJoystickXYaxisValue+0x22c>)
 8003236:	701a      	strb	r2, [r3, #0]
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bdb0      	pop	{r4, r5, r7, pc}
 8003240:	40020000 	.word	0x40020000
 8003244:	200009b8 	.word	0x200009b8
 8003248:	200003c0 	.word	0x200003c0
 800324c:	20000940 	.word	0x20000940
 8003250:	20000990 	.word	0x20000990
 8003254:	200009c0 	.word	0x200009c0
 8003258:	cccccccd 	.word	0xcccccccd
 800325c:	200009c8 	.word	0x200009c8
 8003260:	20000968 	.word	0x20000968
 8003264:	200009bc 	.word	0x200009bc
 8003268:	200009c4 	.word	0x200009c4
 800326c:	66666667 	.word	0x66666667
 8003270:	20000259 	.word	0x20000259
 8003274:	20000258 	.word	0x20000258
 8003278:	20000688 	.word	0x20000688
 800327c:	200003b8 	.word	0x200003b8
 8003280:	20000f68 	.word	0x20000f68
 8003284:	40240000 	.word	0x40240000
 8003288:	20000908 	.word	0x20000908
 800328c:	001e8480 	.word	0x001e8480

08003290 <JoyStickControlCartesian>:

void JoyStickControlCartesian()
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
	if (SetHomeYFlag == 0)
 8003294:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <JoyStickControlCartesian+0x78>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d132      	bne.n	8003302 <JoyStickControlCartesian+0x72>
	{
		//X-axis
		if(joystickYaxis > 2500) //Left
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <JoyStickControlCartesian+0x7c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d904      	bls.n	80032b2 <JoyStickControlCartesian+0x22>
		{registerFrame[64].U16 = 4;}
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <JoyStickControlCartesian+0x80>)
 80032aa:	2204      	movs	r2, #4
 80032ac:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80032b0:	e00d      	b.n	80032ce <JoyStickControlCartesian+0x3e>

		else if(joystickYaxis < 1400) //Right
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <JoyStickControlCartesian+0x7c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80032ba:	d204      	bcs.n	80032c6 <JoyStickControlCartesian+0x36>
		{registerFrame[64].U16 = 8;}
 80032bc:	4b14      	ldr	r3, [pc, #80]	; (8003310 <JoyStickControlCartesian+0x80>)
 80032be:	2208      	movs	r2, #8
 80032c0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80032c4:	e003      	b.n	80032ce <JoyStickControlCartesian+0x3e>

		else{registerFrame[64].U16 = 0;}
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <JoyStickControlCartesian+0x80>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		//Y-axis
		if(joystickXaxis < 1400) //Front
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <JoyStickControlCartesian+0x84>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80032d6:	d203      	bcs.n	80032e0 <JoyStickControlCartesian+0x50>
		{PulseWidthModulation = 3000;}
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <JoyStickControlCartesian+0x88>)
 80032da:	4a10      	ldr	r2, [pc, #64]	; (800331c <JoyStickControlCartesian+0x8c>)
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	e00d      	b.n	80032fc <JoyStickControlCartesian+0x6c>

		else if(joystickXaxis > 2500) //Back
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <JoyStickControlCartesian+0x84>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d903      	bls.n	80032f4 <JoyStickControlCartesian+0x64>
		{PulseWidthModulation = -3000;}
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <JoyStickControlCartesian+0x88>)
 80032ee:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <JoyStickControlCartesian+0x90>)
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e003      	b.n	80032fc <JoyStickControlCartesian+0x6c>

		else{PulseWidthModulation = 0;}
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <JoyStickControlCartesian+0x88>)
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

		MotorDrive(&htim1);
 80032fc:	4809      	ldr	r0, [pc, #36]	; (8003324 <JoyStickControlCartesian+0x94>)
 80032fe:	f7fe fd55 	bl	8001dac <MotorDrive>
	}
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000259 	.word	0x20000259
 800330c:	200009c8 	.word	0x200009c8
 8003310:	20000f68 	.word	0x20000f68
 8003314:	200009c4 	.word	0x200009c4
 8003318:	20000924 	.word	0x20000924
 800331c:	453b8000 	.word	0x453b8000
 8003320:	c53b8000 	.word	0xc53b8000
 8003324:	20000520 	.word	0x20000520

08003328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800332c:	f001 faaa 	bl	8004884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003330:	f000 f858 	bl	80033e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003334:	f000 fb44 	bl	80039c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003338:	f000 fb04 	bl	8003944 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800333c:	f000 fad6 	bl	80038ec <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8003340:	f000 fa3a 	bl	80037b8 <MX_TIM5_Init>
  MX_TIM1_Init();
 8003344:	f000 f944 	bl	80035d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003348:	f000 f9e2 	bl	8003710 <MX_TIM3_Init>
  MX_TIM11_Init();
 800334c:	f000 fa82 	bl	8003854 <MX_TIM11_Init>
  MX_ADC1_Init();
 8003350:	f000 f8b0 	bl	80034b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003354:	f000 f90e 	bl	8003574 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8003358:	4816      	ldr	r0, [pc, #88]	; (80033b4 <main+0x8c>)
 800335a:	f005 fa17 	bl	800878c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 800335e:	4816      	ldr	r0, [pc, #88]	; (80033b8 <main+0x90>)
 8003360:	f005 f9ba 	bl	80086d8 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003364:	213c      	movs	r1, #60	; 0x3c
 8003366:	4815      	ldr	r0, [pc, #84]	; (80033bc <main+0x94>)
 8003368:	f005 fd08 	bl	8008d7c <HAL_TIM_Encoder_Start>

  //eff_write(testMode_cmd);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800336c:	2100      	movs	r1, #0
 800336e:	4812      	ldr	r0, [pc, #72]	; (80033b8 <main+0x90>)
 8003370:	f005 fb3a 	bl	80089e8 <HAL_TIM_PWM_Start>

  Controller.Kp = 1100;
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <main+0x98>)
 8003376:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <main+0x9c>)
 8003378:	601a      	str	r2, [r3, #0]
  Controller.Ki = 9.25;
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <main+0x98>)
 800337c:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <main+0xa0>)
 800337e:	605a      	str	r2, [r3, #4]
  Controller.Kd = 0;
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <main+0x98>)
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	609a      	str	r2, [r3, #8]

  hmodbus.huart = &huart2;
 8003388:	4b10      	ldr	r3, [pc, #64]	; (80033cc <main+0xa4>)
 800338a:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <main+0xa8>)
 800338c:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <main+0xa4>)
 8003390:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <main+0xac>)
 8003392:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <main+0xa4>)
 8003396:	2215      	movs	r2, #21
 8003398:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =70;
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <main+0xa4>)
 800339c:	2246      	movs	r2, #70	; 0x46
 800339e:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80033a0:	490d      	ldr	r1, [pc, #52]	; (80033d8 <main+0xb0>)
 80033a2:	480a      	ldr	r0, [pc, #40]	; (80033cc <main+0xa4>)
 80033a4:	f7fe ff24 	bl	80021f0 <Modbus_init>

  //joy stick--------------------------
  HAL_ADC_Start_DMA(&hadc1, adcRawData, 20);
 80033a8:	2214      	movs	r2, #20
 80033aa:	490c      	ldr	r1, [pc, #48]	; (80033dc <main+0xb4>)
 80033ac:	480c      	ldr	r0, [pc, #48]	; (80033e0 <main+0xb8>)
 80033ae:	f001 fb1f 	bl	80049f0 <HAL_ADC_Start_DMA>
//  	PlaceTray9holes[17] = -300;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80033b2:	e7fe      	b.n	80033b2 <main+0x8a>
 80033b4:	20000688 	.word	0x20000688
 80033b8:	20000520 	.word	0x20000520
 80033bc:	200005d4 	.word	0x200005d4
 80033c0:	2000092c 	.word	0x2000092c
 80033c4:	44898000 	.word	0x44898000
 80033c8:	41140000 	.word	0x41140000
 80033cc:	20000a90 	.word	0x20000a90
 80033d0:	200007f0 	.word	0x200007f0
 80033d4:	2000073c 	.word	0x2000073c
 80033d8:	20000f68 	.word	0x20000f68
 80033dc:	20000940 	.word	0x20000940
 80033e0:	200003c4 	.word	0x200003c4

080033e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b094      	sub	sp, #80	; 0x50
 80033e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033ea:	f107 0320 	add.w	r3, r7, #32
 80033ee:	2230      	movs	r2, #48	; 0x30
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f008 f8d6 	bl	800b5a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <SystemClock_Config+0xc8>)
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	4a26      	ldr	r2, [pc, #152]	; (80034ac <SystemClock_Config+0xc8>)
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003416:	6413      	str	r3, [r2, #64]	; 0x40
 8003418:	4b24      	ldr	r3, [pc, #144]	; (80034ac <SystemClock_Config+0xc8>)
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003424:	2300      	movs	r3, #0
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <SystemClock_Config+0xcc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <SystemClock_Config+0xcc>)
 800342e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <SystemClock_Config+0xcc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003440:	2302      	movs	r3, #2
 8003442:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003444:	2301      	movs	r3, #1
 8003446:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003448:	2310      	movs	r3, #16
 800344a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800344c:	2302      	movs	r3, #2
 800344e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003450:	2300      	movs	r3, #0
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003454:	2308      	movs	r3, #8
 8003456:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003458:	2364      	movs	r3, #100	; 0x64
 800345a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800345c:	2302      	movs	r3, #2
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003460:	2304      	movs	r3, #4
 8003462:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003464:	f107 0320 	add.w	r3, r7, #32
 8003468:	4618      	mov	r0, r3
 800346a:	f004 fc41 	bl	8007cf0 <HAL_RCC_OscConfig>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003474:	f000 fd78 	bl	8003f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003478:	230f      	movs	r3, #15
 800347a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800347c:	2302      	movs	r3, #2
 800347e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003488:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	2103      	movs	r1, #3
 8003494:	4618      	mov	r0, r3
 8003496:	f004 fea3 	bl	80081e0 <HAL_RCC_ClockConfig>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80034a0:	f000 fd62 	bl	8003f68 <Error_Handler>
  }
}
 80034a4:	bf00      	nop
 80034a6:	3750      	adds	r7, #80	; 0x50
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40007000 	.word	0x40007000

080034b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
//#define break while(1){}
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80034ba:	463b      	mov	r3, r7
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80034c6:	4b28      	ldr	r3, [pc, #160]	; (8003568 <MX_ADC1_Init+0xb4>)
 80034c8:	4a28      	ldr	r2, [pc, #160]	; (800356c <MX_ADC1_Init+0xb8>)
 80034ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80034cc:	4b26      	ldr	r3, [pc, #152]	; (8003568 <MX_ADC1_Init+0xb4>)
 80034ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80034d4:	4b24      	ldr	r3, [pc, #144]	; (8003568 <MX_ADC1_Init+0xb4>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80034da:	4b23      	ldr	r3, [pc, #140]	; (8003568 <MX_ADC1_Init+0xb4>)
 80034dc:	2201      	movs	r2, #1
 80034de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80034e0:	4b21      	ldr	r3, [pc, #132]	; (8003568 <MX_ADC1_Init+0xb4>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <MX_ADC1_Init+0xb4>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <MX_ADC1_Init+0xb4>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034f4:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <MX_ADC1_Init+0xb4>)
 80034f6:	4a1e      	ldr	r2, [pc, #120]	; (8003570 <MX_ADC1_Init+0xbc>)
 80034f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <MX_ADC1_Init+0xb4>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <MX_ADC1_Init+0xb4>)
 8003502:	2202      	movs	r2, #2
 8003504:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003506:	4b18      	ldr	r3, [pc, #96]	; (8003568 <MX_ADC1_Init+0xb4>)
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800350e:	4b16      	ldr	r3, [pc, #88]	; (8003568 <MX_ADC1_Init+0xb4>)
 8003510:	2201      	movs	r2, #1
 8003512:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003514:	4814      	ldr	r0, [pc, #80]	; (8003568 <MX_ADC1_Init+0xb4>)
 8003516:	f001 fa27 	bl	8004968 <HAL_ADC_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003520:	f000 fd22 	bl	8003f68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003524:	2300      	movs	r3, #0
 8003526:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003528:	2301      	movs	r3, #1
 800352a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800352c:	2303      	movs	r3, #3
 800352e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003530:	463b      	mov	r3, r7
 8003532:	4619      	mov	r1, r3
 8003534:	480c      	ldr	r0, [pc, #48]	; (8003568 <MX_ADC1_Init+0xb4>)
 8003536:	f001 fb69 	bl	8004c0c <HAL_ADC_ConfigChannel>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003540:	f000 fd12 	bl	8003f68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003544:	2301      	movs	r3, #1
 8003546:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003548:	2302      	movs	r3, #2
 800354a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800354c:	463b      	mov	r3, r7
 800354e:	4619      	mov	r1, r3
 8003550:	4805      	ldr	r0, [pc, #20]	; (8003568 <MX_ADC1_Init+0xb4>)
 8003552:	f001 fb5b 	bl	8004c0c <HAL_ADC_ConfigChannel>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800355c:	f000 fd04 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200003c4 	.word	0x200003c4
 800356c:	40012000 	.word	0x40012000
 8003570:	0f000001 	.word	0x0f000001

08003574 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <MX_I2C1_Init+0x50>)
 800357a:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <MX_I2C1_Init+0x54>)
 800357c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <MX_I2C1_Init+0x50>)
 8003580:	4a12      	ldr	r2, [pc, #72]	; (80035cc <MX_I2C1_Init+0x58>)
 8003582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <MX_I2C1_Init+0x50>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <MX_I2C1_Init+0x50>)
 800358c:	2200      	movs	r2, #0
 800358e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <MX_I2C1_Init+0x50>)
 8003592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003596:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <MX_I2C1_Init+0x50>)
 800359a:	2200      	movs	r2, #0
 800359c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <MX_I2C1_Init+0x50>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035a4:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <MX_I2C1_Init+0x50>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <MX_I2C1_Init+0x50>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035b0:	4804      	ldr	r0, [pc, #16]	; (80035c4 <MX_I2C1_Init+0x50>)
 80035b2:	f002 fcd7 	bl	8005f64 <HAL_I2C_Init>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80035bc:	f000 fcd4 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	2000046c 	.word	0x2000046c
 80035c8:	40005400 	.word	0x40005400
 80035cc:	000186a0 	.word	0x000186a0

080035d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b096      	sub	sp, #88	; 0x58
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	605a      	str	r2, [r3, #4]
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	60da      	str	r2, [r3, #12]
 80035fc:	611a      	str	r2, [r3, #16]
 80035fe:	615a      	str	r2, [r3, #20]
 8003600:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003602:	1d3b      	adds	r3, r7, #4
 8003604:	2220      	movs	r2, #32
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f007 ffcb 	bl	800b5a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800360e:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <MX_TIM1_Init+0x138>)
 8003610:	4a3e      	ldr	r2, [pc, #248]	; (800370c <MX_TIM1_Init+0x13c>)
 8003612:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003614:	4b3c      	ldr	r3, [pc, #240]	; (8003708 <MX_TIM1_Init+0x138>)
 8003616:	2200      	movs	r2, #0
 8003618:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361a:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <MX_TIM1_Init+0x138>)
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8003620:	4b39      	ldr	r3, [pc, #228]	; (8003708 <MX_TIM1_Init+0x138>)
 8003622:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003626:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003628:	4b37      	ldr	r3, [pc, #220]	; (8003708 <MX_TIM1_Init+0x138>)
 800362a:	2200      	movs	r2, #0
 800362c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800362e:	4b36      	ldr	r3, [pc, #216]	; (8003708 <MX_TIM1_Init+0x138>)
 8003630:	2200      	movs	r2, #0
 8003632:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003634:	4b34      	ldr	r3, [pc, #208]	; (8003708 <MX_TIM1_Init+0x138>)
 8003636:	2200      	movs	r2, #0
 8003638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800363a:	4833      	ldr	r0, [pc, #204]	; (8003708 <MX_TIM1_Init+0x138>)
 800363c:	f004 fff0 	bl	8008620 <HAL_TIM_Base_Init>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003646:	f000 fc8f 	bl	8003f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800364a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800364e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003650:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003654:	4619      	mov	r1, r3
 8003656:	482c      	ldr	r0, [pc, #176]	; (8003708 <MX_TIM1_Init+0x138>)
 8003658:	f005 fe64 	bl	8009324 <HAL_TIM_ConfigClockSource>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003662:	f000 fc81 	bl	8003f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003666:	4828      	ldr	r0, [pc, #160]	; (8003708 <MX_TIM1_Init+0x138>)
 8003668:	f005 f958 	bl	800891c <HAL_TIM_PWM_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003672:	f000 fc79 	bl	8003f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800367e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003682:	4619      	mov	r1, r3
 8003684:	4820      	ldr	r0, [pc, #128]	; (8003708 <MX_TIM1_Init+0x138>)
 8003686:	f006 fbdd 	bl	8009e44 <HAL_TIMEx_MasterConfigSynchronization>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003690:	f000 fc6a 	bl	8003f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003694:	2360      	movs	r3, #96	; 0x60
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800369c:	2300      	movs	r3, #0
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036a0:	2300      	movs	r3, #0
 80036a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036a8:	2300      	movs	r3, #0
 80036aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036ac:	2300      	movs	r3, #0
 80036ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b4:	2200      	movs	r2, #0
 80036b6:	4619      	mov	r1, r3
 80036b8:	4813      	ldr	r0, [pc, #76]	; (8003708 <MX_TIM1_Init+0x138>)
 80036ba:	f005 fd71 	bl	80091a0 <HAL_TIM_PWM_ConfigChannel>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80036c4:	f000 fc50 	bl	8003f68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	4619      	mov	r1, r3
 80036ea:	4807      	ldr	r0, [pc, #28]	; (8003708 <MX_TIM1_Init+0x138>)
 80036ec:	f006 fc18 	bl	8009f20 <HAL_TIMEx_ConfigBreakDeadTime>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80036f6:	f000 fc37 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036fa:	4803      	ldr	r0, [pc, #12]	; (8003708 <MX_TIM1_Init+0x138>)
 80036fc:	f000 fe18 	bl	8004330 <HAL_TIM_MspPostInit>

}
 8003700:	bf00      	nop
 8003702:	3758      	adds	r7, #88	; 0x58
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000520 	.word	0x20000520
 800370c:	40010000 	.word	0x40010000

08003710 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08c      	sub	sp, #48	; 0x30
 8003714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003716:	f107 030c 	add.w	r3, r7, #12
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f007 ff40 	bl	800b5a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800372c:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <MX_TIM3_Init+0xa0>)
 800372e:	4a21      	ldr	r2, [pc, #132]	; (80037b4 <MX_TIM3_Init+0xa4>)
 8003730:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003732:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <MX_TIM3_Init+0xa0>)
 8003734:	2200      	movs	r2, #0
 8003736:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <MX_TIM3_Init+0xa0>)
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD - 1;
 800373e:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <MX_TIM3_Init+0xa0>)
 8003740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003744:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <MX_TIM3_Init+0xa0>)
 8003748:	2200      	movs	r2, #0
 800374a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800374c:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <MX_TIM3_Init+0xa0>)
 800374e:	2200      	movs	r2, #0
 8003750:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003752:	2303      	movs	r3, #3
 8003754:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800375a:	2301      	movs	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003766:	2300      	movs	r3, #0
 8003768:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800376a:	2301      	movs	r3, #1
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800376e:	2300      	movs	r3, #0
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003776:	f107 030c 	add.w	r3, r7, #12
 800377a:	4619      	mov	r1, r3
 800377c:	480c      	ldr	r0, [pc, #48]	; (80037b0 <MX_TIM3_Init+0xa0>)
 800377e:	f005 fa49 	bl	8008c14 <HAL_TIM_Encoder_Init>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003788:	f000 fbee 	bl	8003f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800378c:	2300      	movs	r3, #0
 800378e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003790:	2300      	movs	r3, #0
 8003792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003794:	1d3b      	adds	r3, r7, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4805      	ldr	r0, [pc, #20]	; (80037b0 <MX_TIM3_Init+0xa0>)
 800379a:	f006 fb53 	bl	8009e44 <HAL_TIMEx_MasterConfigSynchronization>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80037a4:	f000 fbe0 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037a8:	bf00      	nop
 80037aa:	3730      	adds	r7, #48	; 0x30
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	200005d4 	.word	0x200005d4
 80037b4:	40000400 	.word	0x40000400

080037b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037be:	f107 0308 	add.w	r3, r7, #8
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037cc:	463b      	mov	r3, r7
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80037d4:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <MX_TIM5_Init+0x90>)
 80037d6:	4a1d      	ldr	r2, [pc, #116]	; (800384c <MX_TIM5_Init+0x94>)
 80037d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <MX_TIM5_Init+0x90>)
 80037dc:	2200      	movs	r2, #0
 80037de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <MX_TIM5_Init+0x90>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 80037e6:	4b18      	ldr	r3, [pc, #96]	; (8003848 <MX_TIM5_Init+0x90>)
 80037e8:	4a19      	ldr	r2, [pc, #100]	; (8003850 <MX_TIM5_Init+0x98>)
 80037ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ec:	4b16      	ldr	r3, [pc, #88]	; (8003848 <MX_TIM5_Init+0x90>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <MX_TIM5_Init+0x90>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80037f8:	4813      	ldr	r0, [pc, #76]	; (8003848 <MX_TIM5_Init+0x90>)
 80037fa:	f004 ff11 	bl	8008620 <HAL_TIM_Base_Init>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8003804:	f000 fbb0 	bl	8003f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800380c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800380e:	f107 0308 	add.w	r3, r7, #8
 8003812:	4619      	mov	r1, r3
 8003814:	480c      	ldr	r0, [pc, #48]	; (8003848 <MX_TIM5_Init+0x90>)
 8003816:	f005 fd85 	bl	8009324 <HAL_TIM_ConfigClockSource>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8003820:	f000 fba2 	bl	8003f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003824:	2300      	movs	r3, #0
 8003826:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003828:	2300      	movs	r3, #0
 800382a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800382c:	463b      	mov	r3, r7
 800382e:	4619      	mov	r1, r3
 8003830:	4805      	ldr	r0, [pc, #20]	; (8003848 <MX_TIM5_Init+0x90>)
 8003832:	f006 fb07 	bl	8009e44 <HAL_TIMEx_MasterConfigSynchronization>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 800383c:	f000 fb94 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003840:	bf00      	nop
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000688 	.word	0x20000688
 800384c:	40000c00 	.word	0x40000c00
 8003850:	0001869f 	.word	0x0001869f

08003854 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800385a:	1d3b      	adds	r3, r7, #4
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	611a      	str	r2, [r3, #16]
 8003868:	615a      	str	r2, [r3, #20]
 800386a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800386c:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <MX_TIM11_Init+0x90>)
 800386e:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <MX_TIM11_Init+0x94>)
 8003870:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003872:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <MX_TIM11_Init+0x90>)
 8003874:	2263      	movs	r2, #99	; 0x63
 8003876:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003878:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <MX_TIM11_Init+0x90>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 800387e:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <MX_TIM11_Init+0x90>)
 8003880:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8003884:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003886:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <MX_TIM11_Init+0x90>)
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800388c:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <MX_TIM11_Init+0x90>)
 800388e:	2200      	movs	r2, #0
 8003890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003892:	4814      	ldr	r0, [pc, #80]	; (80038e4 <MX_TIM11_Init+0x90>)
 8003894:	f004 fec4 	bl	8008620 <HAL_TIM_Base_Init>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800389e:	f000 fb63 	bl	8003f68 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80038a2:	4810      	ldr	r0, [pc, #64]	; (80038e4 <MX_TIM11_Init+0x90>)
 80038a4:	f004 ffd4 	bl	8008850 <HAL_TIM_OC_Init>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80038ae:	f000 fb5b 	bl	8003f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80038b2:	2310      	movs	r3, #16
 80038b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 80038b6:	f240 5399 	movw	r3, #1433	; 0x599
 80038ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038c4:	1d3b      	adds	r3, r7, #4
 80038c6:	2200      	movs	r2, #0
 80038c8:	4619      	mov	r1, r3
 80038ca:	4806      	ldr	r0, [pc, #24]	; (80038e4 <MX_TIM11_Init+0x90>)
 80038cc:	f005 fc0c 	bl	80090e8 <HAL_TIM_OC_ConfigChannel>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 80038d6:	f000 fb47 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80038da:	bf00      	nop
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2000073c 	.word	0x2000073c
 80038e8:	40014800 	.word	0x40014800

080038ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <MX_USART2_UART_Init+0x50>)
 80038f2:	4a13      	ldr	r2, [pc, #76]	; (8003940 <MX_USART2_UART_Init+0x54>)
 80038f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80038f6:	4b11      	ldr	r3, [pc, #68]	; (800393c <MX_USART2_UART_Init+0x50>)
 80038f8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80038fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <MX_USART2_UART_Init+0x50>)
 8003900:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003904:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <MX_USART2_UART_Init+0x50>)
 8003908:	2200      	movs	r2, #0
 800390a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <MX_USART2_UART_Init+0x50>)
 800390e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <MX_USART2_UART_Init+0x50>)
 8003916:	220c      	movs	r2, #12
 8003918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <MX_USART2_UART_Init+0x50>)
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <MX_USART2_UART_Init+0x50>)
 8003922:	2200      	movs	r2, #0
 8003924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003926:	4805      	ldr	r0, [pc, #20]	; (800393c <MX_USART2_UART_Init+0x50>)
 8003928:	f006 fb6a 	bl	800a000 <HAL_UART_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8003932:	f000 fb19 	bl	8003f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200007f0 	.word	0x200007f0
 8003940:	40004400 	.word	0x40004400

08003944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <MX_DMA_Init+0x78>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a1a      	ldr	r2, [pc, #104]	; (80039bc <MX_DMA_Init+0x78>)
 8003954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <MX_DMA_Init+0x78>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <MX_DMA_Init+0x78>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4a13      	ldr	r2, [pc, #76]	; (80039bc <MX_DMA_Init+0x78>)
 8003970:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <MX_DMA_Init+0x78>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003982:	2200      	movs	r2, #0
 8003984:	2100      	movs	r1, #0
 8003986:	200b      	movs	r0, #11
 8003988:	f001 fccb 	bl	8005322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800398c:	200b      	movs	r0, #11
 800398e:	f001 fce4 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003992:	2200      	movs	r2, #0
 8003994:	2100      	movs	r1, #0
 8003996:	2011      	movs	r0, #17
 8003998:	f001 fcc3 	bl	8005322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800399c:	2011      	movs	r0, #17
 800399e:	f001 fcdc 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2100      	movs	r1, #0
 80039a6:	2038      	movs	r0, #56	; 0x38
 80039a8:	f001 fcbb 	bl	8005322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80039ac:	2038      	movs	r0, #56	; 0x38
 80039ae:	f001 fcd4 	bl	800535a <HAL_NVIC_EnableIRQ>

}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800

080039c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c6:	f107 0314 	add.w	r3, r7, #20
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	609a      	str	r2, [r3, #8]
 80039d2:	60da      	str	r2, [r3, #12]
 80039d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <MX_GPIO_Init+0x1a8>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4a62      	ldr	r2, [pc, #392]	; (8003b68 <MX_GPIO_Init+0x1a8>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	6313      	str	r3, [r2, #48]	; 0x30
 80039e6:	4b60      	ldr	r3, [pc, #384]	; (8003b68 <MX_GPIO_Init+0x1a8>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	4b5c      	ldr	r3, [pc, #368]	; (8003b68 <MX_GPIO_Init+0x1a8>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a5b      	ldr	r2, [pc, #364]	; (8003b68 <MX_GPIO_Init+0x1a8>)
 80039fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	4b59      	ldr	r3, [pc, #356]	; (8003b68 <MX_GPIO_Init+0x1a8>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	4b55      	ldr	r3, [pc, #340]	; (8003b68 <MX_GPIO_Init+0x1a8>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4a54      	ldr	r2, [pc, #336]	; (8003b68 <MX_GPIO_Init+0x1a8>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1e:	4b52      	ldr	r3, [pc, #328]	; (8003b68 <MX_GPIO_Init+0x1a8>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	4b4e      	ldr	r3, [pc, #312]	; (8003b68 <MX_GPIO_Init+0x1a8>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	4a4d      	ldr	r2, [pc, #308]	; (8003b68 <MX_GPIO_Init+0x1a8>)
 8003a34:	f043 0302 	orr.w	r3, r3, #2
 8003a38:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3a:	4b4b      	ldr	r3, [pc, #300]	; (8003b68 <MX_GPIO_Init+0x1a8>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	607b      	str	r3, [r7, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8003a46:	2200      	movs	r2, #0
 8003a48:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8003a4c:	4847      	ldr	r0, [pc, #284]	; (8003b6c <MX_GPIO_Init+0x1ac>)
 8003a4e:	f002 fa57 	bl	8005f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003a52:	2200      	movs	r2, #0
 8003a54:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003a58:	4845      	ldr	r0, [pc, #276]	; (8003b70 <MX_GPIO_Init+0x1b0>)
 8003a5a:	f002 fa51 	bl	8005f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a6e:	f107 0314 	add.w	r3, r7, #20
 8003a72:	4619      	mov	r1, r3
 8003a74:	483f      	ldr	r0, [pc, #252]	; (8003b74 <MX_GPIO_Init+0x1b4>)
 8003a76:	f002 f8a7 	bl	8005bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a7a:	2310      	movs	r3, #16
 8003a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a86:	f107 0314 	add.w	r3, r7, #20
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4837      	ldr	r0, [pc, #220]	; (8003b6c <MX_GPIO_Init+0x1ac>)
 8003a8e:	f002 f89b 	bl	8005bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 8003a92:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8003a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4830      	ldr	r0, [pc, #192]	; (8003b6c <MX_GPIO_Init+0x1ac>)
 8003aac:	f002 f88c 	bl	8005bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003ab0:	2306      	movs	r3, #6
 8003ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ab4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003abe:	f107 0314 	add.w	r3, r7, #20
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	482a      	ldr	r0, [pc, #168]	; (8003b70 <MX_GPIO_Init+0x1b0>)
 8003ac6:	f002 f87f 	bl	8005bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003ad0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4823      	ldr	r0, [pc, #140]	; (8003b70 <MX_GPIO_Init+0x1b0>)
 8003ae2:	f002 f871 	bl	8005bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003ae6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aec:	2301      	movs	r3, #1
 8003aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af4:	2300      	movs	r3, #0
 8003af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af8:	f107 0314 	add.w	r3, r7, #20
 8003afc:	4619      	mov	r1, r3
 8003afe:	481c      	ldr	r0, [pc, #112]	; (8003b70 <MX_GPIO_Init+0x1b0>)
 8003b00:	f002 f862 	bl	8005bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b10:	2301      	movs	r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b14:	f107 0314 	add.w	r3, r7, #20
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4814      	ldr	r0, [pc, #80]	; (8003b6c <MX_GPIO_Init+0x1ac>)
 8003b1c:	f002 f854 	bl	8005bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003b20:	2200      	movs	r2, #0
 8003b22:	2100      	movs	r1, #0
 8003b24:	2007      	movs	r0, #7
 8003b26:	f001 fbfc 	bl	8005322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003b2a:	2007      	movs	r0, #7
 8003b2c:	f001 fc15 	bl	800535a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003b30:	2200      	movs	r2, #0
 8003b32:	2100      	movs	r1, #0
 8003b34:	2008      	movs	r0, #8
 8003b36:	f001 fbf4 	bl	8005322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003b3a:	2008      	movs	r0, #8
 8003b3c:	f001 fc0d 	bl	800535a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003b40:	2200      	movs	r2, #0
 8003b42:	2100      	movs	r1, #0
 8003b44:	2017      	movs	r0, #23
 8003b46:	f001 fbec 	bl	8005322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b4a:	2017      	movs	r0, #23
 8003b4c:	f001 fc05 	bl	800535a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003b50:	2200      	movs	r2, #0
 8003b52:	2100      	movs	r1, #0
 8003b54:	2028      	movs	r0, #40	; 0x28
 8003b56:	f001 fbe4 	bl	8005322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b5a:	2028      	movs	r0, #40	; 0x28
 8003b5c:	f001 fbfd 	bl	800535a <HAL_NVIC_EnableIRQ>

}
 8003b60:	bf00      	nop
 8003b62:	3728      	adds	r7, #40	; 0x28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40020000 	.word	0x40020000
 8003b70:	40020400 	.word	0x40020400
 8003b74:	40020800 	.word	0x40020800

08003b78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b5b0      	push	{r4, r5, r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a45      	ldr	r2, [pc, #276]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	f040 8083 	bne.w	8003c90 <HAL_TIM_PeriodElapsedCallback+0x118>
	{
		_micros += 1000;
 8003b8a:	4b44      	ldr	r3, [pc, #272]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8003b94:	f143 0500 	adc.w	r5, r3, #0
 8003b98:	4b40      	ldr	r3, [pc, #256]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003b9a:	e9c3 4500 	strd	r4, r5, [r3]
		QEIEncoderPositionVelocity_Update(&htim3, &htim5);
 8003b9e:	493e      	ldr	r1, [pc, #248]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003ba0:	483f      	ldr	r0, [pc, #252]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003ba2:	f7fd ff6d 	bl	8001a80 <QEIEncoderPositionVelocity_Update>

		check_pe();
 8003ba6:	f7fe f8c3 	bl	8001d30 <check_pe>
		SetHome(&htim3, &htim1);
 8003baa:	493e      	ldr	r1, [pc, #248]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003bac:	483c      	ldr	r0, [pc, #240]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003bae:	f7fe f98b 	bl	8001ec8 <SetHome>

		if (EndEffectorSoftResetFlag)
 8003bb2:	4b3d      	ldr	r3, [pc, #244]	; (8003ca8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			eff_write(softReset_cmd);
 8003bba:	483c      	ldr	r0, [pc, #240]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003bbc:	f7fe f8e6 	bl	8001d8c <eff_write>
			EndEffectorSoftResetFlag = 0;
 8003bc0:	4b39      	ldr	r3, [pc, #228]	; (8003ca8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
		}

		switch (registerFrame[1].U16)
 8003bc6:	4b3a      	ldr	r3, [pc, #232]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003bc8:	885b      	ldrh	r3, [r3, #2]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	2b0f      	cmp	r3, #15
 8003bce:	d837      	bhi.n	8003c40 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8003bd0:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd6:	bf00      	nop
 8003bd8:	08003c19 	.word	0x08003c19
 8003bdc:	08003c21 	.word	0x08003c21
 8003be0:	08003c41 	.word	0x08003c41
 8003be4:	08003c29 	.word	0x08003c29
 8003be8:	08003c41 	.word	0x08003c41
 8003bec:	08003c41 	.word	0x08003c41
 8003bf0:	08003c41 	.word	0x08003c41
 8003bf4:	08003c31 	.word	0x08003c31
 8003bf8:	08003c41 	.word	0x08003c41
 8003bfc:	08003c41 	.word	0x08003c41
 8003c00:	08003c41 	.word	0x08003c41
 8003c04:	08003c41 	.word	0x08003c41
 8003c08:	08003c41 	.word	0x08003c41
 8003c0c:	08003c41 	.word	0x08003c41
 8003c10:	08003c41 	.word	0x08003c41
 8003c14:	08003c39 	.word	0x08003c39
		{
		case 0b00001:
			SetPickTrayFlag = 1;
 8003c18:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	701a      	strb	r2, [r3, #0]
		break;
 8003c1e:	e00f      	b.n	8003c40 <HAL_TIM_PeriodElapsedCallback+0xc8>
		case 0b00010:
			SetPlaceTrayFlag = 1;
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
		break;
 8003c26:	e00b      	b.n	8003c40 <HAL_TIM_PeriodElapsedCallback+0xc8>
		case 0b00100:
			SetHomeFlag = 1;
 8003c28:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
		break;
 8003c2e:	e007      	b.n	8003c40 <HAL_TIM_PeriodElapsedCallback+0xc8>
		case 0b01000:
			RunTrayFlag = 1;
 8003c30:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
		break;
 8003c36:	e003      	b.n	8003c40 <HAL_TIM_PeriodElapsedCallback+0xc8>
		case 0b10000:
			RunPointFlag = 1;
 8003c38:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
		break;
 8003c3e:	bf00      	nop
		}

		if (emer_pushed)
 8003c40:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <HAL_TIM_PeriodElapsedCallback+0xe4>
		{
			BaseSystem_SetPickTray();
 8003c48:	f7fd fafa 	bl	8001240 <BaseSystem_SetPickTray>
			BaseSystem_SetPlaceTray();
 8003c4c:	f7fd fc28 	bl	80014a0 <BaseSystem_SetPlaceTray>
			BaseSystem_SetHome();
 8003c50:	f7fd fa4c 	bl	80010ec <BaseSystem_SetHome>
			BaseSystem_RuntrayMode();
 8003c54:	f7fd fd54 	bl	8001700 <BaseSystem_RuntrayMode>
			BaseSystem_RunPointMode();
 8003c58:	f7fd fa86 	bl	8001168 <BaseSystem_RunPointMode>
		}

		static uint8_t i = 0;
		if (i == 0)
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			registerFrame[0].U16 = 0b0101100101100001; //Ya 22881
 8003c64:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003c66:	f645 1261 	movw	r2, #22881	; 0x5961
 8003c6a:	801a      	strh	r2, [r3, #0]
//			eff_st();
			Modbus_Protocal_Worker();
 8003c6c:	f7fe fb4c 	bl	8002308 <Modbus_Protocal_Worker>
		}
		i = (i + 1) % 200;
 8003c70:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003c78:	fb82 1203 	smull	r1, r2, r2, r3
 8003c7c:	1191      	asrs	r1, r2, #6
 8003c7e:	17da      	asrs	r2, r3, #31
 8003c80:	1a8a      	subs	r2, r1, r2
 8003c82:	21c8      	movs	r1, #200	; 0xc8
 8003c84:	fb01 f202 	mul.w	r2, r1, r2
 8003c88:	1a9a      	subs	r2, r3, r2
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003c8e:	701a      	strb	r2, [r3, #0]
	}
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bdb0      	pop	{r4, r5, r7, pc}
 8003c98:	20000688 	.word	0x20000688
 8003c9c:	20000900 	.word	0x20000900
 8003ca0:	200005d4 	.word	0x200005d4
 8003ca4:	20000520 	.word	0x20000520
 8003ca8:	20000280 	.word	0x20000280
 8003cac:	2000025c 	.word	0x2000025c
 8003cb0:	20000f68 	.word	0x20000f68
 8003cb4:	20000ff4 	.word	0x20000ff4
 8003cb8:	20000ff5 	.word	0x20000ff5
 8003cbc:	20000ff6 	.word	0x20000ff6
 8003cc0:	20000ff7 	.word	0x20000ff7
 8003cc4:	20000ff8 	.word	0x20000ff8
 8003cc8:	20000281 	.word	0x20000281
 8003ccc:	20000ff9 	.word	0x20000ff9
 8003cd0:	51eb851f 	.word	0x51eb851f
 8003cd4:	00000000 	.word	0x00000000

08003cd8 <ControllerState>:

void ControllerState()
{
 8003cd8:	b5b0      	push	{r4, r5, r7, lr}
 8003cda:	af00      	add	r7, sp, #0
	static enum {Idle, Follow} state = Idle;

	if (SetHomeYFlag == 0)
 8003cdc:	4b8e      	ldr	r3, [pc, #568]	; (8003f18 <ControllerState+0x240>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f040 810e 	bne.w	8003f02 <ControllerState+0x22a>
	{
		switch(state)
 8003ce6:	4b8d      	ldr	r3, [pc, #564]	; (8003f1c <ControllerState+0x244>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <ControllerState+0x1c>
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d045      	beq.n	8003d7e <ControllerState+0xa6>
 8003cf2:	e102      	b.n	8003efa <ControllerState+0x222>
		{
		case Idle:
			ControllerFinishedFollowFlag = 1;
 8003cf4:	4b8a      	ldr	r3, [pc, #552]	; (8003f20 <ControllerState+0x248>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
			PulseWidthModulation = 0;
 8003cfa:	4b8a      	ldr	r3, [pc, #552]	; (8003f24 <ControllerState+0x24c>)
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
			MotorDrive(&htim1);
 8003d02:	4889      	ldr	r0, [pc, #548]	; (8003f28 <ControllerState+0x250>)
 8003d04:	f7fe f852 	bl	8001dac <MotorDrive>
			Pi = QEIData.position;
 8003d08:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <ControllerState+0x254>)
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	4a88      	ldr	r2, [pc, #544]	; (8003f30 <ControllerState+0x258>)
 8003d0e:	6013      	str	r3, [r2, #0]

			if(Pf != Pf_last)
 8003d10:	4b88      	ldr	r3, [pc, #544]	; (8003f34 <ControllerState+0x25c>)
 8003d12:	ed93 7a00 	vldr	s14, [r3]
 8003d16:	4b88      	ldr	r3, [pc, #544]	; (8003f38 <ControllerState+0x260>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d24:	f000 80e6 	beq.w	8003ef4 <ControllerState+0x21c>
			{
				t_traj = 0;
 8003d28:	4984      	ldr	r1, [pc, #528]	; (8003f3c <ControllerState+0x264>)
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	e9c1 2300 	strd	r2, r3, [r1]
				SteadyStateFlag = 0;
 8003d36:	4b82      	ldr	r3, [pc, #520]	; (8003f40 <ControllerState+0x268>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
				QuinticTraj_PreCal(Pi, Pf, &traj);
 8003d3c:	4b7c      	ldr	r3, [pc, #496]	; (8003f30 <ControllerState+0x258>)
 8003d3e:	edd3 7a00 	vldr	s15, [r3]
 8003d42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d46:	ee17 3a90 	vmov	r3, s15
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	4a79      	ldr	r2, [pc, #484]	; (8003f34 <ControllerState+0x25c>)
 8003d4e:	edd2 7a00 	vldr	s15, [r2]
 8003d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d56:	ee17 2a90 	vmov	r2, s15
 8003d5a:	b211      	sxth	r1, r2
 8003d5c:	4a79      	ldr	r2, [pc, #484]	; (8003f44 <ControllerState+0x26c>)
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fd4a 	bl	80027f8 <QuinticTraj_PreCal>
				ControllerFinishedFollowFlag = 0;
 8003d64:	4b6e      	ldr	r3, [pc, #440]	; (8003f20 <ControllerState+0x248>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
				state = Follow;
 8003d6a:	4b6c      	ldr	r3, [pc, #432]	; (8003f1c <ControllerState+0x244>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8003d70:	2201      	movs	r2, #1
 8003d72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d76:	4874      	ldr	r0, [pc, #464]	; (8003f48 <ControllerState+0x270>)
 8003d78:	f002 f8c2 	bl	8005f00 <HAL_GPIO_WritePin>
			}
		break;
 8003d7c:	e0ba      	b.n	8003ef4 <ControllerState+0x21c>

		case Follow:
			t_traj = t_traj + 1000;
 8003d7e:	4b6f      	ldr	r3, [pc, #444]	; (8003f3c <ControllerState+0x264>)
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f512 707a 	adds.w	r0, r2, #1000	; 0x3e8
 8003d88:	f143 0100 	adc.w	r1, r3, #0
 8003d8c:	4b6b      	ldr	r3, [pc, #428]	; (8003f3c <ControllerState+0x264>)
 8003d8e:	e9c3 0100 	strd	r0, r1, [r3]
			if (t_traj <= traj.t_total * 1000000)
 8003d92:	4b6a      	ldr	r3, [pc, #424]	; (8003f3c <ControllerState+0x264>)
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	f7fc ffa0 	bl	8000ce0 <__aeabi_ul2f>
 8003da0:	ee06 0a90 	vmov	s13, r0
 8003da4:	4b67      	ldr	r3, [pc, #412]	; (8003f44 <ControllerState+0x26c>)
 8003da6:	edd3 7a00 	vldr	s15, [r3]
 8003daa:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003f4c <ControllerState+0x274>
 8003dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003db2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dba:	d817      	bhi.n	8003dec <ControllerState+0x114>
			{
				QuinticTraj_GetState(Pi, Pf, &traj, t_traj);
 8003dbc:	4b5c      	ldr	r3, [pc, #368]	; (8003f30 <ControllerState+0x258>)
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dc6:	ee17 3a90 	vmov	r3, s15
 8003dca:	b218      	sxth	r0, r3
 8003dcc:	4b59      	ldr	r3, [pc, #356]	; (8003f34 <ControllerState+0x25c>)
 8003dce:	edd3 7a00 	vldr	s15, [r3]
 8003dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dd6:	ee17 3a90 	vmov	r3, s15
 8003dda:	b219      	sxth	r1, r3
 8003ddc:	4b57      	ldr	r3, [pc, #348]	; (8003f3c <ControllerState+0x264>)
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	4613      	mov	r3, r2
 8003de4:	4a57      	ldr	r2, [pc, #348]	; (8003f44 <ControllerState+0x26c>)
 8003de6:	f7fe fda3 	bl	8002930 <QuinticTraj_GetState>
 8003dea:	e003      	b.n	8003df4 <ControllerState+0x11c>
			}
			else
			{
				q_des = Pf;
 8003dec:	4b51      	ldr	r3, [pc, #324]	; (8003f34 <ControllerState+0x25c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a57      	ldr	r2, [pc, #348]	; (8003f50 <ControllerState+0x278>)
 8003df2:	6013      	str	r3, [r2, #0]
			}

			PositionControlVelocityForm(&Controller);
 8003df4:	4857      	ldr	r0, [pc, #348]	; (8003f54 <ControllerState+0x27c>)
 8003df6:	f7fd fda7 	bl	8001948 <PositionControlVelocityForm>
			MotorDrive(&htim1);
 8003dfa:	484b      	ldr	r0, [pc, #300]	; (8003f28 <ControllerState+0x250>)
 8003dfc:	f7fd ffd6 	bl	8001dac <MotorDrive>

			if (((t_traj > traj.t_total * 1000000) && (0.15 > fabs(q_des - QEIData.position)) && (SteadyStateFlag == 0)) || P_disallow || N_disallow)
 8003e00:	4b4e      	ldr	r3, [pc, #312]	; (8003f3c <ControllerState+0x264>)
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f7fc ff69 	bl	8000ce0 <__aeabi_ul2f>
 8003e0e:	ee06 0a90 	vmov	s13, r0
 8003e12:	4b4c      	ldr	r3, [pc, #304]	; (8003f44 <ControllerState+0x26c>)
 8003e14:	edd3 7a00 	vldr	s15, [r3]
 8003e18:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003f4c <ControllerState+0x274>
 8003e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e20:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e28:	dd19      	ble.n	8003e5e <ControllerState+0x186>
 8003e2a:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <ControllerState+0x278>)
 8003e2c:	ed93 7a00 	vldr	s14, [r3]
 8003e30:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <ControllerState+0x254>)
 8003e32:	edd3 7a04 	vldr	s15, [r3, #16]
 8003e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e3a:	eef0 7ae7 	vabs.f32	s15, s15
 8003e3e:	ee17 0a90 	vmov	r0, s15
 8003e42:	f7fc fb2d 	bl	80004a0 <__aeabi_f2d>
 8003e46:	a330      	add	r3, pc, #192	; (adr r3, 8003f08 <ControllerState+0x230>)
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f7fc fdf2 	bl	8000a34 <__aeabi_dcmplt>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <ControllerState+0x186>
 8003e56:	4b3a      	ldr	r3, [pc, #232]	; (8003f40 <ControllerState+0x268>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <ControllerState+0x196>
 8003e5e:	4b3e      	ldr	r3, [pc, #248]	; (8003f58 <ControllerState+0x280>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <ControllerState+0x196>
 8003e66:	4b3d      	ldr	r3, [pc, #244]	; (8003f5c <ControllerState+0x284>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00c      	beq.n	8003e88 <ControllerState+0x1b0>
			{
				t_total_actual = t_traj + 500000;
 8003e6e:	4b33      	ldr	r3, [pc, #204]	; (8003f3c <ControllerState+0x264>)
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	493a      	ldr	r1, [pc, #232]	; (8003f60 <ControllerState+0x288>)
 8003e76:	1854      	adds	r4, r2, r1
 8003e78:	f143 0500 	adc.w	r5, r3, #0
 8003e7c:	4b39      	ldr	r3, [pc, #228]	; (8003f64 <ControllerState+0x28c>)
 8003e7e:	e9c3 4500 	strd	r4, r5, [r3]
				SteadyStateFlag = 1;
 8003e82:	4b2f      	ldr	r3, [pc, #188]	; (8003f40 <ControllerState+0x268>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]
			}

			if (SteadyStateFlag && (t_traj > t_total_actual) && (0.05 > fabs(q_des - QEIData.position)) || (P_disallow) || (N_disallow))
 8003e88:	4b2d      	ldr	r3, [pc, #180]	; (8003f40 <ControllerState+0x268>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01f      	beq.n	8003ed0 <ControllerState+0x1f8>
 8003e90:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <ControllerState+0x264>)
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	4933      	ldr	r1, [pc, #204]	; (8003f64 <ControllerState+0x28c>)
 8003e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e9c:	4290      	cmp	r0, r2
 8003e9e:	eb71 0303 	sbcs.w	r3, r1, r3
 8003ea2:	d215      	bcs.n	8003ed0 <ControllerState+0x1f8>
 8003ea4:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <ControllerState+0x278>)
 8003ea6:	ed93 7a00 	vldr	s14, [r3]
 8003eaa:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <ControllerState+0x254>)
 8003eac:	edd3 7a04 	vldr	s15, [r3, #16]
 8003eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb4:	eef0 7ae7 	vabs.f32	s15, s15
 8003eb8:	ee17 0a90 	vmov	r0, s15
 8003ebc:	f7fc faf0 	bl	80004a0 <__aeabi_f2d>
 8003ec0:	a313      	add	r3, pc, #76	; (adr r3, 8003f10 <ControllerState+0x238>)
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f7fc fdb5 	bl	8000a34 <__aeabi_dcmplt>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d107      	bne.n	8003ee0 <ControllerState+0x208>
 8003ed0:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <ControllerState+0x280>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d103      	bne.n	8003ee0 <ControllerState+0x208>
 8003ed8:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <ControllerState+0x284>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00b      	beq.n	8003ef8 <ControllerState+0x220>
			{
				state = Idle;
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <ControllerState+0x244>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003eec:	4816      	ldr	r0, [pc, #88]	; (8003f48 <ControllerState+0x270>)
 8003eee:	f002 f807 	bl	8005f00 <HAL_GPIO_WritePin>
			}
		break;
 8003ef2:	e001      	b.n	8003ef8 <ControllerState+0x220>
		break;
 8003ef4:	bf00      	nop
 8003ef6:	e000      	b.n	8003efa <ControllerState+0x222>
		break;
 8003ef8:	bf00      	nop
		}
		Pf_last = Pf;
 8003efa:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <ControllerState+0x25c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a0e      	ldr	r2, [pc, #56]	; (8003f38 <ControllerState+0x260>)
 8003f00:	6013      	str	r3, [r2, #0]
	}
}
 8003f02:	bf00      	nop
 8003f04:	bdb0      	pop	{r4, r5, r7, pc}
 8003f06:	bf00      	nop
 8003f08:	33333333 	.word	0x33333333
 8003f0c:	3fc33333 	.word	0x3fc33333
 8003f10:	9999999a 	.word	0x9999999a
 8003f14:	3fa99999 	.word	0x3fa99999
 8003f18:	20000259 	.word	0x20000259
 8003f1c:	20000ffa 	.word	0x20000ffa
 8003f20:	20000928 	.word	0x20000928
 8003f24:	20000924 	.word	0x20000924
 8003f28:	20000520 	.word	0x20000520
 8003f2c:	20000908 	.word	0x20000908
 8003f30:	200008ec 	.word	0x200008ec
 8003f34:	200008f0 	.word	0x200008f0
 8003f38:	200008f4 	.word	0x200008f4
 8003f3c:	200008c8 	.word	0x200008c8
 8003f40:	200008f8 	.word	0x200008f8
 8003f44:	200008e4 	.word	0x200008e4
 8003f48:	40020400 	.word	0x40020400
 8003f4c:	49742400 	.word	0x49742400
 8003f50:	200008d8 	.word	0x200008d8
 8003f54:	2000092c 	.word	0x2000092c
 8003f58:	20000938 	.word	0x20000938
 8003f5c:	20000939 	.word	0x20000939
 8003f60:	0007a120 	.word	0x0007a120
 8003f64:	200008d0 	.word	0x200008d0

08003f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f6c:	b672      	cpsid	i
}
 8003f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f70:	e7fe      	b.n	8003f70 <Error_Handler+0x8>
	...

08003f74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	607b      	str	r3, [r7, #4]
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <HAL_MspInit+0x4c>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <HAL_MspInit+0x4c>)
 8003f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f88:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_MspInit+0x4c>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_MspInit+0x4c>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <HAL_MspInit+0x4c>)
 8003fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_MspInit+0x4c>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003fb2:	2007      	movs	r0, #7
 8003fb4:	f001 f9aa 	bl	800530c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40023800 	.word	0x40023800

08003fc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fcc:	f107 0314 	add.w	r3, r7, #20
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	60da      	str	r2, [r3, #12]
 8003fda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a2f      	ldr	r2, [pc, #188]	; (80040a0 <HAL_ADC_MspInit+0xdc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d157      	bne.n	8004096 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <HAL_ADC_MspInit+0xe0>)
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	4a2d      	ldr	r2, [pc, #180]	; (80040a4 <HAL_ADC_MspInit+0xe0>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff6:	4b2b      	ldr	r3, [pc, #172]	; (80040a4 <HAL_ADC_MspInit+0xe0>)
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <HAL_ADC_MspInit+0xe0>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	4a26      	ldr	r2, [pc, #152]	; (80040a4 <HAL_ADC_MspInit+0xe0>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6313      	str	r3, [r2, #48]	; 0x30
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_ADC_MspInit+0xe0>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800401e:	2303      	movs	r3, #3
 8004020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004022:	2303      	movs	r3, #3
 8004024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402a:	f107 0314 	add.w	r3, r7, #20
 800402e:	4619      	mov	r1, r3
 8004030:	481d      	ldr	r0, [pc, #116]	; (80040a8 <HAL_ADC_MspInit+0xe4>)
 8004032:	f001 fdc9 	bl	8005bc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 8004038:	4a1d      	ldr	r2, [pc, #116]	; (80040b0 <HAL_ADC_MspInit+0xec>)
 800403a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 800403e:	2200      	movs	r2, #0
 8004040:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 8004044:	2200      	movs	r2, #0
 8004046:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004048:	4b18      	ldr	r3, [pc, #96]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 800404a:	2200      	movs	r2, #0
 800404c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 8004050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004054:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 8004058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800405c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800405e:	4b13      	ldr	r3, [pc, #76]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 8004060:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004064:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 8004068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800406c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 8004070:	2200      	movs	r2, #0
 8004072:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004074:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 8004076:	2200      	movs	r2, #0
 8004078:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800407a:	480c      	ldr	r0, [pc, #48]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 800407c:	f001 f988 	bl	8005390 <HAL_DMA_Init>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004086:	f7ff ff6f 	bl	8003f68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a07      	ldr	r2, [pc, #28]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 800408e:	639a      	str	r2, [r3, #56]	; 0x38
 8004090:	4a06      	ldr	r2, [pc, #24]	; (80040ac <HAL_ADC_MspInit+0xe8>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004096:	bf00      	nop
 8004098:	3728      	adds	r7, #40	; 0x28
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40012000 	.word	0x40012000
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40020000 	.word	0x40020000
 80040ac:	2000040c 	.word	0x2000040c
 80040b0:	40026410 	.word	0x40026410

080040b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	; 0x28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a38      	ldr	r2, [pc, #224]	; (80041b4 <HAL_I2C_MspInit+0x100>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d16a      	bne.n	80041ac <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <HAL_I2C_MspInit+0x104>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	4a36      	ldr	r2, [pc, #216]	; (80041b8 <HAL_I2C_MspInit+0x104>)
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	6313      	str	r3, [r2, #48]	; 0x30
 80040e6:	4b34      	ldr	r3, [pc, #208]	; (80041b8 <HAL_I2C_MspInit+0x104>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040f2:	23c0      	movs	r3, #192	; 0xc0
 80040f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040f6:	2312      	movs	r3, #18
 80040f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040fe:	2303      	movs	r3, #3
 8004100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004102:	2304      	movs	r3, #4
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004106:	f107 0314 	add.w	r3, r7, #20
 800410a:	4619      	mov	r1, r3
 800410c:	482b      	ldr	r0, [pc, #172]	; (80041bc <HAL_I2C_MspInit+0x108>)
 800410e:	f001 fd5b 	bl	8005bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	4b28      	ldr	r3, [pc, #160]	; (80041b8 <HAL_I2C_MspInit+0x104>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	4a27      	ldr	r2, [pc, #156]	; (80041b8 <HAL_I2C_MspInit+0x104>)
 800411c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004120:	6413      	str	r3, [r2, #64]	; 0x40
 8004122:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <HAL_I2C_MspInit+0x104>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800412e:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 8004130:	4a24      	ldr	r2, [pc, #144]	; (80041c4 <HAL_I2C_MspInit+0x110>)
 8004132:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004134:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 8004136:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800413a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800413c:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004142:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 8004144:	2200      	movs	r2, #0
 8004146:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 800414a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800414e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 8004152:	2200      	movs	r2, #0
 8004154:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004156:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 8004158:	2200      	movs	r2, #0
 800415a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 800415c:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 800415e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004162:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004164:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 8004166:	2200      	movs	r2, #0
 8004168:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800416a:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 800416c:	2200      	movs	r2, #0
 800416e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004170:	4813      	ldr	r0, [pc, #76]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 8004172:	f001 f90d 	bl	8005390 <HAL_DMA_Init>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800417c:	f7ff fef4 	bl	8003f68 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a0f      	ldr	r2, [pc, #60]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
 8004186:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <HAL_I2C_MspInit+0x10c>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800418c:	2200      	movs	r2, #0
 800418e:	2100      	movs	r1, #0
 8004190:	201f      	movs	r0, #31
 8004192:	f001 f8c6 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004196:	201f      	movs	r0, #31
 8004198:	f001 f8df 	bl	800535a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800419c:	2200      	movs	r2, #0
 800419e:	2100      	movs	r1, #0
 80041a0:	2020      	movs	r0, #32
 80041a2:	f001 f8be 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80041a6:	2020      	movs	r0, #32
 80041a8:	f001 f8d7 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80041ac:	bf00      	nop
 80041ae:	3728      	adds	r7, #40	; 0x28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40005400 	.word	0x40005400
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40020400 	.word	0x40020400
 80041c0:	200004c0 	.word	0x200004c0
 80041c4:	40026010 	.word	0x40026010

080041c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2a      	ldr	r2, [pc, #168]	; (8004280 <HAL_TIM_Base_MspInit+0xb8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d116      	bne.n	8004208 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <HAL_TIM_Base_MspInit+0xbc>)
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	4a28      	ldr	r2, [pc, #160]	; (8004284 <HAL_TIM_Base_MspInit+0xbc>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6453      	str	r3, [r2, #68]	; 0x44
 80041ea:	4b26      	ldr	r3, [pc, #152]	; (8004284 <HAL_TIM_Base_MspInit+0xbc>)
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80041f6:	2200      	movs	r2, #0
 80041f8:	2100      	movs	r1, #0
 80041fa:	201a      	movs	r0, #26
 80041fc:	f001 f891 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004200:	201a      	movs	r0, #26
 8004202:	f001 f8aa 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004206:	e036      	b.n	8004276 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <HAL_TIM_Base_MspInit+0xc0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d116      	bne.n	8004240 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <HAL_TIM_Base_MspInit+0xbc>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	4a1a      	ldr	r2, [pc, #104]	; (8004284 <HAL_TIM_Base_MspInit+0xbc>)
 800421c:	f043 0308 	orr.w	r3, r3, #8
 8004220:	6413      	str	r3, [r2, #64]	; 0x40
 8004222:	4b18      	ldr	r3, [pc, #96]	; (8004284 <HAL_TIM_Base_MspInit+0xbc>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800422e:	2200      	movs	r2, #0
 8004230:	2100      	movs	r1, #0
 8004232:	2032      	movs	r0, #50	; 0x32
 8004234:	f001 f875 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004238:	2032      	movs	r0, #50	; 0x32
 800423a:	f001 f88e 	bl	800535a <HAL_NVIC_EnableIRQ>
}
 800423e:	e01a      	b.n	8004276 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a11      	ldr	r2, [pc, #68]	; (800428c <HAL_TIM_Base_MspInit+0xc4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d115      	bne.n	8004276 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <HAL_TIM_Base_MspInit+0xbc>)
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	4a0c      	ldr	r2, [pc, #48]	; (8004284 <HAL_TIM_Base_MspInit+0xbc>)
 8004254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004258:	6453      	str	r3, [r2, #68]	; 0x44
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <HAL_TIM_Base_MspInit+0xbc>)
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004266:	2200      	movs	r2, #0
 8004268:	2100      	movs	r1, #0
 800426a:	201a      	movs	r0, #26
 800426c:	f001 f859 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004270:	201a      	movs	r0, #26
 8004272:	f001 f872 	bl	800535a <HAL_NVIC_EnableIRQ>
}
 8004276:	bf00      	nop
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40010000 	.word	0x40010000
 8004284:	40023800 	.word	0x40023800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40014800 	.word	0x40014800

08004290 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004298:	f107 0314 	add.w	r3, r7, #20
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	60da      	str	r2, [r3, #12]
 80042a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <HAL_TIM_Encoder_MspInit+0x94>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d133      	bne.n	800431a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	4b1c      	ldr	r3, [pc, #112]	; (8004328 <HAL_TIM_Encoder_MspInit+0x98>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <HAL_TIM_Encoder_MspInit+0x98>)
 80042bc:	f043 0302 	orr.w	r3, r3, #2
 80042c0:	6413      	str	r3, [r2, #64]	; 0x40
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_TIM_Encoder_MspInit+0x98>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <HAL_TIM_Encoder_MspInit+0x98>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4a14      	ldr	r2, [pc, #80]	; (8004328 <HAL_TIM_Encoder_MspInit+0x98>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_TIM_Encoder_MspInit+0x98>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042ea:	23c0      	movs	r3, #192	; 0xc0
 80042ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ee:	2302      	movs	r3, #2
 80042f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f6:	2300      	movs	r3, #0
 80042f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042fa:	2302      	movs	r3, #2
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fe:	f107 0314 	add.w	r3, r7, #20
 8004302:	4619      	mov	r1, r3
 8004304:	4809      	ldr	r0, [pc, #36]	; (800432c <HAL_TIM_Encoder_MspInit+0x9c>)
 8004306:	f001 fc5f 	bl	8005bc8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800430a:	2200      	movs	r2, #0
 800430c:	2100      	movs	r1, #0
 800430e:	201d      	movs	r0, #29
 8004310:	f001 f807 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004314:	201d      	movs	r0, #29
 8004316:	f001 f820 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800431a:	bf00      	nop
 800431c:	3728      	adds	r7, #40	; 0x28
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40000400 	.word	0x40000400
 8004328:	40023800 	.word	0x40023800
 800432c:	40020000 	.word	0x40020000

08004330 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004338:	f107 030c 	add.w	r3, r7, #12
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a12      	ldr	r2, [pc, #72]	; (8004398 <HAL_TIM_MspPostInit+0x68>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d11e      	bne.n	8004390 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	4b11      	ldr	r3, [pc, #68]	; (800439c <HAL_TIM_MspPostInit+0x6c>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	4a10      	ldr	r2, [pc, #64]	; (800439c <HAL_TIM_MspPostInit+0x6c>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6313      	str	r3, [r2, #48]	; 0x30
 8004362:	4b0e      	ldr	r3, [pc, #56]	; (800439c <HAL_TIM_MspPostInit+0x6c>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	60bb      	str	r3, [r7, #8]
 800436c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800436e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004372:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004374:	2302      	movs	r3, #2
 8004376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004380:	2301      	movs	r3, #1
 8004382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004384:	f107 030c 	add.w	r3, r7, #12
 8004388:	4619      	mov	r1, r3
 800438a:	4805      	ldr	r0, [pc, #20]	; (80043a0 <HAL_TIM_MspPostInit+0x70>)
 800438c:	f001 fc1c 	bl	8005bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004390:	bf00      	nop
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40010000 	.word	0x40010000
 800439c:	40023800 	.word	0x40023800
 80043a0:	40020000 	.word	0x40020000

080043a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	; 0x28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ac:	f107 0314 	add.w	r3, r7, #20
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	609a      	str	r2, [r3, #8]
 80043b8:	60da      	str	r2, [r3, #12]
 80043ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a34      	ldr	r2, [pc, #208]	; (8004494 <HAL_UART_MspInit+0xf0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d161      	bne.n	800448a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80043c6:	2300      	movs	r3, #0
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	4b33      	ldr	r3, [pc, #204]	; (8004498 <HAL_UART_MspInit+0xf4>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	4a32      	ldr	r2, [pc, #200]	; (8004498 <HAL_UART_MspInit+0xf4>)
 80043d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d4:	6413      	str	r3, [r2, #64]	; 0x40
 80043d6:	4b30      	ldr	r3, [pc, #192]	; (8004498 <HAL_UART_MspInit+0xf4>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	4b2c      	ldr	r3, [pc, #176]	; (8004498 <HAL_UART_MspInit+0xf4>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	4a2b      	ldr	r2, [pc, #172]	; (8004498 <HAL_UART_MspInit+0xf4>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	6313      	str	r3, [r2, #48]	; 0x30
 80043f2:	4b29      	ldr	r3, [pc, #164]	; (8004498 <HAL_UART_MspInit+0xf4>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80043fe:	230c      	movs	r3, #12
 8004400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004402:	2302      	movs	r3, #2
 8004404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800440a:	2303      	movs	r3, #3
 800440c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800440e:	2307      	movs	r3, #7
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004412:	f107 0314 	add.w	r3, r7, #20
 8004416:	4619      	mov	r1, r3
 8004418:	4820      	ldr	r0, [pc, #128]	; (800449c <HAL_UART_MspInit+0xf8>)
 800441a:	f001 fbd5 	bl	8005bc8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800441e:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 8004420:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <HAL_UART_MspInit+0x100>)
 8004422:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004424:	4b1e      	ldr	r3, [pc, #120]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 8004426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800442a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 800442e:	2240      	movs	r2, #64	; 0x40
 8004430:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004432:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 8004434:	2200      	movs	r2, #0
 8004436:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004438:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 800443a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800443e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004440:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 8004442:	2200      	movs	r2, #0
 8004444:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004446:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 8004448:	2200      	movs	r2, #0
 800444a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800444c:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 800444e:	2200      	movs	r2, #0
 8004450:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004452:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 8004454:	2200      	movs	r2, #0
 8004456:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004458:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 800445a:	2200      	movs	r2, #0
 800445c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800445e:	4810      	ldr	r0, [pc, #64]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 8004460:	f000 ff96 	bl	8005390 <HAL_DMA_Init>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800446a:	f7ff fd7d 	bl	8003f68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 8004472:	635a      	str	r2, [r3, #52]	; 0x34
 8004474:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <HAL_UART_MspInit+0xfc>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800447a:	2200      	movs	r2, #0
 800447c:	2100      	movs	r1, #0
 800447e:	2026      	movs	r0, #38	; 0x26
 8004480:	f000 ff4f 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004484:	2026      	movs	r0, #38	; 0x26
 8004486:	f000 ff68 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800448a:	bf00      	nop
 800448c:	3728      	adds	r7, #40	; 0x28
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40004400 	.word	0x40004400
 8004498:	40023800 	.word	0x40023800
 800449c:	40020000 	.word	0x40020000
 80044a0:	20000864 	.word	0x20000864
 80044a4:	400260a0 	.word	0x400260a0

080044a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044ac:	e7fe      	b.n	80044ac <NMI_Handler+0x4>

080044ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044b2:	e7fe      	b.n	80044b2 <HardFault_Handler+0x4>

080044b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044b8:	e7fe      	b.n	80044b8 <MemManage_Handler+0x4>

080044ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044be:	e7fe      	b.n	80044be <BusFault_Handler+0x4>

080044c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044c4:	e7fe      	b.n	80044c4 <UsageFault_Handler+0x4>

080044c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044c6:	b480      	push	{r7}
 80044c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044d8:	bf00      	nop
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044e2:	b480      	push	{r7}
 80044e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044f4:	f000 fa18 	bl	8004928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044f8:	bf00      	nop
 80044fa:	bd80      	pop	{r7, pc}

080044fc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004500:	2002      	movs	r0, #2
 8004502:	f001 fd17 	bl	8005f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}

0800450a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800450e:	2004      	movs	r0, #4
 8004510:	f001 fd10 	bl	8005f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004514:	bf00      	nop
 8004516:	bd80      	pop	{r7, pc}

08004518 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800451c:	4802      	ldr	r0, [pc, #8]	; (8004528 <DMA1_Stream0_IRQHandler+0x10>)
 800451e:	f001 f8cf 	bl	80056c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	200004c0 	.word	0x200004c0

0800452c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004530:	4802      	ldr	r0, [pc, #8]	; (800453c <DMA1_Stream6_IRQHandler+0x10>)
 8004532:	f001 f8c5 	bl	80056c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000864 	.word	0x20000864

08004540 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004544:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004548:	f001 fcf4 	bl	8005f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800454c:	bf00      	nop
 800454e:	bd80      	pop	{r7, pc}

08004550 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004554:	4803      	ldr	r0, [pc, #12]	; (8004564 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004556:	f004 fc9f 	bl	8008e98 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800455a:	4803      	ldr	r0, [pc, #12]	; (8004568 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800455c:	f004 fc9c 	bl	8008e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004560:	bf00      	nop
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000520 	.word	0x20000520
 8004568:	2000073c 	.word	0x2000073c

0800456c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004570:	4802      	ldr	r0, [pc, #8]	; (800457c <TIM3_IRQHandler+0x10>)
 8004572:	f004 fc91 	bl	8008e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	200005d4 	.word	0x200005d4

08004580 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004584:	4802      	ldr	r0, [pc, #8]	; (8004590 <I2C1_EV_IRQHandler+0x10>)
 8004586:	f001 fed7 	bl	8006338 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	2000046c 	.word	0x2000046c

08004594 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004598:	4802      	ldr	r0, [pc, #8]	; (80045a4 <I2C1_ER_IRQHandler+0x10>)
 800459a:	f002 f83e 	bl	800661a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	2000046c 	.word	0x2000046c

080045a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045ac:	4802      	ldr	r0, [pc, #8]	; (80045b8 <USART2_IRQHandler+0x10>)
 80045ae:	f005 ff7b 	bl	800a4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	200007f0 	.word	0x200007f0

080045bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80045c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80045c4:	f001 fcb6 	bl	8005f34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80045c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80045cc:	f001 fcb2 	bl	8005f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80045d0:	bf00      	nop
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80045d8:	4802      	ldr	r0, [pc, #8]	; (80045e4 <TIM5_IRQHandler+0x10>)
 80045da:	f004 fc5d 	bl	8008e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000688 	.word	0x20000688

080045e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80045ec:	4802      	ldr	r0, [pc, #8]	; (80045f8 <DMA2_Stream0_IRQHandler+0x10>)
 80045ee:	f001 f867 	bl	80056c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	2000040c 	.word	0x2000040c

080045fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <SystemInit+0x20>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	4a05      	ldr	r2, [pc, #20]	; (800461c <SystemInit+0x20>)
 8004608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800460c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004610:	bf00      	nop
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	e000ed00 	.word	0xe000ed00

08004620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004658 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004624:	480d      	ldr	r0, [pc, #52]	; (800465c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004626:	490e      	ldr	r1, [pc, #56]	; (8004660 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004628:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800462a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800462c:	e002      	b.n	8004634 <LoopCopyDataInit>

0800462e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800462e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004632:	3304      	adds	r3, #4

08004634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004638:	d3f9      	bcc.n	800462e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800463a:	4a0b      	ldr	r2, [pc, #44]	; (8004668 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800463c:	4c0b      	ldr	r4, [pc, #44]	; (800466c <LoopFillZerobss+0x26>)
  movs r3, #0
 800463e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004640:	e001      	b.n	8004646 <LoopFillZerobss>

08004642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004644:	3204      	adds	r2, #4

08004646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004648:	d3fb      	bcc.n	8004642 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800464a:	f7ff ffd7 	bl	80045fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800464e:	f006 ff77 	bl	800b540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004652:	f7fe fe69 	bl	8003328 <main>
  bx  lr    
 8004656:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800465c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004660:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 8004664:	0800d210 	.word	0x0800d210
  ldr r2, =_sbss
 8004668:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 800466c:	20001000 	.word	0x20001000

08004670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004670:	e7fe      	b.n	8004670 <ADC_IRQHandler>
	...

08004674 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 8004674:	b480      	push	{r7}
 8004676:	b08b      	sub	sp, #44	; 0x2c
 8004678:	af00      	add	r7, sp, #0
 800467a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 800467e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004682:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004774 <arm_cos_f32+0x100>
 8004686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800468a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800468e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004692:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8004696:	edd7 7a06 	vldr	s15, [r7, #24]
 800469a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800469e:	ee17 3a90 	vmov	r3, s15
 80046a2:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80046a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80046a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b0:	d502      	bpl.n	80046b8 <arm_cos_f32+0x44>
  {
    n--;
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80046c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ca:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80046ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80046d2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004778 <arm_cos_f32+0x104>
 80046d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046da:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 80046de:	edd7 7a07 	vldr	s15, [r7, #28]
 80046e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e6:	ee17 3a90 	vmov	r3, s15
 80046ea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 80046ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f2:	d309      	bcc.n	8004708 <arm_cos_f32+0x94>
    index = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 80046f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80046fc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004778 <arm_cos_f32+0x104>
 8004700:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004704:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8004708:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	ed97 7a07 	vldr	s14, [r7, #28]
 8004716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800471a:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 800471e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004720:	4a16      	ldr	r2, [pc, #88]	; (800477c <arm_cos_f32+0x108>)
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800472a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800472c:	3301      	adds	r3, #1
 800472e:	4a13      	ldr	r2, [pc, #76]	; (800477c <arm_cos_f32+0x108>)
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8004738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800473c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004740:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004744:	edd7 7a04 	vldr	s15, [r7, #16]
 8004748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800474c:	edd7 6a05 	vldr	s13, [r7, #20]
 8004750:	edd7 7a03 	vldr	s15, [r7, #12]
 8004754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800475c:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	ee07 3a90 	vmov	s15, r3
}
 8004766:	eeb0 0a67 	vmov.f32	s0, s15
 800476a:	372c      	adds	r7, #44	; 0x2c
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	3e22f983 	.word	0x3e22f983
 8004778:	44000000 	.word	0x44000000
 800477c:	0800c950 	.word	0x0800c950

08004780 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8004780:	b480      	push	{r7}
 8004782:	b08b      	sub	sp, #44	; 0x2c
 8004784:	af00      	add	r7, sp, #0
 8004786:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800478a:	edd7 7a01 	vldr	s15, [r7, #4]
 800478e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8004878 <arm_sin_f32+0xf8>
 8004792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004796:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800479a:	edd7 7a06 	vldr	s15, [r7, #24]
 800479e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047a2:	ee17 3a90 	vmov	r3, s15
 80047a6:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80047a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80047ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b4:	d502      	bpl.n	80047bc <arm_sin_f32+0x3c>
  {
    n--;
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80047ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ce:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80047d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80047d6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800487c <arm_sin_f32+0xfc>
 80047da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047de:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 80047e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80047e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ea:	ee17 3a90 	vmov	r3, s15
 80047ee:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 80047f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f6:	d309      	bcc.n	800480c <arm_sin_f32+0x8c>
    index = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 80047fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004800:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800487c <arm_sin_f32+0xfc>
 8004804:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004808:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800480c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	ed97 7a07 	vldr	s14, [r7, #28]
 800481a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800481e:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8004822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004824:	4a16      	ldr	r2, [pc, #88]	; (8004880 <arm_sin_f32+0x100>)
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800482e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004830:	3301      	adds	r3, #1
 8004832:	4a13      	ldr	r2, [pc, #76]	; (8004880 <arm_sin_f32+0x100>)
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800483c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004840:	edd7 7a05 	vldr	s15, [r7, #20]
 8004844:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004848:	edd7 7a04 	vldr	s15, [r7, #16]
 800484c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004850:	edd7 6a05 	vldr	s13, [r7, #20]
 8004854:	edd7 7a03 	vldr	s15, [r7, #12]
 8004858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800485c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004860:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	ee07 3a90 	vmov	s15, r3
}
 800486a:	eeb0 0a67 	vmov.f32	s0, s15
 800486e:	372c      	adds	r7, #44	; 0x2c
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	3e22f983 	.word	0x3e22f983
 800487c:	44000000 	.word	0x44000000
 8004880:	0800c950 	.word	0x0800c950

08004884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <HAL_Init+0x40>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0d      	ldr	r2, [pc, #52]	; (80048c4 <HAL_Init+0x40>)
 800488e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_Init+0x40>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a0a      	ldr	r2, [pc, #40]	; (80048c4 <HAL_Init+0x40>)
 800489a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800489e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048a0:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <HAL_Init+0x40>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a07      	ldr	r2, [pc, #28]	; (80048c4 <HAL_Init+0x40>)
 80048a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048ac:	2003      	movs	r0, #3
 80048ae:	f000 fd2d 	bl	800530c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048b2:	2000      	movs	r0, #0
 80048b4:	f000 f808 	bl	80048c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048b8:	f7ff fb5c 	bl	8003f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40023c00 	.word	0x40023c00

080048c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048d0:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_InitTick+0x54>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b12      	ldr	r3, [pc, #72]	; (8004920 <HAL_InitTick+0x58>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	4619      	mov	r1, r3
 80048da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048de:	fbb3 f3f1 	udiv	r3, r3, r1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fd45 	bl	8005376 <HAL_SYSTICK_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e00e      	b.n	8004914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b0f      	cmp	r3, #15
 80048fa:	d80a      	bhi.n	8004912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048fc:	2200      	movs	r2, #0
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	f000 fd0d 	bl	8005322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004908:	4a06      	ldr	r2, [pc, #24]	; (8004924 <HAL_InitTick+0x5c>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20000284 	.word	0x20000284
 8004920:	2000028c 	.word	0x2000028c
 8004924:	20000288 	.word	0x20000288

08004928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_IncTick+0x20>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_IncTick+0x24>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4413      	add	r3, r2
 8004938:	4a04      	ldr	r2, [pc, #16]	; (800494c <HAL_IncTick+0x24>)
 800493a:	6013      	str	r3, [r2, #0]
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	2000028c 	.word	0x2000028c
 800494c:	20000ffc 	.word	0x20000ffc

08004950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return uwTick;
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <HAL_GetTick+0x14>)
 8004956:	681b      	ldr	r3, [r3, #0]
}
 8004958:	4618      	mov	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000ffc 	.word	0x20000ffc

08004968 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e033      	b.n	80049e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fb1c 	bl	8003fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d118      	bne.n	80049d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049ae:	f023 0302 	bic.w	r3, r3, #2
 80049b2:	f043 0202 	orr.w	r2, r3, #2
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fa58 	bl	8004e70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	f043 0201 	orr.w	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40
 80049d6:	e001      	b.n	80049dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_ADC_Start_DMA+0x1e>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e0ce      	b.n	8004bac <HAL_ADC_Start_DMA+0x1bc>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d018      	beq.n	8004a56 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a34:	4b5f      	ldr	r3, [pc, #380]	; (8004bb4 <HAL_ADC_Start_DMA+0x1c4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a5f      	ldr	r2, [pc, #380]	; (8004bb8 <HAL_ADC_Start_DMA+0x1c8>)
 8004a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3e:	0c9a      	lsrs	r2, r3, #18
 8004a40:	4613      	mov	r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	4413      	add	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004a48:	e002      	b.n	8004a50 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f9      	bne.n	8004a4a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a64:	d107      	bne.n	8004a76 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a74:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	f040 8086 	bne.w	8004b92 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a8e:	f023 0301 	bic.w	r3, r3, #1
 8004a92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ab0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac4:	d106      	bne.n	8004ad4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	f023 0206 	bic.w	r2, r3, #6
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ad2:	e002      	b.n	8004ada <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <HAL_ADC_Start_DMA+0x1cc>)
 8004ae4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	4a35      	ldr	r2, [pc, #212]	; (8004bc0 <HAL_ADC_Start_DMA+0x1d0>)
 8004aec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	4a34      	ldr	r2, [pc, #208]	; (8004bc4 <HAL_ADC_Start_DMA+0x1d4>)
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	4a33      	ldr	r2, [pc, #204]	; (8004bc8 <HAL_ADC_Start_DMA+0x1d8>)
 8004afc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004b06:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b16:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b26:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	334c      	adds	r3, #76	; 0x4c
 8004b32:	4619      	mov	r1, r3
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f000 fcd8 	bl	80054ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 031f 	and.w	r3, r3, #31
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10f      	bne.n	8004b68 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d129      	bne.n	8004baa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b64:	609a      	str	r2, [r3, #8]
 8004b66:	e020      	b.n	8004baa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <HAL_ADC_Start_DMA+0x1dc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d11b      	bne.n	8004baa <HAL_ADC_Start_DMA+0x1ba>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d114      	bne.n	8004baa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	e00b      	b.n	8004baa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f043 0210 	orr.w	r2, r3, #16
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	f043 0201 	orr.w	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000284 	.word	0x20000284
 8004bb8:	431bde83 	.word	0x431bde83
 8004bbc:	40012300 	.word	0x40012300
 8004bc0:	08005069 	.word	0x08005069
 8004bc4:	08005123 	.word	0x08005123
 8004bc8:	0800513f 	.word	0x0800513f
 8004bcc:	40012000 	.word	0x40012000

08004bd0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x1c>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e113      	b.n	8004e50 <HAL_ADC_ConfigChannel+0x244>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b09      	cmp	r3, #9
 8004c36:	d925      	bls.n	8004c84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68d9      	ldr	r1, [r3, #12]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	4613      	mov	r3, r2
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3b1e      	subs	r3, #30
 8004c4e:	2207      	movs	r2, #7
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	43da      	mvns	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	400a      	ands	r2, r1
 8004c5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68d9      	ldr	r1, [r3, #12]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	4618      	mov	r0, r3
 8004c70:	4603      	mov	r3, r0
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4403      	add	r3, r0
 8004c76:	3b1e      	subs	r3, #30
 8004c78:	409a      	lsls	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	e022      	b.n	8004cca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6919      	ldr	r1, [r3, #16]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	4613      	mov	r3, r2
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	4413      	add	r3, r2
 8004c98:	2207      	movs	r2, #7
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	400a      	ands	r2, r1
 8004ca6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6919      	ldr	r1, [r3, #16]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	4618      	mov	r0, r3
 8004cba:	4603      	mov	r3, r0
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4403      	add	r3, r0
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d824      	bhi.n	8004d1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3b05      	subs	r3, #5
 8004ce4:	221f      	movs	r2, #31
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43da      	mvns	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	400a      	ands	r2, r1
 8004cf2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	4618      	mov	r0, r3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3b05      	subs	r3, #5
 8004d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	635a      	str	r2, [r3, #52]	; 0x34
 8004d1a:	e04c      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	d824      	bhi.n	8004d6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	3b23      	subs	r3, #35	; 0x23
 8004d36:	221f      	movs	r2, #31
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43da      	mvns	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	400a      	ands	r2, r1
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4618      	mov	r0, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3b23      	subs	r3, #35	; 0x23
 8004d60:	fa00 f203 	lsl.w	r2, r0, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d6c:	e023      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3b41      	subs	r3, #65	; 0x41
 8004d80:	221f      	movs	r2, #31
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43da      	mvns	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	3b41      	subs	r3, #65	; 0x41
 8004daa:	fa00 f203 	lsl.w	r2, r0, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004db6:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <HAL_ADC_ConfigChannel+0x250>)
 8004db8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a28      	ldr	r2, [pc, #160]	; (8004e60 <HAL_ADC_ConfigChannel+0x254>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10f      	bne.n	8004de4 <HAL_ADC_ConfigChannel+0x1d8>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b12      	cmp	r3, #18
 8004dca:	d10b      	bne.n	8004de4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <HAL_ADC_ConfigChannel+0x254>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d12b      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x23a>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <HAL_ADC_ConfigChannel+0x258>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <HAL_ADC_ConfigChannel+0x1f4>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b11      	cmp	r3, #17
 8004dfe:	d122      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a11      	ldr	r2, [pc, #68]	; (8004e64 <HAL_ADC_ConfigChannel+0x258>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d111      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e22:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <HAL_ADC_ConfigChannel+0x25c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <HAL_ADC_ConfigChannel+0x260>)
 8004e28:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2c:	0c9a      	lsrs	r2, r3, #18
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e38:	e002      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f9      	bne.n	8004e3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40012300 	.word	0x40012300
 8004e60:	40012000 	.word	0x40012000
 8004e64:	10000012 	.word	0x10000012
 8004e68:	20000284 	.word	0x20000284
 8004e6c:	431bde83 	.word	0x431bde83

08004e70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e78:	4b79      	ldr	r3, [pc, #484]	; (8005060 <ADC_Init+0x1f0>)
 8004e7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ea4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6859      	ldr	r1, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	021a      	lsls	r2, r3, #8
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ec8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6859      	ldr	r1, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6899      	ldr	r1, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	4a58      	ldr	r2, [pc, #352]	; (8005064 <ADC_Init+0x1f4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d022      	beq.n	8004f4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6899      	ldr	r1, [r3, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6899      	ldr	r1, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	e00f      	b.n	8004f6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0202 	bic.w	r2, r2, #2
 8004f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6899      	ldr	r1, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	7e1b      	ldrb	r3, [r3, #24]
 8004f88:	005a      	lsls	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01b      	beq.n	8004fd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004faa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004fba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	035a      	lsls	r2, r3, #13
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
 8004fd2:	e007      	b.n	8004fe4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fe2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	051a      	lsls	r2, r3, #20
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005018:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6899      	ldr	r1, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005026:	025a      	lsls	r2, r3, #9
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6899      	ldr	r1, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	029a      	lsls	r2, r3, #10
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	609a      	str	r2, [r3, #8]
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	40012300 	.word	0x40012300
 8005064:	0f000001 	.word	0x0f000001

08005068 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800507e:	2b00      	cmp	r3, #0
 8005080:	d13c      	bne.n	80050fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d12b      	bne.n	80050f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d127      	bne.n	80050f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d006      	beq.n	80050c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d119      	bne.n	80050f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0220 	bic.w	r2, r2, #32
 80050ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	f043 0201 	orr.w	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff fd6b 	bl	8004bd0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050fa:	e00e      	b.n	800511a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff fd75 	bl	8004bf8 <HAL_ADC_ErrorCallback>
}
 800510e:	e004      	b.n	800511a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	4798      	blx	r3
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff fd57 	bl	8004be4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2240      	movs	r2, #64	; 0x40
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	f043 0204 	orr.w	r2, r3, #4
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f7ff fd4a 	bl	8004bf8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800517c:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <__NVIC_SetPriorityGrouping+0x44>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005188:	4013      	ands	r3, r2
 800518a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800519c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800519e:	4a04      	ldr	r2, [pc, #16]	; (80051b0 <__NVIC_SetPriorityGrouping+0x44>)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	60d3      	str	r3, [r2, #12]
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	e000ed00 	.word	0xe000ed00

080051b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051b8:	4b04      	ldr	r3, [pc, #16]	; (80051cc <__NVIC_GetPriorityGrouping+0x18>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	0a1b      	lsrs	r3, r3, #8
 80051be:	f003 0307 	and.w	r3, r3, #7
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	e000ed00 	.word	0xe000ed00

080051d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	db0b      	blt.n	80051fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	f003 021f 	and.w	r2, r3, #31
 80051e8:	4907      	ldr	r1, [pc, #28]	; (8005208 <__NVIC_EnableIRQ+0x38>)
 80051ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	2001      	movs	r0, #1
 80051f2:	fa00 f202 	lsl.w	r2, r0, r2
 80051f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	e000e100 	.word	0xe000e100

0800520c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	6039      	str	r1, [r7, #0]
 8005216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521c:	2b00      	cmp	r3, #0
 800521e:	db0a      	blt.n	8005236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	b2da      	uxtb	r2, r3
 8005224:	490c      	ldr	r1, [pc, #48]	; (8005258 <__NVIC_SetPriority+0x4c>)
 8005226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522a:	0112      	lsls	r2, r2, #4
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	440b      	add	r3, r1
 8005230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005234:	e00a      	b.n	800524c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	b2da      	uxtb	r2, r3
 800523a:	4908      	ldr	r1, [pc, #32]	; (800525c <__NVIC_SetPriority+0x50>)
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	3b04      	subs	r3, #4
 8005244:	0112      	lsls	r2, r2, #4
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	440b      	add	r3, r1
 800524a:	761a      	strb	r2, [r3, #24]
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	e000e100 	.word	0xe000e100
 800525c:	e000ed00 	.word	0xe000ed00

08005260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005260:	b480      	push	{r7}
 8005262:	b089      	sub	sp, #36	; 0x24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f1c3 0307 	rsb	r3, r3, #7
 800527a:	2b04      	cmp	r3, #4
 800527c:	bf28      	it	cs
 800527e:	2304      	movcs	r3, #4
 8005280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3304      	adds	r3, #4
 8005286:	2b06      	cmp	r3, #6
 8005288:	d902      	bls.n	8005290 <NVIC_EncodePriority+0x30>
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	3b03      	subs	r3, #3
 800528e:	e000      	b.n	8005292 <NVIC_EncodePriority+0x32>
 8005290:	2300      	movs	r3, #0
 8005292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005294:	f04f 32ff 	mov.w	r2, #4294967295
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43da      	mvns	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	401a      	ands	r2, r3
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052a8:	f04f 31ff 	mov.w	r1, #4294967295
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	fa01 f303 	lsl.w	r3, r1, r3
 80052b2:	43d9      	mvns	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052b8:	4313      	orrs	r3, r2
         );
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3724      	adds	r7, #36	; 0x24
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052d8:	d301      	bcc.n	80052de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052da:	2301      	movs	r3, #1
 80052dc:	e00f      	b.n	80052fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052de:	4a0a      	ldr	r2, [pc, #40]	; (8005308 <SysTick_Config+0x40>)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052e6:	210f      	movs	r1, #15
 80052e8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ec:	f7ff ff8e 	bl	800520c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <SysTick_Config+0x40>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052f6:	4b04      	ldr	r3, [pc, #16]	; (8005308 <SysTick_Config+0x40>)
 80052f8:	2207      	movs	r2, #7
 80052fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	e000e010 	.word	0xe000e010

0800530c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff ff29 	bl	800516c <__NVIC_SetPriorityGrouping>
}
 800531a:	bf00      	nop
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	4603      	mov	r3, r0
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005334:	f7ff ff3e 	bl	80051b4 <__NVIC_GetPriorityGrouping>
 8005338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	6978      	ldr	r0, [r7, #20]
 8005340:	f7ff ff8e 	bl	8005260 <NVIC_EncodePriority>
 8005344:	4602      	mov	r2, r0
 8005346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800534a:	4611      	mov	r1, r2
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff ff5d 	bl	800520c <__NVIC_SetPriority>
}
 8005352:	bf00      	nop
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	4603      	mov	r3, r0
 8005362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff ff31 	bl	80051d0 <__NVIC_EnableIRQ>
}
 800536e:	bf00      	nop
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff ffa2 	bl	80052c8 <SysTick_Config>
 8005384:	4603      	mov	r3, r0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800539c:	f7ff fad8 	bl	8004950 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e099      	b.n	80054e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053cc:	e00f      	b.n	80053ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053ce:	f7ff fabf 	bl	8004950 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b05      	cmp	r3, #5
 80053da:	d908      	bls.n	80053ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2203      	movs	r2, #3
 80053e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e078      	b.n	80054e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e8      	bne.n	80053ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4b38      	ldr	r3, [pc, #224]	; (80054e8 <HAL_DMA_Init+0x158>)
 8005408:	4013      	ands	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800541a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	2b04      	cmp	r3, #4
 8005446:	d107      	bne.n	8005458 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	4313      	orrs	r3, r2
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b04      	cmp	r3, #4
 8005480:	d117      	bne.n	80054b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00e      	beq.n	80054b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fb1b 	bl	8005ad0 <DMA_CheckFifoParam>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2240      	movs	r2, #64	; 0x40
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80054ae:	2301      	movs	r3, #1
 80054b0:	e016      	b.n	80054e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fad2 	bl	8005a64 <DMA_CalcBaseAndBitshift>
 80054c0:	4603      	mov	r3, r0
 80054c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c8:	223f      	movs	r2, #63	; 0x3f
 80054ca:	409a      	lsls	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	f010803f 	.word	0xf010803f

080054ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005502:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_DMA_Start_IT+0x26>
 800550e:	2302      	movs	r3, #2
 8005510:	e040      	b.n	8005594 <HAL_DMA_Start_IT+0xa8>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d12f      	bne.n	8005586 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fa64 	bl	8005a08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005544:	223f      	movs	r2, #63	; 0x3f
 8005546:	409a      	lsls	r2, r3
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0216 	orr.w	r2, r2, #22
 800555a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0208 	orr.w	r2, r2, #8
 8005572:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e005      	b.n	8005592 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800558e:	2302      	movs	r3, #2
 8005590:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005592:	7dfb      	ldrb	r3, [r7, #23]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80055aa:	f7ff f9d1 	bl	8004950 <HAL_GetTick>
 80055ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d008      	beq.n	80055ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2280      	movs	r2, #128	; 0x80
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e052      	b.n	8005674 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0216 	bic.w	r2, r2, #22
 80055dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695a      	ldr	r2, [r3, #20]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d103      	bne.n	80055fe <HAL_DMA_Abort+0x62>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0208 	bic.w	r2, r2, #8
 800560c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0201 	bic.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800561e:	e013      	b.n	8005648 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005620:	f7ff f996 	bl	8004950 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b05      	cmp	r3, #5
 800562c:	d90c      	bls.n	8005648 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2203      	movs	r2, #3
 8005638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e015      	b.n	8005674 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e4      	bne.n	8005620 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565a:	223f      	movs	r2, #63	; 0x3f
 800565c:	409a      	lsls	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d004      	beq.n	800569a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2280      	movs	r2, #128	; 0x80
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e00c      	b.n	80056b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2205      	movs	r2, #5
 800569e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056cc:	4b8e      	ldr	r3, [pc, #568]	; (8005908 <HAL_DMA_IRQHandler+0x248>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a8e      	ldr	r2, [pc, #568]	; (800590c <HAL_DMA_IRQHandler+0x24c>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	0a9b      	lsrs	r3, r3, #10
 80056d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ea:	2208      	movs	r2, #8
 80056ec:	409a      	lsls	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4013      	ands	r3, r2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d01a      	beq.n	800572c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d013      	beq.n	800572c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0204 	bic.w	r2, r2, #4
 8005712:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005718:	2208      	movs	r2, #8
 800571a:	409a      	lsls	r2, r3
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	f043 0201 	orr.w	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005730:	2201      	movs	r2, #1
 8005732:	409a      	lsls	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4013      	ands	r3, r2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d012      	beq.n	8005762 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574e:	2201      	movs	r2, #1
 8005750:	409a      	lsls	r2, r3
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	f043 0202 	orr.w	r2, r3, #2
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005766:	2204      	movs	r2, #4
 8005768:	409a      	lsls	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d012      	beq.n	8005798 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005784:	2204      	movs	r2, #4
 8005786:	409a      	lsls	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005790:	f043 0204 	orr.w	r2, r3, #4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579c:	2210      	movs	r2, #16
 800579e:	409a      	lsls	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d043      	beq.n	8005830 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d03c      	beq.n	8005830 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ba:	2210      	movs	r2, #16
 80057bc:	409a      	lsls	r2, r3
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d018      	beq.n	8005802 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d108      	bne.n	80057f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d024      	beq.n	8005830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4798      	blx	r3
 80057ee:	e01f      	b.n	8005830 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01b      	beq.n	8005830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4798      	blx	r3
 8005800:	e016      	b.n	8005830 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d107      	bne.n	8005820 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0208 	bic.w	r2, r2, #8
 800581e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005834:	2220      	movs	r2, #32
 8005836:	409a      	lsls	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4013      	ands	r3, r2
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 808f 	beq.w	8005960 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8087 	beq.w	8005960 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005856:	2220      	movs	r2, #32
 8005858:	409a      	lsls	r2, r3
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b05      	cmp	r3, #5
 8005868:	d136      	bne.n	80058d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0216 	bic.w	r2, r2, #22
 8005878:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695a      	ldr	r2, [r3, #20]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005888:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <HAL_DMA_IRQHandler+0x1da>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0208 	bic.w	r2, r2, #8
 80058a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ae:	223f      	movs	r2, #63	; 0x3f
 80058b0:	409a      	lsls	r2, r3
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d07e      	beq.n	80059cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
        }
        return;
 80058d6:	e079      	b.n	80059cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01d      	beq.n	8005922 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10d      	bne.n	8005910 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d031      	beq.n	8005960 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
 8005904:	e02c      	b.n	8005960 <HAL_DMA_IRQHandler+0x2a0>
 8005906:	bf00      	nop
 8005908:	20000284 	.word	0x20000284
 800590c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d023      	beq.n	8005960 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	4798      	blx	r3
 8005920:	e01e      	b.n	8005960 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10f      	bne.n	8005950 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0210 	bic.w	r2, r2, #16
 800593e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005964:	2b00      	cmp	r3, #0
 8005966:	d032      	beq.n	80059ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d022      	beq.n	80059ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2205      	movs	r2, #5
 8005978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	3301      	adds	r3, #1
 8005990:	60bb      	str	r3, [r7, #8]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	429a      	cmp	r2, r3
 8005996:	d307      	bcc.n	80059a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f2      	bne.n	800598c <HAL_DMA_IRQHandler+0x2cc>
 80059a6:	e000      	b.n	80059aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80059a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	4798      	blx	r3
 80059ca:	e000      	b.n	80059ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80059cc:	bf00      	nop
    }
  }
}
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059e2:	b2db      	uxtb	r3, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d108      	bne.n	8005a48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a46:	e007      	b.n	8005a58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	60da      	str	r2, [r3, #12]
}
 8005a58:	bf00      	nop
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	3b10      	subs	r3, #16
 8005a74:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <DMA_CalcBaseAndBitshift+0x64>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	091b      	lsrs	r3, r3, #4
 8005a7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a7e:	4a13      	ldr	r2, [pc, #76]	; (8005acc <DMA_CalcBaseAndBitshift+0x68>)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d909      	bls.n	8005aa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	1d1a      	adds	r2, r3, #4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	659a      	str	r2, [r3, #88]	; 0x58
 8005aa4:	e007      	b.n	8005ab6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	aaaaaaab 	.word	0xaaaaaaab
 8005acc:	0800d154 	.word	0x0800d154

08005ad0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d11f      	bne.n	8005b2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d856      	bhi.n	8005b9e <DMA_CheckFifoParam+0xce>
 8005af0:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <DMA_CheckFifoParam+0x28>)
 8005af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af6:	bf00      	nop
 8005af8:	08005b09 	.word	0x08005b09
 8005afc:	08005b1b 	.word	0x08005b1b
 8005b00:	08005b09 	.word	0x08005b09
 8005b04:	08005b9f 	.word	0x08005b9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d046      	beq.n	8005ba2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b18:	e043      	b.n	8005ba2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b22:	d140      	bne.n	8005ba6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b28:	e03d      	b.n	8005ba6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b32:	d121      	bne.n	8005b78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d837      	bhi.n	8005baa <DMA_CheckFifoParam+0xda>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <DMA_CheckFifoParam+0x70>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b51 	.word	0x08005b51
 8005b44:	08005b57 	.word	0x08005b57
 8005b48:	08005b51 	.word	0x08005b51
 8005b4c:	08005b69 	.word	0x08005b69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]
      break;
 8005b54:	e030      	b.n	8005bb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d025      	beq.n	8005bae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b66:	e022      	b.n	8005bae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b70:	d11f      	bne.n	8005bb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b76:	e01c      	b.n	8005bb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d903      	bls.n	8005b86 <DMA_CheckFifoParam+0xb6>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d003      	beq.n	8005b8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b84:	e018      	b.n	8005bb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	73fb      	strb	r3, [r7, #15]
      break;
 8005b8a:	e015      	b.n	8005bb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00e      	beq.n	8005bb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b9c:	e00b      	b.n	8005bb6 <DMA_CheckFifoParam+0xe6>
      break;
 8005b9e:	bf00      	nop
 8005ba0:	e00a      	b.n	8005bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ba2:	bf00      	nop
 8005ba4:	e008      	b.n	8005bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ba6:	bf00      	nop
 8005ba8:	e006      	b.n	8005bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8005baa:	bf00      	nop
 8005bac:	e004      	b.n	8005bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8005bae:	bf00      	nop
 8005bb0:	e002      	b.n	8005bb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005bb2:	bf00      	nop
 8005bb4:	e000      	b.n	8005bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8005bb6:	bf00      	nop
    }
  } 
  
  return status; 
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop

08005bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b089      	sub	sp, #36	; 0x24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	e159      	b.n	8005e98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005be4:	2201      	movs	r2, #1
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	f040 8148 	bne.w	8005e92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d005      	beq.n	8005c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d130      	bne.n	8005c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	2203      	movs	r2, #3
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c50:	2201      	movs	r2, #1
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	091b      	lsrs	r3, r3, #4
 8005c66:	f003 0201 	and.w	r2, r3, #1
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d017      	beq.n	8005cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	2203      	movs	r2, #3
 8005c94:	fa02 f303 	lsl.w	r3, r2, r3
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d123      	bne.n	8005d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	08da      	lsrs	r2, r3, #3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3208      	adds	r2, #8
 8005ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	220f      	movs	r2, #15
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	08da      	lsrs	r2, r3, #3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3208      	adds	r2, #8
 8005d06:	69b9      	ldr	r1, [r7, #24]
 8005d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	2203      	movs	r2, #3
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4013      	ands	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f003 0203 	and.w	r2, r3, #3
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 80a2 	beq.w	8005e92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	4b57      	ldr	r3, [pc, #348]	; (8005eb0 <HAL_GPIO_Init+0x2e8>)
 8005d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d56:	4a56      	ldr	r2, [pc, #344]	; (8005eb0 <HAL_GPIO_Init+0x2e8>)
 8005d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d5e:	4b54      	ldr	r3, [pc, #336]	; (8005eb0 <HAL_GPIO_Init+0x2e8>)
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d6a:	4a52      	ldr	r2, [pc, #328]	; (8005eb4 <HAL_GPIO_Init+0x2ec>)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	089b      	lsrs	r3, r3, #2
 8005d70:	3302      	adds	r3, #2
 8005d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	220f      	movs	r2, #15
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43db      	mvns	r3, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a49      	ldr	r2, [pc, #292]	; (8005eb8 <HAL_GPIO_Init+0x2f0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d019      	beq.n	8005dca <HAL_GPIO_Init+0x202>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a48      	ldr	r2, [pc, #288]	; (8005ebc <HAL_GPIO_Init+0x2f4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <HAL_GPIO_Init+0x1fe>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a47      	ldr	r2, [pc, #284]	; (8005ec0 <HAL_GPIO_Init+0x2f8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00d      	beq.n	8005dc2 <HAL_GPIO_Init+0x1fa>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a46      	ldr	r2, [pc, #280]	; (8005ec4 <HAL_GPIO_Init+0x2fc>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d007      	beq.n	8005dbe <HAL_GPIO_Init+0x1f6>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a45      	ldr	r2, [pc, #276]	; (8005ec8 <HAL_GPIO_Init+0x300>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d101      	bne.n	8005dba <HAL_GPIO_Init+0x1f2>
 8005db6:	2304      	movs	r3, #4
 8005db8:	e008      	b.n	8005dcc <HAL_GPIO_Init+0x204>
 8005dba:	2307      	movs	r3, #7
 8005dbc:	e006      	b.n	8005dcc <HAL_GPIO_Init+0x204>
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e004      	b.n	8005dcc <HAL_GPIO_Init+0x204>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e002      	b.n	8005dcc <HAL_GPIO_Init+0x204>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <HAL_GPIO_Init+0x204>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	f002 0203 	and.w	r2, r2, #3
 8005dd2:	0092      	lsls	r2, r2, #2
 8005dd4:	4093      	lsls	r3, r2
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ddc:	4935      	ldr	r1, [pc, #212]	; (8005eb4 <HAL_GPIO_Init+0x2ec>)
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	089b      	lsrs	r3, r3, #2
 8005de2:	3302      	adds	r3, #2
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dea:	4b38      	ldr	r3, [pc, #224]	; (8005ecc <HAL_GPIO_Init+0x304>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	43db      	mvns	r3, r3
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	4013      	ands	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e0e:	4a2f      	ldr	r2, [pc, #188]	; (8005ecc <HAL_GPIO_Init+0x304>)
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e14:	4b2d      	ldr	r3, [pc, #180]	; (8005ecc <HAL_GPIO_Init+0x304>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	4013      	ands	r3, r2
 8005e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e38:	4a24      	ldr	r2, [pc, #144]	; (8005ecc <HAL_GPIO_Init+0x304>)
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e3e:	4b23      	ldr	r3, [pc, #140]	; (8005ecc <HAL_GPIO_Init+0x304>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	43db      	mvns	r3, r3
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e62:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <HAL_GPIO_Init+0x304>)
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e68:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <HAL_GPIO_Init+0x304>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	43db      	mvns	r3, r3
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	4013      	ands	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e8c:	4a0f      	ldr	r2, [pc, #60]	; (8005ecc <HAL_GPIO_Init+0x304>)
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	3301      	adds	r3, #1
 8005e96:	61fb      	str	r3, [r7, #28]
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b0f      	cmp	r3, #15
 8005e9c:	f67f aea2 	bls.w	8005be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	bf00      	nop
 8005ea4:	3724      	adds	r7, #36	; 0x24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40013800 	.word	0x40013800
 8005eb8:	40020000 	.word	0x40020000
 8005ebc:	40020400 	.word	0x40020400
 8005ec0:	40020800 	.word	0x40020800
 8005ec4:	40020c00 	.word	0x40020c00
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	40013c00 	.word	0x40013c00

08005ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	887b      	ldrh	r3, [r7, #2]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
 8005eec:	e001      	b.n	8005ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	807b      	strh	r3, [r7, #2]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f10:	787b      	ldrb	r3, [r7, #1]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f16:	887a      	ldrh	r2, [r7, #2]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f1c:	e003      	b.n	8005f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f1e:	887b      	ldrh	r3, [r7, #2]
 8005f20:	041a      	lsls	r2, r3, #16
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	619a      	str	r2, [r3, #24]
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005f3e:	4b08      	ldr	r3, [pc, #32]	; (8005f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f40:	695a      	ldr	r2, [r3, #20]
 8005f42:	88fb      	ldrh	r3, [r7, #6]
 8005f44:	4013      	ands	r3, r2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d006      	beq.n	8005f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f4a:	4a05      	ldr	r2, [pc, #20]	; (8005f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f4c:	88fb      	ldrh	r3, [r7, #6]
 8005f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fb fe9e 	bl	8001c94 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40013c00 	.word	0x40013c00

08005f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e12b      	b.n	80061ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fe f892 	bl	80040b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2224      	movs	r2, #36	; 0x24
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fc8:	f002 fb02 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 8005fcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	4a81      	ldr	r2, [pc, #516]	; (80061d8 <HAL_I2C_Init+0x274>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d807      	bhi.n	8005fe8 <HAL_I2C_Init+0x84>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4a80      	ldr	r2, [pc, #512]	; (80061dc <HAL_I2C_Init+0x278>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	bf94      	ite	ls
 8005fe0:	2301      	movls	r3, #1
 8005fe2:	2300      	movhi	r3, #0
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	e006      	b.n	8005ff6 <HAL_I2C_Init+0x92>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4a7d      	ldr	r2, [pc, #500]	; (80061e0 <HAL_I2C_Init+0x27c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	bf94      	ite	ls
 8005ff0:	2301      	movls	r3, #1
 8005ff2:	2300      	movhi	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e0e7      	b.n	80061ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4a78      	ldr	r2, [pc, #480]	; (80061e4 <HAL_I2C_Init+0x280>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	0c9b      	lsrs	r3, r3, #18
 8006008:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	4a6a      	ldr	r2, [pc, #424]	; (80061d8 <HAL_I2C_Init+0x274>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d802      	bhi.n	8006038 <HAL_I2C_Init+0xd4>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	3301      	adds	r3, #1
 8006036:	e009      	b.n	800604c <HAL_I2C_Init+0xe8>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	4a69      	ldr	r2, [pc, #420]	; (80061e8 <HAL_I2C_Init+0x284>)
 8006044:	fba2 2303 	umull	r2, r3, r2, r3
 8006048:	099b      	lsrs	r3, r3, #6
 800604a:	3301      	adds	r3, #1
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6812      	ldr	r2, [r2, #0]
 8006050:	430b      	orrs	r3, r1
 8006052:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800605e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	495c      	ldr	r1, [pc, #368]	; (80061d8 <HAL_I2C_Init+0x274>)
 8006068:	428b      	cmp	r3, r1
 800606a:	d819      	bhi.n	80060a0 <HAL_I2C_Init+0x13c>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	1e59      	subs	r1, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	fbb1 f3f3 	udiv	r3, r1, r3
 800607a:	1c59      	adds	r1, r3, #1
 800607c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006080:	400b      	ands	r3, r1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <HAL_I2C_Init+0x138>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1e59      	subs	r1, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	fbb1 f3f3 	udiv	r3, r1, r3
 8006094:	3301      	adds	r3, #1
 8006096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800609a:	e051      	b.n	8006140 <HAL_I2C_Init+0x1dc>
 800609c:	2304      	movs	r3, #4
 800609e:	e04f      	b.n	8006140 <HAL_I2C_Init+0x1dc>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d111      	bne.n	80060cc <HAL_I2C_Init+0x168>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	1e58      	subs	r0, r3, #1
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6859      	ldr	r1, [r3, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	440b      	add	r3, r1
 80060b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ba:	3301      	adds	r3, #1
 80060bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	e012      	b.n	80060f2 <HAL_I2C_Init+0x18e>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	1e58      	subs	r0, r3, #1
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6859      	ldr	r1, [r3, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	440b      	add	r3, r1
 80060da:	0099      	lsls	r1, r3, #2
 80060dc:	440b      	add	r3, r1
 80060de:	fbb0 f3f3 	udiv	r3, r0, r3
 80060e2:	3301      	adds	r3, #1
 80060e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bf0c      	ite	eq
 80060ec:	2301      	moveq	r3, #1
 80060ee:	2300      	movne	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_I2C_Init+0x196>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e022      	b.n	8006140 <HAL_I2C_Init+0x1dc>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10e      	bne.n	8006120 <HAL_I2C_Init+0x1bc>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1e58      	subs	r0, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6859      	ldr	r1, [r3, #4]
 800610a:	460b      	mov	r3, r1
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	440b      	add	r3, r1
 8006110:	fbb0 f3f3 	udiv	r3, r0, r3
 8006114:	3301      	adds	r3, #1
 8006116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800611a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611e:	e00f      	b.n	8006140 <HAL_I2C_Init+0x1dc>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	1e58      	subs	r0, r3, #1
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6859      	ldr	r1, [r3, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	0099      	lsls	r1, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	fbb0 f3f3 	udiv	r3, r0, r3
 8006136:	3301      	adds	r3, #1
 8006138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800613c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	6809      	ldr	r1, [r1, #0]
 8006144:	4313      	orrs	r3, r2
 8006146:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69da      	ldr	r2, [r3, #28]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800616e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6911      	ldr	r1, [r2, #16]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	68d2      	ldr	r2, [r2, #12]
 800617a:	4311      	orrs	r1, r2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	430b      	orrs	r3, r1
 8006182:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695a      	ldr	r2, [r3, #20]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	000186a0 	.word	0x000186a0
 80061dc:	001e847f 	.word	0x001e847f
 80061e0:	003d08ff 	.word	0x003d08ff
 80061e4:	431bde83 	.word	0x431bde83
 80061e8:	10624dd3 	.word	0x10624dd3

080061ec <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	461a      	mov	r2, r3
 80061f8:	460b      	mov	r3, r1
 80061fa:	817b      	strh	r3, [r7, #10]
 80061fc:	4613      	mov	r3, r2
 80061fe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b20      	cmp	r3, #32
 800620e:	f040 8085 	bne.w	800631c <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006212:	4b46      	ldr	r3, [pc, #280]	; (800632c <HAL_I2C_Master_Transmit_IT+0x140>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	08db      	lsrs	r3, r3, #3
 8006218:	4a45      	ldr	r2, [pc, #276]	; (8006330 <HAL_I2C_Master_Transmit_IT+0x144>)
 800621a:	fba2 2303 	umull	r2, r3, r2, r3
 800621e:	0a1a      	lsrs	r2, r3, #8
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009a      	lsls	r2, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	3b01      	subs	r3, #1
 8006230:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d116      	bne.n	8006266 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f043 0220 	orr.w	r2, r3, #32
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e05b      	b.n	800631e <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b02      	cmp	r3, #2
 8006272:	d0db      	beq.n	800622c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_I2C_Master_Transmit_IT+0x96>
 800627e:	2302      	movs	r3, #2
 8006280:	e04d      	b.n	800631e <HAL_I2C_Master_Transmit_IT+0x132>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b01      	cmp	r3, #1
 8006296:	d007      	beq.n	80062a8 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2221      	movs	r2, #33	; 0x21
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2210      	movs	r2, #16
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	893a      	ldrh	r2, [r7, #8]
 80062d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4a13      	ldr	r2, [pc, #76]	; (8006334 <HAL_I2C_Master_Transmit_IT+0x148>)
 80062e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80062ea:	897a      	ldrh	r2, [r7, #10]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006306:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006316:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	e000      	b.n	800631e <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800631c:	2302      	movs	r3, #2
  }
}
 800631e:	4618      	mov	r0, r3
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	20000284 	.word	0x20000284
 8006330:	14f8b589 	.word	0x14f8b589
 8006334:	ffff0000 	.word	0xffff0000

08006338 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006358:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006360:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	2b10      	cmp	r3, #16
 8006366:	d003      	beq.n	8006370 <HAL_I2C_EV_IRQHandler+0x38>
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	f040 80c1 	bne.w	80064f2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10d      	bne.n	80063a6 <HAL_I2C_EV_IRQHandler+0x6e>
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006390:	d003      	beq.n	800639a <HAL_I2C_EV_IRQHandler+0x62>
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006398:	d101      	bne.n	800639e <HAL_I2C_EV_IRQHandler+0x66>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <HAL_I2C_EV_IRQHandler+0x68>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	f000 8132 	beq.w	800660a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <HAL_I2C_EV_IRQHandler+0x92>
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	0a5b      	lsrs	r3, r3, #9
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d006      	beq.n	80063ca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 fc7b 	bl	8007cb8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fd83 	bl	8006ece <I2C_Master_SB>
 80063c8:	e092      	b.n	80064f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	08db      	lsrs	r3, r3, #3
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <HAL_I2C_EV_IRQHandler+0xb2>
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	0a5b      	lsrs	r3, r3, #9
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fdf9 	bl	8006fda <I2C_Master_ADD10>
 80063e8:	e082      	b.n	80064f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	085b      	lsrs	r3, r3, #1
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_I2C_EV_IRQHandler+0xd2>
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	0a5b      	lsrs	r3, r3, #9
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fe13 	bl	800702e <I2C_Master_ADDR>
 8006408:	e072      	b.n	80064f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	089b      	lsrs	r3, r3, #2
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d03b      	beq.n	800648e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006424:	f000 80f3 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	09db      	lsrs	r3, r3, #7
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00f      	beq.n	8006454 <HAL_I2C_EV_IRQHandler+0x11c>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	0a9b      	lsrs	r3, r3, #10
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d009      	beq.n	8006454 <HAL_I2C_EV_IRQHandler+0x11c>
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	089b      	lsrs	r3, r3, #2
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d103      	bne.n	8006454 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f9f3 	bl	8006838 <I2C_MasterTransmit_TXE>
 8006452:	e04d      	b.n	80064f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	089b      	lsrs	r3, r3, #2
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80d6 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	0a5b      	lsrs	r3, r3, #9
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 80cf 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	2b21      	cmp	r3, #33	; 0x21
 8006474:	d103      	bne.n	800647e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fa7a 	bl	8006970 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800647c:	e0c7      	b.n	800660e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	f040 80c4 	bne.w	800660e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fae8 	bl	8006a5c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800648c:	e0bf      	b.n	800660e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649c:	f000 80b7 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	099b      	lsrs	r3, r3, #6
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00f      	beq.n	80064cc <HAL_I2C_EV_IRQHandler+0x194>
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	0a9b      	lsrs	r3, r3, #10
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d009      	beq.n	80064cc <HAL_I2C_EV_IRQHandler+0x194>
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	089b      	lsrs	r3, r3, #2
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d103      	bne.n	80064cc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fb5d 	bl	8006b84 <I2C_MasterReceive_RXNE>
 80064ca:	e011      	b.n	80064f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	089b      	lsrs	r3, r3, #2
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 809a 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x2d6>
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	0a5b      	lsrs	r3, r3, #9
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 8093 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fc06 	bl	8006cfa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064ee:	e08e      	b.n	800660e <HAL_I2C_EV_IRQHandler+0x2d6>
 80064f0:	e08d      	b.n	800660e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	e007      	b.n	8006514 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d012      	beq.n	8006546 <HAL_I2C_EV_IRQHandler+0x20e>
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	0a5b      	lsrs	r3, r3, #9
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00c      	beq.n	8006546 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800653c:	69b9      	ldr	r1, [r7, #24]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 ffc4 	bl	80074cc <I2C_Slave_ADDR>
 8006544:	e066      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d009      	beq.n	8006566 <HAL_I2C_EV_IRQHandler+0x22e>
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	0a5b      	lsrs	r3, r3, #9
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fffe 	bl	8007560 <I2C_Slave_STOPF>
 8006564:	e056      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	2b21      	cmp	r3, #33	; 0x21
 800656a:	d002      	beq.n	8006572 <HAL_I2C_EV_IRQHandler+0x23a>
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	2b29      	cmp	r3, #41	; 0x29
 8006570:	d125      	bne.n	80065be <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	09db      	lsrs	r3, r3, #7
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00f      	beq.n	800659e <HAL_I2C_EV_IRQHandler+0x266>
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	0a9b      	lsrs	r3, r3, #10
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <HAL_I2C_EV_IRQHandler+0x266>
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	089b      	lsrs	r3, r3, #2
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 feda 	bl	8007350 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800659c:	e039      	b.n	8006612 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	089b      	lsrs	r3, r3, #2
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d033      	beq.n	8006612 <HAL_I2C_EV_IRQHandler+0x2da>
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	0a5b      	lsrs	r3, r3, #9
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d02d      	beq.n	8006612 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 ff07 	bl	80073ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065bc:	e029      	b.n	8006612 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	099b      	lsrs	r3, r3, #6
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00f      	beq.n	80065ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	0a9b      	lsrs	r3, r3, #10
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	089b      	lsrs	r3, r3, #2
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d103      	bne.n	80065ea <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 ff12 	bl	800740c <I2C_SlaveReceive_RXNE>
 80065e8:	e014      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	089b      	lsrs	r3, r3, #2
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00e      	beq.n	8006614 <HAL_I2C_EV_IRQHandler+0x2dc>
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	0a5b      	lsrs	r3, r3, #9
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d008      	beq.n	8006614 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 ff40 	bl	8007488 <I2C_SlaveReceive_BTF>
 8006608:	e004      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800660a:	bf00      	nop
 800660c:	e002      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006612:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006614:	3720      	adds	r7, #32
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b08a      	sub	sp, #40	; 0x28
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006632:	2300      	movs	r3, #0
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800663c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	0a1b      	lsrs	r3, r3, #8
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00e      	beq.n	8006668 <HAL_I2C_ER_IRQHandler+0x4e>
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	0a1b      	lsrs	r3, r3, #8
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d008      	beq.n	8006668 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	f043 0301 	orr.w	r3, r3, #1
 800665c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006666:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	0a5b      	lsrs	r3, r3, #9
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00e      	beq.n	8006692 <HAL_I2C_ER_IRQHandler+0x78>
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	0a1b      	lsrs	r3, r3, #8
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d008      	beq.n	8006692 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	f043 0302 	orr.w	r3, r3, #2
 8006686:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006690:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	0a9b      	lsrs	r3, r3, #10
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d03f      	beq.n	800671e <HAL_I2C_ER_IRQHandler+0x104>
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	0a1b      	lsrs	r3, r3, #8
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d039      	beq.n	800671e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80066aa:	7efb      	ldrb	r3, [r7, #27]
 80066ac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066bc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80066c4:	7ebb      	ldrb	r3, [r7, #26]
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d112      	bne.n	80066f0 <HAL_I2C_ER_IRQHandler+0xd6>
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10f      	bne.n	80066f0 <HAL_I2C_ER_IRQHandler+0xd6>
 80066d0:	7cfb      	ldrb	r3, [r7, #19]
 80066d2:	2b21      	cmp	r3, #33	; 0x21
 80066d4:	d008      	beq.n	80066e8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80066d6:	7cfb      	ldrb	r3, [r7, #19]
 80066d8:	2b29      	cmp	r3, #41	; 0x29
 80066da:	d005      	beq.n	80066e8 <HAL_I2C_ER_IRQHandler+0xce>
 80066dc:	7cfb      	ldrb	r3, [r7, #19]
 80066de:	2b28      	cmp	r3, #40	; 0x28
 80066e0:	d106      	bne.n	80066f0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b21      	cmp	r3, #33	; 0x21
 80066e6:	d103      	bne.n	80066f0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 f869 	bl	80077c0 <I2C_Slave_AF>
 80066ee:	e016      	b.n	800671e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066f8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	f043 0304 	orr.w	r3, r3, #4
 8006700:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006702:	7efb      	ldrb	r3, [r7, #27]
 8006704:	2b10      	cmp	r3, #16
 8006706:	d002      	beq.n	800670e <HAL_I2C_ER_IRQHandler+0xf4>
 8006708:	7efb      	ldrb	r3, [r7, #27]
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d107      	bne.n	800671e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800671c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	0adb      	lsrs	r3, r3, #11
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00e      	beq.n	8006748 <HAL_I2C_ER_IRQHandler+0x12e>
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	0a1b      	lsrs	r3, r3, #8
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	f043 0308 	orr.w	r3, r3, #8
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006746:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	2b00      	cmp	r3, #0
 800674c:	d008      	beq.n	8006760 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f001 f8a0 	bl	80078a0 <I2C_ITError>
  }
}
 8006760:	bf00      	nop
 8006762:	3728      	adds	r7, #40	; 0x28
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
 80067c4:	4613      	mov	r3, r2
 80067c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006846:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800684e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685a:	2b00      	cmp	r3, #0
 800685c:	d150      	bne.n	8006900 <I2C_MasterTransmit_TXE+0xc8>
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	2b21      	cmp	r3, #33	; 0x21
 8006862:	d14d      	bne.n	8006900 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b08      	cmp	r3, #8
 8006868:	d01d      	beq.n	80068a6 <I2C_MasterTransmit_TXE+0x6e>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b20      	cmp	r3, #32
 800686e:	d01a      	beq.n	80068a6 <I2C_MasterTransmit_TXE+0x6e>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006876:	d016      	beq.n	80068a6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006886:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2211      	movs	r2, #17
 800688c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7ff ff62 	bl	8006768 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80068a4:	e060      	b.n	8006968 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068b4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068c4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b40      	cmp	r3, #64	; 0x40
 80068de:	d107      	bne.n	80068f0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff ff7d 	bl	80067e8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80068ee:	e03b      	b.n	8006968 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff ff35 	bl	8006768 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80068fe:	e033      	b.n	8006968 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	2b21      	cmp	r3, #33	; 0x21
 8006904:	d005      	beq.n	8006912 <I2C_MasterTransmit_TXE+0xda>
 8006906:	7bbb      	ldrb	r3, [r7, #14]
 8006908:	2b40      	cmp	r3, #64	; 0x40
 800690a:	d12d      	bne.n	8006968 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b22      	cmp	r3, #34	; 0x22
 8006910:	d12a      	bne.n	8006968 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	d108      	bne.n	800692e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800692a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800692c:	e01c      	b.n	8006968 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	d103      	bne.n	8006942 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f88e 	bl	8006a5c <I2C_MemoryTransmit_TXE_BTF>
}
 8006940:	e012      	b.n	8006968 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	781a      	ldrb	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006966:	e7ff      	b.n	8006968 <I2C_MasterTransmit_TXE+0x130>
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b21      	cmp	r3, #33	; 0x21
 8006988:	d164      	bne.n	8006a54 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d012      	beq.n	80069ba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	781a      	ldrb	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80069b8:	e04c      	b.n	8006a54 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d01d      	beq.n	80069fc <I2C_MasterTransmit_BTF+0x8c>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	d01a      	beq.n	80069fc <I2C_MasterTransmit_BTF+0x8c>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069cc:	d016      	beq.n	80069fc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069dc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2211      	movs	r2, #17
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff feb7 	bl	8006768 <HAL_I2C_MasterTxCpltCallback>
}
 80069fa:	e02b      	b.n	8006a54 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a0a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a1a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b40      	cmp	r3, #64	; 0x40
 8006a34:	d107      	bne.n	8006a46 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff fed2 	bl	80067e8 <HAL_I2C_MemTxCpltCallback>
}
 8006a44:	e006      	b.n	8006a54 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff fe8a 	bl	8006768 <HAL_I2C_MasterTxCpltCallback>
}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d11d      	bne.n	8006ab0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d10b      	bne.n	8006a94 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8c:	1c9a      	adds	r2, r3, #2
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006a92:	e073      	b.n	8006b7c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	121b      	asrs	r3, r3, #8
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006aae:	e065      	b.n	8006b7c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d10b      	bne.n	8006ad0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ace:	e055      	b.n	8006b7c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d151      	bne.n	8006b7c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	2b22      	cmp	r3, #34	; 0x22
 8006adc:	d10d      	bne.n	8006afa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006af8:	e040      	b.n	8006b7c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d015      	beq.n	8006b30 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b21      	cmp	r3, #33	; 0x21
 8006b08:	d112      	bne.n	8006b30 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	781a      	ldrb	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b2e:	e025      	b.n	8006b7c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d120      	bne.n	8006b7c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	2b21      	cmp	r3, #33	; 0x21
 8006b3e:	d11d      	bne.n	8006b7c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b4e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff fe36 	bl	80067e8 <HAL_I2C_MemTxCpltCallback>
}
 8006b7c:	bf00      	nop
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b22      	cmp	r3, #34	; 0x22
 8006b96:	f040 80ac 	bne.w	8006cf2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d921      	bls.n	8006bec <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	f040 808c 	bne.w	8006cf2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006bea:	e082      	b.n	8006cf2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d075      	beq.n	8006ce0 <I2C_MasterReceive_RXNE+0x15c>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d002      	beq.n	8006c00 <I2C_MasterReceive_RXNE+0x7c>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d16f      	bne.n	8006ce0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 f827 	bl	8007c54 <I2C_WaitOnSTOPRequestThroughIT>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d142      	bne.n	8006c92 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c1a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c2a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691a      	ldr	r2, [r3, #16]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b40      	cmp	r3, #64	; 0x40
 8006c64:	d10a      	bne.n	8006c7c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff fdc1 	bl	80067fc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006c7a:	e03a      	b.n	8006cf2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2212      	movs	r2, #18
 8006c88:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff fd76 	bl	800677c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006c90:	e02f      	b.n	8006cf2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ca0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff fd99 	bl	8006810 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006cde:	e008      	b.n	8006cf2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cee:	605a      	str	r2, [r3, #4]
}
 8006cf0:	e7ff      	b.n	8006cf2 <I2C_MasterReceive_RXNE+0x16e>
 8006cf2:	bf00      	nop
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d06:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d11b      	bne.n	8006d4a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d20:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691a      	ldr	r2, [r3, #16]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006d48:	e0bd      	b.n	8006ec6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d129      	bne.n	8006da8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d62:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d00a      	beq.n	8006d80 <I2C_MasterReceive_BTF+0x86>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d007      	beq.n	8006d80 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d7e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691a      	ldr	r2, [r3, #16]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006da6:	e08e      	b.n	8006ec6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d176      	bne.n	8006ea0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d002      	beq.n	8006dbe <I2C_MasterReceive_BTF+0xc4>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d108      	bne.n	8006dd0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e019      	b.n	8006e04 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d002      	beq.n	8006ddc <I2C_MasterReceive_BTF+0xe2>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d108      	bne.n	8006dee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	e00a      	b.n	8006e04 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b10      	cmp	r3, #16
 8006df2:	d007      	beq.n	8006e04 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006e5e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b40      	cmp	r3, #64	; 0x40
 8006e72:	d10a      	bne.n	8006e8a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff fcba 	bl	80067fc <HAL_I2C_MemRxCpltCallback>
}
 8006e88:	e01d      	b.n	8006ec6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2212      	movs	r2, #18
 8006e96:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff fc6f 	bl	800677c <HAL_I2C_MasterRxCpltCallback>
}
 8006e9e:	e012      	b.n	8006ec6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691a      	ldr	r2, [r3, #16]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d117      	bne.n	8006f12 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d109      	bne.n	8006efe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006efa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006efc:	e067      	b.n	8006fce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f043 0301 	orr.w	r3, r3, #1
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	611a      	str	r2, [r3, #16]
}
 8006f10:	e05d      	b.n	8006fce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f1a:	d133      	bne.n	8006f84 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b21      	cmp	r3, #33	; 0x21
 8006f26:	d109      	bne.n	8006f3c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f38:	611a      	str	r2, [r3, #16]
 8006f3a:	e008      	b.n	8006f4e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	f043 0301 	orr.w	r3, r3, #1
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <I2C_Master_SB+0x92>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d108      	bne.n	8006f72 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d032      	beq.n	8006fce <I2C_Master_SB+0x100>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d02d      	beq.n	8006fce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f80:	605a      	str	r2, [r3, #4]
}
 8006f82:	e024      	b.n	8006fce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10e      	bne.n	8006faa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	11db      	asrs	r3, r3, #7
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	f003 0306 	and.w	r3, r3, #6
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f063 030f 	orn	r3, r3, #15
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	611a      	str	r2, [r3, #16]
}
 8006fa8:	e011      	b.n	8006fce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d10d      	bne.n	8006fce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	11db      	asrs	r3, r3, #7
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	f003 0306 	and.w	r3, r3, #6
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	f063 030e 	orn	r3, r3, #14
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	611a      	str	r2, [r3, #16]
}
 8006fce:	bf00      	nop
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <I2C_Master_ADD10+0x26>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d108      	bne.n	8007012 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00c      	beq.n	8007022 <I2C_Master_ADD10+0x48>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007020:	605a      	str	r2, [r3, #4]
  }
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800702e:	b480      	push	{r7}
 8007030:	b091      	sub	sp, #68	; 0x44
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800703c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b22      	cmp	r3, #34	; 0x22
 8007056:	f040 8169 	bne.w	800732c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10f      	bne.n	8007082 <I2C_Master_ADDR+0x54>
 8007062:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007066:	2b40      	cmp	r3, #64	; 0x40
 8007068:	d10b      	bne.n	8007082 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800706a:	2300      	movs	r3, #0
 800706c:	633b      	str	r3, [r7, #48]	; 0x30
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	633b      	str	r3, [r7, #48]	; 0x30
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	633b      	str	r3, [r7, #48]	; 0x30
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	e160      	b.n	8007344 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007086:	2b00      	cmp	r3, #0
 8007088:	d11d      	bne.n	80070c6 <I2C_Master_ADDR+0x98>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007092:	d118      	bne.n	80070c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007094:	2300      	movs	r3, #0
 8007096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	651a      	str	r2, [r3, #80]	; 0x50
 80070c4:	e13e      	b.n	8007344 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d113      	bne.n	80070f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070d0:	2300      	movs	r3, #0
 80070d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80070e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	e115      	b.n	8007324 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b01      	cmp	r3, #1
 8007100:	f040 808a 	bne.w	8007218 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800710a:	d137      	bne.n	800717c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800711a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800712a:	d113      	bne.n	8007154 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800713a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800713c:	2300      	movs	r3, #0
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	627b      	str	r3, [r7, #36]	; 0x24
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	e0e7      	b.n	8007324 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007154:	2300      	movs	r3, #0
 8007156:	623b      	str	r3, [r7, #32]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	623b      	str	r3, [r7, #32]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	623b      	str	r3, [r7, #32]
 8007168:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e0d3      	b.n	8007324 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	2b08      	cmp	r3, #8
 8007180:	d02e      	beq.n	80071e0 <I2C_Master_ADDR+0x1b2>
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	2b20      	cmp	r3, #32
 8007186:	d02b      	beq.n	80071e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718a:	2b12      	cmp	r3, #18
 800718c:	d102      	bne.n	8007194 <I2C_Master_ADDR+0x166>
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	2b01      	cmp	r3, #1
 8007192:	d125      	bne.n	80071e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	2b04      	cmp	r3, #4
 8007198:	d00e      	beq.n	80071b8 <I2C_Master_ADDR+0x18a>
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	2b02      	cmp	r3, #2
 800719e:	d00b      	beq.n	80071b8 <I2C_Master_ADDR+0x18a>
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	2b10      	cmp	r3, #16
 80071a4:	d008      	beq.n	80071b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	e007      	b.n	80071c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071c8:	2300      	movs	r3, #0
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	61fb      	str	r3, [r7, #28]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	61fb      	str	r3, [r7, #28]
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	e0a1      	b.n	8007324 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f0:	2300      	movs	r3, #0
 80071f2:	61bb      	str	r3, [r7, #24]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	e085      	b.n	8007324 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800721c:	b29b      	uxth	r3, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d14d      	bne.n	80072be <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	2b04      	cmp	r3, #4
 8007226:	d016      	beq.n	8007256 <I2C_Master_ADDR+0x228>
 8007228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722a:	2b02      	cmp	r3, #2
 800722c:	d013      	beq.n	8007256 <I2C_Master_ADDR+0x228>
 800722e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007230:	2b10      	cmp	r3, #16
 8007232:	d010      	beq.n	8007256 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007242:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e007      	b.n	8007266 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007264:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007274:	d117      	bne.n	80072a6 <I2C_Master_ADDR+0x278>
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800727c:	d00b      	beq.n	8007296 <I2C_Master_ADDR+0x268>
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	2b01      	cmp	r3, #1
 8007282:	d008      	beq.n	8007296 <I2C_Master_ADDR+0x268>
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	2b08      	cmp	r3, #8
 8007288:	d005      	beq.n	8007296 <I2C_Master_ADDR+0x268>
 800728a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728c:	2b10      	cmp	r3, #16
 800728e:	d002      	beq.n	8007296 <I2C_Master_ADDR+0x268>
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	2b20      	cmp	r3, #32
 8007294:	d107      	bne.n	80072a6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	e032      	b.n	8007324 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072dc:	d117      	bne.n	800730e <I2C_Master_ADDR+0x2e0>
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072e4:	d00b      	beq.n	80072fe <I2C_Master_ADDR+0x2d0>
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d008      	beq.n	80072fe <I2C_Master_ADDR+0x2d0>
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	2b08      	cmp	r3, #8
 80072f0:	d005      	beq.n	80072fe <I2C_Master_ADDR+0x2d0>
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	2b10      	cmp	r3, #16
 80072f6:	d002      	beq.n	80072fe <I2C_Master_ADDR+0x2d0>
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d107      	bne.n	800730e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800730c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800730e:	2300      	movs	r3, #0
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	613b      	str	r3, [r7, #16]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	613b      	str	r3, [r7, #16]
 8007322:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800732a:	e00b      	b.n	8007344 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]
}
 8007342:	e7ff      	b.n	8007344 <I2C_Master_ADDR+0x316>
 8007344:	bf00      	nop
 8007346:	3744      	adds	r7, #68	; 0x44
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d02b      	beq.n	80073c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	781a      	ldrb	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007392:	b29b      	uxth	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d114      	bne.n	80073c2 <I2C_SlaveTransmit_TXE+0x72>
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	2b29      	cmp	r3, #41	; 0x29
 800739c:	d111      	bne.n	80073c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2221      	movs	r2, #33	; 0x21
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2228      	movs	r2, #40	; 0x28
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff f9e7 	bl	8006790 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80073c2:	bf00      	nop
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d011      	beq.n	8007400 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	781a      	ldrb	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d02c      	beq.n	8007480 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	691a      	ldr	r2, [r3, #16]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	b2d2      	uxtb	r2, r2
 8007432:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d114      	bne.n	8007480 <I2C_SlaveReceive_RXNE+0x74>
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b2a      	cmp	r3, #42	; 0x2a
 800745a:	d111      	bne.n	8007480 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800746a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2222      	movs	r2, #34	; 0x22
 8007470:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2228      	movs	r2, #40	; 0x28
 8007476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7ff f992 	bl	80067a4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007480:	bf00      	nop
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d012      	beq.n	80074c0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	691a      	ldr	r2, [r3, #16]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80074e6:	2b28      	cmp	r3, #40	; 0x28
 80074e8:	d127      	bne.n	800753a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	089b      	lsrs	r3, r3, #2
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007506:	2301      	movs	r3, #1
 8007508:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	09db      	lsrs	r3, r3, #7
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d103      	bne.n	800751e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	81bb      	strh	r3, [r7, #12]
 800751c:	e002      	b.n	8007524 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800752c:	89ba      	ldrh	r2, [r7, #12]
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff f940 	bl	80067b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007538:	e00e      	b.n	8007558 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800753a:	2300      	movs	r3, #0
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	60bb      	str	r3, [r7, #8]
 800754e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007558:	bf00      	nop
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800756e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800757e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007580:	2300      	movs	r3, #0
 8007582:	60bb      	str	r3, [r7, #8]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	60bb      	str	r3, [r7, #8]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0201 	orr.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075bc:	d172      	bne.n	80076a4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	2b22      	cmp	r3, #34	; 0x22
 80075c2:	d002      	beq.n	80075ca <I2C_Slave_STOPF+0x6a>
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	2b2a      	cmp	r3, #42	; 0x2a
 80075c8:	d135      	bne.n	8007636 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075dc:	b29b      	uxth	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	f043 0204 	orr.w	r2, r3, #4
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe f9e6 	bl	80059d4 <HAL_DMA_GetState>
 8007608:	4603      	mov	r3, r0
 800760a:	2b01      	cmp	r3, #1
 800760c:	d049      	beq.n	80076a2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	4a69      	ldr	r2, [pc, #420]	; (80077b8 <I2C_Slave_STOPF+0x258>)
 8007614:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe f82e 	bl	800567c <HAL_DMA_Abort_IT>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d03d      	beq.n	80076a2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007634:	e035      	b.n	80076a2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	b29a      	uxth	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	f043 0204 	orr.w	r2, r3, #4
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007668:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe f9b0 	bl	80059d4 <HAL_DMA_GetState>
 8007674:	4603      	mov	r3, r0
 8007676:	2b01      	cmp	r3, #1
 8007678:	d014      	beq.n	80076a4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767e:	4a4e      	ldr	r2, [pc, #312]	; (80077b8 <I2C_Slave_STOPF+0x258>)
 8007680:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007686:	4618      	mov	r0, r3
 8007688:	f7fd fff8 	bl	800567c <HAL_DMA_Abort_IT>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d008      	beq.n	80076a4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800769c:	4610      	mov	r0, r2
 800769e:	4798      	blx	r3
 80076a0:	e000      	b.n	80076a4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076a2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d03e      	beq.n	800772c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d112      	bne.n	80076e2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	1c5a      	adds	r2, r3, #1
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d8:	b29b      	uxth	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29a      	uxth	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ec:	2b40      	cmp	r3, #64	; 0x40
 80076ee:	d112      	bne.n	8007716 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	691a      	ldr	r2, [r3, #16]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d005      	beq.n	800772c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	f043 0204 	orr.w	r2, r3, #4
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f8b3 	bl	80078a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800773a:	e039      	b.n	80077b0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	2b2a      	cmp	r3, #42	; 0x2a
 8007740:	d109      	bne.n	8007756 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2228      	movs	r2, #40	; 0x28
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff f827 	bl	80067a4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b28      	cmp	r3, #40	; 0x28
 8007760:	d111      	bne.n	8007786 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a15      	ldr	r2, [pc, #84]	; (80077bc <I2C_Slave_STOPF+0x25c>)
 8007766:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff f828 	bl	80067d4 <HAL_I2C_ListenCpltCallback>
}
 8007784:	e014      	b.n	80077b0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	2b22      	cmp	r3, #34	; 0x22
 800778c:	d002      	beq.n	8007794 <I2C_Slave_STOPF+0x234>
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	2b22      	cmp	r3, #34	; 0x22
 8007792:	d10d      	bne.n	80077b0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7fe fffa 	bl	80067a4 <HAL_I2C_SlaveRxCpltCallback>
}
 80077b0:	bf00      	nop
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	08007b05 	.word	0x08007b05
 80077bc:	ffff0000 	.word	0xffff0000

080077c0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d002      	beq.n	80077e2 <I2C_Slave_AF+0x22>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d129      	bne.n	8007836 <I2C_Slave_AF+0x76>
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b28      	cmp	r3, #40	; 0x28
 80077e6:	d126      	bne.n	8007836 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a2c      	ldr	r2, [pc, #176]	; (800789c <I2C_Slave_AF+0xdc>)
 80077ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077fc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007806:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007816:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fe ffd0 	bl	80067d4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007834:	e02e      	b.n	8007894 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	2b21      	cmp	r3, #33	; 0x21
 800783a:	d126      	bne.n	800788a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a17      	ldr	r2, [pc, #92]	; (800789c <I2C_Slave_AF+0xdc>)
 8007840:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2221      	movs	r2, #33	; 0x21
 8007846:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007866:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007870:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007880:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fe ff84 	bl	8006790 <HAL_I2C_SlaveTxCpltCallback>
}
 8007888:	e004      	b.n	8007894 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007892:	615a      	str	r2, [r3, #20]
}
 8007894:	bf00      	nop
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	ffff0000 	.word	0xffff0000

080078a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b10      	cmp	r3, #16
 80078bc:	d002      	beq.n	80078c4 <I2C_ITError+0x24>
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	d10a      	bne.n	80078da <I2C_ITError+0x3a>
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	2b22      	cmp	r3, #34	; 0x22
 80078c8:	d107      	bne.n	80078da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80078e0:	2b28      	cmp	r3, #40	; 0x28
 80078e2:	d107      	bne.n	80078f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2228      	movs	r2, #40	; 0x28
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80078f2:	e015      	b.n	8007920 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007902:	d00a      	beq.n	800791a <I2C_ITError+0x7a>
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	2b60      	cmp	r3, #96	; 0x60
 8007908:	d007      	beq.n	800791a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2220      	movs	r2, #32
 800790e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800792a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800792e:	d162      	bne.n	80079f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800793e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b01      	cmp	r3, #1
 800794c:	d020      	beq.n	8007990 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007952:	4a6a      	ldr	r2, [pc, #424]	; (8007afc <I2C_ITError+0x25c>)
 8007954:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795a:	4618      	mov	r0, r3
 800795c:	f7fd fe8e 	bl	800567c <HAL_DMA_Abort_IT>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 8089 	beq.w	8007a7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0201 	bic.w	r2, r2, #1
 8007976:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800798a:	4610      	mov	r0, r2
 800798c:	4798      	blx	r3
 800798e:	e074      	b.n	8007a7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	4a59      	ldr	r2, [pc, #356]	; (8007afc <I2C_ITError+0x25c>)
 8007996:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	4618      	mov	r0, r3
 800799e:	f7fd fe6d 	bl	800567c <HAL_DMA_Abort_IT>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d068      	beq.n	8007a7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b2:	2b40      	cmp	r3, #64	; 0x40
 80079b4:	d10b      	bne.n	80079ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	b2d2      	uxtb	r2, r2
 80079c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0201 	bic.w	r2, r2, #1
 80079dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
 80079f4:	e041      	b.n	8007a7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b60      	cmp	r3, #96	; 0x60
 8007a00:	d125      	bne.n	8007a4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1a:	2b40      	cmp	r3, #64	; 0x40
 8007a1c:	d10b      	bne.n	8007a36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	691a      	ldr	r2, [r3, #16]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fe feec 	bl	8006824 <HAL_I2C_AbortCpltCallback>
 8007a4c:	e015      	b.n	8007a7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	d10b      	bne.n	8007a74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	691a      	ldr	r2, [r3, #16]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7fe fecb 	bl	8006810 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10e      	bne.n	8007aa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d109      	bne.n	8007aa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d104      	bne.n	8007aa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ab6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007abe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d113      	bne.n	8007af4 <I2C_ITError+0x254>
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
 8007ace:	2b28      	cmp	r3, #40	; 0x28
 8007ad0:	d110      	bne.n	8007af4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a0a      	ldr	r2, [pc, #40]	; (8007b00 <I2C_ITError+0x260>)
 8007ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7fe fe70 	bl	80067d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	08007b05 	.word	0x08007b05
 8007b00:	ffff0000 	.word	0xffff0000

08007b04 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b1c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b1e:	4b4b      	ldr	r3, [pc, #300]	; (8007c4c <I2C_DMAAbort+0x148>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	08db      	lsrs	r3, r3, #3
 8007b24:	4a4a      	ldr	r2, [pc, #296]	; (8007c50 <I2C_DMAAbort+0x14c>)
 8007b26:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2a:	0a1a      	lsrs	r2, r3, #8
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	00da      	lsls	r2, r3, #3
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	f043 0220 	orr.w	r2, r3, #32
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007b4a:	e00a      	b.n	8007b62 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b60:	d0ea      	beq.n	8007b38 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6e:	2200      	movs	r2, #0
 8007b70:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	2200      	movs	r2, #0
 8007b80:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b90:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2200      	movs	r2, #0
 8007b96:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0201 	bic.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b60      	cmp	r3, #96	; 0x60
 8007bd2:	d10e      	bne.n	8007bf2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2200      	movs	r2, #0
 8007be8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007bea:	6978      	ldr	r0, [r7, #20]
 8007bec:	f7fe fe1a 	bl	8006824 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007bf0:	e027      	b.n	8007c42 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bf2:	7cfb      	ldrb	r3, [r7, #19]
 8007bf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bf8:	2b28      	cmp	r3, #40	; 0x28
 8007bfa:	d117      	bne.n	8007c2c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 0201 	orr.w	r2, r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c1a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2228      	movs	r2, #40	; 0x28
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c2a:	e007      	b.n	8007c3c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007c3c:	6978      	ldr	r0, [r7, #20]
 8007c3e:	f7fe fde7 	bl	8006810 <HAL_I2C_ErrorCallback>
}
 8007c42:	bf00      	nop
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	20000284 	.word	0x20000284
 8007c50:	14f8b589 	.word	0x14f8b589

08007c54 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007c60:	4b13      	ldr	r3, [pc, #76]	; (8007cb0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	08db      	lsrs	r3, r3, #3
 8007c66:	4a13      	ldr	r2, [pc, #76]	; (8007cb4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007c68:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6c:	0a1a      	lsrs	r2, r3, #8
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d107      	bne.n	8007c92 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c86:	f043 0220 	orr.w	r2, r3, #32
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e008      	b.n	8007ca4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ca0:	d0e9      	beq.n	8007c76 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	20000284 	.word	0x20000284
 8007cb4:	14f8b589 	.word	0x14f8b589

08007cb8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007cc8:	d103      	bne.n	8007cd2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007cd0:	e007      	b.n	8007ce2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007cda:	d102      	bne.n	8007ce2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2208      	movs	r2, #8
 8007ce0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
	...

08007cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e267      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d075      	beq.n	8007dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d0e:	4b88      	ldr	r3, [pc, #544]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f003 030c 	and.w	r3, r3, #12
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d00c      	beq.n	8007d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d1a:	4b85      	ldr	r3, [pc, #532]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	d112      	bne.n	8007d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d26:	4b82      	ldr	r3, [pc, #520]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d32:	d10b      	bne.n	8007d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d34:	4b7e      	ldr	r3, [pc, #504]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d05b      	beq.n	8007df8 <HAL_RCC_OscConfig+0x108>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d157      	bne.n	8007df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e242      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d54:	d106      	bne.n	8007d64 <HAL_RCC_OscConfig+0x74>
 8007d56:	4b76      	ldr	r3, [pc, #472]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a75      	ldr	r2, [pc, #468]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	e01d      	b.n	8007da0 <HAL_RCC_OscConfig+0xb0>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d6c:	d10c      	bne.n	8007d88 <HAL_RCC_OscConfig+0x98>
 8007d6e:	4b70      	ldr	r3, [pc, #448]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a6f      	ldr	r2, [pc, #444]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	4b6d      	ldr	r3, [pc, #436]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a6c      	ldr	r2, [pc, #432]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	e00b      	b.n	8007da0 <HAL_RCC_OscConfig+0xb0>
 8007d88:	4b69      	ldr	r3, [pc, #420]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a68      	ldr	r2, [pc, #416]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	4b66      	ldr	r3, [pc, #408]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a65      	ldr	r2, [pc, #404]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d013      	beq.n	8007dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da8:	f7fc fdd2 	bl	8004950 <HAL_GetTick>
 8007dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dae:	e008      	b.n	8007dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007db0:	f7fc fdce 	bl	8004950 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b64      	cmp	r3, #100	; 0x64
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e207      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dc2:	4b5b      	ldr	r3, [pc, #364]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0f0      	beq.n	8007db0 <HAL_RCC_OscConfig+0xc0>
 8007dce:	e014      	b.n	8007dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dd0:	f7fc fdbe 	bl	8004950 <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dd8:	f7fc fdba 	bl	8004950 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b64      	cmp	r3, #100	; 0x64
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e1f3      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dea:	4b51      	ldr	r3, [pc, #324]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_OscConfig+0xe8>
 8007df6:	e000      	b.n	8007dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d063      	beq.n	8007ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e06:	4b4a      	ldr	r3, [pc, #296]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f003 030c 	and.w	r3, r3, #12
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00b      	beq.n	8007e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e12:	4b47      	ldr	r3, [pc, #284]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e1a:	2b08      	cmp	r3, #8
 8007e1c:	d11c      	bne.n	8007e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e1e:	4b44      	ldr	r3, [pc, #272]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d116      	bne.n	8007e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e2a:	4b41      	ldr	r3, [pc, #260]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d005      	beq.n	8007e42 <HAL_RCC_OscConfig+0x152>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d001      	beq.n	8007e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e1c7      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e42:	4b3b      	ldr	r3, [pc, #236]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	00db      	lsls	r3, r3, #3
 8007e50:	4937      	ldr	r1, [pc, #220]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e56:	e03a      	b.n	8007ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d020      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e60:	4b34      	ldr	r3, [pc, #208]	; (8007f34 <HAL_RCC_OscConfig+0x244>)
 8007e62:	2201      	movs	r2, #1
 8007e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e66:	f7fc fd73 	bl	8004950 <HAL_GetTick>
 8007e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e6c:	e008      	b.n	8007e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e6e:	f7fc fd6f 	bl	8004950 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d901      	bls.n	8007e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e1a8      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e80:	4b2b      	ldr	r3, [pc, #172]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0302 	and.w	r3, r3, #2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0f0      	beq.n	8007e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e8c:	4b28      	ldr	r3, [pc, #160]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	4925      	ldr	r1, [pc, #148]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	600b      	str	r3, [r1, #0]
 8007ea0:	e015      	b.n	8007ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ea2:	4b24      	ldr	r3, [pc, #144]	; (8007f34 <HAL_RCC_OscConfig+0x244>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea8:	f7fc fd52 	bl	8004950 <HAL_GetTick>
 8007eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007eae:	e008      	b.n	8007ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eb0:	f7fc fd4e 	bl	8004950 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e187      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ec2:	4b1b      	ldr	r3, [pc, #108]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1f0      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0308 	and.w	r3, r3, #8
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d036      	beq.n	8007f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d016      	beq.n	8007f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ee2:	4b15      	ldr	r3, [pc, #84]	; (8007f38 <HAL_RCC_OscConfig+0x248>)
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee8:	f7fc fd32 	bl	8004950 <HAL_GetTick>
 8007eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eee:	e008      	b.n	8007f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ef0:	f7fc fd2e 	bl	8004950 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d901      	bls.n	8007f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e167      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f02:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <HAL_RCC_OscConfig+0x240>)
 8007f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0f0      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x200>
 8007f0e:	e01b      	b.n	8007f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f10:	4b09      	ldr	r3, [pc, #36]	; (8007f38 <HAL_RCC_OscConfig+0x248>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f16:	f7fc fd1b 	bl	8004950 <HAL_GetTick>
 8007f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f1c:	e00e      	b.n	8007f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f1e:	f7fc fd17 	bl	8004950 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d907      	bls.n	8007f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e150      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
 8007f30:	40023800 	.word	0x40023800
 8007f34:	42470000 	.word	0x42470000
 8007f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f3c:	4b88      	ldr	r3, [pc, #544]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8007f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1ea      	bne.n	8007f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 8097 	beq.w	8008084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f56:	2300      	movs	r3, #0
 8007f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f5a:	4b81      	ldr	r3, [pc, #516]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10f      	bne.n	8007f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f66:	2300      	movs	r3, #0
 8007f68:	60bb      	str	r3, [r7, #8]
 8007f6a:	4b7d      	ldr	r3, [pc, #500]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	4a7c      	ldr	r2, [pc, #496]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8007f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f74:	6413      	str	r3, [r2, #64]	; 0x40
 8007f76:	4b7a      	ldr	r3, [pc, #488]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f7e:	60bb      	str	r3, [r7, #8]
 8007f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f82:	2301      	movs	r3, #1
 8007f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f86:	4b77      	ldr	r3, [pc, #476]	; (8008164 <HAL_RCC_OscConfig+0x474>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d118      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f92:	4b74      	ldr	r3, [pc, #464]	; (8008164 <HAL_RCC_OscConfig+0x474>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a73      	ldr	r2, [pc, #460]	; (8008164 <HAL_RCC_OscConfig+0x474>)
 8007f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f9e:	f7fc fcd7 	bl	8004950 <HAL_GetTick>
 8007fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fa4:	e008      	b.n	8007fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fa6:	f7fc fcd3 	bl	8004950 <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d901      	bls.n	8007fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e10c      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fb8:	4b6a      	ldr	r3, [pc, #424]	; (8008164 <HAL_RCC_OscConfig+0x474>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0f0      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d106      	bne.n	8007fda <HAL_RCC_OscConfig+0x2ea>
 8007fcc:	4b64      	ldr	r3, [pc, #400]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8007fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd0:	4a63      	ldr	r2, [pc, #396]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8007fd2:	f043 0301 	orr.w	r3, r3, #1
 8007fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fd8:	e01c      	b.n	8008014 <HAL_RCC_OscConfig+0x324>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	d10c      	bne.n	8007ffc <HAL_RCC_OscConfig+0x30c>
 8007fe2:	4b5f      	ldr	r3, [pc, #380]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	4a5e      	ldr	r2, [pc, #376]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8007fe8:	f043 0304 	orr.w	r3, r3, #4
 8007fec:	6713      	str	r3, [r2, #112]	; 0x70
 8007fee:	4b5c      	ldr	r3, [pc, #368]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8007ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff2:	4a5b      	ldr	r2, [pc, #364]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8007ff4:	f043 0301 	orr.w	r3, r3, #1
 8007ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8007ffa:	e00b      	b.n	8008014 <HAL_RCC_OscConfig+0x324>
 8007ffc:	4b58      	ldr	r3, [pc, #352]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8007ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008000:	4a57      	ldr	r2, [pc, #348]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8008002:	f023 0301 	bic.w	r3, r3, #1
 8008006:	6713      	str	r3, [r2, #112]	; 0x70
 8008008:	4b55      	ldr	r3, [pc, #340]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 800800a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800c:	4a54      	ldr	r2, [pc, #336]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 800800e:	f023 0304 	bic.w	r3, r3, #4
 8008012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d015      	beq.n	8008048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800801c:	f7fc fc98 	bl	8004950 <HAL_GetTick>
 8008020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008022:	e00a      	b.n	800803a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008024:	f7fc fc94 	bl	8004950 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008032:	4293      	cmp	r3, r2
 8008034:	d901      	bls.n	800803a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e0cb      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800803a:	4b49      	ldr	r3, [pc, #292]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0ee      	beq.n	8008024 <HAL_RCC_OscConfig+0x334>
 8008046:	e014      	b.n	8008072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008048:	f7fc fc82 	bl	8004950 <HAL_GetTick>
 800804c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800804e:	e00a      	b.n	8008066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008050:	f7fc fc7e 	bl	8004950 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	f241 3288 	movw	r2, #5000	; 0x1388
 800805e:	4293      	cmp	r3, r2
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e0b5      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008066:	4b3e      	ldr	r3, [pc, #248]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8008068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806a:	f003 0302 	and.w	r3, r3, #2
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1ee      	bne.n	8008050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d105      	bne.n	8008084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008078:	4b39      	ldr	r3, [pc, #228]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 800807a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807c:	4a38      	ldr	r2, [pc, #224]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 800807e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008082:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 80a1 	beq.w	80081d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800808e:	4b34      	ldr	r3, [pc, #208]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f003 030c 	and.w	r3, r3, #12
 8008096:	2b08      	cmp	r3, #8
 8008098:	d05c      	beq.n	8008154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d141      	bne.n	8008126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080a2:	4b31      	ldr	r3, [pc, #196]	; (8008168 <HAL_RCC_OscConfig+0x478>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a8:	f7fc fc52 	bl	8004950 <HAL_GetTick>
 80080ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ae:	e008      	b.n	80080c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080b0:	f7fc fc4e 	bl	8004950 <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e087      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080c2:	4b27      	ldr	r3, [pc, #156]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1f0      	bne.n	80080b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	69da      	ldr	r2, [r3, #28]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	431a      	orrs	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	019b      	lsls	r3, r3, #6
 80080de:	431a      	orrs	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e4:	085b      	lsrs	r3, r3, #1
 80080e6:	3b01      	subs	r3, #1
 80080e8:	041b      	lsls	r3, r3, #16
 80080ea:	431a      	orrs	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	061b      	lsls	r3, r3, #24
 80080f2:	491b      	ldr	r1, [pc, #108]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080f8:	4b1b      	ldr	r3, [pc, #108]	; (8008168 <HAL_RCC_OscConfig+0x478>)
 80080fa:	2201      	movs	r2, #1
 80080fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080fe:	f7fc fc27 	bl	8004950 <HAL_GetTick>
 8008102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008104:	e008      	b.n	8008118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008106:	f7fc fc23 	bl	8004950 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	2b02      	cmp	r3, #2
 8008112:	d901      	bls.n	8008118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008114:	2303      	movs	r3, #3
 8008116:	e05c      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008118:	4b11      	ldr	r3, [pc, #68]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d0f0      	beq.n	8008106 <HAL_RCC_OscConfig+0x416>
 8008124:	e054      	b.n	80081d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008126:	4b10      	ldr	r3, [pc, #64]	; (8008168 <HAL_RCC_OscConfig+0x478>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800812c:	f7fc fc10 	bl	8004950 <HAL_GetTick>
 8008130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008132:	e008      	b.n	8008146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008134:	f7fc fc0c 	bl	8004950 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d901      	bls.n	8008146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e045      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008146:	4b06      	ldr	r3, [pc, #24]	; (8008160 <HAL_RCC_OscConfig+0x470>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1f0      	bne.n	8008134 <HAL_RCC_OscConfig+0x444>
 8008152:	e03d      	b.n	80081d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d107      	bne.n	800816c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e038      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
 8008160:	40023800 	.word	0x40023800
 8008164:	40007000 	.word	0x40007000
 8008168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800816c:	4b1b      	ldr	r3, [pc, #108]	; (80081dc <HAL_RCC_OscConfig+0x4ec>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d028      	beq.n	80081cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008184:	429a      	cmp	r2, r3
 8008186:	d121      	bne.n	80081cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008192:	429a      	cmp	r2, r3
 8008194:	d11a      	bne.n	80081cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800819c:	4013      	ands	r3, r2
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d111      	bne.n	80081cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	085b      	lsrs	r3, r3, #1
 80081b4:	3b01      	subs	r3, #1
 80081b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d107      	bne.n	80081cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d001      	beq.n	80081d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	40023800 	.word	0x40023800

080081e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e0cc      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081f4:	4b68      	ldr	r3, [pc, #416]	; (8008398 <HAL_RCC_ClockConfig+0x1b8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d90c      	bls.n	800821c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008202:	4b65      	ldr	r3, [pc, #404]	; (8008398 <HAL_RCC_ClockConfig+0x1b8>)
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800820a:	4b63      	ldr	r3, [pc, #396]	; (8008398 <HAL_RCC_ClockConfig+0x1b8>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	429a      	cmp	r2, r3
 8008216:	d001      	beq.n	800821c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e0b8      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0302 	and.w	r3, r3, #2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d020      	beq.n	800826a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008234:	4b59      	ldr	r3, [pc, #356]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	4a58      	ldr	r2, [pc, #352]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 800823a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800823e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0308 	and.w	r3, r3, #8
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800824c:	4b53      	ldr	r3, [pc, #332]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	4a52      	ldr	r2, [pc, #328]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008258:	4b50      	ldr	r3, [pc, #320]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	494d      	ldr	r1, [pc, #308]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008266:	4313      	orrs	r3, r2
 8008268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d044      	beq.n	8008300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d107      	bne.n	800828e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800827e:	4b47      	ldr	r3, [pc, #284]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d119      	bne.n	80082be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e07f      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d003      	beq.n	800829e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800829a:	2b03      	cmp	r3, #3
 800829c:	d107      	bne.n	80082ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800829e:	4b3f      	ldr	r3, [pc, #252]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e06f      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082ae:	4b3b      	ldr	r3, [pc, #236]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e067      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082be:	4b37      	ldr	r3, [pc, #220]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f023 0203 	bic.w	r2, r3, #3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	4934      	ldr	r1, [pc, #208]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082d0:	f7fc fb3e 	bl	8004950 <HAL_GetTick>
 80082d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082d6:	e00a      	b.n	80082ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082d8:	f7fc fb3a 	bl	8004950 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d901      	bls.n	80082ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e04f      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ee:	4b2b      	ldr	r3, [pc, #172]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f003 020c 	and.w	r2, r3, #12
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d1eb      	bne.n	80082d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008300:	4b25      	ldr	r3, [pc, #148]	; (8008398 <HAL_RCC_ClockConfig+0x1b8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d20c      	bcs.n	8008328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800830e:	4b22      	ldr	r3, [pc, #136]	; (8008398 <HAL_RCC_ClockConfig+0x1b8>)
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008316:	4b20      	ldr	r3, [pc, #128]	; (8008398 <HAL_RCC_ClockConfig+0x1b8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	429a      	cmp	r2, r3
 8008322:	d001      	beq.n	8008328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e032      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b00      	cmp	r3, #0
 8008332:	d008      	beq.n	8008346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008334:	4b19      	ldr	r3, [pc, #100]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	4916      	ldr	r1, [pc, #88]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008342:	4313      	orrs	r3, r2
 8008344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0308 	and.w	r3, r3, #8
 800834e:	2b00      	cmp	r3, #0
 8008350:	d009      	beq.n	8008366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008352:	4b12      	ldr	r3, [pc, #72]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	490e      	ldr	r1, [pc, #56]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008362:	4313      	orrs	r3, r2
 8008364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008366:	f000 f821 	bl	80083ac <HAL_RCC_GetSysClockFreq>
 800836a:	4602      	mov	r2, r0
 800836c:	4b0b      	ldr	r3, [pc, #44]	; (800839c <HAL_RCC_ClockConfig+0x1bc>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	091b      	lsrs	r3, r3, #4
 8008372:	f003 030f 	and.w	r3, r3, #15
 8008376:	490a      	ldr	r1, [pc, #40]	; (80083a0 <HAL_RCC_ClockConfig+0x1c0>)
 8008378:	5ccb      	ldrb	r3, [r1, r3]
 800837a:	fa22 f303 	lsr.w	r3, r2, r3
 800837e:	4a09      	ldr	r2, [pc, #36]	; (80083a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008382:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f7fc fa9e 	bl	80048c8 <HAL_InitTick>

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	40023c00 	.word	0x40023c00
 800839c:	40023800 	.word	0x40023800
 80083a0:	0800c938 	.word	0x0800c938
 80083a4:	20000284 	.word	0x20000284
 80083a8:	20000288 	.word	0x20000288

080083ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083b0:	b094      	sub	sp, #80	; 0x50
 80083b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	647b      	str	r3, [r7, #68]	; 0x44
 80083b8:	2300      	movs	r3, #0
 80083ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083bc:	2300      	movs	r3, #0
 80083be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083c4:	4b79      	ldr	r3, [pc, #484]	; (80085ac <HAL_RCC_GetSysClockFreq+0x200>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f003 030c 	and.w	r3, r3, #12
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d00d      	beq.n	80083ec <HAL_RCC_GetSysClockFreq+0x40>
 80083d0:	2b08      	cmp	r3, #8
 80083d2:	f200 80e1 	bhi.w	8008598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <HAL_RCC_GetSysClockFreq+0x34>
 80083da:	2b04      	cmp	r3, #4
 80083dc:	d003      	beq.n	80083e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80083de:	e0db      	b.n	8008598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083e0:	4b73      	ldr	r3, [pc, #460]	; (80085b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80083e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80083e4:	e0db      	b.n	800859e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083e6:	4b73      	ldr	r3, [pc, #460]	; (80085b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80083e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80083ea:	e0d8      	b.n	800859e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083ec:	4b6f      	ldr	r3, [pc, #444]	; (80085ac <HAL_RCC_GetSysClockFreq+0x200>)
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083f6:	4b6d      	ldr	r3, [pc, #436]	; (80085ac <HAL_RCC_GetSysClockFreq+0x200>)
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d063      	beq.n	80084ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008402:	4b6a      	ldr	r3, [pc, #424]	; (80085ac <HAL_RCC_GetSysClockFreq+0x200>)
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	099b      	lsrs	r3, r3, #6
 8008408:	2200      	movs	r2, #0
 800840a:	63bb      	str	r3, [r7, #56]	; 0x38
 800840c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008414:	633b      	str	r3, [r7, #48]	; 0x30
 8008416:	2300      	movs	r3, #0
 8008418:	637b      	str	r3, [r7, #52]	; 0x34
 800841a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800841e:	4622      	mov	r2, r4
 8008420:	462b      	mov	r3, r5
 8008422:	f04f 0000 	mov.w	r0, #0
 8008426:	f04f 0100 	mov.w	r1, #0
 800842a:	0159      	lsls	r1, r3, #5
 800842c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008430:	0150      	lsls	r0, r2, #5
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4621      	mov	r1, r4
 8008438:	1a51      	subs	r1, r2, r1
 800843a:	6139      	str	r1, [r7, #16]
 800843c:	4629      	mov	r1, r5
 800843e:	eb63 0301 	sbc.w	r3, r3, r1
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	f04f 0200 	mov.w	r2, #0
 8008448:	f04f 0300 	mov.w	r3, #0
 800844c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008450:	4659      	mov	r1, fp
 8008452:	018b      	lsls	r3, r1, #6
 8008454:	4651      	mov	r1, sl
 8008456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800845a:	4651      	mov	r1, sl
 800845c:	018a      	lsls	r2, r1, #6
 800845e:	4651      	mov	r1, sl
 8008460:	ebb2 0801 	subs.w	r8, r2, r1
 8008464:	4659      	mov	r1, fp
 8008466:	eb63 0901 	sbc.w	r9, r3, r1
 800846a:	f04f 0200 	mov.w	r2, #0
 800846e:	f04f 0300 	mov.w	r3, #0
 8008472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800847a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800847e:	4690      	mov	r8, r2
 8008480:	4699      	mov	r9, r3
 8008482:	4623      	mov	r3, r4
 8008484:	eb18 0303 	adds.w	r3, r8, r3
 8008488:	60bb      	str	r3, [r7, #8]
 800848a:	462b      	mov	r3, r5
 800848c:	eb49 0303 	adc.w	r3, r9, r3
 8008490:	60fb      	str	r3, [r7, #12]
 8008492:	f04f 0200 	mov.w	r2, #0
 8008496:	f04f 0300 	mov.w	r3, #0
 800849a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800849e:	4629      	mov	r1, r5
 80084a0:	024b      	lsls	r3, r1, #9
 80084a2:	4621      	mov	r1, r4
 80084a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80084a8:	4621      	mov	r1, r4
 80084aa:	024a      	lsls	r2, r1, #9
 80084ac:	4610      	mov	r0, r2
 80084ae:	4619      	mov	r1, r3
 80084b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084b2:	2200      	movs	r2, #0
 80084b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80084b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084bc:	f7f8 fc56 	bl	8000d6c <__aeabi_uldivmod>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4613      	mov	r3, r2
 80084c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084c8:	e058      	b.n	800857c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084ca:	4b38      	ldr	r3, [pc, #224]	; (80085ac <HAL_RCC_GetSysClockFreq+0x200>)
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	099b      	lsrs	r3, r3, #6
 80084d0:	2200      	movs	r2, #0
 80084d2:	4618      	mov	r0, r3
 80084d4:	4611      	mov	r1, r2
 80084d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80084da:	623b      	str	r3, [r7, #32]
 80084dc:	2300      	movs	r3, #0
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
 80084e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80084e4:	4642      	mov	r2, r8
 80084e6:	464b      	mov	r3, r9
 80084e8:	f04f 0000 	mov.w	r0, #0
 80084ec:	f04f 0100 	mov.w	r1, #0
 80084f0:	0159      	lsls	r1, r3, #5
 80084f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084f6:	0150      	lsls	r0, r2, #5
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4641      	mov	r1, r8
 80084fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8008502:	4649      	mov	r1, r9
 8008504:	eb63 0b01 	sbc.w	fp, r3, r1
 8008508:	f04f 0200 	mov.w	r2, #0
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800851c:	ebb2 040a 	subs.w	r4, r2, sl
 8008520:	eb63 050b 	sbc.w	r5, r3, fp
 8008524:	f04f 0200 	mov.w	r2, #0
 8008528:	f04f 0300 	mov.w	r3, #0
 800852c:	00eb      	lsls	r3, r5, #3
 800852e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008532:	00e2      	lsls	r2, r4, #3
 8008534:	4614      	mov	r4, r2
 8008536:	461d      	mov	r5, r3
 8008538:	4643      	mov	r3, r8
 800853a:	18e3      	adds	r3, r4, r3
 800853c:	603b      	str	r3, [r7, #0]
 800853e:	464b      	mov	r3, r9
 8008540:	eb45 0303 	adc.w	r3, r5, r3
 8008544:	607b      	str	r3, [r7, #4]
 8008546:	f04f 0200 	mov.w	r2, #0
 800854a:	f04f 0300 	mov.w	r3, #0
 800854e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008552:	4629      	mov	r1, r5
 8008554:	028b      	lsls	r3, r1, #10
 8008556:	4621      	mov	r1, r4
 8008558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800855c:	4621      	mov	r1, r4
 800855e:	028a      	lsls	r2, r1, #10
 8008560:	4610      	mov	r0, r2
 8008562:	4619      	mov	r1, r3
 8008564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008566:	2200      	movs	r2, #0
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	61fa      	str	r2, [r7, #28]
 800856c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008570:	f7f8 fbfc 	bl	8000d6c <__aeabi_uldivmod>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4613      	mov	r3, r2
 800857a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800857c:	4b0b      	ldr	r3, [pc, #44]	; (80085ac <HAL_RCC_GetSysClockFreq+0x200>)
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	0c1b      	lsrs	r3, r3, #16
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	3301      	adds	r3, #1
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800858c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800858e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008590:	fbb2 f3f3 	udiv	r3, r2, r3
 8008594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008596:	e002      	b.n	800859e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008598:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800859a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800859c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800859e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3750      	adds	r7, #80	; 0x50
 80085a4:	46bd      	mov	sp, r7
 80085a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085aa:	bf00      	nop
 80085ac:	40023800 	.word	0x40023800
 80085b0:	00f42400 	.word	0x00f42400
 80085b4:	007a1200 	.word	0x007a1200

080085b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085b8:	b480      	push	{r7}
 80085ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085bc:	4b03      	ldr	r3, [pc, #12]	; (80085cc <HAL_RCC_GetHCLKFreq+0x14>)
 80085be:	681b      	ldr	r3, [r3, #0]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	20000284 	.word	0x20000284

080085d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085d4:	f7ff fff0 	bl	80085b8 <HAL_RCC_GetHCLKFreq>
 80085d8:	4602      	mov	r2, r0
 80085da:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	0a9b      	lsrs	r3, r3, #10
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	4903      	ldr	r1, [pc, #12]	; (80085f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085e6:	5ccb      	ldrb	r3, [r1, r3]
 80085e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	40023800 	.word	0x40023800
 80085f4:	0800c948 	.word	0x0800c948

080085f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085fc:	f7ff ffdc 	bl	80085b8 <HAL_RCC_GetHCLKFreq>
 8008600:	4602      	mov	r2, r0
 8008602:	4b05      	ldr	r3, [pc, #20]	; (8008618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	0b5b      	lsrs	r3, r3, #13
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	4903      	ldr	r1, [pc, #12]	; (800861c <HAL_RCC_GetPCLK2Freq+0x24>)
 800860e:	5ccb      	ldrb	r3, [r1, r3]
 8008610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008614:	4618      	mov	r0, r3
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40023800 	.word	0x40023800
 800861c:	0800c948 	.word	0x0800c948

08008620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e04c      	b.n	80086cc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d111      	bne.n	8008662 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 fba4 	bl	8009d94 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a1f      	ldr	r2, [pc, #124]	; (80086d4 <HAL_TIM_Base_Init+0xb4>)
 8008658:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2202      	movs	r2, #2
 8008666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3304      	adds	r3, #4
 8008672:	4619      	mov	r1, r3
 8008674:	4610      	mov	r0, r2
 8008676:	f001 f8c1 	bl	80097fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	080041c9 	.word	0x080041c9

080086d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d001      	beq.n	80086f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e03c      	b.n	800876a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a1e      	ldr	r2, [pc, #120]	; (8008778 <HAL_TIM_Base_Start+0xa0>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d018      	beq.n	8008734 <HAL_TIM_Base_Start+0x5c>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800870a:	d013      	beq.n	8008734 <HAL_TIM_Base_Start+0x5c>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a1a      	ldr	r2, [pc, #104]	; (800877c <HAL_TIM_Base_Start+0xa4>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00e      	beq.n	8008734 <HAL_TIM_Base_Start+0x5c>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a19      	ldr	r2, [pc, #100]	; (8008780 <HAL_TIM_Base_Start+0xa8>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d009      	beq.n	8008734 <HAL_TIM_Base_Start+0x5c>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a17      	ldr	r2, [pc, #92]	; (8008784 <HAL_TIM_Base_Start+0xac>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d004      	beq.n	8008734 <HAL_TIM_Base_Start+0x5c>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a16      	ldr	r2, [pc, #88]	; (8008788 <HAL_TIM_Base_Start+0xb0>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d111      	bne.n	8008758 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f003 0307 	and.w	r3, r3, #7
 800873e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b06      	cmp	r3, #6
 8008744:	d010      	beq.n	8008768 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f042 0201 	orr.w	r2, r2, #1
 8008754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008756:	e007      	b.n	8008768 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0201 	orr.w	r2, r2, #1
 8008766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	40010000 	.word	0x40010000
 800877c:	40000400 	.word	0x40000400
 8008780:	40000800 	.word	0x40000800
 8008784:	40000c00 	.word	0x40000c00
 8008788:	40014000 	.word	0x40014000

0800878c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b01      	cmp	r3, #1
 800879e:	d001      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e044      	b.n	800882e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0201 	orr.w	r2, r2, #1
 80087ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a1e      	ldr	r2, [pc, #120]	; (800883c <HAL_TIM_Base_Start_IT+0xb0>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d018      	beq.n	80087f8 <HAL_TIM_Base_Start_IT+0x6c>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ce:	d013      	beq.n	80087f8 <HAL_TIM_Base_Start_IT+0x6c>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a1a      	ldr	r2, [pc, #104]	; (8008840 <HAL_TIM_Base_Start_IT+0xb4>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00e      	beq.n	80087f8 <HAL_TIM_Base_Start_IT+0x6c>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a19      	ldr	r2, [pc, #100]	; (8008844 <HAL_TIM_Base_Start_IT+0xb8>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d009      	beq.n	80087f8 <HAL_TIM_Base_Start_IT+0x6c>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a17      	ldr	r2, [pc, #92]	; (8008848 <HAL_TIM_Base_Start_IT+0xbc>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d004      	beq.n	80087f8 <HAL_TIM_Base_Start_IT+0x6c>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a16      	ldr	r2, [pc, #88]	; (800884c <HAL_TIM_Base_Start_IT+0xc0>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d111      	bne.n	800881c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f003 0307 	and.w	r3, r3, #7
 8008802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b06      	cmp	r3, #6
 8008808:	d010      	beq.n	800882c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f042 0201 	orr.w	r2, r2, #1
 8008818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800881a:	e007      	b.n	800882c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	40010000 	.word	0x40010000
 8008840:	40000400 	.word	0x40000400
 8008844:	40000800 	.word	0x40000800
 8008848:	40000c00 	.word	0x40000c00
 800884c:	40014000 	.word	0x40014000

08008850 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e04c      	b.n	80088fc <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d111      	bne.n	8008892 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f001 fa8c 	bl	8009d94 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008880:	2b00      	cmp	r3, #0
 8008882:	d102      	bne.n	800888a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a1f      	ldr	r2, [pc, #124]	; (8008904 <HAL_TIM_OC_Init+0xb4>)
 8008888:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2202      	movs	r2, #2
 8008896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	3304      	adds	r3, #4
 80088a2:	4619      	mov	r1, r3
 80088a4:	4610      	mov	r0, r2
 80088a6:	f000 ffa9 	bl	80097fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	08008909 	.word	0x08008909

08008908 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e04c      	b.n	80089c8 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d111      	bne.n	800895e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f001 fa26 	bl	8009d94 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800894c:	2b00      	cmp	r3, #0
 800894e:	d102      	bne.n	8008956 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a1f      	ldr	r2, [pc, #124]	; (80089d0 <HAL_TIM_PWM_Init+0xb4>)
 8008954:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2202      	movs	r2, #2
 8008962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	3304      	adds	r3, #4
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f000 ff43 	bl	80097fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	080089d5 	.word	0x080089d5

080089d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d109      	bne.n	8008a0c <HAL_TIM_PWM_Start+0x24>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	bf14      	ite	ne
 8008a04:	2301      	movne	r3, #1
 8008a06:	2300      	moveq	r3, #0
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	e022      	b.n	8008a52 <HAL_TIM_PWM_Start+0x6a>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d109      	bne.n	8008a26 <HAL_TIM_PWM_Start+0x3e>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	bf14      	ite	ne
 8008a1e:	2301      	movne	r3, #1
 8008a20:	2300      	moveq	r3, #0
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	e015      	b.n	8008a52 <HAL_TIM_PWM_Start+0x6a>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	d109      	bne.n	8008a40 <HAL_TIM_PWM_Start+0x58>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	bf14      	ite	ne
 8008a38:	2301      	movne	r3, #1
 8008a3a:	2300      	moveq	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	e008      	b.n	8008a52 <HAL_TIM_PWM_Start+0x6a>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	bf14      	ite	ne
 8008a4c:	2301      	movne	r3, #1
 8008a4e:	2300      	moveq	r3, #0
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e068      	b.n	8008b2c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d104      	bne.n	8008a6a <HAL_TIM_PWM_Start+0x82>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a68:	e013      	b.n	8008a92 <HAL_TIM_PWM_Start+0xaa>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	d104      	bne.n	8008a7a <HAL_TIM_PWM_Start+0x92>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a78:	e00b      	b.n	8008a92 <HAL_TIM_PWM_Start+0xaa>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b08      	cmp	r3, #8
 8008a7e:	d104      	bne.n	8008a8a <HAL_TIM_PWM_Start+0xa2>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a88:	e003      	b.n	8008a92 <HAL_TIM_PWM_Start+0xaa>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2201      	movs	r2, #1
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f001 f954 	bl	8009d48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a23      	ldr	r2, [pc, #140]	; (8008b34 <HAL_TIM_PWM_Start+0x14c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d107      	bne.n	8008aba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ab8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a1d      	ldr	r2, [pc, #116]	; (8008b34 <HAL_TIM_PWM_Start+0x14c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d018      	beq.n	8008af6 <HAL_TIM_PWM_Start+0x10e>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008acc:	d013      	beq.n	8008af6 <HAL_TIM_PWM_Start+0x10e>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a19      	ldr	r2, [pc, #100]	; (8008b38 <HAL_TIM_PWM_Start+0x150>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d00e      	beq.n	8008af6 <HAL_TIM_PWM_Start+0x10e>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a17      	ldr	r2, [pc, #92]	; (8008b3c <HAL_TIM_PWM_Start+0x154>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d009      	beq.n	8008af6 <HAL_TIM_PWM_Start+0x10e>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a16      	ldr	r2, [pc, #88]	; (8008b40 <HAL_TIM_PWM_Start+0x158>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d004      	beq.n	8008af6 <HAL_TIM_PWM_Start+0x10e>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a14      	ldr	r2, [pc, #80]	; (8008b44 <HAL_TIM_PWM_Start+0x15c>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d111      	bne.n	8008b1a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f003 0307 	and.w	r3, r3, #7
 8008b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2b06      	cmp	r3, #6
 8008b06:	d010      	beq.n	8008b2a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f042 0201 	orr.w	r2, r2, #1
 8008b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b18:	e007      	b.n	8008b2a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f042 0201 	orr.w	r2, r2, #1
 8008b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	40010000 	.word	0x40010000
 8008b38:	40000400 	.word	0x40000400
 8008b3c:	40000800 	.word	0x40000800
 8008b40:	40000c00 	.word	0x40000c00
 8008b44:	40014000 	.word	0x40014000

08008b48 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b70:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d108      	bne.n	8008b8a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d105      	bne.n	8008b8a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b7e:	7b7b      	ldrb	r3, [r7, #13]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d102      	bne.n	8008b8a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b84:	7b3b      	ldrb	r3, [r7, #12]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d001      	beq.n	8008b8e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e03b      	b.n	8008c06 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2202      	movs	r2, #2
 8008b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f042 0202 	orr.w	r2, r2, #2
 8008bbc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f042 0204 	orr.w	r2, r2, #4
 8008bcc:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f001 f8b6 	bl	8009d48 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2201      	movs	r2, #1
 8008be2:	2104      	movs	r1, #4
 8008be4:	4618      	mov	r0, r3
 8008be6:	f001 f8af 	bl	8009d48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a08      	ldr	r2, [pc, #32]	; (8008c10 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d107      	bne.n	8008c04 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	40010000 	.word	0x40010000

08008c14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e0a2      	b.n	8008d6e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d111      	bne.n	8008c58 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 f8a9 	bl	8009d94 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d102      	bne.n	8008c50 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a4a      	ldr	r2, [pc, #296]	; (8008d78 <HAL_TIM_Encoder_Init+0x164>)
 8008c4e:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	6812      	ldr	r2, [r2, #0]
 8008c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c6e:	f023 0307 	bic.w	r3, r3, #7
 8008c72:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f000 fdbc 	bl	80097fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cac:	f023 0303 	bic.w	r3, r3, #3
 8008cb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	021b      	lsls	r3, r3, #8
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008cca:	f023 030c 	bic.w	r3, r3, #12
 8008cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	021b      	lsls	r3, r3, #8
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	011a      	lsls	r2, r3, #4
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	031b      	lsls	r3, r3, #12
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008d08:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008d10:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	011b      	lsls	r3, r3, #4
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	08004291 	.word	0x08004291

08008d7c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008da4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d110      	bne.n	8008dce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d102      	bne.n	8008db8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008db2:	7b7b      	ldrb	r3, [r7, #13]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d001      	beq.n	8008dbc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e069      	b.n	8008e90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dcc:	e031      	b.n	8008e32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	d110      	bne.n	8008df6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dd4:	7bbb      	ldrb	r3, [r7, #14]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d102      	bne.n	8008de0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008dda:	7b3b      	ldrb	r3, [r7, #12]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d001      	beq.n	8008de4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e055      	b.n	8008e90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008df4:	e01d      	b.n	8008e32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d108      	bne.n	8008e0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d105      	bne.n	8008e0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e02:	7b7b      	ldrb	r3, [r7, #13]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d102      	bne.n	8008e0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e08:	7b3b      	ldrb	r3, [r7, #12]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d001      	beq.n	8008e12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e03e      	b.n	8008e90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2202      	movs	r2, #2
 8008e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2202      	movs	r2, #2
 8008e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d003      	beq.n	8008e40 <HAL_TIM_Encoder_Start+0xc4>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d008      	beq.n	8008e50 <HAL_TIM_Encoder_Start+0xd4>
 8008e3e:	e00f      	b.n	8008e60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2201      	movs	r2, #1
 8008e46:	2100      	movs	r1, #0
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 ff7d 	bl	8009d48 <TIM_CCxChannelCmd>
      break;
 8008e4e:	e016      	b.n	8008e7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2201      	movs	r2, #1
 8008e56:	2104      	movs	r1, #4
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 ff75 	bl	8009d48 <TIM_CCxChannelCmd>
      break;
 8008e5e:	e00e      	b.n	8008e7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2201      	movs	r2, #1
 8008e66:	2100      	movs	r1, #0
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 ff6d 	bl	8009d48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2201      	movs	r2, #1
 8008e74:	2104      	movs	r1, #4
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 ff66 	bl	8009d48 <TIM_CCxChannelCmd>
      break;
 8008e7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f042 0201 	orr.w	r2, r2, #1
 8008e8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d128      	bne.n	8008f00 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d121      	bne.n	8008f00 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f06f 0202 	mvn.w	r2, #2
 8008ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	f003 0303 	and.w	r3, r3, #3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	4798      	blx	r3
 8008ee4:	e009      	b.n	8008efa <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	2b04      	cmp	r3, #4
 8008f0c:	d128      	bne.n	8008f60 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	d121      	bne.n	8008f60 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f06f 0204 	mvn.w	r2, #4
 8008f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2202      	movs	r2, #2
 8008f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	4798      	blx	r3
 8008f44:	e009      	b.n	8008f5a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	f003 0308 	and.w	r3, r3, #8
 8008f6a:	2b08      	cmp	r3, #8
 8008f6c:	d128      	bne.n	8008fc0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f003 0308 	and.w	r3, r3, #8
 8008f78:	2b08      	cmp	r3, #8
 8008f7a:	d121      	bne.n	8008fc0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f06f 0208 	mvn.w	r2, #8
 8008f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2204      	movs	r2, #4
 8008f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	f003 0303 	and.w	r3, r3, #3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d005      	beq.n	8008fa6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	4798      	blx	r3
 8008fa4:	e009      	b.n	8008fba <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f003 0310 	and.w	r3, r3, #16
 8008fca:	2b10      	cmp	r3, #16
 8008fcc:	d128      	bne.n	8009020 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f003 0310 	and.w	r3, r3, #16
 8008fd8:	2b10      	cmp	r3, #16
 8008fda:	d121      	bne.n	8009020 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f06f 0210 	mvn.w	r2, #16
 8008fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2208      	movs	r2, #8
 8008fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d005      	beq.n	8009006 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	4798      	blx	r3
 8009004:	e009      	b.n	800901a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b01      	cmp	r3, #1
 800902c:	d110      	bne.n	8009050 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b01      	cmp	r3, #1
 800903a:	d109      	bne.n	8009050 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0201 	mvn.w	r2, #1
 8009044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800905a:	2b80      	cmp	r3, #128	; 0x80
 800905c:	d110      	bne.n	8009080 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009068:	2b80      	cmp	r3, #128	; 0x80
 800906a:	d109      	bne.n	8009080 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908a:	2b40      	cmp	r3, #64	; 0x40
 800908c:	d110      	bne.n	80090b0 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009098:	2b40      	cmp	r3, #64	; 0x40
 800909a:	d109      	bne.n	80090b0 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	f003 0320 	and.w	r3, r3, #32
 80090ba:	2b20      	cmp	r3, #32
 80090bc:	d110      	bne.n	80090e0 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0320 	and.w	r3, r3, #32
 80090c8:	2b20      	cmp	r3, #32
 80090ca:	d109      	bne.n	80090e0 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0220 	mvn.w	r2, #32
 80090d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d101      	bne.n	8009106 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009102:	2302      	movs	r3, #2
 8009104:	e048      	b.n	8009198 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b0c      	cmp	r3, #12
 8009112:	d839      	bhi.n	8009188 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009114:	a201      	add	r2, pc, #4	; (adr r2, 800911c <HAL_TIM_OC_ConfigChannel+0x34>)
 8009116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911a:	bf00      	nop
 800911c:	08009151 	.word	0x08009151
 8009120:	08009189 	.word	0x08009189
 8009124:	08009189 	.word	0x08009189
 8009128:	08009189 	.word	0x08009189
 800912c:	0800915f 	.word	0x0800915f
 8009130:	08009189 	.word	0x08009189
 8009134:	08009189 	.word	0x08009189
 8009138:	08009189 	.word	0x08009189
 800913c:	0800916d 	.word	0x0800916d
 8009140:	08009189 	.word	0x08009189
 8009144:	08009189 	.word	0x08009189
 8009148:	08009189 	.word	0x08009189
 800914c:	0800917b 	.word	0x0800917b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fbd0 	bl	80098fc <TIM_OC1_SetConfig>
      break;
 800915c:	e017      	b.n	800918e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	4618      	mov	r0, r3
 8009166:	f000 fc2f 	bl	80099c8 <TIM_OC2_SetConfig>
      break;
 800916a:	e010      	b.n	800918e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68b9      	ldr	r1, [r7, #8]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fc94 	bl	8009aa0 <TIM_OC3_SetConfig>
      break;
 8009178:	e009      	b.n	800918e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68b9      	ldr	r1, [r7, #8]
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fcf7 	bl	8009b74 <TIM_OC4_SetConfig>
      break;
 8009186:	e002      	b.n	800918e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	75fb      	strb	r3, [r7, #23]
      break;
 800918c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009196:	7dfb      	ldrb	r3, [r7, #23]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3718      	adds	r7, #24
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d101      	bne.n	80091be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80091ba:	2302      	movs	r3, #2
 80091bc:	e0ae      	b.n	800931c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b0c      	cmp	r3, #12
 80091ca:	f200 809f 	bhi.w	800930c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80091ce:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d4:	08009209 	.word	0x08009209
 80091d8:	0800930d 	.word	0x0800930d
 80091dc:	0800930d 	.word	0x0800930d
 80091e0:	0800930d 	.word	0x0800930d
 80091e4:	08009249 	.word	0x08009249
 80091e8:	0800930d 	.word	0x0800930d
 80091ec:	0800930d 	.word	0x0800930d
 80091f0:	0800930d 	.word	0x0800930d
 80091f4:	0800928b 	.word	0x0800928b
 80091f8:	0800930d 	.word	0x0800930d
 80091fc:	0800930d 	.word	0x0800930d
 8009200:	0800930d 	.word	0x0800930d
 8009204:	080092cb 	.word	0x080092cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fb74 	bl	80098fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	699a      	ldr	r2, [r3, #24]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f042 0208 	orr.w	r2, r2, #8
 8009222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699a      	ldr	r2, [r3, #24]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 0204 	bic.w	r2, r2, #4
 8009232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6999      	ldr	r1, [r3, #24]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	691a      	ldr	r2, [r3, #16]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	619a      	str	r2, [r3, #24]
      break;
 8009246:	e064      	b.n	8009312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68b9      	ldr	r1, [r7, #8]
 800924e:	4618      	mov	r0, r3
 8009250:	f000 fbba 	bl	80099c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	699a      	ldr	r2, [r3, #24]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699a      	ldr	r2, [r3, #24]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6999      	ldr	r1, [r3, #24]
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	021a      	lsls	r2, r3, #8
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	619a      	str	r2, [r3, #24]
      break;
 8009288:	e043      	b.n	8009312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fc05 	bl	8009aa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69da      	ldr	r2, [r3, #28]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f042 0208 	orr.w	r2, r2, #8
 80092a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69da      	ldr	r2, [r3, #28]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 0204 	bic.w	r2, r2, #4
 80092b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69d9      	ldr	r1, [r3, #28]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	691a      	ldr	r2, [r3, #16]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	430a      	orrs	r2, r1
 80092c6:	61da      	str	r2, [r3, #28]
      break;
 80092c8:	e023      	b.n	8009312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68b9      	ldr	r1, [r7, #8]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 fc4f 	bl	8009b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	69da      	ldr	r2, [r3, #28]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69da      	ldr	r2, [r3, #28]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69d9      	ldr	r1, [r3, #28]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	021a      	lsls	r2, r3, #8
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	61da      	str	r2, [r3, #28]
      break;
 800930a:	e002      	b.n	8009312 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	75fb      	strb	r3, [r7, #23]
      break;
 8009310:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800931a:	7dfb      	ldrb	r3, [r7, #23]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009338:	2b01      	cmp	r3, #1
 800933a:	d101      	bne.n	8009340 <HAL_TIM_ConfigClockSource+0x1c>
 800933c:	2302      	movs	r3, #2
 800933e:	e0b4      	b.n	80094aa <HAL_TIM_ConfigClockSource+0x186>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800935e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009378:	d03e      	beq.n	80093f8 <HAL_TIM_ConfigClockSource+0xd4>
 800937a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800937e:	f200 8087 	bhi.w	8009490 <HAL_TIM_ConfigClockSource+0x16c>
 8009382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009386:	f000 8086 	beq.w	8009496 <HAL_TIM_ConfigClockSource+0x172>
 800938a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800938e:	d87f      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x16c>
 8009390:	2b70      	cmp	r3, #112	; 0x70
 8009392:	d01a      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0xa6>
 8009394:	2b70      	cmp	r3, #112	; 0x70
 8009396:	d87b      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x16c>
 8009398:	2b60      	cmp	r3, #96	; 0x60
 800939a:	d050      	beq.n	800943e <HAL_TIM_ConfigClockSource+0x11a>
 800939c:	2b60      	cmp	r3, #96	; 0x60
 800939e:	d877      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x16c>
 80093a0:	2b50      	cmp	r3, #80	; 0x50
 80093a2:	d03c      	beq.n	800941e <HAL_TIM_ConfigClockSource+0xfa>
 80093a4:	2b50      	cmp	r3, #80	; 0x50
 80093a6:	d873      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x16c>
 80093a8:	2b40      	cmp	r3, #64	; 0x40
 80093aa:	d058      	beq.n	800945e <HAL_TIM_ConfigClockSource+0x13a>
 80093ac:	2b40      	cmp	r3, #64	; 0x40
 80093ae:	d86f      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x16c>
 80093b0:	2b30      	cmp	r3, #48	; 0x30
 80093b2:	d064      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x15a>
 80093b4:	2b30      	cmp	r3, #48	; 0x30
 80093b6:	d86b      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x16c>
 80093b8:	2b20      	cmp	r3, #32
 80093ba:	d060      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x15a>
 80093bc:	2b20      	cmp	r3, #32
 80093be:	d867      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x16c>
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d05c      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x15a>
 80093c4:	2b10      	cmp	r3, #16
 80093c6:	d05a      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x15a>
 80093c8:	e062      	b.n	8009490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	6899      	ldr	r1, [r3, #8]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f000 fc95 	bl	8009d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	609a      	str	r2, [r3, #8]
      break;
 80093f6:	e04f      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	6899      	ldr	r1, [r3, #8]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	f000 fc7e 	bl	8009d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	689a      	ldr	r2, [r3, #8]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800941a:	609a      	str	r2, [r3, #8]
      break;
 800941c:	e03c      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	6859      	ldr	r1, [r3, #4]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	461a      	mov	r2, r3
 800942c:	f000 fbf2 	bl	8009c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2150      	movs	r1, #80	; 0x50
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fc4b 	bl	8009cd2 <TIM_ITRx_SetConfig>
      break;
 800943c:	e02c      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	6859      	ldr	r1, [r3, #4]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	461a      	mov	r2, r3
 800944c:	f000 fc11 	bl	8009c72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2160      	movs	r1, #96	; 0x60
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fc3b 	bl	8009cd2 <TIM_ITRx_SetConfig>
      break;
 800945c:	e01c      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6818      	ldr	r0, [r3, #0]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	6859      	ldr	r1, [r3, #4]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	461a      	mov	r2, r3
 800946c:	f000 fbd2 	bl	8009c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2140      	movs	r1, #64	; 0x40
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fc2b 	bl	8009cd2 <TIM_ITRx_SetConfig>
      break;
 800947c:	e00c      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4619      	mov	r1, r3
 8009488:	4610      	mov	r0, r2
 800948a:	f000 fc22 	bl	8009cd2 <TIM_ITRx_SetConfig>
      break;
 800948e:	e003      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	73fb      	strb	r3, [r7, #15]
      break;
 8009494:	e000      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80094ba:	bf00      	nop
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094c6:	b480      	push	{r7}
 80094c8:	b083      	sub	sp, #12
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094ce:	bf00      	nop
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094da:	b480      	push	{r7}
 80094dc:	b083      	sub	sp, #12
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094e2:	bf00      	nop
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b083      	sub	sp, #12
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80094f6:	bf00      	nop
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009502:	b480      	push	{r7}
 8009504:	b083      	sub	sp, #12
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800950a:	bf00      	nop
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009516:	b480      	push	{r7}
 8009518:	b083      	sub	sp, #12
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800951e:	bf00      	nop
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009532:	bf00      	nop
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800953e:	b480      	push	{r7}
 8009540:	b083      	sub	sp, #12
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009546:	bf00      	nop
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009552:	b480      	push	{r7}
 8009554:	b083      	sub	sp, #12
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
	...

08009568 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009568:	b480      	push	{r7}
 800956a:	b087      	sub	sp, #28
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	460b      	mov	r3, r1
 8009572:	607a      	str	r2, [r7, #4]
 8009574:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e135      	b.n	80097f0 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800958a:	2b01      	cmp	r3, #1
 800958c:	d101      	bne.n	8009592 <HAL_TIM_RegisterCallback+0x2a>
 800958e:	2302      	movs	r3, #2
 8009590:	e12e      	b.n	80097f0 <HAL_TIM_RegisterCallback+0x288>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	f040 80ba 	bne.w	800971c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 80095a8:	7afb      	ldrb	r3, [r7, #11]
 80095aa:	2b1a      	cmp	r3, #26
 80095ac:	f200 80b3 	bhi.w	8009716 <HAL_TIM_RegisterCallback+0x1ae>
 80095b0:	a201      	add	r2, pc, #4	; (adr r2, 80095b8 <HAL_TIM_RegisterCallback+0x50>)
 80095b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b6:	bf00      	nop
 80095b8:	08009625 	.word	0x08009625
 80095bc:	0800962d 	.word	0x0800962d
 80095c0:	08009635 	.word	0x08009635
 80095c4:	0800963d 	.word	0x0800963d
 80095c8:	08009645 	.word	0x08009645
 80095cc:	0800964d 	.word	0x0800964d
 80095d0:	08009655 	.word	0x08009655
 80095d4:	0800965d 	.word	0x0800965d
 80095d8:	08009665 	.word	0x08009665
 80095dc:	0800966d 	.word	0x0800966d
 80095e0:	08009675 	.word	0x08009675
 80095e4:	0800967d 	.word	0x0800967d
 80095e8:	08009685 	.word	0x08009685
 80095ec:	0800968d 	.word	0x0800968d
 80095f0:	08009695 	.word	0x08009695
 80095f4:	0800969f 	.word	0x0800969f
 80095f8:	080096a9 	.word	0x080096a9
 80095fc:	080096b3 	.word	0x080096b3
 8009600:	080096bd 	.word	0x080096bd
 8009604:	080096c7 	.word	0x080096c7
 8009608:	080096d1 	.word	0x080096d1
 800960c:	080096db 	.word	0x080096db
 8009610:	080096e5 	.word	0x080096e5
 8009614:	080096ef 	.word	0x080096ef
 8009618:	080096f9 	.word	0x080096f9
 800961c:	08009703 	.word	0x08009703
 8009620:	0800970d 	.word	0x0800970d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800962a:	e0dc      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009632:	e0d8      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800963a:	e0d4      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009642:	e0d0      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800964a:	e0cc      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009652:	e0c8      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800965a:	e0c4      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009662:	e0c0      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800966a:	e0bc      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009672:	e0b8      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800967a:	e0b4      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009682:	e0b0      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800968a:	e0ac      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009692:	e0a8      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800969c:	e0a3      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80096a6:	e09e      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80096b0:	e099      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80096ba:	e094      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80096c4:	e08f      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80096ce:	e08a      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80096d8:	e085      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80096e2:	e080      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80096ec:	e07b      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80096f6:	e076      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009700:	e071      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800970a:	e06c      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009714:	e067      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	75fb      	strb	r3, [r7, #23]
        break;
 800971a:	e064      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	d15c      	bne.n	80097e2 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8009728:	7afb      	ldrb	r3, [r7, #11]
 800972a:	2b0d      	cmp	r3, #13
 800972c:	d856      	bhi.n	80097dc <HAL_TIM_RegisterCallback+0x274>
 800972e:	a201      	add	r2, pc, #4	; (adr r2, 8009734 <HAL_TIM_RegisterCallback+0x1cc>)
 8009730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009734:	0800976d 	.word	0x0800976d
 8009738:	08009775 	.word	0x08009775
 800973c:	0800977d 	.word	0x0800977d
 8009740:	08009785 	.word	0x08009785
 8009744:	0800978d 	.word	0x0800978d
 8009748:	08009795 	.word	0x08009795
 800974c:	0800979d 	.word	0x0800979d
 8009750:	080097a5 	.word	0x080097a5
 8009754:	080097ad 	.word	0x080097ad
 8009758:	080097b5 	.word	0x080097b5
 800975c:	080097bd 	.word	0x080097bd
 8009760:	080097c5 	.word	0x080097c5
 8009764:	080097cd 	.word	0x080097cd
 8009768:	080097d5 	.word	0x080097d5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009772:	e038      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800977a:	e034      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009782:	e030      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800978a:	e02c      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009792:	e028      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800979a:	e024      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80097a2:	e020      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80097aa:	e01c      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80097b2:	e018      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80097ba:	e014      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80097c2:	e010      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80097ca:	e00c      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80097d2:	e008      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80097da:	e004      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	75fb      	strb	r3, [r7, #23]
        break;
 80097e0:	e001      	b.n	80097e6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	371c      	adds	r7, #28
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a34      	ldr	r2, [pc, #208]	; (80098e0 <TIM_Base_SetConfig+0xe4>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d00f      	beq.n	8009834 <TIM_Base_SetConfig+0x38>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800981a:	d00b      	beq.n	8009834 <TIM_Base_SetConfig+0x38>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a31      	ldr	r2, [pc, #196]	; (80098e4 <TIM_Base_SetConfig+0xe8>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d007      	beq.n	8009834 <TIM_Base_SetConfig+0x38>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a30      	ldr	r2, [pc, #192]	; (80098e8 <TIM_Base_SetConfig+0xec>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d003      	beq.n	8009834 <TIM_Base_SetConfig+0x38>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a2f      	ldr	r2, [pc, #188]	; (80098ec <TIM_Base_SetConfig+0xf0>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d108      	bne.n	8009846 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800983a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	4313      	orrs	r3, r2
 8009844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a25      	ldr	r2, [pc, #148]	; (80098e0 <TIM_Base_SetConfig+0xe4>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d01b      	beq.n	8009886 <TIM_Base_SetConfig+0x8a>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009854:	d017      	beq.n	8009886 <TIM_Base_SetConfig+0x8a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a22      	ldr	r2, [pc, #136]	; (80098e4 <TIM_Base_SetConfig+0xe8>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d013      	beq.n	8009886 <TIM_Base_SetConfig+0x8a>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a21      	ldr	r2, [pc, #132]	; (80098e8 <TIM_Base_SetConfig+0xec>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d00f      	beq.n	8009886 <TIM_Base_SetConfig+0x8a>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a20      	ldr	r2, [pc, #128]	; (80098ec <TIM_Base_SetConfig+0xf0>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d00b      	beq.n	8009886 <TIM_Base_SetConfig+0x8a>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a1f      	ldr	r2, [pc, #124]	; (80098f0 <TIM_Base_SetConfig+0xf4>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d007      	beq.n	8009886 <TIM_Base_SetConfig+0x8a>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a1e      	ldr	r2, [pc, #120]	; (80098f4 <TIM_Base_SetConfig+0xf8>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d003      	beq.n	8009886 <TIM_Base_SetConfig+0x8a>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a1d      	ldr	r2, [pc, #116]	; (80098f8 <TIM_Base_SetConfig+0xfc>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d108      	bne.n	8009898 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800988c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	4313      	orrs	r3, r2
 8009896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	689a      	ldr	r2, [r3, #8]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a08      	ldr	r2, [pc, #32]	; (80098e0 <TIM_Base_SetConfig+0xe4>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d103      	bne.n	80098cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	691a      	ldr	r2, [r3, #16]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	615a      	str	r2, [r3, #20]
}
 80098d2:	bf00      	nop
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	40010000 	.word	0x40010000
 80098e4:	40000400 	.word	0x40000400
 80098e8:	40000800 	.word	0x40000800
 80098ec:	40000c00 	.word	0x40000c00
 80098f0:	40014000 	.word	0x40014000
 80098f4:	40014400 	.word	0x40014400
 80098f8:	40014800 	.word	0x40014800

080098fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	f023 0201 	bic.w	r2, r3, #1
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800992a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f023 0303 	bic.w	r3, r3, #3
 8009932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	4313      	orrs	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f023 0302 	bic.w	r3, r3, #2
 8009944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	4313      	orrs	r3, r2
 800994e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a1c      	ldr	r2, [pc, #112]	; (80099c4 <TIM_OC1_SetConfig+0xc8>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d10c      	bne.n	8009972 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f023 0308 	bic.w	r3, r3, #8
 800995e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	4313      	orrs	r3, r2
 8009968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f023 0304 	bic.w	r3, r3, #4
 8009970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a13      	ldr	r2, [pc, #76]	; (80099c4 <TIM_OC1_SetConfig+0xc8>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d111      	bne.n	800999e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	4313      	orrs	r3, r2
 8009992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	4313      	orrs	r3, r2
 800999c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	621a      	str	r2, [r3, #32]
}
 80099b8:	bf00      	nop
 80099ba:	371c      	adds	r7, #28
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	40010000 	.word	0x40010000

080099c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	f023 0210 	bic.w	r2, r3, #16
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	021b      	lsls	r3, r3, #8
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f023 0320 	bic.w	r3, r3, #32
 8009a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	011b      	lsls	r3, r3, #4
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a1e      	ldr	r2, [pc, #120]	; (8009a9c <TIM_OC2_SetConfig+0xd4>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d10d      	bne.n	8009a44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a15      	ldr	r2, [pc, #84]	; (8009a9c <TIM_OC2_SetConfig+0xd4>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d113      	bne.n	8009a74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	621a      	str	r2, [r3, #32]
}
 8009a8e:	bf00      	nop
 8009a90:	371c      	adds	r7, #28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	40010000 	.word	0x40010000

08009aa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	69db      	ldr	r3, [r3, #28]
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f023 0303 	bic.w	r3, r3, #3
 8009ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	021b      	lsls	r3, r3, #8
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a1d      	ldr	r2, [pc, #116]	; (8009b70 <TIM_OC3_SetConfig+0xd0>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d10d      	bne.n	8009b1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a14      	ldr	r2, [pc, #80]	; (8009b70 <TIM_OC3_SetConfig+0xd0>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d113      	bne.n	8009b4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	011b      	lsls	r3, r3, #4
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	699b      	ldr	r3, [r3, #24]
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	621a      	str	r2, [r3, #32]
}
 8009b64:	bf00      	nop
 8009b66:	371c      	adds	r7, #28
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	40010000 	.word	0x40010000

08009b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b087      	sub	sp, #28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	69db      	ldr	r3, [r3, #28]
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	021b      	lsls	r3, r3, #8
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	031b      	lsls	r3, r3, #12
 8009bc6:	693a      	ldr	r2, [r7, #16]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a10      	ldr	r2, [pc, #64]	; (8009c10 <TIM_OC4_SetConfig+0x9c>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d109      	bne.n	8009be8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	019b      	lsls	r3, r3, #6
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	621a      	str	r2, [r3, #32]
}
 8009c02:	bf00      	nop
 8009c04:	371c      	adds	r7, #28
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	40010000 	.word	0x40010000

08009c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	f023 0201 	bic.w	r2, r3, #1
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	011b      	lsls	r3, r3, #4
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f023 030a 	bic.w	r3, r3, #10
 8009c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c52:	697a      	ldr	r2, [r7, #20]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	621a      	str	r2, [r3, #32]
}
 8009c66:	bf00      	nop
 8009c68:	371c      	adds	r7, #28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b087      	sub	sp, #28
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	60f8      	str	r0, [r7, #12]
 8009c7a:	60b9      	str	r1, [r7, #8]
 8009c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	f023 0210 	bic.w	r2, r3, #16
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6a1b      	ldr	r3, [r3, #32]
 8009c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	031b      	lsls	r3, r3, #12
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	011b      	lsls	r3, r3, #4
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	621a      	str	r2, [r3, #32]
}
 8009cc6:	bf00      	nop
 8009cc8:	371c      	adds	r7, #28
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b085      	sub	sp, #20
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	f043 0307 	orr.w	r3, r3, #7
 8009cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	609a      	str	r2, [r3, #8]
}
 8009cfc:	bf00      	nop
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b087      	sub	sp, #28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
 8009d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	021a      	lsls	r2, r3, #8
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	609a      	str	r2, [r3, #8]
}
 8009d3c:	bf00      	nop
 8009d3e:	371c      	adds	r7, #28
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b087      	sub	sp, #28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f003 031f 	and.w	r3, r3, #31
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6a1a      	ldr	r2, [r3, #32]
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	43db      	mvns	r3, r3
 8009d6a:	401a      	ands	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a1a      	ldr	r2, [r3, #32]
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	f003 031f 	and.w	r3, r3, #31
 8009d7a:	6879      	ldr	r1, [r7, #4]
 8009d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d80:	431a      	orrs	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	621a      	str	r2, [r3, #32]
}
 8009d86:	bf00      	nop
 8009d88:	371c      	adds	r7, #28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
	...

08009d94 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a1c      	ldr	r2, [pc, #112]	; (8009e10 <TIM_ResetCallback+0x7c>)
 8009da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a1b      	ldr	r2, [pc, #108]	; (8009e14 <TIM_ResetCallback+0x80>)
 8009da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a1a      	ldr	r2, [pc, #104]	; (8009e18 <TIM_ResetCallback+0x84>)
 8009db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a19      	ldr	r2, [pc, #100]	; (8009e1c <TIM_ResetCallback+0x88>)
 8009db8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a18      	ldr	r2, [pc, #96]	; (8009e20 <TIM_ResetCallback+0x8c>)
 8009dc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a17      	ldr	r2, [pc, #92]	; (8009e24 <TIM_ResetCallback+0x90>)
 8009dc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a16      	ldr	r2, [pc, #88]	; (8009e28 <TIM_ResetCallback+0x94>)
 8009dd0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a15      	ldr	r2, [pc, #84]	; (8009e2c <TIM_ResetCallback+0x98>)
 8009dd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a14      	ldr	r2, [pc, #80]	; (8009e30 <TIM_ResetCallback+0x9c>)
 8009de0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a13      	ldr	r2, [pc, #76]	; (8009e34 <TIM_ResetCallback+0xa0>)
 8009de8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a12      	ldr	r2, [pc, #72]	; (8009e38 <TIM_ResetCallback+0xa4>)
 8009df0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a11      	ldr	r2, [pc, #68]	; (8009e3c <TIM_ResetCallback+0xa8>)
 8009df8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a10      	ldr	r2, [pc, #64]	; (8009e40 <TIM_ResetCallback+0xac>)
 8009e00:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	08003b79 	.word	0x08003b79
 8009e14:	080094b3 	.word	0x080094b3
 8009e18:	0800952b 	.word	0x0800952b
 8009e1c:	0800953f 	.word	0x0800953f
 8009e20:	080094db 	.word	0x080094db
 8009e24:	080094ef 	.word	0x080094ef
 8009e28:	080094c7 	.word	0x080094c7
 8009e2c:	08009503 	.word	0x08009503
 8009e30:	08009517 	.word	0x08009517
 8009e34:	08009553 	.word	0x08009553
 8009e38:	08009fc5 	.word	0x08009fc5
 8009e3c:	08009fd9 	.word	0x08009fd9
 8009e40:	08009fed 	.word	0x08009fed

08009e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d101      	bne.n	8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e58:	2302      	movs	r3, #2
 8009e5a:	e050      	b.n	8009efe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a1c      	ldr	r2, [pc, #112]	; (8009f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d018      	beq.n	8009ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ea8:	d013      	beq.n	8009ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a18      	ldr	r2, [pc, #96]	; (8009f10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d00e      	beq.n	8009ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a16      	ldr	r2, [pc, #88]	; (8009f14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d009      	beq.n	8009ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a15      	ldr	r2, [pc, #84]	; (8009f18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d004      	beq.n	8009ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a13      	ldr	r2, [pc, #76]	; (8009f1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d10c      	bne.n	8009eec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	40010000 	.word	0x40010000
 8009f10:	40000400 	.word	0x40000400
 8009f14:	40000800 	.word	0x40000800
 8009f18:	40000c00 	.word	0x40000c00
 8009f1c:	40014000 	.word	0x40014000

08009f20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d101      	bne.n	8009f3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f38:	2302      	movs	r3, #2
 8009f3a:	e03d      	b.n	8009fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	69db      	ldr	r3, [r3, #28]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e04a      	b.n	800a0a8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d111      	bne.n	800a042 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fd2c 	bl	800aa84 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a030:	2b00      	cmp	r3, #0
 800a032:	d102      	bne.n	800a03a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a1e      	ldr	r2, [pc, #120]	; (800a0b0 <HAL_UART_Init+0xb0>)
 800a038:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2224      	movs	r2, #36	; 0x24
 800a046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68da      	ldr	r2, [r3, #12]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a058:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fff6 	bl	800b04c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	691a      	ldr	r2, [r3, #16]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a06e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	695a      	ldr	r2, [r3, #20]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a07e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68da      	ldr	r2, [r3, #12]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a08e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2220      	movs	r2, #32
 800a09a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	080043a5 	.word	0x080043a5

0800a0b4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d107      	bne.n	800a0dc <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d0:	f043 0220 	orr.w	r2, r3, #32
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e08c      	b.n	800a1f6 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d101      	bne.n	800a0ea <HAL_UART_RegisterCallback+0x36>
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	e085      	b.n	800a1f6 <HAL_UART_RegisterCallback+0x142>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	2b20      	cmp	r3, #32
 800a0fc:	d151      	bne.n	800a1a2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a0fe:	7afb      	ldrb	r3, [r7, #11]
 800a100:	2b0c      	cmp	r3, #12
 800a102:	d845      	bhi.n	800a190 <HAL_UART_RegisterCallback+0xdc>
 800a104:	a201      	add	r2, pc, #4	; (adr r2, 800a10c <HAL_UART_RegisterCallback+0x58>)
 800a106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10a:	bf00      	nop
 800a10c:	0800a141 	.word	0x0800a141
 800a110:	0800a149 	.word	0x0800a149
 800a114:	0800a151 	.word	0x0800a151
 800a118:	0800a159 	.word	0x0800a159
 800a11c:	0800a161 	.word	0x0800a161
 800a120:	0800a169 	.word	0x0800a169
 800a124:	0800a171 	.word	0x0800a171
 800a128:	0800a179 	.word	0x0800a179
 800a12c:	0800a191 	.word	0x0800a191
 800a130:	0800a191 	.word	0x0800a191
 800a134:	0800a191 	.word	0x0800a191
 800a138:	0800a181 	.word	0x0800a181
 800a13c:	0800a189 	.word	0x0800a189
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800a146:	e051      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a14e:	e04d      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a156:	e049      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a15e:	e045      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a166:	e041      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a16e:	e03d      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a176:	e039      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a17e:	e035      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a186:	e031      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a18e:	e02d      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a194:	f043 0220 	orr.w	r2, r3, #32
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	75fb      	strb	r3, [r7, #23]
        break;
 800a1a0:	e024      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d116      	bne.n	800a1dc <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a1ae:	7afb      	ldrb	r3, [r7, #11]
 800a1b0:	2b0b      	cmp	r3, #11
 800a1b2:	d002      	beq.n	800a1ba <HAL_UART_RegisterCallback+0x106>
 800a1b4:	2b0c      	cmp	r3, #12
 800a1b6:	d004      	beq.n	800a1c2 <HAL_UART_RegisterCallback+0x10e>
 800a1b8:	e007      	b.n	800a1ca <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a1c0:	e014      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a1c8:	e010      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	f043 0220 	orr.w	r2, r3, #32
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	75fb      	strb	r3, [r7, #23]
        break;
 800a1da:	e007      	b.n	800a1ec <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e0:	f043 0220 	orr.w	r2, r3, #32
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	371c      	adds	r7, #28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop

0800a204 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	4613      	mov	r3, r2
 800a210:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b20      	cmp	r3, #32
 800a21c:	d11d      	bne.n	800a25a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <HAL_UART_Receive_IT+0x26>
 800a224:	88fb      	ldrh	r3, [r7, #6]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e016      	b.n	800a25c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a234:	2b01      	cmp	r3, #1
 800a236:	d101      	bne.n	800a23c <HAL_UART_Receive_IT+0x38>
 800a238:	2302      	movs	r3, #2
 800a23a:	e00f      	b.n	800a25c <HAL_UART_Receive_IT+0x58>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a24a:	88fb      	ldrh	r3, [r7, #6]
 800a24c:	461a      	mov	r2, r3
 800a24e:	68b9      	ldr	r1, [r7, #8]
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 fcf7 	bl	800ac44 <UART_Start_Receive_IT>
 800a256:	4603      	mov	r3, r0
 800a258:	e000      	b.n	800a25c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a25a:	2302      	movs	r3, #2
  }
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b08c      	sub	sp, #48	; 0x30
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4613      	mov	r3, r2
 800a270:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b20      	cmp	r3, #32
 800a27c:	d165      	bne.n	800a34a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <HAL_UART_Transmit_DMA+0x26>
 800a284:	88fb      	ldrh	r3, [r7, #6]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e05e      	b.n	800a34c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a294:	2b01      	cmp	r3, #1
 800a296:	d101      	bne.n	800a29c <HAL_UART_Transmit_DMA+0x38>
 800a298:	2302      	movs	r3, #2
 800a29a:	e057      	b.n	800a34c <HAL_UART_Transmit_DMA+0xe8>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	88fa      	ldrh	r2, [r7, #6]
 800a2ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	88fa      	ldrh	r2, [r7, #6]
 800a2b4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2221      	movs	r2, #33	; 0x21
 800a2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c8:	4a22      	ldr	r2, [pc, #136]	; (800a354 <HAL_UART_Transmit_DMA+0xf0>)
 800a2ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d0:	4a21      	ldr	r2, [pc, #132]	; (800a358 <HAL_UART_Transmit_DMA+0xf4>)
 800a2d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d8:	4a20      	ldr	r2, [pc, #128]	; (800a35c <HAL_UART_Transmit_DMA+0xf8>)
 800a2da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a2e4:	f107 0308 	add.w	r3, r7, #8
 800a2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f0:	6819      	ldr	r1, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	88fb      	ldrh	r3, [r7, #6]
 800a2fc:	f7fb f8f6 	bl	80054ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a308:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	3314      	adds	r3, #20
 800a318:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	e853 3f00 	ldrex	r3, [r3]
 800a320:	617b      	str	r3, [r7, #20]
   return(result);
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a328:	62bb      	str	r3, [r7, #40]	; 0x28
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3314      	adds	r3, #20
 800a330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a332:	627a      	str	r2, [r7, #36]	; 0x24
 800a334:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a336:	6a39      	ldr	r1, [r7, #32]
 800a338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33a:	e841 2300 	strex	r3, r2, [r1]
 800a33e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1e5      	bne.n	800a312 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	e000      	b.n	800a34c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a34a:	2302      	movs	r3, #2
  }
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3730      	adds	r7, #48	; 0x30
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	0800aaf5 	.word	0x0800aaf5
 800a358:	0800ab91 	.word	0x0800ab91
 800a35c:	0800abaf 	.word	0x0800abaf

0800a360 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b09a      	sub	sp, #104	; 0x68
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	330c      	adds	r3, #12
 800a36e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a372:	e853 3f00 	ldrex	r3, [r3]
 800a376:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a37a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a37e:	667b      	str	r3, [r7, #100]	; 0x64
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	330c      	adds	r3, #12
 800a386:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a388:	657a      	str	r2, [r7, #84]	; 0x54
 800a38a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a38e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a390:	e841 2300 	strex	r3, r2, [r1]
 800a394:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1e5      	bne.n	800a368 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	3314      	adds	r3, #20
 800a3a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a6:	e853 3f00 	ldrex	r3, [r3]
 800a3aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ae:	f023 0301 	bic.w	r3, r3, #1
 800a3b2:	663b      	str	r3, [r7, #96]	; 0x60
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3314      	adds	r3, #20
 800a3ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3bc:	643a      	str	r2, [r7, #64]	; 0x40
 800a3be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e5      	bne.n	800a39c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d119      	bne.n	800a40c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	330c      	adds	r3, #12
 800a3de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	e853 3f00 	ldrex	r3, [r3]
 800a3e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	f023 0310 	bic.w	r3, r3, #16
 800a3ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	330c      	adds	r3, #12
 800a3f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a400:	e841 2300 	strex	r3, r2, [r1]
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1e5      	bne.n	800a3d8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a416:	2b40      	cmp	r3, #64	; 0x40
 800a418:	d136      	bne.n	800a488 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3314      	adds	r3, #20
 800a420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	e853 3f00 	ldrex	r3, [r3]
 800a428:	60bb      	str	r3, [r7, #8]
   return(result);
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a430:	65bb      	str	r3, [r7, #88]	; 0x58
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3314      	adds	r3, #20
 800a438:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a43a:	61ba      	str	r2, [r7, #24]
 800a43c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43e:	6979      	ldr	r1, [r7, #20]
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	e841 2300 	strex	r3, r2, [r1]
 800a446:	613b      	str	r3, [r7, #16]
   return(result);
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1e5      	bne.n	800a41a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a452:	2b00      	cmp	r3, #0
 800a454:	d018      	beq.n	800a488 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45a:	2200      	movs	r2, #0
 800a45c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a462:	4618      	mov	r0, r3
 800a464:	f7fb f89a 	bl	800559c <HAL_DMA_Abort>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00c      	beq.n	800a488 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a472:	4618      	mov	r0, r3
 800a474:	f7fb fabc 	bl	80059f0 <HAL_DMA_GetError>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b20      	cmp	r3, #32
 800a47c:	d104      	bne.n	800a488 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2210      	movs	r2, #16
 800a482:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800a484:	2303      	movs	r3, #3
 800a486:	e00a      	b.n	800a49e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2220      	movs	r2, #32
 800a492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3768      	adds	r7, #104	; 0x68
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b0ba      	sub	sp, #232	; 0xe8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4de:	f003 030f 	and.w	r3, r3, #15
 800a4e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a4e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10f      	bne.n	800a50e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4f2:	f003 0320 	and.w	r3, r3, #32
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d009      	beq.n	800a50e <HAL_UART_IRQHandler+0x66>
 800a4fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4fe:	f003 0320 	and.w	r3, r3, #32
 800a502:	2b00      	cmp	r3, #0
 800a504:	d003      	beq.n	800a50e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fce3 	bl	800aed2 <UART_Receive_IT>
      return;
 800a50c:	e25b      	b.n	800a9c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a50e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 80e1 	beq.w	800a6da <HAL_UART_IRQHandler+0x232>
 800a518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b00      	cmp	r3, #0
 800a522:	d106      	bne.n	800a532 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a528:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 80d4 	beq.w	800a6da <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a536:	f003 0301 	and.w	r3, r3, #1
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00b      	beq.n	800a556 <HAL_UART_IRQHandler+0xae>
 800a53e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a546:	2b00      	cmp	r3, #0
 800a548:	d005      	beq.n	800a556 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54e:	f043 0201 	orr.w	r2, r3, #1
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a55a:	f003 0304 	and.w	r3, r3, #4
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00b      	beq.n	800a57a <HAL_UART_IRQHandler+0xd2>
 800a562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a566:	f003 0301 	and.w	r3, r3, #1
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d005      	beq.n	800a57a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a572:	f043 0202 	orr.w	r2, r3, #2
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a57e:	f003 0302 	and.w	r3, r3, #2
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00b      	beq.n	800a59e <HAL_UART_IRQHandler+0xf6>
 800a586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d005      	beq.n	800a59e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a596:	f043 0204 	orr.w	r2, r3, #4
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5a2:	f003 0308 	and.w	r3, r3, #8
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d011      	beq.n	800a5ce <HAL_UART_IRQHandler+0x126>
 800a5aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5ae:	f003 0320 	and.w	r3, r3, #32
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d105      	bne.n	800a5c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a5b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d005      	beq.n	800a5ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	f043 0208 	orr.w	r2, r3, #8
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 81f2 	beq.w	800a9bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5dc:	f003 0320 	and.w	r3, r3, #32
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d008      	beq.n	800a5f6 <HAL_UART_IRQHandler+0x14e>
 800a5e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5e8:	f003 0320 	and.w	r3, r3, #32
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fc6e 	bl	800aed2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	695b      	ldr	r3, [r3, #20]
 800a5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a600:	2b40      	cmp	r3, #64	; 0x40
 800a602:	bf0c      	ite	eq
 800a604:	2301      	moveq	r3, #1
 800a606:	2300      	movne	r3, #0
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a612:	f003 0308 	and.w	r3, r3, #8
 800a616:	2b00      	cmp	r3, #0
 800a618:	d103      	bne.n	800a622 <HAL_UART_IRQHandler+0x17a>
 800a61a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d051      	beq.n	800a6c6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fb74 	bl	800ad10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a632:	2b40      	cmp	r3, #64	; 0x40
 800a634:	d142      	bne.n	800a6bc <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3314      	adds	r3, #20
 800a63c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a644:	e853 3f00 	ldrex	r3, [r3]
 800a648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a64c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3314      	adds	r3, #20
 800a65e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a662:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a66e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a672:	e841 2300 	strex	r3, r2, [r1]
 800a676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a67a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1d9      	bne.n	800a636 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a686:	2b00      	cmp	r3, #0
 800a688:	d013      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68e:	4a7f      	ldr	r2, [pc, #508]	; (800a88c <HAL_UART_IRQHandler+0x3e4>)
 800a690:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a696:	4618      	mov	r0, r3
 800a698:	f7fa fff0 	bl	800567c <HAL_DMA_Abort_IT>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d019      	beq.n	800a6d6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6b0:	e011      	b.n	800a6d6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ba:	e00c      	b.n	800a6d6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c4:	e007      	b.n	800a6d6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a6d4:	e172      	b.n	800a9bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d6:	bf00      	nop
    return;
 800a6d8:	e170      	b.n	800a9bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	f040 814c 	bne.w	800a97c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e8:	f003 0310 	and.w	r3, r3, #16
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 8145 	beq.w	800a97c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a6f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6f6:	f003 0310 	and.w	r3, r3, #16
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 813e 	beq.w	800a97c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a700:	2300      	movs	r3, #0
 800a702:	60bb      	str	r3, [r7, #8]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	60bb      	str	r3, [r7, #8]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	60bb      	str	r3, [r7, #8]
 800a714:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a720:	2b40      	cmp	r3, #64	; 0x40
 800a722:	f040 80b5 	bne.w	800a890 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a732:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 8142 	beq.w	800a9c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a740:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a744:	429a      	cmp	r2, r3
 800a746:	f080 813b 	bcs.w	800a9c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a750:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a75c:	f000 8088 	beq.w	800a870 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	330c      	adds	r3, #12
 800a766:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a76e:	e853 3f00 	ldrex	r3, [r3]
 800a772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a77a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a77e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	330c      	adds	r3, #12
 800a788:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a78c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a790:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a794:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a798:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a79c:	e841 2300 	strex	r3, r2, [r1]
 800a7a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a7a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1d9      	bne.n	800a760 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3314      	adds	r3, #20
 800a7b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7b6:	e853 3f00 	ldrex	r3, [r3]
 800a7ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a7bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7be:	f023 0301 	bic.w	r3, r3, #1
 800a7c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3314      	adds	r3, #20
 800a7cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a7d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a7d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a7d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a7dc:	e841 2300 	strex	r3, r2, [r1]
 800a7e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a7e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1e1      	bne.n	800a7ac <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3314      	adds	r3, #20
 800a7ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7f2:	e853 3f00 	ldrex	r3, [r3]
 800a7f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a7f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3314      	adds	r3, #20
 800a808:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a80c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a80e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a810:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a812:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a814:	e841 2300 	strex	r3, r2, [r1]
 800a818:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a81a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1e3      	bne.n	800a7e8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2220      	movs	r2, #32
 800a824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	330c      	adds	r3, #12
 800a834:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a83e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a840:	f023 0310 	bic.w	r3, r3, #16
 800a844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	330c      	adds	r3, #12
 800a84e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a852:	65ba      	str	r2, [r7, #88]	; 0x58
 800a854:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a856:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a858:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a85a:	e841 2300 	strex	r3, r2, [r1]
 800a85e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1e3      	bne.n	800a82e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fa fe96 	bl	800559c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800a87c:	b292      	uxth	r2, r2
 800a87e:	1a8a      	subs	r2, r1, r2
 800a880:	b292      	uxth	r2, r2
 800a882:	4611      	mov	r1, r2
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a888:	e09a      	b.n	800a9c0 <HAL_UART_IRQHandler+0x518>
 800a88a:	bf00      	nop
 800a88c:	0800add7 	.word	0x0800add7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a898:	b29b      	uxth	r3, r3
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f000 808c 	beq.w	800a9c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a8ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 8087 	beq.w	800a9c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	330c      	adds	r3, #12
 800a8bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c0:	e853 3f00 	ldrex	r3, [r3]
 800a8c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	330c      	adds	r3, #12
 800a8d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a8da:	647a      	str	r2, [r7, #68]	; 0x44
 800a8dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8e2:	e841 2300 	strex	r3, r2, [r1]
 800a8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a8e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1e3      	bne.n	800a8b6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3314      	adds	r3, #20
 800a8f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f8:	e853 3f00 	ldrex	r3, [r3]
 800a8fc:	623b      	str	r3, [r7, #32]
   return(result);
 800a8fe:	6a3b      	ldr	r3, [r7, #32]
 800a900:	f023 0301 	bic.w	r3, r3, #1
 800a904:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3314      	adds	r3, #20
 800a90e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a912:	633a      	str	r2, [r7, #48]	; 0x30
 800a914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a91a:	e841 2300 	strex	r3, r2, [r1]
 800a91e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1e3      	bne.n	800a8ee <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2220      	movs	r2, #32
 800a92a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	330c      	adds	r3, #12
 800a93a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	e853 3f00 	ldrex	r3, [r3]
 800a942:	60fb      	str	r3, [r7, #12]
   return(result);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f023 0310 	bic.w	r3, r3, #16
 800a94a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	330c      	adds	r3, #12
 800a954:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a958:	61fa      	str	r2, [r7, #28]
 800a95a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95c:	69b9      	ldr	r1, [r7, #24]
 800a95e:	69fa      	ldr	r2, [r7, #28]
 800a960:	e841 2300 	strex	r3, r2, [r1]
 800a964:	617b      	str	r3, [r7, #20]
   return(result);
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1e3      	bne.n	800a934 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a970:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800a974:	4611      	mov	r1, r2
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a97a:	e023      	b.n	800a9c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a97c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a984:	2b00      	cmp	r3, #0
 800a986:	d009      	beq.n	800a99c <HAL_UART_IRQHandler+0x4f4>
 800a988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a98c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a990:	2b00      	cmp	r3, #0
 800a992:	d003      	beq.n	800a99c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fa33 	bl	800ae00 <UART_Transmit_IT>
    return;
 800a99a:	e014      	b.n	800a9c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00e      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x51e>
 800a9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d008      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fa73 	bl	800aea0 <UART_EndTransmit_IT>
    return;
 800a9ba:	e004      	b.n	800a9c6 <HAL_UART_IRQHandler+0x51e>
    return;
 800a9bc:	bf00      	nop
 800a9be:	e002      	b.n	800a9c6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a9c0:	bf00      	nop
 800a9c2:	e000      	b.n	800a9c6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a9c4:	bf00      	nop
  }
}
 800a9c6:	37e8      	adds	r7, #232	; 0xe8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a10      	ldr	r2, [pc, #64]	; (800aad0 <UART_InitCallbacksToDefault+0x4c>)
 800aa90:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a0f      	ldr	r2, [pc, #60]	; (800aad4 <UART_InitCallbacksToDefault+0x50>)
 800aa96:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a0f      	ldr	r2, [pc, #60]	; (800aad8 <UART_InitCallbacksToDefault+0x54>)
 800aa9c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a0e      	ldr	r2, [pc, #56]	; (800aadc <UART_InitCallbacksToDefault+0x58>)
 800aaa2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a0e      	ldr	r2, [pc, #56]	; (800aae0 <UART_InitCallbacksToDefault+0x5c>)
 800aaa8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a0d      	ldr	r2, [pc, #52]	; (800aae4 <UART_InitCallbacksToDefault+0x60>)
 800aaae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a0d      	ldr	r2, [pc, #52]	; (800aae8 <UART_InitCallbacksToDefault+0x64>)
 800aab4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a0c      	ldr	r2, [pc, #48]	; (800aaec <UART_InitCallbacksToDefault+0x68>)
 800aaba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a0c      	ldr	r2, [pc, #48]	; (800aaf0 <UART_InitCallbacksToDefault+0x6c>)
 800aac0:	669a      	str	r2, [r3, #104]	; 0x68

}
 800aac2:	bf00      	nop
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	0800a9e1 	.word	0x0800a9e1
 800aad4:	0800a9cd 	.word	0x0800a9cd
 800aad8:	0800aa09 	.word	0x0800aa09
 800aadc:	0800a9f5 	.word	0x0800a9f5
 800aae0:	0800aa1d 	.word	0x0800aa1d
 800aae4:	0800aa31 	.word	0x0800aa31
 800aae8:	0800aa45 	.word	0x0800aa45
 800aaec:	0800aa59 	.word	0x0800aa59
 800aaf0:	0800aa6d 	.word	0x0800aa6d

0800aaf4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b090      	sub	sp, #64	; 0x40
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab00:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d137      	bne.n	800ab80 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ab10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab12:	2200      	movs	r2, #0
 800ab14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3314      	adds	r3, #20
 800ab1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	e853 3f00 	ldrex	r3, [r3]
 800ab24:	623b      	str	r3, [r7, #32]
   return(result);
 800ab26:	6a3b      	ldr	r3, [r7, #32]
 800ab28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab2c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3314      	adds	r3, #20
 800ab34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab36:	633a      	str	r2, [r7, #48]	; 0x30
 800ab38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab3e:	e841 2300 	strex	r3, r2, [r1]
 800ab42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1e5      	bne.n	800ab16 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	330c      	adds	r3, #12
 800ab50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	e853 3f00 	ldrex	r3, [r3]
 800ab58:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab60:	637b      	str	r3, [r7, #52]	; 0x34
 800ab62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	330c      	adds	r3, #12
 800ab68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab6a:	61fa      	str	r2, [r7, #28]
 800ab6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6e:	69b9      	ldr	r1, [r7, #24]
 800ab70:	69fa      	ldr	r2, [r7, #28]
 800ab72:	e841 2300 	strex	r3, r2, [r1]
 800ab76:	617b      	str	r3, [r7, #20]
   return(result);
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1e5      	bne.n	800ab4a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab7e:	e003      	b.n	800ab88 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800ab80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ab86:	4798      	blx	r3
}
 800ab88:	bf00      	nop
 800ab8a:	3740      	adds	r7, #64	; 0x40
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aba6:	bf00      	nop
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b084      	sub	sp, #16
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800abb6:	2300      	movs	r3, #0
 800abb8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abbe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abca:	2b80      	cmp	r3, #128	; 0x80
 800abcc:	bf0c      	ite	eq
 800abce:	2301      	moveq	r3, #1
 800abd0:	2300      	movne	r3, #0
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	2b21      	cmp	r3, #33	; 0x21
 800abe0:	d108      	bne.n	800abf4 <UART_DMAError+0x46>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d005      	beq.n	800abf4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2200      	movs	r2, #0
 800abec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800abee:	68b8      	ldr	r0, [r7, #8]
 800abf0:	f000 f866 	bl	800acc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	695b      	ldr	r3, [r3, #20]
 800abfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abfe:	2b40      	cmp	r3, #64	; 0x40
 800ac00:	bf0c      	ite	eq
 800ac02:	2301      	moveq	r3, #1
 800ac04:	2300      	movne	r3, #0
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b22      	cmp	r3, #34	; 0x22
 800ac14:	d108      	bne.n	800ac28 <UART_DMAError+0x7a>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d005      	beq.n	800ac28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ac22:	68b8      	ldr	r0, [r7, #8]
 800ac24:	f000 f874 	bl	800ad10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2c:	f043 0210 	orr.w	r2, r3, #16
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac38:	68b8      	ldr	r0, [r7, #8]
 800ac3a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac3c:	bf00      	nop
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	88fa      	ldrh	r2, [r7, #6]
 800ac5c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	88fa      	ldrh	r2, [r7, #6]
 800ac62:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2222      	movs	r2, #34	; 0x22
 800ac6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d007      	beq.n	800ac92 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac90:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	695a      	ldr	r2, [r3, #20]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f042 0201 	orr.w	r2, r2, #1
 800aca0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68da      	ldr	r2, [r3, #12]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f042 0220 	orr.w	r2, r2, #32
 800acb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3714      	adds	r7, #20
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b089      	sub	sp, #36	; 0x24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	330c      	adds	r3, #12
 800acce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	e853 3f00 	ldrex	r3, [r3]
 800acd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800acde:	61fb      	str	r3, [r7, #28]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	330c      	adds	r3, #12
 800ace6:	69fa      	ldr	r2, [r7, #28]
 800ace8:	61ba      	str	r2, [r7, #24]
 800acea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acec:	6979      	ldr	r1, [r7, #20]
 800acee:	69ba      	ldr	r2, [r7, #24]
 800acf0:	e841 2300 	strex	r3, r2, [r1]
 800acf4:	613b      	str	r3, [r7, #16]
   return(result);
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1e5      	bne.n	800acc8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2220      	movs	r2, #32
 800ad00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ad04:	bf00      	nop
 800ad06:	3724      	adds	r7, #36	; 0x24
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b095      	sub	sp, #84	; 0x54
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	330c      	adds	r3, #12
 800ad1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad22:	e853 3f00 	ldrex	r3, [r3]
 800ad26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	330c      	adds	r3, #12
 800ad36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad38:	643a      	str	r2, [r7, #64]	; 0x40
 800ad3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad40:	e841 2300 	strex	r3, r2, [r1]
 800ad44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1e5      	bne.n	800ad18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	3314      	adds	r3, #20
 800ad52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad54:	6a3b      	ldr	r3, [r7, #32]
 800ad56:	e853 3f00 	ldrex	r3, [r3]
 800ad5a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	f023 0301 	bic.w	r3, r3, #1
 800ad62:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3314      	adds	r3, #20
 800ad6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad74:	e841 2300 	strex	r3, r2, [r1]
 800ad78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d1e5      	bne.n	800ad4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d119      	bne.n	800adbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	330c      	adds	r3, #12
 800ad8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	e853 3f00 	ldrex	r3, [r3]
 800ad96:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	f023 0310 	bic.w	r3, r3, #16
 800ad9e:	647b      	str	r3, [r7, #68]	; 0x44
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	330c      	adds	r3, #12
 800ada6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ada8:	61ba      	str	r2, [r7, #24]
 800adaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adac:	6979      	ldr	r1, [r7, #20]
 800adae:	69ba      	ldr	r2, [r7, #24]
 800adb0:	e841 2300 	strex	r3, r2, [r1]
 800adb4:	613b      	str	r3, [r7, #16]
   return(result);
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1e5      	bne.n	800ad88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2220      	movs	r2, #32
 800adc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800adca:	bf00      	nop
 800adcc:	3754      	adds	r7, #84	; 0x54
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b084      	sub	sp, #16
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2200      	movs	r2, #0
 800ade8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2200      	movs	r2, #0
 800adee:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adf8:	bf00      	nop
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b21      	cmp	r3, #33	; 0x21
 800ae12:	d13e      	bne.n	800ae92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae1c:	d114      	bne.n	800ae48 <UART_Transmit_IT+0x48>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d110      	bne.n	800ae48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	461a      	mov	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a1b      	ldr	r3, [r3, #32]
 800ae40:	1c9a      	adds	r2, r3, #2
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	621a      	str	r2, [r3, #32]
 800ae46:	e008      	b.n	800ae5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a1b      	ldr	r3, [r3, #32]
 800ae4c:	1c59      	adds	r1, r3, #1
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	6211      	str	r1, [r2, #32]
 800ae52:	781a      	ldrb	r2, [r3, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	3b01      	subs	r3, #1
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	4619      	mov	r1, r3
 800ae68:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10f      	bne.n	800ae8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68da      	ldr	r2, [r3, #12]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68da      	ldr	r2, [r3, #12]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e000      	b.n	800ae94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ae92:	2302      	movs	r3, #2
  }
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68da      	ldr	r2, [r3, #12]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aeb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2220      	movs	r2, #32
 800aebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b08c      	sub	sp, #48	; 0x30
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b22      	cmp	r3, #34	; 0x22
 800aee4:	f040 80ad 	bne.w	800b042 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aef0:	d117      	bne.n	800af22 <UART_Receive_IT+0x50>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d113      	bne.n	800af22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aefa:	2300      	movs	r3, #0
 800aefc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af10:	b29a      	uxth	r2, r3
 800af12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1a:	1c9a      	adds	r2, r3, #2
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	629a      	str	r2, [r3, #40]	; 0x28
 800af20:	e026      	b.n	800af70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800af28:	2300      	movs	r3, #0
 800af2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af34:	d007      	beq.n	800af46 <UART_Receive_IT+0x74>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10a      	bne.n	800af54 <UART_Receive_IT+0x82>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d106      	bne.n	800af54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af50:	701a      	strb	r2, [r3, #0]
 800af52:	e008      	b.n	800af66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af60:	b2da      	uxtb	r2, r3
 800af62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6a:	1c5a      	adds	r2, r3, #1
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af74:	b29b      	uxth	r3, r3
 800af76:	3b01      	subs	r3, #1
 800af78:	b29b      	uxth	r3, r3
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	4619      	mov	r1, r3
 800af7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800af80:	2b00      	cmp	r3, #0
 800af82:	d15c      	bne.n	800b03e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68da      	ldr	r2, [r3, #12]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f022 0220 	bic.w	r2, r2, #32
 800af92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68da      	ldr	r2, [r3, #12]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	695a      	ldr	r2, [r3, #20]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f022 0201 	bic.w	r2, r2, #1
 800afb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2220      	movs	r2, #32
 800afb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d136      	bne.n	800b032 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	330c      	adds	r3, #12
 800afd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	e853 3f00 	ldrex	r3, [r3]
 800afd8:	613b      	str	r3, [r7, #16]
   return(result);
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	f023 0310 	bic.w	r3, r3, #16
 800afe0:	627b      	str	r3, [r7, #36]	; 0x24
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	330c      	adds	r3, #12
 800afe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afea:	623a      	str	r2, [r7, #32]
 800afec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	69f9      	ldr	r1, [r7, #28]
 800aff0:	6a3a      	ldr	r2, [r7, #32]
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	61bb      	str	r3, [r7, #24]
   return(result);
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1e5      	bne.n	800afca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0310 	and.w	r3, r3, #16
 800b008:	2b10      	cmp	r3, #16
 800b00a:	d10a      	bne.n	800b022 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b00c:	2300      	movs	r3, #0
 800b00e:	60fb      	str	r3, [r7, #12]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	60fb      	str	r3, [r7, #12]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b02a:	4611      	mov	r1, r2
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	4798      	blx	r3
 800b030:	e003      	b.n	800b03a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	e002      	b.n	800b044 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b03e:	2300      	movs	r3, #0
 800b040:	e000      	b.n	800b044 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b042:	2302      	movs	r3, #2
  }
}
 800b044:	4618      	mov	r0, r3
 800b046:	3730      	adds	r7, #48	; 0x30
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b04c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b050:	b0c0      	sub	sp, #256	; 0x100
 800b052:	af00      	add	r7, sp, #0
 800b054:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b068:	68d9      	ldr	r1, [r3, #12]
 800b06a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	ea40 0301 	orr.w	r3, r0, r1
 800b074:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b07a:	689a      	ldr	r2, [r3, #8]
 800b07c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	431a      	orrs	r2, r3
 800b084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	431a      	orrs	r2, r3
 800b08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b090:	69db      	ldr	r3, [r3, #28]
 800b092:	4313      	orrs	r3, r2
 800b094:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b0a4:	f021 010c 	bic.w	r1, r1, #12
 800b0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b0b2:	430b      	orrs	r3, r1
 800b0b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	695b      	ldr	r3, [r3, #20]
 800b0be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0c6:	6999      	ldr	r1, [r3, #24]
 800b0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	ea40 0301 	orr.w	r3, r0, r1
 800b0d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	4b8f      	ldr	r3, [pc, #572]	; (800b318 <UART_SetConfig+0x2cc>)
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d005      	beq.n	800b0ec <UART_SetConfig+0xa0>
 800b0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	4b8d      	ldr	r3, [pc, #564]	; (800b31c <UART_SetConfig+0x2d0>)
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d104      	bne.n	800b0f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b0ec:	f7fd fa84 	bl	80085f8 <HAL_RCC_GetPCLK2Freq>
 800b0f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b0f4:	e003      	b.n	800b0fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b0f6:	f7fd fa6b 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 800b0fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b102:	69db      	ldr	r3, [r3, #28]
 800b104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b108:	f040 810c 	bne.w	800b324 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b10c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b110:	2200      	movs	r2, #0
 800b112:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b116:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b11a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b11e:	4622      	mov	r2, r4
 800b120:	462b      	mov	r3, r5
 800b122:	1891      	adds	r1, r2, r2
 800b124:	65b9      	str	r1, [r7, #88]	; 0x58
 800b126:	415b      	adcs	r3, r3
 800b128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b12a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b12e:	4621      	mov	r1, r4
 800b130:	eb12 0801 	adds.w	r8, r2, r1
 800b134:	4629      	mov	r1, r5
 800b136:	eb43 0901 	adc.w	r9, r3, r1
 800b13a:	f04f 0200 	mov.w	r2, #0
 800b13e:	f04f 0300 	mov.w	r3, #0
 800b142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b14a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b14e:	4690      	mov	r8, r2
 800b150:	4699      	mov	r9, r3
 800b152:	4623      	mov	r3, r4
 800b154:	eb18 0303 	adds.w	r3, r8, r3
 800b158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b15c:	462b      	mov	r3, r5
 800b15e:	eb49 0303 	adc.w	r3, r9, r3
 800b162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b172:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b176:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b17a:	460b      	mov	r3, r1
 800b17c:	18db      	adds	r3, r3, r3
 800b17e:	653b      	str	r3, [r7, #80]	; 0x50
 800b180:	4613      	mov	r3, r2
 800b182:	eb42 0303 	adc.w	r3, r2, r3
 800b186:	657b      	str	r3, [r7, #84]	; 0x54
 800b188:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b18c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b190:	f7f5 fdec 	bl	8000d6c <__aeabi_uldivmod>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	4b61      	ldr	r3, [pc, #388]	; (800b320 <UART_SetConfig+0x2d4>)
 800b19a:	fba3 2302 	umull	r2, r3, r3, r2
 800b19e:	095b      	lsrs	r3, r3, #5
 800b1a0:	011c      	lsls	r4, r3, #4
 800b1a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b1b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b1b4:	4642      	mov	r2, r8
 800b1b6:	464b      	mov	r3, r9
 800b1b8:	1891      	adds	r1, r2, r2
 800b1ba:	64b9      	str	r1, [r7, #72]	; 0x48
 800b1bc:	415b      	adcs	r3, r3
 800b1be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b1c4:	4641      	mov	r1, r8
 800b1c6:	eb12 0a01 	adds.w	sl, r2, r1
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	eb43 0b01 	adc.w	fp, r3, r1
 800b1d0:	f04f 0200 	mov.w	r2, #0
 800b1d4:	f04f 0300 	mov.w	r3, #0
 800b1d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b1dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b1e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1e4:	4692      	mov	sl, r2
 800b1e6:	469b      	mov	fp, r3
 800b1e8:	4643      	mov	r3, r8
 800b1ea:	eb1a 0303 	adds.w	r3, sl, r3
 800b1ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1f2:	464b      	mov	r3, r9
 800b1f4:	eb4b 0303 	adc.w	r3, fp, r3
 800b1f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b208:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b20c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b210:	460b      	mov	r3, r1
 800b212:	18db      	adds	r3, r3, r3
 800b214:	643b      	str	r3, [r7, #64]	; 0x40
 800b216:	4613      	mov	r3, r2
 800b218:	eb42 0303 	adc.w	r3, r2, r3
 800b21c:	647b      	str	r3, [r7, #68]	; 0x44
 800b21e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b222:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b226:	f7f5 fda1 	bl	8000d6c <__aeabi_uldivmod>
 800b22a:	4602      	mov	r2, r0
 800b22c:	460b      	mov	r3, r1
 800b22e:	4611      	mov	r1, r2
 800b230:	4b3b      	ldr	r3, [pc, #236]	; (800b320 <UART_SetConfig+0x2d4>)
 800b232:	fba3 2301 	umull	r2, r3, r3, r1
 800b236:	095b      	lsrs	r3, r3, #5
 800b238:	2264      	movs	r2, #100	; 0x64
 800b23a:	fb02 f303 	mul.w	r3, r2, r3
 800b23e:	1acb      	subs	r3, r1, r3
 800b240:	00db      	lsls	r3, r3, #3
 800b242:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b246:	4b36      	ldr	r3, [pc, #216]	; (800b320 <UART_SetConfig+0x2d4>)
 800b248:	fba3 2302 	umull	r2, r3, r3, r2
 800b24c:	095b      	lsrs	r3, r3, #5
 800b24e:	005b      	lsls	r3, r3, #1
 800b250:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b254:	441c      	add	r4, r3
 800b256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b25a:	2200      	movs	r2, #0
 800b25c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b260:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b264:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b268:	4642      	mov	r2, r8
 800b26a:	464b      	mov	r3, r9
 800b26c:	1891      	adds	r1, r2, r2
 800b26e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b270:	415b      	adcs	r3, r3
 800b272:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b274:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b278:	4641      	mov	r1, r8
 800b27a:	1851      	adds	r1, r2, r1
 800b27c:	6339      	str	r1, [r7, #48]	; 0x30
 800b27e:	4649      	mov	r1, r9
 800b280:	414b      	adcs	r3, r1
 800b282:	637b      	str	r3, [r7, #52]	; 0x34
 800b284:	f04f 0200 	mov.w	r2, #0
 800b288:	f04f 0300 	mov.w	r3, #0
 800b28c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b290:	4659      	mov	r1, fp
 800b292:	00cb      	lsls	r3, r1, #3
 800b294:	4651      	mov	r1, sl
 800b296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b29a:	4651      	mov	r1, sl
 800b29c:	00ca      	lsls	r2, r1, #3
 800b29e:	4610      	mov	r0, r2
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	4642      	mov	r2, r8
 800b2a6:	189b      	adds	r3, r3, r2
 800b2a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2ac:	464b      	mov	r3, r9
 800b2ae:	460a      	mov	r2, r1
 800b2b0:	eb42 0303 	adc.w	r3, r2, r3
 800b2b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b2c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	18db      	adds	r3, r3, r3
 800b2d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	eb42 0303 	adc.w	r3, r2, r3
 800b2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b2de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b2e2:	f7f5 fd43 	bl	8000d6c <__aeabi_uldivmod>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	4b0d      	ldr	r3, [pc, #52]	; (800b320 <UART_SetConfig+0x2d4>)
 800b2ec:	fba3 1302 	umull	r1, r3, r3, r2
 800b2f0:	095b      	lsrs	r3, r3, #5
 800b2f2:	2164      	movs	r1, #100	; 0x64
 800b2f4:	fb01 f303 	mul.w	r3, r1, r3
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	00db      	lsls	r3, r3, #3
 800b2fc:	3332      	adds	r3, #50	; 0x32
 800b2fe:	4a08      	ldr	r2, [pc, #32]	; (800b320 <UART_SetConfig+0x2d4>)
 800b300:	fba2 2303 	umull	r2, r3, r2, r3
 800b304:	095b      	lsrs	r3, r3, #5
 800b306:	f003 0207 	and.w	r2, r3, #7
 800b30a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4422      	add	r2, r4
 800b312:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b314:	e105      	b.n	800b522 <UART_SetConfig+0x4d6>
 800b316:	bf00      	nop
 800b318:	40011000 	.word	0x40011000
 800b31c:	40011400 	.word	0x40011400
 800b320:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b328:	2200      	movs	r2, #0
 800b32a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b32e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b332:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b336:	4642      	mov	r2, r8
 800b338:	464b      	mov	r3, r9
 800b33a:	1891      	adds	r1, r2, r2
 800b33c:	6239      	str	r1, [r7, #32]
 800b33e:	415b      	adcs	r3, r3
 800b340:	627b      	str	r3, [r7, #36]	; 0x24
 800b342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b346:	4641      	mov	r1, r8
 800b348:	1854      	adds	r4, r2, r1
 800b34a:	4649      	mov	r1, r9
 800b34c:	eb43 0501 	adc.w	r5, r3, r1
 800b350:	f04f 0200 	mov.w	r2, #0
 800b354:	f04f 0300 	mov.w	r3, #0
 800b358:	00eb      	lsls	r3, r5, #3
 800b35a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b35e:	00e2      	lsls	r2, r4, #3
 800b360:	4614      	mov	r4, r2
 800b362:	461d      	mov	r5, r3
 800b364:	4643      	mov	r3, r8
 800b366:	18e3      	adds	r3, r4, r3
 800b368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b36c:	464b      	mov	r3, r9
 800b36e:	eb45 0303 	adc.w	r3, r5, r3
 800b372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b382:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b386:	f04f 0200 	mov.w	r2, #0
 800b38a:	f04f 0300 	mov.w	r3, #0
 800b38e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b392:	4629      	mov	r1, r5
 800b394:	008b      	lsls	r3, r1, #2
 800b396:	4621      	mov	r1, r4
 800b398:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b39c:	4621      	mov	r1, r4
 800b39e:	008a      	lsls	r2, r1, #2
 800b3a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b3a4:	f7f5 fce2 	bl	8000d6c <__aeabi_uldivmod>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4b60      	ldr	r3, [pc, #384]	; (800b530 <UART_SetConfig+0x4e4>)
 800b3ae:	fba3 2302 	umull	r2, r3, r3, r2
 800b3b2:	095b      	lsrs	r3, r3, #5
 800b3b4:	011c      	lsls	r4, r3, #4
 800b3b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b3c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b3c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b3c8:	4642      	mov	r2, r8
 800b3ca:	464b      	mov	r3, r9
 800b3cc:	1891      	adds	r1, r2, r2
 800b3ce:	61b9      	str	r1, [r7, #24]
 800b3d0:	415b      	adcs	r3, r3
 800b3d2:	61fb      	str	r3, [r7, #28]
 800b3d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3d8:	4641      	mov	r1, r8
 800b3da:	1851      	adds	r1, r2, r1
 800b3dc:	6139      	str	r1, [r7, #16]
 800b3de:	4649      	mov	r1, r9
 800b3e0:	414b      	adcs	r3, r1
 800b3e2:	617b      	str	r3, [r7, #20]
 800b3e4:	f04f 0200 	mov.w	r2, #0
 800b3e8:	f04f 0300 	mov.w	r3, #0
 800b3ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b3f0:	4659      	mov	r1, fp
 800b3f2:	00cb      	lsls	r3, r1, #3
 800b3f4:	4651      	mov	r1, sl
 800b3f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3fa:	4651      	mov	r1, sl
 800b3fc:	00ca      	lsls	r2, r1, #3
 800b3fe:	4610      	mov	r0, r2
 800b400:	4619      	mov	r1, r3
 800b402:	4603      	mov	r3, r0
 800b404:	4642      	mov	r2, r8
 800b406:	189b      	adds	r3, r3, r2
 800b408:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b40c:	464b      	mov	r3, r9
 800b40e:	460a      	mov	r2, r1
 800b410:	eb42 0303 	adc.w	r3, r2, r3
 800b414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	67bb      	str	r3, [r7, #120]	; 0x78
 800b422:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b424:	f04f 0200 	mov.w	r2, #0
 800b428:	f04f 0300 	mov.w	r3, #0
 800b42c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b430:	4649      	mov	r1, r9
 800b432:	008b      	lsls	r3, r1, #2
 800b434:	4641      	mov	r1, r8
 800b436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b43a:	4641      	mov	r1, r8
 800b43c:	008a      	lsls	r2, r1, #2
 800b43e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b442:	f7f5 fc93 	bl	8000d6c <__aeabi_uldivmod>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	4b39      	ldr	r3, [pc, #228]	; (800b530 <UART_SetConfig+0x4e4>)
 800b44c:	fba3 1302 	umull	r1, r3, r3, r2
 800b450:	095b      	lsrs	r3, r3, #5
 800b452:	2164      	movs	r1, #100	; 0x64
 800b454:	fb01 f303 	mul.w	r3, r1, r3
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	011b      	lsls	r3, r3, #4
 800b45c:	3332      	adds	r3, #50	; 0x32
 800b45e:	4a34      	ldr	r2, [pc, #208]	; (800b530 <UART_SetConfig+0x4e4>)
 800b460:	fba2 2303 	umull	r2, r3, r2, r3
 800b464:	095b      	lsrs	r3, r3, #5
 800b466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b46a:	441c      	add	r4, r3
 800b46c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b470:	2200      	movs	r2, #0
 800b472:	673b      	str	r3, [r7, #112]	; 0x70
 800b474:	677a      	str	r2, [r7, #116]	; 0x74
 800b476:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b47a:	4642      	mov	r2, r8
 800b47c:	464b      	mov	r3, r9
 800b47e:	1891      	adds	r1, r2, r2
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	415b      	adcs	r3, r3
 800b484:	60fb      	str	r3, [r7, #12]
 800b486:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b48a:	4641      	mov	r1, r8
 800b48c:	1851      	adds	r1, r2, r1
 800b48e:	6039      	str	r1, [r7, #0]
 800b490:	4649      	mov	r1, r9
 800b492:	414b      	adcs	r3, r1
 800b494:	607b      	str	r3, [r7, #4]
 800b496:	f04f 0200 	mov.w	r2, #0
 800b49a:	f04f 0300 	mov.w	r3, #0
 800b49e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b4a2:	4659      	mov	r1, fp
 800b4a4:	00cb      	lsls	r3, r1, #3
 800b4a6:	4651      	mov	r1, sl
 800b4a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4ac:	4651      	mov	r1, sl
 800b4ae:	00ca      	lsls	r2, r1, #3
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	4642      	mov	r2, r8
 800b4b8:	189b      	adds	r3, r3, r2
 800b4ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4bc:	464b      	mov	r3, r9
 800b4be:	460a      	mov	r2, r1
 800b4c0:	eb42 0303 	adc.w	r3, r2, r3
 800b4c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	663b      	str	r3, [r7, #96]	; 0x60
 800b4d0:	667a      	str	r2, [r7, #100]	; 0x64
 800b4d2:	f04f 0200 	mov.w	r2, #0
 800b4d6:	f04f 0300 	mov.w	r3, #0
 800b4da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b4de:	4649      	mov	r1, r9
 800b4e0:	008b      	lsls	r3, r1, #2
 800b4e2:	4641      	mov	r1, r8
 800b4e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4e8:	4641      	mov	r1, r8
 800b4ea:	008a      	lsls	r2, r1, #2
 800b4ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b4f0:	f7f5 fc3c 	bl	8000d6c <__aeabi_uldivmod>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	4b0d      	ldr	r3, [pc, #52]	; (800b530 <UART_SetConfig+0x4e4>)
 800b4fa:	fba3 1302 	umull	r1, r3, r3, r2
 800b4fe:	095b      	lsrs	r3, r3, #5
 800b500:	2164      	movs	r1, #100	; 0x64
 800b502:	fb01 f303 	mul.w	r3, r1, r3
 800b506:	1ad3      	subs	r3, r2, r3
 800b508:	011b      	lsls	r3, r3, #4
 800b50a:	3332      	adds	r3, #50	; 0x32
 800b50c:	4a08      	ldr	r2, [pc, #32]	; (800b530 <UART_SetConfig+0x4e4>)
 800b50e:	fba2 2303 	umull	r2, r3, r2, r3
 800b512:	095b      	lsrs	r3, r3, #5
 800b514:	f003 020f 	and.w	r2, r3, #15
 800b518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4422      	add	r2, r4
 800b520:	609a      	str	r2, [r3, #8]
}
 800b522:	bf00      	nop
 800b524:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b528:	46bd      	mov	sp, r7
 800b52a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b52e:	bf00      	nop
 800b530:	51eb851f 	.word	0x51eb851f

0800b534 <__errno>:
 800b534:	4b01      	ldr	r3, [pc, #4]	; (800b53c <__errno+0x8>)
 800b536:	6818      	ldr	r0, [r3, #0]
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	20000290 	.word	0x20000290

0800b540 <__libc_init_array>:
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	4d0d      	ldr	r5, [pc, #52]	; (800b578 <__libc_init_array+0x38>)
 800b544:	4c0d      	ldr	r4, [pc, #52]	; (800b57c <__libc_init_array+0x3c>)
 800b546:	1b64      	subs	r4, r4, r5
 800b548:	10a4      	asrs	r4, r4, #2
 800b54a:	2600      	movs	r6, #0
 800b54c:	42a6      	cmp	r6, r4
 800b54e:	d109      	bne.n	800b564 <__libc_init_array+0x24>
 800b550:	4d0b      	ldr	r5, [pc, #44]	; (800b580 <__libc_init_array+0x40>)
 800b552:	4c0c      	ldr	r4, [pc, #48]	; (800b584 <__libc_init_array+0x44>)
 800b554:	f001 f9e2 	bl	800c91c <_init>
 800b558:	1b64      	subs	r4, r4, r5
 800b55a:	10a4      	asrs	r4, r4, #2
 800b55c:	2600      	movs	r6, #0
 800b55e:	42a6      	cmp	r6, r4
 800b560:	d105      	bne.n	800b56e <__libc_init_array+0x2e>
 800b562:	bd70      	pop	{r4, r5, r6, pc}
 800b564:	f855 3b04 	ldr.w	r3, [r5], #4
 800b568:	4798      	blx	r3
 800b56a:	3601      	adds	r6, #1
 800b56c:	e7ee      	b.n	800b54c <__libc_init_array+0xc>
 800b56e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b572:	4798      	blx	r3
 800b574:	3601      	adds	r6, #1
 800b576:	e7f2      	b.n	800b55e <__libc_init_array+0x1e>
 800b578:	0800d208 	.word	0x0800d208
 800b57c:	0800d208 	.word	0x0800d208
 800b580:	0800d208 	.word	0x0800d208
 800b584:	0800d20c 	.word	0x0800d20c

0800b588 <memcpy>:
 800b588:	440a      	add	r2, r1
 800b58a:	4291      	cmp	r1, r2
 800b58c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b590:	d100      	bne.n	800b594 <memcpy+0xc>
 800b592:	4770      	bx	lr
 800b594:	b510      	push	{r4, lr}
 800b596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b59a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b59e:	4291      	cmp	r1, r2
 800b5a0:	d1f9      	bne.n	800b596 <memcpy+0xe>
 800b5a2:	bd10      	pop	{r4, pc}

0800b5a4 <memset>:
 800b5a4:	4402      	add	r2, r0
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d100      	bne.n	800b5ae <memset+0xa>
 800b5ac:	4770      	bx	lr
 800b5ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b5b2:	e7f9      	b.n	800b5a8 <memset+0x4>

0800b5b4 <atan2>:
 800b5b4:	f000 b89c 	b.w	800b6f0 <__ieee754_atan2>

0800b5b8 <pow>:
 800b5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ba:	ed2d 8b02 	vpush	{d8}
 800b5be:	eeb0 8a40 	vmov.f32	s16, s0
 800b5c2:	eef0 8a60 	vmov.f32	s17, s1
 800b5c6:	ec55 4b11 	vmov	r4, r5, d1
 800b5ca:	f000 f95d 	bl	800b888 <__ieee754_pow>
 800b5ce:	4622      	mov	r2, r4
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	ec57 6b10 	vmov	r6, r7, d0
 800b5da:	f7f5 fa53 	bl	8000a84 <__aeabi_dcmpun>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d13b      	bne.n	800b65a <pow+0xa2>
 800b5e2:	ec51 0b18 	vmov	r0, r1, d8
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f7f5 fa19 	bl	8000a20 <__aeabi_dcmpeq>
 800b5ee:	b1b8      	cbz	r0, 800b620 <pow+0x68>
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	f7f5 fa12 	bl	8000a20 <__aeabi_dcmpeq>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d146      	bne.n	800b68e <pow+0xd6>
 800b600:	ec45 4b10 	vmov	d0, r4, r5
 800b604:	f001 f8f9 	bl	800c7fa <finite>
 800b608:	b338      	cbz	r0, 800b65a <pow+0xa2>
 800b60a:	2200      	movs	r2, #0
 800b60c:	2300      	movs	r3, #0
 800b60e:	4620      	mov	r0, r4
 800b610:	4629      	mov	r1, r5
 800b612:	f7f5 fa0f 	bl	8000a34 <__aeabi_dcmplt>
 800b616:	b300      	cbz	r0, 800b65a <pow+0xa2>
 800b618:	f7ff ff8c 	bl	800b534 <__errno>
 800b61c:	2322      	movs	r3, #34	; 0x22
 800b61e:	e01b      	b.n	800b658 <pow+0xa0>
 800b620:	ec47 6b10 	vmov	d0, r6, r7
 800b624:	f001 f8e9 	bl	800c7fa <finite>
 800b628:	b9e0      	cbnz	r0, 800b664 <pow+0xac>
 800b62a:	eeb0 0a48 	vmov.f32	s0, s16
 800b62e:	eef0 0a68 	vmov.f32	s1, s17
 800b632:	f001 f8e2 	bl	800c7fa <finite>
 800b636:	b1a8      	cbz	r0, 800b664 <pow+0xac>
 800b638:	ec45 4b10 	vmov	d0, r4, r5
 800b63c:	f001 f8dd 	bl	800c7fa <finite>
 800b640:	b180      	cbz	r0, 800b664 <pow+0xac>
 800b642:	4632      	mov	r2, r6
 800b644:	463b      	mov	r3, r7
 800b646:	4630      	mov	r0, r6
 800b648:	4639      	mov	r1, r7
 800b64a:	f7f5 fa1b 	bl	8000a84 <__aeabi_dcmpun>
 800b64e:	2800      	cmp	r0, #0
 800b650:	d0e2      	beq.n	800b618 <pow+0x60>
 800b652:	f7ff ff6f 	bl	800b534 <__errno>
 800b656:	2321      	movs	r3, #33	; 0x21
 800b658:	6003      	str	r3, [r0, #0]
 800b65a:	ecbd 8b02 	vpop	{d8}
 800b65e:	ec47 6b10 	vmov	d0, r6, r7
 800b662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b664:	2200      	movs	r2, #0
 800b666:	2300      	movs	r3, #0
 800b668:	4630      	mov	r0, r6
 800b66a:	4639      	mov	r1, r7
 800b66c:	f7f5 f9d8 	bl	8000a20 <__aeabi_dcmpeq>
 800b670:	2800      	cmp	r0, #0
 800b672:	d0f2      	beq.n	800b65a <pow+0xa2>
 800b674:	eeb0 0a48 	vmov.f32	s0, s16
 800b678:	eef0 0a68 	vmov.f32	s1, s17
 800b67c:	f001 f8bd 	bl	800c7fa <finite>
 800b680:	2800      	cmp	r0, #0
 800b682:	d0ea      	beq.n	800b65a <pow+0xa2>
 800b684:	ec45 4b10 	vmov	d0, r4, r5
 800b688:	f001 f8b7 	bl	800c7fa <finite>
 800b68c:	e7c3      	b.n	800b616 <pow+0x5e>
 800b68e:	4f01      	ldr	r7, [pc, #4]	; (800b694 <pow+0xdc>)
 800b690:	2600      	movs	r6, #0
 800b692:	e7e2      	b.n	800b65a <pow+0xa2>
 800b694:	3ff00000 	.word	0x3ff00000

0800b698 <sqrt>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	ed2d 8b02 	vpush	{d8}
 800b69e:	ec55 4b10 	vmov	r4, r5, d0
 800b6a2:	f000 fe1f 	bl	800c2e4 <__ieee754_sqrt>
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	462b      	mov	r3, r5
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	eeb0 8a40 	vmov.f32	s16, s0
 800b6b2:	eef0 8a60 	vmov.f32	s17, s1
 800b6b6:	f7f5 f9e5 	bl	8000a84 <__aeabi_dcmpun>
 800b6ba:	b990      	cbnz	r0, 800b6e2 <sqrt+0x4a>
 800b6bc:	2200      	movs	r2, #0
 800b6be:	2300      	movs	r3, #0
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	f7f5 f9b6 	bl	8000a34 <__aeabi_dcmplt>
 800b6c8:	b158      	cbz	r0, 800b6e2 <sqrt+0x4a>
 800b6ca:	f7ff ff33 	bl	800b534 <__errno>
 800b6ce:	2321      	movs	r3, #33	; 0x21
 800b6d0:	6003      	str	r3, [r0, #0]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	4619      	mov	r1, r3
 800b6da:	f7f5 f863 	bl	80007a4 <__aeabi_ddiv>
 800b6de:	ec41 0b18 	vmov	d8, r0, r1
 800b6e2:	eeb0 0a48 	vmov.f32	s0, s16
 800b6e6:	eef0 0a68 	vmov.f32	s1, s17
 800b6ea:	ecbd 8b02 	vpop	{d8}
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}

0800b6f0 <__ieee754_atan2>:
 800b6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f4:	ec57 6b11 	vmov	r6, r7, d1
 800b6f8:	4273      	negs	r3, r6
 800b6fa:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b880 <__ieee754_atan2+0x190>
 800b6fe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b702:	4333      	orrs	r3, r6
 800b704:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b708:	4573      	cmp	r3, lr
 800b70a:	ec51 0b10 	vmov	r0, r1, d0
 800b70e:	ee11 8a10 	vmov	r8, s2
 800b712:	d80a      	bhi.n	800b72a <__ieee754_atan2+0x3a>
 800b714:	4244      	negs	r4, r0
 800b716:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b71a:	4304      	orrs	r4, r0
 800b71c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b720:	4574      	cmp	r4, lr
 800b722:	ee10 9a10 	vmov	r9, s0
 800b726:	468c      	mov	ip, r1
 800b728:	d907      	bls.n	800b73a <__ieee754_atan2+0x4a>
 800b72a:	4632      	mov	r2, r6
 800b72c:	463b      	mov	r3, r7
 800b72e:	f7f4 fd59 	bl	80001e4 <__adddf3>
 800b732:	ec41 0b10 	vmov	d0, r0, r1
 800b736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b73a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b73e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b742:	4334      	orrs	r4, r6
 800b744:	d103      	bne.n	800b74e <__ieee754_atan2+0x5e>
 800b746:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b74a:	f000 bead 	b.w	800c4a8 <atan>
 800b74e:	17bc      	asrs	r4, r7, #30
 800b750:	f004 0402 	and.w	r4, r4, #2
 800b754:	ea53 0909 	orrs.w	r9, r3, r9
 800b758:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b75c:	d107      	bne.n	800b76e <__ieee754_atan2+0x7e>
 800b75e:	2c02      	cmp	r4, #2
 800b760:	d060      	beq.n	800b824 <__ieee754_atan2+0x134>
 800b762:	2c03      	cmp	r4, #3
 800b764:	d1e5      	bne.n	800b732 <__ieee754_atan2+0x42>
 800b766:	a142      	add	r1, pc, #264	; (adr r1, 800b870 <__ieee754_atan2+0x180>)
 800b768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b76c:	e7e1      	b.n	800b732 <__ieee754_atan2+0x42>
 800b76e:	ea52 0808 	orrs.w	r8, r2, r8
 800b772:	d106      	bne.n	800b782 <__ieee754_atan2+0x92>
 800b774:	f1bc 0f00 	cmp.w	ip, #0
 800b778:	da5f      	bge.n	800b83a <__ieee754_atan2+0x14a>
 800b77a:	a13f      	add	r1, pc, #252	; (adr r1, 800b878 <__ieee754_atan2+0x188>)
 800b77c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b780:	e7d7      	b.n	800b732 <__ieee754_atan2+0x42>
 800b782:	4572      	cmp	r2, lr
 800b784:	d10f      	bne.n	800b7a6 <__ieee754_atan2+0xb6>
 800b786:	4293      	cmp	r3, r2
 800b788:	f104 34ff 	add.w	r4, r4, #4294967295
 800b78c:	d107      	bne.n	800b79e <__ieee754_atan2+0xae>
 800b78e:	2c02      	cmp	r4, #2
 800b790:	d84c      	bhi.n	800b82c <__ieee754_atan2+0x13c>
 800b792:	4b35      	ldr	r3, [pc, #212]	; (800b868 <__ieee754_atan2+0x178>)
 800b794:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b798:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b79c:	e7c9      	b.n	800b732 <__ieee754_atan2+0x42>
 800b79e:	2c02      	cmp	r4, #2
 800b7a0:	d848      	bhi.n	800b834 <__ieee754_atan2+0x144>
 800b7a2:	4b32      	ldr	r3, [pc, #200]	; (800b86c <__ieee754_atan2+0x17c>)
 800b7a4:	e7f6      	b.n	800b794 <__ieee754_atan2+0xa4>
 800b7a6:	4573      	cmp	r3, lr
 800b7a8:	d0e4      	beq.n	800b774 <__ieee754_atan2+0x84>
 800b7aa:	1a9b      	subs	r3, r3, r2
 800b7ac:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b7b0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b7b4:	da1e      	bge.n	800b7f4 <__ieee754_atan2+0x104>
 800b7b6:	2f00      	cmp	r7, #0
 800b7b8:	da01      	bge.n	800b7be <__ieee754_atan2+0xce>
 800b7ba:	323c      	adds	r2, #60	; 0x3c
 800b7bc:	db1e      	blt.n	800b7fc <__ieee754_atan2+0x10c>
 800b7be:	4632      	mov	r2, r6
 800b7c0:	463b      	mov	r3, r7
 800b7c2:	f7f4 ffef 	bl	80007a4 <__aeabi_ddiv>
 800b7c6:	ec41 0b10 	vmov	d0, r0, r1
 800b7ca:	f001 f80d 	bl	800c7e8 <fabs>
 800b7ce:	f000 fe6b 	bl	800c4a8 <atan>
 800b7d2:	ec51 0b10 	vmov	r0, r1, d0
 800b7d6:	2c01      	cmp	r4, #1
 800b7d8:	d013      	beq.n	800b802 <__ieee754_atan2+0x112>
 800b7da:	2c02      	cmp	r4, #2
 800b7dc:	d015      	beq.n	800b80a <__ieee754_atan2+0x11a>
 800b7de:	2c00      	cmp	r4, #0
 800b7e0:	d0a7      	beq.n	800b732 <__ieee754_atan2+0x42>
 800b7e2:	a319      	add	r3, pc, #100	; (adr r3, 800b848 <__ieee754_atan2+0x158>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	f7f4 fcfa 	bl	80001e0 <__aeabi_dsub>
 800b7ec:	a318      	add	r3, pc, #96	; (adr r3, 800b850 <__ieee754_atan2+0x160>)
 800b7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f2:	e014      	b.n	800b81e <__ieee754_atan2+0x12e>
 800b7f4:	a118      	add	r1, pc, #96	; (adr r1, 800b858 <__ieee754_atan2+0x168>)
 800b7f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7fa:	e7ec      	b.n	800b7d6 <__ieee754_atan2+0xe6>
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	2100      	movs	r1, #0
 800b800:	e7e9      	b.n	800b7d6 <__ieee754_atan2+0xe6>
 800b802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b806:	4619      	mov	r1, r3
 800b808:	e793      	b.n	800b732 <__ieee754_atan2+0x42>
 800b80a:	a30f      	add	r3, pc, #60	; (adr r3, 800b848 <__ieee754_atan2+0x158>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f7f4 fce6 	bl	80001e0 <__aeabi_dsub>
 800b814:	4602      	mov	r2, r0
 800b816:	460b      	mov	r3, r1
 800b818:	a10d      	add	r1, pc, #52	; (adr r1, 800b850 <__ieee754_atan2+0x160>)
 800b81a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b81e:	f7f4 fcdf 	bl	80001e0 <__aeabi_dsub>
 800b822:	e786      	b.n	800b732 <__ieee754_atan2+0x42>
 800b824:	a10a      	add	r1, pc, #40	; (adr r1, 800b850 <__ieee754_atan2+0x160>)
 800b826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b82a:	e782      	b.n	800b732 <__ieee754_atan2+0x42>
 800b82c:	a10c      	add	r1, pc, #48	; (adr r1, 800b860 <__ieee754_atan2+0x170>)
 800b82e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b832:	e77e      	b.n	800b732 <__ieee754_atan2+0x42>
 800b834:	2000      	movs	r0, #0
 800b836:	2100      	movs	r1, #0
 800b838:	e77b      	b.n	800b732 <__ieee754_atan2+0x42>
 800b83a:	a107      	add	r1, pc, #28	; (adr r1, 800b858 <__ieee754_atan2+0x168>)
 800b83c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b840:	e777      	b.n	800b732 <__ieee754_atan2+0x42>
 800b842:	bf00      	nop
 800b844:	f3af 8000 	nop.w
 800b848:	33145c07 	.word	0x33145c07
 800b84c:	3ca1a626 	.word	0x3ca1a626
 800b850:	54442d18 	.word	0x54442d18
 800b854:	400921fb 	.word	0x400921fb
 800b858:	54442d18 	.word	0x54442d18
 800b85c:	3ff921fb 	.word	0x3ff921fb
 800b860:	54442d18 	.word	0x54442d18
 800b864:	3fe921fb 	.word	0x3fe921fb
 800b868:	0800d160 	.word	0x0800d160
 800b86c:	0800d178 	.word	0x0800d178
 800b870:	54442d18 	.word	0x54442d18
 800b874:	c00921fb 	.word	0xc00921fb
 800b878:	54442d18 	.word	0x54442d18
 800b87c:	bff921fb 	.word	0xbff921fb
 800b880:	7ff00000 	.word	0x7ff00000
 800b884:	00000000 	.word	0x00000000

0800b888 <__ieee754_pow>:
 800b888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88c:	ed2d 8b06 	vpush	{d8-d10}
 800b890:	b089      	sub	sp, #36	; 0x24
 800b892:	ed8d 1b00 	vstr	d1, [sp]
 800b896:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b89a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b89e:	ea58 0102 	orrs.w	r1, r8, r2
 800b8a2:	ec57 6b10 	vmov	r6, r7, d0
 800b8a6:	d115      	bne.n	800b8d4 <__ieee754_pow+0x4c>
 800b8a8:	19b3      	adds	r3, r6, r6
 800b8aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b8ae:	4152      	adcs	r2, r2
 800b8b0:	4299      	cmp	r1, r3
 800b8b2:	4b89      	ldr	r3, [pc, #548]	; (800bad8 <__ieee754_pow+0x250>)
 800b8b4:	4193      	sbcs	r3, r2
 800b8b6:	f080 84d2 	bcs.w	800c25e <__ieee754_pow+0x9d6>
 800b8ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8be:	4630      	mov	r0, r6
 800b8c0:	4639      	mov	r1, r7
 800b8c2:	f7f4 fc8f 	bl	80001e4 <__adddf3>
 800b8c6:	ec41 0b10 	vmov	d0, r0, r1
 800b8ca:	b009      	add	sp, #36	; 0x24
 800b8cc:	ecbd 8b06 	vpop	{d8-d10}
 800b8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d4:	4b81      	ldr	r3, [pc, #516]	; (800badc <__ieee754_pow+0x254>)
 800b8d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b8da:	429c      	cmp	r4, r3
 800b8dc:	ee10 aa10 	vmov	sl, s0
 800b8e0:	463d      	mov	r5, r7
 800b8e2:	dc06      	bgt.n	800b8f2 <__ieee754_pow+0x6a>
 800b8e4:	d101      	bne.n	800b8ea <__ieee754_pow+0x62>
 800b8e6:	2e00      	cmp	r6, #0
 800b8e8:	d1e7      	bne.n	800b8ba <__ieee754_pow+0x32>
 800b8ea:	4598      	cmp	r8, r3
 800b8ec:	dc01      	bgt.n	800b8f2 <__ieee754_pow+0x6a>
 800b8ee:	d10f      	bne.n	800b910 <__ieee754_pow+0x88>
 800b8f0:	b172      	cbz	r2, 800b910 <__ieee754_pow+0x88>
 800b8f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b8f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b8fa:	ea55 050a 	orrs.w	r5, r5, sl
 800b8fe:	d1dc      	bne.n	800b8ba <__ieee754_pow+0x32>
 800b900:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b904:	18db      	adds	r3, r3, r3
 800b906:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b90a:	4152      	adcs	r2, r2
 800b90c:	429d      	cmp	r5, r3
 800b90e:	e7d0      	b.n	800b8b2 <__ieee754_pow+0x2a>
 800b910:	2d00      	cmp	r5, #0
 800b912:	da3b      	bge.n	800b98c <__ieee754_pow+0x104>
 800b914:	4b72      	ldr	r3, [pc, #456]	; (800bae0 <__ieee754_pow+0x258>)
 800b916:	4598      	cmp	r8, r3
 800b918:	dc51      	bgt.n	800b9be <__ieee754_pow+0x136>
 800b91a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b91e:	4598      	cmp	r8, r3
 800b920:	f340 84ac 	ble.w	800c27c <__ieee754_pow+0x9f4>
 800b924:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b928:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b92c:	2b14      	cmp	r3, #20
 800b92e:	dd0f      	ble.n	800b950 <__ieee754_pow+0xc8>
 800b930:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b934:	fa22 f103 	lsr.w	r1, r2, r3
 800b938:	fa01 f303 	lsl.w	r3, r1, r3
 800b93c:	4293      	cmp	r3, r2
 800b93e:	f040 849d 	bne.w	800c27c <__ieee754_pow+0x9f4>
 800b942:	f001 0101 	and.w	r1, r1, #1
 800b946:	f1c1 0302 	rsb	r3, r1, #2
 800b94a:	9304      	str	r3, [sp, #16]
 800b94c:	b182      	cbz	r2, 800b970 <__ieee754_pow+0xe8>
 800b94e:	e05f      	b.n	800ba10 <__ieee754_pow+0x188>
 800b950:	2a00      	cmp	r2, #0
 800b952:	d15b      	bne.n	800ba0c <__ieee754_pow+0x184>
 800b954:	f1c3 0314 	rsb	r3, r3, #20
 800b958:	fa48 f103 	asr.w	r1, r8, r3
 800b95c:	fa01 f303 	lsl.w	r3, r1, r3
 800b960:	4543      	cmp	r3, r8
 800b962:	f040 8488 	bne.w	800c276 <__ieee754_pow+0x9ee>
 800b966:	f001 0101 	and.w	r1, r1, #1
 800b96a:	f1c1 0302 	rsb	r3, r1, #2
 800b96e:	9304      	str	r3, [sp, #16]
 800b970:	4b5c      	ldr	r3, [pc, #368]	; (800bae4 <__ieee754_pow+0x25c>)
 800b972:	4598      	cmp	r8, r3
 800b974:	d132      	bne.n	800b9dc <__ieee754_pow+0x154>
 800b976:	f1b9 0f00 	cmp.w	r9, #0
 800b97a:	f280 8478 	bge.w	800c26e <__ieee754_pow+0x9e6>
 800b97e:	4959      	ldr	r1, [pc, #356]	; (800bae4 <__ieee754_pow+0x25c>)
 800b980:	4632      	mov	r2, r6
 800b982:	463b      	mov	r3, r7
 800b984:	2000      	movs	r0, #0
 800b986:	f7f4 ff0d 	bl	80007a4 <__aeabi_ddiv>
 800b98a:	e79c      	b.n	800b8c6 <__ieee754_pow+0x3e>
 800b98c:	2300      	movs	r3, #0
 800b98e:	9304      	str	r3, [sp, #16]
 800b990:	2a00      	cmp	r2, #0
 800b992:	d13d      	bne.n	800ba10 <__ieee754_pow+0x188>
 800b994:	4b51      	ldr	r3, [pc, #324]	; (800badc <__ieee754_pow+0x254>)
 800b996:	4598      	cmp	r8, r3
 800b998:	d1ea      	bne.n	800b970 <__ieee754_pow+0xe8>
 800b99a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b99e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b9a2:	ea53 030a 	orrs.w	r3, r3, sl
 800b9a6:	f000 845a 	beq.w	800c25e <__ieee754_pow+0x9d6>
 800b9aa:	4b4f      	ldr	r3, [pc, #316]	; (800bae8 <__ieee754_pow+0x260>)
 800b9ac:	429c      	cmp	r4, r3
 800b9ae:	dd08      	ble.n	800b9c2 <__ieee754_pow+0x13a>
 800b9b0:	f1b9 0f00 	cmp.w	r9, #0
 800b9b4:	f2c0 8457 	blt.w	800c266 <__ieee754_pow+0x9de>
 800b9b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9bc:	e783      	b.n	800b8c6 <__ieee754_pow+0x3e>
 800b9be:	2302      	movs	r3, #2
 800b9c0:	e7e5      	b.n	800b98e <__ieee754_pow+0x106>
 800b9c2:	f1b9 0f00 	cmp.w	r9, #0
 800b9c6:	f04f 0000 	mov.w	r0, #0
 800b9ca:	f04f 0100 	mov.w	r1, #0
 800b9ce:	f6bf af7a 	bge.w	800b8c6 <__ieee754_pow+0x3e>
 800b9d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b9d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b9da:	e774      	b.n	800b8c6 <__ieee754_pow+0x3e>
 800b9dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b9e0:	d106      	bne.n	800b9f0 <__ieee754_pow+0x168>
 800b9e2:	4632      	mov	r2, r6
 800b9e4:	463b      	mov	r3, r7
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	4639      	mov	r1, r7
 800b9ea:	f7f4 fdb1 	bl	8000550 <__aeabi_dmul>
 800b9ee:	e76a      	b.n	800b8c6 <__ieee754_pow+0x3e>
 800b9f0:	4b3e      	ldr	r3, [pc, #248]	; (800baec <__ieee754_pow+0x264>)
 800b9f2:	4599      	cmp	r9, r3
 800b9f4:	d10c      	bne.n	800ba10 <__ieee754_pow+0x188>
 800b9f6:	2d00      	cmp	r5, #0
 800b9f8:	db0a      	blt.n	800ba10 <__ieee754_pow+0x188>
 800b9fa:	ec47 6b10 	vmov	d0, r6, r7
 800b9fe:	b009      	add	sp, #36	; 0x24
 800ba00:	ecbd 8b06 	vpop	{d8-d10}
 800ba04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba08:	f000 bc6c 	b.w	800c2e4 <__ieee754_sqrt>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	9304      	str	r3, [sp, #16]
 800ba10:	ec47 6b10 	vmov	d0, r6, r7
 800ba14:	f000 fee8 	bl	800c7e8 <fabs>
 800ba18:	ec51 0b10 	vmov	r0, r1, d0
 800ba1c:	f1ba 0f00 	cmp.w	sl, #0
 800ba20:	d129      	bne.n	800ba76 <__ieee754_pow+0x1ee>
 800ba22:	b124      	cbz	r4, 800ba2e <__ieee754_pow+0x1a6>
 800ba24:	4b2f      	ldr	r3, [pc, #188]	; (800bae4 <__ieee754_pow+0x25c>)
 800ba26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d123      	bne.n	800ba76 <__ieee754_pow+0x1ee>
 800ba2e:	f1b9 0f00 	cmp.w	r9, #0
 800ba32:	da05      	bge.n	800ba40 <__ieee754_pow+0x1b8>
 800ba34:	4602      	mov	r2, r0
 800ba36:	460b      	mov	r3, r1
 800ba38:	2000      	movs	r0, #0
 800ba3a:	492a      	ldr	r1, [pc, #168]	; (800bae4 <__ieee754_pow+0x25c>)
 800ba3c:	f7f4 feb2 	bl	80007a4 <__aeabi_ddiv>
 800ba40:	2d00      	cmp	r5, #0
 800ba42:	f6bf af40 	bge.w	800b8c6 <__ieee754_pow+0x3e>
 800ba46:	9b04      	ldr	r3, [sp, #16]
 800ba48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ba4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ba50:	4323      	orrs	r3, r4
 800ba52:	d108      	bne.n	800ba66 <__ieee754_pow+0x1de>
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	4610      	mov	r0, r2
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	f7f4 fbc0 	bl	80001e0 <__aeabi_dsub>
 800ba60:	4602      	mov	r2, r0
 800ba62:	460b      	mov	r3, r1
 800ba64:	e78f      	b.n	800b986 <__ieee754_pow+0xfe>
 800ba66:	9b04      	ldr	r3, [sp, #16]
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	f47f af2c 	bne.w	800b8c6 <__ieee754_pow+0x3e>
 800ba6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba72:	4619      	mov	r1, r3
 800ba74:	e727      	b.n	800b8c6 <__ieee754_pow+0x3e>
 800ba76:	0feb      	lsrs	r3, r5, #31
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	9306      	str	r3, [sp, #24]
 800ba7c:	9a06      	ldr	r2, [sp, #24]
 800ba7e:	9b04      	ldr	r3, [sp, #16]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	d102      	bne.n	800ba8a <__ieee754_pow+0x202>
 800ba84:	4632      	mov	r2, r6
 800ba86:	463b      	mov	r3, r7
 800ba88:	e7e6      	b.n	800ba58 <__ieee754_pow+0x1d0>
 800ba8a:	4b19      	ldr	r3, [pc, #100]	; (800baf0 <__ieee754_pow+0x268>)
 800ba8c:	4598      	cmp	r8, r3
 800ba8e:	f340 80fb 	ble.w	800bc88 <__ieee754_pow+0x400>
 800ba92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ba96:	4598      	cmp	r8, r3
 800ba98:	4b13      	ldr	r3, [pc, #76]	; (800bae8 <__ieee754_pow+0x260>)
 800ba9a:	dd0c      	ble.n	800bab6 <__ieee754_pow+0x22e>
 800ba9c:	429c      	cmp	r4, r3
 800ba9e:	dc0f      	bgt.n	800bac0 <__ieee754_pow+0x238>
 800baa0:	f1b9 0f00 	cmp.w	r9, #0
 800baa4:	da0f      	bge.n	800bac6 <__ieee754_pow+0x23e>
 800baa6:	2000      	movs	r0, #0
 800baa8:	b009      	add	sp, #36	; 0x24
 800baaa:	ecbd 8b06 	vpop	{d8-d10}
 800baae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab2:	f000 bcf0 	b.w	800c496 <__math_oflow>
 800bab6:	429c      	cmp	r4, r3
 800bab8:	dbf2      	blt.n	800baa0 <__ieee754_pow+0x218>
 800baba:	4b0a      	ldr	r3, [pc, #40]	; (800bae4 <__ieee754_pow+0x25c>)
 800babc:	429c      	cmp	r4, r3
 800babe:	dd19      	ble.n	800baf4 <__ieee754_pow+0x26c>
 800bac0:	f1b9 0f00 	cmp.w	r9, #0
 800bac4:	dcef      	bgt.n	800baa6 <__ieee754_pow+0x21e>
 800bac6:	2000      	movs	r0, #0
 800bac8:	b009      	add	sp, #36	; 0x24
 800baca:	ecbd 8b06 	vpop	{d8-d10}
 800bace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad2:	f000 bcd7 	b.w	800c484 <__math_uflow>
 800bad6:	bf00      	nop
 800bad8:	fff00000 	.word	0xfff00000
 800badc:	7ff00000 	.word	0x7ff00000
 800bae0:	433fffff 	.word	0x433fffff
 800bae4:	3ff00000 	.word	0x3ff00000
 800bae8:	3fefffff 	.word	0x3fefffff
 800baec:	3fe00000 	.word	0x3fe00000
 800baf0:	41e00000 	.word	0x41e00000
 800baf4:	4b60      	ldr	r3, [pc, #384]	; (800bc78 <__ieee754_pow+0x3f0>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	f7f4 fb72 	bl	80001e0 <__aeabi_dsub>
 800bafc:	a354      	add	r3, pc, #336	; (adr r3, 800bc50 <__ieee754_pow+0x3c8>)
 800bafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb02:	4604      	mov	r4, r0
 800bb04:	460d      	mov	r5, r1
 800bb06:	f7f4 fd23 	bl	8000550 <__aeabi_dmul>
 800bb0a:	a353      	add	r3, pc, #332	; (adr r3, 800bc58 <__ieee754_pow+0x3d0>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	4606      	mov	r6, r0
 800bb12:	460f      	mov	r7, r1
 800bb14:	4620      	mov	r0, r4
 800bb16:	4629      	mov	r1, r5
 800bb18:	f7f4 fd1a 	bl	8000550 <__aeabi_dmul>
 800bb1c:	4b57      	ldr	r3, [pc, #348]	; (800bc7c <__ieee754_pow+0x3f4>)
 800bb1e:	4682      	mov	sl, r0
 800bb20:	468b      	mov	fp, r1
 800bb22:	2200      	movs	r2, #0
 800bb24:	4620      	mov	r0, r4
 800bb26:	4629      	mov	r1, r5
 800bb28:	f7f4 fd12 	bl	8000550 <__aeabi_dmul>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	460b      	mov	r3, r1
 800bb30:	a14b      	add	r1, pc, #300	; (adr r1, 800bc60 <__ieee754_pow+0x3d8>)
 800bb32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb36:	f7f4 fb53 	bl	80001e0 <__aeabi_dsub>
 800bb3a:	4622      	mov	r2, r4
 800bb3c:	462b      	mov	r3, r5
 800bb3e:	f7f4 fd07 	bl	8000550 <__aeabi_dmul>
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	2000      	movs	r0, #0
 800bb48:	494d      	ldr	r1, [pc, #308]	; (800bc80 <__ieee754_pow+0x3f8>)
 800bb4a:	f7f4 fb49 	bl	80001e0 <__aeabi_dsub>
 800bb4e:	4622      	mov	r2, r4
 800bb50:	4680      	mov	r8, r0
 800bb52:	4689      	mov	r9, r1
 800bb54:	462b      	mov	r3, r5
 800bb56:	4620      	mov	r0, r4
 800bb58:	4629      	mov	r1, r5
 800bb5a:	f7f4 fcf9 	bl	8000550 <__aeabi_dmul>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	460b      	mov	r3, r1
 800bb62:	4640      	mov	r0, r8
 800bb64:	4649      	mov	r1, r9
 800bb66:	f7f4 fcf3 	bl	8000550 <__aeabi_dmul>
 800bb6a:	a33f      	add	r3, pc, #252	; (adr r3, 800bc68 <__ieee754_pow+0x3e0>)
 800bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb70:	f7f4 fcee 	bl	8000550 <__aeabi_dmul>
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	4650      	mov	r0, sl
 800bb7a:	4659      	mov	r1, fp
 800bb7c:	f7f4 fb30 	bl	80001e0 <__aeabi_dsub>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4680      	mov	r8, r0
 800bb86:	4689      	mov	r9, r1
 800bb88:	4630      	mov	r0, r6
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	f7f4 fb2a 	bl	80001e4 <__adddf3>
 800bb90:	2000      	movs	r0, #0
 800bb92:	4632      	mov	r2, r6
 800bb94:	463b      	mov	r3, r7
 800bb96:	4604      	mov	r4, r0
 800bb98:	460d      	mov	r5, r1
 800bb9a:	f7f4 fb21 	bl	80001e0 <__aeabi_dsub>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	460b      	mov	r3, r1
 800bba2:	4640      	mov	r0, r8
 800bba4:	4649      	mov	r1, r9
 800bba6:	f7f4 fb1b 	bl	80001e0 <__aeabi_dsub>
 800bbaa:	9b04      	ldr	r3, [sp, #16]
 800bbac:	9a06      	ldr	r2, [sp, #24]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	4682      	mov	sl, r0
 800bbb4:	468b      	mov	fp, r1
 800bbb6:	f040 81e7 	bne.w	800bf88 <__ieee754_pow+0x700>
 800bbba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bc70 <__ieee754_pow+0x3e8>
 800bbbe:	eeb0 8a47 	vmov.f32	s16, s14
 800bbc2:	eef0 8a67 	vmov.f32	s17, s15
 800bbc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bbca:	2600      	movs	r6, #0
 800bbcc:	4632      	mov	r2, r6
 800bbce:	463b      	mov	r3, r7
 800bbd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbd4:	f7f4 fb04 	bl	80001e0 <__aeabi_dsub>
 800bbd8:	4622      	mov	r2, r4
 800bbda:	462b      	mov	r3, r5
 800bbdc:	f7f4 fcb8 	bl	8000550 <__aeabi_dmul>
 800bbe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbe4:	4680      	mov	r8, r0
 800bbe6:	4689      	mov	r9, r1
 800bbe8:	4650      	mov	r0, sl
 800bbea:	4659      	mov	r1, fp
 800bbec:	f7f4 fcb0 	bl	8000550 <__aeabi_dmul>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4640      	mov	r0, r8
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	f7f4 faf4 	bl	80001e4 <__adddf3>
 800bbfc:	4632      	mov	r2, r6
 800bbfe:	463b      	mov	r3, r7
 800bc00:	4680      	mov	r8, r0
 800bc02:	4689      	mov	r9, r1
 800bc04:	4620      	mov	r0, r4
 800bc06:	4629      	mov	r1, r5
 800bc08:	f7f4 fca2 	bl	8000550 <__aeabi_dmul>
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4604      	mov	r4, r0
 800bc10:	460d      	mov	r5, r1
 800bc12:	4602      	mov	r2, r0
 800bc14:	4649      	mov	r1, r9
 800bc16:	4640      	mov	r0, r8
 800bc18:	f7f4 fae4 	bl	80001e4 <__adddf3>
 800bc1c:	4b19      	ldr	r3, [pc, #100]	; (800bc84 <__ieee754_pow+0x3fc>)
 800bc1e:	4299      	cmp	r1, r3
 800bc20:	ec45 4b19 	vmov	d9, r4, r5
 800bc24:	4606      	mov	r6, r0
 800bc26:	460f      	mov	r7, r1
 800bc28:	468b      	mov	fp, r1
 800bc2a:	f340 82f1 	ble.w	800c210 <__ieee754_pow+0x988>
 800bc2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bc32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bc36:	4303      	orrs	r3, r0
 800bc38:	f000 81e4 	beq.w	800c004 <__ieee754_pow+0x77c>
 800bc3c:	ec51 0b18 	vmov	r0, r1, d8
 800bc40:	2200      	movs	r2, #0
 800bc42:	2300      	movs	r3, #0
 800bc44:	f7f4 fef6 	bl	8000a34 <__aeabi_dcmplt>
 800bc48:	3800      	subs	r0, #0
 800bc4a:	bf18      	it	ne
 800bc4c:	2001      	movne	r0, #1
 800bc4e:	e72b      	b.n	800baa8 <__ieee754_pow+0x220>
 800bc50:	60000000 	.word	0x60000000
 800bc54:	3ff71547 	.word	0x3ff71547
 800bc58:	f85ddf44 	.word	0xf85ddf44
 800bc5c:	3e54ae0b 	.word	0x3e54ae0b
 800bc60:	55555555 	.word	0x55555555
 800bc64:	3fd55555 	.word	0x3fd55555
 800bc68:	652b82fe 	.word	0x652b82fe
 800bc6c:	3ff71547 	.word	0x3ff71547
 800bc70:	00000000 	.word	0x00000000
 800bc74:	bff00000 	.word	0xbff00000
 800bc78:	3ff00000 	.word	0x3ff00000
 800bc7c:	3fd00000 	.word	0x3fd00000
 800bc80:	3fe00000 	.word	0x3fe00000
 800bc84:	408fffff 	.word	0x408fffff
 800bc88:	4bd5      	ldr	r3, [pc, #852]	; (800bfe0 <__ieee754_pow+0x758>)
 800bc8a:	402b      	ands	r3, r5
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	b92b      	cbnz	r3, 800bc9c <__ieee754_pow+0x414>
 800bc90:	4bd4      	ldr	r3, [pc, #848]	; (800bfe4 <__ieee754_pow+0x75c>)
 800bc92:	f7f4 fc5d 	bl	8000550 <__aeabi_dmul>
 800bc96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	1523      	asrs	r3, r4, #20
 800bc9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bca2:	4413      	add	r3, r2
 800bca4:	9305      	str	r3, [sp, #20]
 800bca6:	4bd0      	ldr	r3, [pc, #832]	; (800bfe8 <__ieee754_pow+0x760>)
 800bca8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bcac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bcb0:	429c      	cmp	r4, r3
 800bcb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bcb6:	dd08      	ble.n	800bcca <__ieee754_pow+0x442>
 800bcb8:	4bcc      	ldr	r3, [pc, #816]	; (800bfec <__ieee754_pow+0x764>)
 800bcba:	429c      	cmp	r4, r3
 800bcbc:	f340 8162 	ble.w	800bf84 <__ieee754_pow+0x6fc>
 800bcc0:	9b05      	ldr	r3, [sp, #20]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	9305      	str	r3, [sp, #20]
 800bcc6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bcca:	2400      	movs	r4, #0
 800bccc:	00e3      	lsls	r3, r4, #3
 800bcce:	9307      	str	r3, [sp, #28]
 800bcd0:	4bc7      	ldr	r3, [pc, #796]	; (800bff0 <__ieee754_pow+0x768>)
 800bcd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bcd6:	ed93 7b00 	vldr	d7, [r3]
 800bcda:	4629      	mov	r1, r5
 800bcdc:	ec53 2b17 	vmov	r2, r3, d7
 800bce0:	eeb0 9a47 	vmov.f32	s18, s14
 800bce4:	eef0 9a67 	vmov.f32	s19, s15
 800bce8:	4682      	mov	sl, r0
 800bcea:	f7f4 fa79 	bl	80001e0 <__aeabi_dsub>
 800bcee:	4652      	mov	r2, sl
 800bcf0:	4606      	mov	r6, r0
 800bcf2:	460f      	mov	r7, r1
 800bcf4:	462b      	mov	r3, r5
 800bcf6:	ec51 0b19 	vmov	r0, r1, d9
 800bcfa:	f7f4 fa73 	bl	80001e4 <__adddf3>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	460b      	mov	r3, r1
 800bd02:	2000      	movs	r0, #0
 800bd04:	49bb      	ldr	r1, [pc, #748]	; (800bff4 <__ieee754_pow+0x76c>)
 800bd06:	f7f4 fd4d 	bl	80007a4 <__aeabi_ddiv>
 800bd0a:	ec41 0b1a 	vmov	d10, r0, r1
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4630      	mov	r0, r6
 800bd14:	4639      	mov	r1, r7
 800bd16:	f7f4 fc1b 	bl	8000550 <__aeabi_dmul>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd20:	9302      	str	r3, [sp, #8]
 800bd22:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd26:	46ab      	mov	fp, r5
 800bd28:	106d      	asrs	r5, r5, #1
 800bd2a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bd2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bd32:	ec41 0b18 	vmov	d8, r0, r1
 800bd36:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	4640      	mov	r0, r8
 800bd3e:	4649      	mov	r1, r9
 800bd40:	4614      	mov	r4, r2
 800bd42:	461d      	mov	r5, r3
 800bd44:	f7f4 fc04 	bl	8000550 <__aeabi_dmul>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	4639      	mov	r1, r7
 800bd50:	f7f4 fa46 	bl	80001e0 <__aeabi_dsub>
 800bd54:	ec53 2b19 	vmov	r2, r3, d9
 800bd58:	4606      	mov	r6, r0
 800bd5a:	460f      	mov	r7, r1
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	4629      	mov	r1, r5
 800bd60:	f7f4 fa3e 	bl	80001e0 <__aeabi_dsub>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	4650      	mov	r0, sl
 800bd6a:	4659      	mov	r1, fp
 800bd6c:	f7f4 fa38 	bl	80001e0 <__aeabi_dsub>
 800bd70:	4642      	mov	r2, r8
 800bd72:	464b      	mov	r3, r9
 800bd74:	f7f4 fbec 	bl	8000550 <__aeabi_dmul>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	4639      	mov	r1, r7
 800bd80:	f7f4 fa2e 	bl	80001e0 <__aeabi_dsub>
 800bd84:	ec53 2b1a 	vmov	r2, r3, d10
 800bd88:	f7f4 fbe2 	bl	8000550 <__aeabi_dmul>
 800bd8c:	ec53 2b18 	vmov	r2, r3, d8
 800bd90:	ec41 0b19 	vmov	d9, r0, r1
 800bd94:	ec51 0b18 	vmov	r0, r1, d8
 800bd98:	f7f4 fbda 	bl	8000550 <__aeabi_dmul>
 800bd9c:	a37c      	add	r3, pc, #496	; (adr r3, 800bf90 <__ieee754_pow+0x708>)
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	4604      	mov	r4, r0
 800bda4:	460d      	mov	r5, r1
 800bda6:	f7f4 fbd3 	bl	8000550 <__aeabi_dmul>
 800bdaa:	a37b      	add	r3, pc, #492	; (adr r3, 800bf98 <__ieee754_pow+0x710>)
 800bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb0:	f7f4 fa18 	bl	80001e4 <__adddf3>
 800bdb4:	4622      	mov	r2, r4
 800bdb6:	462b      	mov	r3, r5
 800bdb8:	f7f4 fbca 	bl	8000550 <__aeabi_dmul>
 800bdbc:	a378      	add	r3, pc, #480	; (adr r3, 800bfa0 <__ieee754_pow+0x718>)
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	f7f4 fa0f 	bl	80001e4 <__adddf3>
 800bdc6:	4622      	mov	r2, r4
 800bdc8:	462b      	mov	r3, r5
 800bdca:	f7f4 fbc1 	bl	8000550 <__aeabi_dmul>
 800bdce:	a376      	add	r3, pc, #472	; (adr r3, 800bfa8 <__ieee754_pow+0x720>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	f7f4 fa06 	bl	80001e4 <__adddf3>
 800bdd8:	4622      	mov	r2, r4
 800bdda:	462b      	mov	r3, r5
 800bddc:	f7f4 fbb8 	bl	8000550 <__aeabi_dmul>
 800bde0:	a373      	add	r3, pc, #460	; (adr r3, 800bfb0 <__ieee754_pow+0x728>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f7f4 f9fd 	bl	80001e4 <__adddf3>
 800bdea:	4622      	mov	r2, r4
 800bdec:	462b      	mov	r3, r5
 800bdee:	f7f4 fbaf 	bl	8000550 <__aeabi_dmul>
 800bdf2:	a371      	add	r3, pc, #452	; (adr r3, 800bfb8 <__ieee754_pow+0x730>)
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f7f4 f9f4 	bl	80001e4 <__adddf3>
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	4606      	mov	r6, r0
 800be00:	460f      	mov	r7, r1
 800be02:	462b      	mov	r3, r5
 800be04:	4620      	mov	r0, r4
 800be06:	4629      	mov	r1, r5
 800be08:	f7f4 fba2 	bl	8000550 <__aeabi_dmul>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4630      	mov	r0, r6
 800be12:	4639      	mov	r1, r7
 800be14:	f7f4 fb9c 	bl	8000550 <__aeabi_dmul>
 800be18:	4642      	mov	r2, r8
 800be1a:	4604      	mov	r4, r0
 800be1c:	460d      	mov	r5, r1
 800be1e:	464b      	mov	r3, r9
 800be20:	ec51 0b18 	vmov	r0, r1, d8
 800be24:	f7f4 f9de 	bl	80001e4 <__adddf3>
 800be28:	ec53 2b19 	vmov	r2, r3, d9
 800be2c:	f7f4 fb90 	bl	8000550 <__aeabi_dmul>
 800be30:	4622      	mov	r2, r4
 800be32:	462b      	mov	r3, r5
 800be34:	f7f4 f9d6 	bl	80001e4 <__adddf3>
 800be38:	4642      	mov	r2, r8
 800be3a:	4682      	mov	sl, r0
 800be3c:	468b      	mov	fp, r1
 800be3e:	464b      	mov	r3, r9
 800be40:	4640      	mov	r0, r8
 800be42:	4649      	mov	r1, r9
 800be44:	f7f4 fb84 	bl	8000550 <__aeabi_dmul>
 800be48:	4b6b      	ldr	r3, [pc, #428]	; (800bff8 <__ieee754_pow+0x770>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	4606      	mov	r6, r0
 800be4e:	460f      	mov	r7, r1
 800be50:	f7f4 f9c8 	bl	80001e4 <__adddf3>
 800be54:	4652      	mov	r2, sl
 800be56:	465b      	mov	r3, fp
 800be58:	f7f4 f9c4 	bl	80001e4 <__adddf3>
 800be5c:	2000      	movs	r0, #0
 800be5e:	4604      	mov	r4, r0
 800be60:	460d      	mov	r5, r1
 800be62:	4602      	mov	r2, r0
 800be64:	460b      	mov	r3, r1
 800be66:	4640      	mov	r0, r8
 800be68:	4649      	mov	r1, r9
 800be6a:	f7f4 fb71 	bl	8000550 <__aeabi_dmul>
 800be6e:	4b62      	ldr	r3, [pc, #392]	; (800bff8 <__ieee754_pow+0x770>)
 800be70:	4680      	mov	r8, r0
 800be72:	4689      	mov	r9, r1
 800be74:	2200      	movs	r2, #0
 800be76:	4620      	mov	r0, r4
 800be78:	4629      	mov	r1, r5
 800be7a:	f7f4 f9b1 	bl	80001e0 <__aeabi_dsub>
 800be7e:	4632      	mov	r2, r6
 800be80:	463b      	mov	r3, r7
 800be82:	f7f4 f9ad 	bl	80001e0 <__aeabi_dsub>
 800be86:	4602      	mov	r2, r0
 800be88:	460b      	mov	r3, r1
 800be8a:	4650      	mov	r0, sl
 800be8c:	4659      	mov	r1, fp
 800be8e:	f7f4 f9a7 	bl	80001e0 <__aeabi_dsub>
 800be92:	ec53 2b18 	vmov	r2, r3, d8
 800be96:	f7f4 fb5b 	bl	8000550 <__aeabi_dmul>
 800be9a:	4622      	mov	r2, r4
 800be9c:	4606      	mov	r6, r0
 800be9e:	460f      	mov	r7, r1
 800bea0:	462b      	mov	r3, r5
 800bea2:	ec51 0b19 	vmov	r0, r1, d9
 800bea6:	f7f4 fb53 	bl	8000550 <__aeabi_dmul>
 800beaa:	4602      	mov	r2, r0
 800beac:	460b      	mov	r3, r1
 800beae:	4630      	mov	r0, r6
 800beb0:	4639      	mov	r1, r7
 800beb2:	f7f4 f997 	bl	80001e4 <__adddf3>
 800beb6:	4606      	mov	r6, r0
 800beb8:	460f      	mov	r7, r1
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4640      	mov	r0, r8
 800bec0:	4649      	mov	r1, r9
 800bec2:	f7f4 f98f 	bl	80001e4 <__adddf3>
 800bec6:	a33e      	add	r3, pc, #248	; (adr r3, 800bfc0 <__ieee754_pow+0x738>)
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	2000      	movs	r0, #0
 800bece:	4604      	mov	r4, r0
 800bed0:	460d      	mov	r5, r1
 800bed2:	f7f4 fb3d 	bl	8000550 <__aeabi_dmul>
 800bed6:	4642      	mov	r2, r8
 800bed8:	ec41 0b18 	vmov	d8, r0, r1
 800bedc:	464b      	mov	r3, r9
 800bede:	4620      	mov	r0, r4
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7f4 f97d 	bl	80001e0 <__aeabi_dsub>
 800bee6:	4602      	mov	r2, r0
 800bee8:	460b      	mov	r3, r1
 800beea:	4630      	mov	r0, r6
 800beec:	4639      	mov	r1, r7
 800beee:	f7f4 f977 	bl	80001e0 <__aeabi_dsub>
 800bef2:	a335      	add	r3, pc, #212	; (adr r3, 800bfc8 <__ieee754_pow+0x740>)
 800bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef8:	f7f4 fb2a 	bl	8000550 <__aeabi_dmul>
 800befc:	a334      	add	r3, pc, #208	; (adr r3, 800bfd0 <__ieee754_pow+0x748>)
 800befe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf02:	4606      	mov	r6, r0
 800bf04:	460f      	mov	r7, r1
 800bf06:	4620      	mov	r0, r4
 800bf08:	4629      	mov	r1, r5
 800bf0a:	f7f4 fb21 	bl	8000550 <__aeabi_dmul>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	460b      	mov	r3, r1
 800bf12:	4630      	mov	r0, r6
 800bf14:	4639      	mov	r1, r7
 800bf16:	f7f4 f965 	bl	80001e4 <__adddf3>
 800bf1a:	9a07      	ldr	r2, [sp, #28]
 800bf1c:	4b37      	ldr	r3, [pc, #220]	; (800bffc <__ieee754_pow+0x774>)
 800bf1e:	4413      	add	r3, r2
 800bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf24:	f7f4 f95e 	bl	80001e4 <__adddf3>
 800bf28:	4682      	mov	sl, r0
 800bf2a:	9805      	ldr	r0, [sp, #20]
 800bf2c:	468b      	mov	fp, r1
 800bf2e:	f7f4 faa5 	bl	800047c <__aeabi_i2d>
 800bf32:	9a07      	ldr	r2, [sp, #28]
 800bf34:	4b32      	ldr	r3, [pc, #200]	; (800c000 <__ieee754_pow+0x778>)
 800bf36:	4413      	add	r3, r2
 800bf38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	460f      	mov	r7, r1
 800bf40:	4652      	mov	r2, sl
 800bf42:	465b      	mov	r3, fp
 800bf44:	ec51 0b18 	vmov	r0, r1, d8
 800bf48:	f7f4 f94c 	bl	80001e4 <__adddf3>
 800bf4c:	4642      	mov	r2, r8
 800bf4e:	464b      	mov	r3, r9
 800bf50:	f7f4 f948 	bl	80001e4 <__adddf3>
 800bf54:	4632      	mov	r2, r6
 800bf56:	463b      	mov	r3, r7
 800bf58:	f7f4 f944 	bl	80001e4 <__adddf3>
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	4632      	mov	r2, r6
 800bf60:	463b      	mov	r3, r7
 800bf62:	4604      	mov	r4, r0
 800bf64:	460d      	mov	r5, r1
 800bf66:	f7f4 f93b 	bl	80001e0 <__aeabi_dsub>
 800bf6a:	4642      	mov	r2, r8
 800bf6c:	464b      	mov	r3, r9
 800bf6e:	f7f4 f937 	bl	80001e0 <__aeabi_dsub>
 800bf72:	ec53 2b18 	vmov	r2, r3, d8
 800bf76:	f7f4 f933 	bl	80001e0 <__aeabi_dsub>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	4650      	mov	r0, sl
 800bf80:	4659      	mov	r1, fp
 800bf82:	e610      	b.n	800bba6 <__ieee754_pow+0x31e>
 800bf84:	2401      	movs	r4, #1
 800bf86:	e6a1      	b.n	800bccc <__ieee754_pow+0x444>
 800bf88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bfd8 <__ieee754_pow+0x750>
 800bf8c:	e617      	b.n	800bbbe <__ieee754_pow+0x336>
 800bf8e:	bf00      	nop
 800bf90:	4a454eef 	.word	0x4a454eef
 800bf94:	3fca7e28 	.word	0x3fca7e28
 800bf98:	93c9db65 	.word	0x93c9db65
 800bf9c:	3fcd864a 	.word	0x3fcd864a
 800bfa0:	a91d4101 	.word	0xa91d4101
 800bfa4:	3fd17460 	.word	0x3fd17460
 800bfa8:	518f264d 	.word	0x518f264d
 800bfac:	3fd55555 	.word	0x3fd55555
 800bfb0:	db6fabff 	.word	0xdb6fabff
 800bfb4:	3fdb6db6 	.word	0x3fdb6db6
 800bfb8:	33333303 	.word	0x33333303
 800bfbc:	3fe33333 	.word	0x3fe33333
 800bfc0:	e0000000 	.word	0xe0000000
 800bfc4:	3feec709 	.word	0x3feec709
 800bfc8:	dc3a03fd 	.word	0xdc3a03fd
 800bfcc:	3feec709 	.word	0x3feec709
 800bfd0:	145b01f5 	.word	0x145b01f5
 800bfd4:	be3e2fe0 	.word	0xbe3e2fe0
 800bfd8:	00000000 	.word	0x00000000
 800bfdc:	3ff00000 	.word	0x3ff00000
 800bfe0:	7ff00000 	.word	0x7ff00000
 800bfe4:	43400000 	.word	0x43400000
 800bfe8:	0003988e 	.word	0x0003988e
 800bfec:	000bb679 	.word	0x000bb679
 800bff0:	0800d190 	.word	0x0800d190
 800bff4:	3ff00000 	.word	0x3ff00000
 800bff8:	40080000 	.word	0x40080000
 800bffc:	0800d1b0 	.word	0x0800d1b0
 800c000:	0800d1a0 	.word	0x0800d1a0
 800c004:	a3b5      	add	r3, pc, #724	; (adr r3, 800c2dc <__ieee754_pow+0xa54>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	4640      	mov	r0, r8
 800c00c:	4649      	mov	r1, r9
 800c00e:	f7f4 f8e9 	bl	80001e4 <__adddf3>
 800c012:	4622      	mov	r2, r4
 800c014:	ec41 0b1a 	vmov	d10, r0, r1
 800c018:	462b      	mov	r3, r5
 800c01a:	4630      	mov	r0, r6
 800c01c:	4639      	mov	r1, r7
 800c01e:	f7f4 f8df 	bl	80001e0 <__aeabi_dsub>
 800c022:	4602      	mov	r2, r0
 800c024:	460b      	mov	r3, r1
 800c026:	ec51 0b1a 	vmov	r0, r1, d10
 800c02a:	f7f4 fd21 	bl	8000a70 <__aeabi_dcmpgt>
 800c02e:	2800      	cmp	r0, #0
 800c030:	f47f ae04 	bne.w	800bc3c <__ieee754_pow+0x3b4>
 800c034:	4aa4      	ldr	r2, [pc, #656]	; (800c2c8 <__ieee754_pow+0xa40>)
 800c036:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c03a:	4293      	cmp	r3, r2
 800c03c:	f340 8108 	ble.w	800c250 <__ieee754_pow+0x9c8>
 800c040:	151b      	asrs	r3, r3, #20
 800c042:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c046:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c04a:	fa4a f303 	asr.w	r3, sl, r3
 800c04e:	445b      	add	r3, fp
 800c050:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c054:	4e9d      	ldr	r6, [pc, #628]	; (800c2cc <__ieee754_pow+0xa44>)
 800c056:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c05a:	4116      	asrs	r6, r2
 800c05c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c060:	2000      	movs	r0, #0
 800c062:	ea23 0106 	bic.w	r1, r3, r6
 800c066:	f1c2 0214 	rsb	r2, r2, #20
 800c06a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c06e:	fa4a fa02 	asr.w	sl, sl, r2
 800c072:	f1bb 0f00 	cmp.w	fp, #0
 800c076:	4602      	mov	r2, r0
 800c078:	460b      	mov	r3, r1
 800c07a:	4620      	mov	r0, r4
 800c07c:	4629      	mov	r1, r5
 800c07e:	bfb8      	it	lt
 800c080:	f1ca 0a00 	rsblt	sl, sl, #0
 800c084:	f7f4 f8ac 	bl	80001e0 <__aeabi_dsub>
 800c088:	ec41 0b19 	vmov	d9, r0, r1
 800c08c:	4642      	mov	r2, r8
 800c08e:	464b      	mov	r3, r9
 800c090:	ec51 0b19 	vmov	r0, r1, d9
 800c094:	f7f4 f8a6 	bl	80001e4 <__adddf3>
 800c098:	a37b      	add	r3, pc, #492	; (adr r3, 800c288 <__ieee754_pow+0xa00>)
 800c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09e:	2000      	movs	r0, #0
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	460d      	mov	r5, r1
 800c0a4:	f7f4 fa54 	bl	8000550 <__aeabi_dmul>
 800c0a8:	ec53 2b19 	vmov	r2, r3, d9
 800c0ac:	4606      	mov	r6, r0
 800c0ae:	460f      	mov	r7, r1
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	f7f4 f894 	bl	80001e0 <__aeabi_dsub>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	4640      	mov	r0, r8
 800c0be:	4649      	mov	r1, r9
 800c0c0:	f7f4 f88e 	bl	80001e0 <__aeabi_dsub>
 800c0c4:	a372      	add	r3, pc, #456	; (adr r3, 800c290 <__ieee754_pow+0xa08>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	f7f4 fa41 	bl	8000550 <__aeabi_dmul>
 800c0ce:	a372      	add	r3, pc, #456	; (adr r3, 800c298 <__ieee754_pow+0xa10>)
 800c0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d4:	4680      	mov	r8, r0
 800c0d6:	4689      	mov	r9, r1
 800c0d8:	4620      	mov	r0, r4
 800c0da:	4629      	mov	r1, r5
 800c0dc:	f7f4 fa38 	bl	8000550 <__aeabi_dmul>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	4649      	mov	r1, r9
 800c0e8:	f7f4 f87c 	bl	80001e4 <__adddf3>
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	460d      	mov	r5, r1
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	4639      	mov	r1, r7
 800c0f8:	f7f4 f874 	bl	80001e4 <__adddf3>
 800c0fc:	4632      	mov	r2, r6
 800c0fe:	463b      	mov	r3, r7
 800c100:	4680      	mov	r8, r0
 800c102:	4689      	mov	r9, r1
 800c104:	f7f4 f86c 	bl	80001e0 <__aeabi_dsub>
 800c108:	4602      	mov	r2, r0
 800c10a:	460b      	mov	r3, r1
 800c10c:	4620      	mov	r0, r4
 800c10e:	4629      	mov	r1, r5
 800c110:	f7f4 f866 	bl	80001e0 <__aeabi_dsub>
 800c114:	4642      	mov	r2, r8
 800c116:	4606      	mov	r6, r0
 800c118:	460f      	mov	r7, r1
 800c11a:	464b      	mov	r3, r9
 800c11c:	4640      	mov	r0, r8
 800c11e:	4649      	mov	r1, r9
 800c120:	f7f4 fa16 	bl	8000550 <__aeabi_dmul>
 800c124:	a35e      	add	r3, pc, #376	; (adr r3, 800c2a0 <__ieee754_pow+0xa18>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	4604      	mov	r4, r0
 800c12c:	460d      	mov	r5, r1
 800c12e:	f7f4 fa0f 	bl	8000550 <__aeabi_dmul>
 800c132:	a35d      	add	r3, pc, #372	; (adr r3, 800c2a8 <__ieee754_pow+0xa20>)
 800c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c138:	f7f4 f852 	bl	80001e0 <__aeabi_dsub>
 800c13c:	4622      	mov	r2, r4
 800c13e:	462b      	mov	r3, r5
 800c140:	f7f4 fa06 	bl	8000550 <__aeabi_dmul>
 800c144:	a35a      	add	r3, pc, #360	; (adr r3, 800c2b0 <__ieee754_pow+0xa28>)
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	f7f4 f84b 	bl	80001e4 <__adddf3>
 800c14e:	4622      	mov	r2, r4
 800c150:	462b      	mov	r3, r5
 800c152:	f7f4 f9fd 	bl	8000550 <__aeabi_dmul>
 800c156:	a358      	add	r3, pc, #352	; (adr r3, 800c2b8 <__ieee754_pow+0xa30>)
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	f7f4 f840 	bl	80001e0 <__aeabi_dsub>
 800c160:	4622      	mov	r2, r4
 800c162:	462b      	mov	r3, r5
 800c164:	f7f4 f9f4 	bl	8000550 <__aeabi_dmul>
 800c168:	a355      	add	r3, pc, #340	; (adr r3, 800c2c0 <__ieee754_pow+0xa38>)
 800c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16e:	f7f4 f839 	bl	80001e4 <__adddf3>
 800c172:	4622      	mov	r2, r4
 800c174:	462b      	mov	r3, r5
 800c176:	f7f4 f9eb 	bl	8000550 <__aeabi_dmul>
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	4640      	mov	r0, r8
 800c180:	4649      	mov	r1, r9
 800c182:	f7f4 f82d 	bl	80001e0 <__aeabi_dsub>
 800c186:	4604      	mov	r4, r0
 800c188:	460d      	mov	r5, r1
 800c18a:	4602      	mov	r2, r0
 800c18c:	460b      	mov	r3, r1
 800c18e:	4640      	mov	r0, r8
 800c190:	4649      	mov	r1, r9
 800c192:	f7f4 f9dd 	bl	8000550 <__aeabi_dmul>
 800c196:	2200      	movs	r2, #0
 800c198:	ec41 0b19 	vmov	d9, r0, r1
 800c19c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	f7f4 f81c 	bl	80001e0 <__aeabi_dsub>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	ec51 0b19 	vmov	r0, r1, d9
 800c1b0:	f7f4 faf8 	bl	80007a4 <__aeabi_ddiv>
 800c1b4:	4632      	mov	r2, r6
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	460d      	mov	r5, r1
 800c1ba:	463b      	mov	r3, r7
 800c1bc:	4640      	mov	r0, r8
 800c1be:	4649      	mov	r1, r9
 800c1c0:	f7f4 f9c6 	bl	8000550 <__aeabi_dmul>
 800c1c4:	4632      	mov	r2, r6
 800c1c6:	463b      	mov	r3, r7
 800c1c8:	f7f4 f80c 	bl	80001e4 <__adddf3>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	4629      	mov	r1, r5
 800c1d4:	f7f4 f804 	bl	80001e0 <__aeabi_dsub>
 800c1d8:	4642      	mov	r2, r8
 800c1da:	464b      	mov	r3, r9
 800c1dc:	f7f4 f800 	bl	80001e0 <__aeabi_dsub>
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	493a      	ldr	r1, [pc, #232]	; (800c2d0 <__ieee754_pow+0xa48>)
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	f7f3 fffa 	bl	80001e0 <__aeabi_dsub>
 800c1ec:	ec41 0b10 	vmov	d0, r0, r1
 800c1f0:	ee10 3a90 	vmov	r3, s1
 800c1f4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c1f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1fc:	da2b      	bge.n	800c256 <__ieee754_pow+0x9ce>
 800c1fe:	4650      	mov	r0, sl
 800c200:	f000 fb06 	bl	800c810 <scalbn>
 800c204:	ec51 0b10 	vmov	r0, r1, d0
 800c208:	ec53 2b18 	vmov	r2, r3, d8
 800c20c:	f7ff bbed 	b.w	800b9ea <__ieee754_pow+0x162>
 800c210:	4b30      	ldr	r3, [pc, #192]	; (800c2d4 <__ieee754_pow+0xa4c>)
 800c212:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c216:	429e      	cmp	r6, r3
 800c218:	f77f af0c 	ble.w	800c034 <__ieee754_pow+0x7ac>
 800c21c:	4b2e      	ldr	r3, [pc, #184]	; (800c2d8 <__ieee754_pow+0xa50>)
 800c21e:	440b      	add	r3, r1
 800c220:	4303      	orrs	r3, r0
 800c222:	d009      	beq.n	800c238 <__ieee754_pow+0x9b0>
 800c224:	ec51 0b18 	vmov	r0, r1, d8
 800c228:	2200      	movs	r2, #0
 800c22a:	2300      	movs	r3, #0
 800c22c:	f7f4 fc02 	bl	8000a34 <__aeabi_dcmplt>
 800c230:	3800      	subs	r0, #0
 800c232:	bf18      	it	ne
 800c234:	2001      	movne	r0, #1
 800c236:	e447      	b.n	800bac8 <__ieee754_pow+0x240>
 800c238:	4622      	mov	r2, r4
 800c23a:	462b      	mov	r3, r5
 800c23c:	f7f3 ffd0 	bl	80001e0 <__aeabi_dsub>
 800c240:	4642      	mov	r2, r8
 800c242:	464b      	mov	r3, r9
 800c244:	f7f4 fc0a 	bl	8000a5c <__aeabi_dcmpge>
 800c248:	2800      	cmp	r0, #0
 800c24a:	f43f aef3 	beq.w	800c034 <__ieee754_pow+0x7ac>
 800c24e:	e7e9      	b.n	800c224 <__ieee754_pow+0x99c>
 800c250:	f04f 0a00 	mov.w	sl, #0
 800c254:	e71a      	b.n	800c08c <__ieee754_pow+0x804>
 800c256:	ec51 0b10 	vmov	r0, r1, d0
 800c25a:	4619      	mov	r1, r3
 800c25c:	e7d4      	b.n	800c208 <__ieee754_pow+0x980>
 800c25e:	491c      	ldr	r1, [pc, #112]	; (800c2d0 <__ieee754_pow+0xa48>)
 800c260:	2000      	movs	r0, #0
 800c262:	f7ff bb30 	b.w	800b8c6 <__ieee754_pow+0x3e>
 800c266:	2000      	movs	r0, #0
 800c268:	2100      	movs	r1, #0
 800c26a:	f7ff bb2c 	b.w	800b8c6 <__ieee754_pow+0x3e>
 800c26e:	4630      	mov	r0, r6
 800c270:	4639      	mov	r1, r7
 800c272:	f7ff bb28 	b.w	800b8c6 <__ieee754_pow+0x3e>
 800c276:	9204      	str	r2, [sp, #16]
 800c278:	f7ff bb7a 	b.w	800b970 <__ieee754_pow+0xe8>
 800c27c:	2300      	movs	r3, #0
 800c27e:	f7ff bb64 	b.w	800b94a <__ieee754_pow+0xc2>
 800c282:	bf00      	nop
 800c284:	f3af 8000 	nop.w
 800c288:	00000000 	.word	0x00000000
 800c28c:	3fe62e43 	.word	0x3fe62e43
 800c290:	fefa39ef 	.word	0xfefa39ef
 800c294:	3fe62e42 	.word	0x3fe62e42
 800c298:	0ca86c39 	.word	0x0ca86c39
 800c29c:	be205c61 	.word	0xbe205c61
 800c2a0:	72bea4d0 	.word	0x72bea4d0
 800c2a4:	3e663769 	.word	0x3e663769
 800c2a8:	c5d26bf1 	.word	0xc5d26bf1
 800c2ac:	3ebbbd41 	.word	0x3ebbbd41
 800c2b0:	af25de2c 	.word	0xaf25de2c
 800c2b4:	3f11566a 	.word	0x3f11566a
 800c2b8:	16bebd93 	.word	0x16bebd93
 800c2bc:	3f66c16c 	.word	0x3f66c16c
 800c2c0:	5555553e 	.word	0x5555553e
 800c2c4:	3fc55555 	.word	0x3fc55555
 800c2c8:	3fe00000 	.word	0x3fe00000
 800c2cc:	000fffff 	.word	0x000fffff
 800c2d0:	3ff00000 	.word	0x3ff00000
 800c2d4:	4090cbff 	.word	0x4090cbff
 800c2d8:	3f6f3400 	.word	0x3f6f3400
 800c2dc:	652b82fe 	.word	0x652b82fe
 800c2e0:	3c971547 	.word	0x3c971547

0800c2e4 <__ieee754_sqrt>:
 800c2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e8:	ec55 4b10 	vmov	r4, r5, d0
 800c2ec:	4e55      	ldr	r6, [pc, #340]	; (800c444 <__ieee754_sqrt+0x160>)
 800c2ee:	43ae      	bics	r6, r5
 800c2f0:	ee10 0a10 	vmov	r0, s0
 800c2f4:	ee10 3a10 	vmov	r3, s0
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	d110      	bne.n	800c320 <__ieee754_sqrt+0x3c>
 800c2fe:	ee10 2a10 	vmov	r2, s0
 800c302:	462b      	mov	r3, r5
 800c304:	f7f4 f924 	bl	8000550 <__aeabi_dmul>
 800c308:	4602      	mov	r2, r0
 800c30a:	460b      	mov	r3, r1
 800c30c:	4620      	mov	r0, r4
 800c30e:	4629      	mov	r1, r5
 800c310:	f7f3 ff68 	bl	80001e4 <__adddf3>
 800c314:	4604      	mov	r4, r0
 800c316:	460d      	mov	r5, r1
 800c318:	ec45 4b10 	vmov	d0, r4, r5
 800c31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c320:	2d00      	cmp	r5, #0
 800c322:	dc10      	bgt.n	800c346 <__ieee754_sqrt+0x62>
 800c324:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c328:	4330      	orrs	r0, r6
 800c32a:	d0f5      	beq.n	800c318 <__ieee754_sqrt+0x34>
 800c32c:	b15d      	cbz	r5, 800c346 <__ieee754_sqrt+0x62>
 800c32e:	ee10 2a10 	vmov	r2, s0
 800c332:	462b      	mov	r3, r5
 800c334:	ee10 0a10 	vmov	r0, s0
 800c338:	f7f3 ff52 	bl	80001e0 <__aeabi_dsub>
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	f7f4 fa30 	bl	80007a4 <__aeabi_ddiv>
 800c344:	e7e6      	b.n	800c314 <__ieee754_sqrt+0x30>
 800c346:	1512      	asrs	r2, r2, #20
 800c348:	d074      	beq.n	800c434 <__ieee754_sqrt+0x150>
 800c34a:	07d4      	lsls	r4, r2, #31
 800c34c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c350:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c358:	bf5e      	ittt	pl
 800c35a:	0fda      	lsrpl	r2, r3, #31
 800c35c:	005b      	lslpl	r3, r3, #1
 800c35e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c362:	2400      	movs	r4, #0
 800c364:	0fda      	lsrs	r2, r3, #31
 800c366:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c36a:	107f      	asrs	r7, r7, #1
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	2516      	movs	r5, #22
 800c370:	4620      	mov	r0, r4
 800c372:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c376:	1886      	adds	r6, r0, r2
 800c378:	428e      	cmp	r6, r1
 800c37a:	bfde      	ittt	le
 800c37c:	1b89      	suble	r1, r1, r6
 800c37e:	18b0      	addle	r0, r6, r2
 800c380:	18a4      	addle	r4, r4, r2
 800c382:	0049      	lsls	r1, r1, #1
 800c384:	3d01      	subs	r5, #1
 800c386:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c38a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c38e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c392:	d1f0      	bne.n	800c376 <__ieee754_sqrt+0x92>
 800c394:	462a      	mov	r2, r5
 800c396:	f04f 0e20 	mov.w	lr, #32
 800c39a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c39e:	4281      	cmp	r1, r0
 800c3a0:	eb06 0c05 	add.w	ip, r6, r5
 800c3a4:	dc02      	bgt.n	800c3ac <__ieee754_sqrt+0xc8>
 800c3a6:	d113      	bne.n	800c3d0 <__ieee754_sqrt+0xec>
 800c3a8:	459c      	cmp	ip, r3
 800c3aa:	d811      	bhi.n	800c3d0 <__ieee754_sqrt+0xec>
 800c3ac:	f1bc 0f00 	cmp.w	ip, #0
 800c3b0:	eb0c 0506 	add.w	r5, ip, r6
 800c3b4:	da43      	bge.n	800c43e <__ieee754_sqrt+0x15a>
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	db41      	blt.n	800c43e <__ieee754_sqrt+0x15a>
 800c3ba:	f100 0801 	add.w	r8, r0, #1
 800c3be:	1a09      	subs	r1, r1, r0
 800c3c0:	459c      	cmp	ip, r3
 800c3c2:	bf88      	it	hi
 800c3c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c3c8:	eba3 030c 	sub.w	r3, r3, ip
 800c3cc:	4432      	add	r2, r6
 800c3ce:	4640      	mov	r0, r8
 800c3d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c3d4:	f1be 0e01 	subs.w	lr, lr, #1
 800c3d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c3dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c3e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c3e4:	d1db      	bne.n	800c39e <__ieee754_sqrt+0xba>
 800c3e6:	430b      	orrs	r3, r1
 800c3e8:	d006      	beq.n	800c3f8 <__ieee754_sqrt+0x114>
 800c3ea:	1c50      	adds	r0, r2, #1
 800c3ec:	bf13      	iteet	ne
 800c3ee:	3201      	addne	r2, #1
 800c3f0:	3401      	addeq	r4, #1
 800c3f2:	4672      	moveq	r2, lr
 800c3f4:	f022 0201 	bicne.w	r2, r2, #1
 800c3f8:	1063      	asrs	r3, r4, #1
 800c3fa:	0852      	lsrs	r2, r2, #1
 800c3fc:	07e1      	lsls	r1, r4, #31
 800c3fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c402:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c406:	bf48      	it	mi
 800c408:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c40c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c410:	4614      	mov	r4, r2
 800c412:	e781      	b.n	800c318 <__ieee754_sqrt+0x34>
 800c414:	0ad9      	lsrs	r1, r3, #11
 800c416:	3815      	subs	r0, #21
 800c418:	055b      	lsls	r3, r3, #21
 800c41a:	2900      	cmp	r1, #0
 800c41c:	d0fa      	beq.n	800c414 <__ieee754_sqrt+0x130>
 800c41e:	02cd      	lsls	r5, r1, #11
 800c420:	d50a      	bpl.n	800c438 <__ieee754_sqrt+0x154>
 800c422:	f1c2 0420 	rsb	r4, r2, #32
 800c426:	fa23 f404 	lsr.w	r4, r3, r4
 800c42a:	1e55      	subs	r5, r2, #1
 800c42c:	4093      	lsls	r3, r2
 800c42e:	4321      	orrs	r1, r4
 800c430:	1b42      	subs	r2, r0, r5
 800c432:	e78a      	b.n	800c34a <__ieee754_sqrt+0x66>
 800c434:	4610      	mov	r0, r2
 800c436:	e7f0      	b.n	800c41a <__ieee754_sqrt+0x136>
 800c438:	0049      	lsls	r1, r1, #1
 800c43a:	3201      	adds	r2, #1
 800c43c:	e7ef      	b.n	800c41e <__ieee754_sqrt+0x13a>
 800c43e:	4680      	mov	r8, r0
 800c440:	e7bd      	b.n	800c3be <__ieee754_sqrt+0xda>
 800c442:	bf00      	nop
 800c444:	7ff00000 	.word	0x7ff00000

0800c448 <with_errno>:
 800c448:	b570      	push	{r4, r5, r6, lr}
 800c44a:	4604      	mov	r4, r0
 800c44c:	460d      	mov	r5, r1
 800c44e:	4616      	mov	r6, r2
 800c450:	f7ff f870 	bl	800b534 <__errno>
 800c454:	4629      	mov	r1, r5
 800c456:	6006      	str	r6, [r0, #0]
 800c458:	4620      	mov	r0, r4
 800c45a:	bd70      	pop	{r4, r5, r6, pc}

0800c45c <xflow>:
 800c45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c45e:	4614      	mov	r4, r2
 800c460:	461d      	mov	r5, r3
 800c462:	b108      	cbz	r0, 800c468 <xflow+0xc>
 800c464:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c468:	e9cd 2300 	strd	r2, r3, [sp]
 800c46c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c470:	4620      	mov	r0, r4
 800c472:	4629      	mov	r1, r5
 800c474:	f7f4 f86c 	bl	8000550 <__aeabi_dmul>
 800c478:	2222      	movs	r2, #34	; 0x22
 800c47a:	b003      	add	sp, #12
 800c47c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c480:	f7ff bfe2 	b.w	800c448 <with_errno>

0800c484 <__math_uflow>:
 800c484:	b508      	push	{r3, lr}
 800c486:	2200      	movs	r2, #0
 800c488:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c48c:	f7ff ffe6 	bl	800c45c <xflow>
 800c490:	ec41 0b10 	vmov	d0, r0, r1
 800c494:	bd08      	pop	{r3, pc}

0800c496 <__math_oflow>:
 800c496:	b508      	push	{r3, lr}
 800c498:	2200      	movs	r2, #0
 800c49a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c49e:	f7ff ffdd 	bl	800c45c <xflow>
 800c4a2:	ec41 0b10 	vmov	d0, r0, r1
 800c4a6:	bd08      	pop	{r3, pc}

0800c4a8 <atan>:
 800c4a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	ec55 4b10 	vmov	r4, r5, d0
 800c4b0:	4bc3      	ldr	r3, [pc, #780]	; (800c7c0 <atan+0x318>)
 800c4b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c4b6:	429e      	cmp	r6, r3
 800c4b8:	46ab      	mov	fp, r5
 800c4ba:	dd18      	ble.n	800c4ee <atan+0x46>
 800c4bc:	4bc1      	ldr	r3, [pc, #772]	; (800c7c4 <atan+0x31c>)
 800c4be:	429e      	cmp	r6, r3
 800c4c0:	dc01      	bgt.n	800c4c6 <atan+0x1e>
 800c4c2:	d109      	bne.n	800c4d8 <atan+0x30>
 800c4c4:	b144      	cbz	r4, 800c4d8 <atan+0x30>
 800c4c6:	4622      	mov	r2, r4
 800c4c8:	462b      	mov	r3, r5
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	4629      	mov	r1, r5
 800c4ce:	f7f3 fe89 	bl	80001e4 <__adddf3>
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	460d      	mov	r5, r1
 800c4d6:	e006      	b.n	800c4e6 <atan+0x3e>
 800c4d8:	f1bb 0f00 	cmp.w	fp, #0
 800c4dc:	f300 8131 	bgt.w	800c742 <atan+0x29a>
 800c4e0:	a59b      	add	r5, pc, #620	; (adr r5, 800c750 <atan+0x2a8>)
 800c4e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c4e6:	ec45 4b10 	vmov	d0, r4, r5
 800c4ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ee:	4bb6      	ldr	r3, [pc, #728]	; (800c7c8 <atan+0x320>)
 800c4f0:	429e      	cmp	r6, r3
 800c4f2:	dc14      	bgt.n	800c51e <atan+0x76>
 800c4f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c4f8:	429e      	cmp	r6, r3
 800c4fa:	dc0d      	bgt.n	800c518 <atan+0x70>
 800c4fc:	a396      	add	r3, pc, #600	; (adr r3, 800c758 <atan+0x2b0>)
 800c4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c502:	ee10 0a10 	vmov	r0, s0
 800c506:	4629      	mov	r1, r5
 800c508:	f7f3 fe6c 	bl	80001e4 <__adddf3>
 800c50c:	4baf      	ldr	r3, [pc, #700]	; (800c7cc <atan+0x324>)
 800c50e:	2200      	movs	r2, #0
 800c510:	f7f4 faae 	bl	8000a70 <__aeabi_dcmpgt>
 800c514:	2800      	cmp	r0, #0
 800c516:	d1e6      	bne.n	800c4e6 <atan+0x3e>
 800c518:	f04f 3aff 	mov.w	sl, #4294967295
 800c51c:	e02b      	b.n	800c576 <atan+0xce>
 800c51e:	f000 f963 	bl	800c7e8 <fabs>
 800c522:	4bab      	ldr	r3, [pc, #684]	; (800c7d0 <atan+0x328>)
 800c524:	429e      	cmp	r6, r3
 800c526:	ec55 4b10 	vmov	r4, r5, d0
 800c52a:	f300 80bf 	bgt.w	800c6ac <atan+0x204>
 800c52e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c532:	429e      	cmp	r6, r3
 800c534:	f300 80a0 	bgt.w	800c678 <atan+0x1d0>
 800c538:	ee10 2a10 	vmov	r2, s0
 800c53c:	ee10 0a10 	vmov	r0, s0
 800c540:	462b      	mov	r3, r5
 800c542:	4629      	mov	r1, r5
 800c544:	f7f3 fe4e 	bl	80001e4 <__adddf3>
 800c548:	4ba0      	ldr	r3, [pc, #640]	; (800c7cc <atan+0x324>)
 800c54a:	2200      	movs	r2, #0
 800c54c:	f7f3 fe48 	bl	80001e0 <__aeabi_dsub>
 800c550:	2200      	movs	r2, #0
 800c552:	4606      	mov	r6, r0
 800c554:	460f      	mov	r7, r1
 800c556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c55a:	4620      	mov	r0, r4
 800c55c:	4629      	mov	r1, r5
 800c55e:	f7f3 fe41 	bl	80001e4 <__adddf3>
 800c562:	4602      	mov	r2, r0
 800c564:	460b      	mov	r3, r1
 800c566:	4630      	mov	r0, r6
 800c568:	4639      	mov	r1, r7
 800c56a:	f7f4 f91b 	bl	80007a4 <__aeabi_ddiv>
 800c56e:	f04f 0a00 	mov.w	sl, #0
 800c572:	4604      	mov	r4, r0
 800c574:	460d      	mov	r5, r1
 800c576:	4622      	mov	r2, r4
 800c578:	462b      	mov	r3, r5
 800c57a:	4620      	mov	r0, r4
 800c57c:	4629      	mov	r1, r5
 800c57e:	f7f3 ffe7 	bl	8000550 <__aeabi_dmul>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4680      	mov	r8, r0
 800c588:	4689      	mov	r9, r1
 800c58a:	f7f3 ffe1 	bl	8000550 <__aeabi_dmul>
 800c58e:	a374      	add	r3, pc, #464	; (adr r3, 800c760 <atan+0x2b8>)
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	4606      	mov	r6, r0
 800c596:	460f      	mov	r7, r1
 800c598:	f7f3 ffda 	bl	8000550 <__aeabi_dmul>
 800c59c:	a372      	add	r3, pc, #456	; (adr r3, 800c768 <atan+0x2c0>)
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	f7f3 fe1f 	bl	80001e4 <__adddf3>
 800c5a6:	4632      	mov	r2, r6
 800c5a8:	463b      	mov	r3, r7
 800c5aa:	f7f3 ffd1 	bl	8000550 <__aeabi_dmul>
 800c5ae:	a370      	add	r3, pc, #448	; (adr r3, 800c770 <atan+0x2c8>)
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	f7f3 fe16 	bl	80001e4 <__adddf3>
 800c5b8:	4632      	mov	r2, r6
 800c5ba:	463b      	mov	r3, r7
 800c5bc:	f7f3 ffc8 	bl	8000550 <__aeabi_dmul>
 800c5c0:	a36d      	add	r3, pc, #436	; (adr r3, 800c778 <atan+0x2d0>)
 800c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c6:	f7f3 fe0d 	bl	80001e4 <__adddf3>
 800c5ca:	4632      	mov	r2, r6
 800c5cc:	463b      	mov	r3, r7
 800c5ce:	f7f3 ffbf 	bl	8000550 <__aeabi_dmul>
 800c5d2:	a36b      	add	r3, pc, #428	; (adr r3, 800c780 <atan+0x2d8>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f7f3 fe04 	bl	80001e4 <__adddf3>
 800c5dc:	4632      	mov	r2, r6
 800c5de:	463b      	mov	r3, r7
 800c5e0:	f7f3 ffb6 	bl	8000550 <__aeabi_dmul>
 800c5e4:	a368      	add	r3, pc, #416	; (adr r3, 800c788 <atan+0x2e0>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	f7f3 fdfb 	bl	80001e4 <__adddf3>
 800c5ee:	4642      	mov	r2, r8
 800c5f0:	464b      	mov	r3, r9
 800c5f2:	f7f3 ffad 	bl	8000550 <__aeabi_dmul>
 800c5f6:	a366      	add	r3, pc, #408	; (adr r3, 800c790 <atan+0x2e8>)
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	4689      	mov	r9, r1
 800c600:	4630      	mov	r0, r6
 800c602:	4639      	mov	r1, r7
 800c604:	f7f3 ffa4 	bl	8000550 <__aeabi_dmul>
 800c608:	a363      	add	r3, pc, #396	; (adr r3, 800c798 <atan+0x2f0>)
 800c60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60e:	f7f3 fde7 	bl	80001e0 <__aeabi_dsub>
 800c612:	4632      	mov	r2, r6
 800c614:	463b      	mov	r3, r7
 800c616:	f7f3 ff9b 	bl	8000550 <__aeabi_dmul>
 800c61a:	a361      	add	r3, pc, #388	; (adr r3, 800c7a0 <atan+0x2f8>)
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	f7f3 fdde 	bl	80001e0 <__aeabi_dsub>
 800c624:	4632      	mov	r2, r6
 800c626:	463b      	mov	r3, r7
 800c628:	f7f3 ff92 	bl	8000550 <__aeabi_dmul>
 800c62c:	a35e      	add	r3, pc, #376	; (adr r3, 800c7a8 <atan+0x300>)
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	f7f3 fdd5 	bl	80001e0 <__aeabi_dsub>
 800c636:	4632      	mov	r2, r6
 800c638:	463b      	mov	r3, r7
 800c63a:	f7f3 ff89 	bl	8000550 <__aeabi_dmul>
 800c63e:	a35c      	add	r3, pc, #368	; (adr r3, 800c7b0 <atan+0x308>)
 800c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c644:	f7f3 fdcc 	bl	80001e0 <__aeabi_dsub>
 800c648:	4632      	mov	r2, r6
 800c64a:	463b      	mov	r3, r7
 800c64c:	f7f3 ff80 	bl	8000550 <__aeabi_dmul>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4640      	mov	r0, r8
 800c656:	4649      	mov	r1, r9
 800c658:	f7f3 fdc4 	bl	80001e4 <__adddf3>
 800c65c:	4622      	mov	r2, r4
 800c65e:	462b      	mov	r3, r5
 800c660:	f7f3 ff76 	bl	8000550 <__aeabi_dmul>
 800c664:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c668:	4602      	mov	r2, r0
 800c66a:	460b      	mov	r3, r1
 800c66c:	d14b      	bne.n	800c706 <atan+0x25e>
 800c66e:	4620      	mov	r0, r4
 800c670:	4629      	mov	r1, r5
 800c672:	f7f3 fdb5 	bl	80001e0 <__aeabi_dsub>
 800c676:	e72c      	b.n	800c4d2 <atan+0x2a>
 800c678:	ee10 0a10 	vmov	r0, s0
 800c67c:	4b53      	ldr	r3, [pc, #332]	; (800c7cc <atan+0x324>)
 800c67e:	2200      	movs	r2, #0
 800c680:	4629      	mov	r1, r5
 800c682:	f7f3 fdad 	bl	80001e0 <__aeabi_dsub>
 800c686:	4b51      	ldr	r3, [pc, #324]	; (800c7cc <atan+0x324>)
 800c688:	4606      	mov	r6, r0
 800c68a:	460f      	mov	r7, r1
 800c68c:	2200      	movs	r2, #0
 800c68e:	4620      	mov	r0, r4
 800c690:	4629      	mov	r1, r5
 800c692:	f7f3 fda7 	bl	80001e4 <__adddf3>
 800c696:	4602      	mov	r2, r0
 800c698:	460b      	mov	r3, r1
 800c69a:	4630      	mov	r0, r6
 800c69c:	4639      	mov	r1, r7
 800c69e:	f7f4 f881 	bl	80007a4 <__aeabi_ddiv>
 800c6a2:	f04f 0a01 	mov.w	sl, #1
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	460d      	mov	r5, r1
 800c6aa:	e764      	b.n	800c576 <atan+0xce>
 800c6ac:	4b49      	ldr	r3, [pc, #292]	; (800c7d4 <atan+0x32c>)
 800c6ae:	429e      	cmp	r6, r3
 800c6b0:	da1d      	bge.n	800c6ee <atan+0x246>
 800c6b2:	ee10 0a10 	vmov	r0, s0
 800c6b6:	4b48      	ldr	r3, [pc, #288]	; (800c7d8 <atan+0x330>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	f7f3 fd90 	bl	80001e0 <__aeabi_dsub>
 800c6c0:	4b45      	ldr	r3, [pc, #276]	; (800c7d8 <atan+0x330>)
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	460f      	mov	r7, r1
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	f7f3 ff40 	bl	8000550 <__aeabi_dmul>
 800c6d0:	4b3e      	ldr	r3, [pc, #248]	; (800c7cc <atan+0x324>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f7f3 fd86 	bl	80001e4 <__adddf3>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4630      	mov	r0, r6
 800c6de:	4639      	mov	r1, r7
 800c6e0:	f7f4 f860 	bl	80007a4 <__aeabi_ddiv>
 800c6e4:	f04f 0a02 	mov.w	sl, #2
 800c6e8:	4604      	mov	r4, r0
 800c6ea:	460d      	mov	r5, r1
 800c6ec:	e743      	b.n	800c576 <atan+0xce>
 800c6ee:	462b      	mov	r3, r5
 800c6f0:	ee10 2a10 	vmov	r2, s0
 800c6f4:	4939      	ldr	r1, [pc, #228]	; (800c7dc <atan+0x334>)
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	f7f4 f854 	bl	80007a4 <__aeabi_ddiv>
 800c6fc:	f04f 0a03 	mov.w	sl, #3
 800c700:	4604      	mov	r4, r0
 800c702:	460d      	mov	r5, r1
 800c704:	e737      	b.n	800c576 <atan+0xce>
 800c706:	4b36      	ldr	r3, [pc, #216]	; (800c7e0 <atan+0x338>)
 800c708:	4e36      	ldr	r6, [pc, #216]	; (800c7e4 <atan+0x33c>)
 800c70a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c70e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c712:	e9da 2300 	ldrd	r2, r3, [sl]
 800c716:	f7f3 fd63 	bl	80001e0 <__aeabi_dsub>
 800c71a:	4622      	mov	r2, r4
 800c71c:	462b      	mov	r3, r5
 800c71e:	f7f3 fd5f 	bl	80001e0 <__aeabi_dsub>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c72a:	f7f3 fd59 	bl	80001e0 <__aeabi_dsub>
 800c72e:	f1bb 0f00 	cmp.w	fp, #0
 800c732:	4604      	mov	r4, r0
 800c734:	460d      	mov	r5, r1
 800c736:	f6bf aed6 	bge.w	800c4e6 <atan+0x3e>
 800c73a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c73e:	461d      	mov	r5, r3
 800c740:	e6d1      	b.n	800c4e6 <atan+0x3e>
 800c742:	a51d      	add	r5, pc, #116	; (adr r5, 800c7b8 <atan+0x310>)
 800c744:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c748:	e6cd      	b.n	800c4e6 <atan+0x3e>
 800c74a:	bf00      	nop
 800c74c:	f3af 8000 	nop.w
 800c750:	54442d18 	.word	0x54442d18
 800c754:	bff921fb 	.word	0xbff921fb
 800c758:	8800759c 	.word	0x8800759c
 800c75c:	7e37e43c 	.word	0x7e37e43c
 800c760:	e322da11 	.word	0xe322da11
 800c764:	3f90ad3a 	.word	0x3f90ad3a
 800c768:	24760deb 	.word	0x24760deb
 800c76c:	3fa97b4b 	.word	0x3fa97b4b
 800c770:	a0d03d51 	.word	0xa0d03d51
 800c774:	3fb10d66 	.word	0x3fb10d66
 800c778:	c54c206e 	.word	0xc54c206e
 800c77c:	3fb745cd 	.word	0x3fb745cd
 800c780:	920083ff 	.word	0x920083ff
 800c784:	3fc24924 	.word	0x3fc24924
 800c788:	5555550d 	.word	0x5555550d
 800c78c:	3fd55555 	.word	0x3fd55555
 800c790:	2c6a6c2f 	.word	0x2c6a6c2f
 800c794:	bfa2b444 	.word	0xbfa2b444
 800c798:	52defd9a 	.word	0x52defd9a
 800c79c:	3fadde2d 	.word	0x3fadde2d
 800c7a0:	af749a6d 	.word	0xaf749a6d
 800c7a4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c7a8:	fe231671 	.word	0xfe231671
 800c7ac:	3fbc71c6 	.word	0x3fbc71c6
 800c7b0:	9998ebc4 	.word	0x9998ebc4
 800c7b4:	3fc99999 	.word	0x3fc99999
 800c7b8:	54442d18 	.word	0x54442d18
 800c7bc:	3ff921fb 	.word	0x3ff921fb
 800c7c0:	440fffff 	.word	0x440fffff
 800c7c4:	7ff00000 	.word	0x7ff00000
 800c7c8:	3fdbffff 	.word	0x3fdbffff
 800c7cc:	3ff00000 	.word	0x3ff00000
 800c7d0:	3ff2ffff 	.word	0x3ff2ffff
 800c7d4:	40038000 	.word	0x40038000
 800c7d8:	3ff80000 	.word	0x3ff80000
 800c7dc:	bff00000 	.word	0xbff00000
 800c7e0:	0800d1e0 	.word	0x0800d1e0
 800c7e4:	0800d1c0 	.word	0x0800d1c0

0800c7e8 <fabs>:
 800c7e8:	ec51 0b10 	vmov	r0, r1, d0
 800c7ec:	ee10 2a10 	vmov	r2, s0
 800c7f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7f4:	ec43 2b10 	vmov	d0, r2, r3
 800c7f8:	4770      	bx	lr

0800c7fa <finite>:
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	ed8d 0b00 	vstr	d0, [sp]
 800c800:	9801      	ldr	r0, [sp, #4]
 800c802:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c806:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c80a:	0fc0      	lsrs	r0, r0, #31
 800c80c:	b002      	add	sp, #8
 800c80e:	4770      	bx	lr

0800c810 <scalbn>:
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	ec55 4b10 	vmov	r4, r5, d0
 800c816:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c81a:	4606      	mov	r6, r0
 800c81c:	462b      	mov	r3, r5
 800c81e:	b99a      	cbnz	r2, 800c848 <scalbn+0x38>
 800c820:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c824:	4323      	orrs	r3, r4
 800c826:	d036      	beq.n	800c896 <scalbn+0x86>
 800c828:	4b39      	ldr	r3, [pc, #228]	; (800c910 <scalbn+0x100>)
 800c82a:	4629      	mov	r1, r5
 800c82c:	ee10 0a10 	vmov	r0, s0
 800c830:	2200      	movs	r2, #0
 800c832:	f7f3 fe8d 	bl	8000550 <__aeabi_dmul>
 800c836:	4b37      	ldr	r3, [pc, #220]	; (800c914 <scalbn+0x104>)
 800c838:	429e      	cmp	r6, r3
 800c83a:	4604      	mov	r4, r0
 800c83c:	460d      	mov	r5, r1
 800c83e:	da10      	bge.n	800c862 <scalbn+0x52>
 800c840:	a32b      	add	r3, pc, #172	; (adr r3, 800c8f0 <scalbn+0xe0>)
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	e03a      	b.n	800c8be <scalbn+0xae>
 800c848:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c84c:	428a      	cmp	r2, r1
 800c84e:	d10c      	bne.n	800c86a <scalbn+0x5a>
 800c850:	ee10 2a10 	vmov	r2, s0
 800c854:	4620      	mov	r0, r4
 800c856:	4629      	mov	r1, r5
 800c858:	f7f3 fcc4 	bl	80001e4 <__adddf3>
 800c85c:	4604      	mov	r4, r0
 800c85e:	460d      	mov	r5, r1
 800c860:	e019      	b.n	800c896 <scalbn+0x86>
 800c862:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c866:	460b      	mov	r3, r1
 800c868:	3a36      	subs	r2, #54	; 0x36
 800c86a:	4432      	add	r2, r6
 800c86c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c870:	428a      	cmp	r2, r1
 800c872:	dd08      	ble.n	800c886 <scalbn+0x76>
 800c874:	2d00      	cmp	r5, #0
 800c876:	a120      	add	r1, pc, #128	; (adr r1, 800c8f8 <scalbn+0xe8>)
 800c878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c87c:	da1c      	bge.n	800c8b8 <scalbn+0xa8>
 800c87e:	a120      	add	r1, pc, #128	; (adr r1, 800c900 <scalbn+0xf0>)
 800c880:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c884:	e018      	b.n	800c8b8 <scalbn+0xa8>
 800c886:	2a00      	cmp	r2, #0
 800c888:	dd08      	ble.n	800c89c <scalbn+0x8c>
 800c88a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c88e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c892:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c896:	ec45 4b10 	vmov	d0, r4, r5
 800c89a:	bd70      	pop	{r4, r5, r6, pc}
 800c89c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c8a0:	da19      	bge.n	800c8d6 <scalbn+0xc6>
 800c8a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c8a6:	429e      	cmp	r6, r3
 800c8a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c8ac:	dd0a      	ble.n	800c8c4 <scalbn+0xb4>
 800c8ae:	a112      	add	r1, pc, #72	; (adr r1, 800c8f8 <scalbn+0xe8>)
 800c8b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1e2      	bne.n	800c87e <scalbn+0x6e>
 800c8b8:	a30f      	add	r3, pc, #60	; (adr r3, 800c8f8 <scalbn+0xe8>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	f7f3 fe47 	bl	8000550 <__aeabi_dmul>
 800c8c2:	e7cb      	b.n	800c85c <scalbn+0x4c>
 800c8c4:	a10a      	add	r1, pc, #40	; (adr r1, 800c8f0 <scalbn+0xe0>)
 800c8c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d0b8      	beq.n	800c840 <scalbn+0x30>
 800c8ce:	a10e      	add	r1, pc, #56	; (adr r1, 800c908 <scalbn+0xf8>)
 800c8d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8d4:	e7b4      	b.n	800c840 <scalbn+0x30>
 800c8d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c8da:	3236      	adds	r2, #54	; 0x36
 800c8dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4b0c      	ldr	r3, [pc, #48]	; (800c918 <scalbn+0x108>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	e7e8      	b.n	800c8be <scalbn+0xae>
 800c8ec:	f3af 8000 	nop.w
 800c8f0:	c2f8f359 	.word	0xc2f8f359
 800c8f4:	01a56e1f 	.word	0x01a56e1f
 800c8f8:	8800759c 	.word	0x8800759c
 800c8fc:	7e37e43c 	.word	0x7e37e43c
 800c900:	8800759c 	.word	0x8800759c
 800c904:	fe37e43c 	.word	0xfe37e43c
 800c908:	c2f8f359 	.word	0xc2f8f359
 800c90c:	81a56e1f 	.word	0x81a56e1f
 800c910:	43500000 	.word	0x43500000
 800c914:	ffff3cb0 	.word	0xffff3cb0
 800c918:	3c900000 	.word	0x3c900000

0800c91c <_init>:
 800c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91e:	bf00      	nop
 800c920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c922:	bc08      	pop	{r3}
 800c924:	469e      	mov	lr, r3
 800c926:	4770      	bx	lr

0800c928 <_fini>:
 800c928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92a:	bf00      	nop
 800c92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c92e:	bc08      	pop	{r3}
 800c930:	469e      	mov	lr, r3
 800c932:	4770      	bx	lr
