
TrapezoidalTraj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a04  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004ba0  08004ba0  00014ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be8  08004be8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bf0  08004bf0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000080  08004c78  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004c78  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cabc  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001971  00000000  00000000  0002cb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0002e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002f060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015585  00000000  00000000  0002fb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c74d  00000000  00000000  00045105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ec9  00000000  00000000  00051852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db71b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003650  00000000  00000000  000db76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004b84 	.word	0x08004b84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08004b84 	.word	0x08004b84

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b974 	b.w	800106c <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468e      	mov	lr, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d14d      	bne.n	8000e46 <__udivmoddi4+0xaa>
 8000daa:	428a      	cmp	r2, r1
 8000dac:	4694      	mov	ip, r2
 8000dae:	d969      	bls.n	8000e84 <__udivmoddi4+0xe8>
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	b152      	cbz	r2, 8000dcc <__udivmoddi4+0x30>
 8000db6:	fa01 f302 	lsl.w	r3, r1, r2
 8000dba:	f1c2 0120 	rsb	r1, r2, #32
 8000dbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000dc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000dca:	4094      	lsls	r4, r2
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	0c21      	lsrs	r1, r4, #16
 8000dd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000dd6:	fa1f f78c 	uxth.w	r7, ip
 8000dda:	fb08 e316 	mls	r3, r8, r6, lr
 8000dde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000de2:	fb06 f107 	mul.w	r1, r6, r7
 8000de6:	4299      	cmp	r1, r3
 8000de8:	d90a      	bls.n	8000e00 <__udivmoddi4+0x64>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000df2:	f080 811f 	bcs.w	8001034 <__udivmoddi4+0x298>
 8000df6:	4299      	cmp	r1, r3
 8000df8:	f240 811c 	bls.w	8001034 <__udivmoddi4+0x298>
 8000dfc:	3e02      	subs	r6, #2
 8000dfe:	4463      	add	r3, ip
 8000e00:	1a5b      	subs	r3, r3, r1
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e08:	fb08 3310 	mls	r3, r8, r0, r3
 8000e0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e10:	fb00 f707 	mul.w	r7, r0, r7
 8000e14:	42a7      	cmp	r7, r4
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x92>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e20:	f080 810a 	bcs.w	8001038 <__udivmoddi4+0x29c>
 8000e24:	42a7      	cmp	r7, r4
 8000e26:	f240 8107 	bls.w	8001038 <__udivmoddi4+0x29c>
 8000e2a:	4464      	add	r4, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e32:	1be4      	subs	r4, r4, r7
 8000e34:	2600      	movs	r6, #0
 8000e36:	b11d      	cbz	r5, 8000e40 <__udivmoddi4+0xa4>
 8000e38:	40d4      	lsrs	r4, r2
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d909      	bls.n	8000e5e <__udivmoddi4+0xc2>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	f000 80ef 	beq.w	800102e <__udivmoddi4+0x292>
 8000e50:	2600      	movs	r6, #0
 8000e52:	e9c5 0100 	strd	r0, r1, [r5]
 8000e56:	4630      	mov	r0, r6
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	fab3 f683 	clz	r6, r3
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d14a      	bne.n	8000efc <__udivmoddi4+0x160>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d302      	bcc.n	8000e70 <__udivmoddi4+0xd4>
 8000e6a:	4282      	cmp	r2, r0
 8000e6c:	f200 80f9 	bhi.w	8001062 <__udivmoddi4+0x2c6>
 8000e70:	1a84      	subs	r4, r0, r2
 8000e72:	eb61 0303 	sbc.w	r3, r1, r3
 8000e76:	2001      	movs	r0, #1
 8000e78:	469e      	mov	lr, r3
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d0e0      	beq.n	8000e40 <__udivmoddi4+0xa4>
 8000e7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e82:	e7dd      	b.n	8000e40 <__udivmoddi4+0xa4>
 8000e84:	b902      	cbnz	r2, 8000e88 <__udivmoddi4+0xec>
 8000e86:	deff      	udf	#255	; 0xff
 8000e88:	fab2 f282 	clz	r2, r2
 8000e8c:	2a00      	cmp	r2, #0
 8000e8e:	f040 8092 	bne.w	8000fb6 <__udivmoddi4+0x21a>
 8000e92:	eba1 010c 	sub.w	r1, r1, ip
 8000e96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e9a:	fa1f fe8c 	uxth.w	lr, ip
 8000e9e:	2601      	movs	r6, #1
 8000ea0:	0c20      	lsrs	r0, r4, #16
 8000ea2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ea6:	fb07 1113 	mls	r1, r7, r3, r1
 8000eaa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eae:	fb0e f003 	mul.w	r0, lr, r3
 8000eb2:	4288      	cmp	r0, r1
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x12c>
 8000eb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000eba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x12a>
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	f200 80cb 	bhi.w	800105c <__udivmoddi4+0x2c0>
 8000ec6:	4643      	mov	r3, r8
 8000ec8:	1a09      	subs	r1, r1, r0
 8000eca:	b2a4      	uxth	r4, r4
 8000ecc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ed4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed8:	fb0e fe00 	mul.w	lr, lr, r0
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x156>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d202      	bcs.n	8000ef0 <__udivmoddi4+0x154>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f200 80bb 	bhi.w	8001066 <__udivmoddi4+0x2ca>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	eba4 040e 	sub.w	r4, r4, lr
 8000ef6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000efa:	e79c      	b.n	8000e36 <__udivmoddi4+0x9a>
 8000efc:	f1c6 0720 	rsb	r7, r6, #32
 8000f00:	40b3      	lsls	r3, r6
 8000f02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f12:	431c      	orrs	r4, r3
 8000f14:	40f9      	lsrs	r1, r7
 8000f16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f22:	0c20      	lsrs	r0, r4, #16
 8000f24:	fa1f fe8c 	uxth.w	lr, ip
 8000f28:	fb09 1118 	mls	r1, r9, r8, r1
 8000f2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f30:	fb08 f00e 	mul.w	r0, r8, lr
 8000f34:	4288      	cmp	r0, r1
 8000f36:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3a:	d90b      	bls.n	8000f54 <__udivmoddi4+0x1b8>
 8000f3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f44:	f080 8088 	bcs.w	8001058 <__udivmoddi4+0x2bc>
 8000f48:	4288      	cmp	r0, r1
 8000f4a:	f240 8085 	bls.w	8001058 <__udivmoddi4+0x2bc>
 8000f4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f52:	4461      	add	r1, ip
 8000f54:	1a09      	subs	r1, r1, r0
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000f60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f68:	458e      	cmp	lr, r1
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x1e2>
 8000f6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f74:	d26c      	bcs.n	8001050 <__udivmoddi4+0x2b4>
 8000f76:	458e      	cmp	lr, r1
 8000f78:	d96a      	bls.n	8001050 <__udivmoddi4+0x2b4>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4461      	add	r1, ip
 8000f7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f82:	fba0 9402 	umull	r9, r4, r0, r2
 8000f86:	eba1 010e 	sub.w	r1, r1, lr
 8000f8a:	42a1      	cmp	r1, r4
 8000f8c:	46c8      	mov	r8, r9
 8000f8e:	46a6      	mov	lr, r4
 8000f90:	d356      	bcc.n	8001040 <__udivmoddi4+0x2a4>
 8000f92:	d053      	beq.n	800103c <__udivmoddi4+0x2a0>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x212>
 8000f96:	ebb3 0208 	subs.w	r2, r3, r8
 8000f9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000f9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000fa2:	fa22 f306 	lsr.w	r3, r2, r6
 8000fa6:	40f1      	lsrs	r1, r6
 8000fa8:	431f      	orrs	r7, r3
 8000faa:	e9c5 7100 	strd	r7, r1, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	f1c2 0320 	rsb	r3, r2, #32
 8000fba:	40d8      	lsrs	r0, r3
 8000fbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	4301      	orrs	r1, r0
 8000fc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fcc:	fa1f fe8c 	uxth.w	lr, ip
 8000fd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd8:	0c0b      	lsrs	r3, r1, #16
 8000fda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fde:	fb00 f60e 	mul.w	r6, r0, lr
 8000fe2:	429e      	cmp	r6, r3
 8000fe4:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe8:	d908      	bls.n	8000ffc <__udivmoddi4+0x260>
 8000fea:	eb1c 0303 	adds.w	r3, ip, r3
 8000fee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ff2:	d22f      	bcs.n	8001054 <__udivmoddi4+0x2b8>
 8000ff4:	429e      	cmp	r6, r3
 8000ff6:	d92d      	bls.n	8001054 <__udivmoddi4+0x2b8>
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	1b9b      	subs	r3, r3, r6
 8000ffe:	b289      	uxth	r1, r1
 8001000:	fbb3 f6f7 	udiv	r6, r3, r7
 8001004:	fb07 3316 	mls	r3, r7, r6, r3
 8001008:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800100c:	fb06 f30e 	mul.w	r3, r6, lr
 8001010:	428b      	cmp	r3, r1
 8001012:	d908      	bls.n	8001026 <__udivmoddi4+0x28a>
 8001014:	eb1c 0101 	adds.w	r1, ip, r1
 8001018:	f106 38ff 	add.w	r8, r6, #4294967295
 800101c:	d216      	bcs.n	800104c <__udivmoddi4+0x2b0>
 800101e:	428b      	cmp	r3, r1
 8001020:	d914      	bls.n	800104c <__udivmoddi4+0x2b0>
 8001022:	3e02      	subs	r6, #2
 8001024:	4461      	add	r1, ip
 8001026:	1ac9      	subs	r1, r1, r3
 8001028:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800102c:	e738      	b.n	8000ea0 <__udivmoddi4+0x104>
 800102e:	462e      	mov	r6, r5
 8001030:	4628      	mov	r0, r5
 8001032:	e705      	b.n	8000e40 <__udivmoddi4+0xa4>
 8001034:	4606      	mov	r6, r0
 8001036:	e6e3      	b.n	8000e00 <__udivmoddi4+0x64>
 8001038:	4618      	mov	r0, r3
 800103a:	e6f8      	b.n	8000e2e <__udivmoddi4+0x92>
 800103c:	454b      	cmp	r3, r9
 800103e:	d2a9      	bcs.n	8000f94 <__udivmoddi4+0x1f8>
 8001040:	ebb9 0802 	subs.w	r8, r9, r2
 8001044:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001048:	3801      	subs	r0, #1
 800104a:	e7a3      	b.n	8000f94 <__udivmoddi4+0x1f8>
 800104c:	4646      	mov	r6, r8
 800104e:	e7ea      	b.n	8001026 <__udivmoddi4+0x28a>
 8001050:	4620      	mov	r0, r4
 8001052:	e794      	b.n	8000f7e <__udivmoddi4+0x1e2>
 8001054:	4640      	mov	r0, r8
 8001056:	e7d1      	b.n	8000ffc <__udivmoddi4+0x260>
 8001058:	46d0      	mov	r8, sl
 800105a:	e77b      	b.n	8000f54 <__udivmoddi4+0x1b8>
 800105c:	3b02      	subs	r3, #2
 800105e:	4461      	add	r1, ip
 8001060:	e732      	b.n	8000ec8 <__udivmoddi4+0x12c>
 8001062:	4630      	mov	r0, r6
 8001064:	e709      	b.n	8000e7a <__udivmoddi4+0xde>
 8001066:	4464      	add	r4, ip
 8001068:	3802      	subs	r0, #2
 800106a:	e742      	b.n	8000ef2 <__udivmoddi4+0x156>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001074:	f000 ff52 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001078:	f000 f86a 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107c:	f000 f94a 	bl	8001314 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001080:	f000 f91e 	bl	80012c0 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001084:	f000 f8ce 	bl	8001224 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim5);
 8001088:	482b      	ldr	r0, [pc, #172]	; (8001138 <main+0xc8>)
 800108a:	f001 ff51 	bl	8002f30 <HAL_TIM_Base_Start>

  TrapezoidalTraj_PreCal(Pi, Pf);
 800108e:	4b2b      	ldr	r3, [pc, #172]	; (800113c <main+0xcc>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001098:	ee17 3a90 	vmov	r3, s15
 800109c:	b21b      	sxth	r3, r3
 800109e:	4a28      	ldr	r2, [pc, #160]	; (8001140 <main+0xd0>)
 80010a0:	edd2 7a00 	vldr	s15, [r2]
 80010a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a8:	ee17 2a90 	vmov	r2, s15
 80010ac:	b212      	sxth	r2, r2
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f9d1 	bl	8001458 <TrapezoidalTraj_PreCal>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint64_t timestamp = 0;
	  if (timestamp <= micros())
 80010b6:	f000 f9b5 	bl	8001424 <micros>
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <main+0xd4>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	4290      	cmp	r0, r2
 80010c2:	eb71 0303 	sbcs.w	r3, r1, r3
 80010c6:	d3f6      	bcc.n	80010b6 <main+0x46>
	  {
		  if (timestamp <= t_total * 1000000)
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <main+0xd4>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fe05 	bl	8000ce0 <__aeabi_ul2f>
 80010d6:	ee06 0a90 	vmov	s13, r0
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <main+0xd8>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800114c <main+0xdc>
 80010e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	d816      	bhi.n	8001120 <main+0xb0>
		  {
			  TrapezoidalTraj_GetState(Pi, Pf, timestamp);
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <main+0xcc>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	b218      	sxth	r0, r3
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <main+0xd0>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800110c:	ee17 3a90 	vmov	r3, s15
 8001110:	b219      	sxth	r1, r3
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <main+0xd4>)
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	4613      	mov	r3, r2
 800111a:	461a      	mov	r2, r3
 800111c:	f000 fa18 	bl	8001550 <TrapezoidalTraj_GetState>
		  }
		  timestamp = micros() + 1000;
 8001120:	f000 f980 	bl	8001424 <micros>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 800112c:	f143 0500 	adc.w	r5, r3, #0
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <main+0xd4>)
 8001132:	e9c3 4500 	strd	r4, r5, [r3]
  {
 8001136:	e7be      	b.n	80010b6 <main+0x46>
 8001138:	2000009c 	.word	0x2000009c
 800113c:	20000008 	.word	0x20000008
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000148 	.word	0x20000148
 8001148:	20000128 	.word	0x20000128
 800114c:	49742400 	.word	0x49742400

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b094      	sub	sp, #80	; 0x50
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0320 	add.w	r3, r7, #32
 800115a:	2230      	movs	r2, #48	; 0x30
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fdc0 	bl	8003ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <SystemClock_Config+0xcc>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	4a27      	ldr	r2, [pc, #156]	; (800121c <SystemClock_Config+0xcc>)
 800117e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001182:	6413      	str	r3, [r2, #64]	; 0x40
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <SystemClock_Config+0xcc>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <SystemClock_Config+0xd0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a21      	ldr	r2, [pc, #132]	; (8001220 <SystemClock_Config+0xd0>)
 800119a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <SystemClock_Config+0xd0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ac:	2302      	movs	r3, #2
 80011ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b0:	2301      	movs	r3, #1
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b4:	2310      	movs	r3, #16
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b8:	2302      	movs	r3, #2
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011bc:	2300      	movs	r3, #0
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011c0:	2310      	movs	r3, #16
 80011c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011ca:	2304      	movs	r3, #4
 80011cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011ce:	2304      	movs	r3, #4
 80011d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 f9c2 	bl	8002560 <HAL_RCC_OscConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011e2:	f000 fd8d 	bl	8001d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	230f      	movs	r3, #15
 80011e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ea:	2302      	movs	r3, #2
 80011ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	2102      	movs	r1, #2
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fc24 	bl	8002a50 <HAL_RCC_ClockConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800120e:	f000 fd77 	bl	8001d00 <Error_Handler>
  }
}
 8001212:	bf00      	nop
 8001214:	3750      	adds	r7, #80	; 0x50
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40007000 	.word	0x40007000

08001224 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_TIM5_Init+0x94>)
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <MX_TIM5_Init+0x98>)
 8001244:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_TIM5_Init+0x94>)
 8001248:	2253      	movs	r2, #83	; 0x53
 800124a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_TIM5_Init+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_TIM5_Init+0x94>)
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_TIM5_Init+0x94>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_TIM5_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001266:	4814      	ldr	r0, [pc, #80]	; (80012b8 <MX_TIM5_Init+0x94>)
 8001268:	f001 fe12 	bl	8002e90 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001272:	f000 fd45 	bl	8001d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	4619      	mov	r1, r3
 8001282:	480d      	ldr	r0, [pc, #52]	; (80012b8 <MX_TIM5_Init+0x94>)
 8001284:	f001 ffb6 	bl	80031f4 <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 fd37 	bl	8001d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <MX_TIM5_Init+0x94>)
 80012a0:	f002 f9b2 	bl	8003608 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80012aa:	f000 fd29 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000009c 	.word	0x2000009c
 80012bc:	40000c00 	.word	0x40000c00

080012c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_USART2_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012f8:	f002 fa08 	bl	800370c <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 fcfd 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000e4 	.word	0x200000e4
 8001310:	40004400 	.word	0x40004400

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a2c      	ldr	r2, [pc, #176]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <MX_GPIO_Init+0xd0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <MX_GPIO_Init+0xd0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a1e      	ldr	r2, [pc, #120]	; (80013e4 <MX_GPIO_Init+0xd0>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2120      	movs	r1, #32
 800139e:	4812      	ldr	r0, [pc, #72]	; (80013e8 <MX_GPIO_Init+0xd4>)
 80013a0:	f001 f8c4 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	480c      	ldr	r0, [pc, #48]	; (80013ec <MX_GPIO_Init+0xd8>)
 80013bc:	f000 ff32 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013c0:	2320      	movs	r3, #32
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_GPIO_Init+0xd4>)
 80013d8:	f000 ff24 	bl	8002224 <HAL_GPIO_Init>

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020800 	.word	0x40020800

080013f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f0:	b4b0      	push	{r4, r5, r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d108      	bne.n	8001412 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	1e54      	subs	r4, r2, #1
 8001408:	f143 0500 	adc.w	r5, r3, #0
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800140e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bcb0      	pop	{r4, r5, r7}
 800141a:	4770      	bx	lr
 800141c:	2000009c 	.word	0x2000009c
 8001420:	20000140 	.word	0x20000140

08001424 <micros>:

uint64_t micros()
{
 8001424:	b4b0      	push	{r4, r5, r7}
 8001426:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <micros+0x2c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	2200      	movs	r2, #0
 8001430:	4618      	mov	r0, r3
 8001432:	4611      	mov	r1, r2
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <micros+0x30>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	1884      	adds	r4, r0, r2
 800143c:	eb41 0503 	adc.w	r5, r1, r3
 8001440:	4622      	mov	r2, r4
 8001442:	462b      	mov	r3, r5
}
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	bcb0      	pop	{r4, r5, r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	2000009c 	.word	0x2000009c
 8001454:	20000140 	.word	0x20000140

08001458 <TrapezoidalTraj_PreCal>:

void TrapezoidalTraj_PreCal(int16_t start_pos, int16_t final_pos)
{
 8001458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	460a      	mov	r2, r1
 8001464:	80fb      	strh	r3, [r7, #6]
 8001466:	4613      	mov	r3, r2
 8001468:	80bb      	strh	r3, [r7, #4]
	float s = final_pos - start_pos;
 800146a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800146e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	edc7 7a03 	vstr	s15, [r7, #12]

	t_acc = v_max/a;
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <TrapezoidalTraj_PreCal+0xe8>)
 8001482:	edd3 6a00 	vldr	s13, [r3]
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <TrapezoidalTraj_PreCal+0xec>)
 8001488:	ed93 7a00 	vldr	s14, [r3]
 800148c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <TrapezoidalTraj_PreCal+0xf0>)
 8001492:	edc3 7a00 	vstr	s15, [r3]
	t_total = (pow(v_max,2)+a*fabs(s))/(a*v_max);
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <TrapezoidalTraj_PreCal+0xe8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f800 	bl	80004a0 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8001538 <TrapezoidalTraj_PreCal+0xe0>
 80014a8:	ec43 2b10 	vmov	d0, r2, r3
 80014ac:	f002 fc22 	bl	8003cf4 <pow>
 80014b0:	ec59 8b10 	vmov	r8, r9, d0
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <TrapezoidalTraj_PreCal+0xec>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe fff1 	bl	80004a0 <__aeabi_f2d>
 80014be:	4604      	mov	r4, r0
 80014c0:	460d      	mov	r5, r1
 80014c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c6:	eef0 7ae7 	vabs.f32	s15, s15
 80014ca:	ee17 0a90 	vmov	r0, s15
 80014ce:	f7fe ffe7 	bl	80004a0 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4620      	mov	r0, r4
 80014d8:	4629      	mov	r1, r5
 80014da:	f7ff f839 	bl	8000550 <__aeabi_dmul>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4640      	mov	r0, r8
 80014e4:	4649      	mov	r1, r9
 80014e6:	f7fe fe7d 	bl	80001e4 <__adddf3>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4614      	mov	r4, r2
 80014f0:	461d      	mov	r5, r3
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <TrapezoidalTraj_PreCal+0xec>)
 80014f4:	ed93 7a00 	vldr	s14, [r3]
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <TrapezoidalTraj_PreCal+0xe8>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001502:	ee17 0a90 	vmov	r0, s15
 8001506:	f7fe ffcb 	bl	80004a0 <__aeabi_f2d>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f7ff f947 	bl	80007a4 <__aeabi_ddiv>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fac7 	bl	8000ab0 <__aeabi_d2f>
 8001522:	4603      	mov	r3, r0
 8001524:	4a09      	ldr	r2, [pc, #36]	; (800154c <TrapezoidalTraj_PreCal+0xf4>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001532:	bf00      	nop
 8001534:	f3af 8000 	nop.w
 8001538:	00000000 	.word	0x00000000
 800153c:	40000000 	.word	0x40000000
 8001540:	20000000 	.word	0x20000000
 8001544:	20000004 	.word	0x20000004
 8001548:	2000012c 	.word	0x2000012c
 800154c:	20000128 	.word	0x20000128

08001550 <TrapezoidalTraj_GetState>:

void TrapezoidalTraj_GetState(int16_t start_pos, int16_t final_pos, uint32_t t_us)
{
 8001550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001554:	ed2d 8b02 	vpush	{d8}
 8001558:	b088      	sub	sp, #32
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60ba      	str	r2, [r7, #8]
 8001560:	81fb      	strh	r3, [r7, #14]
 8001562:	460b      	mov	r3, r1
 8001564:	81bb      	strh	r3, [r7, #12]
	float t = t_us/1000000.0;
 8001566:	68b8      	ldr	r0, [r7, #8]
 8001568:	f7fe ff78 	bl	800045c <__aeabi_ui2d>
 800156c:	a3b1      	add	r3, pc, #708	; (adr r3, 8001834 <TrapezoidalTraj_GetState+0x2e4>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff f917 	bl	80007a4 <__aeabi_ddiv>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fa97 	bl	8000ab0 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	61bb      	str	r3, [r7, #24]

	float s = final_pos - start_pos;
 8001586:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800158a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001598:	edc7 7a05 	vstr	s15, [r7, #20]
	int8_t dir = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	77fb      	strb	r3, [r7, #31]
	if (s < 0)
 80015a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	d501      	bpl.n	80015b2 <TrapezoidalTraj_GetState+0x62>
	{
		dir = -1;
 80015ae:	23ff      	movs	r3, #255	; 0xff
 80015b0:	77fb      	strb	r3, [r7, #31]
	}

	if (2*t_acc < t_total) // General Case
 80015b2:	4b99      	ldr	r3, [pc, #612]	; (8001818 <TrapezoidalTraj_GetState+0x2c8>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015bc:	4b97      	ldr	r3, [pc, #604]	; (800181c <TrapezoidalTraj_GetState+0x2cc>)
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	f140 8202 	bpl.w	80019d2 <TrapezoidalTraj_GetState+0x482>
	{
		if (t <= t_acc)
 80015ce:	4b92      	ldr	r3, [pc, #584]	; (8001818 <TrapezoidalTraj_GetState+0x2c8>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80015d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	d862      	bhi.n	80016a8 <TrapezoidalTraj_GetState+0x158>
		{
			qddot_des = dir*a;
 80015e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	4b8c      	ldr	r3, [pc, #560]	; (8001820 <TrapezoidalTraj_GetState+0x2d0>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f8:	4b8a      	ldr	r3, [pc, #552]	; (8001824 <TrapezoidalTraj_GetState+0x2d4>)
 80015fa:	edc3 7a00 	vstr	s15, [r3]
			qdot_des = dir*a*t;
 80015fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160a:	4b85      	ldr	r3, [pc, #532]	; (8001820 <TrapezoidalTraj_GetState+0x2d0>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001614:	edd7 7a06 	vldr	s15, [r7, #24]
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	4b82      	ldr	r3, [pc, #520]	; (8001828 <TrapezoidalTraj_GetState+0x2d8>)
 800161e:	edc3 7a00 	vstr	s15, [r3]
			q_des = start_pos + dir*(0.5*a*pow(t,2));
 8001622:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff28 	bl	800047c <__aeabi_i2d>
 800162c:	4604      	mov	r4, r0
 800162e:	460d      	mov	r5, r1
 8001630:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff21 	bl	800047c <__aeabi_i2d>
 800163a:	4680      	mov	r8, r0
 800163c:	4689      	mov	r9, r1
 800163e:	4b78      	ldr	r3, [pc, #480]	; (8001820 <TrapezoidalTraj_GetState+0x2d0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff2c 	bl	80004a0 <__aeabi_f2d>
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b77      	ldr	r3, [pc, #476]	; (800182c <TrapezoidalTraj_GetState+0x2dc>)
 800164e:	f7fe ff7f 	bl	8000550 <__aeabi_dmul>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4692      	mov	sl, r2
 8001658:	469b      	mov	fp, r3
 800165a:	69b8      	ldr	r0, [r7, #24]
 800165c:	f7fe ff20 	bl	80004a0 <__aeabi_f2d>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 8001810 <TrapezoidalTraj_GetState+0x2c0>
 8001668:	ec43 2b10 	vmov	d0, r2, r3
 800166c:	f002 fb42 	bl	8003cf4 <pow>
 8001670:	ec53 2b10 	vmov	r2, r3, d0
 8001674:	4650      	mov	r0, sl
 8001676:	4659      	mov	r1, fp
 8001678:	f7fe ff6a 	bl	8000550 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4640      	mov	r0, r8
 8001682:	4649      	mov	r1, r9
 8001684:	f7fe ff64 	bl	8000550 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fda8 	bl	80001e4 <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff fa08 	bl	8000ab0 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a63      	ldr	r2, [pc, #396]	; (8001830 <TrapezoidalTraj_GetState+0x2e0>)
 80016a4:	6013      	str	r3, [r2, #0]
			qddot_des = -dir*a;
			qdot_des = dir*a*(2*t_acc - t);
			q_des = start_pos + dir*(2*a*t_acc*t-0.5*a*pow(t,2)-a*pow(t_acc,2));
		}
	}
}
 80016a6:	e313      	b.n	8001cd0 <TrapezoidalTraj_GetState+0x780>
		else if (t_acc < t && t < (t_total - t_acc))
 80016a8:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <TrapezoidalTraj_GetState+0x2c8>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80016b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	f340 808b 	ble.w	80017d4 <TrapezoidalTraj_GetState+0x284>
 80016be:	4b57      	ldr	r3, [pc, #348]	; (800181c <TrapezoidalTraj_GetState+0x2cc>)
 80016c0:	ed93 7a00 	vldr	s14, [r3]
 80016c4:	4b54      	ldr	r3, [pc, #336]	; (8001818 <TrapezoidalTraj_GetState+0x2c8>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80016d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	d57b      	bpl.n	80017d4 <TrapezoidalTraj_GetState+0x284>
			qddot_des = 0;
 80016dc:	4b51      	ldr	r3, [pc, #324]	; (8001824 <TrapezoidalTraj_GetState+0x2d4>)
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
			qdot_des = dir*a*t_acc;
 80016e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f0:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <TrapezoidalTraj_GetState+0x2d0>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <TrapezoidalTraj_GetState+0x2c8>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001704:	4b48      	ldr	r3, [pc, #288]	; (8001828 <TrapezoidalTraj_GetState+0x2d8>)
 8001706:	edc3 7a00 	vstr	s15, [r3]
			q_des = start_pos + dir*(0.5*a*pow(t_acc,2) + a*t_acc*(t - t_acc));
 800170a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe feb4 	bl	800047c <__aeabi_i2d>
 8001714:	4604      	mov	r4, r0
 8001716:	460d      	mov	r5, r1
 8001718:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fead 	bl	800047c <__aeabi_i2d>
 8001722:	4680      	mov	r8, r0
 8001724:	4689      	mov	r9, r1
 8001726:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <TrapezoidalTraj_GetState+0x2d0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe feb8 	bl	80004a0 <__aeabi_f2d>
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	4b3d      	ldr	r3, [pc, #244]	; (800182c <TrapezoidalTraj_GetState+0x2dc>)
 8001736:	f7fe ff0b 	bl	8000550 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4692      	mov	sl, r2
 8001740:	469b      	mov	fp, r3
 8001742:	4b35      	ldr	r3, [pc, #212]	; (8001818 <TrapezoidalTraj_GetState+0x2c8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe feaa 	bl	80004a0 <__aeabi_f2d>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001810 <TrapezoidalTraj_GetState+0x2c0>
 8001754:	ec43 2b10 	vmov	d0, r2, r3
 8001758:	f002 facc 	bl	8003cf4 <pow>
 800175c:	ec53 2b10 	vmov	r2, r3, d0
 8001760:	4650      	mov	r0, sl
 8001762:	4659      	mov	r1, fp
 8001764:	f7fe fef4 	bl	8000550 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4692      	mov	sl, r2
 800176e:	469b      	mov	fp, r3
 8001770:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <TrapezoidalTraj_GetState+0x2d0>)
 8001772:	ed93 7a00 	vldr	s14, [r3]
 8001776:	4b28      	ldr	r3, [pc, #160]	; (8001818 <TrapezoidalTraj_GetState+0x2c8>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <TrapezoidalTraj_GetState+0x2c8>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	edd7 6a06 	vldr	s13, [r7, #24]
 800178a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800178e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001792:	ee17 0a90 	vmov	r0, s15
 8001796:	f7fe fe83 	bl	80004a0 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4650      	mov	r0, sl
 80017a0:	4659      	mov	r1, fp
 80017a2:	f7fe fd1f 	bl	80001e4 <__adddf3>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4640      	mov	r0, r8
 80017ac:	4649      	mov	r1, r9
 80017ae:	f7fe fecf 	bl	8000550 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd13 	bl	80001e4 <__adddf3>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff f973 	bl	8000ab0 <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a18      	ldr	r2, [pc, #96]	; (8001830 <TrapezoidalTraj_GetState+0x2e0>)
 80017ce:	6013      	str	r3, [r2, #0]
		{
 80017d0:	bf00      	nop
}
 80017d2:	e27d      	b.n	8001cd0 <TrapezoidalTraj_GetState+0x780>
		else if ((t_total - t_acc) <= t && t <= t_total)
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <TrapezoidalTraj_GetState+0x2cc>)
 80017d6:	ed93 7a00 	vldr	s14, [r3]
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <TrapezoidalTraj_GetState+0x2c8>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80017e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	da00      	bge.n	80017f4 <TrapezoidalTraj_GetState+0x2a4>
}
 80017f2:	e26d      	b.n	8001cd0 <TrapezoidalTraj_GetState+0x780>
		else if ((t_total - t_acc) <= t && t <= t_total)
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <TrapezoidalTraj_GetState+0x2cc>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80017fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	d919      	bls.n	800183c <TrapezoidalTraj_GetState+0x2ec>
}
 8001808:	e262      	b.n	8001cd0 <TrapezoidalTraj_GetState+0x780>
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w
 8001810:	00000000 	.word	0x00000000
 8001814:	40000000 	.word	0x40000000
 8001818:	2000012c 	.word	0x2000012c
 800181c:	20000128 	.word	0x20000128
 8001820:	20000004 	.word	0x20000004
 8001824:	20000138 	.word	0x20000138
 8001828:	20000134 	.word	0x20000134
 800182c:	3fe00000 	.word	0x3fe00000
 8001830:	20000130 	.word	0x20000130
 8001834:	00000000 	.word	0x00000000
 8001838:	412e8480 	.word	0x412e8480
			qddot_des = -dir*a;
 800183c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001840:	425b      	negs	r3, r3
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184a:	4bc5      	ldr	r3, [pc, #788]	; (8001b60 <TrapezoidalTraj_GetState+0x610>)
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001854:	4bc3      	ldr	r3, [pc, #780]	; (8001b64 <TrapezoidalTraj_GetState+0x614>)
 8001856:	edc3 7a00 	vstr	s15, [r3]
			qdot_des = dir*a*(t_total - t);
 800185a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001866:	4bbe      	ldr	r3, [pc, #760]	; (8001b60 <TrapezoidalTraj_GetState+0x610>)
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001870:	4bbd      	ldr	r3, [pc, #756]	; (8001b68 <TrapezoidalTraj_GetState+0x618>)
 8001872:	edd3 6a00 	vldr	s13, [r3]
 8001876:	edd7 7a06 	vldr	s15, [r7, #24]
 800187a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800187e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001882:	4bba      	ldr	r3, [pc, #744]	; (8001b6c <TrapezoidalTraj_GetState+0x61c>)
 8001884:	edc3 7a00 	vstr	s15, [r3]
			q_des = start_pos + dir*(a*t_total*t+a*t_acc*t_total-a*pow(t_acc,2)-0.5*a*(pow(t,2)+pow(t_total,2)));
 8001888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fdf5 	bl	800047c <__aeabi_i2d>
 8001892:	4682      	mov	sl, r0
 8001894:	468b      	mov	fp, r1
 8001896:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fdee 	bl	800047c <__aeabi_i2d>
 80018a0:	e9c7 0100 	strd	r0, r1, [r7]
 80018a4:	4bae      	ldr	r3, [pc, #696]	; (8001b60 <TrapezoidalTraj_GetState+0x610>)
 80018a6:	ed93 7a00 	vldr	s14, [r3]
 80018aa:	4baf      	ldr	r3, [pc, #700]	; (8001b68 <TrapezoidalTraj_GetState+0x618>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018bc:	4ba8      	ldr	r3, [pc, #672]	; (8001b60 <TrapezoidalTraj_GetState+0x610>)
 80018be:	edd3 6a00 	vldr	s13, [r3]
 80018c2:	4bab      	ldr	r3, [pc, #684]	; (8001b70 <TrapezoidalTraj_GetState+0x620>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018cc:	4ba6      	ldr	r3, [pc, #664]	; (8001b68 <TrapezoidalTraj_GetState+0x618>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018da:	ee17 0a90 	vmov	r0, s15
 80018de:	f7fe fddf 	bl	80004a0 <__aeabi_f2d>
 80018e2:	4604      	mov	r4, r0
 80018e4:	460d      	mov	r5, r1
 80018e6:	4b9e      	ldr	r3, [pc, #632]	; (8001b60 <TrapezoidalTraj_GetState+0x610>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fdd8 	bl	80004a0 <__aeabi_f2d>
 80018f0:	4680      	mov	r8, r0
 80018f2:	4689      	mov	r9, r1
 80018f4:	4b9e      	ldr	r3, [pc, #632]	; (8001b70 <TrapezoidalTraj_GetState+0x620>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fdd1 	bl	80004a0 <__aeabi_f2d>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	ed9f 1b95 	vldr	d1, [pc, #596]	; 8001b58 <TrapezoidalTraj_GetState+0x608>
 8001906:	ec43 2b10 	vmov	d0, r2, r3
 800190a:	f002 f9f3 	bl	8003cf4 <pow>
 800190e:	ec53 2b10 	vmov	r2, r3, d0
 8001912:	4640      	mov	r0, r8
 8001914:	4649      	mov	r1, r9
 8001916:	f7fe fe1b 	bl	8000550 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4620      	mov	r0, r4
 8001920:	4629      	mov	r1, r5
 8001922:	f7fe fc5d 	bl	80001e0 <__aeabi_dsub>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4614      	mov	r4, r2
 800192c:	461d      	mov	r5, r3
 800192e:	4b8c      	ldr	r3, [pc, #560]	; (8001b60 <TrapezoidalTraj_GetState+0x610>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fdb4 	bl	80004a0 <__aeabi_f2d>
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	4b8d      	ldr	r3, [pc, #564]	; (8001b74 <TrapezoidalTraj_GetState+0x624>)
 800193e:	f7fe fe07 	bl	8000550 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4690      	mov	r8, r2
 8001948:	4699      	mov	r9, r3
 800194a:	69b8      	ldr	r0, [r7, #24]
 800194c:	f7fe fda8 	bl	80004a0 <__aeabi_f2d>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	ed9f 1b80 	vldr	d1, [pc, #512]	; 8001b58 <TrapezoidalTraj_GetState+0x608>
 8001958:	ec43 2b10 	vmov	d0, r2, r3
 800195c:	f002 f9ca 	bl	8003cf4 <pow>
 8001960:	eeb0 8a40 	vmov.f32	s16, s0
 8001964:	eef0 8a60 	vmov.f32	s17, s1
 8001968:	4b7f      	ldr	r3, [pc, #508]	; (8001b68 <TrapezoidalTraj_GetState+0x618>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd97 	bl	80004a0 <__aeabi_f2d>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8001b58 <TrapezoidalTraj_GetState+0x608>
 800197a:	ec43 2b10 	vmov	d0, r2, r3
 800197e:	f002 f9b9 	bl	8003cf4 <pow>
 8001982:	ec53 2b10 	vmov	r2, r3, d0
 8001986:	ec51 0b18 	vmov	r0, r1, d8
 800198a:	f7fe fc2b 	bl	80001e4 <__adddf3>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4640      	mov	r0, r8
 8001994:	4649      	mov	r1, r9
 8001996:	f7fe fddb 	bl	8000550 <__aeabi_dmul>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4620      	mov	r0, r4
 80019a0:	4629      	mov	r1, r5
 80019a2:	f7fe fc1d 	bl	80001e0 <__aeabi_dsub>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019ae:	f7fe fdcf 	bl	8000550 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4650      	mov	r0, sl
 80019b8:	4659      	mov	r1, fp
 80019ba:	f7fe fc13 	bl	80001e4 <__adddf3>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff f873 	bl	8000ab0 <__aeabi_d2f>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a6a      	ldr	r2, [pc, #424]	; (8001b78 <TrapezoidalTraj_GetState+0x628>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	e17e      	b.n	8001cd0 <TrapezoidalTraj_GetState+0x780>
		t_acc = 0.5*sqrt(4*fabs(s)/a);
 80019d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80019d6:	eef0 7ae7 	vabs.f32	s15, s15
 80019da:	ee17 0a90 	vmov	r0, s15
 80019de:	f7fe fd5f 	bl	80004a0 <__aeabi_f2d>
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <TrapezoidalTraj_GetState+0x62c>)
 80019e8:	f7fe fdb2 	bl	8000550 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4614      	mov	r4, r2
 80019f2:	461d      	mov	r5, r3
 80019f4:	4b5a      	ldr	r3, [pc, #360]	; (8001b60 <TrapezoidalTraj_GetState+0x610>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fd51 	bl	80004a0 <__aeabi_f2d>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4620      	mov	r0, r4
 8001a04:	4629      	mov	r1, r5
 8001a06:	f7fe fecd 	bl	80007a4 <__aeabi_ddiv>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	ec43 2b17 	vmov	d7, r2, r3
 8001a12:	eeb0 0a47 	vmov.f32	s0, s14
 8001a16:	eef0 0a67 	vmov.f32	s1, s15
 8001a1a:	f002 f9db 	bl	8003dd4 <sqrt>
 8001a1e:	ec51 0b10 	vmov	r0, r1, d0
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <TrapezoidalTraj_GetState+0x624>)
 8001a28:	f7fe fd92 	bl	8000550 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f7ff f83c 	bl	8000ab0 <__aeabi_d2f>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4a4d      	ldr	r2, [pc, #308]	; (8001b70 <TrapezoidalTraj_GetState+0x620>)
 8001a3c:	6013      	str	r3, [r2, #0]
		t_total = 2*t_acc;
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <TrapezoidalTraj_GetState+0x620>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a48:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <TrapezoidalTraj_GetState+0x618>)
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
		if (t <= t_acc)
 8001a4e:	4b48      	ldr	r3, [pc, #288]	; (8001b70 <TrapezoidalTraj_GetState+0x620>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	d862      	bhi.n	8001b28 <TrapezoidalTraj_GetState+0x5d8>
			qddot_des = dir*a;
 8001a62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6e:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <TrapezoidalTraj_GetState+0x610>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a78:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <TrapezoidalTraj_GetState+0x614>)
 8001a7a:	edc3 7a00 	vstr	s15, [r3]
			qdot_des = dir*a*t;
 8001a7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a8a:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <TrapezoidalTraj_GetState+0x610>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a94:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <TrapezoidalTraj_GetState+0x61c>)
 8001a9e:	edc3 7a00 	vstr	s15, [r3]
			q_des = start_pos + dir*(0.5*a*pow(t,2));
 8001aa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fce8 	bl	800047c <__aeabi_i2d>
 8001aac:	4604      	mov	r4, r0
 8001aae:	460d      	mov	r5, r1
 8001ab0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fce1 	bl	800047c <__aeabi_i2d>
 8001aba:	4680      	mov	r8, r0
 8001abc:	4689      	mov	r9, r1
 8001abe:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <TrapezoidalTraj_GetState+0x610>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fcec 	bl	80004a0 <__aeabi_f2d>
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <TrapezoidalTraj_GetState+0x624>)
 8001ace:	f7fe fd3f 	bl	8000550 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4692      	mov	sl, r2
 8001ad8:	469b      	mov	fp, r3
 8001ada:	69b8      	ldr	r0, [r7, #24]
 8001adc:	f7fe fce0 	bl	80004a0 <__aeabi_f2d>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001b58 <TrapezoidalTraj_GetState+0x608>
 8001ae8:	ec43 2b10 	vmov	d0, r2, r3
 8001aec:	f002 f902 	bl	8003cf4 <pow>
 8001af0:	ec53 2b10 	vmov	r2, r3, d0
 8001af4:	4650      	mov	r0, sl
 8001af6:	4659      	mov	r1, fp
 8001af8:	f7fe fd2a 	bl	8000550 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4640      	mov	r0, r8
 8001b02:	4649      	mov	r1, r9
 8001b04:	f7fe fd24 	bl	8000550 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	4629      	mov	r1, r5
 8001b10:	f7fe fb68 	bl	80001e4 <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7fe ffc8 	bl	8000ab0 <__aeabi_d2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <TrapezoidalTraj_GetState+0x628>)
 8001b24:	6013      	str	r3, [r2, #0]
}
 8001b26:	e0d3      	b.n	8001cd0 <TrapezoidalTraj_GetState+0x780>
		else if (t_acc < t && t < t_total)
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <TrapezoidalTraj_GetState+0x620>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	dc00      	bgt.n	8001b3e <TrapezoidalTraj_GetState+0x5ee>
}
 8001b3c:	e0c8      	b.n	8001cd0 <TrapezoidalTraj_GetState+0x780>
		else if (t_acc < t && t < t_total)
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <TrapezoidalTraj_GetState+0x618>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	d416      	bmi.n	8001b80 <TrapezoidalTraj_GetState+0x630>
}
 8001b52:	e0bd      	b.n	8001cd0 <TrapezoidalTraj_GetState+0x780>
 8001b54:	f3af 8000 	nop.w
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	40000000 	.word	0x40000000
 8001b60:	20000004 	.word	0x20000004
 8001b64:	20000138 	.word	0x20000138
 8001b68:	20000128 	.word	0x20000128
 8001b6c:	20000134 	.word	0x20000134
 8001b70:	2000012c 	.word	0x2000012c
 8001b74:	3fe00000 	.word	0x3fe00000
 8001b78:	20000130 	.word	0x20000130
 8001b7c:	40100000 	.word	0x40100000
			qddot_des = -dir*a;
 8001b80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b84:	425b      	negs	r3, r3
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	4b56      	ldr	r3, [pc, #344]	; (8001ce8 <TrapezoidalTraj_GetState+0x798>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b98:	4b54      	ldr	r3, [pc, #336]	; (8001cec <TrapezoidalTraj_GetState+0x79c>)
 8001b9a:	edc3 7a00 	vstr	s15, [r3]
			qdot_des = dir*a*(2*t_acc - t);
 8001b9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001baa:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <TrapezoidalTraj_GetState+0x798>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb4:	4b4e      	ldr	r3, [pc, #312]	; (8001cf0 <TrapezoidalTraj_GetState+0x7a0>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bca:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <TrapezoidalTraj_GetState+0x7a4>)
 8001bcc:	edc3 7a00 	vstr	s15, [r3]
			q_des = start_pos + dir*(2*a*t_acc*t-0.5*a*pow(t,2)-a*pow(t_acc,2));
 8001bd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fc51 	bl	800047c <__aeabi_i2d>
 8001bda:	4604      	mov	r4, r0
 8001bdc:	460d      	mov	r5, r1
 8001bde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fc4a 	bl	800047c <__aeabi_i2d>
 8001be8:	4680      	mov	r8, r0
 8001bea:	4689      	mov	r9, r1
 8001bec:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <TrapezoidalTraj_GetState+0x798>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <TrapezoidalTraj_GetState+0x7a0>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c00:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c08:	ee17 0a90 	vmov	r0, s15
 8001c0c:	f7fe fc48 	bl	80004a0 <__aeabi_f2d>
 8001c10:	4682      	mov	sl, r0
 8001c12:	468b      	mov	fp, r1
 8001c14:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <TrapezoidalTraj_GetState+0x798>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc41 	bl	80004a0 <__aeabi_f2d>
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	4b35      	ldr	r3, [pc, #212]	; (8001cf8 <TrapezoidalTraj_GetState+0x7a8>)
 8001c24:	f7fe fc94 	bl	8000550 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	e9c7 2300 	strd	r2, r3, [r7]
 8001c30:	69b8      	ldr	r0, [r7, #24]
 8001c32:	f7fe fc35 	bl	80004a0 <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001ce0 <TrapezoidalTraj_GetState+0x790>
 8001c3e:	ec43 2b10 	vmov	d0, r2, r3
 8001c42:	f002 f857 	bl	8003cf4 <pow>
 8001c46:	ec53 2b10 	vmov	r2, r3, d0
 8001c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c4e:	f7fe fc7f 	bl	8000550 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4650      	mov	r0, sl
 8001c58:	4659      	mov	r1, fp
 8001c5a:	f7fe fac1 	bl	80001e0 <__aeabi_dsub>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	e9c7 2300 	strd	r2, r3, [r7]
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <TrapezoidalTraj_GetState+0x798>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc18 	bl	80004a0 <__aeabi_f2d>
 8001c70:	4682      	mov	sl, r0
 8001c72:	468b      	mov	fp, r1
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <TrapezoidalTraj_GetState+0x7a0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc11 	bl	80004a0 <__aeabi_f2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001ce0 <TrapezoidalTraj_GetState+0x790>
 8001c86:	ec43 2b10 	vmov	d0, r2, r3
 8001c8a:	f002 f833 	bl	8003cf4 <pow>
 8001c8e:	ec53 2b10 	vmov	r2, r3, d0
 8001c92:	4650      	mov	r0, sl
 8001c94:	4659      	mov	r1, fp
 8001c96:	f7fe fc5b 	bl	8000550 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ca2:	f7fe fa9d 	bl	80001e0 <__aeabi_dsub>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4640      	mov	r0, r8
 8001cac:	4649      	mov	r1, r9
 8001cae:	f7fe fc4f 	bl	8000550 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	4629      	mov	r1, r5
 8001cba:	f7fe fa93 	bl	80001e4 <__adddf3>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f7fe fef3 	bl	8000ab0 <__aeabi_d2f>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <TrapezoidalTraj_GetState+0x7ac>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	ecbd 8b02 	vpop	{d8}
 8001cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cde:	bf00      	nop
 8001ce0:	00000000 	.word	0x00000000
 8001ce4:	40000000 	.word	0x40000000
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	20000138 	.word	0x20000138
 8001cf0:	2000012c 	.word	0x2000012c
 8001cf4:	20000134 	.word	0x20000134
 8001cf8:	3fe00000 	.word	0x3fe00000
 8001cfc:	20000130 	.word	0x20000130

08001d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d04:	b672      	cpsid	i
}
 8001d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <Error_Handler+0x8>
	...

08001d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_MspInit+0x4c>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <HAL_MspInit+0x4c>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	; 0x44
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_MspInit+0x4c>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_MspInit+0x4c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_MspInit+0x4c>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_MspInit+0x4c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d4a:	2007      	movs	r0, #7
 8001d4c:	f000 fa28 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800

08001d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <HAL_TIM_Base_MspInit+0x48>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d115      	bne.n	8001d9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_TIM_Base_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a0c      	ldr	r2, [pc, #48]	; (8001da8 <HAL_TIM_Base_MspInit+0x4c>)
 8001d78:	f043 0308 	orr.w	r3, r3, #8
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_TIM_Base_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2032      	movs	r0, #50	; 0x32
 8001d90:	f000 fa11 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d94:	2032      	movs	r0, #50	; 0x32
 8001d96:	f000 fa2a 	bl	80021ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40000c00 	.word	0x40000c00
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <HAL_UART_MspInit+0x84>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d12b      	bne.n	8001e26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_UART_MspInit+0x88>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a17      	ldr	r2, [pc, #92]	; (8001e34 <HAL_UART_MspInit+0x88>)
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_UART_MspInit+0x88>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_UART_MspInit+0x88>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <HAL_UART_MspInit+0x88>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HAL_UART_MspInit+0x88>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e06:	230c      	movs	r3, #12
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e16:	2307      	movs	r3, #7
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <HAL_UART_MspInit+0x8c>)
 8001e22:	f000 f9ff 	bl	8002224 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40004400 	.word	0x40004400
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020000 	.word	0x40020000

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <NMI_Handler+0x4>

08001e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <MemManage_Handler+0x4>

08001e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e88:	f000 f89a 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <TIM5_IRQHandler+0x10>)
 8001e96:	f001 f8a5 	bl	8002fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000009c 	.word	0x2000009c

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ecc:	480d      	ldr	r0, [pc, #52]	; (8001f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ece:	490e      	ldr	r1, [pc, #56]	; (8001f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed0:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee4:	4c0b      	ldr	r4, [pc, #44]	; (8001f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef2:	f7ff ffd7 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f001 fed1 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efa:	f7ff f8b9 	bl	8001070 <main>
  bx  lr    
 8001efe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001f0c:	08004bf8 	.word	0x08004bf8
  ldr r2, =_sbss
 8001f10:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f14:	20000154 	.word	0x20000154

08001f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 f92b 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fedc 	bl	8001d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f943 	bl	800220a <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 f90b 	bl	80021b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000010 	.word	0x20000010
 8001fb8:	20000018 	.word	0x20000018
 8001fbc:	20000014 	.word	0x20000014

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000018 	.word	0x20000018
 8001fe4:	20000150 	.word	0x20000150

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000150 	.word	0x20000150

08002000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800202c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <__NVIC_GetPriorityGrouping+0x18>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0307 	and.w	r3, r3, #7
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	2b00      	cmp	r3, #0
 8002074:	db0b      	blt.n	800208e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	4907      	ldr	r1, [pc, #28]	; (800209c <__NVIC_EnableIRQ+0x38>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2001      	movs	r0, #1
 8002086:	fa00 f202 	lsl.w	r2, r0, r2
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	; (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	; (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
         );
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800216c:	d301      	bcc.n	8002172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <SysTick_Config+0x40>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217a:	210f      	movs	r1, #15
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f7ff ff8e 	bl	80020a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <SysTick_Config+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <SysTick_Config+0x40>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff29 	bl	8002000 <__NVIC_SetPriorityGrouping>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c8:	f7ff ff3e 	bl	8002048 <__NVIC_GetPriorityGrouping>
 80021cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	f7ff ff8e 	bl	80020f4 <NVIC_EncodePriority>
 80021d8:	4602      	mov	r2, r0
 80021da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff5d 	bl	80020a0 <__NVIC_SetPriority>
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff31 	bl	8002064 <__NVIC_EnableIRQ>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ffa2 	bl	800215c <SysTick_Config>
 8002218:	4603      	mov	r3, r0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e159      	b.n	80024f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	429a      	cmp	r2, r3
 800225a:	f040 8148 	bne.w	80024ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d005      	beq.n	8002276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	2b02      	cmp	r3, #2
 8002274:	d130      	bne.n	80022d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	2203      	movs	r2, #3
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 0201 	and.w	r2, r3, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d017      	beq.n	8002314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d123      	bne.n	8002368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	08da      	lsrs	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3208      	adds	r2, #8
 8002328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	69b9      	ldr	r1, [r7, #24]
 8002364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0203 	and.w	r2, r3, #3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a2 	beq.w	80024ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b57      	ldr	r3, [pc, #348]	; (800250c <HAL_GPIO_Init+0x2e8>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	4a56      	ldr	r2, [pc, #344]	; (800250c <HAL_GPIO_Init+0x2e8>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ba:	4b54      	ldr	r3, [pc, #336]	; (800250c <HAL_GPIO_Init+0x2e8>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c6:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_GPIO_Init+0x2ec>)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	220f      	movs	r2, #15
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a49      	ldr	r2, [pc, #292]	; (8002514 <HAL_GPIO_Init+0x2f0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d019      	beq.n	8002426 <HAL_GPIO_Init+0x202>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a48      	ldr	r2, [pc, #288]	; (8002518 <HAL_GPIO_Init+0x2f4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_GPIO_Init+0x1fe>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a47      	ldr	r2, [pc, #284]	; (800251c <HAL_GPIO_Init+0x2f8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00d      	beq.n	800241e <HAL_GPIO_Init+0x1fa>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a46      	ldr	r2, [pc, #280]	; (8002520 <HAL_GPIO_Init+0x2fc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <HAL_GPIO_Init+0x1f6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a45      	ldr	r2, [pc, #276]	; (8002524 <HAL_GPIO_Init+0x300>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_GPIO_Init+0x1f2>
 8002412:	2304      	movs	r3, #4
 8002414:	e008      	b.n	8002428 <HAL_GPIO_Init+0x204>
 8002416:	2307      	movs	r3, #7
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x204>
 800241a:	2303      	movs	r3, #3
 800241c:	e004      	b.n	8002428 <HAL_GPIO_Init+0x204>
 800241e:	2302      	movs	r3, #2
 8002420:	e002      	b.n	8002428 <HAL_GPIO_Init+0x204>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_GPIO_Init+0x204>
 8002426:	2300      	movs	r3, #0
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	f002 0203 	and.w	r2, r2, #3
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	4093      	lsls	r3, r2
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002438:	4935      	ldr	r1, [pc, #212]	; (8002510 <HAL_GPIO_Init+0x2ec>)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002446:	4b38      	ldr	r3, [pc, #224]	; (8002528 <HAL_GPIO_Init+0x304>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246a:	4a2f      	ldr	r2, [pc, #188]	; (8002528 <HAL_GPIO_Init+0x304>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002470:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_GPIO_Init+0x304>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002494:	4a24      	ldr	r2, [pc, #144]	; (8002528 <HAL_GPIO_Init+0x304>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800249a:	4b23      	ldr	r3, [pc, #140]	; (8002528 <HAL_GPIO_Init+0x304>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024be:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <HAL_GPIO_Init+0x304>)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_GPIO_Init+0x304>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e8:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <HAL_GPIO_Init+0x304>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3301      	adds	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b0f      	cmp	r3, #15
 80024f8:	f67f aea2 	bls.w	8002240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3724      	adds	r7, #36	; 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	40013800 	.word	0x40013800
 8002514:	40020000 	.word	0x40020000
 8002518:	40020400 	.word	0x40020400
 800251c:	40020800 	.word	0x40020800
 8002520:	40020c00 	.word	0x40020c00
 8002524:	40021000 	.word	0x40021000
 8002528:	40013c00 	.word	0x40013c00

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002548:	e003      	b.n	8002552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e267      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d075      	beq.n	800266a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800257e:	4b88      	ldr	r3, [pc, #544]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b04      	cmp	r3, #4
 8002588:	d00c      	beq.n	80025a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258a:	4b85      	ldr	r3, [pc, #532]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002592:	2b08      	cmp	r3, #8
 8002594:	d112      	bne.n	80025bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002596:	4b82      	ldr	r3, [pc, #520]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a2:	d10b      	bne.n	80025bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	4b7e      	ldr	r3, [pc, #504]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d05b      	beq.n	8002668 <HAL_RCC_OscConfig+0x108>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d157      	bne.n	8002668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e242      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c4:	d106      	bne.n	80025d4 <HAL_RCC_OscConfig+0x74>
 80025c6:	4b76      	ldr	r3, [pc, #472]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a75      	ldr	r2, [pc, #468]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e01d      	b.n	8002610 <HAL_RCC_OscConfig+0xb0>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x98>
 80025de:	4b70      	ldr	r3, [pc, #448]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6f      	ldr	r2, [pc, #444]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b6d      	ldr	r3, [pc, #436]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6c      	ldr	r2, [pc, #432]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0xb0>
 80025f8:	4b69      	ldr	r3, [pc, #420]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a68      	ldr	r2, [pc, #416]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b66      	ldr	r3, [pc, #408]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800260a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800260e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d013      	beq.n	8002640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff fce6 	bl	8001fe8 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002620:	f7ff fce2 	bl	8001fe8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e207      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0xc0>
 800263e:	e014      	b.n	800266a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff fcd2 	bl	8001fe8 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002648:	f7ff fcce 	bl	8001fe8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1f3      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265a:	4b51      	ldr	r3, [pc, #324]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0xe8>
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d063      	beq.n	800273e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002676:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002682:	4b47      	ldr	r3, [pc, #284]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800268a:	2b08      	cmp	r3, #8
 800268c:	d11c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268e:	4b44      	ldr	r3, [pc, #272]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d116      	bne.n	80026c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269a:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x152>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e1c7      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b2:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4937      	ldr	r1, [pc, #220]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c6:	e03a      	b.n	800273e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_RCC_OscConfig+0x244>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7ff fc87 	bl	8001fe8 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026de:	f7ff fc83 	bl	8001fe8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e1a8      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4925      	ldr	r1, [pc, #148]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
 8002710:	e015      	b.n	800273e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002712:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_RCC_OscConfig+0x244>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7ff fc66 	bl	8001fe8 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002720:	f7ff fc62 	bl	8001fe8 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e187      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d036      	beq.n	80027b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <HAL_RCC_OscConfig+0x248>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7ff fc46 	bl	8001fe8 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002760:	f7ff fc42 	bl	8001fe8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e167      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x200>
 800277e:	e01b      	b.n	80027b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_RCC_OscConfig+0x248>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7ff fc2f 	bl	8001fe8 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278c:	e00e      	b.n	80027ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278e:	f7ff fc2b 	bl	8001fe8 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d907      	bls.n	80027ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e150      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
 80027a0:	40023800 	.word	0x40023800
 80027a4:	42470000 	.word	0x42470000
 80027a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ac:	4b88      	ldr	r3, [pc, #544]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ea      	bne.n	800278e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 8097 	beq.w	80028f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ca:	4b81      	ldr	r3, [pc, #516]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10f      	bne.n	80027f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	4b7d      	ldr	r3, [pc, #500]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a7c      	ldr	r2, [pc, #496]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b7a      	ldr	r3, [pc, #488]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f2:	2301      	movs	r3, #1
 80027f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f6:	4b77      	ldr	r3, [pc, #476]	; (80029d4 <HAL_RCC_OscConfig+0x474>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d118      	bne.n	8002834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002802:	4b74      	ldr	r3, [pc, #464]	; (80029d4 <HAL_RCC_OscConfig+0x474>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a73      	ldr	r2, [pc, #460]	; (80029d4 <HAL_RCC_OscConfig+0x474>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280e:	f7ff fbeb 	bl	8001fe8 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002816:	f7ff fbe7 	bl	8001fe8 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e10c      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	4b6a      	ldr	r3, [pc, #424]	; (80029d4 <HAL_RCC_OscConfig+0x474>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x2ea>
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6713      	str	r3, [r2, #112]	; 0x70
 8002848:	e01c      	b.n	8002884 <HAL_RCC_OscConfig+0x324>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b05      	cmp	r3, #5
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x30c>
 8002852:	4b5f      	ldr	r3, [pc, #380]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	4a5e      	ldr	r2, [pc, #376]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
 800285e:	4b5c      	ldr	r3, [pc, #368]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002862:	4a5b      	ldr	r2, [pc, #364]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6713      	str	r3, [r2, #112]	; 0x70
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0x324>
 800286c:	4b58      	ldr	r3, [pc, #352]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a57      	ldr	r2, [pc, #348]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	4b55      	ldr	r3, [pc, #340]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	4a54      	ldr	r2, [pc, #336]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800287e:	f023 0304 	bic.w	r3, r3, #4
 8002882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7ff fbac 	bl	8001fe8 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7ff fba8 	bl	8001fe8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e0cb      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0ee      	beq.n	8002894 <HAL_RCC_OscConfig+0x334>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b8:	f7ff fb96 	bl	8001fe8 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7ff fb92 	bl	8001fe8 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0b5      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d6:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1ee      	bne.n	80028c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e8:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	4a38      	ldr	r2, [pc, #224]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80028ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a1 	beq.w	8002a40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028fe:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b08      	cmp	r3, #8
 8002908:	d05c      	beq.n	80029c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d141      	bne.n	8002996 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002912:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCC_OscConfig+0x478>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff fb66 	bl	8001fe8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff fb62 	bl	8001fe8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e087      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	019b      	lsls	r3, r3, #6
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	3b01      	subs	r3, #1
 8002958:	041b      	lsls	r3, r3, #16
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	491b      	ldr	r1, [pc, #108]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x478>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7ff fb3b 	bl	8001fe8 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002976:	f7ff fb37 	bl	8001fe8 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e05c      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x416>
 8002994:	e054      	b.n	8002a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_RCC_OscConfig+0x478>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7ff fb24 	bl	8001fe8 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a4:	f7ff fb20 	bl	8001fe8 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e045      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x444>
 80029c2:	e03d      	b.n	8002a40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e038      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40007000 	.word	0x40007000
 80029d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x4ec>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d028      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d121      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d11a      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d111      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	3b01      	subs	r3, #1
 8002a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d107      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800

08002a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0cc      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b68      	ldr	r3, [pc, #416]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d90c      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b65      	ldr	r3, [pc, #404]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0b8      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a58      	ldr	r2, [pc, #352]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	494d      	ldr	r1, [pc, #308]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d044      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d119      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e07f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b3f      	ldr	r3, [pc, #252]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e06f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e067      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2e:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4934      	ldr	r1, [pc, #208]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b40:	f7ff fa52 	bl	8001fe8 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7ff fa4e 	bl	8001fe8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e04f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 020c 	and.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1eb      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d20c      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e032      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4916      	ldr	r1, [pc, #88]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	490e      	ldr	r1, [pc, #56]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bd6:	f000 f821 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	490a      	ldr	r1, [pc, #40]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	5ccb      	ldrb	r3, [r1, r3]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f9b2 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023c00 	.word	0x40023c00
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08004ba0 	.word	0x08004ba0
 8002c14:	20000010 	.word	0x20000010
 8002c18:	20000014 	.word	0x20000014

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c20:	b094      	sub	sp, #80	; 0x50
 8002c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	647b      	str	r3, [r7, #68]	; 0x44
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c34:	4b79      	ldr	r3, [pc, #484]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d00d      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x40>
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	f200 80e1 	bhi.w	8002e08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x34>
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c4e:	e0db      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c50:	4b73      	ldr	r3, [pc, #460]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c54:	e0db      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c56:	4b73      	ldr	r3, [pc, #460]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c5a:	e0d8      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5c:	4b6f      	ldr	r3, [pc, #444]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c66:	4b6d      	ldr	r3, [pc, #436]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	2200      	movs	r2, #0
 8002c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
 8002c86:	2300      	movs	r3, #0
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c8e:	4622      	mov	r2, r4
 8002c90:	462b      	mov	r3, r5
 8002c92:	f04f 0000 	mov.w	r0, #0
 8002c96:	f04f 0100 	mov.w	r1, #0
 8002c9a:	0159      	lsls	r1, r3, #5
 8002c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca0:	0150      	lsls	r0, r2, #5
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	1a51      	subs	r1, r2, r1
 8002caa:	6139      	str	r1, [r7, #16]
 8002cac:	4629      	mov	r1, r5
 8002cae:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	018b      	lsls	r3, r1, #6
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cca:	4651      	mov	r1, sl
 8002ccc:	018a      	lsls	r2, r1, #6
 8002cce:	4651      	mov	r1, sl
 8002cd0:	ebb2 0801 	subs.w	r8, r2, r1
 8002cd4:	4659      	mov	r1, fp
 8002cd6:	eb63 0901 	sbc.w	r9, r3, r1
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cee:	4690      	mov	r8, r2
 8002cf0:	4699      	mov	r9, r3
 8002cf2:	4623      	mov	r3, r4
 8002cf4:	eb18 0303 	adds.w	r3, r8, r3
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	462b      	mov	r3, r5
 8002cfc:	eb49 0303 	adc.w	r3, r9, r3
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d0e:	4629      	mov	r1, r5
 8002d10:	024b      	lsls	r3, r1, #9
 8002d12:	4621      	mov	r1, r4
 8002d14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d18:	4621      	mov	r1, r4
 8002d1a:	024a      	lsls	r2, r1, #9
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d22:	2200      	movs	r2, #0
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d2c:	f7fe f81e 	bl	8000d6c <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4613      	mov	r3, r2
 8002d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d38:	e058      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3a:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	2200      	movs	r2, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	4611      	mov	r1, r2
 8002d46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d4a:	623b      	str	r3, [r7, #32]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d54:	4642      	mov	r2, r8
 8002d56:	464b      	mov	r3, r9
 8002d58:	f04f 0000 	mov.w	r0, #0
 8002d5c:	f04f 0100 	mov.w	r1, #0
 8002d60:	0159      	lsls	r1, r3, #5
 8002d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d66:	0150      	lsls	r0, r2, #5
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d72:	4649      	mov	r1, r9
 8002d74:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d8c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d90:	eb63 050b 	sbc.w	r5, r3, fp
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	00eb      	lsls	r3, r5, #3
 8002d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002da2:	00e2      	lsls	r2, r4, #3
 8002da4:	4614      	mov	r4, r2
 8002da6:	461d      	mov	r5, r3
 8002da8:	4643      	mov	r3, r8
 8002daa:	18e3      	adds	r3, r4, r3
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	464b      	mov	r3, r9
 8002db0:	eb45 0303 	adc.w	r3, r5, r3
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	028b      	lsls	r3, r1, #10
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dcc:	4621      	mov	r1, r4
 8002dce:	028a      	lsls	r2, r1, #10
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	61fa      	str	r2, [r7, #28]
 8002ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de0:	f7fd ffc4 	bl	8000d6c <__aeabi_uldivmod>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4613      	mov	r3, r2
 8002dea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	3301      	adds	r3, #1
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e06:	e002      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3750      	adds	r7, #80	; 0x50
 8002e14:	46bd      	mov	sp, r7
 8002e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	00f42400 	.word	0x00f42400
 8002e24:	007a1200 	.word	0x007a1200

08002e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000010 	.word	0x20000010

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e44:	f7ff fff0 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	0a9b      	lsrs	r3, r3, #10
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4903      	ldr	r1, [pc, #12]	; (8002e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40023800 	.word	0x40023800
 8002e64:	08004bb0 	.word	0x08004bb0

08002e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e6c:	f7ff ffdc 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	0b5b      	lsrs	r3, r3, #13
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4903      	ldr	r1, [pc, #12]	; (8002e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	08004bb0 	.word	0x08004bb0

08002e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e041      	b.n	8002f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe ff50 	bl	8001d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f000 fa80 	bl	80033d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d001      	beq.n	8002f48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e03c      	b.n	8002fc2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <HAL_TIM_Base_Start+0xa0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d018      	beq.n	8002f8c <HAL_TIM_Base_Start+0x5c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f62:	d013      	beq.n	8002f8c <HAL_TIM_Base_Start+0x5c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_TIM_Base_Start+0xa4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00e      	beq.n	8002f8c <HAL_TIM_Base_Start+0x5c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <HAL_TIM_Base_Start+0xa8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d009      	beq.n	8002f8c <HAL_TIM_Base_Start+0x5c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <HAL_TIM_Base_Start+0xac>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_TIM_Base_Start+0x5c>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <HAL_TIM_Base_Start+0xb0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d111      	bne.n	8002fb0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d010      	beq.n	8002fc0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fae:	e007      	b.n	8002fc0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40000800 	.word	0x40000800
 8002fdc:	40000c00 	.word	0x40000c00
 8002fe0:	40014000 	.word	0x40014000

08002fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d122      	bne.n	8003040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b02      	cmp	r3, #2
 8003006:	d11b      	bne.n	8003040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0202 	mvn.w	r2, #2
 8003010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f9b5 	bl	8003396 <HAL_TIM_IC_CaptureCallback>
 800302c:	e005      	b.n	800303a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f9a7 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f9b8 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d122      	bne.n	8003094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b04      	cmp	r3, #4
 800305a:	d11b      	bne.n	8003094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0204 	mvn.w	r2, #4
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f98b 	bl	8003396 <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f97d 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f98e 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d122      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d11b      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0208 	mvn.w	r2, #8
 80030b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2204      	movs	r2, #4
 80030be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f961 	bl	8003396 <HAL_TIM_IC_CaptureCallback>
 80030d4:	e005      	b.n	80030e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f953 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f964 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d122      	bne.n	800313c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b10      	cmp	r3, #16
 8003102:	d11b      	bne.n	800313c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0210 	mvn.w	r2, #16
 800310c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2208      	movs	r2, #8
 8003112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f937 	bl	8003396 <HAL_TIM_IC_CaptureCallback>
 8003128:	e005      	b.n	8003136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f929 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f93a 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b01      	cmp	r3, #1
 8003148:	d10e      	bne.n	8003168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d107      	bne.n	8003168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0201 	mvn.w	r2, #1
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe f944 	bl	80013f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d10e      	bne.n	8003194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	2b80      	cmp	r3, #128	; 0x80
 8003182:	d107      	bne.n	8003194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fab2 	bl	80036f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d10e      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d107      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8ff 	bl	80033be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d10e      	bne.n	80031ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d107      	bne.n	80031ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0220 	mvn.w	r2, #32
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa7c 	bl	80036e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_TIM_ConfigClockSource+0x1c>
 800320c:	2302      	movs	r3, #2
 800320e:	e0b4      	b.n	800337a <HAL_TIM_ConfigClockSource+0x186>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800322e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003248:	d03e      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0xd4>
 800324a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324e:	f200 8087 	bhi.w	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003256:	f000 8086 	beq.w	8003366 <HAL_TIM_ConfigClockSource+0x172>
 800325a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325e:	d87f      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b70      	cmp	r3, #112	; 0x70
 8003262:	d01a      	beq.n	800329a <HAL_TIM_ConfigClockSource+0xa6>
 8003264:	2b70      	cmp	r3, #112	; 0x70
 8003266:	d87b      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b60      	cmp	r3, #96	; 0x60
 800326a:	d050      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x11a>
 800326c:	2b60      	cmp	r3, #96	; 0x60
 800326e:	d877      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b50      	cmp	r3, #80	; 0x50
 8003272:	d03c      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0xfa>
 8003274:	2b50      	cmp	r3, #80	; 0x50
 8003276:	d873      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b40      	cmp	r3, #64	; 0x40
 800327a:	d058      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x13a>
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d86f      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b30      	cmp	r3, #48	; 0x30
 8003282:	d064      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 8003284:	2b30      	cmp	r3, #48	; 0x30
 8003286:	d86b      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b20      	cmp	r3, #32
 800328a:	d060      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	2b20      	cmp	r3, #32
 800328e:	d867      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d05c      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 8003294:	2b10      	cmp	r3, #16
 8003296:	d05a      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	e062      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6899      	ldr	r1, [r3, #8]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f000 f98d 	bl	80035c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	609a      	str	r2, [r3, #8]
      break;
 80032c6:	e04f      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6899      	ldr	r1, [r3, #8]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f000 f976 	bl	80035c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ea:	609a      	str	r2, [r3, #8]
      break;
 80032ec:	e03c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f000 f8ea 	bl	80034d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2150      	movs	r1, #80	; 0x50
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f943 	bl	8003592 <TIM_ITRx_SetConfig>
      break;
 800330c:	e02c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	461a      	mov	r2, r3
 800331c:	f000 f909 	bl	8003532 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2160      	movs	r1, #96	; 0x60
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f933 	bl	8003592 <TIM_ITRx_SetConfig>
      break;
 800332c:	e01c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6859      	ldr	r1, [r3, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	461a      	mov	r2, r3
 800333c:	f000 f8ca 	bl	80034d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2140      	movs	r1, #64	; 0x40
 8003346:	4618      	mov	r0, r3
 8003348:	f000 f923 	bl	8003592 <TIM_ITRx_SetConfig>
      break;
 800334c:	e00c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4619      	mov	r1, r3
 8003358:	4610      	mov	r0, r2
 800335a:	f000 f91a 	bl	8003592 <TIM_ITRx_SetConfig>
      break;
 800335e:	e003      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e000      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a34      	ldr	r2, [pc, #208]	; (80034b8 <TIM_Base_SetConfig+0xe4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00f      	beq.n	800340c <TIM_Base_SetConfig+0x38>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f2:	d00b      	beq.n	800340c <TIM_Base_SetConfig+0x38>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a31      	ldr	r2, [pc, #196]	; (80034bc <TIM_Base_SetConfig+0xe8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d007      	beq.n	800340c <TIM_Base_SetConfig+0x38>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a30      	ldr	r2, [pc, #192]	; (80034c0 <TIM_Base_SetConfig+0xec>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_Base_SetConfig+0x38>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <TIM_Base_SetConfig+0xf0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d108      	bne.n	800341e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a25      	ldr	r2, [pc, #148]	; (80034b8 <TIM_Base_SetConfig+0xe4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01b      	beq.n	800345e <TIM_Base_SetConfig+0x8a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342c:	d017      	beq.n	800345e <TIM_Base_SetConfig+0x8a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <TIM_Base_SetConfig+0xe8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <TIM_Base_SetConfig+0x8a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a21      	ldr	r2, [pc, #132]	; (80034c0 <TIM_Base_SetConfig+0xec>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00f      	beq.n	800345e <TIM_Base_SetConfig+0x8a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a20      	ldr	r2, [pc, #128]	; (80034c4 <TIM_Base_SetConfig+0xf0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00b      	beq.n	800345e <TIM_Base_SetConfig+0x8a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <TIM_Base_SetConfig+0xf4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d007      	beq.n	800345e <TIM_Base_SetConfig+0x8a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <TIM_Base_SetConfig+0xf8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d003      	beq.n	800345e <TIM_Base_SetConfig+0x8a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <TIM_Base_SetConfig+0xfc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d108      	bne.n	8003470 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <TIM_Base_SetConfig+0xe4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d103      	bne.n	80034a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	615a      	str	r2, [r3, #20]
}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40010000 	.word	0x40010000
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800
 80034c4:	40000c00 	.word	0x40000c00
 80034c8:	40014000 	.word	0x40014000
 80034cc:	40014400 	.word	0x40014400
 80034d0:	40014800 	.word	0x40014800

080034d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f023 0201 	bic.w	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f023 030a 	bic.w	r3, r3, #10
 8003510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	621a      	str	r2, [r3, #32]
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003532:	b480      	push	{r7}
 8003534:	b087      	sub	sp, #28
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 0210 	bic.w	r2, r3, #16
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800355c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	031b      	lsls	r3, r3, #12
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800356e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f043 0307 	orr.w	r3, r3, #7
 80035b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	021a      	lsls	r2, r3, #8
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	609a      	str	r2, [r3, #8]
}
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800361c:	2302      	movs	r3, #2
 800361e:	e050      	b.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d018      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d013      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00e      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a15      	ldr	r2, [pc, #84]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d10c      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40010000 	.word	0x40010000
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	40014000 	.word	0x40014000

080036e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e03f      	b.n	800379e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fe fb3a 	bl	8001dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2224      	movs	r2, #36	; 0x24
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800374e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f829 	bl	80037a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ac:	b0c0      	sub	sp, #256	; 0x100
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c4:	68d9      	ldr	r1, [r3, #12]
 80037c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	ea40 0301 	orr.w	r3, r0, r1
 80037d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	431a      	orrs	r2, r3
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003800:	f021 010c 	bic.w	r1, r1, #12
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800380e:	430b      	orrs	r3, r1
 8003810:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800381e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003822:	6999      	ldr	r1, [r3, #24]
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	ea40 0301 	orr.w	r3, r0, r1
 800382e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b8f      	ldr	r3, [pc, #572]	; (8003a74 <UART_SetConfig+0x2cc>)
 8003838:	429a      	cmp	r2, r3
 800383a:	d005      	beq.n	8003848 <UART_SetConfig+0xa0>
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b8d      	ldr	r3, [pc, #564]	; (8003a78 <UART_SetConfig+0x2d0>)
 8003844:	429a      	cmp	r2, r3
 8003846:	d104      	bne.n	8003852 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003848:	f7ff fb0e 	bl	8002e68 <HAL_RCC_GetPCLK2Freq>
 800384c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003850:	e003      	b.n	800385a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003852:	f7ff faf5 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003856:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800385a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003864:	f040 810c 	bne.w	8003a80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800386c:	2200      	movs	r2, #0
 800386e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003872:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003876:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800387a:	4622      	mov	r2, r4
 800387c:	462b      	mov	r3, r5
 800387e:	1891      	adds	r1, r2, r2
 8003880:	65b9      	str	r1, [r7, #88]	; 0x58
 8003882:	415b      	adcs	r3, r3
 8003884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003886:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800388a:	4621      	mov	r1, r4
 800388c:	eb12 0801 	adds.w	r8, r2, r1
 8003890:	4629      	mov	r1, r5
 8003892:	eb43 0901 	adc.w	r9, r3, r1
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038aa:	4690      	mov	r8, r2
 80038ac:	4699      	mov	r9, r3
 80038ae:	4623      	mov	r3, r4
 80038b0:	eb18 0303 	adds.w	r3, r8, r3
 80038b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038b8:	462b      	mov	r3, r5
 80038ba:	eb49 0303 	adc.w	r3, r9, r3
 80038be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038d6:	460b      	mov	r3, r1
 80038d8:	18db      	adds	r3, r3, r3
 80038da:	653b      	str	r3, [r7, #80]	; 0x50
 80038dc:	4613      	mov	r3, r2
 80038de:	eb42 0303 	adc.w	r3, r2, r3
 80038e2:	657b      	str	r3, [r7, #84]	; 0x54
 80038e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038ec:	f7fd fa3e 	bl	8000d6c <__aeabi_uldivmod>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4b61      	ldr	r3, [pc, #388]	; (8003a7c <UART_SetConfig+0x2d4>)
 80038f6:	fba3 2302 	umull	r2, r3, r3, r2
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	011c      	lsls	r4, r3, #4
 80038fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003902:	2200      	movs	r2, #0
 8003904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003908:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800390c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003910:	4642      	mov	r2, r8
 8003912:	464b      	mov	r3, r9
 8003914:	1891      	adds	r1, r2, r2
 8003916:	64b9      	str	r1, [r7, #72]	; 0x48
 8003918:	415b      	adcs	r3, r3
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800391c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003920:	4641      	mov	r1, r8
 8003922:	eb12 0a01 	adds.w	sl, r2, r1
 8003926:	4649      	mov	r1, r9
 8003928:	eb43 0b01 	adc.w	fp, r3, r1
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003938:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800393c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003940:	4692      	mov	sl, r2
 8003942:	469b      	mov	fp, r3
 8003944:	4643      	mov	r3, r8
 8003946:	eb1a 0303 	adds.w	r3, sl, r3
 800394a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800394e:	464b      	mov	r3, r9
 8003950:	eb4b 0303 	adc.w	r3, fp, r3
 8003954:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003964:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003968:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800396c:	460b      	mov	r3, r1
 800396e:	18db      	adds	r3, r3, r3
 8003970:	643b      	str	r3, [r7, #64]	; 0x40
 8003972:	4613      	mov	r3, r2
 8003974:	eb42 0303 	adc.w	r3, r2, r3
 8003978:	647b      	str	r3, [r7, #68]	; 0x44
 800397a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800397e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003982:	f7fd f9f3 	bl	8000d6c <__aeabi_uldivmod>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4611      	mov	r1, r2
 800398c:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <UART_SetConfig+0x2d4>)
 800398e:	fba3 2301 	umull	r2, r3, r3, r1
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2264      	movs	r2, #100	; 0x64
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	1acb      	subs	r3, r1, r3
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039a2:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <UART_SetConfig+0x2d4>)
 80039a4:	fba3 2302 	umull	r2, r3, r3, r2
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039b0:	441c      	add	r4, r3
 80039b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039c4:	4642      	mov	r2, r8
 80039c6:	464b      	mov	r3, r9
 80039c8:	1891      	adds	r1, r2, r2
 80039ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80039cc:	415b      	adcs	r3, r3
 80039ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039d4:	4641      	mov	r1, r8
 80039d6:	1851      	adds	r1, r2, r1
 80039d8:	6339      	str	r1, [r7, #48]	; 0x30
 80039da:	4649      	mov	r1, r9
 80039dc:	414b      	adcs	r3, r1
 80039de:	637b      	str	r3, [r7, #52]	; 0x34
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039ec:	4659      	mov	r1, fp
 80039ee:	00cb      	lsls	r3, r1, #3
 80039f0:	4651      	mov	r1, sl
 80039f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f6:	4651      	mov	r1, sl
 80039f8:	00ca      	lsls	r2, r1, #3
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	4642      	mov	r2, r8
 8003a02:	189b      	adds	r3, r3, r2
 8003a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a08:	464b      	mov	r3, r9
 8003a0a:	460a      	mov	r2, r1
 8003a0c:	eb42 0303 	adc.w	r3, r2, r3
 8003a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a28:	460b      	mov	r3, r1
 8003a2a:	18db      	adds	r3, r3, r3
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2e:	4613      	mov	r3, r2
 8003a30:	eb42 0303 	adc.w	r3, r2, r3
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a3e:	f7fd f995 	bl	8000d6c <__aeabi_uldivmod>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <UART_SetConfig+0x2d4>)
 8003a48:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	2164      	movs	r1, #100	; 0x64
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	3332      	adds	r3, #50	; 0x32
 8003a5a:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <UART_SetConfig+0x2d4>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	f003 0207 	and.w	r2, r3, #7
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4422      	add	r2, r4
 8003a6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a70:	e105      	b.n	8003c7e <UART_SetConfig+0x4d6>
 8003a72:	bf00      	nop
 8003a74:	40011000 	.word	0x40011000
 8003a78:	40011400 	.word	0x40011400
 8003a7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a92:	4642      	mov	r2, r8
 8003a94:	464b      	mov	r3, r9
 8003a96:	1891      	adds	r1, r2, r2
 8003a98:	6239      	str	r1, [r7, #32]
 8003a9a:	415b      	adcs	r3, r3
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	1854      	adds	r4, r2, r1
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	eb43 0501 	adc.w	r5, r3, r1
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	00eb      	lsls	r3, r5, #3
 8003ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aba:	00e2      	lsls	r2, r4, #3
 8003abc:	4614      	mov	r4, r2
 8003abe:	461d      	mov	r5, r3
 8003ac0:	4643      	mov	r3, r8
 8003ac2:	18e3      	adds	r3, r4, r3
 8003ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ac8:	464b      	mov	r3, r9
 8003aca:	eb45 0303 	adc.w	r3, r5, r3
 8003ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ade:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003aee:	4629      	mov	r1, r5
 8003af0:	008b      	lsls	r3, r1, #2
 8003af2:	4621      	mov	r1, r4
 8003af4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af8:	4621      	mov	r1, r4
 8003afa:	008a      	lsls	r2, r1, #2
 8003afc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b00:	f7fd f934 	bl	8000d6c <__aeabi_uldivmod>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4b60      	ldr	r3, [pc, #384]	; (8003c8c <UART_SetConfig+0x4e4>)
 8003b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	011c      	lsls	r4, r3, #4
 8003b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b24:	4642      	mov	r2, r8
 8003b26:	464b      	mov	r3, r9
 8003b28:	1891      	adds	r1, r2, r2
 8003b2a:	61b9      	str	r1, [r7, #24]
 8003b2c:	415b      	adcs	r3, r3
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b34:	4641      	mov	r1, r8
 8003b36:	1851      	adds	r1, r2, r1
 8003b38:	6139      	str	r1, [r7, #16]
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	414b      	adcs	r3, r1
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b4c:	4659      	mov	r1, fp
 8003b4e:	00cb      	lsls	r3, r1, #3
 8003b50:	4651      	mov	r1, sl
 8003b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b56:	4651      	mov	r1, sl
 8003b58:	00ca      	lsls	r2, r1, #3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4642      	mov	r2, r8
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b68:	464b      	mov	r3, r9
 8003b6a:	460a      	mov	r2, r1
 8003b6c:	eb42 0303 	adc.w	r3, r2, r3
 8003b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b8c:	4649      	mov	r1, r9
 8003b8e:	008b      	lsls	r3, r1, #2
 8003b90:	4641      	mov	r1, r8
 8003b92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b96:	4641      	mov	r1, r8
 8003b98:	008a      	lsls	r2, r1, #2
 8003b9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b9e:	f7fd f8e5 	bl	8000d6c <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <UART_SetConfig+0x4e4>)
 8003ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	2164      	movs	r1, #100	; 0x64
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	3332      	adds	r3, #50	; 0x32
 8003bba:	4a34      	ldr	r2, [pc, #208]	; (8003c8c <UART_SetConfig+0x4e4>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc6:	441c      	add	r4, r3
 8003bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bcc:	2200      	movs	r2, #0
 8003bce:	673b      	str	r3, [r7, #112]	; 0x70
 8003bd0:	677a      	str	r2, [r7, #116]	; 0x74
 8003bd2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bd6:	4642      	mov	r2, r8
 8003bd8:	464b      	mov	r3, r9
 8003bda:	1891      	adds	r1, r2, r2
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	415b      	adcs	r3, r3
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be6:	4641      	mov	r1, r8
 8003be8:	1851      	adds	r1, r2, r1
 8003bea:	6039      	str	r1, [r7, #0]
 8003bec:	4649      	mov	r1, r9
 8003bee:	414b      	adcs	r3, r1
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bfe:	4659      	mov	r1, fp
 8003c00:	00cb      	lsls	r3, r1, #3
 8003c02:	4651      	mov	r1, sl
 8003c04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c08:	4651      	mov	r1, sl
 8003c0a:	00ca      	lsls	r2, r1, #3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4603      	mov	r3, r0
 8003c12:	4642      	mov	r2, r8
 8003c14:	189b      	adds	r3, r3, r2
 8003c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c18:	464b      	mov	r3, r9
 8003c1a:	460a      	mov	r2, r1
 8003c1c:	eb42 0303 	adc.w	r3, r2, r3
 8003c20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c2c:	667a      	str	r2, [r7, #100]	; 0x64
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	008b      	lsls	r3, r1, #2
 8003c3e:	4641      	mov	r1, r8
 8003c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c44:	4641      	mov	r1, r8
 8003c46:	008a      	lsls	r2, r1, #2
 8003c48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c4c:	f7fd f88e 	bl	8000d6c <__aeabi_uldivmod>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <UART_SetConfig+0x4e4>)
 8003c56:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	2164      	movs	r1, #100	; 0x64
 8003c5e:	fb01 f303 	mul.w	r3, r1, r3
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	3332      	adds	r3, #50	; 0x32
 8003c68:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <UART_SetConfig+0x4e4>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	f003 020f 	and.w	r2, r3, #15
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4422      	add	r2, r4
 8003c7c:	609a      	str	r2, [r3, #8]
}
 8003c7e:	bf00      	nop
 8003c80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c84:	46bd      	mov	sp, r7
 8003c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c8a:	bf00      	nop
 8003c8c:	51eb851f 	.word	0x51eb851f

08003c90 <__errno>:
 8003c90:	4b01      	ldr	r3, [pc, #4]	; (8003c98 <__errno+0x8>)
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	2000001c 	.word	0x2000001c

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	4d0d      	ldr	r5, [pc, #52]	; (8003cd4 <__libc_init_array+0x38>)
 8003ca0:	4c0d      	ldr	r4, [pc, #52]	; (8003cd8 <__libc_init_array+0x3c>)
 8003ca2:	1b64      	subs	r4, r4, r5
 8003ca4:	10a4      	asrs	r4, r4, #2
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	42a6      	cmp	r6, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	4d0b      	ldr	r5, [pc, #44]	; (8003cdc <__libc_init_array+0x40>)
 8003cae:	4c0c      	ldr	r4, [pc, #48]	; (8003ce0 <__libc_init_array+0x44>)
 8003cb0:	f000 ff68 	bl	8004b84 <_init>
 8003cb4:	1b64      	subs	r4, r4, r5
 8003cb6:	10a4      	asrs	r4, r4, #2
 8003cb8:	2600      	movs	r6, #0
 8003cba:	42a6      	cmp	r6, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc4:	4798      	blx	r3
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cce:	4798      	blx	r3
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	08004bf0 	.word	0x08004bf0
 8003cd8:	08004bf0 	.word	0x08004bf0
 8003cdc:	08004bf0 	.word	0x08004bf0
 8003ce0:	08004bf4 	.word	0x08004bf4

08003ce4 <memset>:
 8003ce4:	4402      	add	r2, r0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d100      	bne.n	8003cee <memset+0xa>
 8003cec:	4770      	bx	lr
 8003cee:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf2:	e7f9      	b.n	8003ce8 <memset+0x4>

08003cf4 <pow>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	ed2d 8b02 	vpush	{d8}
 8003cfa:	eeb0 8a40 	vmov.f32	s16, s0
 8003cfe:	eef0 8a60 	vmov.f32	s17, s1
 8003d02:	ec55 4b11 	vmov	r4, r5, d1
 8003d06:	f000 f893 	bl	8003e30 <__ieee754_pow>
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	462b      	mov	r3, r5
 8003d0e:	4620      	mov	r0, r4
 8003d10:	4629      	mov	r1, r5
 8003d12:	ec57 6b10 	vmov	r6, r7, d0
 8003d16:	f7fc feb5 	bl	8000a84 <__aeabi_dcmpun>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d13b      	bne.n	8003d96 <pow+0xa2>
 8003d1e:	ec51 0b18 	vmov	r0, r1, d8
 8003d22:	2200      	movs	r2, #0
 8003d24:	2300      	movs	r3, #0
 8003d26:	f7fc fe7b 	bl	8000a20 <__aeabi_dcmpeq>
 8003d2a:	b1b8      	cbz	r0, 8003d5c <pow+0x68>
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2300      	movs	r3, #0
 8003d30:	4620      	mov	r0, r4
 8003d32:	4629      	mov	r1, r5
 8003d34:	f7fc fe74 	bl	8000a20 <__aeabi_dcmpeq>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d146      	bne.n	8003dca <pow+0xd6>
 8003d3c:	ec45 4b10 	vmov	d0, r4, r5
 8003d40:	f000 fe8f 	bl	8004a62 <finite>
 8003d44:	b338      	cbz	r0, 8003d96 <pow+0xa2>
 8003d46:	2200      	movs	r2, #0
 8003d48:	2300      	movs	r3, #0
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	f7fc fe71 	bl	8000a34 <__aeabi_dcmplt>
 8003d52:	b300      	cbz	r0, 8003d96 <pow+0xa2>
 8003d54:	f7ff ff9c 	bl	8003c90 <__errno>
 8003d58:	2322      	movs	r3, #34	; 0x22
 8003d5a:	e01b      	b.n	8003d94 <pow+0xa0>
 8003d5c:	ec47 6b10 	vmov	d0, r6, r7
 8003d60:	f000 fe7f 	bl	8004a62 <finite>
 8003d64:	b9e0      	cbnz	r0, 8003da0 <pow+0xac>
 8003d66:	eeb0 0a48 	vmov.f32	s0, s16
 8003d6a:	eef0 0a68 	vmov.f32	s1, s17
 8003d6e:	f000 fe78 	bl	8004a62 <finite>
 8003d72:	b1a8      	cbz	r0, 8003da0 <pow+0xac>
 8003d74:	ec45 4b10 	vmov	d0, r4, r5
 8003d78:	f000 fe73 	bl	8004a62 <finite>
 8003d7c:	b180      	cbz	r0, 8003da0 <pow+0xac>
 8003d7e:	4632      	mov	r2, r6
 8003d80:	463b      	mov	r3, r7
 8003d82:	4630      	mov	r0, r6
 8003d84:	4639      	mov	r1, r7
 8003d86:	f7fc fe7d 	bl	8000a84 <__aeabi_dcmpun>
 8003d8a:	2800      	cmp	r0, #0
 8003d8c:	d0e2      	beq.n	8003d54 <pow+0x60>
 8003d8e:	f7ff ff7f 	bl	8003c90 <__errno>
 8003d92:	2321      	movs	r3, #33	; 0x21
 8003d94:	6003      	str	r3, [r0, #0]
 8003d96:	ecbd 8b02 	vpop	{d8}
 8003d9a:	ec47 6b10 	vmov	d0, r6, r7
 8003d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003da0:	2200      	movs	r2, #0
 8003da2:	2300      	movs	r3, #0
 8003da4:	4630      	mov	r0, r6
 8003da6:	4639      	mov	r1, r7
 8003da8:	f7fc fe3a 	bl	8000a20 <__aeabi_dcmpeq>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d0f2      	beq.n	8003d96 <pow+0xa2>
 8003db0:	eeb0 0a48 	vmov.f32	s0, s16
 8003db4:	eef0 0a68 	vmov.f32	s1, s17
 8003db8:	f000 fe53 	bl	8004a62 <finite>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	d0ea      	beq.n	8003d96 <pow+0xa2>
 8003dc0:	ec45 4b10 	vmov	d0, r4, r5
 8003dc4:	f000 fe4d 	bl	8004a62 <finite>
 8003dc8:	e7c3      	b.n	8003d52 <pow+0x5e>
 8003dca:	4f01      	ldr	r7, [pc, #4]	; (8003dd0 <pow+0xdc>)
 8003dcc:	2600      	movs	r6, #0
 8003dce:	e7e2      	b.n	8003d96 <pow+0xa2>
 8003dd0:	3ff00000 	.word	0x3ff00000

08003dd4 <sqrt>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	ed2d 8b02 	vpush	{d8}
 8003dda:	ec55 4b10 	vmov	r4, r5, d0
 8003dde:	f000 fd55 	bl	800488c <__ieee754_sqrt>
 8003de2:	4622      	mov	r2, r4
 8003de4:	462b      	mov	r3, r5
 8003de6:	4620      	mov	r0, r4
 8003de8:	4629      	mov	r1, r5
 8003dea:	eeb0 8a40 	vmov.f32	s16, s0
 8003dee:	eef0 8a60 	vmov.f32	s17, s1
 8003df2:	f7fc fe47 	bl	8000a84 <__aeabi_dcmpun>
 8003df6:	b990      	cbnz	r0, 8003e1e <sqrt+0x4a>
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	f7fc fe18 	bl	8000a34 <__aeabi_dcmplt>
 8003e04:	b158      	cbz	r0, 8003e1e <sqrt+0x4a>
 8003e06:	f7ff ff43 	bl	8003c90 <__errno>
 8003e0a:	2321      	movs	r3, #33	; 0x21
 8003e0c:	6003      	str	r3, [r0, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2300      	movs	r3, #0
 8003e12:	4610      	mov	r0, r2
 8003e14:	4619      	mov	r1, r3
 8003e16:	f7fc fcc5 	bl	80007a4 <__aeabi_ddiv>
 8003e1a:	ec41 0b18 	vmov	d8, r0, r1
 8003e1e:	eeb0 0a48 	vmov.f32	s0, s16
 8003e22:	eef0 0a68 	vmov.f32	s1, s17
 8003e26:	ecbd 8b02 	vpop	{d8}
 8003e2a:	bd38      	pop	{r3, r4, r5, pc}
 8003e2c:	0000      	movs	r0, r0
	...

08003e30 <__ieee754_pow>:
 8003e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e34:	ed2d 8b06 	vpush	{d8-d10}
 8003e38:	b089      	sub	sp, #36	; 0x24
 8003e3a:	ed8d 1b00 	vstr	d1, [sp]
 8003e3e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003e42:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003e46:	ea58 0102 	orrs.w	r1, r8, r2
 8003e4a:	ec57 6b10 	vmov	r6, r7, d0
 8003e4e:	d115      	bne.n	8003e7c <__ieee754_pow+0x4c>
 8003e50:	19b3      	adds	r3, r6, r6
 8003e52:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8003e56:	4152      	adcs	r2, r2
 8003e58:	4299      	cmp	r1, r3
 8003e5a:	4b89      	ldr	r3, [pc, #548]	; (8004080 <__ieee754_pow+0x250>)
 8003e5c:	4193      	sbcs	r3, r2
 8003e5e:	f080 84d2 	bcs.w	8004806 <__ieee754_pow+0x9d6>
 8003e62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e66:	4630      	mov	r0, r6
 8003e68:	4639      	mov	r1, r7
 8003e6a:	f7fc f9bb 	bl	80001e4 <__adddf3>
 8003e6e:	ec41 0b10 	vmov	d0, r0, r1
 8003e72:	b009      	add	sp, #36	; 0x24
 8003e74:	ecbd 8b06 	vpop	{d8-d10}
 8003e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e7c:	4b81      	ldr	r3, [pc, #516]	; (8004084 <__ieee754_pow+0x254>)
 8003e7e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003e82:	429c      	cmp	r4, r3
 8003e84:	ee10 aa10 	vmov	sl, s0
 8003e88:	463d      	mov	r5, r7
 8003e8a:	dc06      	bgt.n	8003e9a <__ieee754_pow+0x6a>
 8003e8c:	d101      	bne.n	8003e92 <__ieee754_pow+0x62>
 8003e8e:	2e00      	cmp	r6, #0
 8003e90:	d1e7      	bne.n	8003e62 <__ieee754_pow+0x32>
 8003e92:	4598      	cmp	r8, r3
 8003e94:	dc01      	bgt.n	8003e9a <__ieee754_pow+0x6a>
 8003e96:	d10f      	bne.n	8003eb8 <__ieee754_pow+0x88>
 8003e98:	b172      	cbz	r2, 8003eb8 <__ieee754_pow+0x88>
 8003e9a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003e9e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003ea2:	ea55 050a 	orrs.w	r5, r5, sl
 8003ea6:	d1dc      	bne.n	8003e62 <__ieee754_pow+0x32>
 8003ea8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003eac:	18db      	adds	r3, r3, r3
 8003eae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003eb2:	4152      	adcs	r2, r2
 8003eb4:	429d      	cmp	r5, r3
 8003eb6:	e7d0      	b.n	8003e5a <__ieee754_pow+0x2a>
 8003eb8:	2d00      	cmp	r5, #0
 8003eba:	da3b      	bge.n	8003f34 <__ieee754_pow+0x104>
 8003ebc:	4b72      	ldr	r3, [pc, #456]	; (8004088 <__ieee754_pow+0x258>)
 8003ebe:	4598      	cmp	r8, r3
 8003ec0:	dc51      	bgt.n	8003f66 <__ieee754_pow+0x136>
 8003ec2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003ec6:	4598      	cmp	r8, r3
 8003ec8:	f340 84ac 	ble.w	8004824 <__ieee754_pow+0x9f4>
 8003ecc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003ed0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003ed4:	2b14      	cmp	r3, #20
 8003ed6:	dd0f      	ble.n	8003ef8 <__ieee754_pow+0xc8>
 8003ed8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003edc:	fa22 f103 	lsr.w	r1, r2, r3
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	f040 849d 	bne.w	8004824 <__ieee754_pow+0x9f4>
 8003eea:	f001 0101 	and.w	r1, r1, #1
 8003eee:	f1c1 0302 	rsb	r3, r1, #2
 8003ef2:	9304      	str	r3, [sp, #16]
 8003ef4:	b182      	cbz	r2, 8003f18 <__ieee754_pow+0xe8>
 8003ef6:	e05f      	b.n	8003fb8 <__ieee754_pow+0x188>
 8003ef8:	2a00      	cmp	r2, #0
 8003efa:	d15b      	bne.n	8003fb4 <__ieee754_pow+0x184>
 8003efc:	f1c3 0314 	rsb	r3, r3, #20
 8003f00:	fa48 f103 	asr.w	r1, r8, r3
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	4543      	cmp	r3, r8
 8003f0a:	f040 8488 	bne.w	800481e <__ieee754_pow+0x9ee>
 8003f0e:	f001 0101 	and.w	r1, r1, #1
 8003f12:	f1c1 0302 	rsb	r3, r1, #2
 8003f16:	9304      	str	r3, [sp, #16]
 8003f18:	4b5c      	ldr	r3, [pc, #368]	; (800408c <__ieee754_pow+0x25c>)
 8003f1a:	4598      	cmp	r8, r3
 8003f1c:	d132      	bne.n	8003f84 <__ieee754_pow+0x154>
 8003f1e:	f1b9 0f00 	cmp.w	r9, #0
 8003f22:	f280 8478 	bge.w	8004816 <__ieee754_pow+0x9e6>
 8003f26:	4959      	ldr	r1, [pc, #356]	; (800408c <__ieee754_pow+0x25c>)
 8003f28:	4632      	mov	r2, r6
 8003f2a:	463b      	mov	r3, r7
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	f7fc fc39 	bl	80007a4 <__aeabi_ddiv>
 8003f32:	e79c      	b.n	8003e6e <__ieee754_pow+0x3e>
 8003f34:	2300      	movs	r3, #0
 8003f36:	9304      	str	r3, [sp, #16]
 8003f38:	2a00      	cmp	r2, #0
 8003f3a:	d13d      	bne.n	8003fb8 <__ieee754_pow+0x188>
 8003f3c:	4b51      	ldr	r3, [pc, #324]	; (8004084 <__ieee754_pow+0x254>)
 8003f3e:	4598      	cmp	r8, r3
 8003f40:	d1ea      	bne.n	8003f18 <__ieee754_pow+0xe8>
 8003f42:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003f46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003f4a:	ea53 030a 	orrs.w	r3, r3, sl
 8003f4e:	f000 845a 	beq.w	8004806 <__ieee754_pow+0x9d6>
 8003f52:	4b4f      	ldr	r3, [pc, #316]	; (8004090 <__ieee754_pow+0x260>)
 8003f54:	429c      	cmp	r4, r3
 8003f56:	dd08      	ble.n	8003f6a <__ieee754_pow+0x13a>
 8003f58:	f1b9 0f00 	cmp.w	r9, #0
 8003f5c:	f2c0 8457 	blt.w	800480e <__ieee754_pow+0x9de>
 8003f60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f64:	e783      	b.n	8003e6e <__ieee754_pow+0x3e>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e7e5      	b.n	8003f36 <__ieee754_pow+0x106>
 8003f6a:	f1b9 0f00 	cmp.w	r9, #0
 8003f6e:	f04f 0000 	mov.w	r0, #0
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	f6bf af7a 	bge.w	8003e6e <__ieee754_pow+0x3e>
 8003f7a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003f7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003f82:	e774      	b.n	8003e6e <__ieee754_pow+0x3e>
 8003f84:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003f88:	d106      	bne.n	8003f98 <__ieee754_pow+0x168>
 8003f8a:	4632      	mov	r2, r6
 8003f8c:	463b      	mov	r3, r7
 8003f8e:	4630      	mov	r0, r6
 8003f90:	4639      	mov	r1, r7
 8003f92:	f7fc fadd 	bl	8000550 <__aeabi_dmul>
 8003f96:	e76a      	b.n	8003e6e <__ieee754_pow+0x3e>
 8003f98:	4b3e      	ldr	r3, [pc, #248]	; (8004094 <__ieee754_pow+0x264>)
 8003f9a:	4599      	cmp	r9, r3
 8003f9c:	d10c      	bne.n	8003fb8 <__ieee754_pow+0x188>
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	db0a      	blt.n	8003fb8 <__ieee754_pow+0x188>
 8003fa2:	ec47 6b10 	vmov	d0, r6, r7
 8003fa6:	b009      	add	sp, #36	; 0x24
 8003fa8:	ecbd 8b06 	vpop	{d8-d10}
 8003fac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb0:	f000 bc6c 	b.w	800488c <__ieee754_sqrt>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9304      	str	r3, [sp, #16]
 8003fb8:	ec47 6b10 	vmov	d0, r6, r7
 8003fbc:	f000 fd48 	bl	8004a50 <fabs>
 8003fc0:	ec51 0b10 	vmov	r0, r1, d0
 8003fc4:	f1ba 0f00 	cmp.w	sl, #0
 8003fc8:	d129      	bne.n	800401e <__ieee754_pow+0x1ee>
 8003fca:	b124      	cbz	r4, 8003fd6 <__ieee754_pow+0x1a6>
 8003fcc:	4b2f      	ldr	r3, [pc, #188]	; (800408c <__ieee754_pow+0x25c>)
 8003fce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d123      	bne.n	800401e <__ieee754_pow+0x1ee>
 8003fd6:	f1b9 0f00 	cmp.w	r9, #0
 8003fda:	da05      	bge.n	8003fe8 <__ieee754_pow+0x1b8>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	492a      	ldr	r1, [pc, #168]	; (800408c <__ieee754_pow+0x25c>)
 8003fe4:	f7fc fbde 	bl	80007a4 <__aeabi_ddiv>
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	f6bf af40 	bge.w	8003e6e <__ieee754_pow+0x3e>
 8003fee:	9b04      	ldr	r3, [sp, #16]
 8003ff0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003ff4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003ff8:	4323      	orrs	r3, r4
 8003ffa:	d108      	bne.n	800400e <__ieee754_pow+0x1de>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4610      	mov	r0, r2
 8004002:	4619      	mov	r1, r3
 8004004:	f7fc f8ec 	bl	80001e0 <__aeabi_dsub>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	e78f      	b.n	8003f2e <__ieee754_pow+0xfe>
 800400e:	9b04      	ldr	r3, [sp, #16]
 8004010:	2b01      	cmp	r3, #1
 8004012:	f47f af2c 	bne.w	8003e6e <__ieee754_pow+0x3e>
 8004016:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800401a:	4619      	mov	r1, r3
 800401c:	e727      	b.n	8003e6e <__ieee754_pow+0x3e>
 800401e:	0feb      	lsrs	r3, r5, #31
 8004020:	3b01      	subs	r3, #1
 8004022:	9306      	str	r3, [sp, #24]
 8004024:	9a06      	ldr	r2, [sp, #24]
 8004026:	9b04      	ldr	r3, [sp, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	d102      	bne.n	8004032 <__ieee754_pow+0x202>
 800402c:	4632      	mov	r2, r6
 800402e:	463b      	mov	r3, r7
 8004030:	e7e6      	b.n	8004000 <__ieee754_pow+0x1d0>
 8004032:	4b19      	ldr	r3, [pc, #100]	; (8004098 <__ieee754_pow+0x268>)
 8004034:	4598      	cmp	r8, r3
 8004036:	f340 80fb 	ble.w	8004230 <__ieee754_pow+0x400>
 800403a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800403e:	4598      	cmp	r8, r3
 8004040:	4b13      	ldr	r3, [pc, #76]	; (8004090 <__ieee754_pow+0x260>)
 8004042:	dd0c      	ble.n	800405e <__ieee754_pow+0x22e>
 8004044:	429c      	cmp	r4, r3
 8004046:	dc0f      	bgt.n	8004068 <__ieee754_pow+0x238>
 8004048:	f1b9 0f00 	cmp.w	r9, #0
 800404c:	da0f      	bge.n	800406e <__ieee754_pow+0x23e>
 800404e:	2000      	movs	r0, #0
 8004050:	b009      	add	sp, #36	; 0x24
 8004052:	ecbd 8b06 	vpop	{d8-d10}
 8004056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	f000 bcf0 	b.w	8004a3e <__math_oflow>
 800405e:	429c      	cmp	r4, r3
 8004060:	dbf2      	blt.n	8004048 <__ieee754_pow+0x218>
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <__ieee754_pow+0x25c>)
 8004064:	429c      	cmp	r4, r3
 8004066:	dd19      	ble.n	800409c <__ieee754_pow+0x26c>
 8004068:	f1b9 0f00 	cmp.w	r9, #0
 800406c:	dcef      	bgt.n	800404e <__ieee754_pow+0x21e>
 800406e:	2000      	movs	r0, #0
 8004070:	b009      	add	sp, #36	; 0x24
 8004072:	ecbd 8b06 	vpop	{d8-d10}
 8004076:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407a:	f000 bcd7 	b.w	8004a2c <__math_uflow>
 800407e:	bf00      	nop
 8004080:	fff00000 	.word	0xfff00000
 8004084:	7ff00000 	.word	0x7ff00000
 8004088:	433fffff 	.word	0x433fffff
 800408c:	3ff00000 	.word	0x3ff00000
 8004090:	3fefffff 	.word	0x3fefffff
 8004094:	3fe00000 	.word	0x3fe00000
 8004098:	41e00000 	.word	0x41e00000
 800409c:	4b60      	ldr	r3, [pc, #384]	; (8004220 <__ieee754_pow+0x3f0>)
 800409e:	2200      	movs	r2, #0
 80040a0:	f7fc f89e 	bl	80001e0 <__aeabi_dsub>
 80040a4:	a354      	add	r3, pc, #336	; (adr r3, 80041f8 <__ieee754_pow+0x3c8>)
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	4604      	mov	r4, r0
 80040ac:	460d      	mov	r5, r1
 80040ae:	f7fc fa4f 	bl	8000550 <__aeabi_dmul>
 80040b2:	a353      	add	r3, pc, #332	; (adr r3, 8004200 <__ieee754_pow+0x3d0>)
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	4606      	mov	r6, r0
 80040ba:	460f      	mov	r7, r1
 80040bc:	4620      	mov	r0, r4
 80040be:	4629      	mov	r1, r5
 80040c0:	f7fc fa46 	bl	8000550 <__aeabi_dmul>
 80040c4:	4b57      	ldr	r3, [pc, #348]	; (8004224 <__ieee754_pow+0x3f4>)
 80040c6:	4682      	mov	sl, r0
 80040c8:	468b      	mov	fp, r1
 80040ca:	2200      	movs	r2, #0
 80040cc:	4620      	mov	r0, r4
 80040ce:	4629      	mov	r1, r5
 80040d0:	f7fc fa3e 	bl	8000550 <__aeabi_dmul>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	a14b      	add	r1, pc, #300	; (adr r1, 8004208 <__ieee754_pow+0x3d8>)
 80040da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040de:	f7fc f87f 	bl	80001e0 <__aeabi_dsub>
 80040e2:	4622      	mov	r2, r4
 80040e4:	462b      	mov	r3, r5
 80040e6:	f7fc fa33 	bl	8000550 <__aeabi_dmul>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	2000      	movs	r0, #0
 80040f0:	494d      	ldr	r1, [pc, #308]	; (8004228 <__ieee754_pow+0x3f8>)
 80040f2:	f7fc f875 	bl	80001e0 <__aeabi_dsub>
 80040f6:	4622      	mov	r2, r4
 80040f8:	4680      	mov	r8, r0
 80040fa:	4689      	mov	r9, r1
 80040fc:	462b      	mov	r3, r5
 80040fe:	4620      	mov	r0, r4
 8004100:	4629      	mov	r1, r5
 8004102:	f7fc fa25 	bl	8000550 <__aeabi_dmul>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4640      	mov	r0, r8
 800410c:	4649      	mov	r1, r9
 800410e:	f7fc fa1f 	bl	8000550 <__aeabi_dmul>
 8004112:	a33f      	add	r3, pc, #252	; (adr r3, 8004210 <__ieee754_pow+0x3e0>)
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f7fc fa1a 	bl	8000550 <__aeabi_dmul>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4650      	mov	r0, sl
 8004122:	4659      	mov	r1, fp
 8004124:	f7fc f85c 	bl	80001e0 <__aeabi_dsub>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4680      	mov	r8, r0
 800412e:	4689      	mov	r9, r1
 8004130:	4630      	mov	r0, r6
 8004132:	4639      	mov	r1, r7
 8004134:	f7fc f856 	bl	80001e4 <__adddf3>
 8004138:	2000      	movs	r0, #0
 800413a:	4632      	mov	r2, r6
 800413c:	463b      	mov	r3, r7
 800413e:	4604      	mov	r4, r0
 8004140:	460d      	mov	r5, r1
 8004142:	f7fc f84d 	bl	80001e0 <__aeabi_dsub>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4640      	mov	r0, r8
 800414c:	4649      	mov	r1, r9
 800414e:	f7fc f847 	bl	80001e0 <__aeabi_dsub>
 8004152:	9b04      	ldr	r3, [sp, #16]
 8004154:	9a06      	ldr	r2, [sp, #24]
 8004156:	3b01      	subs	r3, #1
 8004158:	4313      	orrs	r3, r2
 800415a:	4682      	mov	sl, r0
 800415c:	468b      	mov	fp, r1
 800415e:	f040 81e7 	bne.w	8004530 <__ieee754_pow+0x700>
 8004162:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004218 <__ieee754_pow+0x3e8>
 8004166:	eeb0 8a47 	vmov.f32	s16, s14
 800416a:	eef0 8a67 	vmov.f32	s17, s15
 800416e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004172:	2600      	movs	r6, #0
 8004174:	4632      	mov	r2, r6
 8004176:	463b      	mov	r3, r7
 8004178:	e9dd 0100 	ldrd	r0, r1, [sp]
 800417c:	f7fc f830 	bl	80001e0 <__aeabi_dsub>
 8004180:	4622      	mov	r2, r4
 8004182:	462b      	mov	r3, r5
 8004184:	f7fc f9e4 	bl	8000550 <__aeabi_dmul>
 8004188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800418c:	4680      	mov	r8, r0
 800418e:	4689      	mov	r9, r1
 8004190:	4650      	mov	r0, sl
 8004192:	4659      	mov	r1, fp
 8004194:	f7fc f9dc 	bl	8000550 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4640      	mov	r0, r8
 800419e:	4649      	mov	r1, r9
 80041a0:	f7fc f820 	bl	80001e4 <__adddf3>
 80041a4:	4632      	mov	r2, r6
 80041a6:	463b      	mov	r3, r7
 80041a8:	4680      	mov	r8, r0
 80041aa:	4689      	mov	r9, r1
 80041ac:	4620      	mov	r0, r4
 80041ae:	4629      	mov	r1, r5
 80041b0:	f7fc f9ce 	bl	8000550 <__aeabi_dmul>
 80041b4:	460b      	mov	r3, r1
 80041b6:	4604      	mov	r4, r0
 80041b8:	460d      	mov	r5, r1
 80041ba:	4602      	mov	r2, r0
 80041bc:	4649      	mov	r1, r9
 80041be:	4640      	mov	r0, r8
 80041c0:	f7fc f810 	bl	80001e4 <__adddf3>
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <__ieee754_pow+0x3fc>)
 80041c6:	4299      	cmp	r1, r3
 80041c8:	ec45 4b19 	vmov	d9, r4, r5
 80041cc:	4606      	mov	r6, r0
 80041ce:	460f      	mov	r7, r1
 80041d0:	468b      	mov	fp, r1
 80041d2:	f340 82f1 	ble.w	80047b8 <__ieee754_pow+0x988>
 80041d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80041da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80041de:	4303      	orrs	r3, r0
 80041e0:	f000 81e4 	beq.w	80045ac <__ieee754_pow+0x77c>
 80041e4:	ec51 0b18 	vmov	r0, r1, d8
 80041e8:	2200      	movs	r2, #0
 80041ea:	2300      	movs	r3, #0
 80041ec:	f7fc fc22 	bl	8000a34 <__aeabi_dcmplt>
 80041f0:	3800      	subs	r0, #0
 80041f2:	bf18      	it	ne
 80041f4:	2001      	movne	r0, #1
 80041f6:	e72b      	b.n	8004050 <__ieee754_pow+0x220>
 80041f8:	60000000 	.word	0x60000000
 80041fc:	3ff71547 	.word	0x3ff71547
 8004200:	f85ddf44 	.word	0xf85ddf44
 8004204:	3e54ae0b 	.word	0x3e54ae0b
 8004208:	55555555 	.word	0x55555555
 800420c:	3fd55555 	.word	0x3fd55555
 8004210:	652b82fe 	.word	0x652b82fe
 8004214:	3ff71547 	.word	0x3ff71547
 8004218:	00000000 	.word	0x00000000
 800421c:	bff00000 	.word	0xbff00000
 8004220:	3ff00000 	.word	0x3ff00000
 8004224:	3fd00000 	.word	0x3fd00000
 8004228:	3fe00000 	.word	0x3fe00000
 800422c:	408fffff 	.word	0x408fffff
 8004230:	4bd5      	ldr	r3, [pc, #852]	; (8004588 <__ieee754_pow+0x758>)
 8004232:	402b      	ands	r3, r5
 8004234:	2200      	movs	r2, #0
 8004236:	b92b      	cbnz	r3, 8004244 <__ieee754_pow+0x414>
 8004238:	4bd4      	ldr	r3, [pc, #848]	; (800458c <__ieee754_pow+0x75c>)
 800423a:	f7fc f989 	bl	8000550 <__aeabi_dmul>
 800423e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004242:	460c      	mov	r4, r1
 8004244:	1523      	asrs	r3, r4, #20
 8004246:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800424a:	4413      	add	r3, r2
 800424c:	9305      	str	r3, [sp, #20]
 800424e:	4bd0      	ldr	r3, [pc, #832]	; (8004590 <__ieee754_pow+0x760>)
 8004250:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004254:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004258:	429c      	cmp	r4, r3
 800425a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800425e:	dd08      	ble.n	8004272 <__ieee754_pow+0x442>
 8004260:	4bcc      	ldr	r3, [pc, #816]	; (8004594 <__ieee754_pow+0x764>)
 8004262:	429c      	cmp	r4, r3
 8004264:	f340 8162 	ble.w	800452c <__ieee754_pow+0x6fc>
 8004268:	9b05      	ldr	r3, [sp, #20]
 800426a:	3301      	adds	r3, #1
 800426c:	9305      	str	r3, [sp, #20]
 800426e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004272:	2400      	movs	r4, #0
 8004274:	00e3      	lsls	r3, r4, #3
 8004276:	9307      	str	r3, [sp, #28]
 8004278:	4bc7      	ldr	r3, [pc, #796]	; (8004598 <__ieee754_pow+0x768>)
 800427a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800427e:	ed93 7b00 	vldr	d7, [r3]
 8004282:	4629      	mov	r1, r5
 8004284:	ec53 2b17 	vmov	r2, r3, d7
 8004288:	eeb0 9a47 	vmov.f32	s18, s14
 800428c:	eef0 9a67 	vmov.f32	s19, s15
 8004290:	4682      	mov	sl, r0
 8004292:	f7fb ffa5 	bl	80001e0 <__aeabi_dsub>
 8004296:	4652      	mov	r2, sl
 8004298:	4606      	mov	r6, r0
 800429a:	460f      	mov	r7, r1
 800429c:	462b      	mov	r3, r5
 800429e:	ec51 0b19 	vmov	r0, r1, d9
 80042a2:	f7fb ff9f 	bl	80001e4 <__adddf3>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	2000      	movs	r0, #0
 80042ac:	49bb      	ldr	r1, [pc, #748]	; (800459c <__ieee754_pow+0x76c>)
 80042ae:	f7fc fa79 	bl	80007a4 <__aeabi_ddiv>
 80042b2:	ec41 0b1a 	vmov	d10, r0, r1
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4630      	mov	r0, r6
 80042bc:	4639      	mov	r1, r7
 80042be:	f7fc f947 	bl	8000550 <__aeabi_dmul>
 80042c2:	2300      	movs	r3, #0
 80042c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042c8:	9302      	str	r3, [sp, #8]
 80042ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80042ce:	46ab      	mov	fp, r5
 80042d0:	106d      	asrs	r5, r5, #1
 80042d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80042d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80042da:	ec41 0b18 	vmov	d8, r0, r1
 80042de:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80042e2:	2200      	movs	r2, #0
 80042e4:	4640      	mov	r0, r8
 80042e6:	4649      	mov	r1, r9
 80042e8:	4614      	mov	r4, r2
 80042ea:	461d      	mov	r5, r3
 80042ec:	f7fc f930 	bl	8000550 <__aeabi_dmul>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4630      	mov	r0, r6
 80042f6:	4639      	mov	r1, r7
 80042f8:	f7fb ff72 	bl	80001e0 <__aeabi_dsub>
 80042fc:	ec53 2b19 	vmov	r2, r3, d9
 8004300:	4606      	mov	r6, r0
 8004302:	460f      	mov	r7, r1
 8004304:	4620      	mov	r0, r4
 8004306:	4629      	mov	r1, r5
 8004308:	f7fb ff6a 	bl	80001e0 <__aeabi_dsub>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4650      	mov	r0, sl
 8004312:	4659      	mov	r1, fp
 8004314:	f7fb ff64 	bl	80001e0 <__aeabi_dsub>
 8004318:	4642      	mov	r2, r8
 800431a:	464b      	mov	r3, r9
 800431c:	f7fc f918 	bl	8000550 <__aeabi_dmul>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4630      	mov	r0, r6
 8004326:	4639      	mov	r1, r7
 8004328:	f7fb ff5a 	bl	80001e0 <__aeabi_dsub>
 800432c:	ec53 2b1a 	vmov	r2, r3, d10
 8004330:	f7fc f90e 	bl	8000550 <__aeabi_dmul>
 8004334:	ec53 2b18 	vmov	r2, r3, d8
 8004338:	ec41 0b19 	vmov	d9, r0, r1
 800433c:	ec51 0b18 	vmov	r0, r1, d8
 8004340:	f7fc f906 	bl	8000550 <__aeabi_dmul>
 8004344:	a37c      	add	r3, pc, #496	; (adr r3, 8004538 <__ieee754_pow+0x708>)
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	4604      	mov	r4, r0
 800434c:	460d      	mov	r5, r1
 800434e:	f7fc f8ff 	bl	8000550 <__aeabi_dmul>
 8004352:	a37b      	add	r3, pc, #492	; (adr r3, 8004540 <__ieee754_pow+0x710>)
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f7fb ff44 	bl	80001e4 <__adddf3>
 800435c:	4622      	mov	r2, r4
 800435e:	462b      	mov	r3, r5
 8004360:	f7fc f8f6 	bl	8000550 <__aeabi_dmul>
 8004364:	a378      	add	r3, pc, #480	; (adr r3, 8004548 <__ieee754_pow+0x718>)
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f7fb ff3b 	bl	80001e4 <__adddf3>
 800436e:	4622      	mov	r2, r4
 8004370:	462b      	mov	r3, r5
 8004372:	f7fc f8ed 	bl	8000550 <__aeabi_dmul>
 8004376:	a376      	add	r3, pc, #472	; (adr r3, 8004550 <__ieee754_pow+0x720>)
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f7fb ff32 	bl	80001e4 <__adddf3>
 8004380:	4622      	mov	r2, r4
 8004382:	462b      	mov	r3, r5
 8004384:	f7fc f8e4 	bl	8000550 <__aeabi_dmul>
 8004388:	a373      	add	r3, pc, #460	; (adr r3, 8004558 <__ieee754_pow+0x728>)
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f7fb ff29 	bl	80001e4 <__adddf3>
 8004392:	4622      	mov	r2, r4
 8004394:	462b      	mov	r3, r5
 8004396:	f7fc f8db 	bl	8000550 <__aeabi_dmul>
 800439a:	a371      	add	r3, pc, #452	; (adr r3, 8004560 <__ieee754_pow+0x730>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fb ff20 	bl	80001e4 <__adddf3>
 80043a4:	4622      	mov	r2, r4
 80043a6:	4606      	mov	r6, r0
 80043a8:	460f      	mov	r7, r1
 80043aa:	462b      	mov	r3, r5
 80043ac:	4620      	mov	r0, r4
 80043ae:	4629      	mov	r1, r5
 80043b0:	f7fc f8ce 	bl	8000550 <__aeabi_dmul>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4630      	mov	r0, r6
 80043ba:	4639      	mov	r1, r7
 80043bc:	f7fc f8c8 	bl	8000550 <__aeabi_dmul>
 80043c0:	4642      	mov	r2, r8
 80043c2:	4604      	mov	r4, r0
 80043c4:	460d      	mov	r5, r1
 80043c6:	464b      	mov	r3, r9
 80043c8:	ec51 0b18 	vmov	r0, r1, d8
 80043cc:	f7fb ff0a 	bl	80001e4 <__adddf3>
 80043d0:	ec53 2b19 	vmov	r2, r3, d9
 80043d4:	f7fc f8bc 	bl	8000550 <__aeabi_dmul>
 80043d8:	4622      	mov	r2, r4
 80043da:	462b      	mov	r3, r5
 80043dc:	f7fb ff02 	bl	80001e4 <__adddf3>
 80043e0:	4642      	mov	r2, r8
 80043e2:	4682      	mov	sl, r0
 80043e4:	468b      	mov	fp, r1
 80043e6:	464b      	mov	r3, r9
 80043e8:	4640      	mov	r0, r8
 80043ea:	4649      	mov	r1, r9
 80043ec:	f7fc f8b0 	bl	8000550 <__aeabi_dmul>
 80043f0:	4b6b      	ldr	r3, [pc, #428]	; (80045a0 <__ieee754_pow+0x770>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	4606      	mov	r6, r0
 80043f6:	460f      	mov	r7, r1
 80043f8:	f7fb fef4 	bl	80001e4 <__adddf3>
 80043fc:	4652      	mov	r2, sl
 80043fe:	465b      	mov	r3, fp
 8004400:	f7fb fef0 	bl	80001e4 <__adddf3>
 8004404:	2000      	movs	r0, #0
 8004406:	4604      	mov	r4, r0
 8004408:	460d      	mov	r5, r1
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4640      	mov	r0, r8
 8004410:	4649      	mov	r1, r9
 8004412:	f7fc f89d 	bl	8000550 <__aeabi_dmul>
 8004416:	4b62      	ldr	r3, [pc, #392]	; (80045a0 <__ieee754_pow+0x770>)
 8004418:	4680      	mov	r8, r0
 800441a:	4689      	mov	r9, r1
 800441c:	2200      	movs	r2, #0
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	f7fb fedd 	bl	80001e0 <__aeabi_dsub>
 8004426:	4632      	mov	r2, r6
 8004428:	463b      	mov	r3, r7
 800442a:	f7fb fed9 	bl	80001e0 <__aeabi_dsub>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4650      	mov	r0, sl
 8004434:	4659      	mov	r1, fp
 8004436:	f7fb fed3 	bl	80001e0 <__aeabi_dsub>
 800443a:	ec53 2b18 	vmov	r2, r3, d8
 800443e:	f7fc f887 	bl	8000550 <__aeabi_dmul>
 8004442:	4622      	mov	r2, r4
 8004444:	4606      	mov	r6, r0
 8004446:	460f      	mov	r7, r1
 8004448:	462b      	mov	r3, r5
 800444a:	ec51 0b19 	vmov	r0, r1, d9
 800444e:	f7fc f87f 	bl	8000550 <__aeabi_dmul>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4630      	mov	r0, r6
 8004458:	4639      	mov	r1, r7
 800445a:	f7fb fec3 	bl	80001e4 <__adddf3>
 800445e:	4606      	mov	r6, r0
 8004460:	460f      	mov	r7, r1
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4640      	mov	r0, r8
 8004468:	4649      	mov	r1, r9
 800446a:	f7fb febb 	bl	80001e4 <__adddf3>
 800446e:	a33e      	add	r3, pc, #248	; (adr r3, 8004568 <__ieee754_pow+0x738>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	2000      	movs	r0, #0
 8004476:	4604      	mov	r4, r0
 8004478:	460d      	mov	r5, r1
 800447a:	f7fc f869 	bl	8000550 <__aeabi_dmul>
 800447e:	4642      	mov	r2, r8
 8004480:	ec41 0b18 	vmov	d8, r0, r1
 8004484:	464b      	mov	r3, r9
 8004486:	4620      	mov	r0, r4
 8004488:	4629      	mov	r1, r5
 800448a:	f7fb fea9 	bl	80001e0 <__aeabi_dsub>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4630      	mov	r0, r6
 8004494:	4639      	mov	r1, r7
 8004496:	f7fb fea3 	bl	80001e0 <__aeabi_dsub>
 800449a:	a335      	add	r3, pc, #212	; (adr r3, 8004570 <__ieee754_pow+0x740>)
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f7fc f856 	bl	8000550 <__aeabi_dmul>
 80044a4:	a334      	add	r3, pc, #208	; (adr r3, 8004578 <__ieee754_pow+0x748>)
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	4606      	mov	r6, r0
 80044ac:	460f      	mov	r7, r1
 80044ae:	4620      	mov	r0, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	f7fc f84d 	bl	8000550 <__aeabi_dmul>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4630      	mov	r0, r6
 80044bc:	4639      	mov	r1, r7
 80044be:	f7fb fe91 	bl	80001e4 <__adddf3>
 80044c2:	9a07      	ldr	r2, [sp, #28]
 80044c4:	4b37      	ldr	r3, [pc, #220]	; (80045a4 <__ieee754_pow+0x774>)
 80044c6:	4413      	add	r3, r2
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f7fb fe8a 	bl	80001e4 <__adddf3>
 80044d0:	4682      	mov	sl, r0
 80044d2:	9805      	ldr	r0, [sp, #20]
 80044d4:	468b      	mov	fp, r1
 80044d6:	f7fb ffd1 	bl	800047c <__aeabi_i2d>
 80044da:	9a07      	ldr	r2, [sp, #28]
 80044dc:	4b32      	ldr	r3, [pc, #200]	; (80045a8 <__ieee754_pow+0x778>)
 80044de:	4413      	add	r3, r2
 80044e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044e4:	4606      	mov	r6, r0
 80044e6:	460f      	mov	r7, r1
 80044e8:	4652      	mov	r2, sl
 80044ea:	465b      	mov	r3, fp
 80044ec:	ec51 0b18 	vmov	r0, r1, d8
 80044f0:	f7fb fe78 	bl	80001e4 <__adddf3>
 80044f4:	4642      	mov	r2, r8
 80044f6:	464b      	mov	r3, r9
 80044f8:	f7fb fe74 	bl	80001e4 <__adddf3>
 80044fc:	4632      	mov	r2, r6
 80044fe:	463b      	mov	r3, r7
 8004500:	f7fb fe70 	bl	80001e4 <__adddf3>
 8004504:	2000      	movs	r0, #0
 8004506:	4632      	mov	r2, r6
 8004508:	463b      	mov	r3, r7
 800450a:	4604      	mov	r4, r0
 800450c:	460d      	mov	r5, r1
 800450e:	f7fb fe67 	bl	80001e0 <__aeabi_dsub>
 8004512:	4642      	mov	r2, r8
 8004514:	464b      	mov	r3, r9
 8004516:	f7fb fe63 	bl	80001e0 <__aeabi_dsub>
 800451a:	ec53 2b18 	vmov	r2, r3, d8
 800451e:	f7fb fe5f 	bl	80001e0 <__aeabi_dsub>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4650      	mov	r0, sl
 8004528:	4659      	mov	r1, fp
 800452a:	e610      	b.n	800414e <__ieee754_pow+0x31e>
 800452c:	2401      	movs	r4, #1
 800452e:	e6a1      	b.n	8004274 <__ieee754_pow+0x444>
 8004530:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004580 <__ieee754_pow+0x750>
 8004534:	e617      	b.n	8004166 <__ieee754_pow+0x336>
 8004536:	bf00      	nop
 8004538:	4a454eef 	.word	0x4a454eef
 800453c:	3fca7e28 	.word	0x3fca7e28
 8004540:	93c9db65 	.word	0x93c9db65
 8004544:	3fcd864a 	.word	0x3fcd864a
 8004548:	a91d4101 	.word	0xa91d4101
 800454c:	3fd17460 	.word	0x3fd17460
 8004550:	518f264d 	.word	0x518f264d
 8004554:	3fd55555 	.word	0x3fd55555
 8004558:	db6fabff 	.word	0xdb6fabff
 800455c:	3fdb6db6 	.word	0x3fdb6db6
 8004560:	33333303 	.word	0x33333303
 8004564:	3fe33333 	.word	0x3fe33333
 8004568:	e0000000 	.word	0xe0000000
 800456c:	3feec709 	.word	0x3feec709
 8004570:	dc3a03fd 	.word	0xdc3a03fd
 8004574:	3feec709 	.word	0x3feec709
 8004578:	145b01f5 	.word	0x145b01f5
 800457c:	be3e2fe0 	.word	0xbe3e2fe0
 8004580:	00000000 	.word	0x00000000
 8004584:	3ff00000 	.word	0x3ff00000
 8004588:	7ff00000 	.word	0x7ff00000
 800458c:	43400000 	.word	0x43400000
 8004590:	0003988e 	.word	0x0003988e
 8004594:	000bb679 	.word	0x000bb679
 8004598:	08004bb8 	.word	0x08004bb8
 800459c:	3ff00000 	.word	0x3ff00000
 80045a0:	40080000 	.word	0x40080000
 80045a4:	08004bd8 	.word	0x08004bd8
 80045a8:	08004bc8 	.word	0x08004bc8
 80045ac:	a3b5      	add	r3, pc, #724	; (adr r3, 8004884 <__ieee754_pow+0xa54>)
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	4640      	mov	r0, r8
 80045b4:	4649      	mov	r1, r9
 80045b6:	f7fb fe15 	bl	80001e4 <__adddf3>
 80045ba:	4622      	mov	r2, r4
 80045bc:	ec41 0b1a 	vmov	d10, r0, r1
 80045c0:	462b      	mov	r3, r5
 80045c2:	4630      	mov	r0, r6
 80045c4:	4639      	mov	r1, r7
 80045c6:	f7fb fe0b 	bl	80001e0 <__aeabi_dsub>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	ec51 0b1a 	vmov	r0, r1, d10
 80045d2:	f7fc fa4d 	bl	8000a70 <__aeabi_dcmpgt>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	f47f ae04 	bne.w	80041e4 <__ieee754_pow+0x3b4>
 80045dc:	4aa4      	ldr	r2, [pc, #656]	; (8004870 <__ieee754_pow+0xa40>)
 80045de:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80045e2:	4293      	cmp	r3, r2
 80045e4:	f340 8108 	ble.w	80047f8 <__ieee754_pow+0x9c8>
 80045e8:	151b      	asrs	r3, r3, #20
 80045ea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80045ee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80045f2:	fa4a f303 	asr.w	r3, sl, r3
 80045f6:	445b      	add	r3, fp
 80045f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80045fc:	4e9d      	ldr	r6, [pc, #628]	; (8004874 <__ieee754_pow+0xa44>)
 80045fe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004602:	4116      	asrs	r6, r2
 8004604:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004608:	2000      	movs	r0, #0
 800460a:	ea23 0106 	bic.w	r1, r3, r6
 800460e:	f1c2 0214 	rsb	r2, r2, #20
 8004612:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004616:	fa4a fa02 	asr.w	sl, sl, r2
 800461a:	f1bb 0f00 	cmp.w	fp, #0
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4620      	mov	r0, r4
 8004624:	4629      	mov	r1, r5
 8004626:	bfb8      	it	lt
 8004628:	f1ca 0a00 	rsblt	sl, sl, #0
 800462c:	f7fb fdd8 	bl	80001e0 <__aeabi_dsub>
 8004630:	ec41 0b19 	vmov	d9, r0, r1
 8004634:	4642      	mov	r2, r8
 8004636:	464b      	mov	r3, r9
 8004638:	ec51 0b19 	vmov	r0, r1, d9
 800463c:	f7fb fdd2 	bl	80001e4 <__adddf3>
 8004640:	a37b      	add	r3, pc, #492	; (adr r3, 8004830 <__ieee754_pow+0xa00>)
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	2000      	movs	r0, #0
 8004648:	4604      	mov	r4, r0
 800464a:	460d      	mov	r5, r1
 800464c:	f7fb ff80 	bl	8000550 <__aeabi_dmul>
 8004650:	ec53 2b19 	vmov	r2, r3, d9
 8004654:	4606      	mov	r6, r0
 8004656:	460f      	mov	r7, r1
 8004658:	4620      	mov	r0, r4
 800465a:	4629      	mov	r1, r5
 800465c:	f7fb fdc0 	bl	80001e0 <__aeabi_dsub>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4640      	mov	r0, r8
 8004666:	4649      	mov	r1, r9
 8004668:	f7fb fdba 	bl	80001e0 <__aeabi_dsub>
 800466c:	a372      	add	r3, pc, #456	; (adr r3, 8004838 <__ieee754_pow+0xa08>)
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f7fb ff6d 	bl	8000550 <__aeabi_dmul>
 8004676:	a372      	add	r3, pc, #456	; (adr r3, 8004840 <__ieee754_pow+0xa10>)
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	4680      	mov	r8, r0
 800467e:	4689      	mov	r9, r1
 8004680:	4620      	mov	r0, r4
 8004682:	4629      	mov	r1, r5
 8004684:	f7fb ff64 	bl	8000550 <__aeabi_dmul>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4640      	mov	r0, r8
 800468e:	4649      	mov	r1, r9
 8004690:	f7fb fda8 	bl	80001e4 <__adddf3>
 8004694:	4604      	mov	r4, r0
 8004696:	460d      	mov	r5, r1
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4630      	mov	r0, r6
 800469e:	4639      	mov	r1, r7
 80046a0:	f7fb fda0 	bl	80001e4 <__adddf3>
 80046a4:	4632      	mov	r2, r6
 80046a6:	463b      	mov	r3, r7
 80046a8:	4680      	mov	r8, r0
 80046aa:	4689      	mov	r9, r1
 80046ac:	f7fb fd98 	bl	80001e0 <__aeabi_dsub>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4620      	mov	r0, r4
 80046b6:	4629      	mov	r1, r5
 80046b8:	f7fb fd92 	bl	80001e0 <__aeabi_dsub>
 80046bc:	4642      	mov	r2, r8
 80046be:	4606      	mov	r6, r0
 80046c0:	460f      	mov	r7, r1
 80046c2:	464b      	mov	r3, r9
 80046c4:	4640      	mov	r0, r8
 80046c6:	4649      	mov	r1, r9
 80046c8:	f7fb ff42 	bl	8000550 <__aeabi_dmul>
 80046cc:	a35e      	add	r3, pc, #376	; (adr r3, 8004848 <__ieee754_pow+0xa18>)
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	4604      	mov	r4, r0
 80046d4:	460d      	mov	r5, r1
 80046d6:	f7fb ff3b 	bl	8000550 <__aeabi_dmul>
 80046da:	a35d      	add	r3, pc, #372	; (adr r3, 8004850 <__ieee754_pow+0xa20>)
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f7fb fd7e 	bl	80001e0 <__aeabi_dsub>
 80046e4:	4622      	mov	r2, r4
 80046e6:	462b      	mov	r3, r5
 80046e8:	f7fb ff32 	bl	8000550 <__aeabi_dmul>
 80046ec:	a35a      	add	r3, pc, #360	; (adr r3, 8004858 <__ieee754_pow+0xa28>)
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	f7fb fd77 	bl	80001e4 <__adddf3>
 80046f6:	4622      	mov	r2, r4
 80046f8:	462b      	mov	r3, r5
 80046fa:	f7fb ff29 	bl	8000550 <__aeabi_dmul>
 80046fe:	a358      	add	r3, pc, #352	; (adr r3, 8004860 <__ieee754_pow+0xa30>)
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f7fb fd6c 	bl	80001e0 <__aeabi_dsub>
 8004708:	4622      	mov	r2, r4
 800470a:	462b      	mov	r3, r5
 800470c:	f7fb ff20 	bl	8000550 <__aeabi_dmul>
 8004710:	a355      	add	r3, pc, #340	; (adr r3, 8004868 <__ieee754_pow+0xa38>)
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f7fb fd65 	bl	80001e4 <__adddf3>
 800471a:	4622      	mov	r2, r4
 800471c:	462b      	mov	r3, r5
 800471e:	f7fb ff17 	bl	8000550 <__aeabi_dmul>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4640      	mov	r0, r8
 8004728:	4649      	mov	r1, r9
 800472a:	f7fb fd59 	bl	80001e0 <__aeabi_dsub>
 800472e:	4604      	mov	r4, r0
 8004730:	460d      	mov	r5, r1
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4640      	mov	r0, r8
 8004738:	4649      	mov	r1, r9
 800473a:	f7fb ff09 	bl	8000550 <__aeabi_dmul>
 800473e:	2200      	movs	r2, #0
 8004740:	ec41 0b19 	vmov	d9, r0, r1
 8004744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004748:	4620      	mov	r0, r4
 800474a:	4629      	mov	r1, r5
 800474c:	f7fb fd48 	bl	80001e0 <__aeabi_dsub>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	ec51 0b19 	vmov	r0, r1, d9
 8004758:	f7fc f824 	bl	80007a4 <__aeabi_ddiv>
 800475c:	4632      	mov	r2, r6
 800475e:	4604      	mov	r4, r0
 8004760:	460d      	mov	r5, r1
 8004762:	463b      	mov	r3, r7
 8004764:	4640      	mov	r0, r8
 8004766:	4649      	mov	r1, r9
 8004768:	f7fb fef2 	bl	8000550 <__aeabi_dmul>
 800476c:	4632      	mov	r2, r6
 800476e:	463b      	mov	r3, r7
 8004770:	f7fb fd38 	bl	80001e4 <__adddf3>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4620      	mov	r0, r4
 800477a:	4629      	mov	r1, r5
 800477c:	f7fb fd30 	bl	80001e0 <__aeabi_dsub>
 8004780:	4642      	mov	r2, r8
 8004782:	464b      	mov	r3, r9
 8004784:	f7fb fd2c 	bl	80001e0 <__aeabi_dsub>
 8004788:	460b      	mov	r3, r1
 800478a:	4602      	mov	r2, r0
 800478c:	493a      	ldr	r1, [pc, #232]	; (8004878 <__ieee754_pow+0xa48>)
 800478e:	2000      	movs	r0, #0
 8004790:	f7fb fd26 	bl	80001e0 <__aeabi_dsub>
 8004794:	ec41 0b10 	vmov	d0, r0, r1
 8004798:	ee10 3a90 	vmov	r3, s1
 800479c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80047a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a4:	da2b      	bge.n	80047fe <__ieee754_pow+0x9ce>
 80047a6:	4650      	mov	r0, sl
 80047a8:	f000 f966 	bl	8004a78 <scalbn>
 80047ac:	ec51 0b10 	vmov	r0, r1, d0
 80047b0:	ec53 2b18 	vmov	r2, r3, d8
 80047b4:	f7ff bbed 	b.w	8003f92 <__ieee754_pow+0x162>
 80047b8:	4b30      	ldr	r3, [pc, #192]	; (800487c <__ieee754_pow+0xa4c>)
 80047ba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80047be:	429e      	cmp	r6, r3
 80047c0:	f77f af0c 	ble.w	80045dc <__ieee754_pow+0x7ac>
 80047c4:	4b2e      	ldr	r3, [pc, #184]	; (8004880 <__ieee754_pow+0xa50>)
 80047c6:	440b      	add	r3, r1
 80047c8:	4303      	orrs	r3, r0
 80047ca:	d009      	beq.n	80047e0 <__ieee754_pow+0x9b0>
 80047cc:	ec51 0b18 	vmov	r0, r1, d8
 80047d0:	2200      	movs	r2, #0
 80047d2:	2300      	movs	r3, #0
 80047d4:	f7fc f92e 	bl	8000a34 <__aeabi_dcmplt>
 80047d8:	3800      	subs	r0, #0
 80047da:	bf18      	it	ne
 80047dc:	2001      	movne	r0, #1
 80047de:	e447      	b.n	8004070 <__ieee754_pow+0x240>
 80047e0:	4622      	mov	r2, r4
 80047e2:	462b      	mov	r3, r5
 80047e4:	f7fb fcfc 	bl	80001e0 <__aeabi_dsub>
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	f7fc f936 	bl	8000a5c <__aeabi_dcmpge>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	f43f aef3 	beq.w	80045dc <__ieee754_pow+0x7ac>
 80047f6:	e7e9      	b.n	80047cc <__ieee754_pow+0x99c>
 80047f8:	f04f 0a00 	mov.w	sl, #0
 80047fc:	e71a      	b.n	8004634 <__ieee754_pow+0x804>
 80047fe:	ec51 0b10 	vmov	r0, r1, d0
 8004802:	4619      	mov	r1, r3
 8004804:	e7d4      	b.n	80047b0 <__ieee754_pow+0x980>
 8004806:	491c      	ldr	r1, [pc, #112]	; (8004878 <__ieee754_pow+0xa48>)
 8004808:	2000      	movs	r0, #0
 800480a:	f7ff bb30 	b.w	8003e6e <__ieee754_pow+0x3e>
 800480e:	2000      	movs	r0, #0
 8004810:	2100      	movs	r1, #0
 8004812:	f7ff bb2c 	b.w	8003e6e <__ieee754_pow+0x3e>
 8004816:	4630      	mov	r0, r6
 8004818:	4639      	mov	r1, r7
 800481a:	f7ff bb28 	b.w	8003e6e <__ieee754_pow+0x3e>
 800481e:	9204      	str	r2, [sp, #16]
 8004820:	f7ff bb7a 	b.w	8003f18 <__ieee754_pow+0xe8>
 8004824:	2300      	movs	r3, #0
 8004826:	f7ff bb64 	b.w	8003ef2 <__ieee754_pow+0xc2>
 800482a:	bf00      	nop
 800482c:	f3af 8000 	nop.w
 8004830:	00000000 	.word	0x00000000
 8004834:	3fe62e43 	.word	0x3fe62e43
 8004838:	fefa39ef 	.word	0xfefa39ef
 800483c:	3fe62e42 	.word	0x3fe62e42
 8004840:	0ca86c39 	.word	0x0ca86c39
 8004844:	be205c61 	.word	0xbe205c61
 8004848:	72bea4d0 	.word	0x72bea4d0
 800484c:	3e663769 	.word	0x3e663769
 8004850:	c5d26bf1 	.word	0xc5d26bf1
 8004854:	3ebbbd41 	.word	0x3ebbbd41
 8004858:	af25de2c 	.word	0xaf25de2c
 800485c:	3f11566a 	.word	0x3f11566a
 8004860:	16bebd93 	.word	0x16bebd93
 8004864:	3f66c16c 	.word	0x3f66c16c
 8004868:	5555553e 	.word	0x5555553e
 800486c:	3fc55555 	.word	0x3fc55555
 8004870:	3fe00000 	.word	0x3fe00000
 8004874:	000fffff 	.word	0x000fffff
 8004878:	3ff00000 	.word	0x3ff00000
 800487c:	4090cbff 	.word	0x4090cbff
 8004880:	3f6f3400 	.word	0x3f6f3400
 8004884:	652b82fe 	.word	0x652b82fe
 8004888:	3c971547 	.word	0x3c971547

0800488c <__ieee754_sqrt>:
 800488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004890:	ec55 4b10 	vmov	r4, r5, d0
 8004894:	4e55      	ldr	r6, [pc, #340]	; (80049ec <__ieee754_sqrt+0x160>)
 8004896:	43ae      	bics	r6, r5
 8004898:	ee10 0a10 	vmov	r0, s0
 800489c:	ee10 3a10 	vmov	r3, s0
 80048a0:	462a      	mov	r2, r5
 80048a2:	4629      	mov	r1, r5
 80048a4:	d110      	bne.n	80048c8 <__ieee754_sqrt+0x3c>
 80048a6:	ee10 2a10 	vmov	r2, s0
 80048aa:	462b      	mov	r3, r5
 80048ac:	f7fb fe50 	bl	8000550 <__aeabi_dmul>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4620      	mov	r0, r4
 80048b6:	4629      	mov	r1, r5
 80048b8:	f7fb fc94 	bl	80001e4 <__adddf3>
 80048bc:	4604      	mov	r4, r0
 80048be:	460d      	mov	r5, r1
 80048c0:	ec45 4b10 	vmov	d0, r4, r5
 80048c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c8:	2d00      	cmp	r5, #0
 80048ca:	dc10      	bgt.n	80048ee <__ieee754_sqrt+0x62>
 80048cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80048d0:	4330      	orrs	r0, r6
 80048d2:	d0f5      	beq.n	80048c0 <__ieee754_sqrt+0x34>
 80048d4:	b15d      	cbz	r5, 80048ee <__ieee754_sqrt+0x62>
 80048d6:	ee10 2a10 	vmov	r2, s0
 80048da:	462b      	mov	r3, r5
 80048dc:	ee10 0a10 	vmov	r0, s0
 80048e0:	f7fb fc7e 	bl	80001e0 <__aeabi_dsub>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	f7fb ff5c 	bl	80007a4 <__aeabi_ddiv>
 80048ec:	e7e6      	b.n	80048bc <__ieee754_sqrt+0x30>
 80048ee:	1512      	asrs	r2, r2, #20
 80048f0:	d074      	beq.n	80049dc <__ieee754_sqrt+0x150>
 80048f2:	07d4      	lsls	r4, r2, #31
 80048f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80048f8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80048fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004900:	bf5e      	ittt	pl
 8004902:	0fda      	lsrpl	r2, r3, #31
 8004904:	005b      	lslpl	r3, r3, #1
 8004906:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800490a:	2400      	movs	r4, #0
 800490c:	0fda      	lsrs	r2, r3, #31
 800490e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004912:	107f      	asrs	r7, r7, #1
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	2516      	movs	r5, #22
 8004918:	4620      	mov	r0, r4
 800491a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800491e:	1886      	adds	r6, r0, r2
 8004920:	428e      	cmp	r6, r1
 8004922:	bfde      	ittt	le
 8004924:	1b89      	suble	r1, r1, r6
 8004926:	18b0      	addle	r0, r6, r2
 8004928:	18a4      	addle	r4, r4, r2
 800492a:	0049      	lsls	r1, r1, #1
 800492c:	3d01      	subs	r5, #1
 800492e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004932:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004936:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800493a:	d1f0      	bne.n	800491e <__ieee754_sqrt+0x92>
 800493c:	462a      	mov	r2, r5
 800493e:	f04f 0e20 	mov.w	lr, #32
 8004942:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004946:	4281      	cmp	r1, r0
 8004948:	eb06 0c05 	add.w	ip, r6, r5
 800494c:	dc02      	bgt.n	8004954 <__ieee754_sqrt+0xc8>
 800494e:	d113      	bne.n	8004978 <__ieee754_sqrt+0xec>
 8004950:	459c      	cmp	ip, r3
 8004952:	d811      	bhi.n	8004978 <__ieee754_sqrt+0xec>
 8004954:	f1bc 0f00 	cmp.w	ip, #0
 8004958:	eb0c 0506 	add.w	r5, ip, r6
 800495c:	da43      	bge.n	80049e6 <__ieee754_sqrt+0x15a>
 800495e:	2d00      	cmp	r5, #0
 8004960:	db41      	blt.n	80049e6 <__ieee754_sqrt+0x15a>
 8004962:	f100 0801 	add.w	r8, r0, #1
 8004966:	1a09      	subs	r1, r1, r0
 8004968:	459c      	cmp	ip, r3
 800496a:	bf88      	it	hi
 800496c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004970:	eba3 030c 	sub.w	r3, r3, ip
 8004974:	4432      	add	r2, r6
 8004976:	4640      	mov	r0, r8
 8004978:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800497c:	f1be 0e01 	subs.w	lr, lr, #1
 8004980:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004984:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004988:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800498c:	d1db      	bne.n	8004946 <__ieee754_sqrt+0xba>
 800498e:	430b      	orrs	r3, r1
 8004990:	d006      	beq.n	80049a0 <__ieee754_sqrt+0x114>
 8004992:	1c50      	adds	r0, r2, #1
 8004994:	bf13      	iteet	ne
 8004996:	3201      	addne	r2, #1
 8004998:	3401      	addeq	r4, #1
 800499a:	4672      	moveq	r2, lr
 800499c:	f022 0201 	bicne.w	r2, r2, #1
 80049a0:	1063      	asrs	r3, r4, #1
 80049a2:	0852      	lsrs	r2, r2, #1
 80049a4:	07e1      	lsls	r1, r4, #31
 80049a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80049aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80049ae:	bf48      	it	mi
 80049b0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80049b4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80049b8:	4614      	mov	r4, r2
 80049ba:	e781      	b.n	80048c0 <__ieee754_sqrt+0x34>
 80049bc:	0ad9      	lsrs	r1, r3, #11
 80049be:	3815      	subs	r0, #21
 80049c0:	055b      	lsls	r3, r3, #21
 80049c2:	2900      	cmp	r1, #0
 80049c4:	d0fa      	beq.n	80049bc <__ieee754_sqrt+0x130>
 80049c6:	02cd      	lsls	r5, r1, #11
 80049c8:	d50a      	bpl.n	80049e0 <__ieee754_sqrt+0x154>
 80049ca:	f1c2 0420 	rsb	r4, r2, #32
 80049ce:	fa23 f404 	lsr.w	r4, r3, r4
 80049d2:	1e55      	subs	r5, r2, #1
 80049d4:	4093      	lsls	r3, r2
 80049d6:	4321      	orrs	r1, r4
 80049d8:	1b42      	subs	r2, r0, r5
 80049da:	e78a      	b.n	80048f2 <__ieee754_sqrt+0x66>
 80049dc:	4610      	mov	r0, r2
 80049de:	e7f0      	b.n	80049c2 <__ieee754_sqrt+0x136>
 80049e0:	0049      	lsls	r1, r1, #1
 80049e2:	3201      	adds	r2, #1
 80049e4:	e7ef      	b.n	80049c6 <__ieee754_sqrt+0x13a>
 80049e6:	4680      	mov	r8, r0
 80049e8:	e7bd      	b.n	8004966 <__ieee754_sqrt+0xda>
 80049ea:	bf00      	nop
 80049ec:	7ff00000 	.word	0x7ff00000

080049f0 <with_errno>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	4604      	mov	r4, r0
 80049f4:	460d      	mov	r5, r1
 80049f6:	4616      	mov	r6, r2
 80049f8:	f7ff f94a 	bl	8003c90 <__errno>
 80049fc:	4629      	mov	r1, r5
 80049fe:	6006      	str	r6, [r0, #0]
 8004a00:	4620      	mov	r0, r4
 8004a02:	bd70      	pop	{r4, r5, r6, pc}

08004a04 <xflow>:
 8004a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a06:	4614      	mov	r4, r2
 8004a08:	461d      	mov	r5, r3
 8004a0a:	b108      	cbz	r0, 8004a10 <xflow+0xc>
 8004a0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a10:	e9cd 2300 	strd	r2, r3, [sp]
 8004a14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a18:	4620      	mov	r0, r4
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	f7fb fd98 	bl	8000550 <__aeabi_dmul>
 8004a20:	2222      	movs	r2, #34	; 0x22
 8004a22:	b003      	add	sp, #12
 8004a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a28:	f7ff bfe2 	b.w	80049f0 <with_errno>

08004a2c <__math_uflow>:
 8004a2c:	b508      	push	{r3, lr}
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a34:	f7ff ffe6 	bl	8004a04 <xflow>
 8004a38:	ec41 0b10 	vmov	d0, r0, r1
 8004a3c:	bd08      	pop	{r3, pc}

08004a3e <__math_oflow>:
 8004a3e:	b508      	push	{r3, lr}
 8004a40:	2200      	movs	r2, #0
 8004a42:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004a46:	f7ff ffdd 	bl	8004a04 <xflow>
 8004a4a:	ec41 0b10 	vmov	d0, r0, r1
 8004a4e:	bd08      	pop	{r3, pc}

08004a50 <fabs>:
 8004a50:	ec51 0b10 	vmov	r0, r1, d0
 8004a54:	ee10 2a10 	vmov	r2, s0
 8004a58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004a5c:	ec43 2b10 	vmov	d0, r2, r3
 8004a60:	4770      	bx	lr

08004a62 <finite>:
 8004a62:	b082      	sub	sp, #8
 8004a64:	ed8d 0b00 	vstr	d0, [sp]
 8004a68:	9801      	ldr	r0, [sp, #4]
 8004a6a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004a6e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004a72:	0fc0      	lsrs	r0, r0, #31
 8004a74:	b002      	add	sp, #8
 8004a76:	4770      	bx	lr

08004a78 <scalbn>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	ec55 4b10 	vmov	r4, r5, d0
 8004a7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004a82:	4606      	mov	r6, r0
 8004a84:	462b      	mov	r3, r5
 8004a86:	b99a      	cbnz	r2, 8004ab0 <scalbn+0x38>
 8004a88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004a8c:	4323      	orrs	r3, r4
 8004a8e:	d036      	beq.n	8004afe <scalbn+0x86>
 8004a90:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <scalbn+0x100>)
 8004a92:	4629      	mov	r1, r5
 8004a94:	ee10 0a10 	vmov	r0, s0
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f7fb fd59 	bl	8000550 <__aeabi_dmul>
 8004a9e:	4b37      	ldr	r3, [pc, #220]	; (8004b7c <scalbn+0x104>)
 8004aa0:	429e      	cmp	r6, r3
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	460d      	mov	r5, r1
 8004aa6:	da10      	bge.n	8004aca <scalbn+0x52>
 8004aa8:	a32b      	add	r3, pc, #172	; (adr r3, 8004b58 <scalbn+0xe0>)
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	e03a      	b.n	8004b26 <scalbn+0xae>
 8004ab0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004ab4:	428a      	cmp	r2, r1
 8004ab6:	d10c      	bne.n	8004ad2 <scalbn+0x5a>
 8004ab8:	ee10 2a10 	vmov	r2, s0
 8004abc:	4620      	mov	r0, r4
 8004abe:	4629      	mov	r1, r5
 8004ac0:	f7fb fb90 	bl	80001e4 <__adddf3>
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	460d      	mov	r5, r1
 8004ac8:	e019      	b.n	8004afe <scalbn+0x86>
 8004aca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004ace:	460b      	mov	r3, r1
 8004ad0:	3a36      	subs	r2, #54	; 0x36
 8004ad2:	4432      	add	r2, r6
 8004ad4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004ad8:	428a      	cmp	r2, r1
 8004ada:	dd08      	ble.n	8004aee <scalbn+0x76>
 8004adc:	2d00      	cmp	r5, #0
 8004ade:	a120      	add	r1, pc, #128	; (adr r1, 8004b60 <scalbn+0xe8>)
 8004ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ae4:	da1c      	bge.n	8004b20 <scalbn+0xa8>
 8004ae6:	a120      	add	r1, pc, #128	; (adr r1, 8004b68 <scalbn+0xf0>)
 8004ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aec:	e018      	b.n	8004b20 <scalbn+0xa8>
 8004aee:	2a00      	cmp	r2, #0
 8004af0:	dd08      	ble.n	8004b04 <scalbn+0x8c>
 8004af2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004af6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004afa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004afe:	ec45 4b10 	vmov	d0, r4, r5
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
 8004b04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004b08:	da19      	bge.n	8004b3e <scalbn+0xc6>
 8004b0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004b0e:	429e      	cmp	r6, r3
 8004b10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004b14:	dd0a      	ble.n	8004b2c <scalbn+0xb4>
 8004b16:	a112      	add	r1, pc, #72	; (adr r1, 8004b60 <scalbn+0xe8>)
 8004b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e2      	bne.n	8004ae6 <scalbn+0x6e>
 8004b20:	a30f      	add	r3, pc, #60	; (adr r3, 8004b60 <scalbn+0xe8>)
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f7fb fd13 	bl	8000550 <__aeabi_dmul>
 8004b2a:	e7cb      	b.n	8004ac4 <scalbn+0x4c>
 8004b2c:	a10a      	add	r1, pc, #40	; (adr r1, 8004b58 <scalbn+0xe0>)
 8004b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0b8      	beq.n	8004aa8 <scalbn+0x30>
 8004b36:	a10e      	add	r1, pc, #56	; (adr r1, 8004b70 <scalbn+0xf8>)
 8004b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b3c:	e7b4      	b.n	8004aa8 <scalbn+0x30>
 8004b3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004b42:	3236      	adds	r2, #54	; 0x36
 8004b44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <scalbn+0x108>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	e7e8      	b.n	8004b26 <scalbn+0xae>
 8004b54:	f3af 8000 	nop.w
 8004b58:	c2f8f359 	.word	0xc2f8f359
 8004b5c:	01a56e1f 	.word	0x01a56e1f
 8004b60:	8800759c 	.word	0x8800759c
 8004b64:	7e37e43c 	.word	0x7e37e43c
 8004b68:	8800759c 	.word	0x8800759c
 8004b6c:	fe37e43c 	.word	0xfe37e43c
 8004b70:	c2f8f359 	.word	0xc2f8f359
 8004b74:	81a56e1f 	.word	0x81a56e1f
 8004b78:	43500000 	.word	0x43500000
 8004b7c:	ffff3cb0 	.word	0xffff3cb0
 8004b80:	3c900000 	.word	0x3c900000

08004b84 <_init>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	bf00      	nop
 8004b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8a:	bc08      	pop	{r3}
 8004b8c:	469e      	mov	lr, r3
 8004b8e:	4770      	bx	lr

08004b90 <_fini>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	bf00      	nop
 8004b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b96:	bc08      	pop	{r3}
 8004b98:	469e      	mov	lr, r3
 8004b9a:	4770      	bx	lr
