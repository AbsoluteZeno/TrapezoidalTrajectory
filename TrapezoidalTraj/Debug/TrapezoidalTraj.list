
TrapezoidalTraj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e84  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08008020  08008020  00018020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008070  08008070  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008070  08008070  00018070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008078  08008078  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008078  08008078  00018078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800807c  0800807c  0001807c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab0  20000088  08008104  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b38  08008104  00020b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ceb  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262b  00000000  00000000  00031d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  000343d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  000351a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179ea  00000000  00000000  00035ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001202b  00000000  00000000  0004d8c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009013d  00000000  00000000  0005f8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efa2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eec  00000000  00000000  000efa7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008004 	.word	0x08008004

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	08008004 	.word	0x08008004

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b992 	b.w	80010a8 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f824 	bl	8000dd8 <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fbd3 	bl	8000550 <__aeabi_dmul>
 8000daa:	f000 f97f 	bl	80010ac <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fb54 	bl	800045c <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fbca 	bl	8000550 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa0c 	bl	80001e0 <__aeabi_dsub>
 8000dc8:	f000 f970 	bl	80010ac <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__aeabi_d2uiz>:
 80010ac:	004a      	lsls	r2, r1, #1
 80010ae:	d211      	bcs.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010b4:	d211      	bcs.n	80010da <__aeabi_d2uiz+0x2e>
 80010b6:	d50d      	bpl.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010c0:	d40e      	bmi.n	80010e0 <__aeabi_d2uiz+0x34>
 80010c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010ce:	fa23 f002 	lsr.w	r0, r3, r2
 80010d2:	4770      	bx	lr
 80010d4:	f04f 0000 	mov.w	r0, #0
 80010d8:	4770      	bx	lr
 80010da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80010de:	d102      	bne.n	80010e6 <__aeabi_d2uiz+0x3a>
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0000 	mov.w	r0, #0
 80010ea:	4770      	bx	lr

080010ec <PositionControlVelocityForm>:
float first_error = 0;
float second_error = 0;
float third_error = 0;

void PositionControlVelocityForm(PID* controller)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	first_error = q_des - QEIData.position;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <PositionControlVelocityForm+0xac>)
 80010f6:	ed93 7a00 	vldr	s14, [r3]
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <PositionControlVelocityForm+0xb0>)
 80010fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <PositionControlVelocityForm+0xb4>)
 8001106:	edc3 7a00 	vstr	s15, [r3]

	float kp_position = controller->Kp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	617b      	str	r3, [r7, #20]
	float ki_position = controller->Ki;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
	float kd_position = controller->Kd;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	60fb      	str	r3, [r7, #12]

	PulseWidthModulation += ((kp_position + ki_position + kd_position) * first_error) - ((kp_position + (2 * kd_position)) * second_error) + (kd_position * third_error);
 800111c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001120:	edd7 7a04 	vldr	s15, [r7, #16]
 8001124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001128:	edd7 7a03 	vldr	s15, [r7, #12]
 800112c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <PositionControlVelocityForm+0xb4>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113a:	edd7 7a03 	vldr	s15, [r7, #12]
 800113e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001142:	edd7 7a05 	vldr	s15, [r7, #20]
 8001146:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <PositionControlVelocityForm+0xb8>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <PositionControlVelocityForm+0xbc>)
 800115a:	edd3 6a00 	vldr	s13, [r3]
 800115e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001166:	ee37 7a27 	vadd.f32	s14, s14, s15
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <PositionControlVelocityForm+0xc0>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <PositionControlVelocityForm+0xc0>)
 8001176:	edc3 7a00 	vstr	s15, [r3]

	third_error = second_error;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <PositionControlVelocityForm+0xb8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <PositionControlVelocityForm+0xbc>)
 8001180:	6013      	str	r3, [r2, #0]
	second_error = first_error;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <PositionControlVelocityForm+0xb4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <PositionControlVelocityForm+0xb8>)
 8001188:	6013      	str	r3, [r2, #0]
}
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000470 	.word	0x20000470
 800119c:	20000498 	.word	0x20000498
 80011a0:	200000a4 	.word	0x200000a4
 80011a4:	200000a8 	.word	0x200000a8
 80011a8:	200000ac 	.word	0x200000ac
 80011ac:	200004ac 	.word	0x200004ac

080011b0 <micros>:

uint16_t res = 8192;      	  // Resolution [pulse/revolution]
float pulley_dia = 30.558;	  // mm

uint64_t micros(TIM_HandleTypeDef* Timer_tim)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(Timer_tim)*0.01 + _micros;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f94c 	bl	800045c <__aeabi_ui2d>
 80011c4:	a313      	add	r3, pc, #76	; (adr r3, 8001214 <micros+0x64>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff f9c1 	bl	8000550 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4614      	mov	r4, r2
 80011d4:	461d      	mov	r5, r3
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <micros+0x60>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff f980 	bl	80004e4 <__aeabi_ul2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7fe fffa 	bl	80001e4 <__adddf3>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fdd0 	bl	8000d9c <__aeabi_d2ulz>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
}
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bdb0      	pop	{r4, r5, r7, pc}
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
 8001210:	20000490 	.word	0x20000490
 8001214:	47ae147b 	.word	0x47ae147b
 8001218:	3f847ae1 	.word	0x3f847ae1
 800121c:	00000000 	.word	0x00000000

08001220 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* Timer_tim)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	QEIData.timestamp[0] = micros(Timer_tim);
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff ffc0 	bl	80011b0 <micros>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4b50      	ldr	r3, [pc, #320]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001236:	605a      	str	r2, [r3, #4]
	uint32_t lastposition = __HAL_TIM_GET_COUNTER(Encoder_tim);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	613b      	str	r3, [r7, #16]
	QEIData.data[0] = lastposition;
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001246:	801a      	strh	r2, [r3, #0]
//	{
//		QEIData.data[0] = lastposition - QEI_PERIOD;
//	}

	// position calculation
	QEIData.position = QEIData.data[0] * PI *  pulley_dia/res;
 8001248:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001256:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800137c <QEIEncoderPositionVelocity_Update+0x15c>
 800125a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800125e:	4b48      	ldr	r3, [pc, #288]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001268:	4b46      	ldr	r3, [pc, #280]	; (8001384 <QEIEncoderPositionVelocity_Update+0x164>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001278:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 800127a:	edc3 7a03 	vstr	s15, [r3, #12]

	int32_t diffPosition = QEIData.data[0] - QEIData.data[1];
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001284:	461a      	mov	r2, r3
 8001286:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001288:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	617b      	str	r3, [r7, #20]
	float diffTime = QEIData.timestamp[0] - QEIData.timestamp[1];
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a2:	edc7 7a03 	vstr	s15, [r7, #12]

	// unwrap
	if (diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012ac:	dd03      	ble.n	80012b6 <QEIEncoderPositionVelocity_Update+0x96>
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80012b4:	617b      	str	r3, [r7, #20]
	if (diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80012bc:	da03      	bge.n	80012c6 <QEIEncoderPositionVelocity_Update+0xa6>
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80012c4:	617b      	str	r3, [r7, #20]

	// velocity calculation
	QEIData.velocity = (diffPosition * 1000000.0 * PI * pulley_dia)/(res * diffTime);
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff f8d8 	bl	800047c <__aeabi_i2d>
 80012cc:	a326      	add	r3, pc, #152	; (adr r3, 8001368 <QEIEncoderPositionVelocity_Update+0x148>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff f93d 	bl	8000550 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	a324      	add	r3, pc, #144	; (adr r3, 8001370 <QEIEncoderPositionVelocity_Update+0x150>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff f934 	bl	8000550 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4614      	mov	r4, r2
 80012ee:	461d      	mov	r5, r3
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f8d3 	bl	80004a0 <__aeabi_f2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7ff f925 	bl	8000550 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4614      	mov	r4, r2
 800130c:	461d      	mov	r5, r3
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <QEIEncoderPositionVelocity_Update+0x164>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	edd7 7a03 	vldr	s15, [r7, #12]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	ee17 0a90 	vmov	r0, s15
 8001326:	f7ff f8bb 	bl	80004a0 <__aeabi_f2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7ff fa37 	bl	80007a4 <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fbb7 	bl	8000ab0 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001346:	6113      	str	r3, [r2, #16]

	QEIData.data[1] = QEIData.data[0];
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 800134a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001350:	805a      	strh	r2, [r3, #2]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001358:	6093      	str	r3, [r2, #8]
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	00000000 	.word	0x00000000
 800136c:	412e8480 	.word	0x412e8480
 8001370:	60000000 	.word	0x60000000
 8001374:	400921fb 	.word	0x400921fb
 8001378:	20000498 	.word	0x20000498
 800137c:	40490fdb 	.word	0x40490fdb
 8001380:	20000004 	.word	0x20000004
 8001384:	20000000 	.word	0x20000000

08001388 <MotorDrive>:
float Pcenter = 0;
float Ncenter = 0;
float Temp_pos = 0;

void MotorDrive(TIM_HandleTypeDef* PWM_tim)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	if(emer_pushed == 1){
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <MotorDrive+0xf0>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d16a      	bne.n	800146e <MotorDrive+0xe6>
		if (PulseWidthModulation >= 0)
 8001398:	4b38      	ldr	r3, [pc, #224]	; (800147c <MotorDrive+0xf4>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	db29      	blt.n	80013fc <MotorDrive+0x74>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ae:	4834      	ldr	r0, [pc, #208]	; (8001480 <MotorDrive+0xf8>)
 80013b0:	f002 fc4e 	bl	8003c50 <HAL_GPIO_WritePin>
			N_disallow = 0;
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <MotorDrive+0xfc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation > 8000)
 80013ba:	4b30      	ldr	r3, [pc, #192]	; (800147c <MotorDrive+0xf4>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001488 <MotorDrive+0x100>
 80013c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013cc:	dd02      	ble.n	80013d4 <MotorDrive+0x4c>
			{
				PulseWidthModulation = 8000;
 80013ce:	4b2b      	ldr	r3, [pc, #172]	; (800147c <MotorDrive+0xf4>)
 80013d0:	4a2e      	ldr	r2, [pc, #184]	; (800148c <MotorDrive+0x104>)
 80013d2:	601a      	str	r2, [r3, #0]
			}

			if ((pe2_st && (SetHomeFlag == 0)) || P_disallow)
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <MotorDrive+0x108>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <MotorDrive+0x5c>
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <MotorDrive+0x10c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <MotorDrive+0x64>
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <MotorDrive+0x110>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d030      	beq.n	800144e <MotorDrive+0xc6>
			{
				__HAL_TIM_SET_COMPARE(PWM_tim,TIM_CHANNEL_1,0);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2200      	movs	r2, #0
 80013f2:	635a      	str	r2, [r3, #52]	; 0x34
				P_disallow = 1;
 80013f4:	4b28      	ldr	r3, [pc, #160]	; (8001498 <MotorDrive+0x110>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	e028      	b.n	800144e <MotorDrive+0xc6>
			}
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001402:	481f      	ldr	r0, [pc, #124]	; (8001480 <MotorDrive+0xf8>)
 8001404:	f002 fc24 	bl	8003c50 <HAL_GPIO_WritePin>
			P_disallow = 0;
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <MotorDrive+0x110>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation < -8000)
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MotorDrive+0xf4>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800149c <MotorDrive+0x114>
 8001418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	d502      	bpl.n	8001428 <MotorDrive+0xa0>
			{
				PulseWidthModulation = -8000;
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <MotorDrive+0xf4>)
 8001424:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <MotorDrive+0x118>)
 8001426:	601a      	str	r2, [r3, #0]
			}

			if ((pe3_st && (SetHomeFlag == 0)) || N_disallow)
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MotorDrive+0x11c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <MotorDrive+0xb0>
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MotorDrive+0x10c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <MotorDrive+0xb8>
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MotorDrive+0xfc>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <MotorDrive+0xc6>
			{
				__HAL_TIM_SET_COMPARE(PWM_tim,TIM_CHANNEL_1,0);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	635a      	str	r2, [r3, #52]	; 0x34
				N_disallow = 1;
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MotorDrive+0xfc>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
			}
		}

		__HAL_TIM_SET_COMPARE(PWM_tim, TIM_CHANNEL_1, fabs(PulseWidthModulation*5));
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MotorDrive+0xf4>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145c:	eef0 7ae7 	vabs.f32	s15, s15
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001468:	ee17 2a90 	vmov	r2, s15
 800146c:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000011 	.word	0x20000011
 800147c:	200004ac 	.word	0x200004ac
 8001480:	40020000 	.word	0x40020000
 8001484:	200004c1 	.word	0x200004c1
 8001488:	45fa0000 	.word	0x45fa0000
 800148c:	45fa0000 	.word	0x45fa0000
 8001490:	200004c3 	.word	0x200004c3
 8001494:	20000010 	.word	0x20000010
 8001498:	200004c0 	.word	0x200004c0
 800149c:	c5fa0000 	.word	0xc5fa0000
 80014a0:	c5fa0000 	.word	0xc5fa0000
 80014a4:	200004c4 	.word	0x200004c4

080014a8 <SetHome>:

void SetHome(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* PWM_tim)
{
 80014a8:	b5b0      	push	{r4, r5, r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
	static enum {Jog, Overcenter, PCenter, UnderCenter, NCenter, Center,  Recenter, Setcenter} SetHomeState = Jog;

	if (SetHomeFlag)
 80014b2:	4b87      	ldr	r3, [pc, #540]	; (80016d0 <SetHome+0x228>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8102 	beq.w	80016c0 <SetHome+0x218>
	{
		switch (SetHomeState)
 80014bc:	4b85      	ldr	r3, [pc, #532]	; (80016d4 <SetHome+0x22c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	f200 80fa 	bhi.w	80016ba <SetHome+0x212>
 80014c6:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <SetHome+0x24>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	080014ed 	.word	0x080014ed
 80014d0:	0800153d 	.word	0x0800153d
 80014d4:	08001561 	.word	0x08001561
 80014d8:	08001595 	.word	0x08001595
 80014dc:	080015bb 	.word	0x080015bb
 80014e0:	080015d9 	.word	0x080015d9
 80014e4:	0800168d 	.word	0x0800168d
 80014e8:	08001677 	.word	0x08001677
		{
		case Jog:
			Pcenter = 0;
 80014ec:	4b7a      	ldr	r3, [pc, #488]	; (80016d8 <SetHome+0x230>)
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
			Ncenter = 0;
 80014f4:	4b79      	ldr	r3, [pc, #484]	; (80016dc <SetHome+0x234>)
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
			Temp_pos = 0;
 80014fc:	4b78      	ldr	r3, [pc, #480]	; (80016e0 <SetHome+0x238>)
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
			PulseWidthModulation = 3000;
 8001504:	4b77      	ldr	r3, [pc, #476]	; (80016e4 <SetHome+0x23c>)
 8001506:	4a78      	ldr	r2, [pc, #480]	; (80016e8 <SetHome+0x240>)
 8001508:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 800150a:	4b78      	ldr	r3, [pc, #480]	; (80016ec <SetHome+0x244>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <SetHome+0x7a>
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Overcenter;
 800151a:	4b6e      	ldr	r3, [pc, #440]	; (80016d4 <SetHome+0x22c>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
			else if (pe2_st)
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
				SetHomeState = Recenter;
			}
			break;
 8001520:	e0c6      	b.n	80016b0 <SetHome+0x208>
			else if (pe2_st)
 8001522:	4b73      	ldr	r3, [pc, #460]	; (80016f0 <SetHome+0x248>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80c2 	beq.w	80016b0 <SetHome+0x208>
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Recenter;
 8001534:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <SetHome+0x22c>)
 8001536:	2206      	movs	r2, #6
 8001538:	701a      	strb	r2, [r3, #0]
			break;
 800153a:	e0b9      	b.n	80016b0 <SetHome+0x208>
		case Overcenter:
			PulseWidthModulation = 3000;
 800153c:	4b69      	ldr	r3, [pc, #420]	; (80016e4 <SetHome+0x23c>)
 800153e:	4a6a      	ldr	r2, [pc, #424]	; (80016e8 <SetHome+0x240>)
 8001540:	601a      	str	r2, [r3, #0]

			if (QEIData.position >= 30)
 8001542:	4b6c      	ldr	r3, [pc, #432]	; (80016f4 <SetHome+0x24c>)
 8001544:	edd3 7a03 	vldr	s15, [r3, #12]
 8001548:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	da00      	bge.n	8001558 <SetHome+0xb0>
			{
				SetHomeState = PCenter;
			}
			break;
 8001556:	e0b0      	b.n	80016ba <SetHome+0x212>
				SetHomeState = PCenter;
 8001558:	4b5e      	ldr	r3, [pc, #376]	; (80016d4 <SetHome+0x22c>)
 800155a:	2202      	movs	r2, #2
 800155c:	701a      	strb	r2, [r3, #0]
			break;
 800155e:	e0ac      	b.n	80016ba <SetHome+0x212>
		case PCenter:
			PulseWidthModulation = -2500;
 8001560:	4b60      	ldr	r3, [pc, #384]	; (80016e4 <SetHome+0x23c>)
 8001562:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <SetHome+0x250>)
 8001564:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 8001566:	4b61      	ldr	r3, [pc, #388]	; (80016ec <SetHome+0x244>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 80a2 	beq.w	80016b4 <SetHome+0x20c>
			{
				Pcenter = QEIData.position;
 8001570:	4b60      	ldr	r3, [pc, #384]	; (80016f4 <SetHome+0x24c>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <SetHome+0x230>)
 8001576:	6013      	str	r3, [r2, #0]
				Temp_pos = Pcenter - 30;
 8001578:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <SetHome+0x230>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001582:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001586:	4b56      	ldr	r3, [pc, #344]	; (80016e0 <SetHome+0x238>)
 8001588:	edc3 7a00 	vstr	s15, [r3]
				SetHomeState = UnderCenter;
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <SetHome+0x22c>)
 800158e:	2203      	movs	r2, #3
 8001590:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001592:	e08f      	b.n	80016b4 <SetHome+0x20c>
		case UnderCenter:
			PulseWidthModulation = -3000;
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <SetHome+0x23c>)
 8001596:	4a59      	ldr	r2, [pc, #356]	; (80016fc <SetHome+0x254>)
 8001598:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= Temp_pos)
 800159a:	4b56      	ldr	r3, [pc, #344]	; (80016f4 <SetHome+0x24c>)
 800159c:	ed93 7a03 	vldr	s14, [r3, #12]
 80015a0:	4b4f      	ldr	r3, [pc, #316]	; (80016e0 <SetHome+0x238>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ae:	d900      	bls.n	80015b2 <SetHome+0x10a>
			{
				SetHomeState = NCenter;
			}
			break;
 80015b0:	e083      	b.n	80016ba <SetHome+0x212>
				SetHomeState = NCenter;
 80015b2:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <SetHome+0x22c>)
 80015b4:	2204      	movs	r2, #4
 80015b6:	701a      	strb	r2, [r3, #0]
			break;
 80015b8:	e07f      	b.n	80016ba <SetHome+0x212>
		case NCenter:
			PulseWidthModulation = 2500;
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <SetHome+0x23c>)
 80015bc:	4a50      	ldr	r2, [pc, #320]	; (8001700 <SetHome+0x258>)
 80015be:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 80015c0:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <SetHome+0x244>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d077      	beq.n	80016b8 <SetHome+0x210>
			{
				Ncenter = QEIData.position;
 80015c8:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <SetHome+0x24c>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a43      	ldr	r2, [pc, #268]	; (80016dc <SetHome+0x234>)
 80015ce:	6013      	str	r3, [r2, #0]
				SetHomeState = Center;
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <SetHome+0x22c>)
 80015d2:	2205      	movs	r2, #5
 80015d4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80015d6:	e06f      	b.n	80016b8 <SetHome+0x210>
		case Center:
			q_des = ((Pcenter - Ncenter)/2.0) + Ncenter;
 80015d8:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <SetHome+0x230>)
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <SetHome+0x234>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e8:	ee17 0a90 	vmov	r0, s15
 80015ec:	f7fe ff58 	bl	80004a0 <__aeabi_f2d>
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f8:	f7ff f8d4 	bl	80007a4 <__aeabi_ddiv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4614      	mov	r4, r2
 8001602:	461d      	mov	r5, r3
 8001604:	4b35      	ldr	r3, [pc, #212]	; (80016dc <SetHome+0x234>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff49 	bl	80004a0 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4620      	mov	r0, r4
 8001614:	4629      	mov	r1, r5
 8001616:	f7fe fde5 	bl	80001e4 <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fa45 	bl	8000ab0 <__aeabi_d2f>
 8001626:	4603      	mov	r3, r0
 8001628:	4a36      	ldr	r2, [pc, #216]	; (8001704 <SetHome+0x25c>)
 800162a:	6013      	str	r3, [r2, #0]
			PositionControlVelocityForm(&Controller);
 800162c:	4836      	ldr	r0, [pc, #216]	; (8001708 <SetHome+0x260>)
 800162e:	f7ff fd5d 	bl	80010ec <PositionControlVelocityForm>

			if (0.03 > fabs(q_des - QEIData.position))
 8001632:	4b34      	ldr	r3, [pc, #208]	; (8001704 <SetHome+0x25c>)
 8001634:	ed93 7a00 	vldr	s14, [r3]
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <SetHome+0x24c>)
 800163a:	edd3 7a03 	vldr	s15, [r3, #12]
 800163e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001642:	eef0 7ae7 	vabs.f32	s15, s15
 8001646:	ee17 0a90 	vmov	r0, s15
 800164a:	f7fe ff29 	bl	80004a0 <__aeabi_f2d>
 800164e:	a31e      	add	r3, pc, #120	; (adr r3, 80016c8 <SetHome+0x220>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7ff f9ee 	bl	8000a34 <__aeabi_dcmplt>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d100      	bne.n	8001660 <SetHome+0x1b8>
			{
				PulseWidthModulation = 0;
				MotorDrive(PWM_tim);
				SetHomeState = Setcenter;
			}
			break;
 800165e:	e02c      	b.n	80016ba <SetHome+0x212>
				PulseWidthModulation = 0;
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <SetHome+0x23c>)
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
				MotorDrive(PWM_tim);
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f7ff fe8d 	bl	8001388 <MotorDrive>
				SetHomeState = Setcenter;
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <SetHome+0x22c>)
 8001670:	2207      	movs	r2, #7
 8001672:	701a      	strb	r2, [r3, #0]
			break;
 8001674:	e021      	b.n	80016ba <SetHome+0x212>
		case Setcenter:
			__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
			SetHomeFlag = 0;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <SetHome+0x228>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
			SetHomeState = Jog;
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <SetHome+0x22c>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]

			break;
 800168a:	e016      	b.n	80016ba <SetHome+0x212>
		case Recenter:
			PulseWidthModulation = -3000;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <SetHome+0x23c>)
 800168e:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <SetHome+0x254>)
 8001690:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= -320)
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <SetHome+0x24c>)
 8001694:	edd3 7a03 	vldr	s15, [r3, #12]
 8001698:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800170c <SetHome+0x264>
 800169c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	d900      	bls.n	80016a8 <SetHome+0x200>
			{
				SetHomeState = PCenter;
			}
			break;
 80016a6:	e008      	b.n	80016ba <SetHome+0x212>
				SetHomeState = PCenter;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <SetHome+0x22c>)
 80016aa:	2202      	movs	r2, #2
 80016ac:	701a      	strb	r2, [r3, #0]
			break;
 80016ae:	e004      	b.n	80016ba <SetHome+0x212>
			break;
 80016b0:	bf00      	nop
 80016b2:	e002      	b.n	80016ba <SetHome+0x212>
			break;
 80016b4:	bf00      	nop
 80016b6:	e000      	b.n	80016ba <SetHome+0x212>
			break;
 80016b8:	bf00      	nop
		}
		MotorDrive(PWM_tim);
 80016ba:	6838      	ldr	r0, [r7, #0]
 80016bc:	f7ff fe64 	bl	8001388 <MotorDrive>
	}


}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bdb0      	pop	{r4, r5, r7, pc}
 80016c8:	eb851eb8 	.word	0xeb851eb8
 80016cc:	3f9eb851 	.word	0x3f9eb851
 80016d0:	20000010 	.word	0x20000010
 80016d4:	200000bc 	.word	0x200000bc
 80016d8:	200000b0 	.word	0x200000b0
 80016dc:	200000b4 	.word	0x200000b4
 80016e0:	200000b8 	.word	0x200000b8
 80016e4:	200004ac 	.word	0x200004ac
 80016e8:	453b8000 	.word	0x453b8000
 80016ec:	200004c2 	.word	0x200004c2
 80016f0:	200004c3 	.word	0x200004c3
 80016f4:	20000498 	.word	0x20000498
 80016f8:	c51c4000 	.word	0xc51c4000
 80016fc:	c53b8000 	.word	0xc53b8000
 8001700:	451c4000 	.word	0x451c4000
 8001704:	20000470 	.word	0x20000470
 8001708:	200004b4 	.word	0x200004b4
 800170c:	c3a00000 	.word	0xc3a00000

08001710 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <modbus_1t5_Timeout+0x1c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	751a      	strb	r2, [r3, #20]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	200000c0 	.word	0x200000c0

08001730 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <modbus_3t5_Timeout+0x1c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	755a      	strb	r2, [r3, #21]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	200000c0 	.word	0x200000c0

08001750 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <modbus_UART_Recived+0x60>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <modbus_UART_Recived+0x60>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 800176a:	1c59      	adds	r1, r3, #1
 800176c:	b289      	uxth	r1, r1
 800176e:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8001772:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001776:	d210      	bcs.n	800179a <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <modbus_UART_Recived+0x60>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68d8      	ldr	r0, [r3, #12]
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <modbus_UART_Recived+0x60>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <modbus_UART_Recived+0x60>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800178a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800178e:	4413      	add	r3, r2
 8001790:	3302      	adds	r3, #2
 8001792:	2201      	movs	r2, #1
 8001794:	4619      	mov	r1, r3
 8001796:	f004 fd17 	bl	80061c8 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <modbus_UART_Recived+0x60>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200000c0 	.word	0x200000c0

080017b4 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80017be:	4a24      	ldr	r2, [pc, #144]	; (8001850 <Modbus_init+0x9c>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <Modbus_init+0x9c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <Modbus_init+0x9c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	4a20      	ldr	r2, [pc, #128]	; (8001854 <Modbus_init+0xa0>)
 80017d4:	2114      	movs	r1, #20
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fea8 	bl	800552c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80017dc:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <Modbus_init+0x9c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <Modbus_init+0xa4>)
 80017e4:	210e      	movs	r1, #14
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fea0 	bl	800552c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <Modbus_init+0x9c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	4a1a      	ldr	r2, [pc, #104]	; (800185c <Modbus_init+0xa8>)
 80017f4:	2103      	movs	r1, #3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 fc3e 	bl	8006078 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <Modbus_init+0x9c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68d8      	ldr	r0, [r3, #12]
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <Modbus_init+0x9c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <Modbus_init+0x9c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800180e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001812:	4413      	add	r3, r2
 8001814:	3302      	adds	r3, #2
 8001816:	2201      	movs	r2, #1
 8001818:	4619      	mov	r1, r3
 800181a:	f004 fcd5 	bl	80061c8 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <Modbus_init+0x9c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d10c      	bne.n	8001848 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <Modbus_init+0x9c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	4618      	mov	r0, r3
 8001836:	f002 ff8b 	bl	8004750 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <Modbus_init+0x9c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f003 f962 	bl	8004b0c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200000c0 	.word	0x200000c0
 8001854:	08001711 	.word	0x08001711
 8001858:	08001731 	.word	0x08001731
 800185c:	08001751 	.word	0x08001751

08001860 <TrapezoidalTraj_PreCal>:

float v_max = 1000.0;	  	  // mm/s
float a = 2000.0;		  	  // mm/s^

void TrapezoidalTraj_PreCal(int16_t start_pos, int16_t final_pos, Traj* trajectory)
{
 8001860:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	603a      	str	r2, [r7, #0]
 800186c:	80fb      	strh	r3, [r7, #6]
 800186e:	460b      	mov	r3, r1
 8001870:	80bb      	strh	r3, [r7, #4]
	if (start_pos != final_pos)
 8001872:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001876:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800187a:	429a      	cmp	r2, r3
 800187c:	d05e      	beq.n	800193c <TrapezoidalTraj_PreCal+0xdc>
	{
		float s = final_pos - start_pos;
 800187e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001890:	edc7 7a03 	vstr	s15, [r7, #12]

		trajectory->t_acc = v_max/a;
 8001894:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <TrapezoidalTraj_PreCal+0xf0>)
 8001896:	edd3 6a00 	vldr	s13, [r3]
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <TrapezoidalTraj_PreCal+0xf4>)
 800189c:	ed93 7a00 	vldr	s14, [r3]
 80018a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	edc3 7a01 	vstr	s15, [r3, #4]
		trajectory->t_total = (pow(v_max,2)+a*fabs(s))/(a*v_max);
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <TrapezoidalTraj_PreCal+0xf0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fdf6 	bl	80004a0 <__aeabi_f2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001948 <TrapezoidalTraj_PreCal+0xe8>
 80018bc:	ec43 2b10 	vmov	d0, r2, r3
 80018c0:	f005 fc5a 	bl	8007178 <pow>
 80018c4:	ec59 8b10 	vmov	r8, r9, d0
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <TrapezoidalTraj_PreCal+0xf4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fde7 	bl	80004a0 <__aeabi_f2d>
 80018d2:	4604      	mov	r4, r0
 80018d4:	460d      	mov	r5, r1
 80018d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018da:	eef0 7ae7 	vabs.f32	s15, s15
 80018de:	ee17 0a90 	vmov	r0, s15
 80018e2:	f7fe fddd 	bl	80004a0 <__aeabi_f2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7fe fe2f 	bl	8000550 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4640      	mov	r0, r8
 80018f8:	4649      	mov	r1, r9
 80018fa:	f7fe fc73 	bl	80001e4 <__adddf3>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4614      	mov	r4, r2
 8001904:	461d      	mov	r5, r3
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <TrapezoidalTraj_PreCal+0xf4>)
 8001908:	ed93 7a00 	vldr	s14, [r3]
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <TrapezoidalTraj_PreCal+0xf0>)
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001916:	ee17 0a90 	vmov	r0, s15
 800191a:	f7fe fdc1 	bl	80004a0 <__aeabi_f2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4620      	mov	r0, r4
 8001924:	4629      	mov	r1, r5
 8001926:	f7fe ff3d 	bl	80007a4 <__aeabi_ddiv>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	f7ff f8bd 	bl	8000ab0 <__aeabi_d2f>
 8001936:	4602      	mov	r2, r0
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	601a      	str	r2, [r3, #0]
	}
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001946:	bf00      	nop
 8001948:	00000000 	.word	0x00000000
 800194c:	40000000 	.word	0x40000000
 8001950:	20000008 	.word	0x20000008
 8001954:	2000000c 	.word	0x2000000c

08001958 <TrapezoidalTraj_GetState>:

void TrapezoidalTraj_GetState(int16_t start_pos, int16_t final_pos, Traj* trajectory, uint32_t t_us)
{
 8001958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800195c:	ed2d 8b02 	vpush	{d8}
 8001960:	b08c      	sub	sp, #48	; 0x30
 8001962:	af00      	add	r7, sp, #0
 8001964:	613a      	str	r2, [r7, #16]
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	4603      	mov	r3, r0
 800196a:	82fb      	strh	r3, [r7, #22]
 800196c:	460b      	mov	r3, r1
 800196e:	82bb      	strh	r3, [r7, #20]
	if (start_pos != final_pos)
 8001970:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001974:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001978:	429a      	cmp	r2, r3
 800197a:	f000 8391 	beq.w	80020a0 <TrapezoidalTraj_GetState+0x748>
	{
		float t = t_us/1000000.0;
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f7fe fd6c 	bl	800045c <__aeabi_ui2d>
 8001984:	a3ab      	add	r3, pc, #684	; (adr r3, 8001c34 <TrapezoidalTraj_GetState+0x2dc>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe ff0b 	bl	80007a4 <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff f88b 	bl	8000ab0 <__aeabi_d2f>
 800199a:	4603      	mov	r3, r0
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28

		float t_acc = trajectory->t_acc;
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
		float t_total = trajectory->t_total;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	623b      	str	r3, [r7, #32]

		float s = final_pos - start_pos;
 80019aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80019ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019bc:	edc7 7a07 	vstr	s15, [r7, #28]
		int8_t dir = 1;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (s < 0)
 80019c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80019ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	d502      	bpl.n	80019da <TrapezoidalTraj_GetState+0x82>
		{
			dir = -1;
 80019d4:	23ff      	movs	r3, #255	; 0xff
 80019d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (2*t_acc < t_total) // General Case
 80019da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019e2:	ed97 7a08 	vldr	s14, [r7, #32]
 80019e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	f340 81e8 	ble.w	8001dc2 <TrapezoidalTraj_GetState+0x46a>
		{
			if (t <= t_acc)
 80019f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80019f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	d862      	bhi.n	8001aca <TrapezoidalTraj_GetState+0x172>
			{
				qddot_des = dir*a;
 8001a04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a10:	4b83      	ldr	r3, [pc, #524]	; (8001c20 <TrapezoidalTraj_GetState+0x2c8>)
 8001a12:	edd3 7a00 	vldr	s15, [r3]
 8001a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1a:	4b82      	ldr	r3, [pc, #520]	; (8001c24 <TrapezoidalTraj_GetState+0x2cc>)
 8001a1c:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*t;
 8001a20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2c:	4b7c      	ldr	r3, [pc, #496]	; (8001c20 <TrapezoidalTraj_GetState+0x2c8>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3e:	4b7a      	ldr	r3, [pc, #488]	; (8001c28 <TrapezoidalTraj_GetState+0x2d0>)
 8001a40:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t,2));
 8001a44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd17 	bl	800047c <__aeabi_i2d>
 8001a4e:	4604      	mov	r4, r0
 8001a50:	460d      	mov	r5, r1
 8001a52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd10 	bl	800047c <__aeabi_i2d>
 8001a5c:	4680      	mov	r8, r0
 8001a5e:	4689      	mov	r9, r1
 8001a60:	4b6f      	ldr	r3, [pc, #444]	; (8001c20 <TrapezoidalTraj_GetState+0x2c8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd1b 	bl	80004a0 <__aeabi_f2d>
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	4b6f      	ldr	r3, [pc, #444]	; (8001c2c <TrapezoidalTraj_GetState+0x2d4>)
 8001a70:	f7fe fd6e 	bl	8000550 <__aeabi_dmul>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4692      	mov	sl, r2
 8001a7a:	469b      	mov	fp, r3
 8001a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a7e:	f7fe fd0f 	bl	80004a0 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8001c18 <TrapezoidalTraj_GetState+0x2c0>
 8001a8a:	ec43 2b10 	vmov	d0, r2, r3
 8001a8e:	f005 fb73 	bl	8007178 <pow>
 8001a92:	ec53 2b10 	vmov	r2, r3, d0
 8001a96:	4650      	mov	r0, sl
 8001a98:	4659      	mov	r1, fp
 8001a9a:	f7fe fd59 	bl	8000550 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4640      	mov	r0, r8
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	f7fe fd53 	bl	8000550 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4620      	mov	r0, r4
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	f7fe fb97 	bl	80001e4 <__adddf3>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7fe fff7 	bl	8000ab0 <__aeabi_d2f>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a5a      	ldr	r2, [pc, #360]	; (8001c30 <TrapezoidalTraj_GetState+0x2d8>)
 8001ac6:	6013      	str	r3, [r2, #0]
				qdot_des = dir*a*(2*t_acc - t);
				q_des = start_pos + dir*(2*a*t_acc*t-0.5*a*pow(t,2)-a*pow(t_acc,2));
			}
		}
	}
}
 8001ac8:	e2ea      	b.n	80020a0 <TrapezoidalTraj_GetState+0x748>
			else if (t_acc < t && t < (t_total - t_acc))
 8001aca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001ace:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	f140 8083 	bpl.w	8001be4 <TrapezoidalTraj_GetState+0x28c>
 8001ade:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ae2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001aee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	d575      	bpl.n	8001be4 <TrapezoidalTraj_GetState+0x28c>
				qddot_des = 0;
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <TrapezoidalTraj_GetState+0x2cc>)
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
				qdot_des = dir*a*t_acc;
 8001b00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0c:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <TrapezoidalTraj_GetState+0x2c8>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <TrapezoidalTraj_GetState+0x2d0>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t_acc,2) + a*t_acc*(t - t_acc));
 8001b24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fca7 	bl	800047c <__aeabi_i2d>
 8001b2e:	4604      	mov	r4, r0
 8001b30:	460d      	mov	r5, r1
 8001b32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fca0 	bl	800047c <__aeabi_i2d>
 8001b3c:	4680      	mov	r8, r0
 8001b3e:	4689      	mov	r9, r1
 8001b40:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <TrapezoidalTraj_GetState+0x2c8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fcab 	bl	80004a0 <__aeabi_f2d>
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <TrapezoidalTraj_GetState+0x2d4>)
 8001b50:	f7fe fcfe 	bl	8000550 <__aeabi_dmul>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4692      	mov	sl, r2
 8001b5a:	469b      	mov	fp, r3
 8001b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b5e:	f7fe fc9f 	bl	80004a0 <__aeabi_f2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001c18 <TrapezoidalTraj_GetState+0x2c0>
 8001b6a:	ec43 2b10 	vmov	d0, r2, r3
 8001b6e:	f005 fb03 	bl	8007178 <pow>
 8001b72:	ec53 2b10 	vmov	r2, r3, d0
 8001b76:	4650      	mov	r0, sl
 8001b78:	4659      	mov	r1, fp
 8001b7a:	f7fe fce9 	bl	8000550 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4692      	mov	sl, r2
 8001b84:	469b      	mov	fp, r3
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <TrapezoidalTraj_GetState+0x2c8>)
 8001b88:	ed93 7a00 	vldr	s14, [r3]
 8001b8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b94:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001b98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba4:	ee17 0a90 	vmov	r0, s15
 8001ba8:	f7fe fc7a 	bl	80004a0 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4650      	mov	r0, sl
 8001bb2:	4659      	mov	r1, fp
 8001bb4:	f7fe fb16 	bl	80001e4 <__adddf3>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4640      	mov	r0, r8
 8001bbe:	4649      	mov	r1, r9
 8001bc0:	f7fe fcc6 	bl	8000550 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4620      	mov	r0, r4
 8001bca:	4629      	mov	r1, r5
 8001bcc:	f7fe fb0a 	bl	80001e4 <__adddf3>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7fe ff6a 	bl	8000ab0 <__aeabi_d2f>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <TrapezoidalTraj_GetState+0x2d8>)
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	e25d      	b.n	80020a0 <TrapezoidalTraj_GetState+0x748>
			else if ((t_total - t_acc) <= t && t <= t_total)
 8001be4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001be8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001bf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	da00      	bge.n	8001c00 <TrapezoidalTraj_GetState+0x2a8>
}
 8001bfe:	e24f      	b.n	80020a0 <TrapezoidalTraj_GetState+0x748>
			else if ((t_total - t_acc) <= t && t <= t_total)
 8001c00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c04:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	d914      	bls.n	8001c3c <TrapezoidalTraj_GetState+0x2e4>
}
 8001c12:	e245      	b.n	80020a0 <TrapezoidalTraj_GetState+0x748>
 8001c14:	f3af 8000 	nop.w
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	40000000 	.word	0x40000000
 8001c20:	2000000c 	.word	0x2000000c
 8001c24:	20000478 	.word	0x20000478
 8001c28:	20000474 	.word	0x20000474
 8001c2c:	3fe00000 	.word	0x3fe00000
 8001c30:	20000470 	.word	0x20000470
 8001c34:	00000000 	.word	0x00000000
 8001c38:	412e8480 	.word	0x412e8480
				qddot_des = -dir*a;
 8001c3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001c40:	425b      	negs	r3, r3
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c4a:	4bbd      	ldr	r3, [pc, #756]	; (8001f40 <TrapezoidalTraj_GetState+0x5e8>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c54:	4bbb      	ldr	r3, [pc, #748]	; (8001f44 <TrapezoidalTraj_GetState+0x5ec>)
 8001c56:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*(t_total - t);
 8001c5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c66:	4bb6      	ldr	r3, [pc, #728]	; (8001f40 <TrapezoidalTraj_GetState+0x5e8>)
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c70:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c80:	4bb1      	ldr	r3, [pc, #708]	; (8001f48 <TrapezoidalTraj_GetState+0x5f0>)
 8001c82:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(a*t_total*t+a*t_acc*t_total-a*pow(t_acc,2)-0.5*a*(pow(t,2)+pow(t_total,2)));
 8001c86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fbf6 	bl	800047c <__aeabi_i2d>
 8001c90:	4682      	mov	sl, r0
 8001c92:	468b      	mov	fp, r1
 8001c94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fbef 	bl	800047c <__aeabi_i2d>
 8001c9e:	e9c7 0100 	strd	r0, r1, [r7]
 8001ca2:	4ba7      	ldr	r3, [pc, #668]	; (8001f40 <TrapezoidalTraj_GetState+0x5e8>)
 8001ca4:	ed93 7a00 	vldr	s14, [r3]
 8001ca8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb8:	4ba1      	ldr	r3, [pc, #644]	; (8001f40 <TrapezoidalTraj_GetState+0x5e8>)
 8001cba:	edd3 6a00 	vldr	s13, [r3]
 8001cbe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd2:	ee17 0a90 	vmov	r0, s15
 8001cd6:	f7fe fbe3 	bl	80004a0 <__aeabi_f2d>
 8001cda:	4604      	mov	r4, r0
 8001cdc:	460d      	mov	r5, r1
 8001cde:	4b98      	ldr	r3, [pc, #608]	; (8001f40 <TrapezoidalTraj_GetState+0x5e8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fbdc 	bl	80004a0 <__aeabi_f2d>
 8001ce8:	4680      	mov	r8, r0
 8001cea:	4689      	mov	r9, r1
 8001cec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cee:	f7fe fbd7 	bl	80004a0 <__aeabi_f2d>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8001f38 <TrapezoidalTraj_GetState+0x5e0>
 8001cfa:	ec43 2b10 	vmov	d0, r2, r3
 8001cfe:	f005 fa3b 	bl	8007178 <pow>
 8001d02:	ec53 2b10 	vmov	r2, r3, d0
 8001d06:	4640      	mov	r0, r8
 8001d08:	4649      	mov	r1, r9
 8001d0a:	f7fe fc21 	bl	8000550 <__aeabi_dmul>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4620      	mov	r0, r4
 8001d14:	4629      	mov	r1, r5
 8001d16:	f7fe fa63 	bl	80001e0 <__aeabi_dsub>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4614      	mov	r4, r2
 8001d20:	461d      	mov	r5, r3
 8001d22:	4b87      	ldr	r3, [pc, #540]	; (8001f40 <TrapezoidalTraj_GetState+0x5e8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fbba 	bl	80004a0 <__aeabi_f2d>
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	4b86      	ldr	r3, [pc, #536]	; (8001f4c <TrapezoidalTraj_GetState+0x5f4>)
 8001d32:	f7fe fc0d 	bl	8000550 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4690      	mov	r8, r2
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d40:	f7fe fbae 	bl	80004a0 <__aeabi_f2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8001f38 <TrapezoidalTraj_GetState+0x5e0>
 8001d4c:	ec43 2b10 	vmov	d0, r2, r3
 8001d50:	f005 fa12 	bl	8007178 <pow>
 8001d54:	eeb0 8a40 	vmov.f32	s16, s0
 8001d58:	eef0 8a60 	vmov.f32	s17, s1
 8001d5c:	6a38      	ldr	r0, [r7, #32]
 8001d5e:	f7fe fb9f 	bl	80004a0 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8001f38 <TrapezoidalTraj_GetState+0x5e0>
 8001d6a:	ec43 2b10 	vmov	d0, r2, r3
 8001d6e:	f005 fa03 	bl	8007178 <pow>
 8001d72:	ec53 2b10 	vmov	r2, r3, d0
 8001d76:	ec51 0b18 	vmov	r0, r1, d8
 8001d7a:	f7fe fa33 	bl	80001e4 <__adddf3>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4640      	mov	r0, r8
 8001d84:	4649      	mov	r1, r9
 8001d86:	f7fe fbe3 	bl	8000550 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	f7fe fa25 	bl	80001e0 <__aeabi_dsub>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d9e:	f7fe fbd7 	bl	8000550 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4650      	mov	r0, sl
 8001da8:	4659      	mov	r1, fp
 8001daa:	f7fe fa1b 	bl	80001e4 <__adddf3>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7fe fe7b 	bl	8000ab0 <__aeabi_d2f>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a64      	ldr	r2, [pc, #400]	; (8001f50 <TrapezoidalTraj_GetState+0x5f8>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	e16e      	b.n	80020a0 <TrapezoidalTraj_GetState+0x748>
			t_acc = 0.5*sqrt(4*fabs(s)/a);
 8001dc2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc6:	eef0 7ae7 	vabs.f32	s15, s15
 8001dca:	ee17 0a90 	vmov	r0, s15
 8001dce:	f7fe fb67 	bl	80004a0 <__aeabi_f2d>
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <TrapezoidalTraj_GetState+0x5fc>)
 8001dd8:	f7fe fbba 	bl	8000550 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4614      	mov	r4, r2
 8001de2:	461d      	mov	r5, r3
 8001de4:	4b56      	ldr	r3, [pc, #344]	; (8001f40 <TrapezoidalTraj_GetState+0x5e8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb59 	bl	80004a0 <__aeabi_f2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4620      	mov	r0, r4
 8001df4:	4629      	mov	r1, r5
 8001df6:	f7fe fcd5 	bl	80007a4 <__aeabi_ddiv>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	ec43 2b17 	vmov	d7, r2, r3
 8001e02:	eeb0 0a47 	vmov.f32	s0, s14
 8001e06:	eef0 0a67 	vmov.f32	s1, s15
 8001e0a:	f005 fa25 	bl	8007258 <sqrt>
 8001e0e:	ec51 0b10 	vmov	r0, r1, d0
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <TrapezoidalTraj_GetState+0x5f4>)
 8001e18:	f7fe fb9a 	bl	8000550 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7fe fe44 	bl	8000ab0 <__aeabi_d2f>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
			t_total = 2*t_acc;
 8001e2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e34:	edc7 7a08 	vstr	s15, [r7, #32]
			if (t <= t_acc)
 8001e38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	d862      	bhi.n	8001f10 <TrapezoidalTraj_GetState+0x5b8>
				qddot_des = dir*a;
 8001e4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e56:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <TrapezoidalTraj_GetState+0x5e8>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <TrapezoidalTraj_GetState+0x5ec>)
 8001e62:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*t;
 8001e66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e72:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <TrapezoidalTraj_GetState+0x5e8>)
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e84:	4b30      	ldr	r3, [pc, #192]	; (8001f48 <TrapezoidalTraj_GetState+0x5f0>)
 8001e86:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t,2));
 8001e8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe faf4 	bl	800047c <__aeabi_i2d>
 8001e94:	4604      	mov	r4, r0
 8001e96:	460d      	mov	r5, r1
 8001e98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe faed 	bl	800047c <__aeabi_i2d>
 8001ea2:	4680      	mov	r8, r0
 8001ea4:	4689      	mov	r9, r1
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <TrapezoidalTraj_GetState+0x5e8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe faf8 	bl	80004a0 <__aeabi_f2d>
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <TrapezoidalTraj_GetState+0x5f4>)
 8001eb6:	f7fe fb4b 	bl	8000550 <__aeabi_dmul>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4692      	mov	sl, r2
 8001ec0:	469b      	mov	fp, r3
 8001ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ec4:	f7fe faec 	bl	80004a0 <__aeabi_f2d>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001f38 <TrapezoidalTraj_GetState+0x5e0>
 8001ed0:	ec43 2b10 	vmov	d0, r2, r3
 8001ed4:	f005 f950 	bl	8007178 <pow>
 8001ed8:	ec53 2b10 	vmov	r2, r3, d0
 8001edc:	4650      	mov	r0, sl
 8001ede:	4659      	mov	r1, fp
 8001ee0:	f7fe fb36 	bl	8000550 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4640      	mov	r0, r8
 8001eea:	4649      	mov	r1, r9
 8001eec:	f7fe fb30 	bl	8000550 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	f7fe f974 	bl	80001e4 <__adddf3>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f7fe fdd4 	bl	8000ab0 <__aeabi_d2f>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <TrapezoidalTraj_GetState+0x5f8>)
 8001f0c:	6013      	str	r3, [r2, #0]
}
 8001f0e:	e0c7      	b.n	80020a0 <TrapezoidalTraj_GetState+0x748>
			else if (t_acc < t && t < t_total)
 8001f10:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f20:	d400      	bmi.n	8001f24 <TrapezoidalTraj_GetState+0x5cc>
}
 8001f22:	e0bd      	b.n	80020a0 <TrapezoidalTraj_GetState+0x748>
			else if (t_acc < t && t < t_total)
 8001f24:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001f28:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	d410      	bmi.n	8001f58 <TrapezoidalTraj_GetState+0x600>
}
 8001f36:	e0b3      	b.n	80020a0 <TrapezoidalTraj_GetState+0x748>
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	40000000 	.word	0x40000000
 8001f40:	2000000c 	.word	0x2000000c
 8001f44:	20000478 	.word	0x20000478
 8001f48:	20000474 	.word	0x20000474
 8001f4c:	3fe00000 	.word	0x3fe00000
 8001f50:	20000470 	.word	0x20000470
 8001f54:	40100000 	.word	0x40100000
				qddot_des = -dir*a;
 8001f58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f5c:	425b      	negs	r3, r3
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f66:	4b54      	ldr	r3, [pc, #336]	; (80020b8 <TrapezoidalTraj_GetState+0x760>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f70:	4b52      	ldr	r3, [pc, #328]	; (80020bc <TrapezoidalTraj_GetState+0x764>)
 8001f72:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*(2*t_acc - t);
 8001f76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f82:	4b4d      	ldr	r3, [pc, #308]	; (80020b8 <TrapezoidalTraj_GetState+0x760>)
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f90:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa0:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <TrapezoidalTraj_GetState+0x768>)
 8001fa2:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(2*a*t_acc*t-0.5*a*pow(t,2)-a*pow(t_acc,2));
 8001fa6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fa66 	bl	800047c <__aeabi_i2d>
 8001fb0:	4604      	mov	r4, r0
 8001fb2:	460d      	mov	r5, r1
 8001fb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fa5f 	bl	800047c <__aeabi_i2d>
 8001fbe:	4680      	mov	r8, r0
 8001fc0:	4689      	mov	r9, r1
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	; (80020b8 <TrapezoidalTraj_GetState+0x760>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fcc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fdc:	ee17 0a90 	vmov	r0, s15
 8001fe0:	f7fe fa5e 	bl	80004a0 <__aeabi_f2d>
 8001fe4:	4682      	mov	sl, r0
 8001fe6:	468b      	mov	fp, r1
 8001fe8:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <TrapezoidalTraj_GetState+0x760>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa57 	bl	80004a0 <__aeabi_f2d>
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <TrapezoidalTraj_GetState+0x76c>)
 8001ff8:	f7fe faaa 	bl	8000550 <__aeabi_dmul>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	e9c7 2300 	strd	r2, r3, [r7]
 8002004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002006:	f7fe fa4b 	bl	80004a0 <__aeabi_f2d>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	ed9f 1b28 	vldr	d1, [pc, #160]	; 80020b0 <TrapezoidalTraj_GetState+0x758>
 8002012:	ec43 2b10 	vmov	d0, r2, r3
 8002016:	f005 f8af 	bl	8007178 <pow>
 800201a:	ec53 2b10 	vmov	r2, r3, d0
 800201e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002022:	f7fe fa95 	bl	8000550 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4650      	mov	r0, sl
 800202c:	4659      	mov	r1, fp
 800202e:	f7fe f8d7 	bl	80001e0 <__aeabi_dsub>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	e9c7 2300 	strd	r2, r3, [r7]
 800203a:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <TrapezoidalTraj_GetState+0x760>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa2e 	bl	80004a0 <__aeabi_f2d>
 8002044:	4682      	mov	sl, r0
 8002046:	468b      	mov	fp, r1
 8002048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800204a:	f7fe fa29 	bl	80004a0 <__aeabi_f2d>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	ed9f 1b17 	vldr	d1, [pc, #92]	; 80020b0 <TrapezoidalTraj_GetState+0x758>
 8002056:	ec43 2b10 	vmov	d0, r2, r3
 800205a:	f005 f88d 	bl	8007178 <pow>
 800205e:	ec53 2b10 	vmov	r2, r3, d0
 8002062:	4650      	mov	r0, sl
 8002064:	4659      	mov	r1, fp
 8002066:	f7fe fa73 	bl	8000550 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002072:	f7fe f8b5 	bl	80001e0 <__aeabi_dsub>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4640      	mov	r0, r8
 800207c:	4649      	mov	r1, r9
 800207e:	f7fe fa67 	bl	8000550 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	f7fe f8ab 	bl	80001e4 <__adddf3>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f7fe fd0b 	bl	8000ab0 <__aeabi_d2f>
 800209a:	4603      	mov	r3, r0
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <TrapezoidalTraj_GetState+0x770>)
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	bf00      	nop
 80020a2:	3730      	adds	r7, #48	; 0x30
 80020a4:	46bd      	mov	sp, r7
 80020a6:	ecbd 8b02 	vpop	{d8}
 80020aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ae:	bf00      	nop
 80020b0:	00000000 	.word	0x00000000
 80020b4:	40000000 	.word	0x40000000
 80020b8:	2000000c 	.word	0x2000000c
 80020bc:	20000478 	.word	0x20000478
 80020c0:	20000474 	.word	0x20000474
 80020c4:	3fe00000 	.word	0x3fe00000
 80020c8:	20000470 	.word	0x20000470

080020cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d0:	f000 ff22 	bl	8002f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d4:	f000 f84c 	bl	8002170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020d8:	f000 fa8c 	bl	80025f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80020dc:	f000 fa6a 	bl	80025b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80020e0:	f000 fa3c 	bl	800255c <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80020e4:	f000 f9a0 	bl	8002428 <MX_TIM5_Init>
  MX_TIM1_Init();
 80020e8:	f000 f8aa 	bl	8002240 <MX_TIM1_Init>
  MX_TIM3_Init();
 80020ec:	f000 f948 	bl	8002380 <MX_TIM3_Init>
  MX_TIM11_Init();
 80020f0:	f000 f9e8 	bl	80024c4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 80020f4:	4814      	ldr	r0, [pc, #80]	; (8002148 <main+0x7c>)
 80020f6:	f002 fb2b 	bl	8004750 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 80020fa:	4814      	ldr	r0, [pc, #80]	; (800214c <main+0x80>)
 80020fc:	f002 face 	bl	800469c <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002100:	213c      	movs	r1, #60	; 0x3c
 8002102:	4813      	ldr	r0, [pc, #76]	; (8002150 <main+0x84>)
 8002104:	f002 fe1c 	bl	8004d40 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002108:	2100      	movs	r1, #0
 800210a:	4810      	ldr	r0, [pc, #64]	; (800214c <main+0x80>)
 800210c:	f002 fc4e 	bl	80049ac <HAL_TIM_PWM_Start>

  Controller.Kp = 150;
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <main+0x88>)
 8002112:	4a11      	ldr	r2, [pc, #68]	; (8002158 <main+0x8c>)
 8002114:	601a      	str	r2, [r3, #0]
  Controller.Ki = 1.71;
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <main+0x88>)
 8002118:	4a10      	ldr	r2, [pc, #64]	; (800215c <main+0x90>)
 800211a:	605a      	str	r2, [r3, #4]
  Controller.Kd = 0;
 800211c:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <main+0x88>)
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	609a      	str	r2, [r3, #8]

  hmodbus.huart = &huart2;
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <main+0x94>)
 8002126:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <main+0x98>)
 8002128:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <main+0x94>)
 800212c:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <main+0x9c>)
 800212e:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <main+0x94>)
 8002132:	2215      	movs	r2, #21
 8002134:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <main+0x94>)
 8002138:	22c8      	movs	r2, #200	; 0xc8
 800213a:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800213c:	490b      	ldr	r1, [pc, #44]	; (800216c <main+0xa0>)
 800213e:	4808      	ldr	r0, [pc, #32]	; (8002160 <main+0x94>)
 8002140:	f7ff fb38 	bl	80017b4 <Modbus_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002144:	e7fe      	b.n	8002144 <main+0x78>
 8002146:	bf00      	nop
 8002148:	2000022c 	.word	0x2000022c
 800214c:	200000c4 	.word	0x200000c4
 8002150:	20000178 	.word	0x20000178
 8002154:	200004b4 	.word	0x200004b4
 8002158:	43160000 	.word	0x43160000
 800215c:	3fdae148 	.word	0x3fdae148
 8002160:	200004c8 	.word	0x200004c8
 8002164:	20000394 	.word	0x20000394
 8002168:	200002e0 	.word	0x200002e0
 800216c:	200009a0 	.word	0x200009a0

08002170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b094      	sub	sp, #80	; 0x50
 8002174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002176:	f107 0320 	add.w	r3, r7, #32
 800217a:	2230      	movs	r2, #48	; 0x30
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fff2 	bl	8007168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <SystemClock_Config+0xc8>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	4a26      	ldr	r2, [pc, #152]	; (8002238 <SystemClock_Config+0xc8>)
 800219e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a2:	6413      	str	r3, [r2, #64]	; 0x40
 80021a4:	4b24      	ldr	r3, [pc, #144]	; (8002238 <SystemClock_Config+0xc8>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <SystemClock_Config+0xcc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a20      	ldr	r2, [pc, #128]	; (800223c <SystemClock_Config+0xcc>)
 80021ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b1e      	ldr	r3, [pc, #120]	; (800223c <SystemClock_Config+0xcc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021cc:	2302      	movs	r3, #2
 80021ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d0:	2301      	movs	r3, #1
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021d4:	2310      	movs	r3, #16
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d8:	2302      	movs	r3, #2
 80021da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021dc:	2300      	movs	r3, #0
 80021de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021e0:	2308      	movs	r3, #8
 80021e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80021e4:	2364      	movs	r3, #100	; 0x64
 80021e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021e8:	2302      	movs	r3, #2
 80021ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021ec:	2304      	movs	r3, #4
 80021ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f0:	f107 0320 	add.w	r3, r7, #32
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 fd5d 	bl	8003cb4 <HAL_RCC_OscConfig>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002200:	f000 fc2e 	bl	8002a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002204:	230f      	movs	r3, #15
 8002206:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002208:	2302      	movs	r3, #2
 800220a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002214:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800221a:	f107 030c 	add.w	r3, r7, #12
 800221e:	2103      	movs	r1, #3
 8002220:	4618      	mov	r0, r3
 8002222:	f001 ffbf 	bl	80041a4 <HAL_RCC_ClockConfig>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800222c:	f000 fc18 	bl	8002a60 <Error_Handler>
  }
}
 8002230:	bf00      	nop
 8002232:	3750      	adds	r7, #80	; 0x50
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40023800 	.word	0x40023800
 800223c:	40007000 	.word	0x40007000

08002240 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b096      	sub	sp, #88	; 0x58
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002246:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800225e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	611a      	str	r2, [r3, #16]
 800226e:	615a      	str	r2, [r3, #20]
 8002270:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	2220      	movs	r2, #32
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f004 ff75 	bl	8007168 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800227e:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <MX_TIM1_Init+0x138>)
 8002280:	4a3e      	ldr	r2, [pc, #248]	; (800237c <MX_TIM1_Init+0x13c>)
 8002282:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002284:	4b3c      	ldr	r3, [pc, #240]	; (8002378 <MX_TIM1_Init+0x138>)
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228a:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <MX_TIM1_Init+0x138>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8002290:	4b39      	ldr	r3, [pc, #228]	; (8002378 <MX_TIM1_Init+0x138>)
 8002292:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002296:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002298:	4b37      	ldr	r3, [pc, #220]	; (8002378 <MX_TIM1_Init+0x138>)
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <MX_TIM1_Init+0x138>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a4:	4b34      	ldr	r3, [pc, #208]	; (8002378 <MX_TIM1_Init+0x138>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022aa:	4833      	ldr	r0, [pc, #204]	; (8002378 <MX_TIM1_Init+0x138>)
 80022ac:	f002 f99a 	bl	80045e4 <HAL_TIM_Base_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80022b6:	f000 fbd3 	bl	8002a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022c4:	4619      	mov	r1, r3
 80022c6:	482c      	ldr	r0, [pc, #176]	; (8002378 <MX_TIM1_Init+0x138>)
 80022c8:	f003 f80e 	bl	80052e8 <HAL_TIM_ConfigClockSource>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022d2:	f000 fbc5 	bl	8002a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022d6:	4828      	ldr	r0, [pc, #160]	; (8002378 <MX_TIM1_Init+0x138>)
 80022d8:	f002 fb02 	bl	80048e0 <HAL_TIM_PWM_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80022e2:	f000 fbbd 	bl	8002a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022f2:	4619      	mov	r1, r3
 80022f4:	4820      	ldr	r0, [pc, #128]	; (8002378 <MX_TIM1_Init+0x138>)
 80022f6:	f003 fd87 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002300:	f000 fbae 	bl	8002a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002304:	2360      	movs	r3, #96	; 0x60
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002310:	2300      	movs	r3, #0
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002318:	2300      	movs	r3, #0
 800231a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800231c:	2300      	movs	r3, #0
 800231e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002324:	2200      	movs	r2, #0
 8002326:	4619      	mov	r1, r3
 8002328:	4813      	ldr	r0, [pc, #76]	; (8002378 <MX_TIM1_Init+0x138>)
 800232a:	f002 ff1b 	bl	8005164 <HAL_TIM_PWM_ConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002334:	f000 fb94 	bl	8002a60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800234c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002350:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4807      	ldr	r0, [pc, #28]	; (8002378 <MX_TIM1_Init+0x138>)
 800235c:	f003 fdc2 	bl	8005ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002366:	f000 fb7b 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800236a:	4803      	ldr	r0, [pc, #12]	; (8002378 <MX_TIM1_Init+0x138>)
 800236c:	f000 fc5a 	bl	8002c24 <HAL_TIM_MspPostInit>

}
 8002370:	bf00      	nop
 8002372:	3758      	adds	r7, #88	; 0x58
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200000c4 	.word	0x200000c4
 800237c:	40010000 	.word	0x40010000

08002380 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	2224      	movs	r2, #36	; 0x24
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f004 feea 	bl	8007168 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <MX_TIM3_Init+0xa0>)
 800239e:	4a21      	ldr	r2, [pc, #132]	; (8002424 <MX_TIM3_Init+0xa4>)
 80023a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023a2:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <MX_TIM3_Init+0xa0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <MX_TIM3_Init+0xa0>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD - 1;
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <MX_TIM3_Init+0xa0>)
 80023b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <MX_TIM3_Init+0xa0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023bc:	4b18      	ldr	r3, [pc, #96]	; (8002420 <MX_TIM3_Init+0xa0>)
 80023be:	2200      	movs	r2, #0
 80023c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023c2:	2303      	movs	r3, #3
 80023c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023ca:	2301      	movs	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023da:	2301      	movs	r3, #1
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023de:	2300      	movs	r3, #0
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	4619      	mov	r1, r3
 80023ec:	480c      	ldr	r0, [pc, #48]	; (8002420 <MX_TIM3_Init+0xa0>)
 80023ee:	f002 fbf3 	bl	8004bd8 <HAL_TIM_Encoder_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80023f8:	f000 fb32 	bl	8002a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4805      	ldr	r0, [pc, #20]	; (8002420 <MX_TIM3_Init+0xa0>)
 800240a:	f003 fcfd 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002414:	f000 fb24 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	3730      	adds	r7, #48	; 0x30
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000178 	.word	0x20000178
 8002424:	40000400 	.word	0x40000400

08002428 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242e:	f107 0308 	add.w	r3, r7, #8
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243c:	463b      	mov	r3, r7
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002444:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <MX_TIM5_Init+0x90>)
 8002446:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <MX_TIM5_Init+0x94>)
 8002448:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <MX_TIM5_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <MX_TIM5_Init+0x90>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <MX_TIM5_Init+0x90>)
 8002458:	4a19      	ldr	r2, [pc, #100]	; (80024c0 <MX_TIM5_Init+0x98>)
 800245a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <MX_TIM5_Init+0x90>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <MX_TIM5_Init+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002468:	4813      	ldr	r0, [pc, #76]	; (80024b8 <MX_TIM5_Init+0x90>)
 800246a:	f002 f8bb 	bl	80045e4 <HAL_TIM_Base_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8002474:	f000 faf4 	bl	8002a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800247e:	f107 0308 	add.w	r3, r7, #8
 8002482:	4619      	mov	r1, r3
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <MX_TIM5_Init+0x90>)
 8002486:	f002 ff2f 	bl	80052e8 <HAL_TIM_ConfigClockSource>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8002490:	f000 fae6 	bl	8002a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800249c:	463b      	mov	r3, r7
 800249e:	4619      	mov	r1, r3
 80024a0:	4805      	ldr	r0, [pc, #20]	; (80024b8 <MX_TIM5_Init+0x90>)
 80024a2:	f003 fcb1 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80024ac:	f000 fad8 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	2000022c 	.word	0x2000022c
 80024bc:	40000c00 	.word	0x40000c00
 80024c0:	0001869f 	.word	0x0001869f

080024c4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
 80024d8:	615a      	str	r2, [r3, #20]
 80024da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <MX_TIM11_Init+0x90>)
 80024de:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <MX_TIM11_Init+0x94>)
 80024e0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <MX_TIM11_Init+0x90>)
 80024e4:	2263      	movs	r2, #99	; 0x63
 80024e6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <MX_TIM11_Init+0x90>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <MX_TIM11_Init+0x90>)
 80024f0:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80024f4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f6:	4b17      	ldr	r3, [pc, #92]	; (8002554 <MX_TIM11_Init+0x90>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <MX_TIM11_Init+0x90>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002502:	4814      	ldr	r0, [pc, #80]	; (8002554 <MX_TIM11_Init+0x90>)
 8002504:	f002 f86e 	bl	80045e4 <HAL_TIM_Base_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800250e:	f000 faa7 	bl	8002a60 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002512:	4810      	ldr	r0, [pc, #64]	; (8002554 <MX_TIM11_Init+0x90>)
 8002514:	f002 f97e 	bl	8004814 <HAL_TIM_OC_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800251e:	f000 fa9f 	bl	8002a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002522:	2310      	movs	r3, #16
 8002524:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002526:	f240 5399 	movw	r3, #1433	; 0x599
 800252a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	2200      	movs	r2, #0
 8002538:	4619      	mov	r1, r3
 800253a:	4806      	ldr	r0, [pc, #24]	; (8002554 <MX_TIM11_Init+0x90>)
 800253c:	f002 fdb6 	bl	80050ac <HAL_TIM_OC_ConfigChannel>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8002546:	f000 fa8b 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800254a:	bf00      	nop
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200002e0 	.word	0x200002e0
 8002558:	40014800 	.word	0x40014800

0800255c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <MX_USART2_UART_Init+0x50>)
 8002562:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <MX_USART2_UART_Init+0x54>)
 8002564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <MX_USART2_UART_Init+0x50>)
 8002568:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800256c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <MX_USART2_UART_Init+0x50>)
 8002570:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002574:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <MX_USART2_UART_Init+0x50>)
 8002578:	2200      	movs	r2, #0
 800257a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <MX_USART2_UART_Init+0x50>)
 800257e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <MX_USART2_UART_Init+0x50>)
 8002586:	220c      	movs	r2, #12
 8002588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <MX_USART2_UART_Init+0x50>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <MX_USART2_UART_Init+0x50>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <MX_USART2_UART_Init+0x50>)
 8002598:	f003 fd14 	bl	8005fc4 <HAL_UART_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80025a2:	f000 fa5d 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000394 	.word	0x20000394
 80025b0:	40004400 	.word	0x40004400

080025b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <MX_DMA_Init+0x3c>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <MX_DMA_Init+0x3c>)
 80025c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <MX_DMA_Init+0x3c>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	2011      	movs	r0, #17
 80025dc:	f000 fde9 	bl	80031b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80025e0:	2011      	movs	r0, #17
 80025e2:	f000 fe02 	bl	80031ea <HAL_NVIC_EnableIRQ>

}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	4b53      	ldr	r3, [pc, #332]	; (800275c <MX_GPIO_Init+0x168>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a52      	ldr	r2, [pc, #328]	; (800275c <MX_GPIO_Init+0x168>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b50      	ldr	r3, [pc, #320]	; (800275c <MX_GPIO_Init+0x168>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b4c      	ldr	r3, [pc, #304]	; (800275c <MX_GPIO_Init+0x168>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a4b      	ldr	r2, [pc, #300]	; (800275c <MX_GPIO_Init+0x168>)
 8002630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b49      	ldr	r3, [pc, #292]	; (800275c <MX_GPIO_Init+0x168>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b45      	ldr	r3, [pc, #276]	; (800275c <MX_GPIO_Init+0x168>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a44      	ldr	r2, [pc, #272]	; (800275c <MX_GPIO_Init+0x168>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b42      	ldr	r3, [pc, #264]	; (800275c <MX_GPIO_Init+0x168>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	4b3e      	ldr	r3, [pc, #248]	; (800275c <MX_GPIO_Init+0x168>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a3d      	ldr	r2, [pc, #244]	; (800275c <MX_GPIO_Init+0x168>)
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b3b      	ldr	r3, [pc, #236]	; (800275c <MX_GPIO_Init+0x168>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800267a:	2200      	movs	r2, #0
 800267c:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8002680:	4837      	ldr	r0, [pc, #220]	; (8002760 <MX_GPIO_Init+0x16c>)
 8002682:	f001 fae5 	bl	8003c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800268a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800268c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	4619      	mov	r1, r3
 800269c:	4831      	ldr	r0, [pc, #196]	; (8002764 <MX_GPIO_Init+0x170>)
 800269e:	f001 f93b 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 80026a2:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80026a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a8:	2301      	movs	r3, #1
 80026aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	4829      	ldr	r0, [pc, #164]	; (8002760 <MX_GPIO_Init+0x16c>)
 80026bc:	f001 f92c 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80026c0:	2306      	movs	r3, #6
 80026c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4824      	ldr	r0, [pc, #144]	; (8002768 <MX_GPIO_Init+0x174>)
 80026d6:	f001 f91f 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026e0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80026e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	481d      	ldr	r0, [pc, #116]	; (8002768 <MX_GPIO_Init+0x174>)
 80026f2:	f001 f911 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002702:	2301      	movs	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002706:	f107 0314 	add.w	r3, r7, #20
 800270a:	4619      	mov	r1, r3
 800270c:	4814      	ldr	r0, [pc, #80]	; (8002760 <MX_GPIO_Init+0x16c>)
 800270e:	f001 f903 	bl	8003918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	2007      	movs	r0, #7
 8002718:	f000 fd4b 	bl	80031b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800271c:	2007      	movs	r0, #7
 800271e:	f000 fd64 	bl	80031ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2100      	movs	r1, #0
 8002726:	2008      	movs	r0, #8
 8002728:	f000 fd43 	bl	80031b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800272c:	2008      	movs	r0, #8
 800272e:	f000 fd5c 	bl	80031ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	2100      	movs	r1, #0
 8002736:	2017      	movs	r0, #23
 8002738:	f000 fd3b 	bl	80031b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800273c:	2017      	movs	r0, #23
 800273e:	f000 fd54 	bl	80031ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	2028      	movs	r0, #40	; 0x28
 8002748:	f000 fd33 	bl	80031b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800274c:	2028      	movs	r0, #40	; 0x28
 800274e:	f000 fd4c 	bl	80031ea <HAL_NVIC_EnableIRQ>

}
 8002752:	bf00      	nop
 8002754:	3728      	adds	r7, #40	; 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40020000 	.word	0x40020000
 8002764:	40020800 	.word	0x40020800
 8002768:	40020400 	.word	0x40020400

0800276c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800276c:	b5b0      	push	{r4, r5, r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d115      	bne.n	80027a8 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		_micros += 1000;
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8002786:	f143 0500 	adc.w	r5, r3, #0
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800278c:	e9c3 4500 	strd	r4, r5, [r3]

		QEIEncoderPositionVelocity_Update(&htim3, &htim5);
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002792:	4809      	ldr	r0, [pc, #36]	; (80027b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002794:	f7fe fd44 	bl	8001220 <QEIEncoderPositionVelocity_Update>

		check_pe();
 8002798:	f000 f934 	bl	8002a04 <check_pe>
		SetHome(&htim3, &htim1);
 800279c:	4907      	ldr	r1, [pc, #28]	; (80027bc <HAL_TIM_PeriodElapsedCallback+0x50>)
 800279e:	4806      	ldr	r0, [pc, #24]	; (80027b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80027a0:	f7fe fe82 	bl	80014a8 <SetHome>
		ControllerState();
 80027a4:	f000 f80c 	bl	80027c0 <ControllerState>
	}
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bdb0      	pop	{r4, r5, r7, pc}
 80027b0:	2000022c 	.word	0x2000022c
 80027b4:	20000490 	.word	0x20000490
 80027b8:	20000178 	.word	0x20000178
 80027bc:	200000c4 	.word	0x200000c4

080027c0 <ControllerState>:

void ControllerState()
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	static enum {Idle, Follow} state = Idle;

	if (SetHomeFlag == 0)
 80027c4:	4b66      	ldr	r3, [pc, #408]	; (8002960 <ControllerState+0x1a0>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f040 80c2 	bne.w	8002952 <ControllerState+0x192>
	{
		switch(state)
 80027ce:	4b65      	ldr	r3, [pc, #404]	; (8002964 <ControllerState+0x1a4>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <ControllerState+0x1c>
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d039      	beq.n	800284e <ControllerState+0x8e>
 80027da:	e0b6      	b.n	800294a <ControllerState+0x18a>
		{
		case Idle:
			PulseWidthModulation = 0;
 80027dc:	4b62      	ldr	r3, [pc, #392]	; (8002968 <ControllerState+0x1a8>)
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
			MotorDrive(&htim1);
 80027e4:	4861      	ldr	r0, [pc, #388]	; (800296c <ControllerState+0x1ac>)
 80027e6:	f7fe fdcf 	bl	8001388 <MotorDrive>
			Pi = QEIData.position;
 80027ea:	4b61      	ldr	r3, [pc, #388]	; (8002970 <ControllerState+0x1b0>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4a61      	ldr	r2, [pc, #388]	; (8002974 <ControllerState+0x1b4>)
 80027f0:	6013      	str	r3, [r2, #0]

			if(Pf != Pf_last)
 80027f2:	4b61      	ldr	r3, [pc, #388]	; (8002978 <ControllerState+0x1b8>)
 80027f4:	ed93 7a00 	vldr	s14, [r3]
 80027f8:	4b60      	ldr	r3, [pc, #384]	; (800297c <ControllerState+0x1bc>)
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	eeb4 7a67 	vcmp.f32	s14, s15
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	f000 809d 	beq.w	8002944 <ControllerState+0x184>
			{
				t_traj = 0;
 800280a:	495d      	ldr	r1, [pc, #372]	; (8002980 <ControllerState+0x1c0>)
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9c1 2300 	strd	r2, r3, [r1]
				TrapezoidalTraj_PreCal(Pi, Pf, &traj);
 8002818:	4b56      	ldr	r3, [pc, #344]	; (8002974 <ControllerState+0x1b4>)
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002822:	ee17 3a90 	vmov	r3, s15
 8002826:	b21b      	sxth	r3, r3
 8002828:	4a53      	ldr	r2, [pc, #332]	; (8002978 <ControllerState+0x1b8>)
 800282a:	edd2 7a00 	vldr	s15, [r2]
 800282e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002832:	ee17 2a90 	vmov	r2, s15
 8002836:	b211      	sxth	r1, r2
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <ControllerState+0x1c4>)
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f810 	bl	8001860 <TrapezoidalTraj_PreCal>
				ControllerFinishedFollowFlag = 0;
 8002840:	4b51      	ldr	r3, [pc, #324]	; (8002988 <ControllerState+0x1c8>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
				state = Follow;
 8002846:	4b47      	ldr	r3, [pc, #284]	; (8002964 <ControllerState+0x1a4>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800284c:	e07a      	b.n	8002944 <ControllerState+0x184>

		case Follow:
			t_traj = t_traj + 1000;
 800284e:	4b4c      	ldr	r3, [pc, #304]	; (8002980 <ControllerState+0x1c0>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	f512 707a 	adds.w	r0, r2, #1000	; 0x3e8
 8002858:	f143 0100 	adc.w	r1, r3, #0
 800285c:	4b48      	ldr	r3, [pc, #288]	; (8002980 <ControllerState+0x1c0>)
 800285e:	e9c3 0100 	strd	r0, r1, [r3]
			if (t_traj <= traj.t_total * 1000000)
 8002862:	4b47      	ldr	r3, [pc, #284]	; (8002980 <ControllerState+0x1c0>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	f7fe fa38 	bl	8000ce0 <__aeabi_ul2f>
 8002870:	ee06 0a90 	vmov	s13, r0
 8002874:	4b43      	ldr	r3, [pc, #268]	; (8002984 <ControllerState+0x1c4>)
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800298c <ControllerState+0x1cc>
 800287e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002882:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288a:	d817      	bhi.n	80028bc <ControllerState+0xfc>
			{
				TrapezoidalTraj_GetState(Pi, Pf, &traj, t_traj);
 800288c:	4b39      	ldr	r3, [pc, #228]	; (8002974 <ControllerState+0x1b4>)
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002896:	ee17 3a90 	vmov	r3, s15
 800289a:	b218      	sxth	r0, r3
 800289c:	4b36      	ldr	r3, [pc, #216]	; (8002978 <ControllerState+0x1b8>)
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a6:	ee17 3a90 	vmov	r3, s15
 80028aa:	b219      	sxth	r1, r3
 80028ac:	4b34      	ldr	r3, [pc, #208]	; (8002980 <ControllerState+0x1c0>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	4613      	mov	r3, r2
 80028b4:	4a33      	ldr	r2, [pc, #204]	; (8002984 <ControllerState+0x1c4>)
 80028b6:	f7ff f84f 	bl	8001958 <TrapezoidalTraj_GetState>
 80028ba:	e003      	b.n	80028c4 <ControllerState+0x104>
			}
			else
			{
				q_des = Pf;
 80028bc:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <ControllerState+0x1b8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a33      	ldr	r2, [pc, #204]	; (8002990 <ControllerState+0x1d0>)
 80028c2:	6013      	str	r3, [r2, #0]
			}

			PositionControlVelocityForm(&Controller);
 80028c4:	4833      	ldr	r0, [pc, #204]	; (8002994 <ControllerState+0x1d4>)
 80028c6:	f7fe fc11 	bl	80010ec <PositionControlVelocityForm>
			MotorDrive(&htim1);
 80028ca:	4828      	ldr	r0, [pc, #160]	; (800296c <ControllerState+0x1ac>)
 80028cc:	f7fe fd5c 	bl	8001388 <MotorDrive>

			if (((t_traj > traj.t_total * 1000000) && (0.15 > fabs(q_des - QEIData.position))) || P_disallow || N_disallow)
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <ControllerState+0x1c0>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe fa01 	bl	8000ce0 <__aeabi_ul2f>
 80028de:	ee06 0a90 	vmov	s13, r0
 80028e2:	4b28      	ldr	r3, [pc, #160]	; (8002984 <ControllerState+0x1c4>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800298c <ControllerState+0x1cc>
 80028ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	dd15      	ble.n	8002926 <ControllerState+0x166>
 80028fa:	4b25      	ldr	r3, [pc, #148]	; (8002990 <ControllerState+0x1d0>)
 80028fc:	ed93 7a00 	vldr	s14, [r3]
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <ControllerState+0x1b0>)
 8002902:	edd3 7a03 	vldr	s15, [r3, #12]
 8002906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800290a:	eef0 7ae7 	vabs.f32	s15, s15
 800290e:	ee17 0a90 	vmov	r0, s15
 8002912:	f7fd fdc5 	bl	80004a0 <__aeabi_f2d>
 8002916:	a310      	add	r3, pc, #64	; (adr r3, 8002958 <ControllerState+0x198>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	f7fe f88a 	bl	8000a34 <__aeabi_dcmplt>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d107      	bne.n	8002936 <ControllerState+0x176>
 8002926:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <ControllerState+0x1d8>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <ControllerState+0x176>
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <ControllerState+0x1dc>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <ControllerState+0x188>
			{
				state = Idle;
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <ControllerState+0x1a4>)
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
				ControllerFinishedFollowFlag = 1;
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <ControllerState+0x1c8>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002942:	e001      	b.n	8002948 <ControllerState+0x188>
		break;
 8002944:	bf00      	nop
 8002946:	e000      	b.n	800294a <ControllerState+0x18a>
		break;
 8002948:	bf00      	nop
		}
		Pf_last = Pf;
 800294a:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <ControllerState+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a0b      	ldr	r2, [pc, #44]	; (800297c <ControllerState+0x1bc>)
 8002950:	6013      	str	r3, [r2, #0]
	}
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	33333333 	.word	0x33333333
 800295c:	3fc33333 	.word	0x3fc33333
 8002960:	20000010 	.word	0x20000010
 8002964:	20000b30 	.word	0x20000b30
 8002968:	200004ac 	.word	0x200004ac
 800296c:	200000c4 	.word	0x200000c4
 8002970:	20000498 	.word	0x20000498
 8002974:	20000484 	.word	0x20000484
 8002978:	20000488 	.word	0x20000488
 800297c:	2000048c 	.word	0x2000048c
 8002980:	20000468 	.word	0x20000468
 8002984:	2000047c 	.word	0x2000047c
 8002988:	200004b0 	.word	0x200004b0
 800298c:	49742400 	.word	0x49742400
 8002990:	20000470 	.word	0x20000470
 8002994:	200004b4 	.word	0x200004b4
 8002998:	200004c0 	.word	0x200004c0
 800299c:	200004c1 	.word	0x200004c1

080029a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0)
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b0:	d10e      	bne.n	80029d0 <HAL_GPIO_EXTI_Callback+0x30>
 80029b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029b6:	4810      	ldr	r0, [pc, #64]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x58>)
 80029b8:	f001 f932 	bl	8003c20 <HAL_GPIO_ReadPin>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_GPIO_EXTI_Callback+0x30>
    {
        emer_pushed = 0;
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <HAL_GPIO_EXTI_Callback+0x5c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_GPIO_EXTI_Callback+0x60>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	635a      	str	r2, [r3, #52]	; 0x34
    }
    if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1)
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d6:	d10a      	bne.n	80029ee <HAL_GPIO_EXTI_Callback+0x4e>
 80029d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029dc:	4806      	ldr	r0, [pc, #24]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x58>)
 80029de:	f001 f91f 	bl	8003c20 <HAL_GPIO_ReadPin>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d102      	bne.n	80029ee <HAL_GPIO_EXTI_Callback+0x4e>
    {
        emer_pushed = 1;
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <HAL_GPIO_EXTI_Callback+0x5c>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]
    }
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40020400 	.word	0x40020400
 80029fc:	20000011 	.word	0x20000011
 8002a00:	200000c4 	.word	0x200000c4

08002a04 <check_pe>:

void check_pe(){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	// Photoelectric Sensor
	if(emer_pushed == 1){
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <check_pe+0x44>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d118      	bne.n	8002a42 <check_pe+0x3e>
		pe1_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8002a10:	2102      	movs	r1, #2
 8002a12:	480e      	ldr	r0, [pc, #56]	; (8002a4c <check_pe+0x48>)
 8002a14:	f001 f904 	bl	8003c20 <HAL_GPIO_ReadPin>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <check_pe+0x4c>)
 8002a1e:	701a      	strb	r2, [r3, #0]
		pe2_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8002a20:	2104      	movs	r1, #4
 8002a22:	480a      	ldr	r0, [pc, #40]	; (8002a4c <check_pe+0x48>)
 8002a24:	f001 f8fc 	bl	8003c20 <HAL_GPIO_ReadPin>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <check_pe+0x50>)
 8002a2e:	701a      	strb	r2, [r3, #0]
		pe3_st = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8002a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a34:	4808      	ldr	r0, [pc, #32]	; (8002a58 <check_pe+0x54>)
 8002a36:	f001 f8f3 	bl	8003c20 <HAL_GPIO_ReadPin>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <check_pe+0x58>)
 8002a40:	701a      	strb	r2, [r3, #0]
	}
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000011 	.word	0x20000011
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	200004c2 	.word	0x200004c2
 8002a54:	200004c3 	.word	0x200004c3
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	200004c4 	.word	0x200004c4

08002a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a64:	b672      	cpsid	i
}
 8002a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <Error_Handler+0x8>
	...

08002a6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <HAL_MspInit+0x4c>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	4a0f      	ldr	r2, [pc, #60]	; (8002ab8 <HAL_MspInit+0x4c>)
 8002a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a80:	6453      	str	r3, [r2, #68]	; 0x44
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <HAL_MspInit+0x4c>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_MspInit+0x4c>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a08      	ldr	r2, [pc, #32]	; (8002ab8 <HAL_MspInit+0x4c>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_MspInit+0x4c>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002aaa:	2007      	movs	r0, #7
 8002aac:	f000 fb76 	bl	800319c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2a      	ldr	r2, [pc, #168]	; (8002b74 <HAL_TIM_Base_MspInit+0xb8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d116      	bne.n	8002afc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_TIM_Base_MspInit+0xbc>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <HAL_TIM_Base_MspInit+0xbc>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ade:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <HAL_TIM_Base_MspInit+0xbc>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2100      	movs	r1, #0
 8002aee:	201a      	movs	r0, #26
 8002af0:	f000 fb5f 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002af4:	201a      	movs	r0, #26
 8002af6:	f000 fb78 	bl	80031ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002afa:	e036      	b.n	8002b6a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <HAL_TIM_Base_MspInit+0xc0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d116      	bne.n	8002b34 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_TIM_Base_MspInit+0xbc>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a1a      	ldr	r2, [pc, #104]	; (8002b78 <HAL_TIM_Base_MspInit+0xbc>)
 8002b10:	f043 0308 	orr.w	r3, r3, #8
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_TIM_Base_MspInit+0xbc>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	2032      	movs	r0, #50	; 0x32
 8002b28:	f000 fb43 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002b2c:	2032      	movs	r0, #50	; 0x32
 8002b2e:	f000 fb5c 	bl	80031ea <HAL_NVIC_EnableIRQ>
}
 8002b32:	e01a      	b.n	8002b6a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <HAL_TIM_Base_MspInit+0xc4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d115      	bne.n	8002b6a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_TIM_Base_MspInit+0xbc>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <HAL_TIM_Base_MspInit+0xbc>)
 8002b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_TIM_Base_MspInit+0xbc>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	201a      	movs	r0, #26
 8002b60:	f000 fb27 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b64:	201a      	movs	r0, #26
 8002b66:	f000 fb40 	bl	80031ea <HAL_NVIC_EnableIRQ>
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40010000 	.word	0x40010000
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40000c00 	.word	0x40000c00
 8002b80:	40014800 	.word	0x40014800

08002b84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_TIM_Encoder_MspInit+0x94>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d133      	bne.n	8002c0e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_TIM_Encoder_MspInit+0x98>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <HAL_TIM_Encoder_MspInit+0x98>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_TIM_Encoder_MspInit+0x98>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_TIM_Encoder_MspInit+0x98>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_TIM_Encoder_MspInit+0x98>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_TIM_Encoder_MspInit+0x98>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bde:	23c0      	movs	r3, #192	; 0xc0
 8002be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf2:	f107 0314 	add.w	r3, r7, #20
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4809      	ldr	r0, [pc, #36]	; (8002c20 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002bfa:	f000 fe8d 	bl	8003918 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	201d      	movs	r0, #29
 8002c04:	f000 fad5 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c08:	201d      	movs	r0, #29
 8002c0a:	f000 faee 	bl	80031ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c0e:	bf00      	nop
 8002c10:	3728      	adds	r7, #40	; 0x28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020000 	.word	0x40020000

08002c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <HAL_TIM_MspPostInit+0x68>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d11e      	bne.n	8002c84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_TIM_MspPostInit+0x6c>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <HAL_TIM_MspPostInit+0x6c>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_TIM_MspPostInit+0x6c>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c74:	2301      	movs	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	f107 030c 	add.w	r3, r7, #12
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4805      	ldr	r0, [pc, #20]	; (8002c94 <HAL_TIM_MspPostInit+0x70>)
 8002c80:	f000 fe4a 	bl	8003918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c84:	bf00      	nop
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40010000 	.word	0x40010000
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40020000 	.word	0x40020000

08002c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a34      	ldr	r2, [pc, #208]	; (8002d88 <HAL_UART_MspInit+0xf0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d161      	bne.n	8002d7e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	4b33      	ldr	r3, [pc, #204]	; (8002d8c <HAL_UART_MspInit+0xf4>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a32      	ldr	r2, [pc, #200]	; (8002d8c <HAL_UART_MspInit+0xf4>)
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cca:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <HAL_UART_MspInit+0xf4>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	4b2c      	ldr	r3, [pc, #176]	; (8002d8c <HAL_UART_MspInit+0xf4>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4a2b      	ldr	r2, [pc, #172]	; (8002d8c <HAL_UART_MspInit+0xf4>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <HAL_UART_MspInit+0xf4>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cf2:	230c      	movs	r3, #12
 8002cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d02:	2307      	movs	r3, #7
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d06:	f107 0314 	add.w	r3, r7, #20
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4820      	ldr	r0, [pc, #128]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d0e:	f000 fe03 	bl	8003918 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d14:	4a20      	ldr	r2, [pc, #128]	; (8002d98 <HAL_UART_MspInit+0x100>)
 8002d16:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002d18:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d20:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d22:	2240      	movs	r2, #64	; 0x40
 8002d24:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d26:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d32:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d52:	4810      	ldr	r0, [pc, #64]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d54:	f000 fa64 	bl	8003220 <HAL_DMA_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002d5e:	f7ff fe7f 	bl	8002a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d66:	635a      	str	r2, [r3, #52]	; 0x34
 8002d68:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	2026      	movs	r0, #38	; 0x26
 8002d74:	f000 fa1d 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d78:	2026      	movs	r0, #38	; 0x26
 8002d7a:	f000 fa36 	bl	80031ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d7e:	bf00      	nop
 8002d80:	3728      	adds	r7, #40	; 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40004400 	.word	0x40004400
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40020000 	.word	0x40020000
 8002d94:	20000408 	.word	0x20000408
 8002d98:	400260a0 	.word	0x400260a0

08002d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002da0:	e7fe      	b.n	8002da0 <NMI_Handler+0x4>

08002da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da6:	e7fe      	b.n	8002da6 <HardFault_Handler+0x4>

08002da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dac:	e7fe      	b.n	8002dac <MemManage_Handler+0x4>

08002dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <BusFault_Handler+0x4>

08002db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <UsageFault_Handler+0x4>

08002dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de8:	f000 f8e8 	bl	8002fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002df4:	2002      	movs	r0, #2
 8002df6:	f000 ff45 	bl	8003c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002e02:	2004      	movs	r0, #4
 8002e04:	f000 ff3e 	bl	8003c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <DMA1_Stream6_IRQHandler+0x10>)
 8002e12:	f000 fb45 	bl	80034a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000408 	.word	0x20000408

08002e20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002e24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002e28:	f000 ff2c 	bl	8003c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e34:	4803      	ldr	r0, [pc, #12]	; (8002e44 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002e36:	f002 f811 	bl	8004e5c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002e3a:	4803      	ldr	r0, [pc, #12]	; (8002e48 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002e3c:	f002 f80e 	bl	8004e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200000c4 	.word	0x200000c4
 8002e48:	200002e0 	.word	0x200002e0

08002e4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <TIM3_IRQHandler+0x10>)
 8002e52:	f002 f803 	bl	8004e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000178 	.word	0x20000178

08002e60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <USART2_IRQHandler+0x10>)
 8002e66:	f003 f9df 	bl	8006228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000394 	.word	0x20000394

08002e74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002e78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e7c:	f000 ff02 	bl	8003c84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e84:	f000 fefe 	bl	8003c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <TIM5_IRQHandler+0x10>)
 8002e92:	f001 ffe3 	bl	8004e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000022c 	.word	0x2000022c

08002ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <SystemInit+0x20>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	4a05      	ldr	r2, [pc, #20]	; (8002ec0 <SystemInit+0x20>)
 8002eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ec8:	480d      	ldr	r0, [pc, #52]	; (8002f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eca:	490e      	ldr	r1, [pc, #56]	; (8002f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ecc:	4a0e      	ldr	r2, [pc, #56]	; (8002f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed0:	e002      	b.n	8002ed8 <LoopCopyDataInit>

08002ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ed6:	3304      	adds	r3, #4

08002ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002edc:	d3f9      	bcc.n	8002ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ede:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ee0:	4c0b      	ldr	r4, [pc, #44]	; (8002f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee4:	e001      	b.n	8002eea <LoopFillZerobss>

08002ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee8:	3204      	adds	r2, #4

08002eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eec:	d3fb      	bcc.n	8002ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eee:	f7ff ffd7 	bl	8002ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ef2:	f004 f915 	bl	8007120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ef6:	f7ff f8e9 	bl	80020cc <main>
  bx  lr    
 8002efa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f04:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002f08:	08008080 	.word	0x08008080
  ldr r2, =_sbss
 8002f0c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002f10:	20000b38 	.word	0x20000b38

08002f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f14:	e7fe      	b.n	8002f14 <ADC_IRQHandler>
	...

08002f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_Init+0x40>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <HAL_Init+0x40>)
 8002f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_Init+0x40>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <HAL_Init+0x40>)
 8002f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <HAL_Init+0x40>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <HAL_Init+0x40>)
 8002f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f40:	2003      	movs	r0, #3
 8002f42:	f000 f92b 	bl	800319c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f000 f808 	bl	8002f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f4c:	f7ff fd8e 	bl	8002a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023c00 	.word	0x40023c00

08002f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_InitTick+0x54>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_InitTick+0x58>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f943 	bl	8003206 <HAL_SYSTICK_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00e      	b.n	8002fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b0f      	cmp	r3, #15
 8002f8e:	d80a      	bhi.n	8002fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f90:	2200      	movs	r2, #0
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f000 f90b 	bl	80031b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f9c:	4a06      	ldr	r2, [pc, #24]	; (8002fb8 <HAL_InitTick+0x5c>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000014 	.word	0x20000014
 8002fb4:	2000001c 	.word	0x2000001c
 8002fb8:	20000018 	.word	0x20000018

08002fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_IncTick+0x20>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_IncTick+0x24>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <HAL_IncTick+0x24>)
 8002fce:	6013      	str	r3, [r2, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	2000001c 	.word	0x2000001c
 8002fe0:	20000b34 	.word	0x20000b34

08002fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_GetTick+0x14>)
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000b34 	.word	0x20000b34

08002ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <__NVIC_GetPriorityGrouping+0x18>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 0307 	and.w	r3, r3, #7
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db0b      	blt.n	800308a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4907      	ldr	r1, [pc, #28]	; (8003098 <__NVIC_EnableIRQ+0x38>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2001      	movs	r0, #1
 8003082:	fa00 f202 	lsl.w	r2, r0, r2
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000e100 	.word	0xe000e100

0800309c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	db0a      	blt.n	80030c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	490c      	ldr	r1, [pc, #48]	; (80030e8 <__NVIC_SetPriority+0x4c>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	440b      	add	r3, r1
 80030c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c4:	e00a      	b.n	80030dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4908      	ldr	r1, [pc, #32]	; (80030ec <__NVIC_SetPriority+0x50>)
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	3b04      	subs	r3, #4
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	440b      	add	r3, r1
 80030da:	761a      	strb	r2, [r3, #24]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000e100 	.word	0xe000e100
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f1c3 0307 	rsb	r3, r3, #7
 800310a:	2b04      	cmp	r3, #4
 800310c:	bf28      	it	cs
 800310e:	2304      	movcs	r3, #4
 8003110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3304      	adds	r3, #4
 8003116:	2b06      	cmp	r3, #6
 8003118:	d902      	bls.n	8003120 <NVIC_EncodePriority+0x30>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3b03      	subs	r3, #3
 800311e:	e000      	b.n	8003122 <NVIC_EncodePriority+0x32>
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	f04f 32ff 	mov.w	r2, #4294967295
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	401a      	ands	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003138:	f04f 31ff 	mov.w	r1, #4294967295
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	43d9      	mvns	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	4313      	orrs	r3, r2
         );
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003168:	d301      	bcc.n	800316e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316a:	2301      	movs	r3, #1
 800316c:	e00f      	b.n	800318e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <SysTick_Config+0x40>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003176:	210f      	movs	r1, #15
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	f7ff ff8e 	bl	800309c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <SysTick_Config+0x40>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <SysTick_Config+0x40>)
 8003188:	2207      	movs	r2, #7
 800318a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	e000e010 	.word	0xe000e010

0800319c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff29 	bl	8002ffc <__NVIC_SetPriorityGrouping>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c4:	f7ff ff3e 	bl	8003044 <__NVIC_GetPriorityGrouping>
 80031c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	6978      	ldr	r0, [r7, #20]
 80031d0:	f7ff ff8e 	bl	80030f0 <NVIC_EncodePriority>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff5d 	bl	800309c <__NVIC_SetPriority>
}
 80031e2:	bf00      	nop
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff31 	bl	8003060 <__NVIC_EnableIRQ>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ffa2 	bl	8003158 <SysTick_Config>
 8003214:	4603      	mov	r3, r0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff feda 	bl	8002fe4 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e099      	b.n	8003370 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325c:	e00f      	b.n	800327e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800325e:	f7ff fec1 	bl	8002fe4 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b05      	cmp	r3, #5
 800326a:	d908      	bls.n	800327e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2203      	movs	r2, #3
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e078      	b.n	8003370 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e8      	bne.n	800325e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4b38      	ldr	r3, [pc, #224]	; (8003378 <HAL_DMA_Init+0x158>)
 8003298:	4013      	ands	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d107      	bne.n	80032e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	4313      	orrs	r3, r2
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 0307 	bic.w	r3, r3, #7
 80032fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b04      	cmp	r3, #4
 8003310:	d117      	bne.n	8003342 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00e      	beq.n	8003342 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fa7b 	bl	8003820 <DMA_CheckFifoParam>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2240      	movs	r2, #64	; 0x40
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800333e:	2301      	movs	r3, #1
 8003340:	e016      	b.n	8003370 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fa32 	bl	80037b4 <DMA_CalcBaseAndBitshift>
 8003350:	4603      	mov	r3, r0
 8003352:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003358:	223f      	movs	r2, #63	; 0x3f
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	f010803f 	.word	0xf010803f

0800337c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800338a:	f7ff fe2b 	bl	8002fe4 <HAL_GetTick>
 800338e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d008      	beq.n	80033ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e052      	b.n	8003454 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0216 	bic.w	r2, r2, #22
 80033bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <HAL_DMA_Abort+0x62>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0208 	bic.w	r2, r2, #8
 80033ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033fe:	e013      	b.n	8003428 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003400:	f7ff fdf0 	bl	8002fe4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b05      	cmp	r3, #5
 800340c:	d90c      	bls.n	8003428 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2203      	movs	r2, #3
 8003418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e015      	b.n	8003454 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e4      	bne.n	8003400 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	223f      	movs	r2, #63	; 0x3f
 800343c:	409a      	lsls	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d004      	beq.n	800347a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e00c      	b.n	8003494 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2205      	movs	r2, #5
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034ac:	4b8e      	ldr	r3, [pc, #568]	; (80036e8 <HAL_DMA_IRQHandler+0x248>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a8e      	ldr	r2, [pc, #568]	; (80036ec <HAL_DMA_IRQHandler+0x24c>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	0a9b      	lsrs	r3, r3, #10
 80034b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	2208      	movs	r2, #8
 80034cc:	409a      	lsls	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01a      	beq.n	800350c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0204 	bic.w	r2, r2, #4
 80034f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f8:	2208      	movs	r2, #8
 80034fa:	409a      	lsls	r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f043 0201 	orr.w	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	2201      	movs	r2, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d012      	beq.n	8003542 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	2201      	movs	r2, #1
 8003530:	409a      	lsls	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	f043 0202 	orr.w	r2, r3, #2
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	2204      	movs	r2, #4
 8003548:	409a      	lsls	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d012      	beq.n	8003578 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00b      	beq.n	8003578 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	2204      	movs	r2, #4
 8003566:	409a      	lsls	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	f043 0204 	orr.w	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	2210      	movs	r2, #16
 800357e:	409a      	lsls	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d043      	beq.n	8003610 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d03c      	beq.n	8003610 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	2210      	movs	r2, #16
 800359c:	409a      	lsls	r2, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d018      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d108      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d024      	beq.n	8003610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
 80035ce:	e01f      	b.n	8003610 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01b      	beq.n	8003610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
 80035e0:	e016      	b.n	8003610 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d107      	bne.n	8003600 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0208 	bic.w	r2, r2, #8
 80035fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003614:	2220      	movs	r2, #32
 8003616:	409a      	lsls	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 808f 	beq.w	8003740 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8087 	beq.w	8003740 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	2220      	movs	r2, #32
 8003638:	409a      	lsls	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b05      	cmp	r3, #5
 8003648:	d136      	bne.n	80036b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0216 	bic.w	r2, r2, #22
 8003658:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003668:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <HAL_DMA_IRQHandler+0x1da>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0208 	bic.w	r2, r2, #8
 8003688:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	223f      	movs	r2, #63	; 0x3f
 8003690:	409a      	lsls	r2, r3
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d07e      	beq.n	80037ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
        }
        return;
 80036b6:	e079      	b.n	80037ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01d      	beq.n	8003702 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10d      	bne.n	80036f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d031      	beq.n	8003740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4798      	blx	r3
 80036e4:	e02c      	b.n	8003740 <HAL_DMA_IRQHandler+0x2a0>
 80036e6:	bf00      	nop
 80036e8:	20000014 	.word	0x20000014
 80036ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d023      	beq.n	8003740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
 8003700:	e01e      	b.n	8003740 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10f      	bne.n	8003730 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0210 	bic.w	r2, r2, #16
 800371e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	2b00      	cmp	r3, #0
 8003746:	d032      	beq.n	80037ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d022      	beq.n	800379a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2205      	movs	r2, #5
 8003758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	3301      	adds	r3, #1
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	429a      	cmp	r2, r3
 8003776:	d307      	bcc.n	8003788 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f2      	bne.n	800376c <HAL_DMA_IRQHandler+0x2cc>
 8003786:	e000      	b.n	800378a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003788:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	4798      	blx	r3
 80037aa:	e000      	b.n	80037ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80037ac:	bf00      	nop
    }
  }
}
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	3b10      	subs	r3, #16
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <DMA_CalcBaseAndBitshift+0x64>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037ce:	4a13      	ldr	r2, [pc, #76]	; (800381c <DMA_CalcBaseAndBitshift+0x68>)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d909      	bls.n	80037f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	1d1a      	adds	r2, r3, #4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	659a      	str	r2, [r3, #88]	; 0x58
 80037f4:	e007      	b.n	8003806 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037fe:	f023 0303 	bic.w	r3, r3, #3
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	aaaaaaab 	.word	0xaaaaaaab
 800381c:	08008038 	.word	0x08008038

08003820 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d11f      	bne.n	800387a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d856      	bhi.n	80038ee <DMA_CheckFifoParam+0xce>
 8003840:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <DMA_CheckFifoParam+0x28>)
 8003842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003846:	bf00      	nop
 8003848:	08003859 	.word	0x08003859
 800384c:	0800386b 	.word	0x0800386b
 8003850:	08003859 	.word	0x08003859
 8003854:	080038ef 	.word	0x080038ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d046      	beq.n	80038f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003868:	e043      	b.n	80038f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003872:	d140      	bne.n	80038f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003878:	e03d      	b.n	80038f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003882:	d121      	bne.n	80038c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b03      	cmp	r3, #3
 8003888:	d837      	bhi.n	80038fa <DMA_CheckFifoParam+0xda>
 800388a:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <DMA_CheckFifoParam+0x70>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038a1 	.word	0x080038a1
 8003894:	080038a7 	.word	0x080038a7
 8003898:	080038a1 	.word	0x080038a1
 800389c:	080038b9 	.word	0x080038b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
      break;
 80038a4:	e030      	b.n	8003908 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d025      	beq.n	80038fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b6:	e022      	b.n	80038fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038c0:	d11f      	bne.n	8003902 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038c6:	e01c      	b.n	8003902 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d903      	bls.n	80038d6 <DMA_CheckFifoParam+0xb6>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d003      	beq.n	80038dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038d4:	e018      	b.n	8003908 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
      break;
 80038da:	e015      	b.n	8003908 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00e      	beq.n	8003906 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
      break;
 80038ec:	e00b      	b.n	8003906 <DMA_CheckFifoParam+0xe6>
      break;
 80038ee:	bf00      	nop
 80038f0:	e00a      	b.n	8003908 <DMA_CheckFifoParam+0xe8>
      break;
 80038f2:	bf00      	nop
 80038f4:	e008      	b.n	8003908 <DMA_CheckFifoParam+0xe8>
      break;
 80038f6:	bf00      	nop
 80038f8:	e006      	b.n	8003908 <DMA_CheckFifoParam+0xe8>
      break;
 80038fa:	bf00      	nop
 80038fc:	e004      	b.n	8003908 <DMA_CheckFifoParam+0xe8>
      break;
 80038fe:	bf00      	nop
 8003900:	e002      	b.n	8003908 <DMA_CheckFifoParam+0xe8>
      break;   
 8003902:	bf00      	nop
 8003904:	e000      	b.n	8003908 <DMA_CheckFifoParam+0xe8>
      break;
 8003906:	bf00      	nop
    }
  } 
  
  return status; 
 8003908:	7bfb      	ldrb	r3, [r7, #15]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop

08003918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	; 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	e159      	b.n	8003be8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003934:	2201      	movs	r2, #1
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	429a      	cmp	r2, r3
 800394e:	f040 8148 	bne.w	8003be2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d005      	beq.n	800396a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003966:	2b02      	cmp	r3, #2
 8003968:	d130      	bne.n	80039cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	2203      	movs	r2, #3
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a0:	2201      	movs	r2, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 0201 	and.w	r2, r3, #1
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d017      	beq.n	8003a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	2203      	movs	r2, #3
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d123      	bne.n	8003a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	08da      	lsrs	r2, r3, #3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3208      	adds	r2, #8
 8003a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	220f      	movs	r2, #15
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	08da      	lsrs	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3208      	adds	r2, #8
 8003a56:	69b9      	ldr	r1, [r7, #24]
 8003a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	2203      	movs	r2, #3
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0203 	and.w	r2, r3, #3
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80a2 	beq.w	8003be2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	4b57      	ldr	r3, [pc, #348]	; (8003c00 <HAL_GPIO_Init+0x2e8>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	4a56      	ldr	r2, [pc, #344]	; (8003c00 <HAL_GPIO_Init+0x2e8>)
 8003aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aac:	6453      	str	r3, [r2, #68]	; 0x44
 8003aae:	4b54      	ldr	r3, [pc, #336]	; (8003c00 <HAL_GPIO_Init+0x2e8>)
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aba:	4a52      	ldr	r2, [pc, #328]	; (8003c04 <HAL_GPIO_Init+0x2ec>)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	220f      	movs	r2, #15
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a49      	ldr	r2, [pc, #292]	; (8003c08 <HAL_GPIO_Init+0x2f0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d019      	beq.n	8003b1a <HAL_GPIO_Init+0x202>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a48      	ldr	r2, [pc, #288]	; (8003c0c <HAL_GPIO_Init+0x2f4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_GPIO_Init+0x1fe>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a47      	ldr	r2, [pc, #284]	; (8003c10 <HAL_GPIO_Init+0x2f8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00d      	beq.n	8003b12 <HAL_GPIO_Init+0x1fa>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a46      	ldr	r2, [pc, #280]	; (8003c14 <HAL_GPIO_Init+0x2fc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <HAL_GPIO_Init+0x1f6>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a45      	ldr	r2, [pc, #276]	; (8003c18 <HAL_GPIO_Init+0x300>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d101      	bne.n	8003b0a <HAL_GPIO_Init+0x1f2>
 8003b06:	2304      	movs	r3, #4
 8003b08:	e008      	b.n	8003b1c <HAL_GPIO_Init+0x204>
 8003b0a:	2307      	movs	r3, #7
 8003b0c:	e006      	b.n	8003b1c <HAL_GPIO_Init+0x204>
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e004      	b.n	8003b1c <HAL_GPIO_Init+0x204>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e002      	b.n	8003b1c <HAL_GPIO_Init+0x204>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <HAL_GPIO_Init+0x204>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	f002 0203 	and.w	r2, r2, #3
 8003b22:	0092      	lsls	r2, r2, #2
 8003b24:	4093      	lsls	r3, r2
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b2c:	4935      	ldr	r1, [pc, #212]	; (8003c04 <HAL_GPIO_Init+0x2ec>)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	089b      	lsrs	r3, r3, #2
 8003b32:	3302      	adds	r3, #2
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b3a:	4b38      	ldr	r3, [pc, #224]	; (8003c1c <HAL_GPIO_Init+0x304>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b5e:	4a2f      	ldr	r2, [pc, #188]	; (8003c1c <HAL_GPIO_Init+0x304>)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b64:	4b2d      	ldr	r3, [pc, #180]	; (8003c1c <HAL_GPIO_Init+0x304>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b88:	4a24      	ldr	r2, [pc, #144]	; (8003c1c <HAL_GPIO_Init+0x304>)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b8e:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <HAL_GPIO_Init+0x304>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bb2:	4a1a      	ldr	r2, [pc, #104]	; (8003c1c <HAL_GPIO_Init+0x304>)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bb8:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <HAL_GPIO_Init+0x304>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bdc:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <HAL_GPIO_Init+0x304>)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3301      	adds	r3, #1
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2b0f      	cmp	r3, #15
 8003bec:	f67f aea2 	bls.w	8003934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	3724      	adds	r7, #36	; 0x24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40013800 	.word	0x40013800
 8003c08:	40020000 	.word	0x40020000
 8003c0c:	40020400 	.word	0x40020400
 8003c10:	40020800 	.word	0x40020800
 8003c14:	40020c00 	.word	0x40020c00
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40013c00 	.word	0x40013c00

08003c20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	e001      	b.n	8003c42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	807b      	strh	r3, [r7, #2]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c60:	787b      	ldrb	r3, [r7, #1]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c66:	887a      	ldrh	r2, [r7, #2]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c6c:	e003      	b.n	8003c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c6e:	887b      	ldrh	r3, [r7, #2]
 8003c70:	041a      	lsls	r2, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	619a      	str	r2, [r3, #24]
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d006      	beq.n	8003ca8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c9a:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe fe7c 	bl	80029a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40013c00 	.word	0x40013c00

08003cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e267      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d075      	beq.n	8003dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cd2:	4b88      	ldr	r3, [pc, #544]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d00c      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cde:	4b85      	ldr	r3, [pc, #532]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d112      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cea:	4b82      	ldr	r3, [pc, #520]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf6:	d10b      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf8:	4b7e      	ldr	r3, [pc, #504]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d05b      	beq.n	8003dbc <HAL_RCC_OscConfig+0x108>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d157      	bne.n	8003dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e242      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d18:	d106      	bne.n	8003d28 <HAL_RCC_OscConfig+0x74>
 8003d1a:	4b76      	ldr	r3, [pc, #472]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a75      	ldr	r2, [pc, #468]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e01d      	b.n	8003d64 <HAL_RCC_OscConfig+0xb0>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x98>
 8003d32:	4b70      	ldr	r3, [pc, #448]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a6f      	ldr	r2, [pc, #444]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6c      	ldr	r2, [pc, #432]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e00b      	b.n	8003d64 <HAL_RCC_OscConfig+0xb0>
 8003d4c:	4b69      	ldr	r3, [pc, #420]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a68      	ldr	r2, [pc, #416]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b66      	ldr	r3, [pc, #408]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a65      	ldr	r2, [pc, #404]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7ff f93a 	bl	8002fe4 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d74:	f7ff f936 	bl	8002fe4 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	; 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e207      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	4b5b      	ldr	r3, [pc, #364]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0xc0>
 8003d92:	e014      	b.n	8003dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7ff f926 	bl	8002fe4 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7ff f922 	bl	8002fe4 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e1f3      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dae:	4b51      	ldr	r3, [pc, #324]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0xe8>
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d063      	beq.n	8003e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dca:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d11c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de2:	4b44      	ldr	r3, [pc, #272]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d116      	bne.n	8003e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_RCC_OscConfig+0x152>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d001      	beq.n	8003e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e1c7      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e06:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4937      	ldr	r1, [pc, #220]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1a:	e03a      	b.n	8003e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e24:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x244>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7ff f8db 	bl	8002fe4 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e32:	f7ff f8d7 	bl	8002fe4 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e1a8      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e44:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4925      	ldr	r1, [pc, #148]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]
 8003e64:	e015      	b.n	8003e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_RCC_OscConfig+0x244>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7ff f8ba 	bl	8002fe4 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e74:	f7ff f8b6 	bl	8002fe4 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e187      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d036      	beq.n	8003f0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <HAL_RCC_OscConfig+0x248>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7ff f89a 	bl	8002fe4 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb4:	f7ff f896 	bl	8002fe4 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e167      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x200>
 8003ed2:	e01b      	b.n	8003f0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed4:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_OscConfig+0x248>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eda:	f7ff f883 	bl	8002fe4 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	e00e      	b.n	8003f00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee2:	f7ff f87f 	bl	8002fe4 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d907      	bls.n	8003f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e150      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	42470000 	.word	0x42470000
 8003efc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	4b88      	ldr	r3, [pc, #544]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ea      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8097 	beq.w	8004048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1e:	4b81      	ldr	r3, [pc, #516]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	4b7d      	ldr	r3, [pc, #500]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a7c      	ldr	r2, [pc, #496]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3a:	4b7a      	ldr	r3, [pc, #488]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b77      	ldr	r3, [pc, #476]	; (8004128 <HAL_RCC_OscConfig+0x474>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d118      	bne.n	8003f88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f56:	4b74      	ldr	r3, [pc, #464]	; (8004128 <HAL_RCC_OscConfig+0x474>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a73      	ldr	r2, [pc, #460]	; (8004128 <HAL_RCC_OscConfig+0x474>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f62:	f7ff f83f 	bl	8002fe4 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6a:	f7ff f83b 	bl	8002fe4 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e10c      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	4b6a      	ldr	r3, [pc, #424]	; (8004128 <HAL_RCC_OscConfig+0x474>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x2ea>
 8003f90:	4b64      	ldr	r3, [pc, #400]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	4a63      	ldr	r2, [pc, #396]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9c:	e01c      	b.n	8003fd8 <HAL_RCC_OscConfig+0x324>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x30c>
 8003fa6:	4b5f      	ldr	r3, [pc, #380]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	4a5e      	ldr	r2, [pc, #376]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fac:	f043 0304 	orr.w	r3, r3, #4
 8003fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb2:	4b5c      	ldr	r3, [pc, #368]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a5b      	ldr	r2, [pc, #364]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbe:	e00b      	b.n	8003fd8 <HAL_RCC_OscConfig+0x324>
 8003fc0:	4b58      	ldr	r3, [pc, #352]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	4a57      	ldr	r2, [pc, #348]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70
 8003fcc:	4b55      	ldr	r3, [pc, #340]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a54      	ldr	r2, [pc, #336]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	f023 0304 	bic.w	r3, r3, #4
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d015      	beq.n	800400c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7ff f800 	bl	8002fe4 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fe fffc 	bl	8002fe4 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e0cb      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffe:	4b49      	ldr	r3, [pc, #292]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0ee      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x334>
 800400a:	e014      	b.n	8004036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400c:	f7fe ffea 	bl	8002fe4 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004012:	e00a      	b.n	800402a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004014:	f7fe ffe6 	bl	8002fe4 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e0b5      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402a:	4b3e      	ldr	r3, [pc, #248]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1ee      	bne.n	8004014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d105      	bne.n	8004048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403c:	4b39      	ldr	r3, [pc, #228]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	4a38      	ldr	r2, [pc, #224]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8004042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004046:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80a1 	beq.w	8004194 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004052:	4b34      	ldr	r3, [pc, #208]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b08      	cmp	r3, #8
 800405c:	d05c      	beq.n	8004118 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d141      	bne.n	80040ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b31      	ldr	r3, [pc, #196]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fe ffba 	bl	8002fe4 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7fe ffb6 	bl	8002fe4 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e087      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	4b27      	ldr	r3, [pc, #156]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	019b      	lsls	r3, r3, #6
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	061b      	lsls	r3, r3, #24
 80040b6:	491b      	ldr	r1, [pc, #108]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040bc:	4b1b      	ldr	r3, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x478>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c2:	f7fe ff8f 	bl	8002fe4 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fe ff8b 	bl	8002fe4 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e05c      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040dc:	4b11      	ldr	r3, [pc, #68]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x416>
 80040e8:	e054      	b.n	8004194 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <HAL_RCC_OscConfig+0x478>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fe ff78 	bl	8002fe4 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe ff74 	bl	8002fe4 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e045      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x444>
 8004116:	e03d      	b.n	8004194 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d107      	bne.n	8004130 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e038      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
 8004124:	40023800 	.word	0x40023800
 8004128:	40007000 	.word	0x40007000
 800412c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004130:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_RCC_OscConfig+0x4ec>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d028      	beq.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d121      	bne.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d11a      	bne.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004160:	4013      	ands	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004168:	4293      	cmp	r3, r2
 800416a:	d111      	bne.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	3b01      	subs	r3, #1
 800417a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d107      	bne.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800

080041a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0cc      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041b8:	4b68      	ldr	r3, [pc, #416]	; (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d90c      	bls.n	80041e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b65      	ldr	r3, [pc, #404]	; (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ce:	4b63      	ldr	r3, [pc, #396]	; (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d001      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0b8      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f8:	4b59      	ldr	r3, [pc, #356]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a58      	ldr	r2, [pc, #352]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004210:	4b53      	ldr	r3, [pc, #332]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4a52      	ldr	r2, [pc, #328]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800421a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421c:	4b50      	ldr	r3, [pc, #320]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	494d      	ldr	r1, [pc, #308]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d044      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d107      	bne.n	8004252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d119      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e07f      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d003      	beq.n	8004262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800425e:	2b03      	cmp	r3, #3
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004262:	4b3f      	ldr	r3, [pc, #252]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e06f      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004272:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e067      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004282:	4b37      	ldr	r3, [pc, #220]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f023 0203 	bic.w	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4934      	ldr	r1, [pc, #208]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	4313      	orrs	r3, r2
 8004292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004294:	f7fe fea6 	bl	8002fe4 <HAL_GetTick>
 8004298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429a:	e00a      	b.n	80042b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429c:	f7fe fea2 	bl	8002fe4 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e04f      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	4b2b      	ldr	r3, [pc, #172]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 020c 	and.w	r2, r3, #12
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d1eb      	bne.n	800429c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042c4:	4b25      	ldr	r3, [pc, #148]	; (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d20c      	bcs.n	80042ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b22      	ldr	r3, [pc, #136]	; (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b20      	ldr	r3, [pc, #128]	; (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e032      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4916      	ldr	r1, [pc, #88]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004316:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	490e      	ldr	r1, [pc, #56]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800432a:	f000 f821 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 800432e:	4602      	mov	r2, r0
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	091b      	lsrs	r3, r3, #4
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	490a      	ldr	r1, [pc, #40]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 800433c:	5ccb      	ldrb	r3, [r1, r3]
 800433e:	fa22 f303 	lsr.w	r3, r2, r3
 8004342:	4a09      	ldr	r2, [pc, #36]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_RCC_ClockConfig+0x1c8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fe06 	bl	8002f5c <HAL_InitTick>

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40023c00 	.word	0x40023c00
 8004360:	40023800 	.word	0x40023800
 8004364:	08008020 	.word	0x08008020
 8004368:	20000014 	.word	0x20000014
 800436c:	20000018 	.word	0x20000018

08004370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004374:	b094      	sub	sp, #80	; 0x50
 8004376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	647b      	str	r3, [r7, #68]	; 0x44
 800437c:	2300      	movs	r3, #0
 800437e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004380:	2300      	movs	r3, #0
 8004382:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004388:	4b79      	ldr	r3, [pc, #484]	; (8004570 <HAL_RCC_GetSysClockFreq+0x200>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b08      	cmp	r3, #8
 8004392:	d00d      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004394:	2b08      	cmp	r3, #8
 8004396:	f200 80e1 	bhi.w	800455c <HAL_RCC_GetSysClockFreq+0x1ec>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x34>
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x3a>
 80043a2:	e0db      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043a4:	4b73      	ldr	r3, [pc, #460]	; (8004574 <HAL_RCC_GetSysClockFreq+0x204>)
 80043a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043a8:	e0db      	b.n	8004562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043aa:	4b73      	ldr	r3, [pc, #460]	; (8004578 <HAL_RCC_GetSysClockFreq+0x208>)
 80043ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ae:	e0d8      	b.n	8004562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043b0:	4b6f      	ldr	r3, [pc, #444]	; (8004570 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ba:	4b6d      	ldr	r3, [pc, #436]	; (8004570 <HAL_RCC_GetSysClockFreq+0x200>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d063      	beq.n	800448e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c6:	4b6a      	ldr	r3, [pc, #424]	; (8004570 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	2200      	movs	r2, #0
 80043ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80043d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d8:	633b      	str	r3, [r7, #48]	; 0x30
 80043da:	2300      	movs	r3, #0
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
 80043de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043e2:	4622      	mov	r2, r4
 80043e4:	462b      	mov	r3, r5
 80043e6:	f04f 0000 	mov.w	r0, #0
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	0159      	lsls	r1, r3, #5
 80043f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f4:	0150      	lsls	r0, r2, #5
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4621      	mov	r1, r4
 80043fc:	1a51      	subs	r1, r2, r1
 80043fe:	6139      	str	r1, [r7, #16]
 8004400:	4629      	mov	r1, r5
 8004402:	eb63 0301 	sbc.w	r3, r3, r1
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004414:	4659      	mov	r1, fp
 8004416:	018b      	lsls	r3, r1, #6
 8004418:	4651      	mov	r1, sl
 800441a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800441e:	4651      	mov	r1, sl
 8004420:	018a      	lsls	r2, r1, #6
 8004422:	4651      	mov	r1, sl
 8004424:	ebb2 0801 	subs.w	r8, r2, r1
 8004428:	4659      	mov	r1, fp
 800442a:	eb63 0901 	sbc.w	r9, r3, r1
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800443a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800443e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004442:	4690      	mov	r8, r2
 8004444:	4699      	mov	r9, r3
 8004446:	4623      	mov	r3, r4
 8004448:	eb18 0303 	adds.w	r3, r8, r3
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	462b      	mov	r3, r5
 8004450:	eb49 0303 	adc.w	r3, r9, r3
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004462:	4629      	mov	r1, r5
 8004464:	024b      	lsls	r3, r1, #9
 8004466:	4621      	mov	r1, r4
 8004468:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800446c:	4621      	mov	r1, r4
 800446e:	024a      	lsls	r2, r1, #9
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004476:	2200      	movs	r2, #0
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
 800447a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800447c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004480:	f7fc fc74 	bl	8000d6c <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4613      	mov	r3, r2
 800448a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800448c:	e058      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800448e:	4b38      	ldr	r3, [pc, #224]	; (8004570 <HAL_RCC_GetSysClockFreq+0x200>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	099b      	lsrs	r3, r3, #6
 8004494:	2200      	movs	r2, #0
 8004496:	4618      	mov	r0, r3
 8004498:	4611      	mov	r1, r2
 800449a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800449e:	623b      	str	r3, [r7, #32]
 80044a0:	2300      	movs	r3, #0
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
 80044a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044a8:	4642      	mov	r2, r8
 80044aa:	464b      	mov	r3, r9
 80044ac:	f04f 0000 	mov.w	r0, #0
 80044b0:	f04f 0100 	mov.w	r1, #0
 80044b4:	0159      	lsls	r1, r3, #5
 80044b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ba:	0150      	lsls	r0, r2, #5
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4641      	mov	r1, r8
 80044c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80044c6:	4649      	mov	r1, r9
 80044c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044e0:	ebb2 040a 	subs.w	r4, r2, sl
 80044e4:	eb63 050b 	sbc.w	r5, r3, fp
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	00eb      	lsls	r3, r5, #3
 80044f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044f6:	00e2      	lsls	r2, r4, #3
 80044f8:	4614      	mov	r4, r2
 80044fa:	461d      	mov	r5, r3
 80044fc:	4643      	mov	r3, r8
 80044fe:	18e3      	adds	r3, r4, r3
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	464b      	mov	r3, r9
 8004504:	eb45 0303 	adc.w	r3, r5, r3
 8004508:	607b      	str	r3, [r7, #4]
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004516:	4629      	mov	r1, r5
 8004518:	028b      	lsls	r3, r1, #10
 800451a:	4621      	mov	r1, r4
 800451c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004520:	4621      	mov	r1, r4
 8004522:	028a      	lsls	r2, r1, #10
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452a:	2200      	movs	r2, #0
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	61fa      	str	r2, [r7, #28]
 8004530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004534:	f7fc fc1a 	bl	8000d6c <__aeabi_uldivmod>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4613      	mov	r3, r2
 800453e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_GetSysClockFreq+0x200>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	3301      	adds	r3, #1
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800455a:	e002      	b.n	8004562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetSysClockFreq+0x204>)
 800455e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004564:	4618      	mov	r0, r3
 8004566:	3750      	adds	r7, #80	; 0x50
 8004568:	46bd      	mov	sp, r7
 800456a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800
 8004574:	00f42400 	.word	0x00f42400
 8004578:	007a1200 	.word	0x007a1200

0800457c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <HAL_RCC_GetHCLKFreq+0x14>)
 8004582:	681b      	ldr	r3, [r3, #0]
}
 8004584:	4618      	mov	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20000014 	.word	0x20000014

08004594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004598:	f7ff fff0 	bl	800457c <HAL_RCC_GetHCLKFreq>
 800459c:	4602      	mov	r2, r0
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	0a9b      	lsrs	r3, r3, #10
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4903      	ldr	r1, [pc, #12]	; (80045b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045aa:	5ccb      	ldrb	r3, [r1, r3]
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40023800 	.word	0x40023800
 80045b8:	08008030 	.word	0x08008030

080045bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045c0:	f7ff ffdc 	bl	800457c <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	0b5b      	lsrs	r3, r3, #13
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4903      	ldr	r1, [pc, #12]	; (80045e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40023800 	.word	0x40023800
 80045e0:	08008030 	.word	0x08008030

080045e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e04c      	b.n	8004690 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d111      	bne.n	8004626 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f001 fba4 	bl	8005d58 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a1f      	ldr	r2, [pc, #124]	; (8004698 <HAL_TIM_Base_Init+0xb4>)
 800461c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3304      	adds	r3, #4
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f001 f8c1 	bl	80057c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	08002abd 	.word	0x08002abd

0800469c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d001      	beq.n	80046b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e03c      	b.n	800472e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1e      	ldr	r2, [pc, #120]	; (800473c <HAL_TIM_Base_Start+0xa0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_TIM_Base_Start+0x5c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ce:	d013      	beq.n	80046f8 <HAL_TIM_Base_Start+0x5c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1a      	ldr	r2, [pc, #104]	; (8004740 <HAL_TIM_Base_Start+0xa4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_TIM_Base_Start+0x5c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a19      	ldr	r2, [pc, #100]	; (8004744 <HAL_TIM_Base_Start+0xa8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_TIM_Base_Start+0x5c>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a17      	ldr	r2, [pc, #92]	; (8004748 <HAL_TIM_Base_Start+0xac>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIM_Base_Start+0x5c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a16      	ldr	r2, [pc, #88]	; (800474c <HAL_TIM_Base_Start+0xb0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d111      	bne.n	800471c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b06      	cmp	r3, #6
 8004708:	d010      	beq.n	800472c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471a:	e007      	b.n	800472c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40000c00 	.word	0x40000c00
 800474c:	40014000 	.word	0x40014000

08004750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d001      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e044      	b.n	80047f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_TIM_Base_Start_IT+0xb0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x6c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004792:	d013      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x6c>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <HAL_TIM_Base_Start_IT+0xb4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x6c>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a19      	ldr	r2, [pc, #100]	; (8004808 <HAL_TIM_Base_Start_IT+0xb8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x6c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a17      	ldr	r2, [pc, #92]	; (800480c <HAL_TIM_Base_Start_IT+0xbc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x6c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a16      	ldr	r2, [pc, #88]	; (8004810 <HAL_TIM_Base_Start_IT+0xc0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d111      	bne.n	80047e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d010      	beq.n	80047f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047de:	e007      	b.n	80047f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40010000 	.word	0x40010000
 8004804:	40000400 	.word	0x40000400
 8004808:	40000800 	.word	0x40000800
 800480c:	40000c00 	.word	0x40000c00
 8004810:	40014000 	.word	0x40014000

08004814 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e04c      	b.n	80048c0 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d111      	bne.n	8004856 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f001 fa8c 	bl	8005d58 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	2b00      	cmp	r3, #0
 8004846:	d102      	bne.n	800484e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <HAL_TIM_OC_Init+0xb4>)
 800484c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3304      	adds	r3, #4
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f000 ffa9 	bl	80057c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	080048cd 	.word	0x080048cd

080048cc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e04c      	b.n	800498c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d111      	bne.n	8004922 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f001 fa26 	bl	8005d58 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_TIM_PWM_Init+0xb4>)
 8004918:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3304      	adds	r3, #4
 8004932:	4619      	mov	r1, r3
 8004934:	4610      	mov	r0, r2
 8004936:	f000 ff43 	bl	80057c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	08004999 	.word	0x08004999

08004998 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d109      	bne.n	80049d0 <HAL_TIM_PWM_Start+0x24>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	bf14      	ite	ne
 80049c8:	2301      	movne	r3, #1
 80049ca:	2300      	moveq	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	e022      	b.n	8004a16 <HAL_TIM_PWM_Start+0x6a>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d109      	bne.n	80049ea <HAL_TIM_PWM_Start+0x3e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	bf14      	ite	ne
 80049e2:	2301      	movne	r3, #1
 80049e4:	2300      	moveq	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	e015      	b.n	8004a16 <HAL_TIM_PWM_Start+0x6a>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d109      	bne.n	8004a04 <HAL_TIM_PWM_Start+0x58>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	bf14      	ite	ne
 80049fc:	2301      	movne	r3, #1
 80049fe:	2300      	moveq	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e008      	b.n	8004a16 <HAL_TIM_PWM_Start+0x6a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e068      	b.n	8004af0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d104      	bne.n	8004a2e <HAL_TIM_PWM_Start+0x82>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a2c:	e013      	b.n	8004a56 <HAL_TIM_PWM_Start+0xaa>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d104      	bne.n	8004a3e <HAL_TIM_PWM_Start+0x92>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a3c:	e00b      	b.n	8004a56 <HAL_TIM_PWM_Start+0xaa>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_PWM_Start+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a4c:	e003      	b.n	8004a56 <HAL_TIM_PWM_Start+0xaa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	6839      	ldr	r1, [r7, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 f954 	bl	8005d0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a23      	ldr	r2, [pc, #140]	; (8004af8 <HAL_TIM_PWM_Start+0x14c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d107      	bne.n	8004a7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1d      	ldr	r2, [pc, #116]	; (8004af8 <HAL_TIM_PWM_Start+0x14c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d018      	beq.n	8004aba <HAL_TIM_PWM_Start+0x10e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d013      	beq.n	8004aba <HAL_TIM_PWM_Start+0x10e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a19      	ldr	r2, [pc, #100]	; (8004afc <HAL_TIM_PWM_Start+0x150>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00e      	beq.n	8004aba <HAL_TIM_PWM_Start+0x10e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <HAL_TIM_PWM_Start+0x154>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d009      	beq.n	8004aba <HAL_TIM_PWM_Start+0x10e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a16      	ldr	r2, [pc, #88]	; (8004b04 <HAL_TIM_PWM_Start+0x158>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <HAL_TIM_PWM_Start+0x10e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <HAL_TIM_PWM_Start+0x15c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d111      	bne.n	8004ade <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b06      	cmp	r3, #6
 8004aca:	d010      	beq.n	8004aee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004adc:	e007      	b.n	8004aee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40010000 	.word	0x40010000
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	40014000 	.word	0x40014000

08004b0c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b1c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b24:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b2c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b34:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d108      	bne.n	8004b4e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b3c:	7bbb      	ldrb	r3, [r7, #14]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d105      	bne.n	8004b4e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b42:	7b7b      	ldrb	r3, [r7, #13]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d102      	bne.n	8004b4e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b48:	7b3b      	ldrb	r3, [r7, #12]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d001      	beq.n	8004b52 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e03b      	b.n	8004bca <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0202 	orr.w	r2, r2, #2
 8004b80:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0204 	orr.w	r2, r2, #4
 8004b90:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2201      	movs	r2, #1
 8004b98:	2100      	movs	r1, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f001 f8b6 	bl	8005d0c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	2104      	movs	r1, #4
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f001 f8af 	bl	8005d0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d107      	bne.n	8004bc8 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40010000 	.word	0x40010000

08004bd8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0a2      	b.n	8004d32 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d111      	bne.n	8004c1c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f001 f8a9 	bl	8005d58 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d102      	bne.n	8004c14 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a4a      	ldr	r2, [pc, #296]	; (8004d3c <HAL_TIM_Encoder_Init+0x164>)
 8004c12:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6812      	ldr	r2, [r2, #0]
 8004c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c32:	f023 0307 	bic.w	r3, r3, #7
 8004c36:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	4610      	mov	r0, r2
 8004c44:	f000 fdbc 	bl	80057c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c70:	f023 0303 	bic.w	r3, r3, #3
 8004c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	4313      	orrs	r3, r2
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c8e:	f023 030c 	bic.w	r3, r3, #12
 8004c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	4313      	orrs	r3, r2
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	011a      	lsls	r2, r3, #4
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	031b      	lsls	r3, r3, #12
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ccc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004cd4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	08002b85 	.word	0x08002b85

08004d40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d110      	bne.n	8004d92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d102      	bne.n	8004d7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d76:	7b7b      	ldrb	r3, [r7, #13]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d001      	beq.n	8004d80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e069      	b.n	8004e54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d90:	e031      	b.n	8004df6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d110      	bne.n	8004dba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d98:	7bbb      	ldrb	r3, [r7, #14]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d102      	bne.n	8004da4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d9e:	7b3b      	ldrb	r3, [r7, #12]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d001      	beq.n	8004da8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e055      	b.n	8004e54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004db8:	e01d      	b.n	8004df6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d108      	bne.n	8004dd2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dc0:	7bbb      	ldrb	r3, [r7, #14]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d105      	bne.n	8004dd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dc6:	7b7b      	ldrb	r3, [r7, #13]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d102      	bne.n	8004dd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dcc:	7b3b      	ldrb	r3, [r7, #12]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d001      	beq.n	8004dd6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e03e      	b.n	8004e54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2202      	movs	r2, #2
 8004dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_TIM_Encoder_Start+0xc4>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d008      	beq.n	8004e14 <HAL_TIM_Encoder_Start+0xd4>
 8004e02:	e00f      	b.n	8004e24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 ff7d 	bl	8005d0c <TIM_CCxChannelCmd>
      break;
 8004e12:	e016      	b.n	8004e42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	2104      	movs	r1, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 ff75 	bl	8005d0c <TIM_CCxChannelCmd>
      break;
 8004e22:	e00e      	b.n	8004e42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 ff6d 	bl	8005d0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2201      	movs	r2, #1
 8004e38:	2104      	movs	r1, #4
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 ff66 	bl	8005d0c <TIM_CCxChannelCmd>
      break;
 8004e40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0201 	orr.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d128      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d121      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0202 	mvn.w	r2, #2
 8004e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	4798      	blx	r3
 8004ea8:	e009      	b.n	8004ebe <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d128      	bne.n	8004f24 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d121      	bne.n	8004f24 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0204 	mvn.w	r2, #4
 8004ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
 8004f08:	e009      	b.n	8004f1e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d128      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d121      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0208 	mvn.w	r2, #8
 8004f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
 8004f68:	e009      	b.n	8004f7e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b10      	cmp	r3, #16
 8004f90:	d128      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d121      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0210 	mvn.w	r2, #16
 8004fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2208      	movs	r2, #8
 8004fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	4798      	blx	r3
 8004fc8:	e009      	b.n	8004fde <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d110      	bne.n	8005014 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d109      	bne.n	8005014 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0201 	mvn.w	r2, #1
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501e:	2b80      	cmp	r3, #128	; 0x80
 8005020:	d110      	bne.n	8005044 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502c:	2b80      	cmp	r3, #128	; 0x80
 800502e:	d109      	bne.n	8005044 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d110      	bne.n	8005074 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d109      	bne.n	8005074 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b20      	cmp	r3, #32
 8005080:	d110      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b20      	cmp	r3, #32
 800508e:	d109      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0220 	mvn.w	r2, #32
 8005098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050a4:	bf00      	nop
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e048      	b.n	800515c <HAL_TIM_OC_ConfigChannel+0xb0>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b0c      	cmp	r3, #12
 80050d6:	d839      	bhi.n	800514c <HAL_TIM_OC_ConfigChannel+0xa0>
 80050d8:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80050da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050de:	bf00      	nop
 80050e0:	08005115 	.word	0x08005115
 80050e4:	0800514d 	.word	0x0800514d
 80050e8:	0800514d 	.word	0x0800514d
 80050ec:	0800514d 	.word	0x0800514d
 80050f0:	08005123 	.word	0x08005123
 80050f4:	0800514d 	.word	0x0800514d
 80050f8:	0800514d 	.word	0x0800514d
 80050fc:	0800514d 	.word	0x0800514d
 8005100:	08005131 	.word	0x08005131
 8005104:	0800514d 	.word	0x0800514d
 8005108:	0800514d 	.word	0x0800514d
 800510c:	0800514d 	.word	0x0800514d
 8005110:	0800513f 	.word	0x0800513f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fbd0 	bl	80058c0 <TIM_OC1_SetConfig>
      break;
 8005120:	e017      	b.n	8005152 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fc2f 	bl	800598c <TIM_OC2_SetConfig>
      break;
 800512e:	e010      	b.n	8005152 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fc94 	bl	8005a64 <TIM_OC3_SetConfig>
      break;
 800513c:	e009      	b.n	8005152 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fcf7 	bl	8005b38 <TIM_OC4_SetConfig>
      break;
 800514a:	e002      	b.n	8005152 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
      break;
 8005150:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800515a:	7dfb      	ldrb	r3, [r7, #23]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800517e:	2302      	movs	r3, #2
 8005180:	e0ae      	b.n	80052e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b0c      	cmp	r3, #12
 800518e:	f200 809f 	bhi.w	80052d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005192:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	080051cd 	.word	0x080051cd
 800519c:	080052d1 	.word	0x080052d1
 80051a0:	080052d1 	.word	0x080052d1
 80051a4:	080052d1 	.word	0x080052d1
 80051a8:	0800520d 	.word	0x0800520d
 80051ac:	080052d1 	.word	0x080052d1
 80051b0:	080052d1 	.word	0x080052d1
 80051b4:	080052d1 	.word	0x080052d1
 80051b8:	0800524f 	.word	0x0800524f
 80051bc:	080052d1 	.word	0x080052d1
 80051c0:	080052d1 	.word	0x080052d1
 80051c4:	080052d1 	.word	0x080052d1
 80051c8:	0800528f 	.word	0x0800528f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fb74 	bl	80058c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0208 	orr.w	r2, r2, #8
 80051e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0204 	bic.w	r2, r2, #4
 80051f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6999      	ldr	r1, [r3, #24]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	619a      	str	r2, [r3, #24]
      break;
 800520a:	e064      	b.n	80052d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fbba 	bl	800598c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6999      	ldr	r1, [r3, #24]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	021a      	lsls	r2, r3, #8
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	619a      	str	r2, [r3, #24]
      break;
 800524c:	e043      	b.n	80052d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fc05 	bl	8005a64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0208 	orr.w	r2, r2, #8
 8005268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0204 	bic.w	r2, r2, #4
 8005278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69d9      	ldr	r1, [r3, #28]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	61da      	str	r2, [r3, #28]
      break;
 800528c:	e023      	b.n	80052d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fc4f 	bl	8005b38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69da      	ldr	r2, [r3, #28]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69d9      	ldr	r1, [r3, #28]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	021a      	lsls	r2, r3, #8
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	61da      	str	r2, [r3, #28]
      break;
 80052ce:	e002      	b.n	80052d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	75fb      	strb	r3, [r7, #23]
      break;
 80052d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_TIM_ConfigClockSource+0x1c>
 8005300:	2302      	movs	r3, #2
 8005302:	e0b4      	b.n	800546e <HAL_TIM_ConfigClockSource+0x186>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800532a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533c:	d03e      	beq.n	80053bc <HAL_TIM_ConfigClockSource+0xd4>
 800533e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005342:	f200 8087 	bhi.w	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534a:	f000 8086 	beq.w	800545a <HAL_TIM_ConfigClockSource+0x172>
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	d87f      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 8005354:	2b70      	cmp	r3, #112	; 0x70
 8005356:	d01a      	beq.n	800538e <HAL_TIM_ConfigClockSource+0xa6>
 8005358:	2b70      	cmp	r3, #112	; 0x70
 800535a:	d87b      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 800535c:	2b60      	cmp	r3, #96	; 0x60
 800535e:	d050      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x11a>
 8005360:	2b60      	cmp	r3, #96	; 0x60
 8005362:	d877      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 8005364:	2b50      	cmp	r3, #80	; 0x50
 8005366:	d03c      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005368:	2b50      	cmp	r3, #80	; 0x50
 800536a:	d873      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d058      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x13a>
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	d86f      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 8005374:	2b30      	cmp	r3, #48	; 0x30
 8005376:	d064      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x15a>
 8005378:	2b30      	cmp	r3, #48	; 0x30
 800537a:	d86b      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 800537c:	2b20      	cmp	r3, #32
 800537e:	d060      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x15a>
 8005380:	2b20      	cmp	r3, #32
 8005382:	d867      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b00      	cmp	r3, #0
 8005386:	d05c      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x15a>
 8005388:	2b10      	cmp	r3, #16
 800538a:	d05a      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x15a>
 800538c:	e062      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6899      	ldr	r1, [r3, #8]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f000 fc95 	bl	8005ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	609a      	str	r2, [r3, #8]
      break;
 80053ba:	e04f      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6899      	ldr	r1, [r3, #8]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f000 fc7e 	bl	8005ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053de:	609a      	str	r2, [r3, #8]
      break;
 80053e0:	e03c      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f000 fbf2 	bl	8005bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2150      	movs	r1, #80	; 0x50
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fc4b 	bl	8005c96 <TIM_ITRx_SetConfig>
      break;
 8005400:	e02c      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6859      	ldr	r1, [r3, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	461a      	mov	r2, r3
 8005410:	f000 fc11 	bl	8005c36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2160      	movs	r1, #96	; 0x60
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fc3b 	bl	8005c96 <TIM_ITRx_SetConfig>
      break;
 8005420:	e01c      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6859      	ldr	r1, [r3, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	461a      	mov	r2, r3
 8005430:	f000 fbd2 	bl	8005bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2140      	movs	r1, #64	; 0x40
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fc2b 	bl	8005c96 <TIM_ITRx_SetConfig>
      break;
 8005440:	e00c      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f000 fc22 	bl	8005c96 <TIM_ITRx_SetConfig>
      break;
 8005452:	e003      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
      break;
 8005458:	e000      	b.n	800545c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800545a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	460b      	mov	r3, r1
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e135      	b.n	80057b4 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_TIM_RegisterCallback+0x2a>
 8005552:	2302      	movs	r3, #2
 8005554:	e12e      	b.n	80057b4 <HAL_TIM_RegisterCallback+0x288>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b01      	cmp	r3, #1
 8005568:	f040 80ba 	bne.w	80056e0 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800556c:	7afb      	ldrb	r3, [r7, #11]
 800556e:	2b1a      	cmp	r3, #26
 8005570:	f200 80b3 	bhi.w	80056da <HAL_TIM_RegisterCallback+0x1ae>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <HAL_TIM_RegisterCallback+0x50>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	080055e9 	.word	0x080055e9
 8005580:	080055f1 	.word	0x080055f1
 8005584:	080055f9 	.word	0x080055f9
 8005588:	08005601 	.word	0x08005601
 800558c:	08005609 	.word	0x08005609
 8005590:	08005611 	.word	0x08005611
 8005594:	08005619 	.word	0x08005619
 8005598:	08005621 	.word	0x08005621
 800559c:	08005629 	.word	0x08005629
 80055a0:	08005631 	.word	0x08005631
 80055a4:	08005639 	.word	0x08005639
 80055a8:	08005641 	.word	0x08005641
 80055ac:	08005649 	.word	0x08005649
 80055b0:	08005651 	.word	0x08005651
 80055b4:	08005659 	.word	0x08005659
 80055b8:	08005663 	.word	0x08005663
 80055bc:	0800566d 	.word	0x0800566d
 80055c0:	08005677 	.word	0x08005677
 80055c4:	08005681 	.word	0x08005681
 80055c8:	0800568b 	.word	0x0800568b
 80055cc:	08005695 	.word	0x08005695
 80055d0:	0800569f 	.word	0x0800569f
 80055d4:	080056a9 	.word	0x080056a9
 80055d8:	080056b3 	.word	0x080056b3
 80055dc:	080056bd 	.word	0x080056bd
 80055e0:	080056c7 	.word	0x080056c7
 80055e4:	080056d1 	.word	0x080056d1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80055ee:	e0dc      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80055f6:	e0d8      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80055fe:	e0d4      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8005606:	e0d0      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800560e:	e0cc      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8005616:	e0c8      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800561e:	e0c4      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8005626:	e0c0      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800562e:	e0bc      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005636:	e0b8      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800563e:	e0b4      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8005646:	e0b0      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800564e:	e0ac      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8005656:	e0a8      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8005660:	e0a3      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800566a:	e09e      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8005674:	e099      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800567e:	e094      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8005688:	e08f      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8005692:	e08a      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800569c:	e085      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80056a6:	e080      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80056b0:	e07b      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80056ba:	e076      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80056c4:	e071      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80056ce:	e06c      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80056d8:	e067      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	75fb      	strb	r3, [r7, #23]
        break;
 80056de:	e064      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d15c      	bne.n	80057a6 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80056ec:	7afb      	ldrb	r3, [r7, #11]
 80056ee:	2b0d      	cmp	r3, #13
 80056f0:	d856      	bhi.n	80057a0 <HAL_TIM_RegisterCallback+0x274>
 80056f2:	a201      	add	r2, pc, #4	; (adr r2, 80056f8 <HAL_TIM_RegisterCallback+0x1cc>)
 80056f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f8:	08005731 	.word	0x08005731
 80056fc:	08005739 	.word	0x08005739
 8005700:	08005741 	.word	0x08005741
 8005704:	08005749 	.word	0x08005749
 8005708:	08005751 	.word	0x08005751
 800570c:	08005759 	.word	0x08005759
 8005710:	08005761 	.word	0x08005761
 8005714:	08005769 	.word	0x08005769
 8005718:	08005771 	.word	0x08005771
 800571c:	08005779 	.word	0x08005779
 8005720:	08005781 	.word	0x08005781
 8005724:	08005789 	.word	0x08005789
 8005728:	08005791 	.word	0x08005791
 800572c:	08005799 	.word	0x08005799
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005736:	e038      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800573e:	e034      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005746:	e030      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800574e:	e02c      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8005756:	e028      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800575e:	e024      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8005766:	e020      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800576e:	e01c      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8005776:	e018      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800577e:	e014      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005786:	e010      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800578e:	e00c      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8005796:	e008      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800579e:	e004      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	75fb      	strb	r3, [r7, #23]
        break;
 80057a4:	e001      	b.n	80057aa <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a34      	ldr	r2, [pc, #208]	; (80058a4 <TIM_Base_SetConfig+0xe4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00f      	beq.n	80057f8 <TIM_Base_SetConfig+0x38>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057de:	d00b      	beq.n	80057f8 <TIM_Base_SetConfig+0x38>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a31      	ldr	r2, [pc, #196]	; (80058a8 <TIM_Base_SetConfig+0xe8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_Base_SetConfig+0x38>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a30      	ldr	r2, [pc, #192]	; (80058ac <TIM_Base_SetConfig+0xec>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_Base_SetConfig+0x38>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a2f      	ldr	r2, [pc, #188]	; (80058b0 <TIM_Base_SetConfig+0xf0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d108      	bne.n	800580a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a25      	ldr	r2, [pc, #148]	; (80058a4 <TIM_Base_SetConfig+0xe4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01b      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005818:	d017      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a22      	ldr	r2, [pc, #136]	; (80058a8 <TIM_Base_SetConfig+0xe8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a21      	ldr	r2, [pc, #132]	; (80058ac <TIM_Base_SetConfig+0xec>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00f      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a20      	ldr	r2, [pc, #128]	; (80058b0 <TIM_Base_SetConfig+0xf0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00b      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a1f      	ldr	r2, [pc, #124]	; (80058b4 <TIM_Base_SetConfig+0xf4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d007      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a1e      	ldr	r2, [pc, #120]	; (80058b8 <TIM_Base_SetConfig+0xf8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a1d      	ldr	r2, [pc, #116]	; (80058bc <TIM_Base_SetConfig+0xfc>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d108      	bne.n	800585c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <TIM_Base_SetConfig+0xe4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d103      	bne.n	8005890 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	615a      	str	r2, [r3, #20]
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40014400 	.word	0x40014400
 80058bc:	40014800 	.word	0x40014800

080058c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	f023 0201 	bic.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f023 0302 	bic.w	r3, r3, #2
 8005908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a1c      	ldr	r2, [pc, #112]	; (8005988 <TIM_OC1_SetConfig+0xc8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10c      	bne.n	8005936 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f023 0308 	bic.w	r3, r3, #8
 8005922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a13      	ldr	r2, [pc, #76]	; (8005988 <TIM_OC1_SetConfig+0xc8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d111      	bne.n	8005962 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800594c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	621a      	str	r2, [r3, #32]
}
 800597c:	bf00      	nop
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	40010000 	.word	0x40010000

0800598c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f023 0210 	bic.w	r2, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0320 	bic.w	r3, r3, #32
 80059d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <TIM_OC2_SetConfig+0xd4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d10d      	bne.n	8005a08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <TIM_OC2_SetConfig+0xd4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d113      	bne.n	8005a38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40010000 	.word	0x40010000

08005a64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0303 	bic.w	r3, r3, #3
 8005a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <TIM_OC3_SetConfig+0xd0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d10d      	bne.n	8005ade <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a14      	ldr	r2, [pc, #80]	; (8005b34 <TIM_OC3_SetConfig+0xd0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d113      	bne.n	8005b0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	621a      	str	r2, [r3, #32]
}
 8005b28:	bf00      	nop
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40010000 	.word	0x40010000

08005b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	031b      	lsls	r3, r3, #12
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a10      	ldr	r2, [pc, #64]	; (8005bd4 <TIM_OC4_SetConfig+0x9c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d109      	bne.n	8005bac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	019b      	lsls	r3, r3, #6
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40010000 	.word	0x40010000

08005bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f023 0201 	bic.w	r2, r3, #1
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f023 030a 	bic.w	r3, r3, #10
 8005c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b087      	sub	sp, #28
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f023 0210 	bic.w	r2, r3, #16
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	031b      	lsls	r3, r3, #12
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f043 0307 	orr.w	r3, r3, #7
 8005cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	609a      	str	r2, [r3, #8]
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	021a      	lsls	r2, r3, #8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	609a      	str	r2, [r3, #8]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 031f 	and.w	r3, r3, #31
 8005d1e:	2201      	movs	r2, #1
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a1a      	ldr	r2, [r3, #32]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	401a      	ands	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f003 031f 	and.w	r3, r3, #31
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	fa01 f303 	lsl.w	r3, r1, r3
 8005d44:	431a      	orrs	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
	...

08005d58 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a1c      	ldr	r2, [pc, #112]	; (8005dd4 <TIM_ResetCallback+0x7c>)
 8005d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <TIM_ResetCallback+0x80>)
 8005d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1a      	ldr	r2, [pc, #104]	; (8005ddc <TIM_ResetCallback+0x84>)
 8005d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a19      	ldr	r2, [pc, #100]	; (8005de0 <TIM_ResetCallback+0x88>)
 8005d7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <TIM_ResetCallback+0x8c>)
 8005d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <TIM_ResetCallback+0x90>)
 8005d8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a16      	ldr	r2, [pc, #88]	; (8005dec <TIM_ResetCallback+0x94>)
 8005d94:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a15      	ldr	r2, [pc, #84]	; (8005df0 <TIM_ResetCallback+0x98>)
 8005d9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <TIM_ResetCallback+0x9c>)
 8005da4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a13      	ldr	r2, [pc, #76]	; (8005df8 <TIM_ResetCallback+0xa0>)
 8005dac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a12      	ldr	r2, [pc, #72]	; (8005dfc <TIM_ResetCallback+0xa4>)
 8005db4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a11      	ldr	r2, [pc, #68]	; (8005e00 <TIM_ResetCallback+0xa8>)
 8005dbc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a10      	ldr	r2, [pc, #64]	; (8005e04 <TIM_ResetCallback+0xac>)
 8005dc4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	0800276d 	.word	0x0800276d
 8005dd8:	08005477 	.word	0x08005477
 8005ddc:	080054ef 	.word	0x080054ef
 8005de0:	08005503 	.word	0x08005503
 8005de4:	0800549f 	.word	0x0800549f
 8005de8:	080054b3 	.word	0x080054b3
 8005dec:	0800548b 	.word	0x0800548b
 8005df0:	080054c7 	.word	0x080054c7
 8005df4:	080054db 	.word	0x080054db
 8005df8:	08005517 	.word	0x08005517
 8005dfc:	08005f89 	.word	0x08005f89
 8005e00:	08005f9d 	.word	0x08005f9d
 8005e04:	08005fb1 	.word	0x08005fb1

08005e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e050      	b.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6c:	d013      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a18      	ldr	r2, [pc, #96]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a16      	ldr	r2, [pc, #88]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a15      	ldr	r2, [pc, #84]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a13      	ldr	r2, [pc, #76]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d10c      	bne.n	8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	40014000 	.word	0x40014000

08005ee4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e03d      	b.n	8005f7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e04a      	b.n	800606c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d111      	bne.n	8006006 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fc0a 	bl	8006804 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d102      	bne.n	8005ffe <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a1e      	ldr	r2, [pc, #120]	; (8006074 <HAL_UART_Init+0xb0>)
 8005ffc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2224      	movs	r2, #36	; 0x24
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800601c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fe04 	bl	8006c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006032:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695a      	ldr	r2, [r3, #20]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006042:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006052:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	08002c99 	.word	0x08002c99

08006078 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	460b      	mov	r3, r1
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d107      	bne.n	80060a0 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	f043 0220 	orr.w	r2, r3, #32
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e08c      	b.n	80061ba <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_UART_RegisterCallback+0x36>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e085      	b.n	80061ba <HAL_UART_RegisterCallback+0x142>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d151      	bne.n	8006166 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80060c2:	7afb      	ldrb	r3, [r7, #11]
 80060c4:	2b0c      	cmp	r3, #12
 80060c6:	d845      	bhi.n	8006154 <HAL_UART_RegisterCallback+0xdc>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <HAL_UART_RegisterCallback+0x58>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	08006105 	.word	0x08006105
 80060d4:	0800610d 	.word	0x0800610d
 80060d8:	08006115 	.word	0x08006115
 80060dc:	0800611d 	.word	0x0800611d
 80060e0:	08006125 	.word	0x08006125
 80060e4:	0800612d 	.word	0x0800612d
 80060e8:	08006135 	.word	0x08006135
 80060ec:	0800613d 	.word	0x0800613d
 80060f0:	08006155 	.word	0x08006155
 80060f4:	08006155 	.word	0x08006155
 80060f8:	08006155 	.word	0x08006155
 80060fc:	08006145 	.word	0x08006145
 8006100:	0800614d 	.word	0x0800614d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800610a:	e051      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006112:	e04d      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800611a:	e049      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006122:	e045      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800612a:	e041      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006132:	e03d      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800613a:	e039      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006142:	e035      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800614a:	e031      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006152:	e02d      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	f043 0220 	orr.w	r2, r3, #32
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	75fb      	strb	r3, [r7, #23]
        break;
 8006164:	e024      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d116      	bne.n	80061a0 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8006172:	7afb      	ldrb	r3, [r7, #11]
 8006174:	2b0b      	cmp	r3, #11
 8006176:	d002      	beq.n	800617e <HAL_UART_RegisterCallback+0x106>
 8006178:	2b0c      	cmp	r3, #12
 800617a:	d004      	beq.n	8006186 <HAL_UART_RegisterCallback+0x10e>
 800617c:	e007      	b.n	800618e <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006184:	e014      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800618c:	e010      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f043 0220 	orr.w	r2, r3, #32
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	75fb      	strb	r3, [r7, #23]
        break;
 800619e:	e007      	b.n	80061b0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	f043 0220 	orr.w	r2, r3, #32
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop

080061c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d11d      	bne.n	800621e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <HAL_UART_Receive_IT+0x26>
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e016      	b.n	8006220 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_UART_Receive_IT+0x38>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e00f      	b.n	8006220 <HAL_UART_Receive_IT+0x58>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800620e:	88fb      	ldrh	r3, [r7, #6]
 8006210:	461a      	mov	r2, r3
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fb2d 	bl	8006874 <UART_Start_Receive_IT>
 800621a:	4603      	mov	r3, r0
 800621c:	e000      	b.n	8006220 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800621e:	2302      	movs	r3, #2
  }
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b0ba      	sub	sp, #232	; 0xe8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800624e:	2300      	movs	r3, #0
 8006250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006254:	2300      	movs	r3, #0
 8006256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10f      	bne.n	800628e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800626e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <HAL_UART_IRQHandler+0x66>
 800627a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fc13 	bl	8006ab2 <UART_Receive_IT>
      return;
 800628c:	e25b      	b.n	8006746 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800628e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80e1 	beq.w	800645a <HAL_UART_IRQHandler+0x232>
 8006298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80d4 	beq.w	800645a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <HAL_UART_IRQHandler+0xae>
 80062be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	f043 0201 	orr.w	r2, r3, #1
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <HAL_UART_IRQHandler+0xd2>
 80062e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f043 0202 	orr.w	r2, r3, #2
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <HAL_UART_IRQHandler+0xf6>
 8006306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	f043 0204 	orr.w	r2, r3, #4
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d011      	beq.n	800634e <HAL_UART_IRQHandler+0x126>
 800632a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d105      	bne.n	8006342 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d005      	beq.n	800634e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f043 0208 	orr.w	r2, r3, #8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 81f2 	beq.w	800673c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_UART_IRQHandler+0x14e>
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fb9e 	bl	8006ab2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006380:	2b40      	cmp	r3, #64	; 0x40
 8006382:	bf0c      	ite	eq
 8006384:	2301      	moveq	r3, #1
 8006386:	2300      	movne	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f003 0308 	and.w	r3, r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <HAL_UART_IRQHandler+0x17a>
 800639a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d051      	beq.n	8006446 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 faa4 	bl	80068f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	2b40      	cmp	r3, #64	; 0x40
 80063b4:	d142      	bne.n	800643c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3314      	adds	r3, #20
 80063bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3314      	adds	r3, #20
 80063de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1d9      	bne.n	80063b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	2b00      	cmp	r3, #0
 8006408:	d013      	beq.n	8006432 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	4a7f      	ldr	r2, [pc, #508]	; (800660c <HAL_UART_IRQHandler+0x3e4>)
 8006410:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	4618      	mov	r0, r3
 8006418:	f7fd f820 	bl	800345c <HAL_DMA_Abort_IT>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d019      	beq.n	8006456 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800642c:	4610      	mov	r0, r2
 800642e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	e011      	b.n	8006456 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800643a:	e00c      	b.n	8006456 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006444:	e007      	b.n	8006456 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006454:	e172      	b.n	800673c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006456:	bf00      	nop
    return;
 8006458:	e170      	b.n	800673c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	2b01      	cmp	r3, #1
 8006460:	f040 814c 	bne.w	80066fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8145 	beq.w	80066fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 813e 	beq.w	80066fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006480:	2300      	movs	r3, #0
 8006482:	60bb      	str	r3, [r7, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60bb      	str	r3, [r7, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	60bb      	str	r3, [r7, #8]
 8006494:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a0:	2b40      	cmp	r3, #64	; 0x40
 80064a2:	f040 80b5 	bne.w	8006610 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 8142 	beq.w	8006740 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064c4:	429a      	cmp	r2, r3
 80064c6:	f080 813b 	bcs.w	8006740 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064dc:	f000 8088 	beq.w	80065f0 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	330c      	adds	r3, #12
 80064e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800650c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006518:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800651c:	e841 2300 	strex	r3, r2, [r1]
 8006520:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1d9      	bne.n	80064e0 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3314      	adds	r3, #20
 8006532:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006536:	e853 3f00 	ldrex	r3, [r3]
 800653a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800653c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800653e:	f023 0301 	bic.w	r3, r3, #1
 8006542:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3314      	adds	r3, #20
 800654c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006550:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006554:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006558:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e1      	bne.n	800652c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3314      	adds	r3, #20
 800656e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800657a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800657e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3314      	adds	r3, #20
 8006588:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800658c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800658e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006592:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800659a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e3      	bne.n	8006568 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	330c      	adds	r3, #12
 80065b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c0:	f023 0310 	bic.w	r3, r3, #16
 80065c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	330c      	adds	r3, #12
 80065ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80065d4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e3      	bne.n	80065ae <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fc fec6 	bl	800337c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80065fc:	b292      	uxth	r2, r2
 80065fe:	1a8a      	subs	r2, r1, r2
 8006600:	b292      	uxth	r2, r2
 8006602:	4611      	mov	r1, r2
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006608:	e09a      	b.n	8006740 <HAL_UART_IRQHandler+0x518>
 800660a:	bf00      	nop
 800660c:	080069b7 	.word	0x080069b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006618:	b29b      	uxth	r3, r3
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 808c 	beq.w	8006744 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800662c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8087 	beq.w	8006744 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	330c      	adds	r3, #12
 800663c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800664c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	330c      	adds	r3, #12
 8006656:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800665a:	647a      	str	r2, [r7, #68]	; 0x44
 800665c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e3      	bne.n	8006636 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3314      	adds	r3, #20
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	623b      	str	r3, [r7, #32]
   return(result);
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	f023 0301 	bic.w	r3, r3, #1
 8006684:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3314      	adds	r3, #20
 800668e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006692:	633a      	str	r2, [r7, #48]	; 0x30
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e3      	bne.n	800666e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0310 	bic.w	r3, r3, #16
 80066ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80066d8:	61fa      	str	r2, [r7, #28]
 80066da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	69b9      	ldr	r1, [r7, #24]
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	e841 2300 	strex	r3, r2, [r1]
 80066e4:	617b      	str	r3, [r7, #20]
   return(result);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e3      	bne.n	80066b4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066f0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80066f4:	4611      	mov	r1, r2
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066fa:	e023      	b.n	8006744 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006704:	2b00      	cmp	r3, #0
 8006706:	d009      	beq.n	800671c <HAL_UART_IRQHandler+0x4f4>
 8006708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800670c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f963 	bl	80069e0 <UART_Transmit_IT>
    return;
 800671a:	e014      	b.n	8006746 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800671c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00e      	beq.n	8006746 <HAL_UART_IRQHandler+0x51e>
 8006728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006730:	2b00      	cmp	r3, #0
 8006732:	d008      	beq.n	8006746 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f9a3 	bl	8006a80 <UART_EndTransmit_IT>
    return;
 800673a:	e004      	b.n	8006746 <HAL_UART_IRQHandler+0x51e>
    return;
 800673c:	bf00      	nop
 800673e:	e002      	b.n	8006746 <HAL_UART_IRQHandler+0x51e>
      return;
 8006740:	bf00      	nop
 8006742:	e000      	b.n	8006746 <HAL_UART_IRQHandler+0x51e>
      return;
 8006744:	bf00      	nop
  }
}
 8006746:	37e8      	adds	r7, #232	; 0xe8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a10      	ldr	r2, [pc, #64]	; (8006850 <UART_InitCallbacksToDefault+0x4c>)
 8006810:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a0f      	ldr	r2, [pc, #60]	; (8006854 <UART_InitCallbacksToDefault+0x50>)
 8006816:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a0f      	ldr	r2, [pc, #60]	; (8006858 <UART_InitCallbacksToDefault+0x54>)
 800681c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a0e      	ldr	r2, [pc, #56]	; (800685c <UART_InitCallbacksToDefault+0x58>)
 8006822:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a0e      	ldr	r2, [pc, #56]	; (8006860 <UART_InitCallbacksToDefault+0x5c>)
 8006828:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a0d      	ldr	r2, [pc, #52]	; (8006864 <UART_InitCallbacksToDefault+0x60>)
 800682e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a0d      	ldr	r2, [pc, #52]	; (8006868 <UART_InitCallbacksToDefault+0x64>)
 8006834:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a0c      	ldr	r2, [pc, #48]	; (800686c <UART_InitCallbacksToDefault+0x68>)
 800683a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a0c      	ldr	r2, [pc, #48]	; (8006870 <UART_InitCallbacksToDefault+0x6c>)
 8006840:	669a      	str	r2, [r3, #104]	; 0x68

}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	08006761 	.word	0x08006761
 8006854:	0800674d 	.word	0x0800674d
 8006858:	08006789 	.word	0x08006789
 800685c:	08006775 	.word	0x08006775
 8006860:	0800679d 	.word	0x0800679d
 8006864:	080067b1 	.word	0x080067b1
 8006868:	080067c5 	.word	0x080067c5
 800686c:	080067d9 	.word	0x080067d9
 8006870:	080067ed 	.word	0x080067ed

08006874 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	4613      	mov	r3, r2
 8006880:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	88fa      	ldrh	r2, [r7, #6]
 800688c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	88fa      	ldrh	r2, [r7, #6]
 8006892:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2222      	movs	r2, #34	; 0x22
 800689e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d007      	beq.n	80068c2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	695a      	ldr	r2, [r3, #20]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0201 	orr.w	r2, r2, #1
 80068d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0220 	orr.w	r2, r2, #32
 80068e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b095      	sub	sp, #84	; 0x54
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	330c      	adds	r3, #12
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800690e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	330c      	adds	r3, #12
 8006916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006918:	643a      	str	r2, [r7, #64]	; 0x40
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800691e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e5      	bne.n	80068f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3314      	adds	r3, #20
 8006932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	61fb      	str	r3, [r7, #28]
   return(result);
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	f023 0301 	bic.w	r3, r3, #1
 8006942:	64bb      	str	r3, [r7, #72]	; 0x48
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3314      	adds	r3, #20
 800694a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800694c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800694e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006954:	e841 2300 	strex	r3, r2, [r1]
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e5      	bne.n	800692c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	2b01      	cmp	r3, #1
 8006966:	d119      	bne.n	800699c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	330c      	adds	r3, #12
 800696e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	60bb      	str	r3, [r7, #8]
   return(result);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f023 0310 	bic.w	r3, r3, #16
 800697e:	647b      	str	r3, [r7, #68]	; 0x44
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006988:	61ba      	str	r2, [r7, #24]
 800698a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6979      	ldr	r1, [r7, #20]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	613b      	str	r3, [r7, #16]
   return(result);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e5      	bne.n	8006968 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069aa:	bf00      	nop
 80069ac:	3754      	adds	r7, #84	; 0x54
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b21      	cmp	r3, #33	; 0x21
 80069f2:	d13e      	bne.n	8006a72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fc:	d114      	bne.n	8006a28 <UART_Transmit_IT+0x48>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d110      	bne.n	8006a28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	1c9a      	adds	r2, r3, #2
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	621a      	str	r2, [r3, #32]
 8006a26:	e008      	b.n	8006a3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	1c59      	adds	r1, r3, #1
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6211      	str	r1, [r2, #32]
 8006a32:	781a      	ldrb	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	4619      	mov	r1, r3
 8006a48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10f      	bne.n	8006a6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e000      	b.n	8006a74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a72:	2302      	movs	r3, #2
  }
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b08c      	sub	sp, #48	; 0x30
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b22      	cmp	r3, #34	; 0x22
 8006ac4:	f040 80ad 	bne.w	8006c22 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad0:	d117      	bne.n	8006b02 <UART_Receive_IT+0x50>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d113      	bne.n	8006b02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	1c9a      	adds	r2, r3, #2
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	629a      	str	r2, [r3, #40]	; 0x28
 8006b00:	e026      	b.n	8006b50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b14:	d007      	beq.n	8006b26 <UART_Receive_IT+0x74>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <UART_Receive_IT+0x82>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d106      	bne.n	8006b34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	e008      	b.n	8006b46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d15c      	bne.n	8006c1e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0220 	bic.w	r2, r2, #32
 8006b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	695a      	ldr	r2, [r3, #20]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0201 	bic.w	r2, r2, #1
 8006b92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d136      	bne.n	8006c12 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	330c      	adds	r3, #12
 8006bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f023 0310 	bic.w	r3, r3, #16
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	330c      	adds	r3, #12
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bca:	623a      	str	r2, [r7, #32]
 8006bcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	69f9      	ldr	r1, [r7, #28]
 8006bd0:	6a3a      	ldr	r2, [r7, #32]
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e5      	bne.n	8006baa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0310 	and.w	r3, r3, #16
 8006be8:	2b10      	cmp	r3, #16
 8006bea:	d10a      	bne.n	8006c02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	4798      	blx	r3
 8006c10:	e003      	b.n	8006c1a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e002      	b.n	8006c24 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e000      	b.n	8006c24 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8006c22:	2302      	movs	r3, #2
  }
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3730      	adds	r7, #48	; 0x30
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c30:	b0c0      	sub	sp, #256	; 0x100
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c48:	68d9      	ldr	r1, [r3, #12]
 8006c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	ea40 0301 	orr.w	r3, r0, r1
 8006c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	431a      	orrs	r2, r3
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c84:	f021 010c 	bic.w	r1, r1, #12
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c92:	430b      	orrs	r3, r1
 8006c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca6:	6999      	ldr	r1, [r3, #24]
 8006ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	ea40 0301 	orr.w	r3, r0, r1
 8006cb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4b8f      	ldr	r3, [pc, #572]	; (8006ef8 <UART_SetConfig+0x2cc>)
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d005      	beq.n	8006ccc <UART_SetConfig+0xa0>
 8006cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	4b8d      	ldr	r3, [pc, #564]	; (8006efc <UART_SetConfig+0x2d0>)
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d104      	bne.n	8006cd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ccc:	f7fd fc76 	bl	80045bc <HAL_RCC_GetPCLK2Freq>
 8006cd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006cd4:	e003      	b.n	8006cde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cd6:	f7fd fc5d 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 8006cda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce8:	f040 810c 	bne.w	8006f04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006cfe:	4622      	mov	r2, r4
 8006d00:	462b      	mov	r3, r5
 8006d02:	1891      	adds	r1, r2, r2
 8006d04:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d06:	415b      	adcs	r3, r3
 8006d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d0e:	4621      	mov	r1, r4
 8006d10:	eb12 0801 	adds.w	r8, r2, r1
 8006d14:	4629      	mov	r1, r5
 8006d16:	eb43 0901 	adc.w	r9, r3, r1
 8006d1a:	f04f 0200 	mov.w	r2, #0
 8006d1e:	f04f 0300 	mov.w	r3, #0
 8006d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d2e:	4690      	mov	r8, r2
 8006d30:	4699      	mov	r9, r3
 8006d32:	4623      	mov	r3, r4
 8006d34:	eb18 0303 	adds.w	r3, r8, r3
 8006d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	eb49 0303 	adc.w	r3, r9, r3
 8006d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	18db      	adds	r3, r3, r3
 8006d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d60:	4613      	mov	r3, r2
 8006d62:	eb42 0303 	adc.w	r3, r2, r3
 8006d66:	657b      	str	r3, [r7, #84]	; 0x54
 8006d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d70:	f7f9 fffc 	bl	8000d6c <__aeabi_uldivmod>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4b61      	ldr	r3, [pc, #388]	; (8006f00 <UART_SetConfig+0x2d4>)
 8006d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	011c      	lsls	r4, r3, #4
 8006d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d94:	4642      	mov	r2, r8
 8006d96:	464b      	mov	r3, r9
 8006d98:	1891      	adds	r1, r2, r2
 8006d9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d9c:	415b      	adcs	r3, r3
 8006d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006da4:	4641      	mov	r1, r8
 8006da6:	eb12 0a01 	adds.w	sl, r2, r1
 8006daa:	4649      	mov	r1, r9
 8006dac:	eb43 0b01 	adc.w	fp, r3, r1
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dc4:	4692      	mov	sl, r2
 8006dc6:	469b      	mov	fp, r3
 8006dc8:	4643      	mov	r3, r8
 8006dca:	eb1a 0303 	adds.w	r3, sl, r3
 8006dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8006dd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006de8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006dec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006df0:	460b      	mov	r3, r1
 8006df2:	18db      	adds	r3, r3, r3
 8006df4:	643b      	str	r3, [r7, #64]	; 0x40
 8006df6:	4613      	mov	r3, r2
 8006df8:	eb42 0303 	adc.w	r3, r2, r3
 8006dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8006dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e06:	f7f9 ffb1 	bl	8000d6c <__aeabi_uldivmod>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	4b3b      	ldr	r3, [pc, #236]	; (8006f00 <UART_SetConfig+0x2d4>)
 8006e12:	fba3 2301 	umull	r2, r3, r3, r1
 8006e16:	095b      	lsrs	r3, r3, #5
 8006e18:	2264      	movs	r2, #100	; 0x64
 8006e1a:	fb02 f303 	mul.w	r3, r2, r3
 8006e1e:	1acb      	subs	r3, r1, r3
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e26:	4b36      	ldr	r3, [pc, #216]	; (8006f00 <UART_SetConfig+0x2d4>)
 8006e28:	fba3 2302 	umull	r2, r3, r3, r2
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e34:	441c      	add	r4, r3
 8006e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e48:	4642      	mov	r2, r8
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	1891      	adds	r1, r2, r2
 8006e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e50:	415b      	adcs	r3, r3
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e58:	4641      	mov	r1, r8
 8006e5a:	1851      	adds	r1, r2, r1
 8006e5c:	6339      	str	r1, [r7, #48]	; 0x30
 8006e5e:	4649      	mov	r1, r9
 8006e60:	414b      	adcs	r3, r1
 8006e62:	637b      	str	r3, [r7, #52]	; 0x34
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e70:	4659      	mov	r1, fp
 8006e72:	00cb      	lsls	r3, r1, #3
 8006e74:	4651      	mov	r1, sl
 8006e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e7a:	4651      	mov	r1, sl
 8006e7c:	00ca      	lsls	r2, r1, #3
 8006e7e:	4610      	mov	r0, r2
 8006e80:	4619      	mov	r1, r3
 8006e82:	4603      	mov	r3, r0
 8006e84:	4642      	mov	r2, r8
 8006e86:	189b      	adds	r3, r3, r2
 8006e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	460a      	mov	r2, r1
 8006e90:	eb42 0303 	adc.w	r3, r2, r3
 8006e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ea4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006eac:	460b      	mov	r3, r1
 8006eae:	18db      	adds	r3, r3, r3
 8006eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	eb42 0303 	adc.w	r3, r2, r3
 8006eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ec2:	f7f9 ff53 	bl	8000d6c <__aeabi_uldivmod>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <UART_SetConfig+0x2d4>)
 8006ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	2164      	movs	r1, #100	; 0x64
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	3332      	adds	r3, #50	; 0x32
 8006ede:	4a08      	ldr	r2, [pc, #32]	; (8006f00 <UART_SetConfig+0x2d4>)
 8006ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	f003 0207 	and.w	r2, r3, #7
 8006eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4422      	add	r2, r4
 8006ef2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ef4:	e105      	b.n	8007102 <UART_SetConfig+0x4d6>
 8006ef6:	bf00      	nop
 8006ef8:	40011000 	.word	0x40011000
 8006efc:	40011400 	.word	0x40011400
 8006f00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f16:	4642      	mov	r2, r8
 8006f18:	464b      	mov	r3, r9
 8006f1a:	1891      	adds	r1, r2, r2
 8006f1c:	6239      	str	r1, [r7, #32]
 8006f1e:	415b      	adcs	r3, r3
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
 8006f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f26:	4641      	mov	r1, r8
 8006f28:	1854      	adds	r4, r2, r1
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	eb43 0501 	adc.w	r5, r3, r1
 8006f30:	f04f 0200 	mov.w	r2, #0
 8006f34:	f04f 0300 	mov.w	r3, #0
 8006f38:	00eb      	lsls	r3, r5, #3
 8006f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f3e:	00e2      	lsls	r2, r4, #3
 8006f40:	4614      	mov	r4, r2
 8006f42:	461d      	mov	r5, r3
 8006f44:	4643      	mov	r3, r8
 8006f46:	18e3      	adds	r3, r4, r3
 8006f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f4c:	464b      	mov	r3, r9
 8006f4e:	eb45 0303 	adc.w	r3, r5, r3
 8006f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f66:	f04f 0200 	mov.w	r2, #0
 8006f6a:	f04f 0300 	mov.w	r3, #0
 8006f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f72:	4629      	mov	r1, r5
 8006f74:	008b      	lsls	r3, r1, #2
 8006f76:	4621      	mov	r1, r4
 8006f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	008a      	lsls	r2, r1, #2
 8006f80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f84:	f7f9 fef2 	bl	8000d6c <__aeabi_uldivmod>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4b60      	ldr	r3, [pc, #384]	; (8007110 <UART_SetConfig+0x4e4>)
 8006f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	011c      	lsls	r4, r3, #4
 8006f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006fa8:	4642      	mov	r2, r8
 8006faa:	464b      	mov	r3, r9
 8006fac:	1891      	adds	r1, r2, r2
 8006fae:	61b9      	str	r1, [r7, #24]
 8006fb0:	415b      	adcs	r3, r3
 8006fb2:	61fb      	str	r3, [r7, #28]
 8006fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fb8:	4641      	mov	r1, r8
 8006fba:	1851      	adds	r1, r2, r1
 8006fbc:	6139      	str	r1, [r7, #16]
 8006fbe:	4649      	mov	r1, r9
 8006fc0:	414b      	adcs	r3, r1
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	f04f 0300 	mov.w	r3, #0
 8006fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fd0:	4659      	mov	r1, fp
 8006fd2:	00cb      	lsls	r3, r1, #3
 8006fd4:	4651      	mov	r1, sl
 8006fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fda:	4651      	mov	r1, sl
 8006fdc:	00ca      	lsls	r2, r1, #3
 8006fde:	4610      	mov	r0, r2
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	189b      	adds	r3, r3, r2
 8006fe8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fec:	464b      	mov	r3, r9
 8006fee:	460a      	mov	r2, r1
 8006ff0:	eb42 0303 	adc.w	r3, r2, r3
 8006ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	67bb      	str	r3, [r7, #120]	; 0x78
 8007002:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007010:	4649      	mov	r1, r9
 8007012:	008b      	lsls	r3, r1, #2
 8007014:	4641      	mov	r1, r8
 8007016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800701a:	4641      	mov	r1, r8
 800701c:	008a      	lsls	r2, r1, #2
 800701e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007022:	f7f9 fea3 	bl	8000d6c <__aeabi_uldivmod>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4b39      	ldr	r3, [pc, #228]	; (8007110 <UART_SetConfig+0x4e4>)
 800702c:	fba3 1302 	umull	r1, r3, r3, r2
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	2164      	movs	r1, #100	; 0x64
 8007034:	fb01 f303 	mul.w	r3, r1, r3
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	3332      	adds	r3, #50	; 0x32
 800703e:	4a34      	ldr	r2, [pc, #208]	; (8007110 <UART_SetConfig+0x4e4>)
 8007040:	fba2 2303 	umull	r2, r3, r2, r3
 8007044:	095b      	lsrs	r3, r3, #5
 8007046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800704a:	441c      	add	r4, r3
 800704c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007050:	2200      	movs	r2, #0
 8007052:	673b      	str	r3, [r7, #112]	; 0x70
 8007054:	677a      	str	r2, [r7, #116]	; 0x74
 8007056:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800705a:	4642      	mov	r2, r8
 800705c:	464b      	mov	r3, r9
 800705e:	1891      	adds	r1, r2, r2
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	415b      	adcs	r3, r3
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800706a:	4641      	mov	r1, r8
 800706c:	1851      	adds	r1, r2, r1
 800706e:	6039      	str	r1, [r7, #0]
 8007070:	4649      	mov	r1, r9
 8007072:	414b      	adcs	r3, r1
 8007074:	607b      	str	r3, [r7, #4]
 8007076:	f04f 0200 	mov.w	r2, #0
 800707a:	f04f 0300 	mov.w	r3, #0
 800707e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007082:	4659      	mov	r1, fp
 8007084:	00cb      	lsls	r3, r1, #3
 8007086:	4651      	mov	r1, sl
 8007088:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800708c:	4651      	mov	r1, sl
 800708e:	00ca      	lsls	r2, r1, #3
 8007090:	4610      	mov	r0, r2
 8007092:	4619      	mov	r1, r3
 8007094:	4603      	mov	r3, r0
 8007096:	4642      	mov	r2, r8
 8007098:	189b      	adds	r3, r3, r2
 800709a:	66bb      	str	r3, [r7, #104]	; 0x68
 800709c:	464b      	mov	r3, r9
 800709e:	460a      	mov	r2, r1
 80070a0:	eb42 0303 	adc.w	r3, r2, r3
 80070a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	663b      	str	r3, [r7, #96]	; 0x60
 80070b0:	667a      	str	r2, [r7, #100]	; 0x64
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070be:	4649      	mov	r1, r9
 80070c0:	008b      	lsls	r3, r1, #2
 80070c2:	4641      	mov	r1, r8
 80070c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070c8:	4641      	mov	r1, r8
 80070ca:	008a      	lsls	r2, r1, #2
 80070cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070d0:	f7f9 fe4c 	bl	8000d6c <__aeabi_uldivmod>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <UART_SetConfig+0x4e4>)
 80070da:	fba3 1302 	umull	r1, r3, r3, r2
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	2164      	movs	r1, #100	; 0x64
 80070e2:	fb01 f303 	mul.w	r3, r1, r3
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	3332      	adds	r3, #50	; 0x32
 80070ec:	4a08      	ldr	r2, [pc, #32]	; (8007110 <UART_SetConfig+0x4e4>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	f003 020f 	and.w	r2, r3, #15
 80070f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4422      	add	r2, r4
 8007100:	609a      	str	r2, [r3, #8]
}
 8007102:	bf00      	nop
 8007104:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007108:	46bd      	mov	sp, r7
 800710a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800710e:	bf00      	nop
 8007110:	51eb851f 	.word	0x51eb851f

08007114 <__errno>:
 8007114:	4b01      	ldr	r3, [pc, #4]	; (800711c <__errno+0x8>)
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	20000020 	.word	0x20000020

08007120 <__libc_init_array>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	4d0d      	ldr	r5, [pc, #52]	; (8007158 <__libc_init_array+0x38>)
 8007124:	4c0d      	ldr	r4, [pc, #52]	; (800715c <__libc_init_array+0x3c>)
 8007126:	1b64      	subs	r4, r4, r5
 8007128:	10a4      	asrs	r4, r4, #2
 800712a:	2600      	movs	r6, #0
 800712c:	42a6      	cmp	r6, r4
 800712e:	d109      	bne.n	8007144 <__libc_init_array+0x24>
 8007130:	4d0b      	ldr	r5, [pc, #44]	; (8007160 <__libc_init_array+0x40>)
 8007132:	4c0c      	ldr	r4, [pc, #48]	; (8007164 <__libc_init_array+0x44>)
 8007134:	f000 ff66 	bl	8008004 <_init>
 8007138:	1b64      	subs	r4, r4, r5
 800713a:	10a4      	asrs	r4, r4, #2
 800713c:	2600      	movs	r6, #0
 800713e:	42a6      	cmp	r6, r4
 8007140:	d105      	bne.n	800714e <__libc_init_array+0x2e>
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	f855 3b04 	ldr.w	r3, [r5], #4
 8007148:	4798      	blx	r3
 800714a:	3601      	adds	r6, #1
 800714c:	e7ee      	b.n	800712c <__libc_init_array+0xc>
 800714e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007152:	4798      	blx	r3
 8007154:	3601      	adds	r6, #1
 8007156:	e7f2      	b.n	800713e <__libc_init_array+0x1e>
 8007158:	08008078 	.word	0x08008078
 800715c:	08008078 	.word	0x08008078
 8007160:	08008078 	.word	0x08008078
 8007164:	0800807c 	.word	0x0800807c

08007168 <memset>:
 8007168:	4402      	add	r2, r0
 800716a:	4603      	mov	r3, r0
 800716c:	4293      	cmp	r3, r2
 800716e:	d100      	bne.n	8007172 <memset+0xa>
 8007170:	4770      	bx	lr
 8007172:	f803 1b01 	strb.w	r1, [r3], #1
 8007176:	e7f9      	b.n	800716c <memset+0x4>

08007178 <pow>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	ed2d 8b02 	vpush	{d8}
 800717e:	eeb0 8a40 	vmov.f32	s16, s0
 8007182:	eef0 8a60 	vmov.f32	s17, s1
 8007186:	ec55 4b11 	vmov	r4, r5, d1
 800718a:	f000 f891 	bl	80072b0 <__ieee754_pow>
 800718e:	4622      	mov	r2, r4
 8007190:	462b      	mov	r3, r5
 8007192:	4620      	mov	r0, r4
 8007194:	4629      	mov	r1, r5
 8007196:	ec57 6b10 	vmov	r6, r7, d0
 800719a:	f7f9 fc73 	bl	8000a84 <__aeabi_dcmpun>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d13b      	bne.n	800721a <pow+0xa2>
 80071a2:	ec51 0b18 	vmov	r0, r1, d8
 80071a6:	2200      	movs	r2, #0
 80071a8:	2300      	movs	r3, #0
 80071aa:	f7f9 fc39 	bl	8000a20 <__aeabi_dcmpeq>
 80071ae:	b1b8      	cbz	r0, 80071e0 <pow+0x68>
 80071b0:	2200      	movs	r2, #0
 80071b2:	2300      	movs	r3, #0
 80071b4:	4620      	mov	r0, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	f7f9 fc32 	bl	8000a20 <__aeabi_dcmpeq>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d146      	bne.n	800724e <pow+0xd6>
 80071c0:	ec45 4b10 	vmov	d0, r4, r5
 80071c4:	f000 fe8d 	bl	8007ee2 <finite>
 80071c8:	b338      	cbz	r0, 800721a <pow+0xa2>
 80071ca:	2200      	movs	r2, #0
 80071cc:	2300      	movs	r3, #0
 80071ce:	4620      	mov	r0, r4
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7f9 fc2f 	bl	8000a34 <__aeabi_dcmplt>
 80071d6:	b300      	cbz	r0, 800721a <pow+0xa2>
 80071d8:	f7ff ff9c 	bl	8007114 <__errno>
 80071dc:	2322      	movs	r3, #34	; 0x22
 80071de:	e01b      	b.n	8007218 <pow+0xa0>
 80071e0:	ec47 6b10 	vmov	d0, r6, r7
 80071e4:	f000 fe7d 	bl	8007ee2 <finite>
 80071e8:	b9e0      	cbnz	r0, 8007224 <pow+0xac>
 80071ea:	eeb0 0a48 	vmov.f32	s0, s16
 80071ee:	eef0 0a68 	vmov.f32	s1, s17
 80071f2:	f000 fe76 	bl	8007ee2 <finite>
 80071f6:	b1a8      	cbz	r0, 8007224 <pow+0xac>
 80071f8:	ec45 4b10 	vmov	d0, r4, r5
 80071fc:	f000 fe71 	bl	8007ee2 <finite>
 8007200:	b180      	cbz	r0, 8007224 <pow+0xac>
 8007202:	4632      	mov	r2, r6
 8007204:	463b      	mov	r3, r7
 8007206:	4630      	mov	r0, r6
 8007208:	4639      	mov	r1, r7
 800720a:	f7f9 fc3b 	bl	8000a84 <__aeabi_dcmpun>
 800720e:	2800      	cmp	r0, #0
 8007210:	d0e2      	beq.n	80071d8 <pow+0x60>
 8007212:	f7ff ff7f 	bl	8007114 <__errno>
 8007216:	2321      	movs	r3, #33	; 0x21
 8007218:	6003      	str	r3, [r0, #0]
 800721a:	ecbd 8b02 	vpop	{d8}
 800721e:	ec47 6b10 	vmov	d0, r6, r7
 8007222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007224:	2200      	movs	r2, #0
 8007226:	2300      	movs	r3, #0
 8007228:	4630      	mov	r0, r6
 800722a:	4639      	mov	r1, r7
 800722c:	f7f9 fbf8 	bl	8000a20 <__aeabi_dcmpeq>
 8007230:	2800      	cmp	r0, #0
 8007232:	d0f2      	beq.n	800721a <pow+0xa2>
 8007234:	eeb0 0a48 	vmov.f32	s0, s16
 8007238:	eef0 0a68 	vmov.f32	s1, s17
 800723c:	f000 fe51 	bl	8007ee2 <finite>
 8007240:	2800      	cmp	r0, #0
 8007242:	d0ea      	beq.n	800721a <pow+0xa2>
 8007244:	ec45 4b10 	vmov	d0, r4, r5
 8007248:	f000 fe4b 	bl	8007ee2 <finite>
 800724c:	e7c3      	b.n	80071d6 <pow+0x5e>
 800724e:	4f01      	ldr	r7, [pc, #4]	; (8007254 <pow+0xdc>)
 8007250:	2600      	movs	r6, #0
 8007252:	e7e2      	b.n	800721a <pow+0xa2>
 8007254:	3ff00000 	.word	0x3ff00000

08007258 <sqrt>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	ed2d 8b02 	vpush	{d8}
 800725e:	ec55 4b10 	vmov	r4, r5, d0
 8007262:	f000 fd53 	bl	8007d0c <__ieee754_sqrt>
 8007266:	4622      	mov	r2, r4
 8007268:	462b      	mov	r3, r5
 800726a:	4620      	mov	r0, r4
 800726c:	4629      	mov	r1, r5
 800726e:	eeb0 8a40 	vmov.f32	s16, s0
 8007272:	eef0 8a60 	vmov.f32	s17, s1
 8007276:	f7f9 fc05 	bl	8000a84 <__aeabi_dcmpun>
 800727a:	b990      	cbnz	r0, 80072a2 <sqrt+0x4a>
 800727c:	2200      	movs	r2, #0
 800727e:	2300      	movs	r3, #0
 8007280:	4620      	mov	r0, r4
 8007282:	4629      	mov	r1, r5
 8007284:	f7f9 fbd6 	bl	8000a34 <__aeabi_dcmplt>
 8007288:	b158      	cbz	r0, 80072a2 <sqrt+0x4a>
 800728a:	f7ff ff43 	bl	8007114 <__errno>
 800728e:	2321      	movs	r3, #33	; 0x21
 8007290:	6003      	str	r3, [r0, #0]
 8007292:	2200      	movs	r2, #0
 8007294:	2300      	movs	r3, #0
 8007296:	4610      	mov	r0, r2
 8007298:	4619      	mov	r1, r3
 800729a:	f7f9 fa83 	bl	80007a4 <__aeabi_ddiv>
 800729e:	ec41 0b18 	vmov	d8, r0, r1
 80072a2:	eeb0 0a48 	vmov.f32	s0, s16
 80072a6:	eef0 0a68 	vmov.f32	s1, s17
 80072aa:	ecbd 8b02 	vpop	{d8}
 80072ae:	bd38      	pop	{r3, r4, r5, pc}

080072b0 <__ieee754_pow>:
 80072b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	ed2d 8b06 	vpush	{d8-d10}
 80072b8:	b089      	sub	sp, #36	; 0x24
 80072ba:	ed8d 1b00 	vstr	d1, [sp]
 80072be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80072c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80072c6:	ea58 0102 	orrs.w	r1, r8, r2
 80072ca:	ec57 6b10 	vmov	r6, r7, d0
 80072ce:	d115      	bne.n	80072fc <__ieee754_pow+0x4c>
 80072d0:	19b3      	adds	r3, r6, r6
 80072d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80072d6:	4152      	adcs	r2, r2
 80072d8:	4299      	cmp	r1, r3
 80072da:	4b89      	ldr	r3, [pc, #548]	; (8007500 <__ieee754_pow+0x250>)
 80072dc:	4193      	sbcs	r3, r2
 80072de:	f080 84d2 	bcs.w	8007c86 <__ieee754_pow+0x9d6>
 80072e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072e6:	4630      	mov	r0, r6
 80072e8:	4639      	mov	r1, r7
 80072ea:	f7f8 ff7b 	bl	80001e4 <__adddf3>
 80072ee:	ec41 0b10 	vmov	d0, r0, r1
 80072f2:	b009      	add	sp, #36	; 0x24
 80072f4:	ecbd 8b06 	vpop	{d8-d10}
 80072f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fc:	4b81      	ldr	r3, [pc, #516]	; (8007504 <__ieee754_pow+0x254>)
 80072fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007302:	429c      	cmp	r4, r3
 8007304:	ee10 aa10 	vmov	sl, s0
 8007308:	463d      	mov	r5, r7
 800730a:	dc06      	bgt.n	800731a <__ieee754_pow+0x6a>
 800730c:	d101      	bne.n	8007312 <__ieee754_pow+0x62>
 800730e:	2e00      	cmp	r6, #0
 8007310:	d1e7      	bne.n	80072e2 <__ieee754_pow+0x32>
 8007312:	4598      	cmp	r8, r3
 8007314:	dc01      	bgt.n	800731a <__ieee754_pow+0x6a>
 8007316:	d10f      	bne.n	8007338 <__ieee754_pow+0x88>
 8007318:	b172      	cbz	r2, 8007338 <__ieee754_pow+0x88>
 800731a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800731e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007322:	ea55 050a 	orrs.w	r5, r5, sl
 8007326:	d1dc      	bne.n	80072e2 <__ieee754_pow+0x32>
 8007328:	e9dd 3200 	ldrd	r3, r2, [sp]
 800732c:	18db      	adds	r3, r3, r3
 800732e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007332:	4152      	adcs	r2, r2
 8007334:	429d      	cmp	r5, r3
 8007336:	e7d0      	b.n	80072da <__ieee754_pow+0x2a>
 8007338:	2d00      	cmp	r5, #0
 800733a:	da3b      	bge.n	80073b4 <__ieee754_pow+0x104>
 800733c:	4b72      	ldr	r3, [pc, #456]	; (8007508 <__ieee754_pow+0x258>)
 800733e:	4598      	cmp	r8, r3
 8007340:	dc51      	bgt.n	80073e6 <__ieee754_pow+0x136>
 8007342:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007346:	4598      	cmp	r8, r3
 8007348:	f340 84ac 	ble.w	8007ca4 <__ieee754_pow+0x9f4>
 800734c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007350:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007354:	2b14      	cmp	r3, #20
 8007356:	dd0f      	ble.n	8007378 <__ieee754_pow+0xc8>
 8007358:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800735c:	fa22 f103 	lsr.w	r1, r2, r3
 8007360:	fa01 f303 	lsl.w	r3, r1, r3
 8007364:	4293      	cmp	r3, r2
 8007366:	f040 849d 	bne.w	8007ca4 <__ieee754_pow+0x9f4>
 800736a:	f001 0101 	and.w	r1, r1, #1
 800736e:	f1c1 0302 	rsb	r3, r1, #2
 8007372:	9304      	str	r3, [sp, #16]
 8007374:	b182      	cbz	r2, 8007398 <__ieee754_pow+0xe8>
 8007376:	e05f      	b.n	8007438 <__ieee754_pow+0x188>
 8007378:	2a00      	cmp	r2, #0
 800737a:	d15b      	bne.n	8007434 <__ieee754_pow+0x184>
 800737c:	f1c3 0314 	rsb	r3, r3, #20
 8007380:	fa48 f103 	asr.w	r1, r8, r3
 8007384:	fa01 f303 	lsl.w	r3, r1, r3
 8007388:	4543      	cmp	r3, r8
 800738a:	f040 8488 	bne.w	8007c9e <__ieee754_pow+0x9ee>
 800738e:	f001 0101 	and.w	r1, r1, #1
 8007392:	f1c1 0302 	rsb	r3, r1, #2
 8007396:	9304      	str	r3, [sp, #16]
 8007398:	4b5c      	ldr	r3, [pc, #368]	; (800750c <__ieee754_pow+0x25c>)
 800739a:	4598      	cmp	r8, r3
 800739c:	d132      	bne.n	8007404 <__ieee754_pow+0x154>
 800739e:	f1b9 0f00 	cmp.w	r9, #0
 80073a2:	f280 8478 	bge.w	8007c96 <__ieee754_pow+0x9e6>
 80073a6:	4959      	ldr	r1, [pc, #356]	; (800750c <__ieee754_pow+0x25c>)
 80073a8:	4632      	mov	r2, r6
 80073aa:	463b      	mov	r3, r7
 80073ac:	2000      	movs	r0, #0
 80073ae:	f7f9 f9f9 	bl	80007a4 <__aeabi_ddiv>
 80073b2:	e79c      	b.n	80072ee <__ieee754_pow+0x3e>
 80073b4:	2300      	movs	r3, #0
 80073b6:	9304      	str	r3, [sp, #16]
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	d13d      	bne.n	8007438 <__ieee754_pow+0x188>
 80073bc:	4b51      	ldr	r3, [pc, #324]	; (8007504 <__ieee754_pow+0x254>)
 80073be:	4598      	cmp	r8, r3
 80073c0:	d1ea      	bne.n	8007398 <__ieee754_pow+0xe8>
 80073c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80073c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80073ca:	ea53 030a 	orrs.w	r3, r3, sl
 80073ce:	f000 845a 	beq.w	8007c86 <__ieee754_pow+0x9d6>
 80073d2:	4b4f      	ldr	r3, [pc, #316]	; (8007510 <__ieee754_pow+0x260>)
 80073d4:	429c      	cmp	r4, r3
 80073d6:	dd08      	ble.n	80073ea <__ieee754_pow+0x13a>
 80073d8:	f1b9 0f00 	cmp.w	r9, #0
 80073dc:	f2c0 8457 	blt.w	8007c8e <__ieee754_pow+0x9de>
 80073e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073e4:	e783      	b.n	80072ee <__ieee754_pow+0x3e>
 80073e6:	2302      	movs	r3, #2
 80073e8:	e7e5      	b.n	80073b6 <__ieee754_pow+0x106>
 80073ea:	f1b9 0f00 	cmp.w	r9, #0
 80073ee:	f04f 0000 	mov.w	r0, #0
 80073f2:	f04f 0100 	mov.w	r1, #0
 80073f6:	f6bf af7a 	bge.w	80072ee <__ieee754_pow+0x3e>
 80073fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80073fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007402:	e774      	b.n	80072ee <__ieee754_pow+0x3e>
 8007404:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007408:	d106      	bne.n	8007418 <__ieee754_pow+0x168>
 800740a:	4632      	mov	r2, r6
 800740c:	463b      	mov	r3, r7
 800740e:	4630      	mov	r0, r6
 8007410:	4639      	mov	r1, r7
 8007412:	f7f9 f89d 	bl	8000550 <__aeabi_dmul>
 8007416:	e76a      	b.n	80072ee <__ieee754_pow+0x3e>
 8007418:	4b3e      	ldr	r3, [pc, #248]	; (8007514 <__ieee754_pow+0x264>)
 800741a:	4599      	cmp	r9, r3
 800741c:	d10c      	bne.n	8007438 <__ieee754_pow+0x188>
 800741e:	2d00      	cmp	r5, #0
 8007420:	db0a      	blt.n	8007438 <__ieee754_pow+0x188>
 8007422:	ec47 6b10 	vmov	d0, r6, r7
 8007426:	b009      	add	sp, #36	; 0x24
 8007428:	ecbd 8b06 	vpop	{d8-d10}
 800742c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007430:	f000 bc6c 	b.w	8007d0c <__ieee754_sqrt>
 8007434:	2300      	movs	r3, #0
 8007436:	9304      	str	r3, [sp, #16]
 8007438:	ec47 6b10 	vmov	d0, r6, r7
 800743c:	f000 fd48 	bl	8007ed0 <fabs>
 8007440:	ec51 0b10 	vmov	r0, r1, d0
 8007444:	f1ba 0f00 	cmp.w	sl, #0
 8007448:	d129      	bne.n	800749e <__ieee754_pow+0x1ee>
 800744a:	b124      	cbz	r4, 8007456 <__ieee754_pow+0x1a6>
 800744c:	4b2f      	ldr	r3, [pc, #188]	; (800750c <__ieee754_pow+0x25c>)
 800744e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007452:	429a      	cmp	r2, r3
 8007454:	d123      	bne.n	800749e <__ieee754_pow+0x1ee>
 8007456:	f1b9 0f00 	cmp.w	r9, #0
 800745a:	da05      	bge.n	8007468 <__ieee754_pow+0x1b8>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	2000      	movs	r0, #0
 8007462:	492a      	ldr	r1, [pc, #168]	; (800750c <__ieee754_pow+0x25c>)
 8007464:	f7f9 f99e 	bl	80007a4 <__aeabi_ddiv>
 8007468:	2d00      	cmp	r5, #0
 800746a:	f6bf af40 	bge.w	80072ee <__ieee754_pow+0x3e>
 800746e:	9b04      	ldr	r3, [sp, #16]
 8007470:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007474:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007478:	4323      	orrs	r3, r4
 800747a:	d108      	bne.n	800748e <__ieee754_pow+0x1de>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4610      	mov	r0, r2
 8007482:	4619      	mov	r1, r3
 8007484:	f7f8 feac 	bl	80001e0 <__aeabi_dsub>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	e78f      	b.n	80073ae <__ieee754_pow+0xfe>
 800748e:	9b04      	ldr	r3, [sp, #16]
 8007490:	2b01      	cmp	r3, #1
 8007492:	f47f af2c 	bne.w	80072ee <__ieee754_pow+0x3e>
 8007496:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800749a:	4619      	mov	r1, r3
 800749c:	e727      	b.n	80072ee <__ieee754_pow+0x3e>
 800749e:	0feb      	lsrs	r3, r5, #31
 80074a0:	3b01      	subs	r3, #1
 80074a2:	9306      	str	r3, [sp, #24]
 80074a4:	9a06      	ldr	r2, [sp, #24]
 80074a6:	9b04      	ldr	r3, [sp, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	d102      	bne.n	80074b2 <__ieee754_pow+0x202>
 80074ac:	4632      	mov	r2, r6
 80074ae:	463b      	mov	r3, r7
 80074b0:	e7e6      	b.n	8007480 <__ieee754_pow+0x1d0>
 80074b2:	4b19      	ldr	r3, [pc, #100]	; (8007518 <__ieee754_pow+0x268>)
 80074b4:	4598      	cmp	r8, r3
 80074b6:	f340 80fb 	ble.w	80076b0 <__ieee754_pow+0x400>
 80074ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80074be:	4598      	cmp	r8, r3
 80074c0:	4b13      	ldr	r3, [pc, #76]	; (8007510 <__ieee754_pow+0x260>)
 80074c2:	dd0c      	ble.n	80074de <__ieee754_pow+0x22e>
 80074c4:	429c      	cmp	r4, r3
 80074c6:	dc0f      	bgt.n	80074e8 <__ieee754_pow+0x238>
 80074c8:	f1b9 0f00 	cmp.w	r9, #0
 80074cc:	da0f      	bge.n	80074ee <__ieee754_pow+0x23e>
 80074ce:	2000      	movs	r0, #0
 80074d0:	b009      	add	sp, #36	; 0x24
 80074d2:	ecbd 8b06 	vpop	{d8-d10}
 80074d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	f000 bcf0 	b.w	8007ebe <__math_oflow>
 80074de:	429c      	cmp	r4, r3
 80074e0:	dbf2      	blt.n	80074c8 <__ieee754_pow+0x218>
 80074e2:	4b0a      	ldr	r3, [pc, #40]	; (800750c <__ieee754_pow+0x25c>)
 80074e4:	429c      	cmp	r4, r3
 80074e6:	dd19      	ble.n	800751c <__ieee754_pow+0x26c>
 80074e8:	f1b9 0f00 	cmp.w	r9, #0
 80074ec:	dcef      	bgt.n	80074ce <__ieee754_pow+0x21e>
 80074ee:	2000      	movs	r0, #0
 80074f0:	b009      	add	sp, #36	; 0x24
 80074f2:	ecbd 8b06 	vpop	{d8-d10}
 80074f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fa:	f000 bcd7 	b.w	8007eac <__math_uflow>
 80074fe:	bf00      	nop
 8007500:	fff00000 	.word	0xfff00000
 8007504:	7ff00000 	.word	0x7ff00000
 8007508:	433fffff 	.word	0x433fffff
 800750c:	3ff00000 	.word	0x3ff00000
 8007510:	3fefffff 	.word	0x3fefffff
 8007514:	3fe00000 	.word	0x3fe00000
 8007518:	41e00000 	.word	0x41e00000
 800751c:	4b60      	ldr	r3, [pc, #384]	; (80076a0 <__ieee754_pow+0x3f0>)
 800751e:	2200      	movs	r2, #0
 8007520:	f7f8 fe5e 	bl	80001e0 <__aeabi_dsub>
 8007524:	a354      	add	r3, pc, #336	; (adr r3, 8007678 <__ieee754_pow+0x3c8>)
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	4604      	mov	r4, r0
 800752c:	460d      	mov	r5, r1
 800752e:	f7f9 f80f 	bl	8000550 <__aeabi_dmul>
 8007532:	a353      	add	r3, pc, #332	; (adr r3, 8007680 <__ieee754_pow+0x3d0>)
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	4606      	mov	r6, r0
 800753a:	460f      	mov	r7, r1
 800753c:	4620      	mov	r0, r4
 800753e:	4629      	mov	r1, r5
 8007540:	f7f9 f806 	bl	8000550 <__aeabi_dmul>
 8007544:	4b57      	ldr	r3, [pc, #348]	; (80076a4 <__ieee754_pow+0x3f4>)
 8007546:	4682      	mov	sl, r0
 8007548:	468b      	mov	fp, r1
 800754a:	2200      	movs	r2, #0
 800754c:	4620      	mov	r0, r4
 800754e:	4629      	mov	r1, r5
 8007550:	f7f8 fffe 	bl	8000550 <__aeabi_dmul>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	a14b      	add	r1, pc, #300	; (adr r1, 8007688 <__ieee754_pow+0x3d8>)
 800755a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800755e:	f7f8 fe3f 	bl	80001e0 <__aeabi_dsub>
 8007562:	4622      	mov	r2, r4
 8007564:	462b      	mov	r3, r5
 8007566:	f7f8 fff3 	bl	8000550 <__aeabi_dmul>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	2000      	movs	r0, #0
 8007570:	494d      	ldr	r1, [pc, #308]	; (80076a8 <__ieee754_pow+0x3f8>)
 8007572:	f7f8 fe35 	bl	80001e0 <__aeabi_dsub>
 8007576:	4622      	mov	r2, r4
 8007578:	4680      	mov	r8, r0
 800757a:	4689      	mov	r9, r1
 800757c:	462b      	mov	r3, r5
 800757e:	4620      	mov	r0, r4
 8007580:	4629      	mov	r1, r5
 8007582:	f7f8 ffe5 	bl	8000550 <__aeabi_dmul>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4640      	mov	r0, r8
 800758c:	4649      	mov	r1, r9
 800758e:	f7f8 ffdf 	bl	8000550 <__aeabi_dmul>
 8007592:	a33f      	add	r3, pc, #252	; (adr r3, 8007690 <__ieee754_pow+0x3e0>)
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f7f8 ffda 	bl	8000550 <__aeabi_dmul>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4650      	mov	r0, sl
 80075a2:	4659      	mov	r1, fp
 80075a4:	f7f8 fe1c 	bl	80001e0 <__aeabi_dsub>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4680      	mov	r8, r0
 80075ae:	4689      	mov	r9, r1
 80075b0:	4630      	mov	r0, r6
 80075b2:	4639      	mov	r1, r7
 80075b4:	f7f8 fe16 	bl	80001e4 <__adddf3>
 80075b8:	2000      	movs	r0, #0
 80075ba:	4632      	mov	r2, r6
 80075bc:	463b      	mov	r3, r7
 80075be:	4604      	mov	r4, r0
 80075c0:	460d      	mov	r5, r1
 80075c2:	f7f8 fe0d 	bl	80001e0 <__aeabi_dsub>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4640      	mov	r0, r8
 80075cc:	4649      	mov	r1, r9
 80075ce:	f7f8 fe07 	bl	80001e0 <__aeabi_dsub>
 80075d2:	9b04      	ldr	r3, [sp, #16]
 80075d4:	9a06      	ldr	r2, [sp, #24]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	4313      	orrs	r3, r2
 80075da:	4682      	mov	sl, r0
 80075dc:	468b      	mov	fp, r1
 80075de:	f040 81e7 	bne.w	80079b0 <__ieee754_pow+0x700>
 80075e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007698 <__ieee754_pow+0x3e8>
 80075e6:	eeb0 8a47 	vmov.f32	s16, s14
 80075ea:	eef0 8a67 	vmov.f32	s17, s15
 80075ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80075f2:	2600      	movs	r6, #0
 80075f4:	4632      	mov	r2, r6
 80075f6:	463b      	mov	r3, r7
 80075f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075fc:	f7f8 fdf0 	bl	80001e0 <__aeabi_dsub>
 8007600:	4622      	mov	r2, r4
 8007602:	462b      	mov	r3, r5
 8007604:	f7f8 ffa4 	bl	8000550 <__aeabi_dmul>
 8007608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800760c:	4680      	mov	r8, r0
 800760e:	4689      	mov	r9, r1
 8007610:	4650      	mov	r0, sl
 8007612:	4659      	mov	r1, fp
 8007614:	f7f8 ff9c 	bl	8000550 <__aeabi_dmul>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4640      	mov	r0, r8
 800761e:	4649      	mov	r1, r9
 8007620:	f7f8 fde0 	bl	80001e4 <__adddf3>
 8007624:	4632      	mov	r2, r6
 8007626:	463b      	mov	r3, r7
 8007628:	4680      	mov	r8, r0
 800762a:	4689      	mov	r9, r1
 800762c:	4620      	mov	r0, r4
 800762e:	4629      	mov	r1, r5
 8007630:	f7f8 ff8e 	bl	8000550 <__aeabi_dmul>
 8007634:	460b      	mov	r3, r1
 8007636:	4604      	mov	r4, r0
 8007638:	460d      	mov	r5, r1
 800763a:	4602      	mov	r2, r0
 800763c:	4649      	mov	r1, r9
 800763e:	4640      	mov	r0, r8
 8007640:	f7f8 fdd0 	bl	80001e4 <__adddf3>
 8007644:	4b19      	ldr	r3, [pc, #100]	; (80076ac <__ieee754_pow+0x3fc>)
 8007646:	4299      	cmp	r1, r3
 8007648:	ec45 4b19 	vmov	d9, r4, r5
 800764c:	4606      	mov	r6, r0
 800764e:	460f      	mov	r7, r1
 8007650:	468b      	mov	fp, r1
 8007652:	f340 82f1 	ble.w	8007c38 <__ieee754_pow+0x988>
 8007656:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800765a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800765e:	4303      	orrs	r3, r0
 8007660:	f000 81e4 	beq.w	8007a2c <__ieee754_pow+0x77c>
 8007664:	ec51 0b18 	vmov	r0, r1, d8
 8007668:	2200      	movs	r2, #0
 800766a:	2300      	movs	r3, #0
 800766c:	f7f9 f9e2 	bl	8000a34 <__aeabi_dcmplt>
 8007670:	3800      	subs	r0, #0
 8007672:	bf18      	it	ne
 8007674:	2001      	movne	r0, #1
 8007676:	e72b      	b.n	80074d0 <__ieee754_pow+0x220>
 8007678:	60000000 	.word	0x60000000
 800767c:	3ff71547 	.word	0x3ff71547
 8007680:	f85ddf44 	.word	0xf85ddf44
 8007684:	3e54ae0b 	.word	0x3e54ae0b
 8007688:	55555555 	.word	0x55555555
 800768c:	3fd55555 	.word	0x3fd55555
 8007690:	652b82fe 	.word	0x652b82fe
 8007694:	3ff71547 	.word	0x3ff71547
 8007698:	00000000 	.word	0x00000000
 800769c:	bff00000 	.word	0xbff00000
 80076a0:	3ff00000 	.word	0x3ff00000
 80076a4:	3fd00000 	.word	0x3fd00000
 80076a8:	3fe00000 	.word	0x3fe00000
 80076ac:	408fffff 	.word	0x408fffff
 80076b0:	4bd5      	ldr	r3, [pc, #852]	; (8007a08 <__ieee754_pow+0x758>)
 80076b2:	402b      	ands	r3, r5
 80076b4:	2200      	movs	r2, #0
 80076b6:	b92b      	cbnz	r3, 80076c4 <__ieee754_pow+0x414>
 80076b8:	4bd4      	ldr	r3, [pc, #848]	; (8007a0c <__ieee754_pow+0x75c>)
 80076ba:	f7f8 ff49 	bl	8000550 <__aeabi_dmul>
 80076be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80076c2:	460c      	mov	r4, r1
 80076c4:	1523      	asrs	r3, r4, #20
 80076c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80076ca:	4413      	add	r3, r2
 80076cc:	9305      	str	r3, [sp, #20]
 80076ce:	4bd0      	ldr	r3, [pc, #832]	; (8007a10 <__ieee754_pow+0x760>)
 80076d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80076d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80076d8:	429c      	cmp	r4, r3
 80076da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80076de:	dd08      	ble.n	80076f2 <__ieee754_pow+0x442>
 80076e0:	4bcc      	ldr	r3, [pc, #816]	; (8007a14 <__ieee754_pow+0x764>)
 80076e2:	429c      	cmp	r4, r3
 80076e4:	f340 8162 	ble.w	80079ac <__ieee754_pow+0x6fc>
 80076e8:	9b05      	ldr	r3, [sp, #20]
 80076ea:	3301      	adds	r3, #1
 80076ec:	9305      	str	r3, [sp, #20]
 80076ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80076f2:	2400      	movs	r4, #0
 80076f4:	00e3      	lsls	r3, r4, #3
 80076f6:	9307      	str	r3, [sp, #28]
 80076f8:	4bc7      	ldr	r3, [pc, #796]	; (8007a18 <__ieee754_pow+0x768>)
 80076fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076fe:	ed93 7b00 	vldr	d7, [r3]
 8007702:	4629      	mov	r1, r5
 8007704:	ec53 2b17 	vmov	r2, r3, d7
 8007708:	eeb0 9a47 	vmov.f32	s18, s14
 800770c:	eef0 9a67 	vmov.f32	s19, s15
 8007710:	4682      	mov	sl, r0
 8007712:	f7f8 fd65 	bl	80001e0 <__aeabi_dsub>
 8007716:	4652      	mov	r2, sl
 8007718:	4606      	mov	r6, r0
 800771a:	460f      	mov	r7, r1
 800771c:	462b      	mov	r3, r5
 800771e:	ec51 0b19 	vmov	r0, r1, d9
 8007722:	f7f8 fd5f 	bl	80001e4 <__adddf3>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	2000      	movs	r0, #0
 800772c:	49bb      	ldr	r1, [pc, #748]	; (8007a1c <__ieee754_pow+0x76c>)
 800772e:	f7f9 f839 	bl	80007a4 <__aeabi_ddiv>
 8007732:	ec41 0b1a 	vmov	d10, r0, r1
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	4630      	mov	r0, r6
 800773c:	4639      	mov	r1, r7
 800773e:	f7f8 ff07 	bl	8000550 <__aeabi_dmul>
 8007742:	2300      	movs	r3, #0
 8007744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007748:	9302      	str	r3, [sp, #8]
 800774a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800774e:	46ab      	mov	fp, r5
 8007750:	106d      	asrs	r5, r5, #1
 8007752:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007756:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800775a:	ec41 0b18 	vmov	d8, r0, r1
 800775e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007762:	2200      	movs	r2, #0
 8007764:	4640      	mov	r0, r8
 8007766:	4649      	mov	r1, r9
 8007768:	4614      	mov	r4, r2
 800776a:	461d      	mov	r5, r3
 800776c:	f7f8 fef0 	bl	8000550 <__aeabi_dmul>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f7f8 fd32 	bl	80001e0 <__aeabi_dsub>
 800777c:	ec53 2b19 	vmov	r2, r3, d9
 8007780:	4606      	mov	r6, r0
 8007782:	460f      	mov	r7, r1
 8007784:	4620      	mov	r0, r4
 8007786:	4629      	mov	r1, r5
 8007788:	f7f8 fd2a 	bl	80001e0 <__aeabi_dsub>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4650      	mov	r0, sl
 8007792:	4659      	mov	r1, fp
 8007794:	f7f8 fd24 	bl	80001e0 <__aeabi_dsub>
 8007798:	4642      	mov	r2, r8
 800779a:	464b      	mov	r3, r9
 800779c:	f7f8 fed8 	bl	8000550 <__aeabi_dmul>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4630      	mov	r0, r6
 80077a6:	4639      	mov	r1, r7
 80077a8:	f7f8 fd1a 	bl	80001e0 <__aeabi_dsub>
 80077ac:	ec53 2b1a 	vmov	r2, r3, d10
 80077b0:	f7f8 fece 	bl	8000550 <__aeabi_dmul>
 80077b4:	ec53 2b18 	vmov	r2, r3, d8
 80077b8:	ec41 0b19 	vmov	d9, r0, r1
 80077bc:	ec51 0b18 	vmov	r0, r1, d8
 80077c0:	f7f8 fec6 	bl	8000550 <__aeabi_dmul>
 80077c4:	a37c      	add	r3, pc, #496	; (adr r3, 80079b8 <__ieee754_pow+0x708>)
 80077c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ca:	4604      	mov	r4, r0
 80077cc:	460d      	mov	r5, r1
 80077ce:	f7f8 febf 	bl	8000550 <__aeabi_dmul>
 80077d2:	a37b      	add	r3, pc, #492	; (adr r3, 80079c0 <__ieee754_pow+0x710>)
 80077d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d8:	f7f8 fd04 	bl	80001e4 <__adddf3>
 80077dc:	4622      	mov	r2, r4
 80077de:	462b      	mov	r3, r5
 80077e0:	f7f8 feb6 	bl	8000550 <__aeabi_dmul>
 80077e4:	a378      	add	r3, pc, #480	; (adr r3, 80079c8 <__ieee754_pow+0x718>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f7f8 fcfb 	bl	80001e4 <__adddf3>
 80077ee:	4622      	mov	r2, r4
 80077f0:	462b      	mov	r3, r5
 80077f2:	f7f8 fead 	bl	8000550 <__aeabi_dmul>
 80077f6:	a376      	add	r3, pc, #472	; (adr r3, 80079d0 <__ieee754_pow+0x720>)
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	f7f8 fcf2 	bl	80001e4 <__adddf3>
 8007800:	4622      	mov	r2, r4
 8007802:	462b      	mov	r3, r5
 8007804:	f7f8 fea4 	bl	8000550 <__aeabi_dmul>
 8007808:	a373      	add	r3, pc, #460	; (adr r3, 80079d8 <__ieee754_pow+0x728>)
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f8 fce9 	bl	80001e4 <__adddf3>
 8007812:	4622      	mov	r2, r4
 8007814:	462b      	mov	r3, r5
 8007816:	f7f8 fe9b 	bl	8000550 <__aeabi_dmul>
 800781a:	a371      	add	r3, pc, #452	; (adr r3, 80079e0 <__ieee754_pow+0x730>)
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f7f8 fce0 	bl	80001e4 <__adddf3>
 8007824:	4622      	mov	r2, r4
 8007826:	4606      	mov	r6, r0
 8007828:	460f      	mov	r7, r1
 800782a:	462b      	mov	r3, r5
 800782c:	4620      	mov	r0, r4
 800782e:	4629      	mov	r1, r5
 8007830:	f7f8 fe8e 	bl	8000550 <__aeabi_dmul>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4630      	mov	r0, r6
 800783a:	4639      	mov	r1, r7
 800783c:	f7f8 fe88 	bl	8000550 <__aeabi_dmul>
 8007840:	4642      	mov	r2, r8
 8007842:	4604      	mov	r4, r0
 8007844:	460d      	mov	r5, r1
 8007846:	464b      	mov	r3, r9
 8007848:	ec51 0b18 	vmov	r0, r1, d8
 800784c:	f7f8 fcca 	bl	80001e4 <__adddf3>
 8007850:	ec53 2b19 	vmov	r2, r3, d9
 8007854:	f7f8 fe7c 	bl	8000550 <__aeabi_dmul>
 8007858:	4622      	mov	r2, r4
 800785a:	462b      	mov	r3, r5
 800785c:	f7f8 fcc2 	bl	80001e4 <__adddf3>
 8007860:	4642      	mov	r2, r8
 8007862:	4682      	mov	sl, r0
 8007864:	468b      	mov	fp, r1
 8007866:	464b      	mov	r3, r9
 8007868:	4640      	mov	r0, r8
 800786a:	4649      	mov	r1, r9
 800786c:	f7f8 fe70 	bl	8000550 <__aeabi_dmul>
 8007870:	4b6b      	ldr	r3, [pc, #428]	; (8007a20 <__ieee754_pow+0x770>)
 8007872:	2200      	movs	r2, #0
 8007874:	4606      	mov	r6, r0
 8007876:	460f      	mov	r7, r1
 8007878:	f7f8 fcb4 	bl	80001e4 <__adddf3>
 800787c:	4652      	mov	r2, sl
 800787e:	465b      	mov	r3, fp
 8007880:	f7f8 fcb0 	bl	80001e4 <__adddf3>
 8007884:	2000      	movs	r0, #0
 8007886:	4604      	mov	r4, r0
 8007888:	460d      	mov	r5, r1
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4640      	mov	r0, r8
 8007890:	4649      	mov	r1, r9
 8007892:	f7f8 fe5d 	bl	8000550 <__aeabi_dmul>
 8007896:	4b62      	ldr	r3, [pc, #392]	; (8007a20 <__ieee754_pow+0x770>)
 8007898:	4680      	mov	r8, r0
 800789a:	4689      	mov	r9, r1
 800789c:	2200      	movs	r2, #0
 800789e:	4620      	mov	r0, r4
 80078a0:	4629      	mov	r1, r5
 80078a2:	f7f8 fc9d 	bl	80001e0 <__aeabi_dsub>
 80078a6:	4632      	mov	r2, r6
 80078a8:	463b      	mov	r3, r7
 80078aa:	f7f8 fc99 	bl	80001e0 <__aeabi_dsub>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4650      	mov	r0, sl
 80078b4:	4659      	mov	r1, fp
 80078b6:	f7f8 fc93 	bl	80001e0 <__aeabi_dsub>
 80078ba:	ec53 2b18 	vmov	r2, r3, d8
 80078be:	f7f8 fe47 	bl	8000550 <__aeabi_dmul>
 80078c2:	4622      	mov	r2, r4
 80078c4:	4606      	mov	r6, r0
 80078c6:	460f      	mov	r7, r1
 80078c8:	462b      	mov	r3, r5
 80078ca:	ec51 0b19 	vmov	r0, r1, d9
 80078ce:	f7f8 fe3f 	bl	8000550 <__aeabi_dmul>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4630      	mov	r0, r6
 80078d8:	4639      	mov	r1, r7
 80078da:	f7f8 fc83 	bl	80001e4 <__adddf3>
 80078de:	4606      	mov	r6, r0
 80078e0:	460f      	mov	r7, r1
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4640      	mov	r0, r8
 80078e8:	4649      	mov	r1, r9
 80078ea:	f7f8 fc7b 	bl	80001e4 <__adddf3>
 80078ee:	a33e      	add	r3, pc, #248	; (adr r3, 80079e8 <__ieee754_pow+0x738>)
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	2000      	movs	r0, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	460d      	mov	r5, r1
 80078fa:	f7f8 fe29 	bl	8000550 <__aeabi_dmul>
 80078fe:	4642      	mov	r2, r8
 8007900:	ec41 0b18 	vmov	d8, r0, r1
 8007904:	464b      	mov	r3, r9
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f8 fc69 	bl	80001e0 <__aeabi_dsub>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4630      	mov	r0, r6
 8007914:	4639      	mov	r1, r7
 8007916:	f7f8 fc63 	bl	80001e0 <__aeabi_dsub>
 800791a:	a335      	add	r3, pc, #212	; (adr r3, 80079f0 <__ieee754_pow+0x740>)
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	f7f8 fe16 	bl	8000550 <__aeabi_dmul>
 8007924:	a334      	add	r3, pc, #208	; (adr r3, 80079f8 <__ieee754_pow+0x748>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	4606      	mov	r6, r0
 800792c:	460f      	mov	r7, r1
 800792e:	4620      	mov	r0, r4
 8007930:	4629      	mov	r1, r5
 8007932:	f7f8 fe0d 	bl	8000550 <__aeabi_dmul>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4630      	mov	r0, r6
 800793c:	4639      	mov	r1, r7
 800793e:	f7f8 fc51 	bl	80001e4 <__adddf3>
 8007942:	9a07      	ldr	r2, [sp, #28]
 8007944:	4b37      	ldr	r3, [pc, #220]	; (8007a24 <__ieee754_pow+0x774>)
 8007946:	4413      	add	r3, r2
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f7f8 fc4a 	bl	80001e4 <__adddf3>
 8007950:	4682      	mov	sl, r0
 8007952:	9805      	ldr	r0, [sp, #20]
 8007954:	468b      	mov	fp, r1
 8007956:	f7f8 fd91 	bl	800047c <__aeabi_i2d>
 800795a:	9a07      	ldr	r2, [sp, #28]
 800795c:	4b32      	ldr	r3, [pc, #200]	; (8007a28 <__ieee754_pow+0x778>)
 800795e:	4413      	add	r3, r2
 8007960:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007964:	4606      	mov	r6, r0
 8007966:	460f      	mov	r7, r1
 8007968:	4652      	mov	r2, sl
 800796a:	465b      	mov	r3, fp
 800796c:	ec51 0b18 	vmov	r0, r1, d8
 8007970:	f7f8 fc38 	bl	80001e4 <__adddf3>
 8007974:	4642      	mov	r2, r8
 8007976:	464b      	mov	r3, r9
 8007978:	f7f8 fc34 	bl	80001e4 <__adddf3>
 800797c:	4632      	mov	r2, r6
 800797e:	463b      	mov	r3, r7
 8007980:	f7f8 fc30 	bl	80001e4 <__adddf3>
 8007984:	2000      	movs	r0, #0
 8007986:	4632      	mov	r2, r6
 8007988:	463b      	mov	r3, r7
 800798a:	4604      	mov	r4, r0
 800798c:	460d      	mov	r5, r1
 800798e:	f7f8 fc27 	bl	80001e0 <__aeabi_dsub>
 8007992:	4642      	mov	r2, r8
 8007994:	464b      	mov	r3, r9
 8007996:	f7f8 fc23 	bl	80001e0 <__aeabi_dsub>
 800799a:	ec53 2b18 	vmov	r2, r3, d8
 800799e:	f7f8 fc1f 	bl	80001e0 <__aeabi_dsub>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4650      	mov	r0, sl
 80079a8:	4659      	mov	r1, fp
 80079aa:	e610      	b.n	80075ce <__ieee754_pow+0x31e>
 80079ac:	2401      	movs	r4, #1
 80079ae:	e6a1      	b.n	80076f4 <__ieee754_pow+0x444>
 80079b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007a00 <__ieee754_pow+0x750>
 80079b4:	e617      	b.n	80075e6 <__ieee754_pow+0x336>
 80079b6:	bf00      	nop
 80079b8:	4a454eef 	.word	0x4a454eef
 80079bc:	3fca7e28 	.word	0x3fca7e28
 80079c0:	93c9db65 	.word	0x93c9db65
 80079c4:	3fcd864a 	.word	0x3fcd864a
 80079c8:	a91d4101 	.word	0xa91d4101
 80079cc:	3fd17460 	.word	0x3fd17460
 80079d0:	518f264d 	.word	0x518f264d
 80079d4:	3fd55555 	.word	0x3fd55555
 80079d8:	db6fabff 	.word	0xdb6fabff
 80079dc:	3fdb6db6 	.word	0x3fdb6db6
 80079e0:	33333303 	.word	0x33333303
 80079e4:	3fe33333 	.word	0x3fe33333
 80079e8:	e0000000 	.word	0xe0000000
 80079ec:	3feec709 	.word	0x3feec709
 80079f0:	dc3a03fd 	.word	0xdc3a03fd
 80079f4:	3feec709 	.word	0x3feec709
 80079f8:	145b01f5 	.word	0x145b01f5
 80079fc:	be3e2fe0 	.word	0xbe3e2fe0
 8007a00:	00000000 	.word	0x00000000
 8007a04:	3ff00000 	.word	0x3ff00000
 8007a08:	7ff00000 	.word	0x7ff00000
 8007a0c:	43400000 	.word	0x43400000
 8007a10:	0003988e 	.word	0x0003988e
 8007a14:	000bb679 	.word	0x000bb679
 8007a18:	08008040 	.word	0x08008040
 8007a1c:	3ff00000 	.word	0x3ff00000
 8007a20:	40080000 	.word	0x40080000
 8007a24:	08008060 	.word	0x08008060
 8007a28:	08008050 	.word	0x08008050
 8007a2c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007d04 <__ieee754_pow+0xa54>)
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	4640      	mov	r0, r8
 8007a34:	4649      	mov	r1, r9
 8007a36:	f7f8 fbd5 	bl	80001e4 <__adddf3>
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	ec41 0b1a 	vmov	d10, r0, r1
 8007a40:	462b      	mov	r3, r5
 8007a42:	4630      	mov	r0, r6
 8007a44:	4639      	mov	r1, r7
 8007a46:	f7f8 fbcb 	bl	80001e0 <__aeabi_dsub>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	ec51 0b1a 	vmov	r0, r1, d10
 8007a52:	f7f9 f80d 	bl	8000a70 <__aeabi_dcmpgt>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f47f ae04 	bne.w	8007664 <__ieee754_pow+0x3b4>
 8007a5c:	4aa4      	ldr	r2, [pc, #656]	; (8007cf0 <__ieee754_pow+0xa40>)
 8007a5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a62:	4293      	cmp	r3, r2
 8007a64:	f340 8108 	ble.w	8007c78 <__ieee754_pow+0x9c8>
 8007a68:	151b      	asrs	r3, r3, #20
 8007a6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007a6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007a72:	fa4a f303 	asr.w	r3, sl, r3
 8007a76:	445b      	add	r3, fp
 8007a78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007a7c:	4e9d      	ldr	r6, [pc, #628]	; (8007cf4 <__ieee754_pow+0xa44>)
 8007a7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007a82:	4116      	asrs	r6, r2
 8007a84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007a88:	2000      	movs	r0, #0
 8007a8a:	ea23 0106 	bic.w	r1, r3, r6
 8007a8e:	f1c2 0214 	rsb	r2, r2, #20
 8007a92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007a96:	fa4a fa02 	asr.w	sl, sl, r2
 8007a9a:	f1bb 0f00 	cmp.w	fp, #0
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	bfb8      	it	lt
 8007aa8:	f1ca 0a00 	rsblt	sl, sl, #0
 8007aac:	f7f8 fb98 	bl	80001e0 <__aeabi_dsub>
 8007ab0:	ec41 0b19 	vmov	d9, r0, r1
 8007ab4:	4642      	mov	r2, r8
 8007ab6:	464b      	mov	r3, r9
 8007ab8:	ec51 0b19 	vmov	r0, r1, d9
 8007abc:	f7f8 fb92 	bl	80001e4 <__adddf3>
 8007ac0:	a37b      	add	r3, pc, #492	; (adr r3, 8007cb0 <__ieee754_pow+0xa00>)
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	4604      	mov	r4, r0
 8007aca:	460d      	mov	r5, r1
 8007acc:	f7f8 fd40 	bl	8000550 <__aeabi_dmul>
 8007ad0:	ec53 2b19 	vmov	r2, r3, d9
 8007ad4:	4606      	mov	r6, r0
 8007ad6:	460f      	mov	r7, r1
 8007ad8:	4620      	mov	r0, r4
 8007ada:	4629      	mov	r1, r5
 8007adc:	f7f8 fb80 	bl	80001e0 <__aeabi_dsub>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	f7f8 fb7a 	bl	80001e0 <__aeabi_dsub>
 8007aec:	a372      	add	r3, pc, #456	; (adr r3, 8007cb8 <__ieee754_pow+0xa08>)
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	f7f8 fd2d 	bl	8000550 <__aeabi_dmul>
 8007af6:	a372      	add	r3, pc, #456	; (adr r3, 8007cc0 <__ieee754_pow+0xa10>)
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	4680      	mov	r8, r0
 8007afe:	4689      	mov	r9, r1
 8007b00:	4620      	mov	r0, r4
 8007b02:	4629      	mov	r1, r5
 8007b04:	f7f8 fd24 	bl	8000550 <__aeabi_dmul>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	4649      	mov	r1, r9
 8007b10:	f7f8 fb68 	bl	80001e4 <__adddf3>
 8007b14:	4604      	mov	r4, r0
 8007b16:	460d      	mov	r5, r1
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	4639      	mov	r1, r7
 8007b20:	f7f8 fb60 	bl	80001e4 <__adddf3>
 8007b24:	4632      	mov	r2, r6
 8007b26:	463b      	mov	r3, r7
 8007b28:	4680      	mov	r8, r0
 8007b2a:	4689      	mov	r9, r1
 8007b2c:	f7f8 fb58 	bl	80001e0 <__aeabi_dsub>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4620      	mov	r0, r4
 8007b36:	4629      	mov	r1, r5
 8007b38:	f7f8 fb52 	bl	80001e0 <__aeabi_dsub>
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	4606      	mov	r6, r0
 8007b40:	460f      	mov	r7, r1
 8007b42:	464b      	mov	r3, r9
 8007b44:	4640      	mov	r0, r8
 8007b46:	4649      	mov	r1, r9
 8007b48:	f7f8 fd02 	bl	8000550 <__aeabi_dmul>
 8007b4c:	a35e      	add	r3, pc, #376	; (adr r3, 8007cc8 <__ieee754_pow+0xa18>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	4604      	mov	r4, r0
 8007b54:	460d      	mov	r5, r1
 8007b56:	f7f8 fcfb 	bl	8000550 <__aeabi_dmul>
 8007b5a:	a35d      	add	r3, pc, #372	; (adr r3, 8007cd0 <__ieee754_pow+0xa20>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fb3e 	bl	80001e0 <__aeabi_dsub>
 8007b64:	4622      	mov	r2, r4
 8007b66:	462b      	mov	r3, r5
 8007b68:	f7f8 fcf2 	bl	8000550 <__aeabi_dmul>
 8007b6c:	a35a      	add	r3, pc, #360	; (adr r3, 8007cd8 <__ieee754_pow+0xa28>)
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f8 fb37 	bl	80001e4 <__adddf3>
 8007b76:	4622      	mov	r2, r4
 8007b78:	462b      	mov	r3, r5
 8007b7a:	f7f8 fce9 	bl	8000550 <__aeabi_dmul>
 8007b7e:	a358      	add	r3, pc, #352	; (adr r3, 8007ce0 <__ieee754_pow+0xa30>)
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f7f8 fb2c 	bl	80001e0 <__aeabi_dsub>
 8007b88:	4622      	mov	r2, r4
 8007b8a:	462b      	mov	r3, r5
 8007b8c:	f7f8 fce0 	bl	8000550 <__aeabi_dmul>
 8007b90:	a355      	add	r3, pc, #340	; (adr r3, 8007ce8 <__ieee754_pow+0xa38>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f7f8 fb25 	bl	80001e4 <__adddf3>
 8007b9a:	4622      	mov	r2, r4
 8007b9c:	462b      	mov	r3, r5
 8007b9e:	f7f8 fcd7 	bl	8000550 <__aeabi_dmul>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	4649      	mov	r1, r9
 8007baa:	f7f8 fb19 	bl	80001e0 <__aeabi_dsub>
 8007bae:	4604      	mov	r4, r0
 8007bb0:	460d      	mov	r5, r1
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	4649      	mov	r1, r9
 8007bba:	f7f8 fcc9 	bl	8000550 <__aeabi_dmul>
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	ec41 0b19 	vmov	d9, r0, r1
 8007bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bc8:	4620      	mov	r0, r4
 8007bca:	4629      	mov	r1, r5
 8007bcc:	f7f8 fb08 	bl	80001e0 <__aeabi_dsub>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	ec51 0b19 	vmov	r0, r1, d9
 8007bd8:	f7f8 fde4 	bl	80007a4 <__aeabi_ddiv>
 8007bdc:	4632      	mov	r2, r6
 8007bde:	4604      	mov	r4, r0
 8007be0:	460d      	mov	r5, r1
 8007be2:	463b      	mov	r3, r7
 8007be4:	4640      	mov	r0, r8
 8007be6:	4649      	mov	r1, r9
 8007be8:	f7f8 fcb2 	bl	8000550 <__aeabi_dmul>
 8007bec:	4632      	mov	r2, r6
 8007bee:	463b      	mov	r3, r7
 8007bf0:	f7f8 faf8 	bl	80001e4 <__adddf3>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	f7f8 faf0 	bl	80001e0 <__aeabi_dsub>
 8007c00:	4642      	mov	r2, r8
 8007c02:	464b      	mov	r3, r9
 8007c04:	f7f8 faec 	bl	80001e0 <__aeabi_dsub>
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	493a      	ldr	r1, [pc, #232]	; (8007cf8 <__ieee754_pow+0xa48>)
 8007c0e:	2000      	movs	r0, #0
 8007c10:	f7f8 fae6 	bl	80001e0 <__aeabi_dsub>
 8007c14:	ec41 0b10 	vmov	d0, r0, r1
 8007c18:	ee10 3a90 	vmov	r3, s1
 8007c1c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007c20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c24:	da2b      	bge.n	8007c7e <__ieee754_pow+0x9ce>
 8007c26:	4650      	mov	r0, sl
 8007c28:	f000 f966 	bl	8007ef8 <scalbn>
 8007c2c:	ec51 0b10 	vmov	r0, r1, d0
 8007c30:	ec53 2b18 	vmov	r2, r3, d8
 8007c34:	f7ff bbed 	b.w	8007412 <__ieee754_pow+0x162>
 8007c38:	4b30      	ldr	r3, [pc, #192]	; (8007cfc <__ieee754_pow+0xa4c>)
 8007c3a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007c3e:	429e      	cmp	r6, r3
 8007c40:	f77f af0c 	ble.w	8007a5c <__ieee754_pow+0x7ac>
 8007c44:	4b2e      	ldr	r3, [pc, #184]	; (8007d00 <__ieee754_pow+0xa50>)
 8007c46:	440b      	add	r3, r1
 8007c48:	4303      	orrs	r3, r0
 8007c4a:	d009      	beq.n	8007c60 <__ieee754_pow+0x9b0>
 8007c4c:	ec51 0b18 	vmov	r0, r1, d8
 8007c50:	2200      	movs	r2, #0
 8007c52:	2300      	movs	r3, #0
 8007c54:	f7f8 feee 	bl	8000a34 <__aeabi_dcmplt>
 8007c58:	3800      	subs	r0, #0
 8007c5a:	bf18      	it	ne
 8007c5c:	2001      	movne	r0, #1
 8007c5e:	e447      	b.n	80074f0 <__ieee754_pow+0x240>
 8007c60:	4622      	mov	r2, r4
 8007c62:	462b      	mov	r3, r5
 8007c64:	f7f8 fabc 	bl	80001e0 <__aeabi_dsub>
 8007c68:	4642      	mov	r2, r8
 8007c6a:	464b      	mov	r3, r9
 8007c6c:	f7f8 fef6 	bl	8000a5c <__aeabi_dcmpge>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	f43f aef3 	beq.w	8007a5c <__ieee754_pow+0x7ac>
 8007c76:	e7e9      	b.n	8007c4c <__ieee754_pow+0x99c>
 8007c78:	f04f 0a00 	mov.w	sl, #0
 8007c7c:	e71a      	b.n	8007ab4 <__ieee754_pow+0x804>
 8007c7e:	ec51 0b10 	vmov	r0, r1, d0
 8007c82:	4619      	mov	r1, r3
 8007c84:	e7d4      	b.n	8007c30 <__ieee754_pow+0x980>
 8007c86:	491c      	ldr	r1, [pc, #112]	; (8007cf8 <__ieee754_pow+0xa48>)
 8007c88:	2000      	movs	r0, #0
 8007c8a:	f7ff bb30 	b.w	80072ee <__ieee754_pow+0x3e>
 8007c8e:	2000      	movs	r0, #0
 8007c90:	2100      	movs	r1, #0
 8007c92:	f7ff bb2c 	b.w	80072ee <__ieee754_pow+0x3e>
 8007c96:	4630      	mov	r0, r6
 8007c98:	4639      	mov	r1, r7
 8007c9a:	f7ff bb28 	b.w	80072ee <__ieee754_pow+0x3e>
 8007c9e:	9204      	str	r2, [sp, #16]
 8007ca0:	f7ff bb7a 	b.w	8007398 <__ieee754_pow+0xe8>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f7ff bb64 	b.w	8007372 <__ieee754_pow+0xc2>
 8007caa:	bf00      	nop
 8007cac:	f3af 8000 	nop.w
 8007cb0:	00000000 	.word	0x00000000
 8007cb4:	3fe62e43 	.word	0x3fe62e43
 8007cb8:	fefa39ef 	.word	0xfefa39ef
 8007cbc:	3fe62e42 	.word	0x3fe62e42
 8007cc0:	0ca86c39 	.word	0x0ca86c39
 8007cc4:	be205c61 	.word	0xbe205c61
 8007cc8:	72bea4d0 	.word	0x72bea4d0
 8007ccc:	3e663769 	.word	0x3e663769
 8007cd0:	c5d26bf1 	.word	0xc5d26bf1
 8007cd4:	3ebbbd41 	.word	0x3ebbbd41
 8007cd8:	af25de2c 	.word	0xaf25de2c
 8007cdc:	3f11566a 	.word	0x3f11566a
 8007ce0:	16bebd93 	.word	0x16bebd93
 8007ce4:	3f66c16c 	.word	0x3f66c16c
 8007ce8:	5555553e 	.word	0x5555553e
 8007cec:	3fc55555 	.word	0x3fc55555
 8007cf0:	3fe00000 	.word	0x3fe00000
 8007cf4:	000fffff 	.word	0x000fffff
 8007cf8:	3ff00000 	.word	0x3ff00000
 8007cfc:	4090cbff 	.word	0x4090cbff
 8007d00:	3f6f3400 	.word	0x3f6f3400
 8007d04:	652b82fe 	.word	0x652b82fe
 8007d08:	3c971547 	.word	0x3c971547

08007d0c <__ieee754_sqrt>:
 8007d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d10:	ec55 4b10 	vmov	r4, r5, d0
 8007d14:	4e55      	ldr	r6, [pc, #340]	; (8007e6c <__ieee754_sqrt+0x160>)
 8007d16:	43ae      	bics	r6, r5
 8007d18:	ee10 0a10 	vmov	r0, s0
 8007d1c:	ee10 3a10 	vmov	r3, s0
 8007d20:	462a      	mov	r2, r5
 8007d22:	4629      	mov	r1, r5
 8007d24:	d110      	bne.n	8007d48 <__ieee754_sqrt+0x3c>
 8007d26:	ee10 2a10 	vmov	r2, s0
 8007d2a:	462b      	mov	r3, r5
 8007d2c:	f7f8 fc10 	bl	8000550 <__aeabi_dmul>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4620      	mov	r0, r4
 8007d36:	4629      	mov	r1, r5
 8007d38:	f7f8 fa54 	bl	80001e4 <__adddf3>
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	460d      	mov	r5, r1
 8007d40:	ec45 4b10 	vmov	d0, r4, r5
 8007d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d48:	2d00      	cmp	r5, #0
 8007d4a:	dc10      	bgt.n	8007d6e <__ieee754_sqrt+0x62>
 8007d4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007d50:	4330      	orrs	r0, r6
 8007d52:	d0f5      	beq.n	8007d40 <__ieee754_sqrt+0x34>
 8007d54:	b15d      	cbz	r5, 8007d6e <__ieee754_sqrt+0x62>
 8007d56:	ee10 2a10 	vmov	r2, s0
 8007d5a:	462b      	mov	r3, r5
 8007d5c:	ee10 0a10 	vmov	r0, s0
 8007d60:	f7f8 fa3e 	bl	80001e0 <__aeabi_dsub>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	f7f8 fd1c 	bl	80007a4 <__aeabi_ddiv>
 8007d6c:	e7e6      	b.n	8007d3c <__ieee754_sqrt+0x30>
 8007d6e:	1512      	asrs	r2, r2, #20
 8007d70:	d074      	beq.n	8007e5c <__ieee754_sqrt+0x150>
 8007d72:	07d4      	lsls	r4, r2, #31
 8007d74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007d78:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007d7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007d80:	bf5e      	ittt	pl
 8007d82:	0fda      	lsrpl	r2, r3, #31
 8007d84:	005b      	lslpl	r3, r3, #1
 8007d86:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007d8a:	2400      	movs	r4, #0
 8007d8c:	0fda      	lsrs	r2, r3, #31
 8007d8e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007d92:	107f      	asrs	r7, r7, #1
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	2516      	movs	r5, #22
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007d9e:	1886      	adds	r6, r0, r2
 8007da0:	428e      	cmp	r6, r1
 8007da2:	bfde      	ittt	le
 8007da4:	1b89      	suble	r1, r1, r6
 8007da6:	18b0      	addle	r0, r6, r2
 8007da8:	18a4      	addle	r4, r4, r2
 8007daa:	0049      	lsls	r1, r1, #1
 8007dac:	3d01      	subs	r5, #1
 8007dae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007db2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007db6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007dba:	d1f0      	bne.n	8007d9e <__ieee754_sqrt+0x92>
 8007dbc:	462a      	mov	r2, r5
 8007dbe:	f04f 0e20 	mov.w	lr, #32
 8007dc2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007dc6:	4281      	cmp	r1, r0
 8007dc8:	eb06 0c05 	add.w	ip, r6, r5
 8007dcc:	dc02      	bgt.n	8007dd4 <__ieee754_sqrt+0xc8>
 8007dce:	d113      	bne.n	8007df8 <__ieee754_sqrt+0xec>
 8007dd0:	459c      	cmp	ip, r3
 8007dd2:	d811      	bhi.n	8007df8 <__ieee754_sqrt+0xec>
 8007dd4:	f1bc 0f00 	cmp.w	ip, #0
 8007dd8:	eb0c 0506 	add.w	r5, ip, r6
 8007ddc:	da43      	bge.n	8007e66 <__ieee754_sqrt+0x15a>
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	db41      	blt.n	8007e66 <__ieee754_sqrt+0x15a>
 8007de2:	f100 0801 	add.w	r8, r0, #1
 8007de6:	1a09      	subs	r1, r1, r0
 8007de8:	459c      	cmp	ip, r3
 8007dea:	bf88      	it	hi
 8007dec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007df0:	eba3 030c 	sub.w	r3, r3, ip
 8007df4:	4432      	add	r2, r6
 8007df6:	4640      	mov	r0, r8
 8007df8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007dfc:	f1be 0e01 	subs.w	lr, lr, #1
 8007e00:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007e04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007e0c:	d1db      	bne.n	8007dc6 <__ieee754_sqrt+0xba>
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	d006      	beq.n	8007e20 <__ieee754_sqrt+0x114>
 8007e12:	1c50      	adds	r0, r2, #1
 8007e14:	bf13      	iteet	ne
 8007e16:	3201      	addne	r2, #1
 8007e18:	3401      	addeq	r4, #1
 8007e1a:	4672      	moveq	r2, lr
 8007e1c:	f022 0201 	bicne.w	r2, r2, #1
 8007e20:	1063      	asrs	r3, r4, #1
 8007e22:	0852      	lsrs	r2, r2, #1
 8007e24:	07e1      	lsls	r1, r4, #31
 8007e26:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007e2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007e2e:	bf48      	it	mi
 8007e30:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007e34:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007e38:	4614      	mov	r4, r2
 8007e3a:	e781      	b.n	8007d40 <__ieee754_sqrt+0x34>
 8007e3c:	0ad9      	lsrs	r1, r3, #11
 8007e3e:	3815      	subs	r0, #21
 8007e40:	055b      	lsls	r3, r3, #21
 8007e42:	2900      	cmp	r1, #0
 8007e44:	d0fa      	beq.n	8007e3c <__ieee754_sqrt+0x130>
 8007e46:	02cd      	lsls	r5, r1, #11
 8007e48:	d50a      	bpl.n	8007e60 <__ieee754_sqrt+0x154>
 8007e4a:	f1c2 0420 	rsb	r4, r2, #32
 8007e4e:	fa23 f404 	lsr.w	r4, r3, r4
 8007e52:	1e55      	subs	r5, r2, #1
 8007e54:	4093      	lsls	r3, r2
 8007e56:	4321      	orrs	r1, r4
 8007e58:	1b42      	subs	r2, r0, r5
 8007e5a:	e78a      	b.n	8007d72 <__ieee754_sqrt+0x66>
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	e7f0      	b.n	8007e42 <__ieee754_sqrt+0x136>
 8007e60:	0049      	lsls	r1, r1, #1
 8007e62:	3201      	adds	r2, #1
 8007e64:	e7ef      	b.n	8007e46 <__ieee754_sqrt+0x13a>
 8007e66:	4680      	mov	r8, r0
 8007e68:	e7bd      	b.n	8007de6 <__ieee754_sqrt+0xda>
 8007e6a:	bf00      	nop
 8007e6c:	7ff00000 	.word	0x7ff00000

08007e70 <with_errno>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	4604      	mov	r4, r0
 8007e74:	460d      	mov	r5, r1
 8007e76:	4616      	mov	r6, r2
 8007e78:	f7ff f94c 	bl	8007114 <__errno>
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	6006      	str	r6, [r0, #0]
 8007e80:	4620      	mov	r0, r4
 8007e82:	bd70      	pop	{r4, r5, r6, pc}

08007e84 <xflow>:
 8007e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e86:	4614      	mov	r4, r2
 8007e88:	461d      	mov	r5, r3
 8007e8a:	b108      	cbz	r0, 8007e90 <xflow+0xc>
 8007e8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007e90:	e9cd 2300 	strd	r2, r3, [sp]
 8007e94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e98:	4620      	mov	r0, r4
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	f7f8 fb58 	bl	8000550 <__aeabi_dmul>
 8007ea0:	2222      	movs	r2, #34	; 0x22
 8007ea2:	b003      	add	sp, #12
 8007ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ea8:	f7ff bfe2 	b.w	8007e70 <with_errno>

08007eac <__math_uflow>:
 8007eac:	b508      	push	{r3, lr}
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007eb4:	f7ff ffe6 	bl	8007e84 <xflow>
 8007eb8:	ec41 0b10 	vmov	d0, r0, r1
 8007ebc:	bd08      	pop	{r3, pc}

08007ebe <__math_oflow>:
 8007ebe:	b508      	push	{r3, lr}
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007ec6:	f7ff ffdd 	bl	8007e84 <xflow>
 8007eca:	ec41 0b10 	vmov	d0, r0, r1
 8007ece:	bd08      	pop	{r3, pc}

08007ed0 <fabs>:
 8007ed0:	ec51 0b10 	vmov	r0, r1, d0
 8007ed4:	ee10 2a10 	vmov	r2, s0
 8007ed8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007edc:	ec43 2b10 	vmov	d0, r2, r3
 8007ee0:	4770      	bx	lr

08007ee2 <finite>:
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	ed8d 0b00 	vstr	d0, [sp]
 8007ee8:	9801      	ldr	r0, [sp, #4]
 8007eea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007eee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007ef2:	0fc0      	lsrs	r0, r0, #31
 8007ef4:	b002      	add	sp, #8
 8007ef6:	4770      	bx	lr

08007ef8 <scalbn>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	ec55 4b10 	vmov	r4, r5, d0
 8007efe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007f02:	4606      	mov	r6, r0
 8007f04:	462b      	mov	r3, r5
 8007f06:	b99a      	cbnz	r2, 8007f30 <scalbn+0x38>
 8007f08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007f0c:	4323      	orrs	r3, r4
 8007f0e:	d036      	beq.n	8007f7e <scalbn+0x86>
 8007f10:	4b39      	ldr	r3, [pc, #228]	; (8007ff8 <scalbn+0x100>)
 8007f12:	4629      	mov	r1, r5
 8007f14:	ee10 0a10 	vmov	r0, s0
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f7f8 fb19 	bl	8000550 <__aeabi_dmul>
 8007f1e:	4b37      	ldr	r3, [pc, #220]	; (8007ffc <scalbn+0x104>)
 8007f20:	429e      	cmp	r6, r3
 8007f22:	4604      	mov	r4, r0
 8007f24:	460d      	mov	r5, r1
 8007f26:	da10      	bge.n	8007f4a <scalbn+0x52>
 8007f28:	a32b      	add	r3, pc, #172	; (adr r3, 8007fd8 <scalbn+0xe0>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	e03a      	b.n	8007fa6 <scalbn+0xae>
 8007f30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007f34:	428a      	cmp	r2, r1
 8007f36:	d10c      	bne.n	8007f52 <scalbn+0x5a>
 8007f38:	ee10 2a10 	vmov	r2, s0
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7f8 f950 	bl	80001e4 <__adddf3>
 8007f44:	4604      	mov	r4, r0
 8007f46:	460d      	mov	r5, r1
 8007f48:	e019      	b.n	8007f7e <scalbn+0x86>
 8007f4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007f4e:	460b      	mov	r3, r1
 8007f50:	3a36      	subs	r2, #54	; 0x36
 8007f52:	4432      	add	r2, r6
 8007f54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007f58:	428a      	cmp	r2, r1
 8007f5a:	dd08      	ble.n	8007f6e <scalbn+0x76>
 8007f5c:	2d00      	cmp	r5, #0
 8007f5e:	a120      	add	r1, pc, #128	; (adr r1, 8007fe0 <scalbn+0xe8>)
 8007f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f64:	da1c      	bge.n	8007fa0 <scalbn+0xa8>
 8007f66:	a120      	add	r1, pc, #128	; (adr r1, 8007fe8 <scalbn+0xf0>)
 8007f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f6c:	e018      	b.n	8007fa0 <scalbn+0xa8>
 8007f6e:	2a00      	cmp	r2, #0
 8007f70:	dd08      	ble.n	8007f84 <scalbn+0x8c>
 8007f72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007f7e:	ec45 4b10 	vmov	d0, r4, r5
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007f88:	da19      	bge.n	8007fbe <scalbn+0xc6>
 8007f8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007f8e:	429e      	cmp	r6, r3
 8007f90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007f94:	dd0a      	ble.n	8007fac <scalbn+0xb4>
 8007f96:	a112      	add	r1, pc, #72	; (adr r1, 8007fe0 <scalbn+0xe8>)
 8007f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e2      	bne.n	8007f66 <scalbn+0x6e>
 8007fa0:	a30f      	add	r3, pc, #60	; (adr r3, 8007fe0 <scalbn+0xe8>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 fad3 	bl	8000550 <__aeabi_dmul>
 8007faa:	e7cb      	b.n	8007f44 <scalbn+0x4c>
 8007fac:	a10a      	add	r1, pc, #40	; (adr r1, 8007fd8 <scalbn+0xe0>)
 8007fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0b8      	beq.n	8007f28 <scalbn+0x30>
 8007fb6:	a10e      	add	r1, pc, #56	; (adr r1, 8007ff0 <scalbn+0xf8>)
 8007fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fbc:	e7b4      	b.n	8007f28 <scalbn+0x30>
 8007fbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007fc2:	3236      	adds	r2, #54	; 0x36
 8007fc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007fc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007fcc:	4620      	mov	r0, r4
 8007fce:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <scalbn+0x108>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	e7e8      	b.n	8007fa6 <scalbn+0xae>
 8007fd4:	f3af 8000 	nop.w
 8007fd8:	c2f8f359 	.word	0xc2f8f359
 8007fdc:	01a56e1f 	.word	0x01a56e1f
 8007fe0:	8800759c 	.word	0x8800759c
 8007fe4:	7e37e43c 	.word	0x7e37e43c
 8007fe8:	8800759c 	.word	0x8800759c
 8007fec:	fe37e43c 	.word	0xfe37e43c
 8007ff0:	c2f8f359 	.word	0xc2f8f359
 8007ff4:	81a56e1f 	.word	0x81a56e1f
 8007ff8:	43500000 	.word	0x43500000
 8007ffc:	ffff3cb0 	.word	0xffff3cb0
 8008000:	3c900000 	.word	0x3c900000

08008004 <_init>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	bf00      	nop
 8008008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800a:	bc08      	pop	{r3}
 800800c:	469e      	mov	lr, r3
 800800e:	4770      	bx	lr

08008010 <_fini>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	bf00      	nop
 8008014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008016:	bc08      	pop	{r3}
 8008018:	469e      	mov	lr, r3
 800801a:	4770      	bx	lr
